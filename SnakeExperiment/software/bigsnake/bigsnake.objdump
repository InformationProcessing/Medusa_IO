
bigsnake.elf:     file format elf32-littlenios2
bigsnake.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800234

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000de60 memsz 0x0000de60 flags r-x
    LOAD off    0x0000ee80 vaddr 0x0080de80 paddr 0x0080f9a0 align 2**12
         filesz 0x00001b20 memsz 0x00001b20 flags rw-
    LOAD off    0x000114c0 vaddr 0x008114c0 paddr 0x008114c0 align 2**12
         filesz 0x00000000 memsz 0x000073dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d7d0  00800234  00800234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000047c  0080da04  0080da04  0000ea04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b20  0080de80  0080f9a0  0000ee80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073dc  008114c0  008114c0  000114c0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081889c  0081889c  000109a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000109a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b70  00000000  00000000  000109c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001fde0  00000000  00000000  00011538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000079dd  00000000  00000000  00031318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00009247  00000000  00000000  00038cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002558  00000000  00000000  00041f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038a1  00000000  00000000  00044494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  00047d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0004c810  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  0004c820  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00050c06  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00050c0c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00050c0f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00050c10  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00050c11  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00050c15  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00050c19  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00050c1d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00050c26  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00050c2f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  00050c38  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  00050c3d  2**0
                  CONTENTS, READONLY
 29 .jdi          0000433a  00000000  00000000  00050c70  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00092485  00000000  00000000  00054faa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800234 l    d  .text	00000000 .text
0080da04 l    d  .rodata	00000000 .rodata
0080de80 l    d  .rwdata	00000000 .rwdata
008114c0 l    d  .bss	00000000 .bss
0081889c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bigsnake_bsp//obj/HAL/src/crt0.o
0080026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00800594 l     F .text	00000008 __fp_unlock
008005a8 l     F .text	0000019c __sinit.part.1
00800744 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080de80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00803234 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00803348 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00803374 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00803468 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00803550 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080363c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00803810 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080f914 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00803a84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0080f918 l     O .rwdata	00000004 lockid
008114e0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0080f91c l     O .rwdata	00000004 lockid
008114e8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
008054bc l     F .text	00000048 OS_InitMisc
00805504 l     F .text	0000006c OS_InitRdyList
00805670 l     F .text	000000e4 OS_InitTCBList
008053dc l     F .text	000000e0 OS_InitEventList
00805570 l     F .text	00000080 OS_InitTaskIdle
008055f0 l     F .text	00000080 OS_InitTaskStat
008058e0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
008075f0 l     F .text	000000f4 OS_FlagTaskRdy
008073b0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080b6c8 l     F .text	00000034 alt_dev_reg
0080e854 l     O .rwdata	0000106c jtag_uart
0080f8c0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ba44 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0080bcec l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080c4c8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080c704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080c8c4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080cba4 l     F .text	0000003c alt_get_errno
0080cbe0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081154c g     O .bss	00000004 alt_instruction_exception_handler
0080f96a g     O .rwdata	00000002 OSTaskNameSize
00803004 g     F .text	00000054 _isatty_r
00803754 g     F .text	000000bc alt_main
00800428 g     F .text	000000c0 _puts_r
0081879c g     O .bss	00000100 alt_irq
00802d2c g     F .text	00000060 _lseek_r
00807e10 g     F .text	000000d8 OS_MemInit
0080f9a0 g       *ABS*	00000000 __flash_rwdata_start
0080b668 g     F .text	00000060 OSTimeSet
00804130 g     F .text	00000610 OSEventPendMulti
0081889c g       *ABS*	00000000 __alt_heap_start
0080d21c g     F .text	00000024 OSTaskCreateHook
00811578 g     O .bss	00002000 task1_stk
0080f942 g     O .rwdata	00000002 OSMboxEn
00804798 g     F .text	0000004c OSIntEnter
008022e0 g     F .text	0000005c __sseek
008008f4 g     F .text	00000010 __sinit
0080f952 g     O .rwdata	00000002 OSQEn
0080074c g     F .text	00000078 __sfmoreglue
00803e04 g     F .text	000000cc __malloc_unlock
0080d284 g     F .text	00000020 OSTaskStatHook
008114f0 g     O .bss	00000001 OSLockNesting
0080f990 g     O .rwdata	00000002 OSDataSize
008114f1 g     O .bss	00000001 OSRunning
008019cc g     F .text	0000015c memmove
0080d2c4 g     F .text	00000020 OSInitHookBegin
0080f988 g     O .rwdata	00000002 OSTmrSize
008008dc g     F .text	00000018 _cleanup
008114f4 g     O .bss	00000004 OSIdleCtr
0080cfcc g     F .text	00000024 altera_nios2_gen2_irq_init
0080d09c g       .text	00000000 OSStartTsk
00805c10 g     F .text	000002d4 OS_TCBInit
00800000 g     F .entry	0000000c __reset
0080f98e g     O .rwdata	00000002 OSTmrWheelTblSize
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080f92e g     O .rwdata	00000002 OSEventSize
008114f8 g     O .bss	00000001 OSPrioHighRdy
00802fa8 g     F .text	0000005c _fstat_r
0080d240 g     F .text	00000024 OSTaskDelHook
008114cc g     O .bss	00000004 errno
0080225c g     F .text	00000008 __seofread
0080d07c g       .text	00000000 OSStartHighRdy
0080a0e8 g     F .text	000001e4 OSTaskCreateExt
00806ef8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0080f96e g     O .rwdata	00000002 OSTaskStatStkSize
00806074 g     F .text	00000308 OSFlagAccept
00808454 g     F .text	000000b8 OSQFlush
00807ee8 g     F .text	00000140 OSQAccept
008114d8 g     O .bss	00000004 alt_argv
008178ec g       *ABS*	00000000 _gp
00809f3c g     F .text	000001ac OSTaskCreate
00809a4c g     F .text	000004f0 OSTaskChangePrio
008114ec g     O .bss	00000004 alt_heapsem
00805ee4 g     F .text	00000190 OSDebugInit
0080a2cc g     F .text	00000344 OSTaskDel
0080e6d4 g     O .rwdata	00000180 alt_fd_list
00815578 g     O .bss	00000370 OSFlagTbl
008051bc g     F .text	000000b8 OS_EventTaskRemove
0080d348 g     F .text	00000090 alt_find_dev
00801884 g     F .text	00000148 memcpy
0080f958 g     O .rwdata	00000002 OSRdyTblSize
0080059c g     F .text	0000000c _cleanup_r
0080c9a8 g     F .text	0000007c alt_io_redirect
0080da04 g       *ABS*	00000000 __DTOR_END__
008004e8 g     F .text	00000014 puts
0080d5d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00803ed0 g     F .text	00000120 OSEventNameGet
0080f93c g     O .rwdata	00000002 OSFlagMax
008047e4 g     F .text	000000f8 OSIntExit
0080f976 g     O .rwdata	00000002 OSTCBSize
008114f9 g     O .bss	00000001 OSPrioCur
0080bf48 g     F .text	000002bc altera_avalon_jtag_uart_read
00803150 g     F .text	00000064 .hidden __udivsi3
008034a4 g     F .text	000000ac isatty
0080f95c g     O .rwdata	00000002 OSStkWidth
0080f950 g     O .rwdata	00000002 OSPtrSize
0080f930 g     O .rwdata	00000002 OSEventTblSize
0080cff0 g       .text	00000000 OSCtxSw
008114c8 g     O .bss	00000004 __malloc_top_pad
008114fc g     O .bss	00000004 OSTCBList
008114d0 g     O .bss	00000004 alt_fd_list_lock
00800944 g     F .text	000004c8 __sfvwrite_r
008158e8 g     O .bss	00000c30 OSMemTbl
00811500 g     O .bss	00000001 OSTickStepState
008021b4 g     F .text	00000054 _sbrk_r
0080f954 g     O .rwdata	00000002 OSQMax
00816518 g     O .bss	00000800 OSTaskStatStk
00807a4c g     F .text	000000f0 OSMemNameGet
0080f934 g     O .rwdata	00000002 OSFlagEn
00802f48 g     F .text	00000060 _read_r
0080f97a g     O .rwdata	00000002 OSTimeTickHookEn
00808904 g     F .text	00000168 OSQPost
008076e4 g     F .text	000000a4 OS_FlagUnlink
0080f90c g     O .rwdata	00000004 alt_max_fd
008057a8 g     F .text	00000068 OS_MemCopy
00805810 g     F .text	000000d0 OS_Sched
0080254c g     F .text	000000f0 _fclose_r
0080795c g     F .text	000000f0 OSMemGet
0080a8f8 g     F .text	000001b4 OSTaskNameSet
008028c8 g     F .text	00000030 fflush
008114c4 g     O .bss	00000004 __malloc_max_sbrked_mem
00811504 g     O .bss	00000004 OSCtxSwCtr
0080d2a4 g     F .text	00000020 OSTimeTickHook
0080ca24 g     F .text	00000180 alt_irq_register
0080f93e g     O .rwdata	00000002 OSFlagNameSize
00805274 g     F .text	00000100 OS_EventTaskRemoveMulti
0080506c g     F .text	00000150 OS_EventTaskWaitMulti
0080f956 g     O .rwdata	00000002 OSQSize
00803678 g     F .text	000000dc lseek
008093b4 g     F .text	0000020c OSSemPend
0080f8ec g     O .rwdata	00000004 _global_impure_ptr
00801c50 g     F .text	00000564 _realloc_r
0080f940 g     O .rwdata	00000002 OSLowestPrio
0081889c g       *ABS*	00000000 __bss_end
0080d324 g     F .text	00000024 OSTCBInitHook
0080f986 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0080cec4 g     F .text	00000108 alt_tick
0080f928 g     O .rwdata	00000002 OSEventEn
0080f982 g     O .rwdata	00000002 OSTmrCfgNameSize
00800914 g     F .text	00000018 __fp_lock_all
00807510 g     F .text	000000e0 OS_FlagInit
0080ce28 g     F .text	0000009c alt_alarm_stop
0080f964 g     O .rwdata	00000002 OSTaskIdleStkSize
00811540 g     O .bss	00000004 alt_irq_active
00808fec g     F .text	000000b0 OSSemAccept
00807c50 g     F .text	000000d8 OSMemPut
00807788 g     F .text	000001d4 OSMemCreate
00811508 g     O .bss	00000004 OSIdleCtrMax
008000fc g     F .exceptions	000000d8 alt_irq_handler
0080e6ac g     O .rwdata	00000028 alt_dev_null
0080f978 g     O .rwdata	00000002 OSTicksPerSec
0080cff0 g       .text	00000000 OSIntCtxSw
0080c6e4 g     F .text	00000020 alt_dcache_flush_all
0081150c g     O .bss	00000004 OSTCBFreeList
0080f9a0 g       *ABS*	00000000 __ram_rwdata_end
008095c0 g     F .text	0000016c OSSemPendAbort
0080f904 g     O .rwdata	00000008 alt_dev_list
00803ac0 g     F .text	00000100 write
0080f97c g     O .rwdata	00000002 OSVersionNbr
0080de80 g       *ABS*	00000000 __ram_rodata_end
008033b0 g     F .text	000000b8 fstat
0080f924 g     O .rwdata	00000004 OSEndiannessTest
008031b4 g     F .text	00000058 .hidden __umodsi3
0080f936 g     O .rwdata	00000002 OSFlagGrpSize
0081889c g       *ABS*	00000000 end
0080b908 g     F .text	0000013c altera_avalon_jtag_uart_init
00805a78 g     F .text	000000cc OS_TaskStat
008001d4 g     F .exceptions	00000060 alt_instruction_exception_entry
0080da04 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080c544 g     F .text	00000074 alt_avalon_timer_sc_init
0080c204 g     F .text	000002c4 altera_avalon_jtag_uart_write
00800904 g     F .text	00000004 __sfp_lock_acquire
008017a0 g     F .text	000000e4 memchr
00805754 g     F .text	00000054 OS_MemClr
0080d0c0 g     F .text	0000015c OSTaskStkInit
00800270 g     F .text	00000038 task1
00802a1c g     F .text	00000310 _free_r
00804dc4 g     F .text	00000198 OS_EventTaskRdy
0080d850 g     F .text	00000180 __call_exitprocs
00811510 g     O .bss	00000001 OSCPUUsage
0080f8f4 g     O .rwdata	00000004 __malloc_sbrk_base
00800234 g     F .text	0000003c _start
008002a8 g     F .text	00000038 task2
00811544 g     O .bss	00000004 _alt_tick_rate
0080850c g     F .text	0000028c OSQPend
0080b1b8 g     F .text	00000104 OSTimeDly
00811548 g     O .bss	00000004 _alt_nticks
0080384c g     F .text	00000104 read
0080b734 g     F .text	00000070 alt_sys_init
0080d738 g     F .text	00000118 __register_exitproc
00811511 g     O .bss	00000001 OSTaskCtr
0080b2bc g     F .text	0000017c OSTimeDlyHMSM
0080bdf0 g     F .text	00000068 altera_avalon_jtag_uart_close
0080320c g     F .text	00000028 .hidden __mulsi3
0080de80 g       *ABS*	00000000 __ram_rwdata_start
0080da04 g       *ABS*	00000000 __ram_rodata_start
00811550 g     O .bss	00000028 __malloc_current_mallinfo
0080f92a g     O .rwdata	00000002 OSEventMax
0080972c g     F .text	00000110 OSSemPost
00804968 g     F .text	000000dc OSSchedUnlock
0080b7a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080d4e0 g     F .text	000000f4 alt_get_fd
00811514 g     O .bss	00000004 OSMemFreeList
00804ab4 g     F .text	000000b0 OSStatInit
008072ec g     F .text	000000c4 OSFlagQuery
0080f960 g     O .rwdata	00000002 OSTaskCreateExtEn
008024f8 g     F .text	00000054 _close_r
0080d6bc g     F .text	0000007c memcmp
00804da4 g     F .text	00000020 OS_Dummy
0080b864 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081889c g       *ABS*	00000000 __alt_stack_base
0080b8b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008023a4 g     F .text	00000154 __swsetup_r
00816d18 g     O .bss	000001e0 OSQTbl
008007c4 g     F .text	00000118 __sfp
0080e2a4 g     O .rwdata	00000408 __malloc_av_
00800910 g     F .text	00000004 __sinit_lock_release
00811518 g     O .bss	00000004 OSTCBHighRdy
00802208 g     F .text	00000054 __sread
0081151c g     O .bss	00000004 OSQFreeList
0080d3d8 g     F .text	00000108 alt_find_file
0080c740 g     F .text	000000a4 alt_dev_llist_insert
00803ce4 g     F .text	00000120 __malloc_lock
008039d4 g     F .text	000000b0 sbrk
00803ff0 g     F .text	00000140 OSEventNameSet
0080286c g     F .text	0000005c _fflush_r
00811520 g     O .bss	00000001 OSRdyGrp
008114c0 g       *ABS*	00000000 __bss_start
00801b28 g     F .text	00000128 memset
008002e0 g     F .text	00000148 main
008114dc g     O .bss	00000004 alt_envp
008114c0 g     O .bss	00000004 __malloc_max_total_mem
0080b804 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080dd34 g     O .rodata	00000100 OSUnMapTbl
0080f95a g     O .rwdata	00000002 OSSemEn
00806f58 g     F .text	00000394 OSFlagPost
0080233c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080263c g     F .text	00000014 fclose
00804f5c g     F .text	00000110 OS_EventTaskWait
00813578 g     O .bss	00002000 task2_stk
00805b44 g     F .text	000000cc OS_TaskStatStkChk
0080a610 g     F .text	00000150 OSTaskDelReq
00800f94 g     F .text	0000080c _malloc_r
0080f910 g     O .rwdata	00000004 alt_errno
00804a44 g     F .text	00000070 OSStart
00803c84 g     F .text	00000060 __env_unlock
00800e0c g     F .text	000000c4 _fwalk
0080aaac g     F .text	000001d4 OSTaskResume
00807d28 g     F .text	000000e8 OSMemQuery
0080f96c g     O .rwdata	00000002 OSTaskStatEn
0080f946 g     O .rwdata	00000002 OSMemMax
00808a6c g     F .text	00000170 OSQPostFront
00803058 g     F .text	00000084 .hidden __divsi3
00811521 g     O .bss	00000003 OSRdyTbl
0080f920 g     O .rwdata	00000002 OSDebugEn
008028f8 g     F .text	00000124 _malloc_trim_r
0080da04 g       *ABS*	00000000 __CTOR_END__
0080f938 g     O .rwdata	00000002 OSFlagNodeSize
0080f980 g     O .rwdata	00000002 OSTmrCfgMax
00808028 g     F .text	000001ac OSQCreate
0080a760 g     F .text	00000198 OSTaskNameGet
0080da04 g       *ABS*	00000000 __flash_rodata_start
00808bdc g     F .text	0000020c OSQPostOpt
00804b64 g     F .text	00000220 OSTimeTick
0080f968 g     O .rwdata	00000002 OSTaskMax
0080da04 g       *ABS*	00000000 __DTOR_LIST__
0080909c g     F .text	000000d8 OSSemCreate
0080f98c g     O .rwdata	00000002 OSTmrWheelSize
0080f962 g     O .rwdata	00000002 OSTaskDelEn
0080983c g     F .text	00000110 OSSemQuery
008081d4 g     F .text	00000280 OSQDel
00808798 g     F .text	0000016c OSQPendAbort
0080b6fc g     F .text	00000038 alt_irq_init
00803950 g     F .text	00000084 alt_release_fd
0080d670 g     F .text	00000014 atexit
00802344 g     F .text	00000060 _write_r
008048dc g     F .text	0000008c OSSchedLock
0080637c g     F .text	00000108 OSFlagCreate
0080f8f0 g     O .rwdata	00000004 _impure_ptr
008114d4 g     O .bss	00000004 alt_argc
00802650 g     F .text	0000021c __sflush_r
0080c844 g     F .text	00000060 _do_dtors
0080f932 g     O .rwdata	00000002 OSEventMultiEn
00806484 g     F .text	00000248 OSFlagDel
00811524 g     O .bss	00000004 OSEventFreeList
00800020 g       .exceptions	00000000 alt_irq_entry
00806940 g     F .text	000005b8 OSFlagPend
0080f97e g     O .rwdata	00000002 OSTmrEn
0080092c g     F .text	00000018 __fp_unlock_all
0080f8fc g     O .rwdata	00000008 alt_fs_list
00805954 g     F .text	00000074 OS_StrCopy
0080f948 g     O .rwdata	00000002 OSMemNameSize
0080d2e4 g     F .text	00000020 OSInitHookEnd
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080f974 g     O .rwdata	00000002 OSTCBPrioTblMax
0080f970 g     O .rwdata	00000002 OSTaskStatStkChkEn
0080f944 g     O .rwdata	00000002 OSMemEn
0080f94e g     O .rwdata	00000002 OSMutexEn
0080f9a0 g       *ABS*	00000000 _edata
0081889c g       *ABS*	00000000 _end
00811528 g     O .bss	00000001 OSIntNesting
00800234 g       *ABS*	00000000 __ram_exceptions_end
0080be58 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080b438 g     F .text	000001d4 OSTimeDlyResume
008067f4 g     F .text	0000014c OSFlagNameSet
0080ac80 g     F .text	000001c0 OSTaskStkChk
0080f94a g     O .rwdata	00000002 OSMemSize
00802264 g     F .text	0000007c __swrite
0080f8f8 g     O .rwdata	00000004 __malloc_trim_threshold
0081152c g     O .bss	00000004 OSTCBCur
0080d684 g     F .text	00000038 exit
0080f94c g     O .rwdata	00000002 OSMemTblSize
00800ed0 g     F .text	000000c4 _fwalk_reent
008030dc g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800908 g     F .text	00000004 __sfp_lock_release
00804740 g     F .text	00000058 OSInit
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080b024 g     F .text	00000124 OSTaskQuery
00808f44 g     F .text	000000a8 OS_QInit
008059c8 g     F .text	00000054 OS_StrLen
00807b3c g     F .text	00000114 OSMemNameSet
0080f966 g     O .rwdata	00000002 OSTaskProfileEn
00811530 g     O .bss	00000004 OSTime
00816ef8 g     O .bss	00000800 OSTaskIdleStk
0080d9d0 g     F .text	00000034 _exit
0080c5b8 g     F .text	0000012c alt_alarm_start
008066cc g     F .text	00000128 OSFlagNameGet
0080b60c g     F .text	0000005c OSTimeGet
00802d8c g     F .text	000001bc __smakebuf_r
008004fc g     F .text	00000098 strlen
0080d264 g     F .text	00000020 OSTaskSwHook
0080cccc g     F .text	0000015c open
008176f8 g     O .bss	00000b40 OSEventTbl
00818238 g     O .bss	00000510 OSTCBTbl
0080994c g     F .text	00000100 OSSemSet
0080c8a4 g     F .text	00000020 alt_icache_flush_all
0080f994 g     O .rwdata	00000004 alt_priority_mask
00809174 g     F .text	00000240 OSSemDel
00811534 g     O .bss	00000004 OSFlagFreeList
0080f92c g     O .rwdata	00000002 OSEventNameSize
00811538 g     O .bss	00000001 OSStatRdy
00818748 g     O .bss	00000054 OSTCBPrioTbl
00803bc0 g     F .text	000000c4 __env_lock
0080f972 g     O .rwdata	00000002 OSTaskSwHookEn
0080f998 g     O .rwdata	00000008 alt_alarm_list
0080f93a g     O .rwdata	00000002 OSFlagWidth
0080c7e4 g     F .text	00000060 _do_ctors
00803270 g     F .text	000000d8 close
008114e4 g     O .bss	00000004 alt_envsem
0081153c g     O .bss	00000004 OSIdleCtrRun
00804d84 g     F .text	00000020 OSVersion
0080f984 g     O .rwdata	00000002 OSTmrCfgWheelSize
008035b8 g     F .text	00000084 alt_load
0080b148 g     F .text	00000070 OS_TaskStkClr
0080f95e g     O .rwdata	00000002 OSTaskCreateEn
00805374 g     F .text	00000068 OS_EventWaitListInit
0080d304 g     F .text	00000020 OSTaskIdleHook
0080090c g     F .text	00000004 __sinit_lock_acquire
0080ae40 g     F .text	000001e4 OSTaskSuspend
00805a1c g     F .text	0000005c OS_TaskIdle
0080f98a g     O .rwdata	00000002 OSTmrTblSize
00808de8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08408d14 	ori	at,at,564
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d40 	call	8001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	08047980 	call	804798 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10a1e704 	addi	r2,r2,-30820
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10a1e704 	addi	r2,r2,-30820
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	e17ffd17 	ldw	r5,-12(fp)
  800174:	1009883a 	mov	r4,r2
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	08047e40 	call	8047e4 <OSIntExit>
}
  8001bc:	0001883a 	nop
  8001c0:	e037883a 	mov	sp,fp
  8001c4:	dfc00117 	ldw	ra,4(sp)
  8001c8:	df000017 	ldw	fp,0(sp)
  8001cc:	dec00204 	addi	sp,sp,8
  8001d0:	f800283a 	ret

008001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d4:	defffb04 	addi	sp,sp,-20
  8001d8:	dfc00415 	stw	ra,16(sp)
  8001dc:	df000315 	stw	fp,12(sp)
  8001e0:	df000304 	addi	fp,sp,12
  8001e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  8001e8:	00bfffc4 	movi	r2,-1
  8001ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  8001f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f4:	d0a71817 	ldw	r2,-25504(gp)
  8001f8:	10000726 	beq	r2,zero,800218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  8001fc:	d0a71817 	ldw	r2,-25504(gp)
  800200:	e0fffd17 	ldw	r3,-12(fp)
  800204:	e1bffe17 	ldw	r6,-8(fp)
  800208:	e17fff17 	ldw	r5,-4(fp)
  80020c:	1809883a 	mov	r4,r3
  800210:	103ee83a 	callr	r2
  800214:	00000206 	br	800220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80021c:	0005883a 	mov	r2,zero
}
  800220:	e037883a 	mov	sp,fp
  800224:	dfc00117 	ldw	ra,4(sp)
  800228:	df000017 	ldw	fp,0(sp)
  80022c:	dec00204 	addi	sp,sp,8
  800230:	f800283a 	ret

Disassembly of section .text:

00800234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800234:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80023c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800240:	d69e3b14 	ori	gp,gp,30956
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800244:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800248:	10853014 	ori	r2,r2,5312

    movhi r3, %hi(__bss_end)
  80024c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800250:	18e22714 	ori	r3,r3,34972

    beq r2, r3, 1f
  800254:	10c00326 	beq	r2,r3,800264 <_start+0x30>

0:
    stw zero, (r2)
  800258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800260:	10fffd36 	bltu	r2,r3,800258 <__alt_data_end+0xff800258>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800264:	08035b80 	call	8035b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800268:	08037540 	call	803754 <alt_main>

0080026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80026c:	003fff06 	br	80026c <__alt_data_end+0xff80026c>

00800270 <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
  800270:	defffd04 	addi	sp,sp,-12
  800274:	dfc00215 	stw	ra,8(sp)
  800278:	df000115 	stw	fp,4(sp)
  80027c:	df000104 	addi	fp,sp,4
  800280:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
  800284:	01002074 	movhi	r4,129
  800288:	21368104 	addi	r4,r4,-9724
  80028c:	08004e80 	call	8004e8 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
  800290:	000f883a 	mov	r7,zero
  800294:	018000c4 	movi	r6,3
  800298:	000b883a 	mov	r5,zero
  80029c:	0009883a 	mov	r4,zero
  8002a0:	080b2bc0 	call	80b2bc <OSTimeDlyHMSM>
  }
  8002a4:	003ff706 	br	800284 <__alt_data_end+0xff800284>

008002a8 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
  8002a8:	defffd04 	addi	sp,sp,-12
  8002ac:	dfc00215 	stw	ra,8(sp)
  8002b0:	df000115 	stw	fp,4(sp)
  8002b4:	df000104 	addi	fp,sp,4
  8002b8:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
  8002bc:	01002074 	movhi	r4,129
  8002c0:	21368604 	addi	r4,r4,-9704
  8002c4:	08004e80 	call	8004e8 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
  8002c8:	000f883a 	mov	r7,zero
  8002cc:	018000c4 	movi	r6,3
  8002d0:	000b883a 	mov	r5,zero
  8002d4:	0009883a 	mov	r4,zero
  8002d8:	080b2bc0 	call	80b2bc <OSTimeDlyHMSM>
  }
  8002dc:	003ff706 	br	8002bc <__alt_data_end+0xff8002bc>

008002e0 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  8002e0:	defff904 	addi	sp,sp,-28
  8002e4:	dfc00615 	stw	ra,24(sp)
  8002e8:	df000515 	stw	fp,20(sp)
  8002ec:	df000504 	addi	fp,sp,20

  printf("MicroC/OS-II Licensing Terms\n");
  8002f0:	01002074 	movhi	r4,129
  8002f4:	21368b04 	addi	r4,r4,-9684
  8002f8:	08004e80 	call	8004e8 <puts>
  printf("============================\n");
  8002fc:	01002074 	movhi	r4,129
  800300:	21369304 	addi	r4,r4,-9652
  800304:	08004e80 	call	8004e8 <puts>
  printf("Micrium\'s uC/OS-II is a real-time operating system (RTOS) available in source code.\n");
  800308:	01002074 	movhi	r4,129
  80030c:	21369b04 	addi	r4,r4,-9620
  800310:	08004e80 	call	8004e8 <puts>
  printf("This is not open-source software.\n");
  800314:	01002074 	movhi	r4,129
  800318:	2136b004 	addi	r4,r4,-9536
  80031c:	08004e80 	call	8004e8 <puts>
  printf("This RTOS can be used free of charge only for non-commercial purposes and academic projects,\n");
  800320:	01002074 	movhi	r4,129
  800324:	2136b904 	addi	r4,r4,-9500
  800328:	08004e80 	call	8004e8 <puts>
  printf("any other use of the code is subject to the terms of an end-user license agreement\n");
  80032c:	01002074 	movhi	r4,129
  800330:	2136d104 	addi	r4,r4,-9404
  800334:	08004e80 	call	8004e8 <puts>
  printf("for more information please see the license files included in the BSP project or contact Micrium.\n");
  800338:	01002074 	movhi	r4,129
  80033c:	2136e604 	addi	r4,r4,-9320
  800340:	08004e80 	call	8004e8 <puts>
  printf("Anyone planning to use a Micrium RTOS in a commercial product must purchase a commercial license\n");
  800344:	01002074 	movhi	r4,129
  800348:	2136ff04 	addi	r4,r4,-9220
  80034c:	08004e80 	call	8004e8 <puts>
  printf("from the owner of the software, Silicon Laboratories Inc.\n");
  800350:	01002074 	movhi	r4,129
  800354:	21371804 	addi	r4,r4,-9120
  800358:	08004e80 	call	8004e8 <puts>
  printf("Licensing information is available at:\n");
  80035c:	01002074 	movhi	r4,129
  800360:	21372704 	addi	r4,r4,-9060
  800364:	08004e80 	call	8004e8 <puts>
  printf("Phone: +1 954-217-2036\n");
  800368:	01002074 	movhi	r4,129
  80036c:	21373104 	addi	r4,r4,-9020
  800370:	08004e80 	call	8004e8 <puts>
  printf("Email: sales@micrium.com\n");
  800374:	01002074 	movhi	r4,129
  800378:	21373704 	addi	r4,r4,-8996
  80037c:	08004e80 	call	8004e8 <puts>
  printf("URL: www.micrium.com\n\n\n");  
  800380:	01002074 	movhi	r4,129
  800384:	21373e04 	addi	r4,r4,-8968
  800388:	08004e80 	call	8004e8 <puts>

  OSTaskCreateExt(task1,
  80038c:	d8000415 	stw	zero,16(sp)
  800390:	d8000315 	stw	zero,12(sp)
  800394:	00820004 	movi	r2,2048
  800398:	d8800215 	stw	r2,8(sp)
  80039c:	00802074 	movhi	r2,129
  8003a0:	10855e04 	addi	r2,r2,5496
  8003a4:	d8800115 	stw	r2,4(sp)
  8003a8:	00800044 	movi	r2,1
  8003ac:	d8800015 	stw	r2,0(sp)
  8003b0:	01c00044 	movi	r7,1
  8003b4:	01802074 	movhi	r6,129
  8003b8:	318d5d04 	addi	r6,r6,13684
  8003bc:	000b883a 	mov	r5,zero
  8003c0:	01002034 	movhi	r4,128
  8003c4:	21009c04 	addi	r4,r4,624
  8003c8:	080a0e80 	call	80a0e8 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
  8003cc:	d8000415 	stw	zero,16(sp)
  8003d0:	d8000315 	stw	zero,12(sp)
  8003d4:	00820004 	movi	r2,2048
  8003d8:	d8800215 	stw	r2,8(sp)
  8003dc:	00802074 	movhi	r2,129
  8003e0:	108d5e04 	addi	r2,r2,13688
  8003e4:	d8800115 	stw	r2,4(sp)
  8003e8:	00800084 	movi	r2,2
  8003ec:	d8800015 	stw	r2,0(sp)
  8003f0:	01c00084 	movi	r7,2
  8003f4:	01802074 	movhi	r6,129
  8003f8:	31955d04 	addi	r6,r6,21876
  8003fc:	000b883a 	mov	r5,zero
  800400:	01002034 	movhi	r4,128
  800404:	2100aa04 	addi	r4,r4,680
  800408:	080a0e80 	call	80a0e8 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  80040c:	0804a440 	call	804a44 <OSStart>
  return 0;
  800410:	0005883a 	mov	r2,zero
}
  800414:	e037883a 	mov	sp,fp
  800418:	dfc00117 	ldw	ra,4(sp)
  80041c:	df000017 	ldw	fp,0(sp)
  800420:	dec00204 	addi	sp,sp,8
  800424:	f800283a 	ret

00800428 <_puts_r>:
  800428:	defff604 	addi	sp,sp,-40
  80042c:	dc000715 	stw	r16,28(sp)
  800430:	2021883a 	mov	r16,r4
  800434:	2809883a 	mov	r4,r5
  800438:	dc400815 	stw	r17,32(sp)
  80043c:	dfc00915 	stw	ra,36(sp)
  800440:	2823883a 	mov	r17,r5
  800444:	08004fc0 	call	8004fc <strlen>
  800448:	10c00044 	addi	r3,r2,1
  80044c:	d8800115 	stw	r2,4(sp)
  800450:	00802074 	movhi	r2,129
  800454:	10b74404 	addi	r2,r2,-8944
  800458:	d8800215 	stw	r2,8(sp)
  80045c:	00800044 	movi	r2,1
  800460:	d8800315 	stw	r2,12(sp)
  800464:	00800084 	movi	r2,2
  800468:	dc400015 	stw	r17,0(sp)
  80046c:	d8c00615 	stw	r3,24(sp)
  800470:	dec00415 	stw	sp,16(sp)
  800474:	d8800515 	stw	r2,20(sp)
  800478:	80000226 	beq	r16,zero,800484 <_puts_r+0x5c>
  80047c:	80800e17 	ldw	r2,56(r16)
  800480:	10001426 	beq	r2,zero,8004d4 <_puts_r+0xac>
  800484:	81400217 	ldw	r5,8(r16)
  800488:	2880030b 	ldhu	r2,12(r5)
  80048c:	10c8000c 	andi	r3,r2,8192
  800490:	1800061e 	bne	r3,zero,8004ac <_puts_r+0x84>
  800494:	29001917 	ldw	r4,100(r5)
  800498:	00f7ffc4 	movi	r3,-8193
  80049c:	10880014 	ori	r2,r2,8192
  8004a0:	20c6703a 	and	r3,r4,r3
  8004a4:	2880030d 	sth	r2,12(r5)
  8004a8:	28c01915 	stw	r3,100(r5)
  8004ac:	d9800404 	addi	r6,sp,16
  8004b0:	8009883a 	mov	r4,r16
  8004b4:	08009440 	call	800944 <__sfvwrite_r>
  8004b8:	1000091e 	bne	r2,zero,8004e0 <_puts_r+0xb8>
  8004bc:	00800284 	movi	r2,10
  8004c0:	dfc00917 	ldw	ra,36(sp)
  8004c4:	dc400817 	ldw	r17,32(sp)
  8004c8:	dc000717 	ldw	r16,28(sp)
  8004cc:	dec00a04 	addi	sp,sp,40
  8004d0:	f800283a 	ret
  8004d4:	8009883a 	mov	r4,r16
  8004d8:	08008f40 	call	8008f4 <__sinit>
  8004dc:	003fe906 	br	800484 <__alt_data_end+0xff800484>
  8004e0:	00bfffc4 	movi	r2,-1
  8004e4:	003ff606 	br	8004c0 <__alt_data_end+0xff8004c0>

008004e8 <puts>:
  8004e8:	00802074 	movhi	r2,129
  8004ec:	10be3c04 	addi	r2,r2,-1808
  8004f0:	200b883a 	mov	r5,r4
  8004f4:	11000017 	ldw	r4,0(r2)
  8004f8:	08004281 	jmpi	800428 <_puts_r>

008004fc <strlen>:
  8004fc:	208000cc 	andi	r2,r4,3
  800500:	10002026 	beq	r2,zero,800584 <strlen+0x88>
  800504:	20800007 	ldb	r2,0(r4)
  800508:	10002026 	beq	r2,zero,80058c <strlen+0x90>
  80050c:	2005883a 	mov	r2,r4
  800510:	00000206 	br	80051c <strlen+0x20>
  800514:	10c00007 	ldb	r3,0(r2)
  800518:	18001826 	beq	r3,zero,80057c <strlen+0x80>
  80051c:	10800044 	addi	r2,r2,1
  800520:	10c000cc 	andi	r3,r2,3
  800524:	183ffb1e 	bne	r3,zero,800514 <__alt_data_end+0xff800514>
  800528:	10c00017 	ldw	r3,0(r2)
  80052c:	01ffbff4 	movhi	r7,65279
  800530:	39ffbfc4 	addi	r7,r7,-257
  800534:	00ca303a 	nor	r5,zero,r3
  800538:	01a02074 	movhi	r6,32897
  80053c:	19c7883a 	add	r3,r3,r7
  800540:	31a02004 	addi	r6,r6,-32640
  800544:	1946703a 	and	r3,r3,r5
  800548:	1986703a 	and	r3,r3,r6
  80054c:	1800091e 	bne	r3,zero,800574 <strlen+0x78>
  800550:	10800104 	addi	r2,r2,4
  800554:	10c00017 	ldw	r3,0(r2)
  800558:	19cb883a 	add	r5,r3,r7
  80055c:	00c6303a 	nor	r3,zero,r3
  800560:	28c6703a 	and	r3,r5,r3
  800564:	1986703a 	and	r3,r3,r6
  800568:	183ff926 	beq	r3,zero,800550 <__alt_data_end+0xff800550>
  80056c:	00000106 	br	800574 <strlen+0x78>
  800570:	10800044 	addi	r2,r2,1
  800574:	10c00007 	ldb	r3,0(r2)
  800578:	183ffd1e 	bne	r3,zero,800570 <__alt_data_end+0xff800570>
  80057c:	1105c83a 	sub	r2,r2,r4
  800580:	f800283a 	ret
  800584:	2005883a 	mov	r2,r4
  800588:	003fe706 	br	800528 <__alt_data_end+0xff800528>
  80058c:	0005883a 	mov	r2,zero
  800590:	f800283a 	ret

00800594 <__fp_unlock>:
  800594:	0005883a 	mov	r2,zero
  800598:	f800283a 	ret

0080059c <_cleanup_r>:
  80059c:	01402034 	movhi	r5,128
  8005a0:	29495304 	addi	r5,r5,9548
  8005a4:	0800ed01 	jmpi	800ed0 <_fwalk_reent>

008005a8 <__sinit.part.1>:
  8005a8:	defff704 	addi	sp,sp,-36
  8005ac:	00c02034 	movhi	r3,128
  8005b0:	dfc00815 	stw	ra,32(sp)
  8005b4:	ddc00715 	stw	r23,28(sp)
  8005b8:	dd800615 	stw	r22,24(sp)
  8005bc:	dd400515 	stw	r21,20(sp)
  8005c0:	dd000415 	stw	r20,16(sp)
  8005c4:	dcc00315 	stw	r19,12(sp)
  8005c8:	dc800215 	stw	r18,8(sp)
  8005cc:	dc400115 	stw	r17,4(sp)
  8005d0:	dc000015 	stw	r16,0(sp)
  8005d4:	18c16704 	addi	r3,r3,1436
  8005d8:	24000117 	ldw	r16,4(r4)
  8005dc:	20c00f15 	stw	r3,60(r4)
  8005e0:	2080bb04 	addi	r2,r4,748
  8005e4:	00c000c4 	movi	r3,3
  8005e8:	20c0b915 	stw	r3,740(r4)
  8005ec:	2080ba15 	stw	r2,744(r4)
  8005f0:	2000b815 	stw	zero,736(r4)
  8005f4:	05c00204 	movi	r23,8
  8005f8:	00800104 	movi	r2,4
  8005fc:	2025883a 	mov	r18,r4
  800600:	b80d883a 	mov	r6,r23
  800604:	81001704 	addi	r4,r16,92
  800608:	000b883a 	mov	r5,zero
  80060c:	80000015 	stw	zero,0(r16)
  800610:	80000115 	stw	zero,4(r16)
  800614:	80000215 	stw	zero,8(r16)
  800618:	8080030d 	sth	r2,12(r16)
  80061c:	80001915 	stw	zero,100(r16)
  800620:	8000038d 	sth	zero,14(r16)
  800624:	80000415 	stw	zero,16(r16)
  800628:	80000515 	stw	zero,20(r16)
  80062c:	80000615 	stw	zero,24(r16)
  800630:	0801b280 	call	801b28 <memset>
  800634:	05802034 	movhi	r22,128
  800638:	94400217 	ldw	r17,8(r18)
  80063c:	05402034 	movhi	r21,128
  800640:	05002034 	movhi	r20,128
  800644:	04c02034 	movhi	r19,128
  800648:	b5888204 	addi	r22,r22,8712
  80064c:	ad489904 	addi	r21,r21,8804
  800650:	a508b804 	addi	r20,r20,8928
  800654:	9cc8cf04 	addi	r19,r19,9020
  800658:	85800815 	stw	r22,32(r16)
  80065c:	85400915 	stw	r21,36(r16)
  800660:	85000a15 	stw	r20,40(r16)
  800664:	84c00b15 	stw	r19,44(r16)
  800668:	84000715 	stw	r16,28(r16)
  80066c:	00800284 	movi	r2,10
  800670:	8880030d 	sth	r2,12(r17)
  800674:	00800044 	movi	r2,1
  800678:	b80d883a 	mov	r6,r23
  80067c:	89001704 	addi	r4,r17,92
  800680:	000b883a 	mov	r5,zero
  800684:	88000015 	stw	zero,0(r17)
  800688:	88000115 	stw	zero,4(r17)
  80068c:	88000215 	stw	zero,8(r17)
  800690:	88001915 	stw	zero,100(r17)
  800694:	8880038d 	sth	r2,14(r17)
  800698:	88000415 	stw	zero,16(r17)
  80069c:	88000515 	stw	zero,20(r17)
  8006a0:	88000615 	stw	zero,24(r17)
  8006a4:	0801b280 	call	801b28 <memset>
  8006a8:	94000317 	ldw	r16,12(r18)
  8006ac:	00800484 	movi	r2,18
  8006b0:	8c400715 	stw	r17,28(r17)
  8006b4:	8d800815 	stw	r22,32(r17)
  8006b8:	8d400915 	stw	r21,36(r17)
  8006bc:	8d000a15 	stw	r20,40(r17)
  8006c0:	8cc00b15 	stw	r19,44(r17)
  8006c4:	8080030d 	sth	r2,12(r16)
  8006c8:	00800084 	movi	r2,2
  8006cc:	80000015 	stw	zero,0(r16)
  8006d0:	80000115 	stw	zero,4(r16)
  8006d4:	80000215 	stw	zero,8(r16)
  8006d8:	80001915 	stw	zero,100(r16)
  8006dc:	8080038d 	sth	r2,14(r16)
  8006e0:	80000415 	stw	zero,16(r16)
  8006e4:	80000515 	stw	zero,20(r16)
  8006e8:	80000615 	stw	zero,24(r16)
  8006ec:	b80d883a 	mov	r6,r23
  8006f0:	000b883a 	mov	r5,zero
  8006f4:	81001704 	addi	r4,r16,92
  8006f8:	0801b280 	call	801b28 <memset>
  8006fc:	00800044 	movi	r2,1
  800700:	84000715 	stw	r16,28(r16)
  800704:	85800815 	stw	r22,32(r16)
  800708:	85400915 	stw	r21,36(r16)
  80070c:	85000a15 	stw	r20,40(r16)
  800710:	84c00b15 	stw	r19,44(r16)
  800714:	90800e15 	stw	r2,56(r18)
  800718:	dfc00817 	ldw	ra,32(sp)
  80071c:	ddc00717 	ldw	r23,28(sp)
  800720:	dd800617 	ldw	r22,24(sp)
  800724:	dd400517 	ldw	r21,20(sp)
  800728:	dd000417 	ldw	r20,16(sp)
  80072c:	dcc00317 	ldw	r19,12(sp)
  800730:	dc800217 	ldw	r18,8(sp)
  800734:	dc400117 	ldw	r17,4(sp)
  800738:	dc000017 	ldw	r16,0(sp)
  80073c:	dec00904 	addi	sp,sp,36
  800740:	f800283a 	ret

00800744 <__fp_lock>:
  800744:	0005883a 	mov	r2,zero
  800748:	f800283a 	ret

0080074c <__sfmoreglue>:
  80074c:	defffc04 	addi	sp,sp,-16
  800750:	dc800215 	stw	r18,8(sp)
  800754:	2825883a 	mov	r18,r5
  800758:	dc000015 	stw	r16,0(sp)
  80075c:	01401a04 	movi	r5,104
  800760:	2021883a 	mov	r16,r4
  800764:	913fffc4 	addi	r4,r18,-1
  800768:	dfc00315 	stw	ra,12(sp)
  80076c:	dc400115 	stw	r17,4(sp)
  800770:	080320c0 	call	80320c <__mulsi3>
  800774:	8009883a 	mov	r4,r16
  800778:	11401d04 	addi	r5,r2,116
  80077c:	1023883a 	mov	r17,r2
  800780:	0800f940 	call	800f94 <_malloc_r>
  800784:	1021883a 	mov	r16,r2
  800788:	10000726 	beq	r2,zero,8007a8 <__sfmoreglue+0x5c>
  80078c:	11000304 	addi	r4,r2,12
  800790:	10000015 	stw	zero,0(r2)
  800794:	14800115 	stw	r18,4(r2)
  800798:	11000215 	stw	r4,8(r2)
  80079c:	89801a04 	addi	r6,r17,104
  8007a0:	000b883a 	mov	r5,zero
  8007a4:	0801b280 	call	801b28 <memset>
  8007a8:	8005883a 	mov	r2,r16
  8007ac:	dfc00317 	ldw	ra,12(sp)
  8007b0:	dc800217 	ldw	r18,8(sp)
  8007b4:	dc400117 	ldw	r17,4(sp)
  8007b8:	dc000017 	ldw	r16,0(sp)
  8007bc:	dec00404 	addi	sp,sp,16
  8007c0:	f800283a 	ret

008007c4 <__sfp>:
  8007c4:	defffb04 	addi	sp,sp,-20
  8007c8:	dc000015 	stw	r16,0(sp)
  8007cc:	04002074 	movhi	r16,129
  8007d0:	843e3b04 	addi	r16,r16,-1812
  8007d4:	dcc00315 	stw	r19,12(sp)
  8007d8:	2027883a 	mov	r19,r4
  8007dc:	81000017 	ldw	r4,0(r16)
  8007e0:	dfc00415 	stw	ra,16(sp)
  8007e4:	dc800215 	stw	r18,8(sp)
  8007e8:	20800e17 	ldw	r2,56(r4)
  8007ec:	dc400115 	stw	r17,4(sp)
  8007f0:	1000021e 	bne	r2,zero,8007fc <__sfp+0x38>
  8007f4:	08005a80 	call	8005a8 <__sinit.part.1>
  8007f8:	81000017 	ldw	r4,0(r16)
  8007fc:	2480b804 	addi	r18,r4,736
  800800:	047fffc4 	movi	r17,-1
  800804:	91000117 	ldw	r4,4(r18)
  800808:	94000217 	ldw	r16,8(r18)
  80080c:	213fffc4 	addi	r4,r4,-1
  800810:	20000a16 	blt	r4,zero,80083c <__sfp+0x78>
  800814:	8080030f 	ldh	r2,12(r16)
  800818:	10000c26 	beq	r2,zero,80084c <__sfp+0x88>
  80081c:	80c01d04 	addi	r3,r16,116
  800820:	00000206 	br	80082c <__sfp+0x68>
  800824:	18bfe60f 	ldh	r2,-104(r3)
  800828:	10000826 	beq	r2,zero,80084c <__sfp+0x88>
  80082c:	213fffc4 	addi	r4,r4,-1
  800830:	1c3ffd04 	addi	r16,r3,-12
  800834:	18c01a04 	addi	r3,r3,104
  800838:	247ffa1e 	bne	r4,r17,800824 <__alt_data_end+0xff800824>
  80083c:	90800017 	ldw	r2,0(r18)
  800840:	10001d26 	beq	r2,zero,8008b8 <__sfp+0xf4>
  800844:	1025883a 	mov	r18,r2
  800848:	003fee06 	br	800804 <__alt_data_end+0xff800804>
  80084c:	00bfffc4 	movi	r2,-1
  800850:	8080038d 	sth	r2,14(r16)
  800854:	00800044 	movi	r2,1
  800858:	8080030d 	sth	r2,12(r16)
  80085c:	80001915 	stw	zero,100(r16)
  800860:	80000015 	stw	zero,0(r16)
  800864:	80000215 	stw	zero,8(r16)
  800868:	80000115 	stw	zero,4(r16)
  80086c:	80000415 	stw	zero,16(r16)
  800870:	80000515 	stw	zero,20(r16)
  800874:	80000615 	stw	zero,24(r16)
  800878:	01800204 	movi	r6,8
  80087c:	000b883a 	mov	r5,zero
  800880:	81001704 	addi	r4,r16,92
  800884:	0801b280 	call	801b28 <memset>
  800888:	8005883a 	mov	r2,r16
  80088c:	80000c15 	stw	zero,48(r16)
  800890:	80000d15 	stw	zero,52(r16)
  800894:	80001115 	stw	zero,68(r16)
  800898:	80001215 	stw	zero,72(r16)
  80089c:	dfc00417 	ldw	ra,16(sp)
  8008a0:	dcc00317 	ldw	r19,12(sp)
  8008a4:	dc800217 	ldw	r18,8(sp)
  8008a8:	dc400117 	ldw	r17,4(sp)
  8008ac:	dc000017 	ldw	r16,0(sp)
  8008b0:	dec00504 	addi	sp,sp,20
  8008b4:	f800283a 	ret
  8008b8:	01400104 	movi	r5,4
  8008bc:	9809883a 	mov	r4,r19
  8008c0:	080074c0 	call	80074c <__sfmoreglue>
  8008c4:	90800015 	stw	r2,0(r18)
  8008c8:	103fde1e 	bne	r2,zero,800844 <__alt_data_end+0xff800844>
  8008cc:	00800304 	movi	r2,12
  8008d0:	98800015 	stw	r2,0(r19)
  8008d4:	0005883a 	mov	r2,zero
  8008d8:	003ff006 	br	80089c <__alt_data_end+0xff80089c>

008008dc <_cleanup>:
  8008dc:	00802074 	movhi	r2,129
  8008e0:	10be3b04 	addi	r2,r2,-1812
  8008e4:	11000017 	ldw	r4,0(r2)
  8008e8:	01402034 	movhi	r5,128
  8008ec:	29495304 	addi	r5,r5,9548
  8008f0:	0800ed01 	jmpi	800ed0 <_fwalk_reent>

008008f4 <__sinit>:
  8008f4:	20800e17 	ldw	r2,56(r4)
  8008f8:	10000126 	beq	r2,zero,800900 <__sinit+0xc>
  8008fc:	f800283a 	ret
  800900:	08005a81 	jmpi	8005a8 <__sinit.part.1>

00800904 <__sfp_lock_acquire>:
  800904:	f800283a 	ret

00800908 <__sfp_lock_release>:
  800908:	f800283a 	ret

0080090c <__sinit_lock_acquire>:
  80090c:	f800283a 	ret

00800910 <__sinit_lock_release>:
  800910:	f800283a 	ret

00800914 <__fp_lock_all>:
  800914:	00802074 	movhi	r2,129
  800918:	10be3c04 	addi	r2,r2,-1808
  80091c:	11000017 	ldw	r4,0(r2)
  800920:	01402034 	movhi	r5,128
  800924:	2941d104 	addi	r5,r5,1860
  800928:	0800e0c1 	jmpi	800e0c <_fwalk>

0080092c <__fp_unlock_all>:
  80092c:	00802074 	movhi	r2,129
  800930:	10be3c04 	addi	r2,r2,-1808
  800934:	11000017 	ldw	r4,0(r2)
  800938:	01402034 	movhi	r5,128
  80093c:	29416504 	addi	r5,r5,1428
  800940:	0800e0c1 	jmpi	800e0c <_fwalk>

00800944 <__sfvwrite_r>:
  800944:	30800217 	ldw	r2,8(r6)
  800948:	10006726 	beq	r2,zero,800ae8 <__sfvwrite_r+0x1a4>
  80094c:	28c0030b 	ldhu	r3,12(r5)
  800950:	defff404 	addi	sp,sp,-48
  800954:	dd400715 	stw	r21,28(sp)
  800958:	dd000615 	stw	r20,24(sp)
  80095c:	dc000215 	stw	r16,8(sp)
  800960:	dfc00b15 	stw	ra,44(sp)
  800964:	df000a15 	stw	fp,40(sp)
  800968:	ddc00915 	stw	r23,36(sp)
  80096c:	dd800815 	stw	r22,32(sp)
  800970:	dcc00515 	stw	r19,20(sp)
  800974:	dc800415 	stw	r18,16(sp)
  800978:	dc400315 	stw	r17,12(sp)
  80097c:	1880020c 	andi	r2,r3,8
  800980:	2821883a 	mov	r16,r5
  800984:	202b883a 	mov	r21,r4
  800988:	3029883a 	mov	r20,r6
  80098c:	10002726 	beq	r2,zero,800a2c <__sfvwrite_r+0xe8>
  800990:	28800417 	ldw	r2,16(r5)
  800994:	10002526 	beq	r2,zero,800a2c <__sfvwrite_r+0xe8>
  800998:	1880008c 	andi	r2,r3,2
  80099c:	a4400017 	ldw	r17,0(r20)
  8009a0:	10002a26 	beq	r2,zero,800a4c <__sfvwrite_r+0x108>
  8009a4:	05a00034 	movhi	r22,32768
  8009a8:	0027883a 	mov	r19,zero
  8009ac:	0025883a 	mov	r18,zero
  8009b0:	b5bf0004 	addi	r22,r22,-1024
  8009b4:	980d883a 	mov	r6,r19
  8009b8:	a809883a 	mov	r4,r21
  8009bc:	90004626 	beq	r18,zero,800ad8 <__sfvwrite_r+0x194>
  8009c0:	900f883a 	mov	r7,r18
  8009c4:	b480022e 	bgeu	r22,r18,8009d0 <__sfvwrite_r+0x8c>
  8009c8:	01e00034 	movhi	r7,32768
  8009cc:	39ff0004 	addi	r7,r7,-1024
  8009d0:	80800917 	ldw	r2,36(r16)
  8009d4:	81400717 	ldw	r5,28(r16)
  8009d8:	103ee83a 	callr	r2
  8009dc:	00805a0e 	bge	zero,r2,800b48 <__sfvwrite_r+0x204>
  8009e0:	a0c00217 	ldw	r3,8(r20)
  8009e4:	98a7883a 	add	r19,r19,r2
  8009e8:	90a5c83a 	sub	r18,r18,r2
  8009ec:	1885c83a 	sub	r2,r3,r2
  8009f0:	a0800215 	stw	r2,8(r20)
  8009f4:	103fef1e 	bne	r2,zero,8009b4 <__alt_data_end+0xff8009b4>
  8009f8:	0005883a 	mov	r2,zero
  8009fc:	dfc00b17 	ldw	ra,44(sp)
  800a00:	df000a17 	ldw	fp,40(sp)
  800a04:	ddc00917 	ldw	r23,36(sp)
  800a08:	dd800817 	ldw	r22,32(sp)
  800a0c:	dd400717 	ldw	r21,28(sp)
  800a10:	dd000617 	ldw	r20,24(sp)
  800a14:	dcc00517 	ldw	r19,20(sp)
  800a18:	dc800417 	ldw	r18,16(sp)
  800a1c:	dc400317 	ldw	r17,12(sp)
  800a20:	dc000217 	ldw	r16,8(sp)
  800a24:	dec00c04 	addi	sp,sp,48
  800a28:	f800283a 	ret
  800a2c:	800b883a 	mov	r5,r16
  800a30:	a809883a 	mov	r4,r21
  800a34:	08023a40 	call	8023a4 <__swsetup_r>
  800a38:	1000ee1e 	bne	r2,zero,800df4 <__sfvwrite_r+0x4b0>
  800a3c:	80c0030b 	ldhu	r3,12(r16)
  800a40:	a4400017 	ldw	r17,0(r20)
  800a44:	1880008c 	andi	r2,r3,2
  800a48:	103fd61e 	bne	r2,zero,8009a4 <__alt_data_end+0xff8009a4>
  800a4c:	1880004c 	andi	r2,r3,1
  800a50:	1000421e 	bne	r2,zero,800b5c <__sfvwrite_r+0x218>
  800a54:	0039883a 	mov	fp,zero
  800a58:	0025883a 	mov	r18,zero
  800a5c:	90001a26 	beq	r18,zero,800ac8 <__sfvwrite_r+0x184>
  800a60:	1880800c 	andi	r2,r3,512
  800a64:	84c00217 	ldw	r19,8(r16)
  800a68:	10002126 	beq	r2,zero,800af0 <__sfvwrite_r+0x1ac>
  800a6c:	982f883a 	mov	r23,r19
  800a70:	94c09636 	bltu	r18,r19,800ccc <__sfvwrite_r+0x388>
  800a74:	1881200c 	andi	r2,r3,1152
  800a78:	1000a11e 	bne	r2,zero,800d00 <__sfvwrite_r+0x3bc>
  800a7c:	81000017 	ldw	r4,0(r16)
  800a80:	b80d883a 	mov	r6,r23
  800a84:	e00b883a 	mov	r5,fp
  800a88:	08019cc0 	call	8019cc <memmove>
  800a8c:	80c00217 	ldw	r3,8(r16)
  800a90:	81000017 	ldw	r4,0(r16)
  800a94:	9005883a 	mov	r2,r18
  800a98:	1ce7c83a 	sub	r19,r3,r19
  800a9c:	25cf883a 	add	r7,r4,r23
  800aa0:	84c00215 	stw	r19,8(r16)
  800aa4:	81c00015 	stw	r7,0(r16)
  800aa8:	a0c00217 	ldw	r3,8(r20)
  800aac:	e0b9883a 	add	fp,fp,r2
  800ab0:	90a5c83a 	sub	r18,r18,r2
  800ab4:	18a7c83a 	sub	r19,r3,r2
  800ab8:	a4c00215 	stw	r19,8(r20)
  800abc:	983fce26 	beq	r19,zero,8009f8 <__alt_data_end+0xff8009f8>
  800ac0:	80c0030b 	ldhu	r3,12(r16)
  800ac4:	903fe61e 	bne	r18,zero,800a60 <__alt_data_end+0xff800a60>
  800ac8:	8f000017 	ldw	fp,0(r17)
  800acc:	8c800117 	ldw	r18,4(r17)
  800ad0:	8c400204 	addi	r17,r17,8
  800ad4:	003fe106 	br	800a5c <__alt_data_end+0xff800a5c>
  800ad8:	8cc00017 	ldw	r19,0(r17)
  800adc:	8c800117 	ldw	r18,4(r17)
  800ae0:	8c400204 	addi	r17,r17,8
  800ae4:	003fb306 	br	8009b4 <__alt_data_end+0xff8009b4>
  800ae8:	0005883a 	mov	r2,zero
  800aec:	f800283a 	ret
  800af0:	81000017 	ldw	r4,0(r16)
  800af4:	80800417 	ldw	r2,16(r16)
  800af8:	11005a36 	bltu	r2,r4,800c64 <__sfvwrite_r+0x320>
  800afc:	85c00517 	ldw	r23,20(r16)
  800b00:	95c05836 	bltu	r18,r23,800c64 <__sfvwrite_r+0x320>
  800b04:	00a00034 	movhi	r2,32768
  800b08:	10bfffc4 	addi	r2,r2,-1
  800b0c:	9009883a 	mov	r4,r18
  800b10:	1480012e 	bgeu	r2,r18,800b18 <__sfvwrite_r+0x1d4>
  800b14:	1009883a 	mov	r4,r2
  800b18:	b80b883a 	mov	r5,r23
  800b1c:	08030580 	call	803058 <__divsi3>
  800b20:	b80b883a 	mov	r5,r23
  800b24:	1009883a 	mov	r4,r2
  800b28:	080320c0 	call	80320c <__mulsi3>
  800b2c:	81400717 	ldw	r5,28(r16)
  800b30:	80c00917 	ldw	r3,36(r16)
  800b34:	100f883a 	mov	r7,r2
  800b38:	e00d883a 	mov	r6,fp
  800b3c:	a809883a 	mov	r4,r21
  800b40:	183ee83a 	callr	r3
  800b44:	00bfd816 	blt	zero,r2,800aa8 <__alt_data_end+0xff800aa8>
  800b48:	8080030b 	ldhu	r2,12(r16)
  800b4c:	10801014 	ori	r2,r2,64
  800b50:	8080030d 	sth	r2,12(r16)
  800b54:	00bfffc4 	movi	r2,-1
  800b58:	003fa806 	br	8009fc <__alt_data_end+0xff8009fc>
  800b5c:	0027883a 	mov	r19,zero
  800b60:	0011883a 	mov	r8,zero
  800b64:	0039883a 	mov	fp,zero
  800b68:	0025883a 	mov	r18,zero
  800b6c:	90001f26 	beq	r18,zero,800bec <__sfvwrite_r+0x2a8>
  800b70:	40005a26 	beq	r8,zero,800cdc <__sfvwrite_r+0x398>
  800b74:	982d883a 	mov	r22,r19
  800b78:	94c0012e 	bgeu	r18,r19,800b80 <__sfvwrite_r+0x23c>
  800b7c:	902d883a 	mov	r22,r18
  800b80:	81000017 	ldw	r4,0(r16)
  800b84:	80800417 	ldw	r2,16(r16)
  800b88:	b02f883a 	mov	r23,r22
  800b8c:	81c00517 	ldw	r7,20(r16)
  800b90:	1100032e 	bgeu	r2,r4,800ba0 <__sfvwrite_r+0x25c>
  800b94:	80c00217 	ldw	r3,8(r16)
  800b98:	38c7883a 	add	r3,r7,r3
  800b9c:	1d801816 	blt	r3,r22,800c00 <__sfvwrite_r+0x2bc>
  800ba0:	b1c03e16 	blt	r22,r7,800c9c <__sfvwrite_r+0x358>
  800ba4:	80800917 	ldw	r2,36(r16)
  800ba8:	81400717 	ldw	r5,28(r16)
  800bac:	e00d883a 	mov	r6,fp
  800bb0:	da000115 	stw	r8,4(sp)
  800bb4:	a809883a 	mov	r4,r21
  800bb8:	103ee83a 	callr	r2
  800bbc:	102f883a 	mov	r23,r2
  800bc0:	da000117 	ldw	r8,4(sp)
  800bc4:	00bfe00e 	bge	zero,r2,800b48 <__alt_data_end+0xff800b48>
  800bc8:	9de7c83a 	sub	r19,r19,r23
  800bcc:	98001f26 	beq	r19,zero,800c4c <__sfvwrite_r+0x308>
  800bd0:	a0800217 	ldw	r2,8(r20)
  800bd4:	e5f9883a 	add	fp,fp,r23
  800bd8:	95e5c83a 	sub	r18,r18,r23
  800bdc:	15efc83a 	sub	r23,r2,r23
  800be0:	a5c00215 	stw	r23,8(r20)
  800be4:	b83f8426 	beq	r23,zero,8009f8 <__alt_data_end+0xff8009f8>
  800be8:	903fe11e 	bne	r18,zero,800b70 <__alt_data_end+0xff800b70>
  800bec:	8f000017 	ldw	fp,0(r17)
  800bf0:	8c800117 	ldw	r18,4(r17)
  800bf4:	0011883a 	mov	r8,zero
  800bf8:	8c400204 	addi	r17,r17,8
  800bfc:	003fdb06 	br	800b6c <__alt_data_end+0xff800b6c>
  800c00:	180d883a 	mov	r6,r3
  800c04:	e00b883a 	mov	r5,fp
  800c08:	da000115 	stw	r8,4(sp)
  800c0c:	d8c00015 	stw	r3,0(sp)
  800c10:	08019cc0 	call	8019cc <memmove>
  800c14:	d8c00017 	ldw	r3,0(sp)
  800c18:	80800017 	ldw	r2,0(r16)
  800c1c:	800b883a 	mov	r5,r16
  800c20:	a809883a 	mov	r4,r21
  800c24:	10c5883a 	add	r2,r2,r3
  800c28:	80800015 	stw	r2,0(r16)
  800c2c:	d8c00015 	stw	r3,0(sp)
  800c30:	080286c0 	call	80286c <_fflush_r>
  800c34:	d8c00017 	ldw	r3,0(sp)
  800c38:	da000117 	ldw	r8,4(sp)
  800c3c:	103fc21e 	bne	r2,zero,800b48 <__alt_data_end+0xff800b48>
  800c40:	182f883a 	mov	r23,r3
  800c44:	9de7c83a 	sub	r19,r19,r23
  800c48:	983fe11e 	bne	r19,zero,800bd0 <__alt_data_end+0xff800bd0>
  800c4c:	800b883a 	mov	r5,r16
  800c50:	a809883a 	mov	r4,r21
  800c54:	080286c0 	call	80286c <_fflush_r>
  800c58:	103fbb1e 	bne	r2,zero,800b48 <__alt_data_end+0xff800b48>
  800c5c:	0011883a 	mov	r8,zero
  800c60:	003fdb06 	br	800bd0 <__alt_data_end+0xff800bd0>
  800c64:	94c0012e 	bgeu	r18,r19,800c6c <__sfvwrite_r+0x328>
  800c68:	9027883a 	mov	r19,r18
  800c6c:	980d883a 	mov	r6,r19
  800c70:	e00b883a 	mov	r5,fp
  800c74:	08019cc0 	call	8019cc <memmove>
  800c78:	80800217 	ldw	r2,8(r16)
  800c7c:	80c00017 	ldw	r3,0(r16)
  800c80:	14c5c83a 	sub	r2,r2,r19
  800c84:	1cc7883a 	add	r3,r3,r19
  800c88:	80800215 	stw	r2,8(r16)
  800c8c:	80c00015 	stw	r3,0(r16)
  800c90:	10004326 	beq	r2,zero,800da0 <__sfvwrite_r+0x45c>
  800c94:	9805883a 	mov	r2,r19
  800c98:	003f8306 	br	800aa8 <__alt_data_end+0xff800aa8>
  800c9c:	b00d883a 	mov	r6,r22
  800ca0:	e00b883a 	mov	r5,fp
  800ca4:	da000115 	stw	r8,4(sp)
  800ca8:	08019cc0 	call	8019cc <memmove>
  800cac:	80800217 	ldw	r2,8(r16)
  800cb0:	80c00017 	ldw	r3,0(r16)
  800cb4:	da000117 	ldw	r8,4(sp)
  800cb8:	1585c83a 	sub	r2,r2,r22
  800cbc:	1dad883a 	add	r22,r3,r22
  800cc0:	80800215 	stw	r2,8(r16)
  800cc4:	85800015 	stw	r22,0(r16)
  800cc8:	003fbf06 	br	800bc8 <__alt_data_end+0xff800bc8>
  800ccc:	81000017 	ldw	r4,0(r16)
  800cd0:	9027883a 	mov	r19,r18
  800cd4:	902f883a 	mov	r23,r18
  800cd8:	003f6906 	br	800a80 <__alt_data_end+0xff800a80>
  800cdc:	900d883a 	mov	r6,r18
  800ce0:	01400284 	movi	r5,10
  800ce4:	e009883a 	mov	r4,fp
  800ce8:	08017a00 	call	8017a0 <memchr>
  800cec:	10003e26 	beq	r2,zero,800de8 <__sfvwrite_r+0x4a4>
  800cf0:	10800044 	addi	r2,r2,1
  800cf4:	1727c83a 	sub	r19,r2,fp
  800cf8:	02000044 	movi	r8,1
  800cfc:	003f9d06 	br	800b74 <__alt_data_end+0xff800b74>
  800d00:	80800517 	ldw	r2,20(r16)
  800d04:	81400417 	ldw	r5,16(r16)
  800d08:	81c00017 	ldw	r7,0(r16)
  800d0c:	10a7883a 	add	r19,r2,r2
  800d10:	9885883a 	add	r2,r19,r2
  800d14:	1026d7fa 	srli	r19,r2,31
  800d18:	396dc83a 	sub	r22,r7,r5
  800d1c:	b1000044 	addi	r4,r22,1
  800d20:	9885883a 	add	r2,r19,r2
  800d24:	1027d07a 	srai	r19,r2,1
  800d28:	2485883a 	add	r2,r4,r18
  800d2c:	980d883a 	mov	r6,r19
  800d30:	9880022e 	bgeu	r19,r2,800d3c <__sfvwrite_r+0x3f8>
  800d34:	1027883a 	mov	r19,r2
  800d38:	100d883a 	mov	r6,r2
  800d3c:	18c1000c 	andi	r3,r3,1024
  800d40:	18001c26 	beq	r3,zero,800db4 <__sfvwrite_r+0x470>
  800d44:	300b883a 	mov	r5,r6
  800d48:	a809883a 	mov	r4,r21
  800d4c:	0800f940 	call	800f94 <_malloc_r>
  800d50:	102f883a 	mov	r23,r2
  800d54:	10002926 	beq	r2,zero,800dfc <__sfvwrite_r+0x4b8>
  800d58:	81400417 	ldw	r5,16(r16)
  800d5c:	b00d883a 	mov	r6,r22
  800d60:	1009883a 	mov	r4,r2
  800d64:	08018840 	call	801884 <memcpy>
  800d68:	8080030b 	ldhu	r2,12(r16)
  800d6c:	00fedfc4 	movi	r3,-1153
  800d70:	10c4703a 	and	r2,r2,r3
  800d74:	10802014 	ori	r2,r2,128
  800d78:	8080030d 	sth	r2,12(r16)
  800d7c:	bd89883a 	add	r4,r23,r22
  800d80:	9d8fc83a 	sub	r7,r19,r22
  800d84:	85c00415 	stw	r23,16(r16)
  800d88:	84c00515 	stw	r19,20(r16)
  800d8c:	81000015 	stw	r4,0(r16)
  800d90:	9027883a 	mov	r19,r18
  800d94:	81c00215 	stw	r7,8(r16)
  800d98:	902f883a 	mov	r23,r18
  800d9c:	003f3806 	br	800a80 <__alt_data_end+0xff800a80>
  800da0:	800b883a 	mov	r5,r16
  800da4:	a809883a 	mov	r4,r21
  800da8:	080286c0 	call	80286c <_fflush_r>
  800dac:	103fb926 	beq	r2,zero,800c94 <__alt_data_end+0xff800c94>
  800db0:	003f6506 	br	800b48 <__alt_data_end+0xff800b48>
  800db4:	a809883a 	mov	r4,r21
  800db8:	0801c500 	call	801c50 <_realloc_r>
  800dbc:	102f883a 	mov	r23,r2
  800dc0:	103fee1e 	bne	r2,zero,800d7c <__alt_data_end+0xff800d7c>
  800dc4:	81400417 	ldw	r5,16(r16)
  800dc8:	a809883a 	mov	r4,r21
  800dcc:	0802a1c0 	call	802a1c <_free_r>
  800dd0:	8080030b 	ldhu	r2,12(r16)
  800dd4:	00ffdfc4 	movi	r3,-129
  800dd8:	1884703a 	and	r2,r3,r2
  800ddc:	00c00304 	movi	r3,12
  800de0:	a8c00015 	stw	r3,0(r21)
  800de4:	003f5906 	br	800b4c <__alt_data_end+0xff800b4c>
  800de8:	94c00044 	addi	r19,r18,1
  800dec:	02000044 	movi	r8,1
  800df0:	003f6006 	br	800b74 <__alt_data_end+0xff800b74>
  800df4:	00bfffc4 	movi	r2,-1
  800df8:	003f0006 	br	8009fc <__alt_data_end+0xff8009fc>
  800dfc:	00800304 	movi	r2,12
  800e00:	a8800015 	stw	r2,0(r21)
  800e04:	8080030b 	ldhu	r2,12(r16)
  800e08:	003f5006 	br	800b4c <__alt_data_end+0xff800b4c>

00800e0c <_fwalk>:
  800e0c:	defff704 	addi	sp,sp,-36
  800e10:	dd000415 	stw	r20,16(sp)
  800e14:	dfc00815 	stw	ra,32(sp)
  800e18:	ddc00715 	stw	r23,28(sp)
  800e1c:	dd800615 	stw	r22,24(sp)
  800e20:	dd400515 	stw	r21,20(sp)
  800e24:	dcc00315 	stw	r19,12(sp)
  800e28:	dc800215 	stw	r18,8(sp)
  800e2c:	dc400115 	stw	r17,4(sp)
  800e30:	dc000015 	stw	r16,0(sp)
  800e34:	2500b804 	addi	r20,r4,736
  800e38:	a0002326 	beq	r20,zero,800ec8 <_fwalk+0xbc>
  800e3c:	282b883a 	mov	r21,r5
  800e40:	002f883a 	mov	r23,zero
  800e44:	05800044 	movi	r22,1
  800e48:	04ffffc4 	movi	r19,-1
  800e4c:	a4400117 	ldw	r17,4(r20)
  800e50:	a4800217 	ldw	r18,8(r20)
  800e54:	8c7fffc4 	addi	r17,r17,-1
  800e58:	88000d16 	blt	r17,zero,800e90 <_fwalk+0x84>
  800e5c:	94000304 	addi	r16,r18,12
  800e60:	94800384 	addi	r18,r18,14
  800e64:	8080000b 	ldhu	r2,0(r16)
  800e68:	8c7fffc4 	addi	r17,r17,-1
  800e6c:	813ffd04 	addi	r4,r16,-12
  800e70:	b080042e 	bgeu	r22,r2,800e84 <_fwalk+0x78>
  800e74:	9080000f 	ldh	r2,0(r18)
  800e78:	14c00226 	beq	r2,r19,800e84 <_fwalk+0x78>
  800e7c:	a83ee83a 	callr	r21
  800e80:	b8aeb03a 	or	r23,r23,r2
  800e84:	84001a04 	addi	r16,r16,104
  800e88:	94801a04 	addi	r18,r18,104
  800e8c:	8cfff51e 	bne	r17,r19,800e64 <__alt_data_end+0xff800e64>
  800e90:	a5000017 	ldw	r20,0(r20)
  800e94:	a03fed1e 	bne	r20,zero,800e4c <__alt_data_end+0xff800e4c>
  800e98:	b805883a 	mov	r2,r23
  800e9c:	dfc00817 	ldw	ra,32(sp)
  800ea0:	ddc00717 	ldw	r23,28(sp)
  800ea4:	dd800617 	ldw	r22,24(sp)
  800ea8:	dd400517 	ldw	r21,20(sp)
  800eac:	dd000417 	ldw	r20,16(sp)
  800eb0:	dcc00317 	ldw	r19,12(sp)
  800eb4:	dc800217 	ldw	r18,8(sp)
  800eb8:	dc400117 	ldw	r17,4(sp)
  800ebc:	dc000017 	ldw	r16,0(sp)
  800ec0:	dec00904 	addi	sp,sp,36
  800ec4:	f800283a 	ret
  800ec8:	002f883a 	mov	r23,zero
  800ecc:	003ff206 	br	800e98 <__alt_data_end+0xff800e98>

00800ed0 <_fwalk_reent>:
  800ed0:	defff704 	addi	sp,sp,-36
  800ed4:	dd000415 	stw	r20,16(sp)
  800ed8:	dfc00815 	stw	ra,32(sp)
  800edc:	ddc00715 	stw	r23,28(sp)
  800ee0:	dd800615 	stw	r22,24(sp)
  800ee4:	dd400515 	stw	r21,20(sp)
  800ee8:	dcc00315 	stw	r19,12(sp)
  800eec:	dc800215 	stw	r18,8(sp)
  800ef0:	dc400115 	stw	r17,4(sp)
  800ef4:	dc000015 	stw	r16,0(sp)
  800ef8:	2500b804 	addi	r20,r4,736
  800efc:	a0002326 	beq	r20,zero,800f8c <_fwalk_reent+0xbc>
  800f00:	282b883a 	mov	r21,r5
  800f04:	2027883a 	mov	r19,r4
  800f08:	002f883a 	mov	r23,zero
  800f0c:	05800044 	movi	r22,1
  800f10:	04bfffc4 	movi	r18,-1
  800f14:	a4400117 	ldw	r17,4(r20)
  800f18:	a4000217 	ldw	r16,8(r20)
  800f1c:	8c7fffc4 	addi	r17,r17,-1
  800f20:	88000c16 	blt	r17,zero,800f54 <_fwalk_reent+0x84>
  800f24:	84000304 	addi	r16,r16,12
  800f28:	8080000b 	ldhu	r2,0(r16)
  800f2c:	8c7fffc4 	addi	r17,r17,-1
  800f30:	817ffd04 	addi	r5,r16,-12
  800f34:	b080052e 	bgeu	r22,r2,800f4c <_fwalk_reent+0x7c>
  800f38:	8080008f 	ldh	r2,2(r16)
  800f3c:	9809883a 	mov	r4,r19
  800f40:	14800226 	beq	r2,r18,800f4c <_fwalk_reent+0x7c>
  800f44:	a83ee83a 	callr	r21
  800f48:	b8aeb03a 	or	r23,r23,r2
  800f4c:	84001a04 	addi	r16,r16,104
  800f50:	8cbff51e 	bne	r17,r18,800f28 <__alt_data_end+0xff800f28>
  800f54:	a5000017 	ldw	r20,0(r20)
  800f58:	a03fee1e 	bne	r20,zero,800f14 <__alt_data_end+0xff800f14>
  800f5c:	b805883a 	mov	r2,r23
  800f60:	dfc00817 	ldw	ra,32(sp)
  800f64:	ddc00717 	ldw	r23,28(sp)
  800f68:	dd800617 	ldw	r22,24(sp)
  800f6c:	dd400517 	ldw	r21,20(sp)
  800f70:	dd000417 	ldw	r20,16(sp)
  800f74:	dcc00317 	ldw	r19,12(sp)
  800f78:	dc800217 	ldw	r18,8(sp)
  800f7c:	dc400117 	ldw	r17,4(sp)
  800f80:	dc000017 	ldw	r16,0(sp)
  800f84:	dec00904 	addi	sp,sp,36
  800f88:	f800283a 	ret
  800f8c:	002f883a 	mov	r23,zero
  800f90:	003ff206 	br	800f5c <__alt_data_end+0xff800f5c>

00800f94 <_malloc_r>:
  800f94:	defff504 	addi	sp,sp,-44
  800f98:	dc800315 	stw	r18,12(sp)
  800f9c:	dfc00a15 	stw	ra,40(sp)
  800fa0:	df000915 	stw	fp,36(sp)
  800fa4:	ddc00815 	stw	r23,32(sp)
  800fa8:	dd800715 	stw	r22,28(sp)
  800fac:	dd400615 	stw	r21,24(sp)
  800fb0:	dd000515 	stw	r20,20(sp)
  800fb4:	dcc00415 	stw	r19,16(sp)
  800fb8:	dc400215 	stw	r17,8(sp)
  800fbc:	dc000115 	stw	r16,4(sp)
  800fc0:	288002c4 	addi	r2,r5,11
  800fc4:	00c00584 	movi	r3,22
  800fc8:	2025883a 	mov	r18,r4
  800fcc:	18807f2e 	bgeu	r3,r2,8011cc <_malloc_r+0x238>
  800fd0:	047ffe04 	movi	r17,-8
  800fd4:	1462703a 	and	r17,r2,r17
  800fd8:	8800a316 	blt	r17,zero,801268 <_malloc_r+0x2d4>
  800fdc:	8940a236 	bltu	r17,r5,801268 <_malloc_r+0x2d4>
  800fe0:	0803ce40 	call	803ce4 <__malloc_lock>
  800fe4:	00807dc4 	movi	r2,503
  800fe8:	1441e92e 	bgeu	r2,r17,801790 <_malloc_r+0x7fc>
  800fec:	8804d27a 	srli	r2,r17,9
  800ff0:	1000a126 	beq	r2,zero,801278 <_malloc_r+0x2e4>
  800ff4:	00c00104 	movi	r3,4
  800ff8:	18811e36 	bltu	r3,r2,801474 <_malloc_r+0x4e0>
  800ffc:	8804d1ba 	srli	r2,r17,6
  801000:	12000e44 	addi	r8,r2,57
  801004:	11c00e04 	addi	r7,r2,56
  801008:	4209883a 	add	r4,r8,r8
  80100c:	04c02074 	movhi	r19,129
  801010:	2109883a 	add	r4,r4,r4
  801014:	9cf8a904 	addi	r19,r19,-7516
  801018:	2109883a 	add	r4,r4,r4
  80101c:	9909883a 	add	r4,r19,r4
  801020:	24000117 	ldw	r16,4(r4)
  801024:	213ffe04 	addi	r4,r4,-8
  801028:	24009726 	beq	r4,r16,801288 <_malloc_r+0x2f4>
  80102c:	80800117 	ldw	r2,4(r16)
  801030:	01bfff04 	movi	r6,-4
  801034:	014003c4 	movi	r5,15
  801038:	1184703a 	and	r2,r2,r6
  80103c:	1447c83a 	sub	r3,r2,r17
  801040:	28c00716 	blt	r5,r3,801060 <_malloc_r+0xcc>
  801044:	1800920e 	bge	r3,zero,801290 <_malloc_r+0x2fc>
  801048:	84000317 	ldw	r16,12(r16)
  80104c:	24008e26 	beq	r4,r16,801288 <_malloc_r+0x2f4>
  801050:	80800117 	ldw	r2,4(r16)
  801054:	1184703a 	and	r2,r2,r6
  801058:	1447c83a 	sub	r3,r2,r17
  80105c:	28fff90e 	bge	r5,r3,801044 <__alt_data_end+0xff801044>
  801060:	3809883a 	mov	r4,r7
  801064:	01802074 	movhi	r6,129
  801068:	9c000417 	ldw	r16,16(r19)
  80106c:	31b8a904 	addi	r6,r6,-7516
  801070:	32000204 	addi	r8,r6,8
  801074:	82013426 	beq	r16,r8,801548 <_malloc_r+0x5b4>
  801078:	80c00117 	ldw	r3,4(r16)
  80107c:	00bfff04 	movi	r2,-4
  801080:	188e703a 	and	r7,r3,r2
  801084:	3c45c83a 	sub	r2,r7,r17
  801088:	00c003c4 	movi	r3,15
  80108c:	18811f16 	blt	r3,r2,80150c <_malloc_r+0x578>
  801090:	32000515 	stw	r8,20(r6)
  801094:	32000415 	stw	r8,16(r6)
  801098:	10007f0e 	bge	r2,zero,801298 <_malloc_r+0x304>
  80109c:	00807fc4 	movi	r2,511
  8010a0:	11c0fd36 	bltu	r2,r7,801498 <_malloc_r+0x504>
  8010a4:	3806d0fa 	srli	r3,r7,3
  8010a8:	01c00044 	movi	r7,1
  8010ac:	30800117 	ldw	r2,4(r6)
  8010b0:	19400044 	addi	r5,r3,1
  8010b4:	294b883a 	add	r5,r5,r5
  8010b8:	1807d0ba 	srai	r3,r3,2
  8010bc:	294b883a 	add	r5,r5,r5
  8010c0:	294b883a 	add	r5,r5,r5
  8010c4:	298b883a 	add	r5,r5,r6
  8010c8:	38c6983a 	sll	r3,r7,r3
  8010cc:	29c00017 	ldw	r7,0(r5)
  8010d0:	2a7ffe04 	addi	r9,r5,-8
  8010d4:	1886b03a 	or	r3,r3,r2
  8010d8:	82400315 	stw	r9,12(r16)
  8010dc:	81c00215 	stw	r7,8(r16)
  8010e0:	30c00115 	stw	r3,4(r6)
  8010e4:	2c000015 	stw	r16,0(r5)
  8010e8:	3c000315 	stw	r16,12(r7)
  8010ec:	2005d0ba 	srai	r2,r4,2
  8010f0:	01400044 	movi	r5,1
  8010f4:	288a983a 	sll	r5,r5,r2
  8010f8:	19406f36 	bltu	r3,r5,8012b8 <_malloc_r+0x324>
  8010fc:	28c4703a 	and	r2,r5,r3
  801100:	10000a1e 	bne	r2,zero,80112c <_malloc_r+0x198>
  801104:	00bfff04 	movi	r2,-4
  801108:	294b883a 	add	r5,r5,r5
  80110c:	2088703a 	and	r4,r4,r2
  801110:	28c4703a 	and	r2,r5,r3
  801114:	21000104 	addi	r4,r4,4
  801118:	1000041e 	bne	r2,zero,80112c <_malloc_r+0x198>
  80111c:	294b883a 	add	r5,r5,r5
  801120:	28c4703a 	and	r2,r5,r3
  801124:	21000104 	addi	r4,r4,4
  801128:	103ffc26 	beq	r2,zero,80111c <__alt_data_end+0xff80111c>
  80112c:	02bfff04 	movi	r10,-4
  801130:	024003c4 	movi	r9,15
  801134:	21800044 	addi	r6,r4,1
  801138:	318d883a 	add	r6,r6,r6
  80113c:	318d883a 	add	r6,r6,r6
  801140:	318d883a 	add	r6,r6,r6
  801144:	998d883a 	add	r6,r19,r6
  801148:	333ffe04 	addi	r12,r6,-8
  80114c:	2017883a 	mov	r11,r4
  801150:	31800104 	addi	r6,r6,4
  801154:	34000017 	ldw	r16,0(r6)
  801158:	31fffd04 	addi	r7,r6,-12
  80115c:	81c0041e 	bne	r16,r7,801170 <_malloc_r+0x1dc>
  801160:	0000fb06 	br	801550 <_malloc_r+0x5bc>
  801164:	1801030e 	bge	r3,zero,801574 <_malloc_r+0x5e0>
  801168:	84000317 	ldw	r16,12(r16)
  80116c:	81c0f826 	beq	r16,r7,801550 <_malloc_r+0x5bc>
  801170:	80800117 	ldw	r2,4(r16)
  801174:	1284703a 	and	r2,r2,r10
  801178:	1447c83a 	sub	r3,r2,r17
  80117c:	48fff90e 	bge	r9,r3,801164 <__alt_data_end+0xff801164>
  801180:	80800317 	ldw	r2,12(r16)
  801184:	81000217 	ldw	r4,8(r16)
  801188:	89400054 	ori	r5,r17,1
  80118c:	81400115 	stw	r5,4(r16)
  801190:	20800315 	stw	r2,12(r4)
  801194:	11000215 	stw	r4,8(r2)
  801198:	8463883a 	add	r17,r16,r17
  80119c:	9c400515 	stw	r17,20(r19)
  8011a0:	9c400415 	stw	r17,16(r19)
  8011a4:	18800054 	ori	r2,r3,1
  8011a8:	88800115 	stw	r2,4(r17)
  8011ac:	8a000315 	stw	r8,12(r17)
  8011b0:	8a000215 	stw	r8,8(r17)
  8011b4:	88e3883a 	add	r17,r17,r3
  8011b8:	88c00015 	stw	r3,0(r17)
  8011bc:	9009883a 	mov	r4,r18
  8011c0:	0803e040 	call	803e04 <__malloc_unlock>
  8011c4:	80800204 	addi	r2,r16,8
  8011c8:	00001b06 	br	801238 <_malloc_r+0x2a4>
  8011cc:	04400404 	movi	r17,16
  8011d0:	89402536 	bltu	r17,r5,801268 <_malloc_r+0x2d4>
  8011d4:	0803ce40 	call	803ce4 <__malloc_lock>
  8011d8:	00800184 	movi	r2,6
  8011dc:	01000084 	movi	r4,2
  8011e0:	04c02074 	movhi	r19,129
  8011e4:	1085883a 	add	r2,r2,r2
  8011e8:	9cf8a904 	addi	r19,r19,-7516
  8011ec:	1085883a 	add	r2,r2,r2
  8011f0:	9885883a 	add	r2,r19,r2
  8011f4:	14000117 	ldw	r16,4(r2)
  8011f8:	10fffe04 	addi	r3,r2,-8
  8011fc:	80c0d926 	beq	r16,r3,801564 <_malloc_r+0x5d0>
  801200:	80c00117 	ldw	r3,4(r16)
  801204:	81000317 	ldw	r4,12(r16)
  801208:	00bfff04 	movi	r2,-4
  80120c:	1884703a 	and	r2,r3,r2
  801210:	81400217 	ldw	r5,8(r16)
  801214:	8085883a 	add	r2,r16,r2
  801218:	10c00117 	ldw	r3,4(r2)
  80121c:	29000315 	stw	r4,12(r5)
  801220:	21400215 	stw	r5,8(r4)
  801224:	18c00054 	ori	r3,r3,1
  801228:	10c00115 	stw	r3,4(r2)
  80122c:	9009883a 	mov	r4,r18
  801230:	0803e040 	call	803e04 <__malloc_unlock>
  801234:	80800204 	addi	r2,r16,8
  801238:	dfc00a17 	ldw	ra,40(sp)
  80123c:	df000917 	ldw	fp,36(sp)
  801240:	ddc00817 	ldw	r23,32(sp)
  801244:	dd800717 	ldw	r22,28(sp)
  801248:	dd400617 	ldw	r21,24(sp)
  80124c:	dd000517 	ldw	r20,20(sp)
  801250:	dcc00417 	ldw	r19,16(sp)
  801254:	dc800317 	ldw	r18,12(sp)
  801258:	dc400217 	ldw	r17,8(sp)
  80125c:	dc000117 	ldw	r16,4(sp)
  801260:	dec00b04 	addi	sp,sp,44
  801264:	f800283a 	ret
  801268:	00800304 	movi	r2,12
  80126c:	90800015 	stw	r2,0(r18)
  801270:	0005883a 	mov	r2,zero
  801274:	003ff006 	br	801238 <__alt_data_end+0xff801238>
  801278:	01002004 	movi	r4,128
  80127c:	02001004 	movi	r8,64
  801280:	01c00fc4 	movi	r7,63
  801284:	003f6106 	br	80100c <__alt_data_end+0xff80100c>
  801288:	4009883a 	mov	r4,r8
  80128c:	003f7506 	br	801064 <__alt_data_end+0xff801064>
  801290:	81000317 	ldw	r4,12(r16)
  801294:	003fde06 	br	801210 <__alt_data_end+0xff801210>
  801298:	81c5883a 	add	r2,r16,r7
  80129c:	11400117 	ldw	r5,4(r2)
  8012a0:	9009883a 	mov	r4,r18
  8012a4:	29400054 	ori	r5,r5,1
  8012a8:	11400115 	stw	r5,4(r2)
  8012ac:	0803e040 	call	803e04 <__malloc_unlock>
  8012b0:	80800204 	addi	r2,r16,8
  8012b4:	003fe006 	br	801238 <__alt_data_end+0xff801238>
  8012b8:	9c000217 	ldw	r16,8(r19)
  8012bc:	00bfff04 	movi	r2,-4
  8012c0:	85800117 	ldw	r22,4(r16)
  8012c4:	b0ac703a 	and	r22,r22,r2
  8012c8:	b4400336 	bltu	r22,r17,8012d8 <_malloc_r+0x344>
  8012cc:	b445c83a 	sub	r2,r22,r17
  8012d0:	00c003c4 	movi	r3,15
  8012d4:	18805d16 	blt	r3,r2,80144c <_malloc_r+0x4b8>
  8012d8:	05c02074 	movhi	r23,129
  8012dc:	00802074 	movhi	r2,129
  8012e0:	10853204 	addi	r2,r2,5320
  8012e4:	bdfe3d04 	addi	r23,r23,-1804
  8012e8:	15400017 	ldw	r21,0(r2)
  8012ec:	b8c00017 	ldw	r3,0(r23)
  8012f0:	00bfffc4 	movi	r2,-1
  8012f4:	858d883a 	add	r6,r16,r22
  8012f8:	8d6b883a 	add	r21,r17,r21
  8012fc:	1880ea26 	beq	r3,r2,8016a8 <_malloc_r+0x714>
  801300:	ad4403c4 	addi	r21,r21,4111
  801304:	00bc0004 	movi	r2,-4096
  801308:	a8aa703a 	and	r21,r21,r2
  80130c:	a80b883a 	mov	r5,r21
  801310:	9009883a 	mov	r4,r18
  801314:	d9800015 	stw	r6,0(sp)
  801318:	08021b40 	call	8021b4 <_sbrk_r>
  80131c:	1029883a 	mov	r20,r2
  801320:	00bfffc4 	movi	r2,-1
  801324:	d9800017 	ldw	r6,0(sp)
  801328:	a080e826 	beq	r20,r2,8016cc <_malloc_r+0x738>
  80132c:	a180a636 	bltu	r20,r6,8015c8 <_malloc_r+0x634>
  801330:	07002074 	movhi	fp,129
  801334:	e7055404 	addi	fp,fp,5456
  801338:	e0800017 	ldw	r2,0(fp)
  80133c:	a887883a 	add	r3,r21,r2
  801340:	e0c00015 	stw	r3,0(fp)
  801344:	3500e626 	beq	r6,r20,8016e0 <_malloc_r+0x74c>
  801348:	b9000017 	ldw	r4,0(r23)
  80134c:	00bfffc4 	movi	r2,-1
  801350:	2080ee26 	beq	r4,r2,80170c <_malloc_r+0x778>
  801354:	a185c83a 	sub	r2,r20,r6
  801358:	10c5883a 	add	r2,r2,r3
  80135c:	e0800015 	stw	r2,0(fp)
  801360:	a0c001cc 	andi	r3,r20,7
  801364:	1800bc26 	beq	r3,zero,801658 <_malloc_r+0x6c4>
  801368:	a0e9c83a 	sub	r20,r20,r3
  80136c:	00840204 	movi	r2,4104
  801370:	a5000204 	addi	r20,r20,8
  801374:	10c7c83a 	sub	r3,r2,r3
  801378:	a545883a 	add	r2,r20,r21
  80137c:	1083ffcc 	andi	r2,r2,4095
  801380:	18abc83a 	sub	r21,r3,r2
  801384:	a80b883a 	mov	r5,r21
  801388:	9009883a 	mov	r4,r18
  80138c:	08021b40 	call	8021b4 <_sbrk_r>
  801390:	00ffffc4 	movi	r3,-1
  801394:	10c0e126 	beq	r2,r3,80171c <_malloc_r+0x788>
  801398:	1505c83a 	sub	r2,r2,r20
  80139c:	1545883a 	add	r2,r2,r21
  8013a0:	10800054 	ori	r2,r2,1
  8013a4:	e0c00017 	ldw	r3,0(fp)
  8013a8:	9d000215 	stw	r20,8(r19)
  8013ac:	a0800115 	stw	r2,4(r20)
  8013b0:	a8c7883a 	add	r3,r21,r3
  8013b4:	e0c00015 	stw	r3,0(fp)
  8013b8:	84c00e26 	beq	r16,r19,8013f4 <_malloc_r+0x460>
  8013bc:	018003c4 	movi	r6,15
  8013c0:	3580a72e 	bgeu	r6,r22,801660 <_malloc_r+0x6cc>
  8013c4:	81400117 	ldw	r5,4(r16)
  8013c8:	013ffe04 	movi	r4,-8
  8013cc:	b0bffd04 	addi	r2,r22,-12
  8013d0:	1104703a 	and	r2,r2,r4
  8013d4:	2900004c 	andi	r4,r5,1
  8013d8:	2088b03a 	or	r4,r4,r2
  8013dc:	81000115 	stw	r4,4(r16)
  8013e0:	01400144 	movi	r5,5
  8013e4:	8089883a 	add	r4,r16,r2
  8013e8:	21400115 	stw	r5,4(r4)
  8013ec:	21400215 	stw	r5,8(r4)
  8013f0:	3080cd36 	bltu	r6,r2,801728 <_malloc_r+0x794>
  8013f4:	00802074 	movhi	r2,129
  8013f8:	10853104 	addi	r2,r2,5316
  8013fc:	11000017 	ldw	r4,0(r2)
  801400:	20c0012e 	bgeu	r4,r3,801408 <_malloc_r+0x474>
  801404:	10c00015 	stw	r3,0(r2)
  801408:	00802074 	movhi	r2,129
  80140c:	10853004 	addi	r2,r2,5312
  801410:	11000017 	ldw	r4,0(r2)
  801414:	9c000217 	ldw	r16,8(r19)
  801418:	20c0012e 	bgeu	r4,r3,801420 <_malloc_r+0x48c>
  80141c:	10c00015 	stw	r3,0(r2)
  801420:	80c00117 	ldw	r3,4(r16)
  801424:	00bfff04 	movi	r2,-4
  801428:	1886703a 	and	r3,r3,r2
  80142c:	1c45c83a 	sub	r2,r3,r17
  801430:	1c400236 	bltu	r3,r17,80143c <_malloc_r+0x4a8>
  801434:	00c003c4 	movi	r3,15
  801438:	18800416 	blt	r3,r2,80144c <_malloc_r+0x4b8>
  80143c:	9009883a 	mov	r4,r18
  801440:	0803e040 	call	803e04 <__malloc_unlock>
  801444:	0005883a 	mov	r2,zero
  801448:	003f7b06 	br	801238 <__alt_data_end+0xff801238>
  80144c:	88c00054 	ori	r3,r17,1
  801450:	80c00115 	stw	r3,4(r16)
  801454:	8463883a 	add	r17,r16,r17
  801458:	10800054 	ori	r2,r2,1
  80145c:	9c400215 	stw	r17,8(r19)
  801460:	88800115 	stw	r2,4(r17)
  801464:	9009883a 	mov	r4,r18
  801468:	0803e040 	call	803e04 <__malloc_unlock>
  80146c:	80800204 	addi	r2,r16,8
  801470:	003f7106 	br	801238 <__alt_data_end+0xff801238>
  801474:	00c00504 	movi	r3,20
  801478:	18804a2e 	bgeu	r3,r2,8015a4 <_malloc_r+0x610>
  80147c:	00c01504 	movi	r3,84
  801480:	18806e36 	bltu	r3,r2,80163c <_malloc_r+0x6a8>
  801484:	8804d33a 	srli	r2,r17,12
  801488:	12001bc4 	addi	r8,r2,111
  80148c:	11c01b84 	addi	r7,r2,110
  801490:	4209883a 	add	r4,r8,r8
  801494:	003edd06 	br	80100c <__alt_data_end+0xff80100c>
  801498:	3804d27a 	srli	r2,r7,9
  80149c:	00c00104 	movi	r3,4
  8014a0:	1880442e 	bgeu	r3,r2,8015b4 <_malloc_r+0x620>
  8014a4:	00c00504 	movi	r3,20
  8014a8:	18808136 	bltu	r3,r2,8016b0 <_malloc_r+0x71c>
  8014ac:	11401704 	addi	r5,r2,92
  8014b0:	10c016c4 	addi	r3,r2,91
  8014b4:	294b883a 	add	r5,r5,r5
  8014b8:	294b883a 	add	r5,r5,r5
  8014bc:	294b883a 	add	r5,r5,r5
  8014c0:	994b883a 	add	r5,r19,r5
  8014c4:	28800017 	ldw	r2,0(r5)
  8014c8:	01802074 	movhi	r6,129
  8014cc:	297ffe04 	addi	r5,r5,-8
  8014d0:	31b8a904 	addi	r6,r6,-7516
  8014d4:	28806526 	beq	r5,r2,80166c <_malloc_r+0x6d8>
  8014d8:	01bfff04 	movi	r6,-4
  8014dc:	10c00117 	ldw	r3,4(r2)
  8014e0:	1986703a 	and	r3,r3,r6
  8014e4:	38c0022e 	bgeu	r7,r3,8014f0 <_malloc_r+0x55c>
  8014e8:	10800217 	ldw	r2,8(r2)
  8014ec:	28bffb1e 	bne	r5,r2,8014dc <__alt_data_end+0xff8014dc>
  8014f0:	11400317 	ldw	r5,12(r2)
  8014f4:	98c00117 	ldw	r3,4(r19)
  8014f8:	81400315 	stw	r5,12(r16)
  8014fc:	80800215 	stw	r2,8(r16)
  801500:	2c000215 	stw	r16,8(r5)
  801504:	14000315 	stw	r16,12(r2)
  801508:	003ef806 	br	8010ec <__alt_data_end+0xff8010ec>
  80150c:	88c00054 	ori	r3,r17,1
  801510:	80c00115 	stw	r3,4(r16)
  801514:	8463883a 	add	r17,r16,r17
  801518:	34400515 	stw	r17,20(r6)
  80151c:	34400415 	stw	r17,16(r6)
  801520:	10c00054 	ori	r3,r2,1
  801524:	8a000315 	stw	r8,12(r17)
  801528:	8a000215 	stw	r8,8(r17)
  80152c:	88c00115 	stw	r3,4(r17)
  801530:	88a3883a 	add	r17,r17,r2
  801534:	88800015 	stw	r2,0(r17)
  801538:	9009883a 	mov	r4,r18
  80153c:	0803e040 	call	803e04 <__malloc_unlock>
  801540:	80800204 	addi	r2,r16,8
  801544:	003f3c06 	br	801238 <__alt_data_end+0xff801238>
  801548:	30c00117 	ldw	r3,4(r6)
  80154c:	003ee706 	br	8010ec <__alt_data_end+0xff8010ec>
  801550:	5ac00044 	addi	r11,r11,1
  801554:	588000cc 	andi	r2,r11,3
  801558:	31800204 	addi	r6,r6,8
  80155c:	103efd1e 	bne	r2,zero,801154 <__alt_data_end+0xff801154>
  801560:	00002406 	br	8015f4 <_malloc_r+0x660>
  801564:	14000317 	ldw	r16,12(r2)
  801568:	143f251e 	bne	r2,r16,801200 <__alt_data_end+0xff801200>
  80156c:	21000084 	addi	r4,r4,2
  801570:	003ebc06 	br	801064 <__alt_data_end+0xff801064>
  801574:	8085883a 	add	r2,r16,r2
  801578:	10c00117 	ldw	r3,4(r2)
  80157c:	81000317 	ldw	r4,12(r16)
  801580:	81400217 	ldw	r5,8(r16)
  801584:	18c00054 	ori	r3,r3,1
  801588:	10c00115 	stw	r3,4(r2)
  80158c:	29000315 	stw	r4,12(r5)
  801590:	21400215 	stw	r5,8(r4)
  801594:	9009883a 	mov	r4,r18
  801598:	0803e040 	call	803e04 <__malloc_unlock>
  80159c:	80800204 	addi	r2,r16,8
  8015a0:	003f2506 	br	801238 <__alt_data_end+0xff801238>
  8015a4:	12001704 	addi	r8,r2,92
  8015a8:	11c016c4 	addi	r7,r2,91
  8015ac:	4209883a 	add	r4,r8,r8
  8015b0:	003e9606 	br	80100c <__alt_data_end+0xff80100c>
  8015b4:	3804d1ba 	srli	r2,r7,6
  8015b8:	11400e44 	addi	r5,r2,57
  8015bc:	10c00e04 	addi	r3,r2,56
  8015c0:	294b883a 	add	r5,r5,r5
  8015c4:	003fbc06 	br	8014b8 <__alt_data_end+0xff8014b8>
  8015c8:	84ff5926 	beq	r16,r19,801330 <__alt_data_end+0xff801330>
  8015cc:	00802074 	movhi	r2,129
  8015d0:	10b8a904 	addi	r2,r2,-7516
  8015d4:	14000217 	ldw	r16,8(r2)
  8015d8:	00bfff04 	movi	r2,-4
  8015dc:	80c00117 	ldw	r3,4(r16)
  8015e0:	1886703a 	and	r3,r3,r2
  8015e4:	003f9106 	br	80142c <__alt_data_end+0xff80142c>
  8015e8:	60800217 	ldw	r2,8(r12)
  8015ec:	213fffc4 	addi	r4,r4,-1
  8015f0:	1300651e 	bne	r2,r12,801788 <_malloc_r+0x7f4>
  8015f4:	208000cc 	andi	r2,r4,3
  8015f8:	633ffe04 	addi	r12,r12,-8
  8015fc:	103ffa1e 	bne	r2,zero,8015e8 <__alt_data_end+0xff8015e8>
  801600:	98800117 	ldw	r2,4(r19)
  801604:	0146303a 	nor	r3,zero,r5
  801608:	1884703a 	and	r2,r3,r2
  80160c:	98800115 	stw	r2,4(r19)
  801610:	294b883a 	add	r5,r5,r5
  801614:	117f2836 	bltu	r2,r5,8012b8 <__alt_data_end+0xff8012b8>
  801618:	283f2726 	beq	r5,zero,8012b8 <__alt_data_end+0xff8012b8>
  80161c:	2886703a 	and	r3,r5,r2
  801620:	5809883a 	mov	r4,r11
  801624:	183ec31e 	bne	r3,zero,801134 <__alt_data_end+0xff801134>
  801628:	294b883a 	add	r5,r5,r5
  80162c:	2886703a 	and	r3,r5,r2
  801630:	21000104 	addi	r4,r4,4
  801634:	183ffc26 	beq	r3,zero,801628 <__alt_data_end+0xff801628>
  801638:	003ebe06 	br	801134 <__alt_data_end+0xff801134>
  80163c:	00c05504 	movi	r3,340
  801640:	18801236 	bltu	r3,r2,80168c <_malloc_r+0x6f8>
  801644:	8804d3fa 	srli	r2,r17,15
  801648:	12001e04 	addi	r8,r2,120
  80164c:	11c01dc4 	addi	r7,r2,119
  801650:	4209883a 	add	r4,r8,r8
  801654:	003e6d06 	br	80100c <__alt_data_end+0xff80100c>
  801658:	00c40004 	movi	r3,4096
  80165c:	003f4606 	br	801378 <__alt_data_end+0xff801378>
  801660:	00800044 	movi	r2,1
  801664:	a0800115 	stw	r2,4(r20)
  801668:	003f7406 	br	80143c <__alt_data_end+0xff80143c>
  80166c:	1805d0ba 	srai	r2,r3,2
  801670:	01c00044 	movi	r7,1
  801674:	30c00117 	ldw	r3,4(r6)
  801678:	388e983a 	sll	r7,r7,r2
  80167c:	2805883a 	mov	r2,r5
  801680:	38c6b03a 	or	r3,r7,r3
  801684:	30c00115 	stw	r3,4(r6)
  801688:	003f9b06 	br	8014f8 <__alt_data_end+0xff8014f8>
  80168c:	00c15504 	movi	r3,1364
  801690:	18801a36 	bltu	r3,r2,8016fc <_malloc_r+0x768>
  801694:	8804d4ba 	srli	r2,r17,18
  801698:	12001f44 	addi	r8,r2,125
  80169c:	11c01f04 	addi	r7,r2,124
  8016a0:	4209883a 	add	r4,r8,r8
  8016a4:	003e5906 	br	80100c <__alt_data_end+0xff80100c>
  8016a8:	ad400404 	addi	r21,r21,16
  8016ac:	003f1706 	br	80130c <__alt_data_end+0xff80130c>
  8016b0:	00c01504 	movi	r3,84
  8016b4:	18802336 	bltu	r3,r2,801744 <_malloc_r+0x7b0>
  8016b8:	3804d33a 	srli	r2,r7,12
  8016bc:	11401bc4 	addi	r5,r2,111
  8016c0:	10c01b84 	addi	r3,r2,110
  8016c4:	294b883a 	add	r5,r5,r5
  8016c8:	003f7b06 	br	8014b8 <__alt_data_end+0xff8014b8>
  8016cc:	9c000217 	ldw	r16,8(r19)
  8016d0:	00bfff04 	movi	r2,-4
  8016d4:	80c00117 	ldw	r3,4(r16)
  8016d8:	1886703a 	and	r3,r3,r2
  8016dc:	003f5306 	br	80142c <__alt_data_end+0xff80142c>
  8016e0:	3083ffcc 	andi	r2,r6,4095
  8016e4:	103f181e 	bne	r2,zero,801348 <__alt_data_end+0xff801348>
  8016e8:	99000217 	ldw	r4,8(r19)
  8016ec:	b545883a 	add	r2,r22,r21
  8016f0:	10800054 	ori	r2,r2,1
  8016f4:	20800115 	stw	r2,4(r4)
  8016f8:	003f3e06 	br	8013f4 <__alt_data_end+0xff8013f4>
  8016fc:	01003f84 	movi	r4,254
  801700:	02001fc4 	movi	r8,127
  801704:	01c01f84 	movi	r7,126
  801708:	003e4006 	br	80100c <__alt_data_end+0xff80100c>
  80170c:	00802074 	movhi	r2,129
  801710:	10be3d04 	addi	r2,r2,-1804
  801714:	15000015 	stw	r20,0(r2)
  801718:	003f1106 	br	801360 <__alt_data_end+0xff801360>
  80171c:	00800044 	movi	r2,1
  801720:	002b883a 	mov	r21,zero
  801724:	003f1f06 	br	8013a4 <__alt_data_end+0xff8013a4>
  801728:	81400204 	addi	r5,r16,8
  80172c:	9009883a 	mov	r4,r18
  801730:	0802a1c0 	call	802a1c <_free_r>
  801734:	00802074 	movhi	r2,129
  801738:	10855404 	addi	r2,r2,5456
  80173c:	10c00017 	ldw	r3,0(r2)
  801740:	003f2c06 	br	8013f4 <__alt_data_end+0xff8013f4>
  801744:	00c05504 	movi	r3,340
  801748:	18800536 	bltu	r3,r2,801760 <_malloc_r+0x7cc>
  80174c:	3804d3fa 	srli	r2,r7,15
  801750:	11401e04 	addi	r5,r2,120
  801754:	10c01dc4 	addi	r3,r2,119
  801758:	294b883a 	add	r5,r5,r5
  80175c:	003f5606 	br	8014b8 <__alt_data_end+0xff8014b8>
  801760:	00c15504 	movi	r3,1364
  801764:	18800536 	bltu	r3,r2,80177c <_malloc_r+0x7e8>
  801768:	3804d4ba 	srli	r2,r7,18
  80176c:	11401f44 	addi	r5,r2,125
  801770:	10c01f04 	addi	r3,r2,124
  801774:	294b883a 	add	r5,r5,r5
  801778:	003f4f06 	br	8014b8 <__alt_data_end+0xff8014b8>
  80177c:	01403f84 	movi	r5,254
  801780:	00c01f84 	movi	r3,126
  801784:	003f4c06 	br	8014b8 <__alt_data_end+0xff8014b8>
  801788:	98800117 	ldw	r2,4(r19)
  80178c:	003fa006 	br	801610 <__alt_data_end+0xff801610>
  801790:	8808d0fa 	srli	r4,r17,3
  801794:	20800044 	addi	r2,r4,1
  801798:	1085883a 	add	r2,r2,r2
  80179c:	003e9006 	br	8011e0 <__alt_data_end+0xff8011e0>

008017a0 <memchr>:
  8017a0:	208000cc 	andi	r2,r4,3
  8017a4:	280f883a 	mov	r7,r5
  8017a8:	10003426 	beq	r2,zero,80187c <memchr+0xdc>
  8017ac:	30bfffc4 	addi	r2,r6,-1
  8017b0:	30001a26 	beq	r6,zero,80181c <memchr+0x7c>
  8017b4:	20c00003 	ldbu	r3,0(r4)
  8017b8:	29803fcc 	andi	r6,r5,255
  8017bc:	30c0051e 	bne	r6,r3,8017d4 <memchr+0x34>
  8017c0:	00001806 	br	801824 <memchr+0x84>
  8017c4:	10001526 	beq	r2,zero,80181c <memchr+0x7c>
  8017c8:	20c00003 	ldbu	r3,0(r4)
  8017cc:	10bfffc4 	addi	r2,r2,-1
  8017d0:	30c01426 	beq	r6,r3,801824 <memchr+0x84>
  8017d4:	21000044 	addi	r4,r4,1
  8017d8:	20c000cc 	andi	r3,r4,3
  8017dc:	183ff91e 	bne	r3,zero,8017c4 <__alt_data_end+0xff8017c4>
  8017e0:	020000c4 	movi	r8,3
  8017e4:	40801136 	bltu	r8,r2,80182c <memchr+0x8c>
  8017e8:	10000c26 	beq	r2,zero,80181c <memchr+0x7c>
  8017ec:	20c00003 	ldbu	r3,0(r4)
  8017f0:	29403fcc 	andi	r5,r5,255
  8017f4:	28c00b26 	beq	r5,r3,801824 <memchr+0x84>
  8017f8:	20c00044 	addi	r3,r4,1
  8017fc:	39803fcc 	andi	r6,r7,255
  801800:	2089883a 	add	r4,r4,r2
  801804:	00000306 	br	801814 <memchr+0x74>
  801808:	18c00044 	addi	r3,r3,1
  80180c:	197fffc3 	ldbu	r5,-1(r3)
  801810:	31400526 	beq	r6,r5,801828 <memchr+0x88>
  801814:	1805883a 	mov	r2,r3
  801818:	20fffb1e 	bne	r4,r3,801808 <__alt_data_end+0xff801808>
  80181c:	0005883a 	mov	r2,zero
  801820:	f800283a 	ret
  801824:	2005883a 	mov	r2,r4
  801828:	f800283a 	ret
  80182c:	28c03fcc 	andi	r3,r5,255
  801830:	1812923a 	slli	r9,r3,8
  801834:	02ffbff4 	movhi	r11,65279
  801838:	02a02074 	movhi	r10,32897
  80183c:	48d2b03a 	or	r9,r9,r3
  801840:	4806943a 	slli	r3,r9,16
  801844:	5affbfc4 	addi	r11,r11,-257
  801848:	52a02004 	addi	r10,r10,-32640
  80184c:	48d2b03a 	or	r9,r9,r3
  801850:	20c00017 	ldw	r3,0(r4)
  801854:	48c6f03a 	xor	r3,r9,r3
  801858:	1acd883a 	add	r6,r3,r11
  80185c:	00c6303a 	nor	r3,zero,r3
  801860:	30c6703a 	and	r3,r6,r3
  801864:	1a86703a 	and	r3,r3,r10
  801868:	183fe01e 	bne	r3,zero,8017ec <__alt_data_end+0xff8017ec>
  80186c:	10bfff04 	addi	r2,r2,-4
  801870:	21000104 	addi	r4,r4,4
  801874:	40bff636 	bltu	r8,r2,801850 <__alt_data_end+0xff801850>
  801878:	003fdb06 	br	8017e8 <__alt_data_end+0xff8017e8>
  80187c:	3005883a 	mov	r2,r6
  801880:	003fd706 	br	8017e0 <__alt_data_end+0xff8017e0>

00801884 <memcpy>:
  801884:	defffd04 	addi	sp,sp,-12
  801888:	dfc00215 	stw	ra,8(sp)
  80188c:	dc400115 	stw	r17,4(sp)
  801890:	dc000015 	stw	r16,0(sp)
  801894:	00c003c4 	movi	r3,15
  801898:	2005883a 	mov	r2,r4
  80189c:	1980452e 	bgeu	r3,r6,8019b4 <memcpy+0x130>
  8018a0:	2906b03a 	or	r3,r5,r4
  8018a4:	18c000cc 	andi	r3,r3,3
  8018a8:	1800441e 	bne	r3,zero,8019bc <memcpy+0x138>
  8018ac:	347ffc04 	addi	r17,r6,-16
  8018b0:	8822d13a 	srli	r17,r17,4
  8018b4:	28c00104 	addi	r3,r5,4
  8018b8:	23400104 	addi	r13,r4,4
  8018bc:	8820913a 	slli	r16,r17,4
  8018c0:	2b000204 	addi	r12,r5,8
  8018c4:	22c00204 	addi	r11,r4,8
  8018c8:	84000504 	addi	r16,r16,20
  8018cc:	2a800304 	addi	r10,r5,12
  8018d0:	22400304 	addi	r9,r4,12
  8018d4:	2c21883a 	add	r16,r5,r16
  8018d8:	2811883a 	mov	r8,r5
  8018dc:	200f883a 	mov	r7,r4
  8018e0:	41000017 	ldw	r4,0(r8)
  8018e4:	1fc00017 	ldw	ra,0(r3)
  8018e8:	63c00017 	ldw	r15,0(r12)
  8018ec:	39000015 	stw	r4,0(r7)
  8018f0:	53800017 	ldw	r14,0(r10)
  8018f4:	6fc00015 	stw	ra,0(r13)
  8018f8:	5bc00015 	stw	r15,0(r11)
  8018fc:	4b800015 	stw	r14,0(r9)
  801900:	18c00404 	addi	r3,r3,16
  801904:	39c00404 	addi	r7,r7,16
  801908:	42000404 	addi	r8,r8,16
  80190c:	6b400404 	addi	r13,r13,16
  801910:	63000404 	addi	r12,r12,16
  801914:	5ac00404 	addi	r11,r11,16
  801918:	52800404 	addi	r10,r10,16
  80191c:	4a400404 	addi	r9,r9,16
  801920:	1c3fef1e 	bne	r3,r16,8018e0 <__alt_data_end+0xff8018e0>
  801924:	89c00044 	addi	r7,r17,1
  801928:	380e913a 	slli	r7,r7,4
  80192c:	310003cc 	andi	r4,r6,15
  801930:	02c000c4 	movi	r11,3
  801934:	11c7883a 	add	r3,r2,r7
  801938:	29cb883a 	add	r5,r5,r7
  80193c:	5900212e 	bgeu	r11,r4,8019c4 <memcpy+0x140>
  801940:	1813883a 	mov	r9,r3
  801944:	2811883a 	mov	r8,r5
  801948:	200f883a 	mov	r7,r4
  80194c:	42800017 	ldw	r10,0(r8)
  801950:	4a400104 	addi	r9,r9,4
  801954:	39ffff04 	addi	r7,r7,-4
  801958:	4abfff15 	stw	r10,-4(r9)
  80195c:	42000104 	addi	r8,r8,4
  801960:	59fffa36 	bltu	r11,r7,80194c <__alt_data_end+0xff80194c>
  801964:	213fff04 	addi	r4,r4,-4
  801968:	2008d0ba 	srli	r4,r4,2
  80196c:	318000cc 	andi	r6,r6,3
  801970:	21000044 	addi	r4,r4,1
  801974:	2109883a 	add	r4,r4,r4
  801978:	2109883a 	add	r4,r4,r4
  80197c:	1907883a 	add	r3,r3,r4
  801980:	290b883a 	add	r5,r5,r4
  801984:	30000626 	beq	r6,zero,8019a0 <memcpy+0x11c>
  801988:	198d883a 	add	r6,r3,r6
  80198c:	29c00003 	ldbu	r7,0(r5)
  801990:	18c00044 	addi	r3,r3,1
  801994:	29400044 	addi	r5,r5,1
  801998:	19ffffc5 	stb	r7,-1(r3)
  80199c:	19bffb1e 	bne	r3,r6,80198c <__alt_data_end+0xff80198c>
  8019a0:	dfc00217 	ldw	ra,8(sp)
  8019a4:	dc400117 	ldw	r17,4(sp)
  8019a8:	dc000017 	ldw	r16,0(sp)
  8019ac:	dec00304 	addi	sp,sp,12
  8019b0:	f800283a 	ret
  8019b4:	2007883a 	mov	r3,r4
  8019b8:	003ff206 	br	801984 <__alt_data_end+0xff801984>
  8019bc:	2007883a 	mov	r3,r4
  8019c0:	003ff106 	br	801988 <__alt_data_end+0xff801988>
  8019c4:	200d883a 	mov	r6,r4
  8019c8:	003fee06 	br	801984 <__alt_data_end+0xff801984>

008019cc <memmove>:
  8019cc:	2005883a 	mov	r2,r4
  8019d0:	29000b2e 	bgeu	r5,r4,801a00 <memmove+0x34>
  8019d4:	298f883a 	add	r7,r5,r6
  8019d8:	21c0092e 	bgeu	r4,r7,801a00 <memmove+0x34>
  8019dc:	2187883a 	add	r3,r4,r6
  8019e0:	198bc83a 	sub	r5,r3,r6
  8019e4:	30004826 	beq	r6,zero,801b08 <memmove+0x13c>
  8019e8:	39ffffc4 	addi	r7,r7,-1
  8019ec:	39000003 	ldbu	r4,0(r7)
  8019f0:	18ffffc4 	addi	r3,r3,-1
  8019f4:	19000005 	stb	r4,0(r3)
  8019f8:	28fffb1e 	bne	r5,r3,8019e8 <__alt_data_end+0xff8019e8>
  8019fc:	f800283a 	ret
  801a00:	00c003c4 	movi	r3,15
  801a04:	1980412e 	bgeu	r3,r6,801b0c <memmove+0x140>
  801a08:	2886b03a 	or	r3,r5,r2
  801a0c:	18c000cc 	andi	r3,r3,3
  801a10:	1800401e 	bne	r3,zero,801b14 <memmove+0x148>
  801a14:	33fffc04 	addi	r15,r6,-16
  801a18:	781ed13a 	srli	r15,r15,4
  801a1c:	28c00104 	addi	r3,r5,4
  801a20:	13400104 	addi	r13,r2,4
  801a24:	781c913a 	slli	r14,r15,4
  801a28:	2b000204 	addi	r12,r5,8
  801a2c:	12c00204 	addi	r11,r2,8
  801a30:	73800504 	addi	r14,r14,20
  801a34:	2a800304 	addi	r10,r5,12
  801a38:	12400304 	addi	r9,r2,12
  801a3c:	2b9d883a 	add	r14,r5,r14
  801a40:	2811883a 	mov	r8,r5
  801a44:	100f883a 	mov	r7,r2
  801a48:	41000017 	ldw	r4,0(r8)
  801a4c:	39c00404 	addi	r7,r7,16
  801a50:	18c00404 	addi	r3,r3,16
  801a54:	393ffc15 	stw	r4,-16(r7)
  801a58:	193ffc17 	ldw	r4,-16(r3)
  801a5c:	6b400404 	addi	r13,r13,16
  801a60:	5ac00404 	addi	r11,r11,16
  801a64:	693ffc15 	stw	r4,-16(r13)
  801a68:	61000017 	ldw	r4,0(r12)
  801a6c:	4a400404 	addi	r9,r9,16
  801a70:	42000404 	addi	r8,r8,16
  801a74:	593ffc15 	stw	r4,-16(r11)
  801a78:	51000017 	ldw	r4,0(r10)
  801a7c:	63000404 	addi	r12,r12,16
  801a80:	52800404 	addi	r10,r10,16
  801a84:	493ffc15 	stw	r4,-16(r9)
  801a88:	1bbfef1e 	bne	r3,r14,801a48 <__alt_data_end+0xff801a48>
  801a8c:	79000044 	addi	r4,r15,1
  801a90:	2008913a 	slli	r4,r4,4
  801a94:	328003cc 	andi	r10,r6,15
  801a98:	02c000c4 	movi	r11,3
  801a9c:	1107883a 	add	r3,r2,r4
  801aa0:	290b883a 	add	r5,r5,r4
  801aa4:	5a801e2e 	bgeu	r11,r10,801b20 <memmove+0x154>
  801aa8:	1813883a 	mov	r9,r3
  801aac:	2811883a 	mov	r8,r5
  801ab0:	500f883a 	mov	r7,r10
  801ab4:	41000017 	ldw	r4,0(r8)
  801ab8:	4a400104 	addi	r9,r9,4
  801abc:	39ffff04 	addi	r7,r7,-4
  801ac0:	493fff15 	stw	r4,-4(r9)
  801ac4:	42000104 	addi	r8,r8,4
  801ac8:	59fffa36 	bltu	r11,r7,801ab4 <__alt_data_end+0xff801ab4>
  801acc:	513fff04 	addi	r4,r10,-4
  801ad0:	2008d0ba 	srli	r4,r4,2
  801ad4:	318000cc 	andi	r6,r6,3
  801ad8:	21000044 	addi	r4,r4,1
  801adc:	2109883a 	add	r4,r4,r4
  801ae0:	2109883a 	add	r4,r4,r4
  801ae4:	1907883a 	add	r3,r3,r4
  801ae8:	290b883a 	add	r5,r5,r4
  801aec:	30000b26 	beq	r6,zero,801b1c <memmove+0x150>
  801af0:	198d883a 	add	r6,r3,r6
  801af4:	29c00003 	ldbu	r7,0(r5)
  801af8:	18c00044 	addi	r3,r3,1
  801afc:	29400044 	addi	r5,r5,1
  801b00:	19ffffc5 	stb	r7,-1(r3)
  801b04:	19bffb1e 	bne	r3,r6,801af4 <__alt_data_end+0xff801af4>
  801b08:	f800283a 	ret
  801b0c:	1007883a 	mov	r3,r2
  801b10:	003ff606 	br	801aec <__alt_data_end+0xff801aec>
  801b14:	1007883a 	mov	r3,r2
  801b18:	003ff506 	br	801af0 <__alt_data_end+0xff801af0>
  801b1c:	f800283a 	ret
  801b20:	500d883a 	mov	r6,r10
  801b24:	003ff106 	br	801aec <__alt_data_end+0xff801aec>

00801b28 <memset>:
  801b28:	20c000cc 	andi	r3,r4,3
  801b2c:	2005883a 	mov	r2,r4
  801b30:	18004426 	beq	r3,zero,801c44 <memset+0x11c>
  801b34:	31ffffc4 	addi	r7,r6,-1
  801b38:	30004026 	beq	r6,zero,801c3c <memset+0x114>
  801b3c:	2813883a 	mov	r9,r5
  801b40:	200d883a 	mov	r6,r4
  801b44:	2007883a 	mov	r3,r4
  801b48:	00000406 	br	801b5c <memset+0x34>
  801b4c:	3a3fffc4 	addi	r8,r7,-1
  801b50:	31800044 	addi	r6,r6,1
  801b54:	38003926 	beq	r7,zero,801c3c <memset+0x114>
  801b58:	400f883a 	mov	r7,r8
  801b5c:	18c00044 	addi	r3,r3,1
  801b60:	32400005 	stb	r9,0(r6)
  801b64:	1a0000cc 	andi	r8,r3,3
  801b68:	403ff81e 	bne	r8,zero,801b4c <__alt_data_end+0xff801b4c>
  801b6c:	010000c4 	movi	r4,3
  801b70:	21c02d2e 	bgeu	r4,r7,801c28 <memset+0x100>
  801b74:	29003fcc 	andi	r4,r5,255
  801b78:	200c923a 	slli	r6,r4,8
  801b7c:	3108b03a 	or	r4,r6,r4
  801b80:	200c943a 	slli	r6,r4,16
  801b84:	218cb03a 	or	r6,r4,r6
  801b88:	010003c4 	movi	r4,15
  801b8c:	21c0182e 	bgeu	r4,r7,801bf0 <memset+0xc8>
  801b90:	3b3ffc04 	addi	r12,r7,-16
  801b94:	6018d13a 	srli	r12,r12,4
  801b98:	1a000104 	addi	r8,r3,4
  801b9c:	1ac00204 	addi	r11,r3,8
  801ba0:	6008913a 	slli	r4,r12,4
  801ba4:	1a800304 	addi	r10,r3,12
  801ba8:	1813883a 	mov	r9,r3
  801bac:	21000504 	addi	r4,r4,20
  801bb0:	1909883a 	add	r4,r3,r4
  801bb4:	49800015 	stw	r6,0(r9)
  801bb8:	41800015 	stw	r6,0(r8)
  801bbc:	59800015 	stw	r6,0(r11)
  801bc0:	51800015 	stw	r6,0(r10)
  801bc4:	42000404 	addi	r8,r8,16
  801bc8:	4a400404 	addi	r9,r9,16
  801bcc:	5ac00404 	addi	r11,r11,16
  801bd0:	52800404 	addi	r10,r10,16
  801bd4:	413ff71e 	bne	r8,r4,801bb4 <__alt_data_end+0xff801bb4>
  801bd8:	63000044 	addi	r12,r12,1
  801bdc:	6018913a 	slli	r12,r12,4
  801be0:	39c003cc 	andi	r7,r7,15
  801be4:	010000c4 	movi	r4,3
  801be8:	1b07883a 	add	r3,r3,r12
  801bec:	21c00e2e 	bgeu	r4,r7,801c28 <memset+0x100>
  801bf0:	1813883a 	mov	r9,r3
  801bf4:	3811883a 	mov	r8,r7
  801bf8:	010000c4 	movi	r4,3
  801bfc:	49800015 	stw	r6,0(r9)
  801c00:	423fff04 	addi	r8,r8,-4
  801c04:	4a400104 	addi	r9,r9,4
  801c08:	223ffc36 	bltu	r4,r8,801bfc <__alt_data_end+0xff801bfc>
  801c0c:	393fff04 	addi	r4,r7,-4
  801c10:	2008d0ba 	srli	r4,r4,2
  801c14:	39c000cc 	andi	r7,r7,3
  801c18:	21000044 	addi	r4,r4,1
  801c1c:	2109883a 	add	r4,r4,r4
  801c20:	2109883a 	add	r4,r4,r4
  801c24:	1907883a 	add	r3,r3,r4
  801c28:	38000526 	beq	r7,zero,801c40 <memset+0x118>
  801c2c:	19cf883a 	add	r7,r3,r7
  801c30:	19400005 	stb	r5,0(r3)
  801c34:	18c00044 	addi	r3,r3,1
  801c38:	38fffd1e 	bne	r7,r3,801c30 <__alt_data_end+0xff801c30>
  801c3c:	f800283a 	ret
  801c40:	f800283a 	ret
  801c44:	2007883a 	mov	r3,r4
  801c48:	300f883a 	mov	r7,r6
  801c4c:	003fc706 	br	801b6c <__alt_data_end+0xff801b6c>

00801c50 <_realloc_r>:
  801c50:	defff604 	addi	sp,sp,-40
  801c54:	dc800215 	stw	r18,8(sp)
  801c58:	dfc00915 	stw	ra,36(sp)
  801c5c:	df000815 	stw	fp,32(sp)
  801c60:	ddc00715 	stw	r23,28(sp)
  801c64:	dd800615 	stw	r22,24(sp)
  801c68:	dd400515 	stw	r21,20(sp)
  801c6c:	dd000415 	stw	r20,16(sp)
  801c70:	dcc00315 	stw	r19,12(sp)
  801c74:	dc400115 	stw	r17,4(sp)
  801c78:	dc000015 	stw	r16,0(sp)
  801c7c:	3025883a 	mov	r18,r6
  801c80:	2800b726 	beq	r5,zero,801f60 <_realloc_r+0x310>
  801c84:	282b883a 	mov	r21,r5
  801c88:	2029883a 	mov	r20,r4
  801c8c:	0803ce40 	call	803ce4 <__malloc_lock>
  801c90:	a8bfff17 	ldw	r2,-4(r21)
  801c94:	043fff04 	movi	r16,-4
  801c98:	90c002c4 	addi	r3,r18,11
  801c9c:	01000584 	movi	r4,22
  801ca0:	acfffe04 	addi	r19,r21,-8
  801ca4:	1420703a 	and	r16,r2,r16
  801ca8:	20c0332e 	bgeu	r4,r3,801d78 <_realloc_r+0x128>
  801cac:	047ffe04 	movi	r17,-8
  801cb0:	1c62703a 	and	r17,r3,r17
  801cb4:	8807883a 	mov	r3,r17
  801cb8:	88005816 	blt	r17,zero,801e1c <_realloc_r+0x1cc>
  801cbc:	8c805736 	bltu	r17,r18,801e1c <_realloc_r+0x1cc>
  801cc0:	80c0300e 	bge	r16,r3,801d84 <_realloc_r+0x134>
  801cc4:	07002074 	movhi	fp,129
  801cc8:	e738a904 	addi	fp,fp,-7516
  801ccc:	e1c00217 	ldw	r7,8(fp)
  801cd0:	9c09883a 	add	r4,r19,r16
  801cd4:	22000117 	ldw	r8,4(r4)
  801cd8:	21c06326 	beq	r4,r7,801e68 <_realloc_r+0x218>
  801cdc:	017fff84 	movi	r5,-2
  801ce0:	414a703a 	and	r5,r8,r5
  801ce4:	214b883a 	add	r5,r4,r5
  801ce8:	29800117 	ldw	r6,4(r5)
  801cec:	3180004c 	andi	r6,r6,1
  801cf0:	30003f26 	beq	r6,zero,801df0 <_realloc_r+0x1a0>
  801cf4:	1080004c 	andi	r2,r2,1
  801cf8:	10008326 	beq	r2,zero,801f08 <_realloc_r+0x2b8>
  801cfc:	900b883a 	mov	r5,r18
  801d00:	a009883a 	mov	r4,r20
  801d04:	0800f940 	call	800f94 <_malloc_r>
  801d08:	1025883a 	mov	r18,r2
  801d0c:	10011e26 	beq	r2,zero,802188 <_realloc_r+0x538>
  801d10:	a93fff17 	ldw	r4,-4(r21)
  801d14:	10fffe04 	addi	r3,r2,-8
  801d18:	00bfff84 	movi	r2,-2
  801d1c:	2084703a 	and	r2,r4,r2
  801d20:	9885883a 	add	r2,r19,r2
  801d24:	1880ee26 	beq	r3,r2,8020e0 <_realloc_r+0x490>
  801d28:	81bfff04 	addi	r6,r16,-4
  801d2c:	00800904 	movi	r2,36
  801d30:	1180b836 	bltu	r2,r6,802014 <_realloc_r+0x3c4>
  801d34:	00c004c4 	movi	r3,19
  801d38:	19809636 	bltu	r3,r6,801f94 <_realloc_r+0x344>
  801d3c:	9005883a 	mov	r2,r18
  801d40:	a807883a 	mov	r3,r21
  801d44:	19000017 	ldw	r4,0(r3)
  801d48:	11000015 	stw	r4,0(r2)
  801d4c:	19000117 	ldw	r4,4(r3)
  801d50:	11000115 	stw	r4,4(r2)
  801d54:	18c00217 	ldw	r3,8(r3)
  801d58:	10c00215 	stw	r3,8(r2)
  801d5c:	a80b883a 	mov	r5,r21
  801d60:	a009883a 	mov	r4,r20
  801d64:	0802a1c0 	call	802a1c <_free_r>
  801d68:	a009883a 	mov	r4,r20
  801d6c:	0803e040 	call	803e04 <__malloc_unlock>
  801d70:	9005883a 	mov	r2,r18
  801d74:	00001206 	br	801dc0 <_realloc_r+0x170>
  801d78:	00c00404 	movi	r3,16
  801d7c:	1823883a 	mov	r17,r3
  801d80:	003fce06 	br	801cbc <__alt_data_end+0xff801cbc>
  801d84:	a825883a 	mov	r18,r21
  801d88:	8445c83a 	sub	r2,r16,r17
  801d8c:	00c003c4 	movi	r3,15
  801d90:	18802636 	bltu	r3,r2,801e2c <_realloc_r+0x1dc>
  801d94:	99800117 	ldw	r6,4(r19)
  801d98:	9c07883a 	add	r3,r19,r16
  801d9c:	3180004c 	andi	r6,r6,1
  801da0:	3420b03a 	or	r16,r6,r16
  801da4:	9c000115 	stw	r16,4(r19)
  801da8:	18800117 	ldw	r2,4(r3)
  801dac:	10800054 	ori	r2,r2,1
  801db0:	18800115 	stw	r2,4(r3)
  801db4:	a009883a 	mov	r4,r20
  801db8:	0803e040 	call	803e04 <__malloc_unlock>
  801dbc:	9005883a 	mov	r2,r18
  801dc0:	dfc00917 	ldw	ra,36(sp)
  801dc4:	df000817 	ldw	fp,32(sp)
  801dc8:	ddc00717 	ldw	r23,28(sp)
  801dcc:	dd800617 	ldw	r22,24(sp)
  801dd0:	dd400517 	ldw	r21,20(sp)
  801dd4:	dd000417 	ldw	r20,16(sp)
  801dd8:	dcc00317 	ldw	r19,12(sp)
  801ddc:	dc800217 	ldw	r18,8(sp)
  801de0:	dc400117 	ldw	r17,4(sp)
  801de4:	dc000017 	ldw	r16,0(sp)
  801de8:	dec00a04 	addi	sp,sp,40
  801dec:	f800283a 	ret
  801df0:	017fff04 	movi	r5,-4
  801df4:	414a703a 	and	r5,r8,r5
  801df8:	814d883a 	add	r6,r16,r5
  801dfc:	30c01f16 	blt	r6,r3,801e7c <_realloc_r+0x22c>
  801e00:	20800317 	ldw	r2,12(r4)
  801e04:	20c00217 	ldw	r3,8(r4)
  801e08:	a825883a 	mov	r18,r21
  801e0c:	3021883a 	mov	r16,r6
  801e10:	18800315 	stw	r2,12(r3)
  801e14:	10c00215 	stw	r3,8(r2)
  801e18:	003fdb06 	br	801d88 <__alt_data_end+0xff801d88>
  801e1c:	00800304 	movi	r2,12
  801e20:	a0800015 	stw	r2,0(r20)
  801e24:	0005883a 	mov	r2,zero
  801e28:	003fe506 	br	801dc0 <__alt_data_end+0xff801dc0>
  801e2c:	98c00117 	ldw	r3,4(r19)
  801e30:	9c4b883a 	add	r5,r19,r17
  801e34:	11000054 	ori	r4,r2,1
  801e38:	18c0004c 	andi	r3,r3,1
  801e3c:	1c62b03a 	or	r17,r3,r17
  801e40:	9c400115 	stw	r17,4(r19)
  801e44:	29000115 	stw	r4,4(r5)
  801e48:	2885883a 	add	r2,r5,r2
  801e4c:	10c00117 	ldw	r3,4(r2)
  801e50:	29400204 	addi	r5,r5,8
  801e54:	a009883a 	mov	r4,r20
  801e58:	18c00054 	ori	r3,r3,1
  801e5c:	10c00115 	stw	r3,4(r2)
  801e60:	0802a1c0 	call	802a1c <_free_r>
  801e64:	003fd306 	br	801db4 <__alt_data_end+0xff801db4>
  801e68:	017fff04 	movi	r5,-4
  801e6c:	414a703a 	and	r5,r8,r5
  801e70:	89800404 	addi	r6,r17,16
  801e74:	8151883a 	add	r8,r16,r5
  801e78:	4180590e 	bge	r8,r6,801fe0 <_realloc_r+0x390>
  801e7c:	1080004c 	andi	r2,r2,1
  801e80:	103f9e1e 	bne	r2,zero,801cfc <__alt_data_end+0xff801cfc>
  801e84:	adbffe17 	ldw	r22,-8(r21)
  801e88:	00bfff04 	movi	r2,-4
  801e8c:	9dadc83a 	sub	r22,r19,r22
  801e90:	b1800117 	ldw	r6,4(r22)
  801e94:	3084703a 	and	r2,r6,r2
  801e98:	20002026 	beq	r4,zero,801f1c <_realloc_r+0x2cc>
  801e9c:	80af883a 	add	r23,r16,r2
  801ea0:	b96f883a 	add	r23,r23,r5
  801ea4:	21c05f26 	beq	r4,r7,802024 <_realloc_r+0x3d4>
  801ea8:	b8c01c16 	blt	r23,r3,801f1c <_realloc_r+0x2cc>
  801eac:	20800317 	ldw	r2,12(r4)
  801eb0:	20c00217 	ldw	r3,8(r4)
  801eb4:	81bfff04 	addi	r6,r16,-4
  801eb8:	01000904 	movi	r4,36
  801ebc:	18800315 	stw	r2,12(r3)
  801ec0:	10c00215 	stw	r3,8(r2)
  801ec4:	b0c00217 	ldw	r3,8(r22)
  801ec8:	b0800317 	ldw	r2,12(r22)
  801ecc:	b4800204 	addi	r18,r22,8
  801ed0:	18800315 	stw	r2,12(r3)
  801ed4:	10c00215 	stw	r3,8(r2)
  801ed8:	21801b36 	bltu	r4,r6,801f48 <_realloc_r+0x2f8>
  801edc:	008004c4 	movi	r2,19
  801ee0:	1180352e 	bgeu	r2,r6,801fb8 <_realloc_r+0x368>
  801ee4:	a8800017 	ldw	r2,0(r21)
  801ee8:	b0800215 	stw	r2,8(r22)
  801eec:	a8800117 	ldw	r2,4(r21)
  801ef0:	b0800315 	stw	r2,12(r22)
  801ef4:	008006c4 	movi	r2,27
  801ef8:	11807f36 	bltu	r2,r6,8020f8 <_realloc_r+0x4a8>
  801efc:	b0800404 	addi	r2,r22,16
  801f00:	ad400204 	addi	r21,r21,8
  801f04:	00002d06 	br	801fbc <_realloc_r+0x36c>
  801f08:	adbffe17 	ldw	r22,-8(r21)
  801f0c:	00bfff04 	movi	r2,-4
  801f10:	9dadc83a 	sub	r22,r19,r22
  801f14:	b1000117 	ldw	r4,4(r22)
  801f18:	2084703a 	and	r2,r4,r2
  801f1c:	b03f7726 	beq	r22,zero,801cfc <__alt_data_end+0xff801cfc>
  801f20:	80af883a 	add	r23,r16,r2
  801f24:	b8ff7516 	blt	r23,r3,801cfc <__alt_data_end+0xff801cfc>
  801f28:	b0800317 	ldw	r2,12(r22)
  801f2c:	b0c00217 	ldw	r3,8(r22)
  801f30:	81bfff04 	addi	r6,r16,-4
  801f34:	01000904 	movi	r4,36
  801f38:	18800315 	stw	r2,12(r3)
  801f3c:	10c00215 	stw	r3,8(r2)
  801f40:	b4800204 	addi	r18,r22,8
  801f44:	21bfe52e 	bgeu	r4,r6,801edc <__alt_data_end+0xff801edc>
  801f48:	a80b883a 	mov	r5,r21
  801f4c:	9009883a 	mov	r4,r18
  801f50:	08019cc0 	call	8019cc <memmove>
  801f54:	b821883a 	mov	r16,r23
  801f58:	b027883a 	mov	r19,r22
  801f5c:	003f8a06 	br	801d88 <__alt_data_end+0xff801d88>
  801f60:	300b883a 	mov	r5,r6
  801f64:	dfc00917 	ldw	ra,36(sp)
  801f68:	df000817 	ldw	fp,32(sp)
  801f6c:	ddc00717 	ldw	r23,28(sp)
  801f70:	dd800617 	ldw	r22,24(sp)
  801f74:	dd400517 	ldw	r21,20(sp)
  801f78:	dd000417 	ldw	r20,16(sp)
  801f7c:	dcc00317 	ldw	r19,12(sp)
  801f80:	dc800217 	ldw	r18,8(sp)
  801f84:	dc400117 	ldw	r17,4(sp)
  801f88:	dc000017 	ldw	r16,0(sp)
  801f8c:	dec00a04 	addi	sp,sp,40
  801f90:	0800f941 	jmpi	800f94 <_malloc_r>
  801f94:	a8c00017 	ldw	r3,0(r21)
  801f98:	90c00015 	stw	r3,0(r18)
  801f9c:	a8c00117 	ldw	r3,4(r21)
  801fa0:	90c00115 	stw	r3,4(r18)
  801fa4:	00c006c4 	movi	r3,27
  801fa8:	19804536 	bltu	r3,r6,8020c0 <_realloc_r+0x470>
  801fac:	90800204 	addi	r2,r18,8
  801fb0:	a8c00204 	addi	r3,r21,8
  801fb4:	003f6306 	br	801d44 <__alt_data_end+0xff801d44>
  801fb8:	9005883a 	mov	r2,r18
  801fbc:	a8c00017 	ldw	r3,0(r21)
  801fc0:	b821883a 	mov	r16,r23
  801fc4:	b027883a 	mov	r19,r22
  801fc8:	10c00015 	stw	r3,0(r2)
  801fcc:	a8c00117 	ldw	r3,4(r21)
  801fd0:	10c00115 	stw	r3,4(r2)
  801fd4:	a8c00217 	ldw	r3,8(r21)
  801fd8:	10c00215 	stw	r3,8(r2)
  801fdc:	003f6a06 	br	801d88 <__alt_data_end+0xff801d88>
  801fe0:	9c67883a 	add	r19,r19,r17
  801fe4:	4445c83a 	sub	r2,r8,r17
  801fe8:	e4c00215 	stw	r19,8(fp)
  801fec:	10800054 	ori	r2,r2,1
  801ff0:	98800115 	stw	r2,4(r19)
  801ff4:	a8bfff17 	ldw	r2,-4(r21)
  801ff8:	a009883a 	mov	r4,r20
  801ffc:	1080004c 	andi	r2,r2,1
  802000:	1462b03a 	or	r17,r2,r17
  802004:	ac7fff15 	stw	r17,-4(r21)
  802008:	0803e040 	call	803e04 <__malloc_unlock>
  80200c:	a805883a 	mov	r2,r21
  802010:	003f6b06 	br	801dc0 <__alt_data_end+0xff801dc0>
  802014:	a80b883a 	mov	r5,r21
  802018:	9009883a 	mov	r4,r18
  80201c:	08019cc0 	call	8019cc <memmove>
  802020:	003f4e06 	br	801d5c <__alt_data_end+0xff801d5c>
  802024:	89000404 	addi	r4,r17,16
  802028:	b93fbc16 	blt	r23,r4,801f1c <__alt_data_end+0xff801f1c>
  80202c:	b0800317 	ldw	r2,12(r22)
  802030:	b0c00217 	ldw	r3,8(r22)
  802034:	81bfff04 	addi	r6,r16,-4
  802038:	01000904 	movi	r4,36
  80203c:	18800315 	stw	r2,12(r3)
  802040:	10c00215 	stw	r3,8(r2)
  802044:	b4800204 	addi	r18,r22,8
  802048:	21804336 	bltu	r4,r6,802158 <_realloc_r+0x508>
  80204c:	008004c4 	movi	r2,19
  802050:	11803f2e 	bgeu	r2,r6,802150 <_realloc_r+0x500>
  802054:	a8800017 	ldw	r2,0(r21)
  802058:	b0800215 	stw	r2,8(r22)
  80205c:	a8800117 	ldw	r2,4(r21)
  802060:	b0800315 	stw	r2,12(r22)
  802064:	008006c4 	movi	r2,27
  802068:	11803f36 	bltu	r2,r6,802168 <_realloc_r+0x518>
  80206c:	b0800404 	addi	r2,r22,16
  802070:	ad400204 	addi	r21,r21,8
  802074:	a8c00017 	ldw	r3,0(r21)
  802078:	10c00015 	stw	r3,0(r2)
  80207c:	a8c00117 	ldw	r3,4(r21)
  802080:	10c00115 	stw	r3,4(r2)
  802084:	a8c00217 	ldw	r3,8(r21)
  802088:	10c00215 	stw	r3,8(r2)
  80208c:	b447883a 	add	r3,r22,r17
  802090:	bc45c83a 	sub	r2,r23,r17
  802094:	e0c00215 	stw	r3,8(fp)
  802098:	10800054 	ori	r2,r2,1
  80209c:	18800115 	stw	r2,4(r3)
  8020a0:	b0800117 	ldw	r2,4(r22)
  8020a4:	a009883a 	mov	r4,r20
  8020a8:	1080004c 	andi	r2,r2,1
  8020ac:	1462b03a 	or	r17,r2,r17
  8020b0:	b4400115 	stw	r17,4(r22)
  8020b4:	0803e040 	call	803e04 <__malloc_unlock>
  8020b8:	9005883a 	mov	r2,r18
  8020bc:	003f4006 	br	801dc0 <__alt_data_end+0xff801dc0>
  8020c0:	a8c00217 	ldw	r3,8(r21)
  8020c4:	90c00215 	stw	r3,8(r18)
  8020c8:	a8c00317 	ldw	r3,12(r21)
  8020cc:	90c00315 	stw	r3,12(r18)
  8020d0:	30801126 	beq	r6,r2,802118 <_realloc_r+0x4c8>
  8020d4:	90800404 	addi	r2,r18,16
  8020d8:	a8c00404 	addi	r3,r21,16
  8020dc:	003f1906 	br	801d44 <__alt_data_end+0xff801d44>
  8020e0:	90ffff17 	ldw	r3,-4(r18)
  8020e4:	00bfff04 	movi	r2,-4
  8020e8:	a825883a 	mov	r18,r21
  8020ec:	1884703a 	and	r2,r3,r2
  8020f0:	80a1883a 	add	r16,r16,r2
  8020f4:	003f2406 	br	801d88 <__alt_data_end+0xff801d88>
  8020f8:	a8800217 	ldw	r2,8(r21)
  8020fc:	b0800415 	stw	r2,16(r22)
  802100:	a8800317 	ldw	r2,12(r21)
  802104:	b0800515 	stw	r2,20(r22)
  802108:	31000a26 	beq	r6,r4,802134 <_realloc_r+0x4e4>
  80210c:	b0800604 	addi	r2,r22,24
  802110:	ad400404 	addi	r21,r21,16
  802114:	003fa906 	br	801fbc <__alt_data_end+0xff801fbc>
  802118:	a9000417 	ldw	r4,16(r21)
  80211c:	90800604 	addi	r2,r18,24
  802120:	a8c00604 	addi	r3,r21,24
  802124:	91000415 	stw	r4,16(r18)
  802128:	a9000517 	ldw	r4,20(r21)
  80212c:	91000515 	stw	r4,20(r18)
  802130:	003f0406 	br	801d44 <__alt_data_end+0xff801d44>
  802134:	a8c00417 	ldw	r3,16(r21)
  802138:	ad400604 	addi	r21,r21,24
  80213c:	b0800804 	addi	r2,r22,32
  802140:	b0c00615 	stw	r3,24(r22)
  802144:	a8ffff17 	ldw	r3,-4(r21)
  802148:	b0c00715 	stw	r3,28(r22)
  80214c:	003f9b06 	br	801fbc <__alt_data_end+0xff801fbc>
  802150:	9005883a 	mov	r2,r18
  802154:	003fc706 	br	802074 <__alt_data_end+0xff802074>
  802158:	a80b883a 	mov	r5,r21
  80215c:	9009883a 	mov	r4,r18
  802160:	08019cc0 	call	8019cc <memmove>
  802164:	003fc906 	br	80208c <__alt_data_end+0xff80208c>
  802168:	a8800217 	ldw	r2,8(r21)
  80216c:	b0800415 	stw	r2,16(r22)
  802170:	a8800317 	ldw	r2,12(r21)
  802174:	b0800515 	stw	r2,20(r22)
  802178:	31000726 	beq	r6,r4,802198 <_realloc_r+0x548>
  80217c:	b0800604 	addi	r2,r22,24
  802180:	ad400404 	addi	r21,r21,16
  802184:	003fbb06 	br	802074 <__alt_data_end+0xff802074>
  802188:	a009883a 	mov	r4,r20
  80218c:	0803e040 	call	803e04 <__malloc_unlock>
  802190:	0005883a 	mov	r2,zero
  802194:	003f0a06 	br	801dc0 <__alt_data_end+0xff801dc0>
  802198:	a8c00417 	ldw	r3,16(r21)
  80219c:	ad400604 	addi	r21,r21,24
  8021a0:	b0800804 	addi	r2,r22,32
  8021a4:	b0c00615 	stw	r3,24(r22)
  8021a8:	a8ffff17 	ldw	r3,-4(r21)
  8021ac:	b0c00715 	stw	r3,28(r22)
  8021b0:	003fb006 	br	802074 <__alt_data_end+0xff802074>

008021b4 <_sbrk_r>:
  8021b4:	defffd04 	addi	sp,sp,-12
  8021b8:	dc000015 	stw	r16,0(sp)
  8021bc:	04002074 	movhi	r16,129
  8021c0:	dc400115 	stw	r17,4(sp)
  8021c4:	84053304 	addi	r16,r16,5324
  8021c8:	2023883a 	mov	r17,r4
  8021cc:	2809883a 	mov	r4,r5
  8021d0:	dfc00215 	stw	ra,8(sp)
  8021d4:	80000015 	stw	zero,0(r16)
  8021d8:	08039d40 	call	8039d4 <sbrk>
  8021dc:	00ffffc4 	movi	r3,-1
  8021e0:	10c00526 	beq	r2,r3,8021f8 <_sbrk_r+0x44>
  8021e4:	dfc00217 	ldw	ra,8(sp)
  8021e8:	dc400117 	ldw	r17,4(sp)
  8021ec:	dc000017 	ldw	r16,0(sp)
  8021f0:	dec00304 	addi	sp,sp,12
  8021f4:	f800283a 	ret
  8021f8:	80c00017 	ldw	r3,0(r16)
  8021fc:	183ff926 	beq	r3,zero,8021e4 <__alt_data_end+0xff8021e4>
  802200:	88c00015 	stw	r3,0(r17)
  802204:	003ff706 	br	8021e4 <__alt_data_end+0xff8021e4>

00802208 <__sread>:
  802208:	defffe04 	addi	sp,sp,-8
  80220c:	dc000015 	stw	r16,0(sp)
  802210:	2821883a 	mov	r16,r5
  802214:	2940038f 	ldh	r5,14(r5)
  802218:	dfc00115 	stw	ra,4(sp)
  80221c:	0802f480 	call	802f48 <_read_r>
  802220:	10000716 	blt	r2,zero,802240 <__sread+0x38>
  802224:	80c01417 	ldw	r3,80(r16)
  802228:	1887883a 	add	r3,r3,r2
  80222c:	80c01415 	stw	r3,80(r16)
  802230:	dfc00117 	ldw	ra,4(sp)
  802234:	dc000017 	ldw	r16,0(sp)
  802238:	dec00204 	addi	sp,sp,8
  80223c:	f800283a 	ret
  802240:	80c0030b 	ldhu	r3,12(r16)
  802244:	18fbffcc 	andi	r3,r3,61439
  802248:	80c0030d 	sth	r3,12(r16)
  80224c:	dfc00117 	ldw	ra,4(sp)
  802250:	dc000017 	ldw	r16,0(sp)
  802254:	dec00204 	addi	sp,sp,8
  802258:	f800283a 	ret

0080225c <__seofread>:
  80225c:	0005883a 	mov	r2,zero
  802260:	f800283a 	ret

00802264 <__swrite>:
  802264:	2880030b 	ldhu	r2,12(r5)
  802268:	defffb04 	addi	sp,sp,-20
  80226c:	dcc00315 	stw	r19,12(sp)
  802270:	dc800215 	stw	r18,8(sp)
  802274:	dc400115 	stw	r17,4(sp)
  802278:	dc000015 	stw	r16,0(sp)
  80227c:	dfc00415 	stw	ra,16(sp)
  802280:	10c0400c 	andi	r3,r2,256
  802284:	2821883a 	mov	r16,r5
  802288:	2023883a 	mov	r17,r4
  80228c:	3025883a 	mov	r18,r6
  802290:	3827883a 	mov	r19,r7
  802294:	18000526 	beq	r3,zero,8022ac <__swrite+0x48>
  802298:	2940038f 	ldh	r5,14(r5)
  80229c:	01c00084 	movi	r7,2
  8022a0:	000d883a 	mov	r6,zero
  8022a4:	0802d2c0 	call	802d2c <_lseek_r>
  8022a8:	8080030b 	ldhu	r2,12(r16)
  8022ac:	8140038f 	ldh	r5,14(r16)
  8022b0:	10bbffcc 	andi	r2,r2,61439
  8022b4:	980f883a 	mov	r7,r19
  8022b8:	900d883a 	mov	r6,r18
  8022bc:	8809883a 	mov	r4,r17
  8022c0:	8080030d 	sth	r2,12(r16)
  8022c4:	dfc00417 	ldw	ra,16(sp)
  8022c8:	dcc00317 	ldw	r19,12(sp)
  8022cc:	dc800217 	ldw	r18,8(sp)
  8022d0:	dc400117 	ldw	r17,4(sp)
  8022d4:	dc000017 	ldw	r16,0(sp)
  8022d8:	dec00504 	addi	sp,sp,20
  8022dc:	08023441 	jmpi	802344 <_write_r>

008022e0 <__sseek>:
  8022e0:	defffe04 	addi	sp,sp,-8
  8022e4:	dc000015 	stw	r16,0(sp)
  8022e8:	2821883a 	mov	r16,r5
  8022ec:	2940038f 	ldh	r5,14(r5)
  8022f0:	dfc00115 	stw	ra,4(sp)
  8022f4:	0802d2c0 	call	802d2c <_lseek_r>
  8022f8:	00ffffc4 	movi	r3,-1
  8022fc:	10c00826 	beq	r2,r3,802320 <__sseek+0x40>
  802300:	80c0030b 	ldhu	r3,12(r16)
  802304:	80801415 	stw	r2,80(r16)
  802308:	18c40014 	ori	r3,r3,4096
  80230c:	80c0030d 	sth	r3,12(r16)
  802310:	dfc00117 	ldw	ra,4(sp)
  802314:	dc000017 	ldw	r16,0(sp)
  802318:	dec00204 	addi	sp,sp,8
  80231c:	f800283a 	ret
  802320:	80c0030b 	ldhu	r3,12(r16)
  802324:	18fbffcc 	andi	r3,r3,61439
  802328:	80c0030d 	sth	r3,12(r16)
  80232c:	dfc00117 	ldw	ra,4(sp)
  802330:	dc000017 	ldw	r16,0(sp)
  802334:	dec00204 	addi	sp,sp,8
  802338:	f800283a 	ret

0080233c <__sclose>:
  80233c:	2940038f 	ldh	r5,14(r5)
  802340:	08024f81 	jmpi	8024f8 <_close_r>

00802344 <_write_r>:
  802344:	defffd04 	addi	sp,sp,-12
  802348:	2805883a 	mov	r2,r5
  80234c:	dc000015 	stw	r16,0(sp)
  802350:	04002074 	movhi	r16,129
  802354:	dc400115 	stw	r17,4(sp)
  802358:	300b883a 	mov	r5,r6
  80235c:	84053304 	addi	r16,r16,5324
  802360:	2023883a 	mov	r17,r4
  802364:	380d883a 	mov	r6,r7
  802368:	1009883a 	mov	r4,r2
  80236c:	dfc00215 	stw	ra,8(sp)
  802370:	80000015 	stw	zero,0(r16)
  802374:	0803ac00 	call	803ac0 <write>
  802378:	00ffffc4 	movi	r3,-1
  80237c:	10c00526 	beq	r2,r3,802394 <_write_r+0x50>
  802380:	dfc00217 	ldw	ra,8(sp)
  802384:	dc400117 	ldw	r17,4(sp)
  802388:	dc000017 	ldw	r16,0(sp)
  80238c:	dec00304 	addi	sp,sp,12
  802390:	f800283a 	ret
  802394:	80c00017 	ldw	r3,0(r16)
  802398:	183ff926 	beq	r3,zero,802380 <__alt_data_end+0xff802380>
  80239c:	88c00015 	stw	r3,0(r17)
  8023a0:	003ff706 	br	802380 <__alt_data_end+0xff802380>

008023a4 <__swsetup_r>:
  8023a4:	00802074 	movhi	r2,129
  8023a8:	defffd04 	addi	sp,sp,-12
  8023ac:	10be3c04 	addi	r2,r2,-1808
  8023b0:	dc400115 	stw	r17,4(sp)
  8023b4:	2023883a 	mov	r17,r4
  8023b8:	11000017 	ldw	r4,0(r2)
  8023bc:	dc000015 	stw	r16,0(sp)
  8023c0:	dfc00215 	stw	ra,8(sp)
  8023c4:	2821883a 	mov	r16,r5
  8023c8:	20000226 	beq	r4,zero,8023d4 <__swsetup_r+0x30>
  8023cc:	20800e17 	ldw	r2,56(r4)
  8023d0:	10003126 	beq	r2,zero,802498 <__swsetup_r+0xf4>
  8023d4:	8080030b 	ldhu	r2,12(r16)
  8023d8:	10c0020c 	andi	r3,r2,8
  8023dc:	1009883a 	mov	r4,r2
  8023e0:	18000f26 	beq	r3,zero,802420 <__swsetup_r+0x7c>
  8023e4:	80c00417 	ldw	r3,16(r16)
  8023e8:	18001526 	beq	r3,zero,802440 <__swsetup_r+0x9c>
  8023ec:	1100004c 	andi	r4,r2,1
  8023f0:	20001c1e 	bne	r4,zero,802464 <__swsetup_r+0xc0>
  8023f4:	1080008c 	andi	r2,r2,2
  8023f8:	1000291e 	bne	r2,zero,8024a0 <__swsetup_r+0xfc>
  8023fc:	80800517 	ldw	r2,20(r16)
  802400:	80800215 	stw	r2,8(r16)
  802404:	18001c26 	beq	r3,zero,802478 <__swsetup_r+0xd4>
  802408:	0005883a 	mov	r2,zero
  80240c:	dfc00217 	ldw	ra,8(sp)
  802410:	dc400117 	ldw	r17,4(sp)
  802414:	dc000017 	ldw	r16,0(sp)
  802418:	dec00304 	addi	sp,sp,12
  80241c:	f800283a 	ret
  802420:	2080040c 	andi	r2,r4,16
  802424:	10002e26 	beq	r2,zero,8024e0 <__swsetup_r+0x13c>
  802428:	2080010c 	andi	r2,r4,4
  80242c:	10001e1e 	bne	r2,zero,8024a8 <__swsetup_r+0x104>
  802430:	80c00417 	ldw	r3,16(r16)
  802434:	20800214 	ori	r2,r4,8
  802438:	8080030d 	sth	r2,12(r16)
  80243c:	183feb1e 	bne	r3,zero,8023ec <__alt_data_end+0xff8023ec>
  802440:	1100a00c 	andi	r4,r2,640
  802444:	01408004 	movi	r5,512
  802448:	217fe826 	beq	r4,r5,8023ec <__alt_data_end+0xff8023ec>
  80244c:	800b883a 	mov	r5,r16
  802450:	8809883a 	mov	r4,r17
  802454:	0802d8c0 	call	802d8c <__smakebuf_r>
  802458:	8080030b 	ldhu	r2,12(r16)
  80245c:	80c00417 	ldw	r3,16(r16)
  802460:	003fe206 	br	8023ec <__alt_data_end+0xff8023ec>
  802464:	80800517 	ldw	r2,20(r16)
  802468:	80000215 	stw	zero,8(r16)
  80246c:	0085c83a 	sub	r2,zero,r2
  802470:	80800615 	stw	r2,24(r16)
  802474:	183fe41e 	bne	r3,zero,802408 <__alt_data_end+0xff802408>
  802478:	80c0030b 	ldhu	r3,12(r16)
  80247c:	0005883a 	mov	r2,zero
  802480:	1900200c 	andi	r4,r3,128
  802484:	203fe126 	beq	r4,zero,80240c <__alt_data_end+0xff80240c>
  802488:	18c01014 	ori	r3,r3,64
  80248c:	80c0030d 	sth	r3,12(r16)
  802490:	00bfffc4 	movi	r2,-1
  802494:	003fdd06 	br	80240c <__alt_data_end+0xff80240c>
  802498:	08008f40 	call	8008f4 <__sinit>
  80249c:	003fcd06 	br	8023d4 <__alt_data_end+0xff8023d4>
  8024a0:	0005883a 	mov	r2,zero
  8024a4:	003fd606 	br	802400 <__alt_data_end+0xff802400>
  8024a8:	81400c17 	ldw	r5,48(r16)
  8024ac:	28000626 	beq	r5,zero,8024c8 <__swsetup_r+0x124>
  8024b0:	80801004 	addi	r2,r16,64
  8024b4:	28800326 	beq	r5,r2,8024c4 <__swsetup_r+0x120>
  8024b8:	8809883a 	mov	r4,r17
  8024bc:	0802a1c0 	call	802a1c <_free_r>
  8024c0:	8100030b 	ldhu	r4,12(r16)
  8024c4:	80000c15 	stw	zero,48(r16)
  8024c8:	80c00417 	ldw	r3,16(r16)
  8024cc:	00bff6c4 	movi	r2,-37
  8024d0:	1108703a 	and	r4,r2,r4
  8024d4:	80000115 	stw	zero,4(r16)
  8024d8:	80c00015 	stw	r3,0(r16)
  8024dc:	003fd506 	br	802434 <__alt_data_end+0xff802434>
  8024e0:	00800244 	movi	r2,9
  8024e4:	88800015 	stw	r2,0(r17)
  8024e8:	20801014 	ori	r2,r4,64
  8024ec:	8080030d 	sth	r2,12(r16)
  8024f0:	00bfffc4 	movi	r2,-1
  8024f4:	003fc506 	br	80240c <__alt_data_end+0xff80240c>

008024f8 <_close_r>:
  8024f8:	defffd04 	addi	sp,sp,-12
  8024fc:	dc000015 	stw	r16,0(sp)
  802500:	04002074 	movhi	r16,129
  802504:	dc400115 	stw	r17,4(sp)
  802508:	84053304 	addi	r16,r16,5324
  80250c:	2023883a 	mov	r17,r4
  802510:	2809883a 	mov	r4,r5
  802514:	dfc00215 	stw	ra,8(sp)
  802518:	80000015 	stw	zero,0(r16)
  80251c:	08032700 	call	803270 <close>
  802520:	00ffffc4 	movi	r3,-1
  802524:	10c00526 	beq	r2,r3,80253c <_close_r+0x44>
  802528:	dfc00217 	ldw	ra,8(sp)
  80252c:	dc400117 	ldw	r17,4(sp)
  802530:	dc000017 	ldw	r16,0(sp)
  802534:	dec00304 	addi	sp,sp,12
  802538:	f800283a 	ret
  80253c:	80c00017 	ldw	r3,0(r16)
  802540:	183ff926 	beq	r3,zero,802528 <__alt_data_end+0xff802528>
  802544:	88c00015 	stw	r3,0(r17)
  802548:	003ff706 	br	802528 <__alt_data_end+0xff802528>

0080254c <_fclose_r>:
  80254c:	28003926 	beq	r5,zero,802634 <_fclose_r+0xe8>
  802550:	defffc04 	addi	sp,sp,-16
  802554:	dc400115 	stw	r17,4(sp)
  802558:	dc000015 	stw	r16,0(sp)
  80255c:	dfc00315 	stw	ra,12(sp)
  802560:	dc800215 	stw	r18,8(sp)
  802564:	2023883a 	mov	r17,r4
  802568:	2821883a 	mov	r16,r5
  80256c:	20000226 	beq	r4,zero,802578 <_fclose_r+0x2c>
  802570:	20800e17 	ldw	r2,56(r4)
  802574:	10002726 	beq	r2,zero,802614 <_fclose_r+0xc8>
  802578:	8080030f 	ldh	r2,12(r16)
  80257c:	1000071e 	bne	r2,zero,80259c <_fclose_r+0x50>
  802580:	0005883a 	mov	r2,zero
  802584:	dfc00317 	ldw	ra,12(sp)
  802588:	dc800217 	ldw	r18,8(sp)
  80258c:	dc400117 	ldw	r17,4(sp)
  802590:	dc000017 	ldw	r16,0(sp)
  802594:	dec00404 	addi	sp,sp,16
  802598:	f800283a 	ret
  80259c:	800b883a 	mov	r5,r16
  8025a0:	8809883a 	mov	r4,r17
  8025a4:	08026500 	call	802650 <__sflush_r>
  8025a8:	1025883a 	mov	r18,r2
  8025ac:	80800b17 	ldw	r2,44(r16)
  8025b0:	10000426 	beq	r2,zero,8025c4 <_fclose_r+0x78>
  8025b4:	81400717 	ldw	r5,28(r16)
  8025b8:	8809883a 	mov	r4,r17
  8025bc:	103ee83a 	callr	r2
  8025c0:	10001616 	blt	r2,zero,80261c <_fclose_r+0xd0>
  8025c4:	8080030b 	ldhu	r2,12(r16)
  8025c8:	1080200c 	andi	r2,r2,128
  8025cc:	1000151e 	bne	r2,zero,802624 <_fclose_r+0xd8>
  8025d0:	81400c17 	ldw	r5,48(r16)
  8025d4:	28000526 	beq	r5,zero,8025ec <_fclose_r+0xa0>
  8025d8:	80801004 	addi	r2,r16,64
  8025dc:	28800226 	beq	r5,r2,8025e8 <_fclose_r+0x9c>
  8025e0:	8809883a 	mov	r4,r17
  8025e4:	0802a1c0 	call	802a1c <_free_r>
  8025e8:	80000c15 	stw	zero,48(r16)
  8025ec:	81401117 	ldw	r5,68(r16)
  8025f0:	28000326 	beq	r5,zero,802600 <_fclose_r+0xb4>
  8025f4:	8809883a 	mov	r4,r17
  8025f8:	0802a1c0 	call	802a1c <_free_r>
  8025fc:	80001115 	stw	zero,68(r16)
  802600:	08009040 	call	800904 <__sfp_lock_acquire>
  802604:	8000030d 	sth	zero,12(r16)
  802608:	08009080 	call	800908 <__sfp_lock_release>
  80260c:	9005883a 	mov	r2,r18
  802610:	003fdc06 	br	802584 <__alt_data_end+0xff802584>
  802614:	08008f40 	call	8008f4 <__sinit>
  802618:	003fd706 	br	802578 <__alt_data_end+0xff802578>
  80261c:	04bfffc4 	movi	r18,-1
  802620:	003fe806 	br	8025c4 <__alt_data_end+0xff8025c4>
  802624:	81400417 	ldw	r5,16(r16)
  802628:	8809883a 	mov	r4,r17
  80262c:	0802a1c0 	call	802a1c <_free_r>
  802630:	003fe706 	br	8025d0 <__alt_data_end+0xff8025d0>
  802634:	0005883a 	mov	r2,zero
  802638:	f800283a 	ret

0080263c <fclose>:
  80263c:	00802074 	movhi	r2,129
  802640:	10be3c04 	addi	r2,r2,-1808
  802644:	200b883a 	mov	r5,r4
  802648:	11000017 	ldw	r4,0(r2)
  80264c:	080254c1 	jmpi	80254c <_fclose_r>

00802650 <__sflush_r>:
  802650:	2880030b 	ldhu	r2,12(r5)
  802654:	defffb04 	addi	sp,sp,-20
  802658:	dcc00315 	stw	r19,12(sp)
  80265c:	dc400115 	stw	r17,4(sp)
  802660:	dfc00415 	stw	ra,16(sp)
  802664:	dc800215 	stw	r18,8(sp)
  802668:	dc000015 	stw	r16,0(sp)
  80266c:	10c0020c 	andi	r3,r2,8
  802670:	2823883a 	mov	r17,r5
  802674:	2027883a 	mov	r19,r4
  802678:	1800311e 	bne	r3,zero,802740 <__sflush_r+0xf0>
  80267c:	28c00117 	ldw	r3,4(r5)
  802680:	10820014 	ori	r2,r2,2048
  802684:	2880030d 	sth	r2,12(r5)
  802688:	00c04b0e 	bge	zero,r3,8027b8 <__sflush_r+0x168>
  80268c:	8a000a17 	ldw	r8,40(r17)
  802690:	40002326 	beq	r8,zero,802720 <__sflush_r+0xd0>
  802694:	9c000017 	ldw	r16,0(r19)
  802698:	10c4000c 	andi	r3,r2,4096
  80269c:	98000015 	stw	zero,0(r19)
  8026a0:	18004826 	beq	r3,zero,8027c4 <__sflush_r+0x174>
  8026a4:	89801417 	ldw	r6,80(r17)
  8026a8:	10c0010c 	andi	r3,r2,4
  8026ac:	18000626 	beq	r3,zero,8026c8 <__sflush_r+0x78>
  8026b0:	88c00117 	ldw	r3,4(r17)
  8026b4:	88800c17 	ldw	r2,48(r17)
  8026b8:	30cdc83a 	sub	r6,r6,r3
  8026bc:	10000226 	beq	r2,zero,8026c8 <__sflush_r+0x78>
  8026c0:	88800f17 	ldw	r2,60(r17)
  8026c4:	308dc83a 	sub	r6,r6,r2
  8026c8:	89400717 	ldw	r5,28(r17)
  8026cc:	000f883a 	mov	r7,zero
  8026d0:	9809883a 	mov	r4,r19
  8026d4:	403ee83a 	callr	r8
  8026d8:	00ffffc4 	movi	r3,-1
  8026dc:	10c04426 	beq	r2,r3,8027f0 <__sflush_r+0x1a0>
  8026e0:	88c0030b 	ldhu	r3,12(r17)
  8026e4:	89000417 	ldw	r4,16(r17)
  8026e8:	88000115 	stw	zero,4(r17)
  8026ec:	197dffcc 	andi	r5,r3,63487
  8026f0:	8940030d 	sth	r5,12(r17)
  8026f4:	89000015 	stw	r4,0(r17)
  8026f8:	18c4000c 	andi	r3,r3,4096
  8026fc:	18002c1e 	bne	r3,zero,8027b0 <__sflush_r+0x160>
  802700:	89400c17 	ldw	r5,48(r17)
  802704:	9c000015 	stw	r16,0(r19)
  802708:	28000526 	beq	r5,zero,802720 <__sflush_r+0xd0>
  80270c:	88801004 	addi	r2,r17,64
  802710:	28800226 	beq	r5,r2,80271c <__sflush_r+0xcc>
  802714:	9809883a 	mov	r4,r19
  802718:	0802a1c0 	call	802a1c <_free_r>
  80271c:	88000c15 	stw	zero,48(r17)
  802720:	0005883a 	mov	r2,zero
  802724:	dfc00417 	ldw	ra,16(sp)
  802728:	dcc00317 	ldw	r19,12(sp)
  80272c:	dc800217 	ldw	r18,8(sp)
  802730:	dc400117 	ldw	r17,4(sp)
  802734:	dc000017 	ldw	r16,0(sp)
  802738:	dec00504 	addi	sp,sp,20
  80273c:	f800283a 	ret
  802740:	2c800417 	ldw	r18,16(r5)
  802744:	903ff626 	beq	r18,zero,802720 <__alt_data_end+0xff802720>
  802748:	2c000017 	ldw	r16,0(r5)
  80274c:	108000cc 	andi	r2,r2,3
  802750:	2c800015 	stw	r18,0(r5)
  802754:	84a1c83a 	sub	r16,r16,r18
  802758:	1000131e 	bne	r2,zero,8027a8 <__sflush_r+0x158>
  80275c:	28800517 	ldw	r2,20(r5)
  802760:	88800215 	stw	r2,8(r17)
  802764:	04000316 	blt	zero,r16,802774 <__sflush_r+0x124>
  802768:	003fed06 	br	802720 <__alt_data_end+0xff802720>
  80276c:	90a5883a 	add	r18,r18,r2
  802770:	043feb0e 	bge	zero,r16,802720 <__alt_data_end+0xff802720>
  802774:	88800917 	ldw	r2,36(r17)
  802778:	89400717 	ldw	r5,28(r17)
  80277c:	800f883a 	mov	r7,r16
  802780:	900d883a 	mov	r6,r18
  802784:	9809883a 	mov	r4,r19
  802788:	103ee83a 	callr	r2
  80278c:	80a1c83a 	sub	r16,r16,r2
  802790:	00bff616 	blt	zero,r2,80276c <__alt_data_end+0xff80276c>
  802794:	88c0030b 	ldhu	r3,12(r17)
  802798:	00bfffc4 	movi	r2,-1
  80279c:	18c01014 	ori	r3,r3,64
  8027a0:	88c0030d 	sth	r3,12(r17)
  8027a4:	003fdf06 	br	802724 <__alt_data_end+0xff802724>
  8027a8:	0005883a 	mov	r2,zero
  8027ac:	003fec06 	br	802760 <__alt_data_end+0xff802760>
  8027b0:	88801415 	stw	r2,80(r17)
  8027b4:	003fd206 	br	802700 <__alt_data_end+0xff802700>
  8027b8:	28c00f17 	ldw	r3,60(r5)
  8027bc:	00ffb316 	blt	zero,r3,80268c <__alt_data_end+0xff80268c>
  8027c0:	003fd706 	br	802720 <__alt_data_end+0xff802720>
  8027c4:	89400717 	ldw	r5,28(r17)
  8027c8:	000d883a 	mov	r6,zero
  8027cc:	01c00044 	movi	r7,1
  8027d0:	9809883a 	mov	r4,r19
  8027d4:	403ee83a 	callr	r8
  8027d8:	100d883a 	mov	r6,r2
  8027dc:	00bfffc4 	movi	r2,-1
  8027e0:	30801426 	beq	r6,r2,802834 <__sflush_r+0x1e4>
  8027e4:	8880030b 	ldhu	r2,12(r17)
  8027e8:	8a000a17 	ldw	r8,40(r17)
  8027ec:	003fae06 	br	8026a8 <__alt_data_end+0xff8026a8>
  8027f0:	98c00017 	ldw	r3,0(r19)
  8027f4:	183fba26 	beq	r3,zero,8026e0 <__alt_data_end+0xff8026e0>
  8027f8:	01000744 	movi	r4,29
  8027fc:	19000626 	beq	r3,r4,802818 <__sflush_r+0x1c8>
  802800:	01000584 	movi	r4,22
  802804:	19000426 	beq	r3,r4,802818 <__sflush_r+0x1c8>
  802808:	88c0030b 	ldhu	r3,12(r17)
  80280c:	18c01014 	ori	r3,r3,64
  802810:	88c0030d 	sth	r3,12(r17)
  802814:	003fc306 	br	802724 <__alt_data_end+0xff802724>
  802818:	8880030b 	ldhu	r2,12(r17)
  80281c:	88c00417 	ldw	r3,16(r17)
  802820:	88000115 	stw	zero,4(r17)
  802824:	10bdffcc 	andi	r2,r2,63487
  802828:	8880030d 	sth	r2,12(r17)
  80282c:	88c00015 	stw	r3,0(r17)
  802830:	003fb306 	br	802700 <__alt_data_end+0xff802700>
  802834:	98800017 	ldw	r2,0(r19)
  802838:	103fea26 	beq	r2,zero,8027e4 <__alt_data_end+0xff8027e4>
  80283c:	00c00744 	movi	r3,29
  802840:	10c00226 	beq	r2,r3,80284c <__sflush_r+0x1fc>
  802844:	00c00584 	movi	r3,22
  802848:	10c0031e 	bne	r2,r3,802858 <__sflush_r+0x208>
  80284c:	9c000015 	stw	r16,0(r19)
  802850:	0005883a 	mov	r2,zero
  802854:	003fb306 	br	802724 <__alt_data_end+0xff802724>
  802858:	88c0030b 	ldhu	r3,12(r17)
  80285c:	3005883a 	mov	r2,r6
  802860:	18c01014 	ori	r3,r3,64
  802864:	88c0030d 	sth	r3,12(r17)
  802868:	003fae06 	br	802724 <__alt_data_end+0xff802724>

0080286c <_fflush_r>:
  80286c:	defffd04 	addi	sp,sp,-12
  802870:	dc000115 	stw	r16,4(sp)
  802874:	dfc00215 	stw	ra,8(sp)
  802878:	2021883a 	mov	r16,r4
  80287c:	20000226 	beq	r4,zero,802888 <_fflush_r+0x1c>
  802880:	20800e17 	ldw	r2,56(r4)
  802884:	10000c26 	beq	r2,zero,8028b8 <_fflush_r+0x4c>
  802888:	2880030f 	ldh	r2,12(r5)
  80288c:	1000051e 	bne	r2,zero,8028a4 <_fflush_r+0x38>
  802890:	0005883a 	mov	r2,zero
  802894:	dfc00217 	ldw	ra,8(sp)
  802898:	dc000117 	ldw	r16,4(sp)
  80289c:	dec00304 	addi	sp,sp,12
  8028a0:	f800283a 	ret
  8028a4:	8009883a 	mov	r4,r16
  8028a8:	dfc00217 	ldw	ra,8(sp)
  8028ac:	dc000117 	ldw	r16,4(sp)
  8028b0:	dec00304 	addi	sp,sp,12
  8028b4:	08026501 	jmpi	802650 <__sflush_r>
  8028b8:	d9400015 	stw	r5,0(sp)
  8028bc:	08008f40 	call	8008f4 <__sinit>
  8028c0:	d9400017 	ldw	r5,0(sp)
  8028c4:	003ff006 	br	802888 <__alt_data_end+0xff802888>

008028c8 <fflush>:
  8028c8:	20000526 	beq	r4,zero,8028e0 <fflush+0x18>
  8028cc:	00802074 	movhi	r2,129
  8028d0:	10be3c04 	addi	r2,r2,-1808
  8028d4:	200b883a 	mov	r5,r4
  8028d8:	11000017 	ldw	r4,0(r2)
  8028dc:	080286c1 	jmpi	80286c <_fflush_r>
  8028e0:	00802074 	movhi	r2,129
  8028e4:	10be3b04 	addi	r2,r2,-1812
  8028e8:	11000017 	ldw	r4,0(r2)
  8028ec:	01402034 	movhi	r5,128
  8028f0:	294a1b04 	addi	r5,r5,10348
  8028f4:	0800ed01 	jmpi	800ed0 <_fwalk_reent>

008028f8 <_malloc_trim_r>:
  8028f8:	defffb04 	addi	sp,sp,-20
  8028fc:	dcc00315 	stw	r19,12(sp)
  802900:	04c02074 	movhi	r19,129
  802904:	dc800215 	stw	r18,8(sp)
  802908:	dc400115 	stw	r17,4(sp)
  80290c:	dc000015 	stw	r16,0(sp)
  802910:	dfc00415 	stw	ra,16(sp)
  802914:	2821883a 	mov	r16,r5
  802918:	9cf8a904 	addi	r19,r19,-7516
  80291c:	2025883a 	mov	r18,r4
  802920:	0803ce40 	call	803ce4 <__malloc_lock>
  802924:	98800217 	ldw	r2,8(r19)
  802928:	14400117 	ldw	r17,4(r2)
  80292c:	00bfff04 	movi	r2,-4
  802930:	88a2703a 	and	r17,r17,r2
  802934:	8c21c83a 	sub	r16,r17,r16
  802938:	8403fbc4 	addi	r16,r16,4079
  80293c:	8020d33a 	srli	r16,r16,12
  802940:	0083ffc4 	movi	r2,4095
  802944:	843fffc4 	addi	r16,r16,-1
  802948:	8020933a 	slli	r16,r16,12
  80294c:	1400060e 	bge	r2,r16,802968 <_malloc_trim_r+0x70>
  802950:	000b883a 	mov	r5,zero
  802954:	9009883a 	mov	r4,r18
  802958:	08021b40 	call	8021b4 <_sbrk_r>
  80295c:	98c00217 	ldw	r3,8(r19)
  802960:	1c47883a 	add	r3,r3,r17
  802964:	10c00a26 	beq	r2,r3,802990 <_malloc_trim_r+0x98>
  802968:	9009883a 	mov	r4,r18
  80296c:	0803e040 	call	803e04 <__malloc_unlock>
  802970:	0005883a 	mov	r2,zero
  802974:	dfc00417 	ldw	ra,16(sp)
  802978:	dcc00317 	ldw	r19,12(sp)
  80297c:	dc800217 	ldw	r18,8(sp)
  802980:	dc400117 	ldw	r17,4(sp)
  802984:	dc000017 	ldw	r16,0(sp)
  802988:	dec00504 	addi	sp,sp,20
  80298c:	f800283a 	ret
  802990:	040bc83a 	sub	r5,zero,r16
  802994:	9009883a 	mov	r4,r18
  802998:	08021b40 	call	8021b4 <_sbrk_r>
  80299c:	00ffffc4 	movi	r3,-1
  8029a0:	10c00d26 	beq	r2,r3,8029d8 <_malloc_trim_r+0xe0>
  8029a4:	00c02074 	movhi	r3,129
  8029a8:	18c55404 	addi	r3,r3,5456
  8029ac:	18800017 	ldw	r2,0(r3)
  8029b0:	99000217 	ldw	r4,8(r19)
  8029b4:	8c23c83a 	sub	r17,r17,r16
  8029b8:	8c400054 	ori	r17,r17,1
  8029bc:	1421c83a 	sub	r16,r2,r16
  8029c0:	24400115 	stw	r17,4(r4)
  8029c4:	9009883a 	mov	r4,r18
  8029c8:	1c000015 	stw	r16,0(r3)
  8029cc:	0803e040 	call	803e04 <__malloc_unlock>
  8029d0:	00800044 	movi	r2,1
  8029d4:	003fe706 	br	802974 <__alt_data_end+0xff802974>
  8029d8:	000b883a 	mov	r5,zero
  8029dc:	9009883a 	mov	r4,r18
  8029e0:	08021b40 	call	8021b4 <_sbrk_r>
  8029e4:	99000217 	ldw	r4,8(r19)
  8029e8:	014003c4 	movi	r5,15
  8029ec:	1107c83a 	sub	r3,r2,r4
  8029f0:	28ffdd0e 	bge	r5,r3,802968 <__alt_data_end+0xff802968>
  8029f4:	01402074 	movhi	r5,129
  8029f8:	297e3d04 	addi	r5,r5,-1804
  8029fc:	29400017 	ldw	r5,0(r5)
  802a00:	18c00054 	ori	r3,r3,1
  802a04:	20c00115 	stw	r3,4(r4)
  802a08:	00c02074 	movhi	r3,129
  802a0c:	1145c83a 	sub	r2,r2,r5
  802a10:	18c55404 	addi	r3,r3,5456
  802a14:	18800015 	stw	r2,0(r3)
  802a18:	003fd306 	br	802968 <__alt_data_end+0xff802968>

00802a1c <_free_r>:
  802a1c:	28004126 	beq	r5,zero,802b24 <_free_r+0x108>
  802a20:	defffd04 	addi	sp,sp,-12
  802a24:	dc400115 	stw	r17,4(sp)
  802a28:	dc000015 	stw	r16,0(sp)
  802a2c:	2023883a 	mov	r17,r4
  802a30:	2821883a 	mov	r16,r5
  802a34:	dfc00215 	stw	ra,8(sp)
  802a38:	0803ce40 	call	803ce4 <__malloc_lock>
  802a3c:	81ffff17 	ldw	r7,-4(r16)
  802a40:	00bfff84 	movi	r2,-2
  802a44:	01002074 	movhi	r4,129
  802a48:	81bffe04 	addi	r6,r16,-8
  802a4c:	3884703a 	and	r2,r7,r2
  802a50:	2138a904 	addi	r4,r4,-7516
  802a54:	308b883a 	add	r5,r6,r2
  802a58:	2a400117 	ldw	r9,4(r5)
  802a5c:	22000217 	ldw	r8,8(r4)
  802a60:	00ffff04 	movi	r3,-4
  802a64:	48c6703a 	and	r3,r9,r3
  802a68:	2a005726 	beq	r5,r8,802bc8 <_free_r+0x1ac>
  802a6c:	28c00115 	stw	r3,4(r5)
  802a70:	39c0004c 	andi	r7,r7,1
  802a74:	3800091e 	bne	r7,zero,802a9c <_free_r+0x80>
  802a78:	823ffe17 	ldw	r8,-8(r16)
  802a7c:	22400204 	addi	r9,r4,8
  802a80:	320dc83a 	sub	r6,r6,r8
  802a84:	31c00217 	ldw	r7,8(r6)
  802a88:	1205883a 	add	r2,r2,r8
  802a8c:	3a406526 	beq	r7,r9,802c24 <_free_r+0x208>
  802a90:	32000317 	ldw	r8,12(r6)
  802a94:	3a000315 	stw	r8,12(r7)
  802a98:	41c00215 	stw	r7,8(r8)
  802a9c:	28cf883a 	add	r7,r5,r3
  802aa0:	39c00117 	ldw	r7,4(r7)
  802aa4:	39c0004c 	andi	r7,r7,1
  802aa8:	38003a26 	beq	r7,zero,802b94 <_free_r+0x178>
  802aac:	10c00054 	ori	r3,r2,1
  802ab0:	30c00115 	stw	r3,4(r6)
  802ab4:	3087883a 	add	r3,r6,r2
  802ab8:	18800015 	stw	r2,0(r3)
  802abc:	00c07fc4 	movi	r3,511
  802ac0:	18801936 	bltu	r3,r2,802b28 <_free_r+0x10c>
  802ac4:	1004d0fa 	srli	r2,r2,3
  802ac8:	01c00044 	movi	r7,1
  802acc:	21400117 	ldw	r5,4(r4)
  802ad0:	10c00044 	addi	r3,r2,1
  802ad4:	18c7883a 	add	r3,r3,r3
  802ad8:	1005d0ba 	srai	r2,r2,2
  802adc:	18c7883a 	add	r3,r3,r3
  802ae0:	18c7883a 	add	r3,r3,r3
  802ae4:	1907883a 	add	r3,r3,r4
  802ae8:	3884983a 	sll	r2,r7,r2
  802aec:	19c00017 	ldw	r7,0(r3)
  802af0:	1a3ffe04 	addi	r8,r3,-8
  802af4:	1144b03a 	or	r2,r2,r5
  802af8:	32000315 	stw	r8,12(r6)
  802afc:	31c00215 	stw	r7,8(r6)
  802b00:	20800115 	stw	r2,4(r4)
  802b04:	19800015 	stw	r6,0(r3)
  802b08:	39800315 	stw	r6,12(r7)
  802b0c:	8809883a 	mov	r4,r17
  802b10:	dfc00217 	ldw	ra,8(sp)
  802b14:	dc400117 	ldw	r17,4(sp)
  802b18:	dc000017 	ldw	r16,0(sp)
  802b1c:	dec00304 	addi	sp,sp,12
  802b20:	0803e041 	jmpi	803e04 <__malloc_unlock>
  802b24:	f800283a 	ret
  802b28:	100ad27a 	srli	r5,r2,9
  802b2c:	00c00104 	movi	r3,4
  802b30:	19404a36 	bltu	r3,r5,802c5c <_free_r+0x240>
  802b34:	100ad1ba 	srli	r5,r2,6
  802b38:	28c00e44 	addi	r3,r5,57
  802b3c:	18c7883a 	add	r3,r3,r3
  802b40:	29400e04 	addi	r5,r5,56
  802b44:	18c7883a 	add	r3,r3,r3
  802b48:	18c7883a 	add	r3,r3,r3
  802b4c:	1909883a 	add	r4,r3,r4
  802b50:	20c00017 	ldw	r3,0(r4)
  802b54:	01c02074 	movhi	r7,129
  802b58:	213ffe04 	addi	r4,r4,-8
  802b5c:	39f8a904 	addi	r7,r7,-7516
  802b60:	20c04426 	beq	r4,r3,802c74 <_free_r+0x258>
  802b64:	01ffff04 	movi	r7,-4
  802b68:	19400117 	ldw	r5,4(r3)
  802b6c:	29ca703a 	and	r5,r5,r7
  802b70:	1140022e 	bgeu	r2,r5,802b7c <_free_r+0x160>
  802b74:	18c00217 	ldw	r3,8(r3)
  802b78:	20fffb1e 	bne	r4,r3,802b68 <__alt_data_end+0xff802b68>
  802b7c:	19000317 	ldw	r4,12(r3)
  802b80:	31000315 	stw	r4,12(r6)
  802b84:	30c00215 	stw	r3,8(r6)
  802b88:	21800215 	stw	r6,8(r4)
  802b8c:	19800315 	stw	r6,12(r3)
  802b90:	003fde06 	br	802b0c <__alt_data_end+0xff802b0c>
  802b94:	29c00217 	ldw	r7,8(r5)
  802b98:	10c5883a 	add	r2,r2,r3
  802b9c:	00c02074 	movhi	r3,129
  802ba0:	18f8ab04 	addi	r3,r3,-7508
  802ba4:	38c03b26 	beq	r7,r3,802c94 <_free_r+0x278>
  802ba8:	2a000317 	ldw	r8,12(r5)
  802bac:	11400054 	ori	r5,r2,1
  802bb0:	3087883a 	add	r3,r6,r2
  802bb4:	3a000315 	stw	r8,12(r7)
  802bb8:	41c00215 	stw	r7,8(r8)
  802bbc:	31400115 	stw	r5,4(r6)
  802bc0:	18800015 	stw	r2,0(r3)
  802bc4:	003fbd06 	br	802abc <__alt_data_end+0xff802abc>
  802bc8:	39c0004c 	andi	r7,r7,1
  802bcc:	10c5883a 	add	r2,r2,r3
  802bd0:	3800071e 	bne	r7,zero,802bf0 <_free_r+0x1d4>
  802bd4:	81fffe17 	ldw	r7,-8(r16)
  802bd8:	31cdc83a 	sub	r6,r6,r7
  802bdc:	30c00317 	ldw	r3,12(r6)
  802be0:	31400217 	ldw	r5,8(r6)
  802be4:	11c5883a 	add	r2,r2,r7
  802be8:	28c00315 	stw	r3,12(r5)
  802bec:	19400215 	stw	r5,8(r3)
  802bf0:	10c00054 	ori	r3,r2,1
  802bf4:	30c00115 	stw	r3,4(r6)
  802bf8:	00c02074 	movhi	r3,129
  802bfc:	18fe3e04 	addi	r3,r3,-1800
  802c00:	18c00017 	ldw	r3,0(r3)
  802c04:	21800215 	stw	r6,8(r4)
  802c08:	10ffc036 	bltu	r2,r3,802b0c <__alt_data_end+0xff802b0c>
  802c0c:	00802074 	movhi	r2,129
  802c10:	10853204 	addi	r2,r2,5320
  802c14:	11400017 	ldw	r5,0(r2)
  802c18:	8809883a 	mov	r4,r17
  802c1c:	08028f80 	call	8028f8 <_malloc_trim_r>
  802c20:	003fba06 	br	802b0c <__alt_data_end+0xff802b0c>
  802c24:	28c9883a 	add	r4,r5,r3
  802c28:	21000117 	ldw	r4,4(r4)
  802c2c:	2100004c 	andi	r4,r4,1
  802c30:	2000391e 	bne	r4,zero,802d18 <_free_r+0x2fc>
  802c34:	29c00217 	ldw	r7,8(r5)
  802c38:	29000317 	ldw	r4,12(r5)
  802c3c:	1885883a 	add	r2,r3,r2
  802c40:	10c00054 	ori	r3,r2,1
  802c44:	39000315 	stw	r4,12(r7)
  802c48:	21c00215 	stw	r7,8(r4)
  802c4c:	30c00115 	stw	r3,4(r6)
  802c50:	308d883a 	add	r6,r6,r2
  802c54:	30800015 	stw	r2,0(r6)
  802c58:	003fac06 	br	802b0c <__alt_data_end+0xff802b0c>
  802c5c:	00c00504 	movi	r3,20
  802c60:	19401536 	bltu	r3,r5,802cb8 <_free_r+0x29c>
  802c64:	28c01704 	addi	r3,r5,92
  802c68:	18c7883a 	add	r3,r3,r3
  802c6c:	294016c4 	addi	r5,r5,91
  802c70:	003fb406 	br	802b44 <__alt_data_end+0xff802b44>
  802c74:	280bd0ba 	srai	r5,r5,2
  802c78:	00c00044 	movi	r3,1
  802c7c:	38800117 	ldw	r2,4(r7)
  802c80:	194a983a 	sll	r5,r3,r5
  802c84:	2007883a 	mov	r3,r4
  802c88:	2884b03a 	or	r2,r5,r2
  802c8c:	38800115 	stw	r2,4(r7)
  802c90:	003fbb06 	br	802b80 <__alt_data_end+0xff802b80>
  802c94:	21800515 	stw	r6,20(r4)
  802c98:	21800415 	stw	r6,16(r4)
  802c9c:	10c00054 	ori	r3,r2,1
  802ca0:	31c00315 	stw	r7,12(r6)
  802ca4:	31c00215 	stw	r7,8(r6)
  802ca8:	30c00115 	stw	r3,4(r6)
  802cac:	308d883a 	add	r6,r6,r2
  802cb0:	30800015 	stw	r2,0(r6)
  802cb4:	003f9506 	br	802b0c <__alt_data_end+0xff802b0c>
  802cb8:	00c01504 	movi	r3,84
  802cbc:	19400536 	bltu	r3,r5,802cd4 <_free_r+0x2b8>
  802cc0:	100ad33a 	srli	r5,r2,12
  802cc4:	28c01bc4 	addi	r3,r5,111
  802cc8:	18c7883a 	add	r3,r3,r3
  802ccc:	29401b84 	addi	r5,r5,110
  802cd0:	003f9c06 	br	802b44 <__alt_data_end+0xff802b44>
  802cd4:	00c05504 	movi	r3,340
  802cd8:	19400536 	bltu	r3,r5,802cf0 <_free_r+0x2d4>
  802cdc:	100ad3fa 	srli	r5,r2,15
  802ce0:	28c01e04 	addi	r3,r5,120
  802ce4:	18c7883a 	add	r3,r3,r3
  802ce8:	29401dc4 	addi	r5,r5,119
  802cec:	003f9506 	br	802b44 <__alt_data_end+0xff802b44>
  802cf0:	00c15504 	movi	r3,1364
  802cf4:	19400536 	bltu	r3,r5,802d0c <_free_r+0x2f0>
  802cf8:	100ad4ba 	srli	r5,r2,18
  802cfc:	28c01f44 	addi	r3,r5,125
  802d00:	18c7883a 	add	r3,r3,r3
  802d04:	29401f04 	addi	r5,r5,124
  802d08:	003f8e06 	br	802b44 <__alt_data_end+0xff802b44>
  802d0c:	00c03f84 	movi	r3,254
  802d10:	01401f84 	movi	r5,126
  802d14:	003f8b06 	br	802b44 <__alt_data_end+0xff802b44>
  802d18:	10c00054 	ori	r3,r2,1
  802d1c:	30c00115 	stw	r3,4(r6)
  802d20:	308d883a 	add	r6,r6,r2
  802d24:	30800015 	stw	r2,0(r6)
  802d28:	003f7806 	br	802b0c <__alt_data_end+0xff802b0c>

00802d2c <_lseek_r>:
  802d2c:	defffd04 	addi	sp,sp,-12
  802d30:	2805883a 	mov	r2,r5
  802d34:	dc000015 	stw	r16,0(sp)
  802d38:	04002074 	movhi	r16,129
  802d3c:	dc400115 	stw	r17,4(sp)
  802d40:	300b883a 	mov	r5,r6
  802d44:	84053304 	addi	r16,r16,5324
  802d48:	2023883a 	mov	r17,r4
  802d4c:	380d883a 	mov	r6,r7
  802d50:	1009883a 	mov	r4,r2
  802d54:	dfc00215 	stw	ra,8(sp)
  802d58:	80000015 	stw	zero,0(r16)
  802d5c:	08036780 	call	803678 <lseek>
  802d60:	00ffffc4 	movi	r3,-1
  802d64:	10c00526 	beq	r2,r3,802d7c <_lseek_r+0x50>
  802d68:	dfc00217 	ldw	ra,8(sp)
  802d6c:	dc400117 	ldw	r17,4(sp)
  802d70:	dc000017 	ldw	r16,0(sp)
  802d74:	dec00304 	addi	sp,sp,12
  802d78:	f800283a 	ret
  802d7c:	80c00017 	ldw	r3,0(r16)
  802d80:	183ff926 	beq	r3,zero,802d68 <__alt_data_end+0xff802d68>
  802d84:	88c00015 	stw	r3,0(r17)
  802d88:	003ff706 	br	802d68 <__alt_data_end+0xff802d68>

00802d8c <__smakebuf_r>:
  802d8c:	2880030b 	ldhu	r2,12(r5)
  802d90:	10c0008c 	andi	r3,r2,2
  802d94:	1800411e 	bne	r3,zero,802e9c <__smakebuf_r+0x110>
  802d98:	deffec04 	addi	sp,sp,-80
  802d9c:	dc000f15 	stw	r16,60(sp)
  802da0:	2821883a 	mov	r16,r5
  802da4:	2940038f 	ldh	r5,14(r5)
  802da8:	dc401015 	stw	r17,64(sp)
  802dac:	dfc01315 	stw	ra,76(sp)
  802db0:	dcc01215 	stw	r19,72(sp)
  802db4:	dc801115 	stw	r18,68(sp)
  802db8:	2023883a 	mov	r17,r4
  802dbc:	28001c16 	blt	r5,zero,802e30 <__smakebuf_r+0xa4>
  802dc0:	d80d883a 	mov	r6,sp
  802dc4:	0802fa80 	call	802fa8 <_fstat_r>
  802dc8:	10001816 	blt	r2,zero,802e2c <__smakebuf_r+0xa0>
  802dcc:	d8800117 	ldw	r2,4(sp)
  802dd0:	00e00014 	movui	r3,32768
  802dd4:	10bc000c 	andi	r2,r2,61440
  802dd8:	14c80020 	cmpeqi	r19,r2,8192
  802ddc:	10c03726 	beq	r2,r3,802ebc <__smakebuf_r+0x130>
  802de0:	80c0030b 	ldhu	r3,12(r16)
  802de4:	18c20014 	ori	r3,r3,2048
  802de8:	80c0030d 	sth	r3,12(r16)
  802dec:	00c80004 	movi	r3,8192
  802df0:	10c0521e 	bne	r2,r3,802f3c <__smakebuf_r+0x1b0>
  802df4:	8140038f 	ldh	r5,14(r16)
  802df8:	8809883a 	mov	r4,r17
  802dfc:	08030040 	call	803004 <_isatty_r>
  802e00:	10004c26 	beq	r2,zero,802f34 <__smakebuf_r+0x1a8>
  802e04:	8080030b 	ldhu	r2,12(r16)
  802e08:	80c010c4 	addi	r3,r16,67
  802e0c:	80c00015 	stw	r3,0(r16)
  802e10:	10800054 	ori	r2,r2,1
  802e14:	8080030d 	sth	r2,12(r16)
  802e18:	00800044 	movi	r2,1
  802e1c:	80c00415 	stw	r3,16(r16)
  802e20:	80800515 	stw	r2,20(r16)
  802e24:	04810004 	movi	r18,1024
  802e28:	00000706 	br	802e48 <__smakebuf_r+0xbc>
  802e2c:	8080030b 	ldhu	r2,12(r16)
  802e30:	10c0200c 	andi	r3,r2,128
  802e34:	18001f1e 	bne	r3,zero,802eb4 <__smakebuf_r+0x128>
  802e38:	04810004 	movi	r18,1024
  802e3c:	10820014 	ori	r2,r2,2048
  802e40:	8080030d 	sth	r2,12(r16)
  802e44:	0027883a 	mov	r19,zero
  802e48:	900b883a 	mov	r5,r18
  802e4c:	8809883a 	mov	r4,r17
  802e50:	0800f940 	call	800f94 <_malloc_r>
  802e54:	10002c26 	beq	r2,zero,802f08 <__smakebuf_r+0x17c>
  802e58:	80c0030b 	ldhu	r3,12(r16)
  802e5c:	01002034 	movhi	r4,128
  802e60:	21016704 	addi	r4,r4,1436
  802e64:	89000f15 	stw	r4,60(r17)
  802e68:	18c02014 	ori	r3,r3,128
  802e6c:	80c0030d 	sth	r3,12(r16)
  802e70:	80800015 	stw	r2,0(r16)
  802e74:	80800415 	stw	r2,16(r16)
  802e78:	84800515 	stw	r18,20(r16)
  802e7c:	98001a1e 	bne	r19,zero,802ee8 <__smakebuf_r+0x15c>
  802e80:	dfc01317 	ldw	ra,76(sp)
  802e84:	dcc01217 	ldw	r19,72(sp)
  802e88:	dc801117 	ldw	r18,68(sp)
  802e8c:	dc401017 	ldw	r17,64(sp)
  802e90:	dc000f17 	ldw	r16,60(sp)
  802e94:	dec01404 	addi	sp,sp,80
  802e98:	f800283a 	ret
  802e9c:	288010c4 	addi	r2,r5,67
  802ea0:	28800015 	stw	r2,0(r5)
  802ea4:	28800415 	stw	r2,16(r5)
  802ea8:	00800044 	movi	r2,1
  802eac:	28800515 	stw	r2,20(r5)
  802eb0:	f800283a 	ret
  802eb4:	04801004 	movi	r18,64
  802eb8:	003fe006 	br	802e3c <__alt_data_end+0xff802e3c>
  802ebc:	81000a17 	ldw	r4,40(r16)
  802ec0:	00c02034 	movhi	r3,128
  802ec4:	18c8b804 	addi	r3,r3,8928
  802ec8:	20ffc51e 	bne	r4,r3,802de0 <__alt_data_end+0xff802de0>
  802ecc:	8080030b 	ldhu	r2,12(r16)
  802ed0:	04810004 	movi	r18,1024
  802ed4:	84801315 	stw	r18,76(r16)
  802ed8:	1484b03a 	or	r2,r2,r18
  802edc:	8080030d 	sth	r2,12(r16)
  802ee0:	0027883a 	mov	r19,zero
  802ee4:	003fd806 	br	802e48 <__alt_data_end+0xff802e48>
  802ee8:	8140038f 	ldh	r5,14(r16)
  802eec:	8809883a 	mov	r4,r17
  802ef0:	08030040 	call	803004 <_isatty_r>
  802ef4:	103fe226 	beq	r2,zero,802e80 <__alt_data_end+0xff802e80>
  802ef8:	8080030b 	ldhu	r2,12(r16)
  802efc:	10800054 	ori	r2,r2,1
  802f00:	8080030d 	sth	r2,12(r16)
  802f04:	003fde06 	br	802e80 <__alt_data_end+0xff802e80>
  802f08:	8080030b 	ldhu	r2,12(r16)
  802f0c:	10c0800c 	andi	r3,r2,512
  802f10:	183fdb1e 	bne	r3,zero,802e80 <__alt_data_end+0xff802e80>
  802f14:	10800094 	ori	r2,r2,2
  802f18:	80c010c4 	addi	r3,r16,67
  802f1c:	8080030d 	sth	r2,12(r16)
  802f20:	00800044 	movi	r2,1
  802f24:	80c00015 	stw	r3,0(r16)
  802f28:	80c00415 	stw	r3,16(r16)
  802f2c:	80800515 	stw	r2,20(r16)
  802f30:	003fd306 	br	802e80 <__alt_data_end+0xff802e80>
  802f34:	04810004 	movi	r18,1024
  802f38:	003fc306 	br	802e48 <__alt_data_end+0xff802e48>
  802f3c:	0027883a 	mov	r19,zero
  802f40:	04810004 	movi	r18,1024
  802f44:	003fc006 	br	802e48 <__alt_data_end+0xff802e48>

00802f48 <_read_r>:
  802f48:	defffd04 	addi	sp,sp,-12
  802f4c:	2805883a 	mov	r2,r5
  802f50:	dc000015 	stw	r16,0(sp)
  802f54:	04002074 	movhi	r16,129
  802f58:	dc400115 	stw	r17,4(sp)
  802f5c:	300b883a 	mov	r5,r6
  802f60:	84053304 	addi	r16,r16,5324
  802f64:	2023883a 	mov	r17,r4
  802f68:	380d883a 	mov	r6,r7
  802f6c:	1009883a 	mov	r4,r2
  802f70:	dfc00215 	stw	ra,8(sp)
  802f74:	80000015 	stw	zero,0(r16)
  802f78:	080384c0 	call	80384c <read>
  802f7c:	00ffffc4 	movi	r3,-1
  802f80:	10c00526 	beq	r2,r3,802f98 <_read_r+0x50>
  802f84:	dfc00217 	ldw	ra,8(sp)
  802f88:	dc400117 	ldw	r17,4(sp)
  802f8c:	dc000017 	ldw	r16,0(sp)
  802f90:	dec00304 	addi	sp,sp,12
  802f94:	f800283a 	ret
  802f98:	80c00017 	ldw	r3,0(r16)
  802f9c:	183ff926 	beq	r3,zero,802f84 <__alt_data_end+0xff802f84>
  802fa0:	88c00015 	stw	r3,0(r17)
  802fa4:	003ff706 	br	802f84 <__alt_data_end+0xff802f84>

00802fa8 <_fstat_r>:
  802fa8:	defffd04 	addi	sp,sp,-12
  802fac:	2805883a 	mov	r2,r5
  802fb0:	dc000015 	stw	r16,0(sp)
  802fb4:	04002074 	movhi	r16,129
  802fb8:	dc400115 	stw	r17,4(sp)
  802fbc:	84053304 	addi	r16,r16,5324
  802fc0:	2023883a 	mov	r17,r4
  802fc4:	300b883a 	mov	r5,r6
  802fc8:	1009883a 	mov	r4,r2
  802fcc:	dfc00215 	stw	ra,8(sp)
  802fd0:	80000015 	stw	zero,0(r16)
  802fd4:	08033b00 	call	8033b0 <fstat>
  802fd8:	00ffffc4 	movi	r3,-1
  802fdc:	10c00526 	beq	r2,r3,802ff4 <_fstat_r+0x4c>
  802fe0:	dfc00217 	ldw	ra,8(sp)
  802fe4:	dc400117 	ldw	r17,4(sp)
  802fe8:	dc000017 	ldw	r16,0(sp)
  802fec:	dec00304 	addi	sp,sp,12
  802ff0:	f800283a 	ret
  802ff4:	80c00017 	ldw	r3,0(r16)
  802ff8:	183ff926 	beq	r3,zero,802fe0 <__alt_data_end+0xff802fe0>
  802ffc:	88c00015 	stw	r3,0(r17)
  803000:	003ff706 	br	802fe0 <__alt_data_end+0xff802fe0>

00803004 <_isatty_r>:
  803004:	defffd04 	addi	sp,sp,-12
  803008:	dc000015 	stw	r16,0(sp)
  80300c:	04002074 	movhi	r16,129
  803010:	dc400115 	stw	r17,4(sp)
  803014:	84053304 	addi	r16,r16,5324
  803018:	2023883a 	mov	r17,r4
  80301c:	2809883a 	mov	r4,r5
  803020:	dfc00215 	stw	ra,8(sp)
  803024:	80000015 	stw	zero,0(r16)
  803028:	08034a40 	call	8034a4 <isatty>
  80302c:	00ffffc4 	movi	r3,-1
  803030:	10c00526 	beq	r2,r3,803048 <_isatty_r+0x44>
  803034:	dfc00217 	ldw	ra,8(sp)
  803038:	dc400117 	ldw	r17,4(sp)
  80303c:	dc000017 	ldw	r16,0(sp)
  803040:	dec00304 	addi	sp,sp,12
  803044:	f800283a 	ret
  803048:	80c00017 	ldw	r3,0(r16)
  80304c:	183ff926 	beq	r3,zero,803034 <__alt_data_end+0xff803034>
  803050:	88c00015 	stw	r3,0(r17)
  803054:	003ff706 	br	803034 <__alt_data_end+0xff803034>

00803058 <__divsi3>:
  803058:	20001b16 	blt	r4,zero,8030c8 <__divsi3+0x70>
  80305c:	000f883a 	mov	r7,zero
  803060:	28001616 	blt	r5,zero,8030bc <__divsi3+0x64>
  803064:	200d883a 	mov	r6,r4
  803068:	29001a2e 	bgeu	r5,r4,8030d4 <__divsi3+0x7c>
  80306c:	00800804 	movi	r2,32
  803070:	00c00044 	movi	r3,1
  803074:	00000106 	br	80307c <__divsi3+0x24>
  803078:	10000d26 	beq	r2,zero,8030b0 <__divsi3+0x58>
  80307c:	294b883a 	add	r5,r5,r5
  803080:	10bfffc4 	addi	r2,r2,-1
  803084:	18c7883a 	add	r3,r3,r3
  803088:	293ffb36 	bltu	r5,r4,803078 <__alt_data_end+0xff803078>
  80308c:	0005883a 	mov	r2,zero
  803090:	18000726 	beq	r3,zero,8030b0 <__divsi3+0x58>
  803094:	0005883a 	mov	r2,zero
  803098:	31400236 	bltu	r6,r5,8030a4 <__divsi3+0x4c>
  80309c:	314dc83a 	sub	r6,r6,r5
  8030a0:	10c4b03a 	or	r2,r2,r3
  8030a4:	1806d07a 	srli	r3,r3,1
  8030a8:	280ad07a 	srli	r5,r5,1
  8030ac:	183ffa1e 	bne	r3,zero,803098 <__alt_data_end+0xff803098>
  8030b0:	38000126 	beq	r7,zero,8030b8 <__divsi3+0x60>
  8030b4:	0085c83a 	sub	r2,zero,r2
  8030b8:	f800283a 	ret
  8030bc:	014bc83a 	sub	r5,zero,r5
  8030c0:	39c0005c 	xori	r7,r7,1
  8030c4:	003fe706 	br	803064 <__alt_data_end+0xff803064>
  8030c8:	0109c83a 	sub	r4,zero,r4
  8030cc:	01c00044 	movi	r7,1
  8030d0:	003fe306 	br	803060 <__alt_data_end+0xff803060>
  8030d4:	00c00044 	movi	r3,1
  8030d8:	003fee06 	br	803094 <__alt_data_end+0xff803094>

008030dc <__modsi3>:
  8030dc:	20001716 	blt	r4,zero,80313c <__modsi3+0x60>
  8030e0:	000f883a 	mov	r7,zero
  8030e4:	2005883a 	mov	r2,r4
  8030e8:	28001216 	blt	r5,zero,803134 <__modsi3+0x58>
  8030ec:	2900162e 	bgeu	r5,r4,803148 <__modsi3+0x6c>
  8030f0:	01800804 	movi	r6,32
  8030f4:	00c00044 	movi	r3,1
  8030f8:	00000106 	br	803100 <__modsi3+0x24>
  8030fc:	30000a26 	beq	r6,zero,803128 <__modsi3+0x4c>
  803100:	294b883a 	add	r5,r5,r5
  803104:	31bfffc4 	addi	r6,r6,-1
  803108:	18c7883a 	add	r3,r3,r3
  80310c:	293ffb36 	bltu	r5,r4,8030fc <__alt_data_end+0xff8030fc>
  803110:	18000526 	beq	r3,zero,803128 <__modsi3+0x4c>
  803114:	1806d07a 	srli	r3,r3,1
  803118:	11400136 	bltu	r2,r5,803120 <__modsi3+0x44>
  80311c:	1145c83a 	sub	r2,r2,r5
  803120:	280ad07a 	srli	r5,r5,1
  803124:	183ffb1e 	bne	r3,zero,803114 <__alt_data_end+0xff803114>
  803128:	38000126 	beq	r7,zero,803130 <__modsi3+0x54>
  80312c:	0085c83a 	sub	r2,zero,r2
  803130:	f800283a 	ret
  803134:	014bc83a 	sub	r5,zero,r5
  803138:	003fec06 	br	8030ec <__alt_data_end+0xff8030ec>
  80313c:	0109c83a 	sub	r4,zero,r4
  803140:	01c00044 	movi	r7,1
  803144:	003fe706 	br	8030e4 <__alt_data_end+0xff8030e4>
  803148:	00c00044 	movi	r3,1
  80314c:	003ff106 	br	803114 <__alt_data_end+0xff803114>

00803150 <__udivsi3>:
  803150:	200d883a 	mov	r6,r4
  803154:	2900152e 	bgeu	r5,r4,8031ac <__udivsi3+0x5c>
  803158:	28001416 	blt	r5,zero,8031ac <__udivsi3+0x5c>
  80315c:	00800804 	movi	r2,32
  803160:	00c00044 	movi	r3,1
  803164:	00000206 	br	803170 <__udivsi3+0x20>
  803168:	10000e26 	beq	r2,zero,8031a4 <__udivsi3+0x54>
  80316c:	28000516 	blt	r5,zero,803184 <__udivsi3+0x34>
  803170:	294b883a 	add	r5,r5,r5
  803174:	10bfffc4 	addi	r2,r2,-1
  803178:	18c7883a 	add	r3,r3,r3
  80317c:	293ffa36 	bltu	r5,r4,803168 <__alt_data_end+0xff803168>
  803180:	18000826 	beq	r3,zero,8031a4 <__udivsi3+0x54>
  803184:	0005883a 	mov	r2,zero
  803188:	31400236 	bltu	r6,r5,803194 <__udivsi3+0x44>
  80318c:	314dc83a 	sub	r6,r6,r5
  803190:	10c4b03a 	or	r2,r2,r3
  803194:	1806d07a 	srli	r3,r3,1
  803198:	280ad07a 	srli	r5,r5,1
  80319c:	183ffa1e 	bne	r3,zero,803188 <__alt_data_end+0xff803188>
  8031a0:	f800283a 	ret
  8031a4:	0005883a 	mov	r2,zero
  8031a8:	f800283a 	ret
  8031ac:	00c00044 	movi	r3,1
  8031b0:	003ff406 	br	803184 <__alt_data_end+0xff803184>

008031b4 <__umodsi3>:
  8031b4:	2005883a 	mov	r2,r4
  8031b8:	2900122e 	bgeu	r5,r4,803204 <__umodsi3+0x50>
  8031bc:	28001116 	blt	r5,zero,803204 <__umodsi3+0x50>
  8031c0:	01800804 	movi	r6,32
  8031c4:	00c00044 	movi	r3,1
  8031c8:	00000206 	br	8031d4 <__umodsi3+0x20>
  8031cc:	30000c26 	beq	r6,zero,803200 <__umodsi3+0x4c>
  8031d0:	28000516 	blt	r5,zero,8031e8 <__umodsi3+0x34>
  8031d4:	294b883a 	add	r5,r5,r5
  8031d8:	31bfffc4 	addi	r6,r6,-1
  8031dc:	18c7883a 	add	r3,r3,r3
  8031e0:	293ffa36 	bltu	r5,r4,8031cc <__alt_data_end+0xff8031cc>
  8031e4:	18000626 	beq	r3,zero,803200 <__umodsi3+0x4c>
  8031e8:	1806d07a 	srli	r3,r3,1
  8031ec:	11400136 	bltu	r2,r5,8031f4 <__umodsi3+0x40>
  8031f0:	1145c83a 	sub	r2,r2,r5
  8031f4:	280ad07a 	srli	r5,r5,1
  8031f8:	183ffb1e 	bne	r3,zero,8031e8 <__alt_data_end+0xff8031e8>
  8031fc:	f800283a 	ret
  803200:	f800283a 	ret
  803204:	00c00044 	movi	r3,1
  803208:	003ff706 	br	8031e8 <__alt_data_end+0xff8031e8>

0080320c <__mulsi3>:
  80320c:	0005883a 	mov	r2,zero
  803210:	20000726 	beq	r4,zero,803230 <__mulsi3+0x24>
  803214:	20c0004c 	andi	r3,r4,1
  803218:	2008d07a 	srli	r4,r4,1
  80321c:	18000126 	beq	r3,zero,803224 <__mulsi3+0x18>
  803220:	1145883a 	add	r2,r2,r5
  803224:	294b883a 	add	r5,r5,r5
  803228:	203ffa1e 	bne	r4,zero,803214 <__alt_data_end+0xff803214>
  80322c:	f800283a 	ret
  803230:	f800283a 	ret

00803234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803234:	defffe04 	addi	sp,sp,-8
  803238:	dfc00115 	stw	ra,4(sp)
  80323c:	df000015 	stw	fp,0(sp)
  803240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803244:	d0a00917 	ldw	r2,-32732(gp)
  803248:	10000326 	beq	r2,zero,803258 <alt_get_errno+0x24>
  80324c:	d0a00917 	ldw	r2,-32732(gp)
  803250:	103ee83a 	callr	r2
  803254:	00000106 	br	80325c <alt_get_errno+0x28>
  803258:	d0a6f804 	addi	r2,gp,-25632
}
  80325c:	e037883a 	mov	sp,fp
  803260:	dfc00117 	ldw	ra,4(sp)
  803264:	df000017 	ldw	fp,0(sp)
  803268:	dec00204 	addi	sp,sp,8
  80326c:	f800283a 	ret

00803270 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  803270:	defffb04 	addi	sp,sp,-20
  803274:	dfc00415 	stw	ra,16(sp)
  803278:	df000315 	stw	fp,12(sp)
  80327c:	df000304 	addi	fp,sp,12
  803280:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803284:	e0bfff17 	ldw	r2,-4(fp)
  803288:	10000816 	blt	r2,zero,8032ac <close+0x3c>
  80328c:	01400304 	movi	r5,12
  803290:	e13fff17 	ldw	r4,-4(fp)
  803294:	080320c0 	call	80320c <__mulsi3>
  803298:	1007883a 	mov	r3,r2
  80329c:	00802074 	movhi	r2,129
  8032a0:	10b9b504 	addi	r2,r2,-6444
  8032a4:	1885883a 	add	r2,r3,r2
  8032a8:	00000106 	br	8032b0 <close+0x40>
  8032ac:	0005883a 	mov	r2,zero
  8032b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  8032b4:	e0bffd17 	ldw	r2,-12(fp)
  8032b8:	10001926 	beq	r2,zero,803320 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8032bc:	e0bffd17 	ldw	r2,-12(fp)
  8032c0:	10800017 	ldw	r2,0(r2)
  8032c4:	10800417 	ldw	r2,16(r2)
  8032c8:	10000626 	beq	r2,zero,8032e4 <close+0x74>
  8032cc:	e0bffd17 	ldw	r2,-12(fp)
  8032d0:	10800017 	ldw	r2,0(r2)
  8032d4:	10800417 	ldw	r2,16(r2)
  8032d8:	e13ffd17 	ldw	r4,-12(fp)
  8032dc:	103ee83a 	callr	r2
  8032e0:	00000106 	br	8032e8 <close+0x78>
  8032e4:	0005883a 	mov	r2,zero
  8032e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8032ec:	e13fff17 	ldw	r4,-4(fp)
  8032f0:	08039500 	call	803950 <alt_release_fd>
    if (rval < 0)
  8032f4:	e0bffe17 	ldw	r2,-8(fp)
  8032f8:	1000070e 	bge	r2,zero,803318 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  8032fc:	08032340 	call	803234 <alt_get_errno>
  803300:	1007883a 	mov	r3,r2
  803304:	e0bffe17 	ldw	r2,-8(fp)
  803308:	0085c83a 	sub	r2,zero,r2
  80330c:	18800015 	stw	r2,0(r3)
      return -1;
  803310:	00bfffc4 	movi	r2,-1
  803314:	00000706 	br	803334 <close+0xc4>
    }
    return 0;
  803318:	0005883a 	mov	r2,zero
  80331c:	00000506 	br	803334 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803320:	08032340 	call	803234 <alt_get_errno>
  803324:	1007883a 	mov	r3,r2
  803328:	00801444 	movi	r2,81
  80332c:	18800015 	stw	r2,0(r3)
    return -1;
  803330:	00bfffc4 	movi	r2,-1
  }
}
  803334:	e037883a 	mov	sp,fp
  803338:	dfc00117 	ldw	ra,4(sp)
  80333c:	df000017 	ldw	fp,0(sp)
  803340:	dec00204 	addi	sp,sp,8
  803344:	f800283a 	ret

00803348 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803348:	defffc04 	addi	sp,sp,-16
  80334c:	df000315 	stw	fp,12(sp)
  803350:	df000304 	addi	fp,sp,12
  803354:	e13ffd15 	stw	r4,-12(fp)
  803358:	e17ffe15 	stw	r5,-8(fp)
  80335c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803360:	e0bfff17 	ldw	r2,-4(fp)
}
  803364:	e037883a 	mov	sp,fp
  803368:	df000017 	ldw	fp,0(sp)
  80336c:	dec00104 	addi	sp,sp,4
  803370:	f800283a 	ret

00803374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803374:	defffe04 	addi	sp,sp,-8
  803378:	dfc00115 	stw	ra,4(sp)
  80337c:	df000015 	stw	fp,0(sp)
  803380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803384:	d0a00917 	ldw	r2,-32732(gp)
  803388:	10000326 	beq	r2,zero,803398 <alt_get_errno+0x24>
  80338c:	d0a00917 	ldw	r2,-32732(gp)
  803390:	103ee83a 	callr	r2
  803394:	00000106 	br	80339c <alt_get_errno+0x28>
  803398:	d0a6f804 	addi	r2,gp,-25632
}
  80339c:	e037883a 	mov	sp,fp
  8033a0:	dfc00117 	ldw	ra,4(sp)
  8033a4:	df000017 	ldw	fp,0(sp)
  8033a8:	dec00204 	addi	sp,sp,8
  8033ac:	f800283a 	ret

008033b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8033b0:	defffb04 	addi	sp,sp,-20
  8033b4:	dfc00415 	stw	ra,16(sp)
  8033b8:	df000315 	stw	fp,12(sp)
  8033bc:	df000304 	addi	fp,sp,12
  8033c0:	e13ffe15 	stw	r4,-8(fp)
  8033c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8033c8:	e0bffe17 	ldw	r2,-8(fp)
  8033cc:	10000816 	blt	r2,zero,8033f0 <fstat+0x40>
  8033d0:	01400304 	movi	r5,12
  8033d4:	e13ffe17 	ldw	r4,-8(fp)
  8033d8:	080320c0 	call	80320c <__mulsi3>
  8033dc:	1007883a 	mov	r3,r2
  8033e0:	00802074 	movhi	r2,129
  8033e4:	10b9b504 	addi	r2,r2,-6444
  8033e8:	1885883a 	add	r2,r3,r2
  8033ec:	00000106 	br	8033f4 <fstat+0x44>
  8033f0:	0005883a 	mov	r2,zero
  8033f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8033f8:	e0bffd17 	ldw	r2,-12(fp)
  8033fc:	10001026 	beq	r2,zero,803440 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  803400:	e0bffd17 	ldw	r2,-12(fp)
  803404:	10800017 	ldw	r2,0(r2)
  803408:	10800817 	ldw	r2,32(r2)
  80340c:	10000726 	beq	r2,zero,80342c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  803410:	e0bffd17 	ldw	r2,-12(fp)
  803414:	10800017 	ldw	r2,0(r2)
  803418:	10800817 	ldw	r2,32(r2)
  80341c:	e17fff17 	ldw	r5,-4(fp)
  803420:	e13ffd17 	ldw	r4,-12(fp)
  803424:	103ee83a 	callr	r2
  803428:	00000a06 	br	803454 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80342c:	e0bfff17 	ldw	r2,-4(fp)
  803430:	00c80004 	movi	r3,8192
  803434:	10c00115 	stw	r3,4(r2)
      return 0;
  803438:	0005883a 	mov	r2,zero
  80343c:	00000506 	br	803454 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803440:	08033740 	call	803374 <alt_get_errno>
  803444:	1007883a 	mov	r3,r2
  803448:	00801444 	movi	r2,81
  80344c:	18800015 	stw	r2,0(r3)
    return -1;
  803450:	00bfffc4 	movi	r2,-1
  }
}
  803454:	e037883a 	mov	sp,fp
  803458:	dfc00117 	ldw	ra,4(sp)
  80345c:	df000017 	ldw	fp,0(sp)
  803460:	dec00204 	addi	sp,sp,8
  803464:	f800283a 	ret

00803468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803468:	defffe04 	addi	sp,sp,-8
  80346c:	dfc00115 	stw	ra,4(sp)
  803470:	df000015 	stw	fp,0(sp)
  803474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803478:	d0a00917 	ldw	r2,-32732(gp)
  80347c:	10000326 	beq	r2,zero,80348c <alt_get_errno+0x24>
  803480:	d0a00917 	ldw	r2,-32732(gp)
  803484:	103ee83a 	callr	r2
  803488:	00000106 	br	803490 <alt_get_errno+0x28>
  80348c:	d0a6f804 	addi	r2,gp,-25632
}
  803490:	e037883a 	mov	sp,fp
  803494:	dfc00117 	ldw	ra,4(sp)
  803498:	df000017 	ldw	fp,0(sp)
  80349c:	dec00204 	addi	sp,sp,8
  8034a0:	f800283a 	ret

008034a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8034a4:	deffed04 	addi	sp,sp,-76
  8034a8:	dfc01215 	stw	ra,72(sp)
  8034ac:	df001115 	stw	fp,68(sp)
  8034b0:	df001104 	addi	fp,sp,68
  8034b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8034b8:	e0bfff17 	ldw	r2,-4(fp)
  8034bc:	10000816 	blt	r2,zero,8034e0 <isatty+0x3c>
  8034c0:	01400304 	movi	r5,12
  8034c4:	e13fff17 	ldw	r4,-4(fp)
  8034c8:	080320c0 	call	80320c <__mulsi3>
  8034cc:	1007883a 	mov	r3,r2
  8034d0:	00802074 	movhi	r2,129
  8034d4:	10b9b504 	addi	r2,r2,-6444
  8034d8:	1885883a 	add	r2,r3,r2
  8034dc:	00000106 	br	8034e4 <isatty+0x40>
  8034e0:	0005883a 	mov	r2,zero
  8034e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8034e8:	e0bfef17 	ldw	r2,-68(fp)
  8034ec:	10000e26 	beq	r2,zero,803528 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8034f0:	e0bfef17 	ldw	r2,-68(fp)
  8034f4:	10800017 	ldw	r2,0(r2)
  8034f8:	10800817 	ldw	r2,32(r2)
  8034fc:	1000021e 	bne	r2,zero,803508 <isatty+0x64>
    {
      return 1;
  803500:	00800044 	movi	r2,1
  803504:	00000d06 	br	80353c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803508:	e0bff004 	addi	r2,fp,-64
  80350c:	100b883a 	mov	r5,r2
  803510:	e13fff17 	ldw	r4,-4(fp)
  803514:	08033b00 	call	8033b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  803518:	e0bff117 	ldw	r2,-60(fp)
  80351c:	10880020 	cmpeqi	r2,r2,8192
  803520:	10803fcc 	andi	r2,r2,255
  803524:	00000506 	br	80353c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  803528:	08034680 	call	803468 <alt_get_errno>
  80352c:	1007883a 	mov	r3,r2
  803530:	00801444 	movi	r2,81
  803534:	18800015 	stw	r2,0(r3)
    return 0;
  803538:	0005883a 	mov	r2,zero
  }
}
  80353c:	e037883a 	mov	sp,fp
  803540:	dfc00117 	ldw	ra,4(sp)
  803544:	df000017 	ldw	fp,0(sp)
  803548:	dec00204 	addi	sp,sp,8
  80354c:	f800283a 	ret

00803550 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  803550:	defffc04 	addi	sp,sp,-16
  803554:	df000315 	stw	fp,12(sp)
  803558:	df000304 	addi	fp,sp,12
  80355c:	e13ffd15 	stw	r4,-12(fp)
  803560:	e17ffe15 	stw	r5,-8(fp)
  803564:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  803568:	e0fffe17 	ldw	r3,-8(fp)
  80356c:	e0bffd17 	ldw	r2,-12(fp)
  803570:	18800c26 	beq	r3,r2,8035a4 <alt_load_section+0x54>
  {
    while( to != end )
  803574:	00000806 	br	803598 <alt_load_section+0x48>
    {
      *to++ = *from++;
  803578:	e0bffe17 	ldw	r2,-8(fp)
  80357c:	10c00104 	addi	r3,r2,4
  803580:	e0fffe15 	stw	r3,-8(fp)
  803584:	e0fffd17 	ldw	r3,-12(fp)
  803588:	19000104 	addi	r4,r3,4
  80358c:	e13ffd15 	stw	r4,-12(fp)
  803590:	18c00017 	ldw	r3,0(r3)
  803594:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  803598:	e0fffe17 	ldw	r3,-8(fp)
  80359c:	e0bfff17 	ldw	r2,-4(fp)
  8035a0:	18bff51e 	bne	r3,r2,803578 <__alt_data_end+0xff803578>
    {
      *to++ = *from++;
    }
  }
}
  8035a4:	0001883a 	nop
  8035a8:	e037883a 	mov	sp,fp
  8035ac:	df000017 	ldw	fp,0(sp)
  8035b0:	dec00104 	addi	sp,sp,4
  8035b4:	f800283a 	ret

008035b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8035b8:	defffe04 	addi	sp,sp,-8
  8035bc:	dfc00115 	stw	ra,4(sp)
  8035c0:	df000015 	stw	fp,0(sp)
  8035c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8035c8:	01802074 	movhi	r6,129
  8035cc:	31be6804 	addi	r6,r6,-1632
  8035d0:	01402074 	movhi	r5,129
  8035d4:	2977a004 	addi	r5,r5,-8576
  8035d8:	01002074 	movhi	r4,129
  8035dc:	213e6804 	addi	r4,r4,-1632
  8035e0:	08035500 	call	803550 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8035e4:	01802034 	movhi	r6,128
  8035e8:	31808d04 	addi	r6,r6,564
  8035ec:	01402034 	movhi	r5,128
  8035f0:	29400804 	addi	r5,r5,32
  8035f4:	01002034 	movhi	r4,128
  8035f8:	21000804 	addi	r4,r4,32
  8035fc:	08035500 	call	803550 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  803600:	01802074 	movhi	r6,129
  803604:	31b7a004 	addi	r6,r6,-8576
  803608:	01402074 	movhi	r5,129
  80360c:	29768104 	addi	r5,r5,-9724
  803610:	01002074 	movhi	r4,129
  803614:	21368104 	addi	r4,r4,-9724
  803618:	08035500 	call	803550 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80361c:	080c6e40 	call	80c6e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  803620:	080c8a40 	call	80c8a4 <alt_icache_flush_all>
}
  803624:	0001883a 	nop
  803628:	e037883a 	mov	sp,fp
  80362c:	dfc00117 	ldw	ra,4(sp)
  803630:	df000017 	ldw	fp,0(sp)
  803634:	dec00204 	addi	sp,sp,8
  803638:	f800283a 	ret

0080363c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80363c:	defffe04 	addi	sp,sp,-8
  803640:	dfc00115 	stw	ra,4(sp)
  803644:	df000015 	stw	fp,0(sp)
  803648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80364c:	d0a00917 	ldw	r2,-32732(gp)
  803650:	10000326 	beq	r2,zero,803660 <alt_get_errno+0x24>
  803654:	d0a00917 	ldw	r2,-32732(gp)
  803658:	103ee83a 	callr	r2
  80365c:	00000106 	br	803664 <alt_get_errno+0x28>
  803660:	d0a6f804 	addi	r2,gp,-25632
}
  803664:	e037883a 	mov	sp,fp
  803668:	dfc00117 	ldw	ra,4(sp)
  80366c:	df000017 	ldw	fp,0(sp)
  803670:	dec00204 	addi	sp,sp,8
  803674:	f800283a 	ret

00803678 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803678:	defff904 	addi	sp,sp,-28
  80367c:	dfc00615 	stw	ra,24(sp)
  803680:	df000515 	stw	fp,20(sp)
  803684:	df000504 	addi	fp,sp,20
  803688:	e13ffd15 	stw	r4,-12(fp)
  80368c:	e17ffe15 	stw	r5,-8(fp)
  803690:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803694:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803698:	e0bffd17 	ldw	r2,-12(fp)
  80369c:	10000816 	blt	r2,zero,8036c0 <lseek+0x48>
  8036a0:	01400304 	movi	r5,12
  8036a4:	e13ffd17 	ldw	r4,-12(fp)
  8036a8:	080320c0 	call	80320c <__mulsi3>
  8036ac:	1007883a 	mov	r3,r2
  8036b0:	00802074 	movhi	r2,129
  8036b4:	10b9b504 	addi	r2,r2,-6444
  8036b8:	1885883a 	add	r2,r3,r2
  8036bc:	00000106 	br	8036c4 <lseek+0x4c>
  8036c0:	0005883a 	mov	r2,zero
  8036c4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8036c8:	e0bffc17 	ldw	r2,-16(fp)
  8036cc:	10001026 	beq	r2,zero,803710 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8036d0:	e0bffc17 	ldw	r2,-16(fp)
  8036d4:	10800017 	ldw	r2,0(r2)
  8036d8:	10800717 	ldw	r2,28(r2)
  8036dc:	10000926 	beq	r2,zero,803704 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8036e0:	e0bffc17 	ldw	r2,-16(fp)
  8036e4:	10800017 	ldw	r2,0(r2)
  8036e8:	10800717 	ldw	r2,28(r2)
  8036ec:	e1bfff17 	ldw	r6,-4(fp)
  8036f0:	e17ffe17 	ldw	r5,-8(fp)
  8036f4:	e13ffc17 	ldw	r4,-16(fp)
  8036f8:	103ee83a 	callr	r2
  8036fc:	e0bffb15 	stw	r2,-20(fp)
  803700:	00000506 	br	803718 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803704:	00bfde84 	movi	r2,-134
  803708:	e0bffb15 	stw	r2,-20(fp)
  80370c:	00000206 	br	803718 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  803710:	00bfebc4 	movi	r2,-81
  803714:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  803718:	e0bffb17 	ldw	r2,-20(fp)
  80371c:	1000070e 	bge	r2,zero,80373c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  803720:	080363c0 	call	80363c <alt_get_errno>
  803724:	1007883a 	mov	r3,r2
  803728:	e0bffb17 	ldw	r2,-20(fp)
  80372c:	0085c83a 	sub	r2,zero,r2
  803730:	18800015 	stw	r2,0(r3)
    rc = -1;
  803734:	00bfffc4 	movi	r2,-1
  803738:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80373c:	e0bffb17 	ldw	r2,-20(fp)
}
  803740:	e037883a 	mov	sp,fp
  803744:	dfc00117 	ldw	ra,4(sp)
  803748:	df000017 	ldw	fp,0(sp)
  80374c:	dec00204 	addi	sp,sp,8
  803750:	f800283a 	ret

00803754 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803754:	defff904 	addi	sp,sp,-28
  803758:	dfc00615 	stw	ra,24(sp)
  80375c:	df000515 	stw	fp,20(sp)
  803760:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803764:	0009883a 	mov	r4,zero
  803768:	080b6fc0 	call	80b6fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80376c:	08047400 	call	804740 <OSInit>
  803770:	01000044 	movi	r4,1
  803774:	080909c0 	call	80909c <OSSemCreate>
  803778:	d0a6fe15 	stw	r2,-25608(gp)
  80377c:	01000044 	movi	r4,1
  803780:	080909c0 	call	80909c <OSSemCreate>
  803784:	d0a70015 	stw	r2,-25600(gp)
  803788:	d0a6f904 	addi	r2,gp,-25628
  80378c:	e0bffc15 	stw	r2,-16(fp)
  803790:	00800044 	movi	r2,1
  803794:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  803798:	e0bffd0b 	ldhu	r2,-12(fp)
  80379c:	1009883a 	mov	r4,r2
  8037a0:	080909c0 	call	80909c <OSSemCreate>
  8037a4:	1007883a 	mov	r3,r2
  8037a8:	e0bffc17 	ldw	r2,-16(fp)
  8037ac:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8037b0:	080b7340 	call	80b734 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8037b4:	01802074 	movhi	r6,129
  8037b8:	31b74904 	addi	r6,r6,-8924
  8037bc:	01402074 	movhi	r5,129
  8037c0:	29774904 	addi	r5,r5,-8924
  8037c4:	01002074 	movhi	r4,129
  8037c8:	21374904 	addi	r4,r4,-8924
  8037cc:	080c9a80 	call	80c9a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8037d0:	080c7e40 	call	80c7e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8037d4:	01002074 	movhi	r4,129
  8037d8:	21321104 	addi	r4,r4,-14268
  8037dc:	080d6700 	call	80d670 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8037e0:	d0a6fa17 	ldw	r2,-25624(gp)
  8037e4:	d0e6fb17 	ldw	r3,-25620(gp)
  8037e8:	d126fc17 	ldw	r4,-25616(gp)
  8037ec:	200d883a 	mov	r6,r4
  8037f0:	180b883a 	mov	r5,r3
  8037f4:	1009883a 	mov	r4,r2
  8037f8:	08002e00 	call	8002e0 <main>
  8037fc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  803800:	01000044 	movi	r4,1
  803804:	08032700 	call	803270 <close>
  exit (result);
  803808:	e13ffb17 	ldw	r4,-20(fp)
  80380c:	080d6840 	call	80d684 <exit>

00803810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803810:	defffe04 	addi	sp,sp,-8
  803814:	dfc00115 	stw	ra,4(sp)
  803818:	df000015 	stw	fp,0(sp)
  80381c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803820:	d0a00917 	ldw	r2,-32732(gp)
  803824:	10000326 	beq	r2,zero,803834 <alt_get_errno+0x24>
  803828:	d0a00917 	ldw	r2,-32732(gp)
  80382c:	103ee83a 	callr	r2
  803830:	00000106 	br	803838 <alt_get_errno+0x28>
  803834:	d0a6f804 	addi	r2,gp,-25632
}
  803838:	e037883a 	mov	sp,fp
  80383c:	dfc00117 	ldw	ra,4(sp)
  803840:	df000017 	ldw	fp,0(sp)
  803844:	dec00204 	addi	sp,sp,8
  803848:	f800283a 	ret

0080384c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80384c:	defff904 	addi	sp,sp,-28
  803850:	dfc00615 	stw	ra,24(sp)
  803854:	df000515 	stw	fp,20(sp)
  803858:	df000504 	addi	fp,sp,20
  80385c:	e13ffd15 	stw	r4,-12(fp)
  803860:	e17ffe15 	stw	r5,-8(fp)
  803864:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803868:	e0bffd17 	ldw	r2,-12(fp)
  80386c:	10000816 	blt	r2,zero,803890 <read+0x44>
  803870:	01400304 	movi	r5,12
  803874:	e13ffd17 	ldw	r4,-12(fp)
  803878:	080320c0 	call	80320c <__mulsi3>
  80387c:	1007883a 	mov	r3,r2
  803880:	00802074 	movhi	r2,129
  803884:	10b9b504 	addi	r2,r2,-6444
  803888:	1885883a 	add	r2,r3,r2
  80388c:	00000106 	br	803894 <read+0x48>
  803890:	0005883a 	mov	r2,zero
  803894:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  803898:	e0bffb17 	ldw	r2,-20(fp)
  80389c:	10002226 	beq	r2,zero,803928 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8038a0:	e0bffb17 	ldw	r2,-20(fp)
  8038a4:	10800217 	ldw	r2,8(r2)
  8038a8:	108000cc 	andi	r2,r2,3
  8038ac:	10800060 	cmpeqi	r2,r2,1
  8038b0:	1000181e 	bne	r2,zero,803914 <read+0xc8>
        (fd->dev->read))
  8038b4:	e0bffb17 	ldw	r2,-20(fp)
  8038b8:	10800017 	ldw	r2,0(r2)
  8038bc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8038c0:	10001426 	beq	r2,zero,803914 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8038c4:	e0bffb17 	ldw	r2,-20(fp)
  8038c8:	10800017 	ldw	r2,0(r2)
  8038cc:	10800517 	ldw	r2,20(r2)
  8038d0:	e0ffff17 	ldw	r3,-4(fp)
  8038d4:	180d883a 	mov	r6,r3
  8038d8:	e17ffe17 	ldw	r5,-8(fp)
  8038dc:	e13ffb17 	ldw	r4,-20(fp)
  8038e0:	103ee83a 	callr	r2
  8038e4:	e0bffc15 	stw	r2,-16(fp)
  8038e8:	e0bffc17 	ldw	r2,-16(fp)
  8038ec:	1000070e 	bge	r2,zero,80390c <read+0xc0>
        {
          ALT_ERRNO = -rval;
  8038f0:	08038100 	call	803810 <alt_get_errno>
  8038f4:	1007883a 	mov	r3,r2
  8038f8:	e0bffc17 	ldw	r2,-16(fp)
  8038fc:	0085c83a 	sub	r2,zero,r2
  803900:	18800015 	stw	r2,0(r3)
          return -1;
  803904:	00bfffc4 	movi	r2,-1
  803908:	00000c06 	br	80393c <read+0xf0>
        }
        return rval;
  80390c:	e0bffc17 	ldw	r2,-16(fp)
  803910:	00000a06 	br	80393c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  803914:	08038100 	call	803810 <alt_get_errno>
  803918:	1007883a 	mov	r3,r2
  80391c:	00800344 	movi	r2,13
  803920:	18800015 	stw	r2,0(r3)
  803924:	00000406 	br	803938 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  803928:	08038100 	call	803810 <alt_get_errno>
  80392c:	1007883a 	mov	r3,r2
  803930:	00801444 	movi	r2,81
  803934:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803938:	00bfffc4 	movi	r2,-1
}
  80393c:	e037883a 	mov	sp,fp
  803940:	dfc00117 	ldw	ra,4(sp)
  803944:	df000017 	ldw	fp,0(sp)
  803948:	dec00204 	addi	sp,sp,8
  80394c:	f800283a 	ret

00803950 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803950:	defffc04 	addi	sp,sp,-16
  803954:	dfc00315 	stw	ra,12(sp)
  803958:	df000215 	stw	fp,8(sp)
  80395c:	dc000115 	stw	r16,4(sp)
  803960:	df000204 	addi	fp,sp,8
  803964:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  803968:	e0bffe17 	ldw	r2,-8(fp)
  80396c:	108000d0 	cmplti	r2,r2,3
  803970:	1000111e 	bne	r2,zero,8039b8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  803974:	04002074 	movhi	r16,129
  803978:	8439b504 	addi	r16,r16,-6444
  80397c:	e0bffe17 	ldw	r2,-8(fp)
  803980:	01400304 	movi	r5,12
  803984:	1009883a 	mov	r4,r2
  803988:	080320c0 	call	80320c <__mulsi3>
  80398c:	8085883a 	add	r2,r16,r2
  803990:	10800204 	addi	r2,r2,8
  803994:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803998:	04002074 	movhi	r16,129
  80399c:	8439b504 	addi	r16,r16,-6444
  8039a0:	e0bffe17 	ldw	r2,-8(fp)
  8039a4:	01400304 	movi	r5,12
  8039a8:	1009883a 	mov	r4,r2
  8039ac:	080320c0 	call	80320c <__mulsi3>
  8039b0:	8085883a 	add	r2,r16,r2
  8039b4:	10000015 	stw	zero,0(r2)
  }
}
  8039b8:	0001883a 	nop
  8039bc:	e6ffff04 	addi	sp,fp,-4
  8039c0:	dfc00217 	ldw	ra,8(sp)
  8039c4:	df000117 	ldw	fp,4(sp)
  8039c8:	dc000017 	ldw	r16,0(sp)
  8039cc:	dec00304 	addi	sp,sp,12
  8039d0:	f800283a 	ret

008039d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8039d4:	defff904 	addi	sp,sp,-28
  8039d8:	df000615 	stw	fp,24(sp)
  8039dc:	df000604 	addi	fp,sp,24
  8039e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8039e4:	0005303a 	rdctl	r2,status
  8039e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8039ec:	e0fffe17 	ldw	r3,-8(fp)
  8039f0:	00bfff84 	movi	r2,-2
  8039f4:	1884703a 	and	r2,r3,r2
  8039f8:	1001703a 	wrctl	status,r2
  
  return context;
  8039fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803a00:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803a04:	d0a00a17 	ldw	r2,-32728(gp)
  803a08:	10c000c4 	addi	r3,r2,3
  803a0c:	00bfff04 	movi	r2,-4
  803a10:	1884703a 	and	r2,r3,r2
  803a14:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  803a18:	d0e00a17 	ldw	r3,-32728(gp)
  803a1c:	e0bfff17 	ldw	r2,-4(fp)
  803a20:	1887883a 	add	r3,r3,r2
  803a24:	00804034 	movhi	r2,256
  803a28:	10800004 	addi	r2,r2,0
  803a2c:	10c0062e 	bgeu	r2,r3,803a48 <sbrk+0x74>
  803a30:	e0bffb17 	ldw	r2,-20(fp)
  803a34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803a38:	e0bffa17 	ldw	r2,-24(fp)
  803a3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803a40:	00bfffc4 	movi	r2,-1
  803a44:	00000b06 	br	803a74 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  803a48:	d0a00a17 	ldw	r2,-32728(gp)
  803a4c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  803a50:	d0e00a17 	ldw	r3,-32728(gp)
  803a54:	e0bfff17 	ldw	r2,-4(fp)
  803a58:	1885883a 	add	r2,r3,r2
  803a5c:	d0a00a15 	stw	r2,-32728(gp)
  803a60:	e0bffb17 	ldw	r2,-20(fp)
  803a64:	e0bffc15 	stw	r2,-16(fp)
  803a68:	e0bffc17 	ldw	r2,-16(fp)
  803a6c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  803a70:	e0bffd17 	ldw	r2,-12(fp)
} 
  803a74:	e037883a 	mov	sp,fp
  803a78:	df000017 	ldw	fp,0(sp)
  803a7c:	dec00104 	addi	sp,sp,4
  803a80:	f800283a 	ret

00803a84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803a84:	defffe04 	addi	sp,sp,-8
  803a88:	dfc00115 	stw	ra,4(sp)
  803a8c:	df000015 	stw	fp,0(sp)
  803a90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803a94:	d0a00917 	ldw	r2,-32732(gp)
  803a98:	10000326 	beq	r2,zero,803aa8 <alt_get_errno+0x24>
  803a9c:	d0a00917 	ldw	r2,-32732(gp)
  803aa0:	103ee83a 	callr	r2
  803aa4:	00000106 	br	803aac <alt_get_errno+0x28>
  803aa8:	d0a6f804 	addi	r2,gp,-25632
}
  803aac:	e037883a 	mov	sp,fp
  803ab0:	dfc00117 	ldw	ra,4(sp)
  803ab4:	df000017 	ldw	fp,0(sp)
  803ab8:	dec00204 	addi	sp,sp,8
  803abc:	f800283a 	ret

00803ac0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803ac0:	defff904 	addi	sp,sp,-28
  803ac4:	dfc00615 	stw	ra,24(sp)
  803ac8:	df000515 	stw	fp,20(sp)
  803acc:	df000504 	addi	fp,sp,20
  803ad0:	e13ffd15 	stw	r4,-12(fp)
  803ad4:	e17ffe15 	stw	r5,-8(fp)
  803ad8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803adc:	e0bffd17 	ldw	r2,-12(fp)
  803ae0:	10000816 	blt	r2,zero,803b04 <write+0x44>
  803ae4:	01400304 	movi	r5,12
  803ae8:	e13ffd17 	ldw	r4,-12(fp)
  803aec:	080320c0 	call	80320c <__mulsi3>
  803af0:	1007883a 	mov	r3,r2
  803af4:	00802074 	movhi	r2,129
  803af8:	10b9b504 	addi	r2,r2,-6444
  803afc:	1885883a 	add	r2,r3,r2
  803b00:	00000106 	br	803b08 <write+0x48>
  803b04:	0005883a 	mov	r2,zero
  803b08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  803b0c:	e0bffb17 	ldw	r2,-20(fp)
  803b10:	10002126 	beq	r2,zero,803b98 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803b14:	e0bffb17 	ldw	r2,-20(fp)
  803b18:	10800217 	ldw	r2,8(r2)
  803b1c:	108000cc 	andi	r2,r2,3
  803b20:	10001826 	beq	r2,zero,803b84 <write+0xc4>
  803b24:	e0bffb17 	ldw	r2,-20(fp)
  803b28:	10800017 	ldw	r2,0(r2)
  803b2c:	10800617 	ldw	r2,24(r2)
  803b30:	10001426 	beq	r2,zero,803b84 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803b34:	e0bffb17 	ldw	r2,-20(fp)
  803b38:	10800017 	ldw	r2,0(r2)
  803b3c:	10800617 	ldw	r2,24(r2)
  803b40:	e0ffff17 	ldw	r3,-4(fp)
  803b44:	180d883a 	mov	r6,r3
  803b48:	e17ffe17 	ldw	r5,-8(fp)
  803b4c:	e13ffb17 	ldw	r4,-20(fp)
  803b50:	103ee83a 	callr	r2
  803b54:	e0bffc15 	stw	r2,-16(fp)
  803b58:	e0bffc17 	ldw	r2,-16(fp)
  803b5c:	1000070e 	bge	r2,zero,803b7c <write+0xbc>
      {
        ALT_ERRNO = -rval;
  803b60:	0803a840 	call	803a84 <alt_get_errno>
  803b64:	1007883a 	mov	r3,r2
  803b68:	e0bffc17 	ldw	r2,-16(fp)
  803b6c:	0085c83a 	sub	r2,zero,r2
  803b70:	18800015 	stw	r2,0(r3)
        return -1;
  803b74:	00bfffc4 	movi	r2,-1
  803b78:	00000c06 	br	803bac <write+0xec>
      }
      return rval;
  803b7c:	e0bffc17 	ldw	r2,-16(fp)
  803b80:	00000a06 	br	803bac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  803b84:	0803a840 	call	803a84 <alt_get_errno>
  803b88:	1007883a 	mov	r3,r2
  803b8c:	00800344 	movi	r2,13
  803b90:	18800015 	stw	r2,0(r3)
  803b94:	00000406 	br	803ba8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803b98:	0803a840 	call	803a84 <alt_get_errno>
  803b9c:	1007883a 	mov	r3,r2
  803ba0:	00801444 	movi	r2,81
  803ba4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803ba8:	00bfffc4 	movi	r2,-1
}
  803bac:	e037883a 	mov	sp,fp
  803bb0:	dfc00117 	ldw	ra,4(sp)
  803bb4:	df000017 	ldw	fp,0(sp)
  803bb8:	dec00204 	addi	sp,sp,8
  803bbc:	f800283a 	ret

00803bc0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  803bc0:	deffdf04 	addi	sp,sp,-132
  803bc4:	dfc02015 	stw	ra,128(sp)
  803bc8:	df001f15 	stw	fp,124(sp)
  803bcc:	df001f04 	addi	fp,sp,124
  803bd0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  803bd4:	e0bfe204 	addi	r2,fp,-120
  803bd8:	100b883a 	mov	r5,r2
  803bdc:	01003fc4 	movi	r4,255
  803be0:	080b0240 	call	80b024 <OSTaskQuery>
  803be4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  803be8:	e0bffe83 	ldbu	r2,-6(fp)
  803bec:	10803fcc 	andi	r2,r2,255
  803bf0:	10001e1e 	bne	r2,zero,803c6c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  803bf4:	e0bfee83 	ldbu	r2,-70(fp)
  803bf8:	10803fcc 	andi	r2,r2,255
  803bfc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  803c00:	d0a6fe17 	ldw	r2,-25608(gp)
  803c04:	e0fffd04 	addi	r3,fp,-12
  803c08:	180b883a 	mov	r5,r3
  803c0c:	1009883a 	mov	r4,r2
  803c10:	080983c0 	call	80983c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  803c14:	e0bffe43 	ldbu	r2,-7(fp)
  803c18:	10803fcc 	andi	r2,r2,255
  803c1c:	10000726 	beq	r2,zero,803c3c <__env_lock+0x7c>
  803c20:	d0a00b17 	ldw	r2,-32724(gp)
  803c24:	e0ffe117 	ldw	r3,-124(fp)
  803c28:	1880041e 	bne	r3,r2,803c3c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  803c2c:	d0a6fd17 	ldw	r2,-25612(gp)
  803c30:	10800044 	addi	r2,r2,1
  803c34:	d0a6fd15 	stw	r2,-25612(gp)
  803c38:	00000a06 	br	803c64 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  803c3c:	d0a6fe17 	ldw	r2,-25608(gp)
  803c40:	e0fffe84 	addi	r3,fp,-6
  803c44:	180d883a 	mov	r6,r3
  803c48:	000b883a 	mov	r5,zero
  803c4c:	1009883a 	mov	r4,r2
  803c50:	08093b40 	call	8093b4 <OSSemPend>
    locks  = 1;
  803c54:	00800044 	movi	r2,1
  803c58:	d0a6fd15 	stw	r2,-25612(gp)
    lockid = id;
  803c5c:	e0bfe117 	ldw	r2,-124(fp)
  803c60:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  803c64:	0001883a 	nop
  803c68:	00000106 	br	803c70 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  803c6c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  803c70:	e037883a 	mov	sp,fp
  803c74:	dfc00117 	ldw	ra,4(sp)
  803c78:	df000017 	ldw	fp,0(sp)
  803c7c:	dec00204 	addi	sp,sp,8
  803c80:	f800283a 	ret

00803c84 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  803c84:	defffd04 	addi	sp,sp,-12
  803c88:	dfc00215 	stw	ra,8(sp)
  803c8c:	df000115 	stw	fp,4(sp)
  803c90:	df000104 	addi	fp,sp,4
  803c94:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  803c98:	d0a6fd17 	ldw	r2,-25612(gp)
  803c9c:	10000b26 	beq	r2,zero,803ccc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  803ca0:	d0a6fd17 	ldw	r2,-25612(gp)
  803ca4:	10bfffc4 	addi	r2,r2,-1
  803ca8:	d0a6fd15 	stw	r2,-25612(gp)
  803cac:	d0a6fd17 	ldw	r2,-25612(gp)
  803cb0:	1000071e 	bne	r2,zero,803cd0 <__env_unlock+0x4c>
  {
    lockid = -1;
  803cb4:	00bfffc4 	movi	r2,-1
  803cb8:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
  803cbc:	d0a6fe17 	ldw	r2,-25608(gp)
  803cc0:	1009883a 	mov	r4,r2
  803cc4:	080972c0 	call	80972c <OSSemPost>
  803cc8:	00000106 	br	803cd0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  803ccc:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  803cd0:	e037883a 	mov	sp,fp
  803cd4:	dfc00117 	ldw	ra,4(sp)
  803cd8:	df000017 	ldw	fp,0(sp)
  803cdc:	dec00204 	addi	sp,sp,8
  803ce0:	f800283a 	ret

00803ce4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  803ce4:	deffdb04 	addi	sp,sp,-148
  803ce8:	dfc02415 	stw	ra,144(sp)
  803cec:	df002315 	stw	fp,140(sp)
  803cf0:	df002304 	addi	fp,sp,140
  803cf4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803cf8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  803cfc:	d0a70143 	ldbu	r2,-25595(gp)
  803d00:	10803fcc 	andi	r2,r2,255
  803d04:	10800060 	cmpeqi	r2,r2,1
  803d08:	10003626 	beq	r2,zero,803de4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  803d0c:	e0bfe204 	addi	r2,fp,-120
  803d10:	100b883a 	mov	r5,r2
  803d14:	01003fc4 	movi	r4,255
  803d18:	080b0240 	call	80b024 <OSTaskQuery>
  803d1c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  803d20:	e0bffe83 	ldbu	r2,-6(fp)
  803d24:	10803fcc 	andi	r2,r2,255
  803d28:	1000301e 	bne	r2,zero,803dec <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  803d2c:	e0bfee83 	ldbu	r2,-70(fp)
  803d30:	10803fcc 	andi	r2,r2,255
  803d34:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  803d38:	d0a70017 	ldw	r2,-25600(gp)
  803d3c:	e0fffd04 	addi	r3,fp,-12
  803d40:	180b883a 	mov	r5,r3
  803d44:	1009883a 	mov	r4,r2
  803d48:	080983c0 	call	80983c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803d4c:	0005303a 	rdctl	r2,status
  803d50:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803d54:	e0ffe117 	ldw	r3,-124(fp)
  803d58:	00bfff84 	movi	r2,-2
  803d5c:	1884703a 	and	r2,r3,r2
  803d60:	1001703a 	wrctl	status,r2
  
  return context;
  803d64:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  803d68:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  803d6c:	e0bffd0b 	ldhu	r2,-12(fp)
  803d70:	10bfffcc 	andi	r2,r2,65535
  803d74:	10000b1e 	bne	r2,zero,803da4 <__malloc_lock+0xc0>
  803d78:	d0a00c17 	ldw	r2,-32720(gp)
  803d7c:	e0ffde17 	ldw	r3,-136(fp)
  803d80:	1880081e 	bne	r3,r2,803da4 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  803d84:	d0a6ff17 	ldw	r2,-25604(gp)
  803d88:	10800044 	addi	r2,r2,1
  803d8c:	d0a6ff15 	stw	r2,-25604(gp)
  803d90:	e0bfdd17 	ldw	r2,-140(fp)
  803d94:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803d98:	e0bfdf17 	ldw	r2,-132(fp)
  803d9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  803da0:	00000e06 	br	803ddc <__malloc_lock+0xf8>
  803da4:	e0bfdd17 	ldw	r2,-140(fp)
  803da8:	e0bfe015 	stw	r2,-128(fp)
  803dac:	e0bfe017 	ldw	r2,-128(fp)
  803db0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  803db4:	d0a70017 	ldw	r2,-25600(gp)
  803db8:	e0fffe84 	addi	r3,fp,-6
  803dbc:	180d883a 	mov	r6,r3
  803dc0:	000b883a 	mov	r5,zero
  803dc4:	1009883a 	mov	r4,r2
  803dc8:	08093b40 	call	8093b4 <OSSemPend>
    locks  = 1;
  803dcc:	00800044 	movi	r2,1
  803dd0:	d0a6ff15 	stw	r2,-25604(gp)
    lockid = id;
  803dd4:	e0bfde17 	ldw	r2,-136(fp)
  803dd8:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  803ddc:	0001883a 	nop
  803de0:	00000306 	br	803df0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  803de4:	0001883a 	nop
  803de8:	00000106 	br	803df0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  803dec:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  803df0:	e037883a 	mov	sp,fp
  803df4:	dfc00117 	ldw	ra,4(sp)
  803df8:	df000017 	ldw	fp,0(sp)
  803dfc:	dec00204 	addi	sp,sp,8
  803e00:	f800283a 	ret

00803e04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803e04:	defff804 	addi	sp,sp,-32
  803e08:	dfc00715 	stw	ra,28(sp)
  803e0c:	df000615 	stw	fp,24(sp)
  803e10:	df000604 	addi	fp,sp,24
  803e14:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803e18:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  803e1c:	d0a70143 	ldbu	r2,-25595(gp)
  803e20:	10803fcc 	andi	r2,r2,255
  803e24:	10800060 	cmpeqi	r2,r2,1
  803e28:	10002326 	beq	r2,zero,803eb8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803e2c:	0005303a 	rdctl	r2,status
  803e30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803e34:	e0fffe17 	ldw	r3,-8(fp)
  803e38:	00bfff84 	movi	r2,-2
  803e3c:	1884703a 	and	r2,r3,r2
  803e40:	1001703a 	wrctl	status,r2
  
  return context;
  803e44:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  803e48:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  803e4c:	d0a6ff17 	ldw	r2,-25604(gp)
  803e50:	1000051e 	bne	r2,zero,803e68 <__malloc_unlock+0x64>
  803e54:	e0bffa17 	ldw	r2,-24(fp)
  803e58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803e5c:	e0bffb17 	ldw	r2,-20(fp)
  803e60:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  803e64:	00001506 	br	803ebc <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  803e68:	d0a6ff17 	ldw	r2,-25604(gp)
  803e6c:	10bfffc4 	addi	r2,r2,-1
  803e70:	d0a6ff15 	stw	r2,-25604(gp)
  803e74:	d0a6ff17 	ldw	r2,-25604(gp)
  803e78:	10000a1e 	bne	r2,zero,803ea4 <__malloc_unlock+0xa0>
  {
    lockid = -1;
  803e7c:	00bfffc4 	movi	r2,-1
  803e80:	d0a00c15 	stw	r2,-32720(gp)
  803e84:	e0bffa17 	ldw	r2,-24(fp)
  803e88:	e0bffc15 	stw	r2,-16(fp)
  803e8c:	e0bffc17 	ldw	r2,-16(fp)
  803e90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  803e94:	d0a70017 	ldw	r2,-25600(gp)
  803e98:	1009883a 	mov	r4,r2
  803e9c:	080972c0 	call	80972c <OSSemPost>
  803ea0:	00000606 	br	803ebc <__malloc_unlock+0xb8>
  803ea4:	e0bffa17 	ldw	r2,-24(fp)
  803ea8:	e0bffd15 	stw	r2,-12(fp)
  803eac:	e0bffd17 	ldw	r2,-12(fp)
  803eb0:	1001703a 	wrctl	status,r2
  803eb4:	00000106 	br	803ebc <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  803eb8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  803ebc:	e037883a 	mov	sp,fp
  803ec0:	dfc00117 	ldw	ra,4(sp)
  803ec4:	df000017 	ldw	fp,0(sp)
  803ec8:	dec00204 	addi	sp,sp,8
  803ecc:	f800283a 	ret

00803ed0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  803ed0:	defff704 	addi	sp,sp,-36
  803ed4:	dfc00815 	stw	ra,32(sp)
  803ed8:	df000715 	stw	fp,28(sp)
  803edc:	df000704 	addi	fp,sp,28
  803ee0:	e13ffd15 	stw	r4,-12(fp)
  803ee4:	e17ffe15 	stw	r5,-8(fp)
  803ee8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803eec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  803ef0:	e0bfff17 	ldw	r2,-4(fp)
  803ef4:	1000021e 	bne	r2,zero,803f00 <OSEventNameGet+0x30>
        return (0);
  803ef8:	0005883a 	mov	r2,zero
  803efc:	00003706 	br	803fdc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  803f00:	e0bffd17 	ldw	r2,-12(fp)
  803f04:	1000051e 	bne	r2,zero,803f1c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  803f08:	e0bfff17 	ldw	r2,-4(fp)
  803f0c:	00c00104 	movi	r3,4
  803f10:	10c00005 	stb	r3,0(r2)
        return (0);
  803f14:	0005883a 	mov	r2,zero
  803f18:	00003006 	br	803fdc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  803f1c:	e0bffe17 	ldw	r2,-8(fp)
  803f20:	1000051e 	bne	r2,zero,803f38 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  803f24:	e0bfff17 	ldw	r2,-4(fp)
  803f28:	00c00304 	movi	r3,12
  803f2c:	10c00005 	stb	r3,0(r2)
        return (0);
  803f30:	0005883a 	mov	r2,zero
  803f34:	00002906 	br	803fdc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  803f38:	d0a70f03 	ldbu	r2,-25540(gp)
  803f3c:	10803fcc 	andi	r2,r2,255
  803f40:	10000526 	beq	r2,zero,803f58 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  803f44:	e0bfff17 	ldw	r2,-4(fp)
  803f48:	00c00444 	movi	r3,17
  803f4c:	10c00005 	stb	r3,0(r2)
        return (0);
  803f50:	0005883a 	mov	r2,zero
  803f54:	00002106 	br	803fdc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  803f58:	e0bffd17 	ldw	r2,-12(fp)
  803f5c:	10800003 	ldbu	r2,0(r2)
  803f60:	10803fcc 	andi	r2,r2,255
  803f64:	10bfffc4 	addi	r2,r2,-1
  803f68:	10800128 	cmpgeui	r2,r2,4
  803f6c:	10000526 	beq	r2,zero,803f84 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  803f70:	e0bfff17 	ldw	r2,-4(fp)
  803f74:	00c00044 	movi	r3,1
  803f78:	10c00005 	stb	r3,0(r2)
             return (0);
  803f7c:	0005883a 	mov	r2,zero
  803f80:	00001606 	br	803fdc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  803f84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803f88:	0005303a 	rdctl	r2,status
  803f8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803f90:	e0fffb17 	ldw	r3,-20(fp)
  803f94:	00bfff84 	movi	r2,-2
  803f98:	1884703a 	and	r2,r3,r2
  803f9c:	1001703a 	wrctl	status,r2
  
  return context;
  803fa0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  803fa4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  803fa8:	e0bffd17 	ldw	r2,-12(fp)
  803fac:	10800384 	addi	r2,r2,14
  803fb0:	100b883a 	mov	r5,r2
  803fb4:	e13ffe17 	ldw	r4,-8(fp)
  803fb8:	08059540 	call	805954 <OS_StrCopy>
  803fbc:	e0bffa05 	stb	r2,-24(fp)
  803fc0:	e0bff917 	ldw	r2,-28(fp)
  803fc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803fc8:	e0bffc17 	ldw	r2,-16(fp)
  803fcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803fd0:	e0bfff17 	ldw	r2,-4(fp)
  803fd4:	10000005 	stb	zero,0(r2)
    return (len);
  803fd8:	e0bffa03 	ldbu	r2,-24(fp)
}
  803fdc:	e037883a 	mov	sp,fp
  803fe0:	dfc00117 	ldw	ra,4(sp)
  803fe4:	df000017 	ldw	fp,0(sp)
  803fe8:	dec00204 	addi	sp,sp,8
  803fec:	f800283a 	ret

00803ff0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  803ff0:	defff604 	addi	sp,sp,-40
  803ff4:	dfc00915 	stw	ra,36(sp)
  803ff8:	df000815 	stw	fp,32(sp)
  803ffc:	df000804 	addi	fp,sp,32
  804000:	e13ffd15 	stw	r4,-12(fp)
  804004:	e17ffe15 	stw	r5,-8(fp)
  804008:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80400c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  804010:	e0bfff17 	ldw	r2,-4(fp)
  804014:	10004026 	beq	r2,zero,804118 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  804018:	e0bffd17 	ldw	r2,-12(fp)
  80401c:	1000041e 	bne	r2,zero,804030 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  804020:	e0bfff17 	ldw	r2,-4(fp)
  804024:	00c00104 	movi	r3,4
  804028:	10c00005 	stb	r3,0(r2)
        return;
  80402c:	00003b06 	br	80411c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  804030:	e0bffe17 	ldw	r2,-8(fp)
  804034:	1000041e 	bne	r2,zero,804048 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  804038:	e0bfff17 	ldw	r2,-4(fp)
  80403c:	00c00304 	movi	r3,12
  804040:	10c00005 	stb	r3,0(r2)
        return;
  804044:	00003506 	br	80411c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  804048:	d0a70f03 	ldbu	r2,-25540(gp)
  80404c:	10803fcc 	andi	r2,r2,255
  804050:	10000426 	beq	r2,zero,804064 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  804054:	e0bfff17 	ldw	r2,-4(fp)
  804058:	00c00484 	movi	r3,18
  80405c:	10c00005 	stb	r3,0(r2)
        return;
  804060:	00002e06 	br	80411c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  804064:	e0bffd17 	ldw	r2,-12(fp)
  804068:	10800003 	ldbu	r2,0(r2)
  80406c:	10803fcc 	andi	r2,r2,255
  804070:	10bfffc4 	addi	r2,r2,-1
  804074:	10800128 	cmpgeui	r2,r2,4
  804078:	10000426 	beq	r2,zero,80408c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80407c:	e0bfff17 	ldw	r2,-4(fp)
  804080:	00c00044 	movi	r3,1
  804084:	10c00005 	stb	r3,0(r2)
             return;
  804088:	00002406 	br	80411c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  80408c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804090:	0005303a 	rdctl	r2,status
  804094:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804098:	e0fffc17 	ldw	r3,-16(fp)
  80409c:	00bfff84 	movi	r2,-2
  8040a0:	1884703a 	and	r2,r3,r2
  8040a4:	1001703a 	wrctl	status,r2
  
  return context;
  8040a8:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  8040ac:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  8040b0:	e13ffe17 	ldw	r4,-8(fp)
  8040b4:	08059c80 	call	8059c8 <OS_StrLen>
  8040b8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  8040bc:	e0bffa03 	ldbu	r2,-24(fp)
  8040c0:	10800830 	cmpltui	r2,r2,32
  8040c4:	1000081e 	bne	r2,zero,8040e8 <OSEventNameSet+0xf8>
  8040c8:	e0bff817 	ldw	r2,-32(fp)
  8040cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8040d0:	e0bff917 	ldw	r2,-28(fp)
  8040d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  8040d8:	e0bfff17 	ldw	r2,-4(fp)
  8040dc:	00c002c4 	movi	r3,11
  8040e0:	10c00005 	stb	r3,0(r2)
        return;
  8040e4:	00000d06 	br	80411c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  8040e8:	e0bffd17 	ldw	r2,-12(fp)
  8040ec:	10800384 	addi	r2,r2,14
  8040f0:	e17ffe17 	ldw	r5,-8(fp)
  8040f4:	1009883a 	mov	r4,r2
  8040f8:	08059540 	call	805954 <OS_StrCopy>
  8040fc:	e0bff817 	ldw	r2,-32(fp)
  804100:	e0bffb15 	stw	r2,-20(fp)
  804104:	e0bffb17 	ldw	r2,-20(fp)
  804108:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80410c:	e0bfff17 	ldw	r2,-4(fp)
  804110:	10000005 	stb	zero,0(r2)
  804114:	00000106 	br	80411c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  804118:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  80411c:	e037883a 	mov	sp,fp
  804120:	dfc00117 	ldw	ra,4(sp)
  804124:	df000017 	ldw	fp,0(sp)
  804128:	dec00204 	addi	sp,sp,8
  80412c:	f800283a 	ret

00804130 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  804130:	deffed04 	addi	sp,sp,-76
  804134:	dfc01215 	stw	ra,72(sp)
  804138:	df001115 	stw	fp,68(sp)
  80413c:	df001104 	addi	fp,sp,68
  804140:	e13ffc15 	stw	r4,-16(fp)
  804144:	e17ffd15 	stw	r5,-12(fp)
  804148:	e1bffe15 	stw	r6,-8(fp)
  80414c:	3805883a 	mov	r2,r7
  804150:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  804154:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  804158:	e0800217 	ldw	r2,8(fp)
  80415c:	1000021e 	bne	r2,zero,804168 <OSEventPendMulti+0x38>
        return (0);
  804160:	0005883a 	mov	r2,zero
  804164:	00017106 	br	80472c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  804168:	e0bffc17 	ldw	r2,-16(fp)
  80416c:	1000051e 	bne	r2,zero,804184 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  804170:	e0800217 	ldw	r2,8(fp)
  804174:	00c00104 	movi	r3,4
  804178:	10c00005 	stb	r3,0(r2)
        return (0);
  80417c:	0005883a 	mov	r2,zero
  804180:	00016a06 	br	80472c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  804184:	e0bffd17 	ldw	r2,-12(fp)
  804188:	1000051e 	bne	r2,zero,8041a0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  80418c:	e0800217 	ldw	r2,8(fp)
  804190:	00c00104 	movi	r3,4
  804194:	10c00005 	stb	r3,0(r2)
        return (0);
  804198:	0005883a 	mov	r2,zero
  80419c:	00016306 	br	80472c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  8041a0:	e0bffe17 	ldw	r2,-8(fp)
  8041a4:	1000051e 	bne	r2,zero,8041bc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  8041a8:	e0800217 	ldw	r2,8(fp)
  8041ac:	00c00104 	movi	r3,4
  8041b0:	10c00005 	stb	r3,0(r2)
        return (0);
  8041b4:	0005883a 	mov	r2,zero
  8041b8:	00015c06 	br	80472c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  8041bc:	e0bffd17 	ldw	r2,-12(fp)
  8041c0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  8041c4:	e0bffc17 	ldw	r2,-16(fp)
  8041c8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  8041cc:	e0bfef17 	ldw	r2,-68(fp)
  8041d0:	10800017 	ldw	r2,0(r2)
  8041d4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  8041d8:	00001906 	br	804240 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  8041dc:	e0bff017 	ldw	r2,-64(fp)
  8041e0:	10800003 	ldbu	r2,0(r2)
  8041e4:	10803fcc 	andi	r2,r2,255
  8041e8:	10c000a0 	cmpeqi	r3,r2,2
  8041ec:	1800091e 	bne	r3,zero,804214 <OSEventPendMulti+0xe4>
  8041f0:	10c000e0 	cmpeqi	r3,r2,3
  8041f4:	1800091e 	bne	r3,zero,80421c <OSEventPendMulti+0xec>
  8041f8:	10800060 	cmpeqi	r2,r2,1
  8041fc:	1000091e 	bne	r2,zero,804224 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  804200:	e0800217 	ldw	r2,8(fp)
  804204:	00c00044 	movi	r3,1
  804208:	10c00005 	stb	r3,0(r2)
                 return (0);
  80420c:	0005883a 	mov	r2,zero
  804210:	00014606 	br	80472c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  804214:	0001883a 	nop
  804218:	00000306 	br	804228 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  80421c:	0001883a 	nop
  804220:	00000106 	br	804228 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  804224:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  804228:	e0bfef17 	ldw	r2,-68(fp)
  80422c:	10800104 	addi	r2,r2,4
  804230:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  804234:	e0bfef17 	ldw	r2,-68(fp)
  804238:	10800017 	ldw	r2,0(r2)
  80423c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  804240:	e0bff017 	ldw	r2,-64(fp)
  804244:	103fe51e 	bne	r2,zero,8041dc <__alt_data_end+0xff8041dc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  804248:	d0a70f03 	ldbu	r2,-25540(gp)
  80424c:	10803fcc 	andi	r2,r2,255
  804250:	10000526 	beq	r2,zero,804268 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  804254:	e0800217 	ldw	r2,8(fp)
  804258:	00c00084 	movi	r3,2
  80425c:	10c00005 	stb	r3,0(r2)
        return (0);
  804260:	0005883a 	mov	r2,zero
  804264:	00013106 	br	80472c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  804268:	d0a70103 	ldbu	r2,-25596(gp)
  80426c:	10803fcc 	andi	r2,r2,255
  804270:	10000526 	beq	r2,zero,804288 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  804274:	e0800217 	ldw	r2,8(fp)
  804278:	00c00344 	movi	r3,13
  80427c:	10c00005 	stb	r3,0(r2)
        return (0);
  804280:	0005883a 	mov	r2,zero
  804284:	00012906 	br	80472c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804288:	0005303a 	rdctl	r2,status
  80428c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804290:	e0fffb17 	ldw	r3,-20(fp)
  804294:	00bfff84 	movi	r2,-2
  804298:	1884703a 	and	r2,r3,r2
  80429c:	1001703a 	wrctl	status,r2
  
  return context;
  8042a0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  8042a4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  8042a8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  8042ac:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  8042b0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  8042b4:	e0bffc17 	ldw	r2,-16(fp)
  8042b8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  8042bc:	e0bfef17 	ldw	r2,-68(fp)
  8042c0:	10800017 	ldw	r2,0(r2)
  8042c4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8042c8:	00008106 	br	8044d0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  8042cc:	e0bff017 	ldw	r2,-64(fp)
  8042d0:	10800003 	ldbu	r2,0(r2)
  8042d4:	10803fcc 	andi	r2,r2,255
  8042d8:	10c000a0 	cmpeqi	r3,r2,2
  8042dc:	18003c1e 	bne	r3,zero,8043d0 <OSEventPendMulti+0x2a0>
  8042e0:	10c000e0 	cmpeqi	r3,r2,3
  8042e4:	1800031e 	bne	r3,zero,8042f4 <OSEventPendMulti+0x1c4>
  8042e8:	10800060 	cmpeqi	r2,r2,1
  8042ec:	10001e1e 	bne	r2,zero,804368 <OSEventPendMulti+0x238>
  8042f0:	00006606 	br	80448c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  8042f4:	e0bff017 	ldw	r2,-64(fp)
  8042f8:	1080020b 	ldhu	r2,8(r2)
  8042fc:	10bfffcc 	andi	r2,r2,65535
  804300:	10001526 	beq	r2,zero,804358 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  804304:	e0bff017 	ldw	r2,-64(fp)
  804308:	1080020b 	ldhu	r2,8(r2)
  80430c:	10bfffc4 	addi	r2,r2,-1
  804310:	1007883a 	mov	r3,r2
  804314:	e0bff017 	ldw	r2,-64(fp)
  804318:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80431c:	e0bffd17 	ldw	r2,-12(fp)
  804320:	10c00104 	addi	r3,r2,4
  804324:	e0fffd15 	stw	r3,-12(fp)
  804328:	e0fff017 	ldw	r3,-64(fp)
  80432c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  804330:	00800044 	movi	r2,1
  804334:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  804338:	e0bffe17 	ldw	r2,-8(fp)
  80433c:	10c00104 	addi	r3,r2,4
  804340:	e0fffe15 	stw	r3,-8(fp)
  804344:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  804348:	e0bff18b 	ldhu	r2,-58(fp)
  80434c:	10800044 	addi	r2,r2,1
  804350:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  804354:	00005806 	br	8044b8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  804358:	e0bff203 	ldbu	r2,-56(fp)
  80435c:	10800054 	ori	r2,r2,1
  804360:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  804364:	00005406 	br	8044b8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  804368:	e0bff017 	ldw	r2,-64(fp)
  80436c:	10800117 	ldw	r2,4(r2)
  804370:	10001326 	beq	r2,zero,8043c0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  804374:	e0bffe17 	ldw	r2,-8(fp)
  804378:	10c00104 	addi	r3,r2,4
  80437c:	e0fffe15 	stw	r3,-8(fp)
  804380:	e0fff017 	ldw	r3,-64(fp)
  804384:	18c00117 	ldw	r3,4(r3)
  804388:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  80438c:	e0bff017 	ldw	r2,-64(fp)
  804390:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  804394:	e0bffd17 	ldw	r2,-12(fp)
  804398:	10c00104 	addi	r3,r2,4
  80439c:	e0fffd15 	stw	r3,-12(fp)
  8043a0:	e0fff017 	ldw	r3,-64(fp)
  8043a4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  8043a8:	00800044 	movi	r2,1
  8043ac:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  8043b0:	e0bff18b 	ldhu	r2,-58(fp)
  8043b4:	10800044 	addi	r2,r2,1
  8043b8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  8043bc:	00003e06 	br	8044b8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  8043c0:	e0bff203 	ldbu	r2,-56(fp)
  8043c4:	10800094 	ori	r2,r2,2
  8043c8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  8043cc:	00003a06 	br	8044b8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  8043d0:	e0bff017 	ldw	r2,-64(fp)
  8043d4:	10800117 	ldw	r2,4(r2)
  8043d8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  8043dc:	e0bff517 	ldw	r2,-44(fp)
  8043e0:	1080058b 	ldhu	r2,22(r2)
  8043e4:	10bfffcc 	andi	r2,r2,65535
  8043e8:	10002426 	beq	r2,zero,80447c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  8043ec:	e0bffe17 	ldw	r2,-8(fp)
  8043f0:	10c00104 	addi	r3,r2,4
  8043f4:	e0fffe15 	stw	r3,-8(fp)
  8043f8:	e0fff517 	ldw	r3,-44(fp)
  8043fc:	18c00417 	ldw	r3,16(r3)
  804400:	19400104 	addi	r5,r3,4
  804404:	e13ff517 	ldw	r4,-44(fp)
  804408:	21400415 	stw	r5,16(r4)
  80440c:	18c00017 	ldw	r3,0(r3)
  804410:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  804414:	e0bff517 	ldw	r2,-44(fp)
  804418:	10c00417 	ldw	r3,16(r2)
  80441c:	e0bff517 	ldw	r2,-44(fp)
  804420:	10800217 	ldw	r2,8(r2)
  804424:	1880041e 	bne	r3,r2,804438 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  804428:	e0bff517 	ldw	r2,-44(fp)
  80442c:	10c00117 	ldw	r3,4(r2)
  804430:	e0bff517 	ldw	r2,-44(fp)
  804434:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  804438:	e0bff517 	ldw	r2,-44(fp)
  80443c:	1080058b 	ldhu	r2,22(r2)
  804440:	10bfffc4 	addi	r2,r2,-1
  804444:	1007883a 	mov	r3,r2
  804448:	e0bff517 	ldw	r2,-44(fp)
  80444c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  804450:	e0bffd17 	ldw	r2,-12(fp)
  804454:	10c00104 	addi	r3,r2,4
  804458:	e0fffd15 	stw	r3,-12(fp)
  80445c:	e0fff017 	ldw	r3,-64(fp)
  804460:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  804464:	00800044 	movi	r2,1
  804468:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80446c:	e0bff18b 	ldhu	r2,-58(fp)
  804470:	10800044 	addi	r2,r2,1
  804474:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  804478:	00000f06 	br	8044b8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80447c:	e0bff203 	ldbu	r2,-56(fp)
  804480:	10800114 	ori	r2,r2,4
  804484:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  804488:	00000b06 	br	8044b8 <OSEventPendMulti+0x388>
  80448c:	e0bff317 	ldw	r2,-52(fp)
  804490:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804494:	e0bff417 	ldw	r2,-48(fp)
  804498:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80449c:	e0bffd17 	ldw	r2,-12(fp)
  8044a0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  8044a4:	e0800217 	ldw	r2,8(fp)
  8044a8:	00c00044 	movi	r3,1
  8044ac:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  8044b0:	e0bff18b 	ldhu	r2,-58(fp)
  8044b4:	00009d06 	br	80472c <OSEventPendMulti+0x5fc>
        }
        pevents++;
  8044b8:	e0bfef17 	ldw	r2,-68(fp)
  8044bc:	10800104 	addi	r2,r2,4
  8044c0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  8044c4:	e0bfef17 	ldw	r2,-68(fp)
  8044c8:	10800017 	ldw	r2,0(r2)
  8044cc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  8044d0:	e0bff017 	ldw	r2,-64(fp)
  8044d4:	103f7d1e 	bne	r2,zero,8042cc <__alt_data_end+0xff8042cc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  8044d8:	e0bff103 	ldbu	r2,-60(fp)
  8044dc:	10800058 	cmpnei	r2,r2,1
  8044e0:	10000a1e 	bne	r2,zero,80450c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  8044e4:	e0bffd17 	ldw	r2,-12(fp)
  8044e8:	10000015 	stw	zero,0(r2)
  8044ec:	e0bff317 	ldw	r2,-52(fp)
  8044f0:	e0bff615 	stw	r2,-40(fp)
  8044f4:	e0bff617 	ldw	r2,-40(fp)
  8044f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  8044fc:	e0800217 	ldw	r2,8(fp)
  804500:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  804504:	e0bff18b 	ldhu	r2,-58(fp)
  804508:	00008806 	br	80472c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80450c:	d0a71017 	ldw	r2,-25536(gp)
  804510:	d0e71017 	ldw	r3,-25536(gp)
  804514:	19000c03 	ldbu	r4,48(r3)
  804518:	e0fff203 	ldbu	r3,-56(fp)
  80451c:	20c6b03a 	or	r3,r4,r3
  804520:	1809883a 	mov	r4,r3
  804524:	00ffe004 	movi	r3,-128
  804528:	20c6b03a 	or	r3,r4,r3
  80452c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  804530:	d0a71017 	ldw	r2,-25536(gp)
  804534:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  804538:	d0a71017 	ldw	r2,-25536(gp)
  80453c:	e0ffff0b 	ldhu	r3,-4(fp)
  804540:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  804544:	e13ffc17 	ldw	r4,-16(fp)
  804548:	080506c0 	call	80506c <OS_EventTaskWaitMulti>
  80454c:	e0bff317 	ldw	r2,-52(fp)
  804550:	e0bff915 	stw	r2,-28(fp)
  804554:	e0bff917 	ldw	r2,-28(fp)
  804558:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80455c:	08058100 	call	805810 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804560:	0005303a 	rdctl	r2,status
  804564:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804568:	e0fff717 	ldw	r3,-36(fp)
  80456c:	00bfff84 	movi	r2,-2
  804570:	1884703a 	and	r2,r3,r2
  804574:	1001703a 	wrctl	status,r2
  
  return context;
  804578:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80457c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  804580:	d0a71017 	ldw	r2,-25536(gp)
  804584:	10800c43 	ldbu	r2,49(r2)
  804588:	10803fcc 	andi	r2,r2,255
  80458c:	10000226 	beq	r2,zero,804598 <OSEventPendMulti+0x468>
  804590:	108000a0 	cmpeqi	r2,r2,2
  804594:	10001826 	beq	r2,zero,8045f8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  804598:	d0a71017 	ldw	r2,-25536(gp)
  80459c:	10800717 	ldw	r2,28(r2)
  8045a0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  8045a4:	e0bff017 	ldw	r2,-64(fp)
  8045a8:	10000b26 	beq	r2,zero,8045d8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  8045ac:	e0bffd17 	ldw	r2,-12(fp)
  8045b0:	10c00104 	addi	r3,r2,4
  8045b4:	e0fffd15 	stw	r3,-12(fp)
  8045b8:	e0fff017 	ldw	r3,-64(fp)
  8045bc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  8045c0:	e0bffd17 	ldw	r2,-12(fp)
  8045c4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  8045c8:	e0bff18b 	ldhu	r2,-58(fp)
  8045cc:	10800044 	addi	r2,r2,1
  8045d0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  8045d4:	00000d06 	br	80460c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  8045d8:	d0a71017 	ldw	r2,-25536(gp)
  8045dc:	00c00044 	movi	r3,1
  8045e0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  8045e4:	d0a71017 	ldw	r2,-25536(gp)
  8045e8:	e17ffc17 	ldw	r5,-16(fp)
  8045ec:	1009883a 	mov	r4,r2
  8045f0:	08052740 	call	805274 <OS_EventTaskRemoveMulti>
             }
			 break;
  8045f4:	00000506 	br	80460c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  8045f8:	d0a71017 	ldw	r2,-25536(gp)
  8045fc:	e17ffc17 	ldw	r5,-16(fp)
  804600:	1009883a 	mov	r4,r2
  804604:	08052740 	call	805274 <OS_EventTaskRemoveMulti>
             break;
  804608:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80460c:	d0a71017 	ldw	r2,-25536(gp)
  804610:	10800c43 	ldbu	r2,49(r2)
  804614:	10803fcc 	andi	r2,r2,255
  804618:	10000326 	beq	r2,zero,804628 <OSEventPendMulti+0x4f8>
  80461c:	108000a0 	cmpeqi	r2,r2,2
  804620:	1000231e 	bne	r2,zero,8046b0 <OSEventPendMulti+0x580>
  804624:	00002a06 	br	8046d0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  804628:	e0bff017 	ldw	r2,-64(fp)
  80462c:	10800003 	ldbu	r2,0(r2)
  804630:	10803fcc 	andi	r2,r2,255
  804634:	0080100e 	bge	zero,r2,804678 <OSEventPendMulti+0x548>
  804638:	10c000d0 	cmplti	r3,r2,3
  80463c:	1800071e 	bne	r3,zero,80465c <OSEventPendMulti+0x52c>
  804640:	108000e0 	cmpeqi	r2,r2,3
  804644:	10000c26 	beq	r2,zero,804678 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  804648:	e0bffe17 	ldw	r2,-8(fp)
  80464c:	10c00104 	addi	r3,r2,4
  804650:	e0fffe15 	stw	r3,-8(fp)
  804654:	10000015 	stw	zero,0(r2)
                      break;
  804658:	00001206 	br	8046a4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80465c:	e0bffe17 	ldw	r2,-8(fp)
  804660:	10c00104 	addi	r3,r2,4
  804664:	e0fffe15 	stw	r3,-8(fp)
  804668:	d0e71017 	ldw	r3,-25536(gp)
  80466c:	18c00917 	ldw	r3,36(r3)
  804670:	10c00015 	stw	r3,0(r2)
                      break;
  804674:	00000b06 	br	8046a4 <OSEventPendMulti+0x574>
  804678:	e0bff317 	ldw	r2,-52(fp)
  80467c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804680:	e0bff817 	ldw	r2,-32(fp)
  804684:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  804688:	e0bffd17 	ldw	r2,-12(fp)
  80468c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  804690:	e0800217 	ldw	r2,8(fp)
  804694:	00c00044 	movi	r3,1
  804698:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  80469c:	e0bff18b 	ldhu	r2,-58(fp)
  8046a0:	00002206 	br	80472c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  8046a4:	e0800217 	ldw	r2,8(fp)
  8046a8:	10000005 	stb	zero,0(r2)
             break;
  8046ac:	00001006 	br	8046f0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  8046b0:	e0bffe17 	ldw	r2,-8(fp)
  8046b4:	10c00104 	addi	r3,r2,4
  8046b8:	e0fffe15 	stw	r3,-8(fp)
  8046bc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  8046c0:	e0800217 	ldw	r2,8(fp)
  8046c4:	00c00384 	movi	r3,14
  8046c8:	10c00005 	stb	r3,0(r2)
             break;
  8046cc:	00000806 	br	8046f0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  8046d0:	e0bffe17 	ldw	r2,-8(fp)
  8046d4:	10c00104 	addi	r3,r2,4
  8046d8:	e0fffe15 	stw	r3,-8(fp)
  8046dc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  8046e0:	e0800217 	ldw	r2,8(fp)
  8046e4:	00c00284 	movi	r3,10
  8046e8:	10c00005 	stb	r3,0(r2)
             break;
  8046ec:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  8046f0:	d0a71017 	ldw	r2,-25536(gp)
  8046f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  8046f8:	d0a71017 	ldw	r2,-25536(gp)
  8046fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  804700:	d0a71017 	ldw	r2,-25536(gp)
  804704:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  804708:	d0a71017 	ldw	r2,-25536(gp)
  80470c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  804710:	d0a71017 	ldw	r2,-25536(gp)
  804714:	10000915 	stw	zero,36(r2)
  804718:	e0bff317 	ldw	r2,-52(fp)
  80471c:	e0bffa15 	stw	r2,-24(fp)
  804720:	e0bffa17 	ldw	r2,-24(fp)
  804724:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  804728:	e0bff18b 	ldhu	r2,-58(fp)
}
  80472c:	e037883a 	mov	sp,fp
  804730:	dfc00117 	ldw	ra,4(sp)
  804734:	df000017 	ldw	fp,0(sp)
  804738:	dec00204 	addi	sp,sp,8
  80473c:	f800283a 	ret

00804740 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  804740:	defffe04 	addi	sp,sp,-8
  804744:	dfc00115 	stw	ra,4(sp)
  804748:	df000015 	stw	fp,0(sp)
  80474c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  804750:	080d2c40 	call	80d2c4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  804754:	08054bc0 	call	8054bc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  804758:	08055040 	call	805504 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80475c:	08056700 	call	805670 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  804760:	08053dc0 	call	8053dc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  804764:	08075100 	call	807510 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  804768:	0807e100 	call	807e10 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80476c:	0808f440 	call	808f44 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  804770:	08055700 	call	805570 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  804774:	08055f00 	call	8055f0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  804778:	080d2e40 	call	80d2e4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80477c:	0805ee40 	call	805ee4 <OSDebugInit>
#endif
}
  804780:	0001883a 	nop
  804784:	e037883a 	mov	sp,fp
  804788:	dfc00117 	ldw	ra,4(sp)
  80478c:	df000017 	ldw	fp,0(sp)
  804790:	dec00204 	addi	sp,sp,8
  804794:	f800283a 	ret

00804798 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  804798:	deffff04 	addi	sp,sp,-4
  80479c:	df000015 	stw	fp,0(sp)
  8047a0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  8047a4:	d0a70143 	ldbu	r2,-25595(gp)
  8047a8:	10803fcc 	andi	r2,r2,255
  8047ac:	10800058 	cmpnei	r2,r2,1
  8047b0:	1000071e 	bne	r2,zero,8047d0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  8047b4:	d0a70f03 	ldbu	r2,-25540(gp)
  8047b8:	10803fcc 	andi	r2,r2,255
  8047bc:	10803fe0 	cmpeqi	r2,r2,255
  8047c0:	1000031e 	bne	r2,zero,8047d0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  8047c4:	d0a70f03 	ldbu	r2,-25540(gp)
  8047c8:	10800044 	addi	r2,r2,1
  8047cc:	d0a70f05 	stb	r2,-25540(gp)
        }
    }
}
  8047d0:	0001883a 	nop
  8047d4:	e037883a 	mov	sp,fp
  8047d8:	df000017 	ldw	fp,0(sp)
  8047dc:	dec00104 	addi	sp,sp,4
  8047e0:	f800283a 	ret

008047e4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  8047e4:	defffb04 	addi	sp,sp,-20
  8047e8:	dfc00415 	stw	ra,16(sp)
  8047ec:	df000315 	stw	fp,12(sp)
  8047f0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8047f4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  8047f8:	d0a70143 	ldbu	r2,-25595(gp)
  8047fc:	10803fcc 	andi	r2,r2,255
  804800:	10800058 	cmpnei	r2,r2,1
  804804:	10002f1e 	bne	r2,zero,8048c4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804808:	0005303a 	rdctl	r2,status
  80480c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804810:	e0ffff17 	ldw	r3,-4(fp)
  804814:	00bfff84 	movi	r2,-2
  804818:	1884703a 	and	r2,r3,r2
  80481c:	1001703a 	wrctl	status,r2
  
  return context;
  804820:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  804824:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  804828:	d0a70f03 	ldbu	r2,-25540(gp)
  80482c:	10803fcc 	andi	r2,r2,255
  804830:	10000326 	beq	r2,zero,804840 <OSIntExit+0x5c>
            OSIntNesting--;
  804834:	d0a70f03 	ldbu	r2,-25540(gp)
  804838:	10bfffc4 	addi	r2,r2,-1
  80483c:	d0a70f05 	stb	r2,-25540(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  804840:	d0a70f03 	ldbu	r2,-25540(gp)
  804844:	10803fcc 	andi	r2,r2,255
  804848:	10001a1e 	bne	r2,zero,8048b4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80484c:	d0a70103 	ldbu	r2,-25596(gp)
  804850:	10803fcc 	andi	r2,r2,255
  804854:	1000171e 	bne	r2,zero,8048b4 <OSIntExit+0xd0>
                OS_SchedNew();
  804858:	08058e00 	call	8058e0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80485c:	d0e70303 	ldbu	r3,-25588(gp)
  804860:	d0a70343 	ldbu	r2,-25587(gp)
  804864:	18c03fcc 	andi	r3,r3,255
  804868:	10803fcc 	andi	r2,r2,255
  80486c:	18801126 	beq	r3,r2,8048b4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  804870:	d0a70303 	ldbu	r2,-25588(gp)
  804874:	10c03fcc 	andi	r3,r2,255
  804878:	008020b4 	movhi	r2,130
  80487c:	10a1d204 	addi	r2,r2,-30904
  804880:	18c7883a 	add	r3,r3,r3
  804884:	18c7883a 	add	r3,r3,r3
  804888:	10c5883a 	add	r2,r2,r3
  80488c:	10800017 	ldw	r2,0(r2)
  804890:	d0a70b15 	stw	r2,-25556(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  804894:	d0a70b17 	ldw	r2,-25556(gp)
  804898:	10c00e17 	ldw	r3,56(r2)
  80489c:	18c00044 	addi	r3,r3,1
  8048a0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  8048a4:	d0a70617 	ldw	r2,-25576(gp)
  8048a8:	10800044 	addi	r2,r2,1
  8048ac:	d0a70615 	stw	r2,-25576(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  8048b0:	080cff00 	call	80cff0 <OSCtxSw>
  8048b4:	e0bffd17 	ldw	r2,-12(fp)
  8048b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8048bc:	e0bffe17 	ldw	r2,-8(fp)
  8048c0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  8048c4:	0001883a 	nop
  8048c8:	e037883a 	mov	sp,fp
  8048cc:	dfc00117 	ldw	ra,4(sp)
  8048d0:	df000017 	ldw	fp,0(sp)
  8048d4:	dec00204 	addi	sp,sp,8
  8048d8:	f800283a 	ret

008048dc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  8048dc:	defffc04 	addi	sp,sp,-16
  8048e0:	df000315 	stw	fp,12(sp)
  8048e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8048e8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  8048ec:	d0a70143 	ldbu	r2,-25595(gp)
  8048f0:	10803fcc 	andi	r2,r2,255
  8048f4:	10800058 	cmpnei	r2,r2,1
  8048f8:	1000161e 	bne	r2,zero,804954 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8048fc:	0005303a 	rdctl	r2,status
  804900:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804904:	e0ffff17 	ldw	r3,-4(fp)
  804908:	00bfff84 	movi	r2,-2
  80490c:	1884703a 	and	r2,r3,r2
  804910:	1001703a 	wrctl	status,r2
  
  return context;
  804914:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  804918:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80491c:	d0a70f03 	ldbu	r2,-25540(gp)
  804920:	10803fcc 	andi	r2,r2,255
  804924:	1000071e 	bne	r2,zero,804944 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  804928:	d0a70103 	ldbu	r2,-25596(gp)
  80492c:	10803fcc 	andi	r2,r2,255
  804930:	10803fe0 	cmpeqi	r2,r2,255
  804934:	1000031e 	bne	r2,zero,804944 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  804938:	d0a70103 	ldbu	r2,-25596(gp)
  80493c:	10800044 	addi	r2,r2,1
  804940:	d0a70105 	stb	r2,-25596(gp)
  804944:	e0bffd17 	ldw	r2,-12(fp)
  804948:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80494c:	e0bffe17 	ldw	r2,-8(fp)
  804950:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  804954:	0001883a 	nop
  804958:	e037883a 	mov	sp,fp
  80495c:	df000017 	ldw	fp,0(sp)
  804960:	dec00104 	addi	sp,sp,4
  804964:	f800283a 	ret

00804968 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  804968:	defff804 	addi	sp,sp,-32
  80496c:	dfc00715 	stw	ra,28(sp)
  804970:	df000615 	stw	fp,24(sp)
  804974:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  804978:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80497c:	d0a70143 	ldbu	r2,-25595(gp)
  804980:	10803fcc 	andi	r2,r2,255
  804984:	10800058 	cmpnei	r2,r2,1
  804988:	1000281e 	bne	r2,zero,804a2c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80498c:	0005303a 	rdctl	r2,status
  804990:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804994:	e0ffff17 	ldw	r3,-4(fp)
  804998:	00bfff84 	movi	r2,-2
  80499c:	1884703a 	and	r2,r3,r2
  8049a0:	1001703a 	wrctl	status,r2
  
  return context;
  8049a4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  8049a8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  8049ac:	d0a70103 	ldbu	r2,-25596(gp)
  8049b0:	10803fcc 	andi	r2,r2,255
  8049b4:	10001926 	beq	r2,zero,804a1c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  8049b8:	d0a70103 	ldbu	r2,-25596(gp)
  8049bc:	10bfffc4 	addi	r2,r2,-1
  8049c0:	d0a70105 	stb	r2,-25596(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  8049c4:	d0a70103 	ldbu	r2,-25596(gp)
  8049c8:	10803fcc 	andi	r2,r2,255
  8049cc:	10000e1e 	bne	r2,zero,804a08 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  8049d0:	d0a70f03 	ldbu	r2,-25540(gp)
  8049d4:	10803fcc 	andi	r2,r2,255
  8049d8:	1000061e 	bne	r2,zero,8049f4 <OSSchedUnlock+0x8c>
  8049dc:	e0bffa17 	ldw	r2,-24(fp)
  8049e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8049e4:	e0bffb17 	ldw	r2,-20(fp)
  8049e8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  8049ec:	08058100 	call	805810 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  8049f0:	00000e06 	br	804a2c <OSSchedUnlock+0xc4>
  8049f4:	e0bffa17 	ldw	r2,-24(fp)
  8049f8:	e0bffc15 	stw	r2,-16(fp)
  8049fc:	e0bffc17 	ldw	r2,-16(fp)
  804a00:	1001703a 	wrctl	status,r2
  804a04:	00000906 	br	804a2c <OSSchedUnlock+0xc4>
  804a08:	e0bffa17 	ldw	r2,-24(fp)
  804a0c:	e0bffd15 	stw	r2,-12(fp)
  804a10:	e0bffd17 	ldw	r2,-12(fp)
  804a14:	1001703a 	wrctl	status,r2
  804a18:	00000406 	br	804a2c <OSSchedUnlock+0xc4>
  804a1c:	e0bffa17 	ldw	r2,-24(fp)
  804a20:	e0bffe15 	stw	r2,-8(fp)
  804a24:	e0bffe17 	ldw	r2,-8(fp)
  804a28:	1001703a 	wrctl	status,r2
  804a2c:	0001883a 	nop
  804a30:	e037883a 	mov	sp,fp
  804a34:	dfc00117 	ldw	ra,4(sp)
  804a38:	df000017 	ldw	fp,0(sp)
  804a3c:	dec00204 	addi	sp,sp,8
  804a40:	f800283a 	ret

00804a44 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  804a44:	defffe04 	addi	sp,sp,-8
  804a48:	dfc00115 	stw	ra,4(sp)
  804a4c:	df000015 	stw	fp,0(sp)
  804a50:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  804a54:	d0a70143 	ldbu	r2,-25595(gp)
  804a58:	10803fcc 	andi	r2,r2,255
  804a5c:	10000f1e 	bne	r2,zero,804a9c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  804a60:	08058e00 	call	8058e0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  804a64:	d0a70303 	ldbu	r2,-25588(gp)
  804a68:	d0a70345 	stb	r2,-25587(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  804a6c:	d0a70303 	ldbu	r2,-25588(gp)
  804a70:	10c03fcc 	andi	r3,r2,255
  804a74:	008020b4 	movhi	r2,130
  804a78:	10a1d204 	addi	r2,r2,-30904
  804a7c:	18c7883a 	add	r3,r3,r3
  804a80:	18c7883a 	add	r3,r3,r3
  804a84:	10c5883a 	add	r2,r2,r3
  804a88:	10800017 	ldw	r2,0(r2)
  804a8c:	d0a70b15 	stw	r2,-25556(gp)
        OSTCBCur      = OSTCBHighRdy;
  804a90:	d0a70b17 	ldw	r2,-25556(gp)
  804a94:	d0a71015 	stw	r2,-25536(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  804a98:	080d07c0 	call	80d07c <OSStartHighRdy>
    }
}
  804a9c:	0001883a 	nop
  804aa0:	e037883a 	mov	sp,fp
  804aa4:	dfc00117 	ldw	ra,4(sp)
  804aa8:	df000017 	ldw	fp,0(sp)
  804aac:	dec00204 	addi	sp,sp,8
  804ab0:	f800283a 	ret

00804ab4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  804ab4:	defff904 	addi	sp,sp,-28
  804ab8:	dfc00615 	stw	ra,24(sp)
  804abc:	df000515 	stw	fp,20(sp)
  804ac0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804ac4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  804ac8:	01000084 	movi	r4,2
  804acc:	080b1b80 	call	80b1b8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ad0:	0005303a 	rdctl	r2,status
  804ad4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ad8:	e0fffc17 	ldw	r3,-16(fp)
  804adc:	00bfff84 	movi	r2,-2
  804ae0:	1884703a 	and	r2,r3,r2
  804ae4:	1001703a 	wrctl	status,r2
  
  return context;
  804ae8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  804aec:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  804af0:	d0270215 	stw	zero,-25592(gp)
  804af4:	e0bffb17 	ldw	r2,-20(fp)
  804af8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804afc:	e0bffd17 	ldw	r2,-12(fp)
  804b00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  804b04:	01001904 	movi	r4,100
  804b08:	080b1b80 	call	80b1b8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b0c:	0005303a 	rdctl	r2,status
  804b10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b14:	e0fffe17 	ldw	r3,-8(fp)
  804b18:	00bfff84 	movi	r2,-2
  804b1c:	1884703a 	and	r2,r3,r2
  804b20:	1001703a 	wrctl	status,r2
  
  return context;
  804b24:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  804b28:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  804b2c:	d0a70217 	ldw	r2,-25592(gp)
  804b30:	d0a70715 	stw	r2,-25572(gp)
    OSStatRdy    = OS_TRUE;
  804b34:	00800044 	movi	r2,1
  804b38:	d0a71305 	stb	r2,-25524(gp)
  804b3c:	e0bffb17 	ldw	r2,-20(fp)
  804b40:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804b44:	e0bfff17 	ldw	r2,-4(fp)
  804b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  804b4c:	0001883a 	nop
  804b50:	e037883a 	mov	sp,fp
  804b54:	dfc00117 	ldw	ra,4(sp)
  804b58:	df000017 	ldw	fp,0(sp)
  804b5c:	dec00204 	addi	sp,sp,8
  804b60:	f800283a 	ret

00804b64 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  804b64:	defff704 	addi	sp,sp,-36
  804b68:	dfc00815 	stw	ra,32(sp)
  804b6c:	df000715 	stw	fp,28(sp)
  804b70:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  804b74:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  804b78:	080d2a40 	call	80d2a4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b7c:	0005303a 	rdctl	r2,status
  804b80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b84:	e0fffd17 	ldw	r3,-12(fp)
  804b88:	00bfff84 	movi	r2,-2
  804b8c:	1884703a 	and	r2,r3,r2
  804b90:	1001703a 	wrctl	status,r2
  
  return context;
  804b94:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  804b98:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  804b9c:	d0a71117 	ldw	r2,-25532(gp)
  804ba0:	10800044 	addi	r2,r2,1
  804ba4:	d0a71115 	stw	r2,-25532(gp)
  804ba8:	e0bffb17 	ldw	r2,-20(fp)
  804bac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804bb0:	e0bfff17 	ldw	r2,-4(fp)
  804bb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  804bb8:	d0a70143 	ldbu	r2,-25595(gp)
  804bbc:	10803fcc 	andi	r2,r2,255
  804bc0:	10800058 	cmpnei	r2,r2,1
  804bc4:	10006a1e 	bne	r2,zero,804d70 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  804bc8:	d0a70503 	ldbu	r2,-25580(gp)
  804bcc:	10803fcc 	andi	r2,r2,255
  804bd0:	10c00060 	cmpeqi	r3,r2,1
  804bd4:	1800061e 	bne	r3,zero,804bf0 <OSTimeTick+0x8c>
  804bd8:	10c000a0 	cmpeqi	r3,r2,2
  804bdc:	1800061e 	bne	r3,zero,804bf8 <OSTimeTick+0x94>
  804be0:	10000a1e 	bne	r2,zero,804c0c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  804be4:	00800044 	movi	r2,1
  804be8:	e0bffa05 	stb	r2,-24(fp)
                 break;
  804bec:	00000b06 	br	804c1c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  804bf0:	e03ffa05 	stb	zero,-24(fp)
                 break;
  804bf4:	00000906 	br	804c1c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  804bf8:	00800044 	movi	r2,1
  804bfc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  804c00:	00800044 	movi	r2,1
  804c04:	d0a70505 	stb	r2,-25580(gp)
                 break;
  804c08:	00000406 	br	804c1c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  804c0c:	00800044 	movi	r2,1
  804c10:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  804c14:	d0270505 	stb	zero,-25580(gp)
                 break;
  804c18:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  804c1c:	e0bffa03 	ldbu	r2,-24(fp)
  804c20:	10005226 	beq	r2,zero,804d6c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  804c24:	d0a70417 	ldw	r2,-25584(gp)
  804c28:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  804c2c:	00004906 	br	804d54 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804c30:	0005303a 	rdctl	r2,status
  804c34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c38:	e0fffc17 	ldw	r3,-16(fp)
  804c3c:	00bfff84 	movi	r2,-2
  804c40:	1884703a 	and	r2,r3,r2
  804c44:	1001703a 	wrctl	status,r2
  
  return context;
  804c48:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  804c4c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  804c50:	e0bff917 	ldw	r2,-28(fp)
  804c54:	10800b8b 	ldhu	r2,46(r2)
  804c58:	10bfffcc 	andi	r2,r2,65535
  804c5c:	10003626 	beq	r2,zero,804d38 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  804c60:	e0bff917 	ldw	r2,-28(fp)
  804c64:	10800b8b 	ldhu	r2,46(r2)
  804c68:	10bfffc4 	addi	r2,r2,-1
  804c6c:	1007883a 	mov	r3,r2
  804c70:	e0bff917 	ldw	r2,-28(fp)
  804c74:	10c00b8d 	sth	r3,46(r2)
  804c78:	e0bff917 	ldw	r2,-28(fp)
  804c7c:	10800b8b 	ldhu	r2,46(r2)
  804c80:	10bfffcc 	andi	r2,r2,65535
  804c84:	10002c1e 	bne	r2,zero,804d38 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  804c88:	e0bff917 	ldw	r2,-28(fp)
  804c8c:	10800c03 	ldbu	r2,48(r2)
  804c90:	10803fcc 	andi	r2,r2,255
  804c94:	10800dcc 	andi	r2,r2,55
  804c98:	10000b26 	beq	r2,zero,804cc8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  804c9c:	e0bff917 	ldw	r2,-28(fp)
  804ca0:	10c00c03 	ldbu	r3,48(r2)
  804ca4:	00bff204 	movi	r2,-56
  804ca8:	1884703a 	and	r2,r3,r2
  804cac:	1007883a 	mov	r3,r2
  804cb0:	e0bff917 	ldw	r2,-28(fp)
  804cb4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  804cb8:	e0bff917 	ldw	r2,-28(fp)
  804cbc:	00c00044 	movi	r3,1
  804cc0:	10c00c45 	stb	r3,49(r2)
  804cc4:	00000206 	br	804cd0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  804cc8:	e0bff917 	ldw	r2,-28(fp)
  804ccc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  804cd0:	e0bff917 	ldw	r2,-28(fp)
  804cd4:	10800c03 	ldbu	r2,48(r2)
  804cd8:	10803fcc 	andi	r2,r2,255
  804cdc:	1080020c 	andi	r2,r2,8
  804ce0:	1000151e 	bne	r2,zero,804d38 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  804ce4:	e0bff917 	ldw	r2,-28(fp)
  804ce8:	10c00d83 	ldbu	r3,54(r2)
  804cec:	d0a70d03 	ldbu	r2,-25548(gp)
  804cf0:	1884b03a 	or	r2,r3,r2
  804cf4:	d0a70d05 	stb	r2,-25548(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  804cf8:	e0bff917 	ldw	r2,-28(fp)
  804cfc:	10800d03 	ldbu	r2,52(r2)
  804d00:	10c03fcc 	andi	r3,r2,255
  804d04:	e0bff917 	ldw	r2,-28(fp)
  804d08:	10800d03 	ldbu	r2,52(r2)
  804d0c:	11003fcc 	andi	r4,r2,255
  804d10:	d0a70d44 	addi	r2,gp,-25547
  804d14:	2085883a 	add	r2,r4,r2
  804d18:	11000003 	ldbu	r4,0(r2)
  804d1c:	e0bff917 	ldw	r2,-28(fp)
  804d20:	10800d43 	ldbu	r2,53(r2)
  804d24:	2084b03a 	or	r2,r4,r2
  804d28:	1009883a 	mov	r4,r2
  804d2c:	d0a70d44 	addi	r2,gp,-25547
  804d30:	1885883a 	add	r2,r3,r2
  804d34:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  804d38:	e0bff917 	ldw	r2,-28(fp)
  804d3c:	10800517 	ldw	r2,20(r2)
  804d40:	e0bff915 	stw	r2,-28(fp)
  804d44:	e0bffb17 	ldw	r2,-20(fp)
  804d48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804d4c:	e0bffe17 	ldw	r2,-8(fp)
  804d50:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  804d54:	e0bff917 	ldw	r2,-28(fp)
  804d58:	10800c83 	ldbu	r2,50(r2)
  804d5c:	10803fcc 	andi	r2,r2,255
  804d60:	10800518 	cmpnei	r2,r2,20
  804d64:	103fb21e 	bne	r2,zero,804c30 <__alt_data_end+0xff804c30>
  804d68:	00000106 	br	804d70 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  804d6c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  804d70:	e037883a 	mov	sp,fp
  804d74:	dfc00117 	ldw	ra,4(sp)
  804d78:	df000017 	ldw	fp,0(sp)
  804d7c:	dec00204 	addi	sp,sp,8
  804d80:	f800283a 	ret

00804d84 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  804d84:	deffff04 	addi	sp,sp,-4
  804d88:	df000015 	stw	fp,0(sp)
  804d8c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  804d90:	00804784 	movi	r2,286
}
  804d94:	e037883a 	mov	sp,fp
  804d98:	df000017 	ldw	fp,0(sp)
  804d9c:	dec00104 	addi	sp,sp,4
  804da0:	f800283a 	ret

00804da4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  804da4:	deffff04 	addi	sp,sp,-4
  804da8:	df000015 	stw	fp,0(sp)
  804dac:	d839883a 	mov	fp,sp
}
  804db0:	0001883a 	nop
  804db4:	e037883a 	mov	sp,fp
  804db8:	df000017 	ldw	fp,0(sp)
  804dbc:	dec00104 	addi	sp,sp,4
  804dc0:	f800283a 	ret

00804dc4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  804dc4:	defff804 	addi	sp,sp,-32
  804dc8:	dfc00715 	stw	ra,28(sp)
  804dcc:	df000615 	stw	fp,24(sp)
  804dd0:	df000604 	addi	fp,sp,24
  804dd4:	e13ffc15 	stw	r4,-16(fp)
  804dd8:	e17ffd15 	stw	r5,-12(fp)
  804ddc:	3007883a 	mov	r3,r6
  804de0:	3805883a 	mov	r2,r7
  804de4:	e0fffe05 	stb	r3,-8(fp)
  804de8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  804dec:	e0bffc17 	ldw	r2,-16(fp)
  804df0:	10800283 	ldbu	r2,10(r2)
  804df4:	10c03fcc 	andi	r3,r2,255
  804df8:	00802074 	movhi	r2,129
  804dfc:	10b74d04 	addi	r2,r2,-8908
  804e00:	10c5883a 	add	r2,r2,r3
  804e04:	10800003 	ldbu	r2,0(r2)
  804e08:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  804e0c:	e0bffa03 	ldbu	r2,-24(fp)
  804e10:	e0fffc17 	ldw	r3,-16(fp)
  804e14:	1885883a 	add	r2,r3,r2
  804e18:	108002c4 	addi	r2,r2,11
  804e1c:	10800003 	ldbu	r2,0(r2)
  804e20:	10c03fcc 	andi	r3,r2,255
  804e24:	00802074 	movhi	r2,129
  804e28:	10b74d04 	addi	r2,r2,-8908
  804e2c:	10c5883a 	add	r2,r2,r3
  804e30:	10800003 	ldbu	r2,0(r2)
  804e34:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  804e38:	e0bffa03 	ldbu	r2,-24(fp)
  804e3c:	100490fa 	slli	r2,r2,3
  804e40:	1007883a 	mov	r3,r2
  804e44:	e0bffa43 	ldbu	r2,-23(fp)
  804e48:	1885883a 	add	r2,r3,r2
  804e4c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  804e50:	e0fffa83 	ldbu	r3,-22(fp)
  804e54:	008020b4 	movhi	r2,130
  804e58:	10a1d204 	addi	r2,r2,-30904
  804e5c:	18c7883a 	add	r3,r3,r3
  804e60:	18c7883a 	add	r3,r3,r3
  804e64:	10c5883a 	add	r2,r2,r3
  804e68:	10800017 	ldw	r2,0(r2)
  804e6c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  804e70:	e0bffb17 	ldw	r2,-20(fp)
  804e74:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  804e78:	e0bffb17 	ldw	r2,-20(fp)
  804e7c:	e0fffd17 	ldw	r3,-12(fp)
  804e80:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  804e84:	e0bffb17 	ldw	r2,-20(fp)
  804e88:	10800c03 	ldbu	r2,48(r2)
  804e8c:	1007883a 	mov	r3,r2
  804e90:	e0bffe03 	ldbu	r2,-8(fp)
  804e94:	0084303a 	nor	r2,zero,r2
  804e98:	1884703a 	and	r2,r3,r2
  804e9c:	1007883a 	mov	r3,r2
  804ea0:	e0bffb17 	ldw	r2,-20(fp)
  804ea4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  804ea8:	e0bffb17 	ldw	r2,-20(fp)
  804eac:	e0ffff03 	ldbu	r3,-4(fp)
  804eb0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  804eb4:	e0bffb17 	ldw	r2,-20(fp)
  804eb8:	10800c03 	ldbu	r2,48(r2)
  804ebc:	10803fcc 	andi	r2,r2,255
  804ec0:	1080020c 	andi	r2,r2,8
  804ec4:	1000111e 	bne	r2,zero,804f0c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  804ec8:	e0bffb17 	ldw	r2,-20(fp)
  804ecc:	10c00d83 	ldbu	r3,54(r2)
  804ed0:	d0a70d03 	ldbu	r2,-25548(gp)
  804ed4:	1884b03a 	or	r2,r3,r2
  804ed8:	d0a70d05 	stb	r2,-25548(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  804edc:	e0fffa03 	ldbu	r3,-24(fp)
  804ee0:	e13ffa03 	ldbu	r4,-24(fp)
  804ee4:	d0a70d44 	addi	r2,gp,-25547
  804ee8:	2085883a 	add	r2,r4,r2
  804eec:	11000003 	ldbu	r4,0(r2)
  804ef0:	e0bffb17 	ldw	r2,-20(fp)
  804ef4:	10800d43 	ldbu	r2,53(r2)
  804ef8:	2084b03a 	or	r2,r4,r2
  804efc:	1009883a 	mov	r4,r2
  804f00:	d0a70d44 	addi	r2,gp,-25547
  804f04:	1885883a 	add	r2,r3,r2
  804f08:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  804f0c:	e17ffc17 	ldw	r5,-16(fp)
  804f10:	e13ffb17 	ldw	r4,-20(fp)
  804f14:	08051bc0 	call	8051bc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  804f18:	e0bffb17 	ldw	r2,-20(fp)
  804f1c:	10800817 	ldw	r2,32(r2)
  804f20:	10000826 	beq	r2,zero,804f44 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  804f24:	e0bffb17 	ldw	r2,-20(fp)
  804f28:	10800817 	ldw	r2,32(r2)
  804f2c:	100b883a 	mov	r5,r2
  804f30:	e13ffb17 	ldw	r4,-20(fp)
  804f34:	08052740 	call	805274 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  804f38:	e0bffb17 	ldw	r2,-20(fp)
  804f3c:	e0fffc17 	ldw	r3,-16(fp)
  804f40:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  804f44:	e0bffa83 	ldbu	r2,-22(fp)
}
  804f48:	e037883a 	mov	sp,fp
  804f4c:	dfc00117 	ldw	ra,4(sp)
  804f50:	df000017 	ldw	fp,0(sp)
  804f54:	dec00204 	addi	sp,sp,8
  804f58:	f800283a 	ret

00804f5c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  804f5c:	defffd04 	addi	sp,sp,-12
  804f60:	df000215 	stw	fp,8(sp)
  804f64:	df000204 	addi	fp,sp,8
  804f68:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  804f6c:	d0a71017 	ldw	r2,-25536(gp)
  804f70:	e0ffff17 	ldw	r3,-4(fp)
  804f74:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  804f78:	d0a71017 	ldw	r2,-25536(gp)
  804f7c:	10800d03 	ldbu	r2,52(r2)
  804f80:	10803fcc 	andi	r2,r2,255
  804f84:	d0e71017 	ldw	r3,-25536(gp)
  804f88:	18c00d03 	ldbu	r3,52(r3)
  804f8c:	18c03fcc 	andi	r3,r3,255
  804f90:	e13fff17 	ldw	r4,-4(fp)
  804f94:	20c7883a 	add	r3,r4,r3
  804f98:	18c002c4 	addi	r3,r3,11
  804f9c:	19000003 	ldbu	r4,0(r3)
  804fa0:	d0e71017 	ldw	r3,-25536(gp)
  804fa4:	18c00d43 	ldbu	r3,53(r3)
  804fa8:	20c6b03a 	or	r3,r4,r3
  804fac:	1809883a 	mov	r4,r3
  804fb0:	e0ffff17 	ldw	r3,-4(fp)
  804fb4:	1885883a 	add	r2,r3,r2
  804fb8:	108002c4 	addi	r2,r2,11
  804fbc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  804fc0:	e0bfff17 	ldw	r2,-4(fp)
  804fc4:	10c00283 	ldbu	r3,10(r2)
  804fc8:	d0a71017 	ldw	r2,-25536(gp)
  804fcc:	10800d83 	ldbu	r2,54(r2)
  804fd0:	1884b03a 	or	r2,r3,r2
  804fd4:	1007883a 	mov	r3,r2
  804fd8:	e0bfff17 	ldw	r2,-4(fp)
  804fdc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  804fe0:	d0a71017 	ldw	r2,-25536(gp)
  804fe4:	10800d03 	ldbu	r2,52(r2)
  804fe8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  804fec:	e0fffe03 	ldbu	r3,-8(fp)
  804ff0:	e13ffe03 	ldbu	r4,-8(fp)
  804ff4:	d0a70d44 	addi	r2,gp,-25547
  804ff8:	2085883a 	add	r2,r4,r2
  804ffc:	10800003 	ldbu	r2,0(r2)
  805000:	1009883a 	mov	r4,r2
  805004:	d0a71017 	ldw	r2,-25536(gp)
  805008:	10800d43 	ldbu	r2,53(r2)
  80500c:	0084303a 	nor	r2,zero,r2
  805010:	2084703a 	and	r2,r4,r2
  805014:	1009883a 	mov	r4,r2
  805018:	d0a70d44 	addi	r2,gp,-25547
  80501c:	1885883a 	add	r2,r3,r2
  805020:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  805024:	e0fffe03 	ldbu	r3,-8(fp)
  805028:	d0a70d44 	addi	r2,gp,-25547
  80502c:	1885883a 	add	r2,r3,r2
  805030:	10800003 	ldbu	r2,0(r2)
  805034:	10803fcc 	andi	r2,r2,255
  805038:	1000071e 	bne	r2,zero,805058 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80503c:	d0a71017 	ldw	r2,-25536(gp)
  805040:	10800d83 	ldbu	r2,54(r2)
  805044:	0084303a 	nor	r2,zero,r2
  805048:	1007883a 	mov	r3,r2
  80504c:	d0a70d03 	ldbu	r2,-25548(gp)
  805050:	1884703a 	and	r2,r3,r2
  805054:	d0a70d05 	stb	r2,-25548(gp)
    }
}
  805058:	0001883a 	nop
  80505c:	e037883a 	mov	sp,fp
  805060:	df000017 	ldw	fp,0(sp)
  805064:	dec00104 	addi	sp,sp,4
  805068:	f800283a 	ret

0080506c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80506c:	defffb04 	addi	sp,sp,-20
  805070:	df000415 	stw	fp,16(sp)
  805074:	df000404 	addi	fp,sp,16
  805078:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80507c:	d0a71017 	ldw	r2,-25536(gp)
  805080:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  805084:	d0a71017 	ldw	r2,-25536(gp)
  805088:	e0ffff17 	ldw	r3,-4(fp)
  80508c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  805090:	e0bfff17 	ldw	r2,-4(fp)
  805094:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  805098:	e0bffc17 	ldw	r2,-16(fp)
  80509c:	10800017 	ldw	r2,0(r2)
  8050a0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  8050a4:	00002006 	br	805128 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  8050a8:	d0a71017 	ldw	r2,-25536(gp)
  8050ac:	10800d03 	ldbu	r2,52(r2)
  8050b0:	10803fcc 	andi	r2,r2,255
  8050b4:	d0e71017 	ldw	r3,-25536(gp)
  8050b8:	18c00d03 	ldbu	r3,52(r3)
  8050bc:	18c03fcc 	andi	r3,r3,255
  8050c0:	e13ffd17 	ldw	r4,-12(fp)
  8050c4:	20c7883a 	add	r3,r4,r3
  8050c8:	18c002c4 	addi	r3,r3,11
  8050cc:	19000003 	ldbu	r4,0(r3)
  8050d0:	d0e71017 	ldw	r3,-25536(gp)
  8050d4:	18c00d43 	ldbu	r3,53(r3)
  8050d8:	20c6b03a 	or	r3,r4,r3
  8050dc:	1809883a 	mov	r4,r3
  8050e0:	e0fffd17 	ldw	r3,-12(fp)
  8050e4:	1885883a 	add	r2,r3,r2
  8050e8:	108002c4 	addi	r2,r2,11
  8050ec:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  8050f0:	e0bffd17 	ldw	r2,-12(fp)
  8050f4:	10c00283 	ldbu	r3,10(r2)
  8050f8:	d0a71017 	ldw	r2,-25536(gp)
  8050fc:	10800d83 	ldbu	r2,54(r2)
  805100:	1884b03a 	or	r2,r3,r2
  805104:	1007883a 	mov	r3,r2
  805108:	e0bffd17 	ldw	r2,-12(fp)
  80510c:	10c00285 	stb	r3,10(r2)
        pevents++;
  805110:	e0bffc17 	ldw	r2,-16(fp)
  805114:	10800104 	addi	r2,r2,4
  805118:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  80511c:	e0bffc17 	ldw	r2,-16(fp)
  805120:	10800017 	ldw	r2,0(r2)
  805124:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  805128:	e0bffd17 	ldw	r2,-12(fp)
  80512c:	103fde1e 	bne	r2,zero,8050a8 <__alt_data_end+0xff8050a8>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  805130:	d0a71017 	ldw	r2,-25536(gp)
  805134:	10800d03 	ldbu	r2,52(r2)
  805138:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80513c:	e0fffe03 	ldbu	r3,-8(fp)
  805140:	e13ffe03 	ldbu	r4,-8(fp)
  805144:	d0a70d44 	addi	r2,gp,-25547
  805148:	2085883a 	add	r2,r4,r2
  80514c:	10800003 	ldbu	r2,0(r2)
  805150:	1009883a 	mov	r4,r2
  805154:	d0a71017 	ldw	r2,-25536(gp)
  805158:	10800d43 	ldbu	r2,53(r2)
  80515c:	0084303a 	nor	r2,zero,r2
  805160:	2084703a 	and	r2,r4,r2
  805164:	1009883a 	mov	r4,r2
  805168:	d0a70d44 	addi	r2,gp,-25547
  80516c:	1885883a 	add	r2,r3,r2
  805170:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  805174:	e0fffe03 	ldbu	r3,-8(fp)
  805178:	d0a70d44 	addi	r2,gp,-25547
  80517c:	1885883a 	add	r2,r3,r2
  805180:	10800003 	ldbu	r2,0(r2)
  805184:	10803fcc 	andi	r2,r2,255
  805188:	1000071e 	bne	r2,zero,8051a8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80518c:	d0a71017 	ldw	r2,-25536(gp)
  805190:	10800d83 	ldbu	r2,54(r2)
  805194:	0084303a 	nor	r2,zero,r2
  805198:	1007883a 	mov	r3,r2
  80519c:	d0a70d03 	ldbu	r2,-25548(gp)
  8051a0:	1884703a 	and	r2,r3,r2
  8051a4:	d0a70d05 	stb	r2,-25548(gp)
    }
}
  8051a8:	0001883a 	nop
  8051ac:	e037883a 	mov	sp,fp
  8051b0:	df000017 	ldw	fp,0(sp)
  8051b4:	dec00104 	addi	sp,sp,4
  8051b8:	f800283a 	ret

008051bc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  8051bc:	defffc04 	addi	sp,sp,-16
  8051c0:	df000315 	stw	fp,12(sp)
  8051c4:	df000304 	addi	fp,sp,12
  8051c8:	e13ffe15 	stw	r4,-8(fp)
  8051cc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  8051d0:	e0bffe17 	ldw	r2,-8(fp)
  8051d4:	10800d03 	ldbu	r2,52(r2)
  8051d8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  8051dc:	e0bffd03 	ldbu	r2,-12(fp)
  8051e0:	e0fffd03 	ldbu	r3,-12(fp)
  8051e4:	e13fff17 	ldw	r4,-4(fp)
  8051e8:	20c7883a 	add	r3,r4,r3
  8051ec:	18c002c4 	addi	r3,r3,11
  8051f0:	18c00003 	ldbu	r3,0(r3)
  8051f4:	1809883a 	mov	r4,r3
  8051f8:	e0fffe17 	ldw	r3,-8(fp)
  8051fc:	18c00d43 	ldbu	r3,53(r3)
  805200:	00c6303a 	nor	r3,zero,r3
  805204:	20c6703a 	and	r3,r4,r3
  805208:	1809883a 	mov	r4,r3
  80520c:	e0ffff17 	ldw	r3,-4(fp)
  805210:	1885883a 	add	r2,r3,r2
  805214:	108002c4 	addi	r2,r2,11
  805218:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80521c:	e0bffd03 	ldbu	r2,-12(fp)
  805220:	e0ffff17 	ldw	r3,-4(fp)
  805224:	1885883a 	add	r2,r3,r2
  805228:	108002c4 	addi	r2,r2,11
  80522c:	10800003 	ldbu	r2,0(r2)
  805230:	10803fcc 	andi	r2,r2,255
  805234:	10000a1e 	bne	r2,zero,805260 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  805238:	e0bfff17 	ldw	r2,-4(fp)
  80523c:	10800283 	ldbu	r2,10(r2)
  805240:	1007883a 	mov	r3,r2
  805244:	e0bffe17 	ldw	r2,-8(fp)
  805248:	10800d83 	ldbu	r2,54(r2)
  80524c:	0084303a 	nor	r2,zero,r2
  805250:	1884703a 	and	r2,r3,r2
  805254:	1007883a 	mov	r3,r2
  805258:	e0bfff17 	ldw	r2,-4(fp)
  80525c:	10c00285 	stb	r3,10(r2)
    }
}
  805260:	0001883a 	nop
  805264:	e037883a 	mov	sp,fp
  805268:	df000017 	ldw	fp,0(sp)
  80526c:	dec00104 	addi	sp,sp,4
  805270:	f800283a 	ret

00805274 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  805274:	defffa04 	addi	sp,sp,-24
  805278:	df000515 	stw	fp,20(sp)
  80527c:	df000504 	addi	fp,sp,20
  805280:	e13ffe15 	stw	r4,-8(fp)
  805284:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  805288:	e0bffe17 	ldw	r2,-8(fp)
  80528c:	10800d03 	ldbu	r2,52(r2)
  805290:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  805294:	e0bffe17 	ldw	r2,-8(fp)
  805298:	10800d83 	ldbu	r2,54(r2)
  80529c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  8052a0:	e0bffe17 	ldw	r2,-8(fp)
  8052a4:	10800d43 	ldbu	r2,53(r2)
  8052a8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  8052ac:	e0bfff17 	ldw	r2,-4(fp)
  8052b0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  8052b4:	e0bffb17 	ldw	r2,-20(fp)
  8052b8:	10800017 	ldw	r2,0(r2)
  8052bc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  8052c0:	00002506 	br	805358 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  8052c4:	e0bffd03 	ldbu	r2,-12(fp)
  8052c8:	e0fffd03 	ldbu	r3,-12(fp)
  8052cc:	e13ffc17 	ldw	r4,-16(fp)
  8052d0:	20c7883a 	add	r3,r4,r3
  8052d4:	18c002c4 	addi	r3,r3,11
  8052d8:	18c00003 	ldbu	r3,0(r3)
  8052dc:	1809883a 	mov	r4,r3
  8052e0:	e0fffd83 	ldbu	r3,-10(fp)
  8052e4:	00c6303a 	nor	r3,zero,r3
  8052e8:	20c6703a 	and	r3,r4,r3
  8052ec:	1809883a 	mov	r4,r3
  8052f0:	e0fffc17 	ldw	r3,-16(fp)
  8052f4:	1885883a 	add	r2,r3,r2
  8052f8:	108002c4 	addi	r2,r2,11
  8052fc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  805300:	e0bffd03 	ldbu	r2,-12(fp)
  805304:	e0fffc17 	ldw	r3,-16(fp)
  805308:	1885883a 	add	r2,r3,r2
  80530c:	108002c4 	addi	r2,r2,11
  805310:	10800003 	ldbu	r2,0(r2)
  805314:	10803fcc 	andi	r2,r2,255
  805318:	1000091e 	bne	r2,zero,805340 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  80531c:	e0bffc17 	ldw	r2,-16(fp)
  805320:	10800283 	ldbu	r2,10(r2)
  805324:	1007883a 	mov	r3,r2
  805328:	e0bffd43 	ldbu	r2,-11(fp)
  80532c:	0084303a 	nor	r2,zero,r2
  805330:	1884703a 	and	r2,r3,r2
  805334:	1007883a 	mov	r3,r2
  805338:	e0bffc17 	ldw	r2,-16(fp)
  80533c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  805340:	e0bffb17 	ldw	r2,-20(fp)
  805344:	10800104 	addi	r2,r2,4
  805348:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  80534c:	e0bffb17 	ldw	r2,-20(fp)
  805350:	10800017 	ldw	r2,0(r2)
  805354:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  805358:	e0bffc17 	ldw	r2,-16(fp)
  80535c:	103fd91e 	bne	r2,zero,8052c4 <__alt_data_end+0xff8052c4>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  805360:	0001883a 	nop
  805364:	e037883a 	mov	sp,fp
  805368:	df000017 	ldw	fp,0(sp)
  80536c:	dec00104 	addi	sp,sp,4
  805370:	f800283a 	ret

00805374 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  805374:	defffc04 	addi	sp,sp,-16
  805378:	df000315 	stw	fp,12(sp)
  80537c:	df000304 	addi	fp,sp,12
  805380:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  805384:	e0bfff17 	ldw	r2,-4(fp)
  805388:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80538c:	e0bfff17 	ldw	r2,-4(fp)
  805390:	108002c4 	addi	r2,r2,11
  805394:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805398:	e03ffe05 	stb	zero,-8(fp)
  80539c:	00000706 	br	8053bc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  8053a0:	e0bffd17 	ldw	r2,-12(fp)
  8053a4:	10c00044 	addi	r3,r2,1
  8053a8:	e0fffd15 	stw	r3,-12(fp)
  8053ac:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8053b0:	e0bffe03 	ldbu	r2,-8(fp)
  8053b4:	10800044 	addi	r2,r2,1
  8053b8:	e0bffe05 	stb	r2,-8(fp)
  8053bc:	e0bffe03 	ldbu	r2,-8(fp)
  8053c0:	108000f0 	cmpltui	r2,r2,3
  8053c4:	103ff61e 	bne	r2,zero,8053a0 <__alt_data_end+0xff8053a0>
        *ptbl++ = 0;
    }
}
  8053c8:	0001883a 	nop
  8053cc:	e037883a 	mov	sp,fp
  8053d0:	df000017 	ldw	fp,0(sp)
  8053d4:	dec00104 	addi	sp,sp,4
  8053d8:	f800283a 	ret

008053dc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  8053dc:	defffb04 	addi	sp,sp,-20
  8053e0:	dfc00415 	stw	ra,16(sp)
  8053e4:	df000315 	stw	fp,12(sp)
  8053e8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  8053ec:	0142d004 	movi	r5,2880
  8053f0:	01002074 	movhi	r4,129
  8053f4:	211dbe04 	addi	r4,r4,30456
  8053f8:	08057540 	call	805754 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  8053fc:	00802074 	movhi	r2,129
  805400:	109dbe04 	addi	r2,r2,30456
  805404:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  805408:	00802074 	movhi	r2,129
  80540c:	109dca04 	addi	r2,r2,30504
  805410:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  805414:	e03ffd0d 	sth	zero,-12(fp)
  805418:	00001306 	br	805468 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80541c:	e0bffe17 	ldw	r2,-8(fp)
  805420:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  805424:	e0bffe17 	ldw	r2,-8(fp)
  805428:	e0ffff17 	ldw	r3,-4(fp)
  80542c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  805430:	e0bffe17 	ldw	r2,-8(fp)
  805434:	00c00fc4 	movi	r3,63
  805438:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80543c:	e0bffe17 	ldw	r2,-8(fp)
  805440:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  805444:	e0bffe17 	ldw	r2,-8(fp)
  805448:	10800c04 	addi	r2,r2,48
  80544c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  805450:	e0bfff17 	ldw	r2,-4(fp)
  805454:	10800c04 	addi	r2,r2,48
  805458:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80545c:	e0bffd0b 	ldhu	r2,-12(fp)
  805460:	10800044 	addi	r2,r2,1
  805464:	e0bffd0d 	sth	r2,-12(fp)
  805468:	e0bffd0b 	ldhu	r2,-12(fp)
  80546c:	10800ef0 	cmpltui	r2,r2,59
  805470:	103fea1e 	bne	r2,zero,80541c <__alt_data_end+0xff80541c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  805474:	e0bffe17 	ldw	r2,-8(fp)
  805478:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80547c:	e0bffe17 	ldw	r2,-8(fp)
  805480:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  805484:	e0bffe17 	ldw	r2,-8(fp)
  805488:	00c00fc4 	movi	r3,63
  80548c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  805490:	e0bffe17 	ldw	r2,-8(fp)
  805494:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  805498:	00802074 	movhi	r2,129
  80549c:	109dbe04 	addi	r2,r2,30456
  8054a0:	d0a70e15 	stw	r2,-25544(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  8054a4:	0001883a 	nop
  8054a8:	e037883a 	mov	sp,fp
  8054ac:	dfc00117 	ldw	ra,4(sp)
  8054b0:	df000017 	ldw	fp,0(sp)
  8054b4:	dec00204 	addi	sp,sp,8
  8054b8:	f800283a 	ret

008054bc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  8054bc:	deffff04 	addi	sp,sp,-4
  8054c0:	df000015 	stw	fp,0(sp)
  8054c4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  8054c8:	d0271115 	stw	zero,-25532(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  8054cc:	d0270f05 	stb	zero,-25540(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  8054d0:	d0270105 	stb	zero,-25596(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  8054d4:	d0270945 	stb	zero,-25563(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  8054d8:	d0270145 	stb	zero,-25595(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  8054dc:	d0270615 	stw	zero,-25576(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  8054e0:	d0270215 	stw	zero,-25592(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  8054e4:	d0271415 	stw	zero,-25520(gp)
    OSIdleCtrMax  = 0L;
  8054e8:	d0270715 	stw	zero,-25572(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  8054ec:	d0271305 	stb	zero,-25524(gp)
#endif
}
  8054f0:	0001883a 	nop
  8054f4:	e037883a 	mov	sp,fp
  8054f8:	df000017 	ldw	fp,0(sp)
  8054fc:	dec00104 	addi	sp,sp,4
  805500:	f800283a 	ret

00805504 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  805504:	defffd04 	addi	sp,sp,-12
  805508:	df000215 	stw	fp,8(sp)
  80550c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  805510:	d0270d05 	stb	zero,-25548(gp)
    prdytbl       = &OSRdyTbl[0];
  805514:	d0a70d44 	addi	r2,gp,-25547
  805518:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80551c:	e03ffe05 	stb	zero,-8(fp)
  805520:	00000706 	br	805540 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  805524:	e0bfff17 	ldw	r2,-4(fp)
  805528:	10c00044 	addi	r3,r2,1
  80552c:	e0ffff15 	stw	r3,-4(fp)
  805530:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  805534:	e0bffe03 	ldbu	r2,-8(fp)
  805538:	10800044 	addi	r2,r2,1
  80553c:	e0bffe05 	stb	r2,-8(fp)
  805540:	e0bffe03 	ldbu	r2,-8(fp)
  805544:	108000f0 	cmpltui	r2,r2,3
  805548:	103ff61e 	bne	r2,zero,805524 <__alt_data_end+0xff805524>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80554c:	d0270345 	stb	zero,-25587(gp)
    OSPrioHighRdy = 0;
  805550:	d0270305 	stb	zero,-25588(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  805554:	d0270b15 	stw	zero,-25556(gp)
    OSTCBCur      = (OS_TCB *)0;
  805558:	d0271015 	stw	zero,-25536(gp)
}
  80555c:	0001883a 	nop
  805560:	e037883a 	mov	sp,fp
  805564:	df000017 	ldw	fp,0(sp)
  805568:	dec00104 	addi	sp,sp,4
  80556c:	f800283a 	ret

00805570 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  805570:	defff804 	addi	sp,sp,-32
  805574:	dfc00715 	stw	ra,28(sp)
  805578:	df000615 	stw	fp,24(sp)
  80557c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  805580:	008000c4 	movi	r2,3
  805584:	d8800415 	stw	r2,16(sp)
  805588:	d8000315 	stw	zero,12(sp)
  80558c:	00808004 	movi	r2,512
  805590:	d8800215 	stw	r2,8(sp)
  805594:	00802074 	movhi	r2,129
  805598:	109bbe04 	addi	r2,r2,28408
  80559c:	d8800115 	stw	r2,4(sp)
  8055a0:	00bfffd4 	movui	r2,65535
  8055a4:	d8800015 	stw	r2,0(sp)
  8055a8:	01c00504 	movi	r7,20
  8055ac:	01802074 	movhi	r6,129
  8055b0:	319dbd04 	addi	r6,r6,30452
  8055b4:	000b883a 	mov	r5,zero
  8055b8:	01002034 	movhi	r4,128
  8055bc:	21168704 	addi	r4,r4,23068
  8055c0:	080a0e80 	call	80a0e8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  8055c4:	e1bfff04 	addi	r6,fp,-4
  8055c8:	01402074 	movhi	r5,129
  8055cc:	29778d04 	addi	r5,r5,-8652
  8055d0:	01000504 	movi	r4,20
  8055d4:	080a8f80 	call	80a8f8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  8055d8:	0001883a 	nop
  8055dc:	e037883a 	mov	sp,fp
  8055e0:	dfc00117 	ldw	ra,4(sp)
  8055e4:	df000017 	ldw	fp,0(sp)
  8055e8:	dec00204 	addi	sp,sp,8
  8055ec:	f800283a 	ret

008055f0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  8055f0:	defff804 	addi	sp,sp,-32
  8055f4:	dfc00715 	stw	ra,28(sp)
  8055f8:	df000615 	stw	fp,24(sp)
  8055fc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  805600:	008000c4 	movi	r2,3
  805604:	d8800415 	stw	r2,16(sp)
  805608:	d8000315 	stw	zero,12(sp)
  80560c:	00808004 	movi	r2,512
  805610:	d8800215 	stw	r2,8(sp)
  805614:	00802074 	movhi	r2,129
  805618:	10994604 	addi	r2,r2,25880
  80561c:	d8800115 	stw	r2,4(sp)
  805620:	00bfff94 	movui	r2,65534
  805624:	d8800015 	stw	r2,0(sp)
  805628:	01c004c4 	movi	r7,19
  80562c:	01802074 	movhi	r6,129
  805630:	319b4504 	addi	r6,r6,27924
  805634:	000b883a 	mov	r5,zero
  805638:	01002034 	movhi	r4,128
  80563c:	21169e04 	addi	r4,r4,23160
  805640:	080a0e80 	call	80a0e8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  805644:	e1bfff04 	addi	r6,fp,-4
  805648:	01402074 	movhi	r5,129
  80564c:	29779104 	addi	r5,r5,-8636
  805650:	010004c4 	movi	r4,19
  805654:	080a8f80 	call	80a8f8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  805658:	0001883a 	nop
  80565c:	e037883a 	mov	sp,fp
  805660:	dfc00117 	ldw	ra,4(sp)
  805664:	df000017 	ldw	fp,0(sp)
  805668:	dec00204 	addi	sp,sp,8
  80566c:	f800283a 	ret

00805670 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  805670:	defffb04 	addi	sp,sp,-20
  805674:	dfc00415 	stw	ra,16(sp)
  805678:	df000315 	stw	fp,12(sp)
  80567c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  805680:	01414404 	movi	r5,1296
  805684:	010020b4 	movhi	r4,130
  805688:	21208e04 	addi	r4,r4,-32200
  80568c:	08057540 	call	805754 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  805690:	01401504 	movi	r5,84
  805694:	010020b4 	movhi	r4,130
  805698:	2121d204 	addi	r4,r4,-30904
  80569c:	08057540 	call	805754 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  8056a0:	008020b4 	movhi	r2,130
  8056a4:	10a08e04 	addi	r2,r2,-32200
  8056a8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  8056ac:	008020b4 	movhi	r2,130
  8056b0:	10a0a904 	addi	r2,r2,-32092
  8056b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8056b8:	e03ffd05 	stb	zero,-12(fp)
  8056bc:	00001106 	br	805704 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  8056c0:	e0bffe17 	ldw	r2,-8(fp)
  8056c4:	e0ffff17 	ldw	r3,-4(fp)
  8056c8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  8056cc:	e0bffe17 	ldw	r2,-8(fp)
  8056d0:	00c00fc4 	movi	r3,63
  8056d4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  8056d8:	e0bffe17 	ldw	r2,-8(fp)
  8056dc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  8056e0:	e0bffe17 	ldw	r2,-8(fp)
  8056e4:	10801b04 	addi	r2,r2,108
  8056e8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  8056ec:	e0bfff17 	ldw	r2,-4(fp)
  8056f0:	10801b04 	addi	r2,r2,108
  8056f4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  8056f8:	e0bffd03 	ldbu	r2,-12(fp)
  8056fc:	10800044 	addi	r2,r2,1
  805700:	e0bffd05 	stb	r2,-12(fp)
  805704:	e0bffd03 	ldbu	r2,-12(fp)
  805708:	108002f0 	cmpltui	r2,r2,11
  80570c:	103fec1e 	bne	r2,zero,8056c0 <__alt_data_end+0xff8056c0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  805710:	e0bffe17 	ldw	r2,-8(fp)
  805714:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  805718:	e0bffe17 	ldw	r2,-8(fp)
  80571c:	00c00fc4 	movi	r3,63
  805720:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  805724:	e0bffe17 	ldw	r2,-8(fp)
  805728:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80572c:	d0270415 	stw	zero,-25584(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  805730:	008020b4 	movhi	r2,130
  805734:	10a08e04 	addi	r2,r2,-32200
  805738:	d0a70815 	stw	r2,-25568(gp)
}
  80573c:	0001883a 	nop
  805740:	e037883a 	mov	sp,fp
  805744:	dfc00117 	ldw	ra,4(sp)
  805748:	df000017 	ldw	fp,0(sp)
  80574c:	dec00204 	addi	sp,sp,8
  805750:	f800283a 	ret

00805754 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  805754:	defffd04 	addi	sp,sp,-12
  805758:	df000215 	stw	fp,8(sp)
  80575c:	df000204 	addi	fp,sp,8
  805760:	e13ffe15 	stw	r4,-8(fp)
  805764:	2805883a 	mov	r2,r5
  805768:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  80576c:	00000706 	br	80578c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  805770:	e0bffe17 	ldw	r2,-8(fp)
  805774:	10c00044 	addi	r3,r2,1
  805778:	e0fffe15 	stw	r3,-8(fp)
  80577c:	10000005 	stb	zero,0(r2)
        size--;
  805780:	e0bfff0b 	ldhu	r2,-4(fp)
  805784:	10bfffc4 	addi	r2,r2,-1
  805788:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80578c:	e0bfff0b 	ldhu	r2,-4(fp)
  805790:	103ff71e 	bne	r2,zero,805770 <__alt_data_end+0xff805770>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  805794:	0001883a 	nop
  805798:	e037883a 	mov	sp,fp
  80579c:	df000017 	ldw	fp,0(sp)
  8057a0:	dec00104 	addi	sp,sp,4
  8057a4:	f800283a 	ret

008057a8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  8057a8:	defffc04 	addi	sp,sp,-16
  8057ac:	df000315 	stw	fp,12(sp)
  8057b0:	df000304 	addi	fp,sp,12
  8057b4:	e13ffd15 	stw	r4,-12(fp)
  8057b8:	e17ffe15 	stw	r5,-8(fp)
  8057bc:	3005883a 	mov	r2,r6
  8057c0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  8057c4:	00000b06 	br	8057f4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  8057c8:	e0bffd17 	ldw	r2,-12(fp)
  8057cc:	10c00044 	addi	r3,r2,1
  8057d0:	e0fffd15 	stw	r3,-12(fp)
  8057d4:	e0fffe17 	ldw	r3,-8(fp)
  8057d8:	19000044 	addi	r4,r3,1
  8057dc:	e13ffe15 	stw	r4,-8(fp)
  8057e0:	18c00003 	ldbu	r3,0(r3)
  8057e4:	10c00005 	stb	r3,0(r2)
        size--;
  8057e8:	e0bfff0b 	ldhu	r2,-4(fp)
  8057ec:	10bfffc4 	addi	r2,r2,-1
  8057f0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8057f4:	e0bfff0b 	ldhu	r2,-4(fp)
  8057f8:	103ff31e 	bne	r2,zero,8057c8 <__alt_data_end+0xff8057c8>
        *pdest++ = *psrc++;
        size--;
    }
}
  8057fc:	0001883a 	nop
  805800:	e037883a 	mov	sp,fp
  805804:	df000017 	ldw	fp,0(sp)
  805808:	dec00104 	addi	sp,sp,4
  80580c:	f800283a 	ret

00805810 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  805810:	defffb04 	addi	sp,sp,-20
  805814:	dfc00415 	stw	ra,16(sp)
  805818:	df000315 	stw	fp,12(sp)
  80581c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  805820:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805824:	0005303a 	rdctl	r2,status
  805828:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80582c:	e0ffff17 	ldw	r3,-4(fp)
  805830:	00bfff84 	movi	r2,-2
  805834:	1884703a 	and	r2,r3,r2
  805838:	1001703a 	wrctl	status,r2
  
  return context;
  80583c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  805840:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  805844:	d0a70f03 	ldbu	r2,-25540(gp)
  805848:	10803fcc 	andi	r2,r2,255
  80584c:	10001a1e 	bne	r2,zero,8058b8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  805850:	d0a70103 	ldbu	r2,-25596(gp)
  805854:	10803fcc 	andi	r2,r2,255
  805858:	1000171e 	bne	r2,zero,8058b8 <OS_Sched+0xa8>
            OS_SchedNew();
  80585c:	08058e00 	call	8058e0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  805860:	d0e70303 	ldbu	r3,-25588(gp)
  805864:	d0a70343 	ldbu	r2,-25587(gp)
  805868:	18c03fcc 	andi	r3,r3,255
  80586c:	10803fcc 	andi	r2,r2,255
  805870:	18801126 	beq	r3,r2,8058b8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  805874:	d0a70303 	ldbu	r2,-25588(gp)
  805878:	10c03fcc 	andi	r3,r2,255
  80587c:	008020b4 	movhi	r2,130
  805880:	10a1d204 	addi	r2,r2,-30904
  805884:	18c7883a 	add	r3,r3,r3
  805888:	18c7883a 	add	r3,r3,r3
  80588c:	10c5883a 	add	r2,r2,r3
  805890:	10800017 	ldw	r2,0(r2)
  805894:	d0a70b15 	stw	r2,-25556(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  805898:	d0a70b17 	ldw	r2,-25556(gp)
  80589c:	10c00e17 	ldw	r3,56(r2)
  8058a0:	18c00044 	addi	r3,r3,1
  8058a4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  8058a8:	d0a70617 	ldw	r2,-25576(gp)
  8058ac:	10800044 	addi	r2,r2,1
  8058b0:	d0a70615 	stw	r2,-25576(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  8058b4:	080cff00 	call	80cff0 <OSCtxSw>
  8058b8:	e0bffd17 	ldw	r2,-12(fp)
  8058bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8058c0:	e0bffe17 	ldw	r2,-8(fp)
  8058c4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  8058c8:	0001883a 	nop
  8058cc:	e037883a 	mov	sp,fp
  8058d0:	dfc00117 	ldw	ra,4(sp)
  8058d4:	df000017 	ldw	fp,0(sp)
  8058d8:	dec00204 	addi	sp,sp,8
  8058dc:	f800283a 	ret

008058e0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  8058e0:	defffe04 	addi	sp,sp,-8
  8058e4:	df000115 	stw	fp,4(sp)
  8058e8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  8058ec:	d0a70d03 	ldbu	r2,-25548(gp)
  8058f0:	10c03fcc 	andi	r3,r2,255
  8058f4:	00802074 	movhi	r2,129
  8058f8:	10b74d04 	addi	r2,r2,-8908
  8058fc:	10c5883a 	add	r2,r2,r3
  805900:	10800003 	ldbu	r2,0(r2)
  805904:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  805908:	e0bfff03 	ldbu	r2,-4(fp)
  80590c:	100490fa 	slli	r2,r2,3
  805910:	1009883a 	mov	r4,r2
  805914:	e0ffff03 	ldbu	r3,-4(fp)
  805918:	d0a70d44 	addi	r2,gp,-25547
  80591c:	1885883a 	add	r2,r3,r2
  805920:	10800003 	ldbu	r2,0(r2)
  805924:	10c03fcc 	andi	r3,r2,255
  805928:	00802074 	movhi	r2,129
  80592c:	10b74d04 	addi	r2,r2,-8908
  805930:	10c5883a 	add	r2,r2,r3
  805934:	10800003 	ldbu	r2,0(r2)
  805938:	2085883a 	add	r2,r4,r2
  80593c:	d0a70305 	stb	r2,-25588(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  805940:	0001883a 	nop
  805944:	e037883a 	mov	sp,fp
  805948:	df000017 	ldw	fp,0(sp)
  80594c:	dec00104 	addi	sp,sp,4
  805950:	f800283a 	ret

00805954 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  805954:	defffc04 	addi	sp,sp,-16
  805958:	df000315 	stw	fp,12(sp)
  80595c:	df000304 	addi	fp,sp,12
  805960:	e13ffe15 	stw	r4,-8(fp)
  805964:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  805968:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80596c:	00000b06 	br	80599c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  805970:	e0bffe17 	ldw	r2,-8(fp)
  805974:	10c00044 	addi	r3,r2,1
  805978:	e0fffe15 	stw	r3,-8(fp)
  80597c:	e0ffff17 	ldw	r3,-4(fp)
  805980:	19000044 	addi	r4,r3,1
  805984:	e13fff15 	stw	r4,-4(fp)
  805988:	18c00003 	ldbu	r3,0(r3)
  80598c:	10c00005 	stb	r3,0(r2)
        len++;
  805990:	e0bffd03 	ldbu	r2,-12(fp)
  805994:	10800044 	addi	r2,r2,1
  805998:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80599c:	e0bfff17 	ldw	r2,-4(fp)
  8059a0:	10800003 	ldbu	r2,0(r2)
  8059a4:	10803fcc 	andi	r2,r2,255
  8059a8:	103ff11e 	bne	r2,zero,805970 <__alt_data_end+0xff805970>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  8059ac:	e0bffe17 	ldw	r2,-8(fp)
  8059b0:	10000005 	stb	zero,0(r2)
    return (len);
  8059b4:	e0bffd03 	ldbu	r2,-12(fp)
}
  8059b8:	e037883a 	mov	sp,fp
  8059bc:	df000017 	ldw	fp,0(sp)
  8059c0:	dec00104 	addi	sp,sp,4
  8059c4:	f800283a 	ret

008059c8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  8059c8:	defffd04 	addi	sp,sp,-12
  8059cc:	df000215 	stw	fp,8(sp)
  8059d0:	df000204 	addi	fp,sp,8
  8059d4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  8059d8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  8059dc:	00000606 	br	8059f8 <OS_StrLen+0x30>
        psrc++;
  8059e0:	e0bfff17 	ldw	r2,-4(fp)
  8059e4:	10800044 	addi	r2,r2,1
  8059e8:	e0bfff15 	stw	r2,-4(fp)
        len++;
  8059ec:	e0bffe03 	ldbu	r2,-8(fp)
  8059f0:	10800044 	addi	r2,r2,1
  8059f4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  8059f8:	e0bfff17 	ldw	r2,-4(fp)
  8059fc:	10800003 	ldbu	r2,0(r2)
  805a00:	10803fcc 	andi	r2,r2,255
  805a04:	103ff61e 	bne	r2,zero,8059e0 <__alt_data_end+0xff8059e0>
        psrc++;
        len++;
    }
    return (len);
  805a08:	e0bffe03 	ldbu	r2,-8(fp)
}
  805a0c:	e037883a 	mov	sp,fp
  805a10:	df000017 	ldw	fp,0(sp)
  805a14:	dec00104 	addi	sp,sp,4
  805a18:	f800283a 	ret

00805a1c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  805a1c:	defffa04 	addi	sp,sp,-24
  805a20:	dfc00515 	stw	ra,20(sp)
  805a24:	df000415 	stw	fp,16(sp)
  805a28:	df000404 	addi	fp,sp,16
  805a2c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  805a30:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805a34:	0005303a 	rdctl	r2,status
  805a38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805a3c:	e0fffd17 	ldw	r3,-12(fp)
  805a40:	00bfff84 	movi	r2,-2
  805a44:	1884703a 	and	r2,r3,r2
  805a48:	1001703a 	wrctl	status,r2
  
  return context;
  805a4c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  805a50:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  805a54:	d0a70217 	ldw	r2,-25592(gp)
  805a58:	10800044 	addi	r2,r2,1
  805a5c:	d0a70215 	stw	r2,-25592(gp)
  805a60:	e0bffc17 	ldw	r2,-16(fp)
  805a64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805a68:	e0bffe17 	ldw	r2,-8(fp)
  805a6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  805a70:	080d3040 	call	80d304 <OSTaskIdleHook>
    }
  805a74:	003fef06 	br	805a34 <__alt_data_end+0xff805a34>

00805a78 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  805a78:	defffa04 	addi	sp,sp,-24
  805a7c:	dfc00515 	stw	ra,20(sp)
  805a80:	df000415 	stw	fp,16(sp)
  805a84:	df000404 	addi	fp,sp,16
  805a88:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  805a8c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  805a90:	00000206 	br	805a9c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  805a94:	01003204 	movi	r4,200
  805a98:	080b1b80 	call	80b1b8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  805a9c:	d0a71303 	ldbu	r2,-25524(gp)
  805aa0:	10803fcc 	andi	r2,r2,255
  805aa4:	103ffb26 	beq	r2,zero,805a94 <__alt_data_end+0xff805a94>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  805aa8:	d0a70717 	ldw	r2,-25572(gp)
  805aac:	01401904 	movi	r5,100
  805ab0:	1009883a 	mov	r4,r2
  805ab4:	08031500 	call	803150 <__udivsi3>
  805ab8:	d0a70715 	stw	r2,-25572(gp)
    if (OSIdleCtrMax == 0L) {
  805abc:	d0a70717 	ldw	r2,-25572(gp)
  805ac0:	1000031e 	bne	r2,zero,805ad0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  805ac4:	d0270905 	stb	zero,-25564(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  805ac8:	01003fc4 	movi	r4,255
  805acc:	080ae400 	call	80ae40 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805ad0:	0005303a 	rdctl	r2,status
  805ad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ad8:	e0fffd17 	ldw	r3,-12(fp)
  805adc:	00bfff84 	movi	r2,-2
  805ae0:	1884703a 	and	r2,r3,r2
  805ae4:	1001703a 	wrctl	status,r2
  
  return context;
  805ae8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  805aec:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  805af0:	d0a70217 	ldw	r2,-25592(gp)
  805af4:	d0a71415 	stw	r2,-25520(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  805af8:	d0270215 	stw	zero,-25592(gp)
  805afc:	e0bffc17 	ldw	r2,-16(fp)
  805b00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805b04:	e0bffe17 	ldw	r2,-8(fp)
  805b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  805b0c:	d0a71417 	ldw	r2,-25520(gp)
  805b10:	d0e70717 	ldw	r3,-25572(gp)
  805b14:	180b883a 	mov	r5,r3
  805b18:	1009883a 	mov	r4,r2
  805b1c:	08031500 	call	803150 <__udivsi3>
  805b20:	1007883a 	mov	r3,r2
  805b24:	00801904 	movi	r2,100
  805b28:	10c5c83a 	sub	r2,r2,r3
  805b2c:	d0a70905 	stb	r2,-25564(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  805b30:	080d2840 	call	80d284 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  805b34:	0805b440 	call	805b44 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  805b38:	01001904 	movi	r4,100
  805b3c:	080b1b80 	call	80b1b8 <OSTimeDly>
    }
  805b40:	003fe306 	br	805ad0 <__alt_data_end+0xff805ad0>

00805b44 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  805b44:	defffa04 	addi	sp,sp,-24
  805b48:	dfc00515 	stw	ra,20(sp)
  805b4c:	df000415 	stw	fp,16(sp)
  805b50:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  805b54:	e03ffc05 	stb	zero,-16(fp)
  805b58:	00002406 	br	805bec <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  805b5c:	e0bffc03 	ldbu	r2,-16(fp)
  805b60:	e0fffe04 	addi	r3,fp,-8
  805b64:	180b883a 	mov	r5,r3
  805b68:	1009883a 	mov	r4,r2
  805b6c:	080ac800 	call	80ac80 <OSTaskStkChk>
  805b70:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  805b74:	e0bffc43 	ldbu	r2,-15(fp)
  805b78:	1000191e 	bne	r2,zero,805be0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  805b7c:	e0fffc03 	ldbu	r3,-16(fp)
  805b80:	008020b4 	movhi	r2,130
  805b84:	10a1d204 	addi	r2,r2,-30904
  805b88:	18c7883a 	add	r3,r3,r3
  805b8c:	18c7883a 	add	r3,r3,r3
  805b90:	10c5883a 	add	r2,r2,r3
  805b94:	10800017 	ldw	r2,0(r2)
  805b98:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  805b9c:	e0bffd17 	ldw	r2,-12(fp)
  805ba0:	10000f26 	beq	r2,zero,805be0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  805ba4:	e0bffd17 	ldw	r2,-12(fp)
  805ba8:	10800060 	cmpeqi	r2,r2,1
  805bac:	10000c1e 	bne	r2,zero,805be0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  805bb0:	e0bffd17 	ldw	r2,-12(fp)
  805bb4:	10c00217 	ldw	r3,8(r2)
  805bb8:	e0bffd17 	ldw	r2,-12(fp)
  805bbc:	10800317 	ldw	r2,12(r2)
  805bc0:	1085883a 	add	r2,r2,r2
  805bc4:	1085883a 	add	r2,r2,r2
  805bc8:	1887883a 	add	r3,r3,r2
  805bcc:	e0bffd17 	ldw	r2,-12(fp)
  805bd0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  805bd4:	e0ffff17 	ldw	r3,-4(fp)
  805bd8:	e0bffd17 	ldw	r2,-12(fp)
  805bdc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  805be0:	e0bffc03 	ldbu	r2,-16(fp)
  805be4:	10800044 	addi	r2,r2,1
  805be8:	e0bffc05 	stb	r2,-16(fp)
  805bec:	e0bffc03 	ldbu	r2,-16(fp)
  805bf0:	10800570 	cmpltui	r2,r2,21
  805bf4:	103fd91e 	bne	r2,zero,805b5c <__alt_data_end+0xff805b5c>
#endif
                }
            }
        }
    }
}
  805bf8:	0001883a 	nop
  805bfc:	e037883a 	mov	sp,fp
  805c00:	dfc00117 	ldw	ra,4(sp)
  805c04:	df000017 	ldw	fp,0(sp)
  805c08:	dec00204 	addi	sp,sp,8
  805c0c:	f800283a 	ret

00805c10 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  805c10:	defff204 	addi	sp,sp,-56
  805c14:	dfc00d15 	stw	ra,52(sp)
  805c18:	df000c15 	stw	fp,48(sp)
  805c1c:	df000c04 	addi	fp,sp,48
  805c20:	e17ffc15 	stw	r5,-16(fp)
  805c24:	e1bffd15 	stw	r6,-12(fp)
  805c28:	3807883a 	mov	r3,r7
  805c2c:	e0800417 	ldw	r2,16(fp)
  805c30:	e13ffb05 	stb	r4,-20(fp)
  805c34:	e0fffe0d 	sth	r3,-8(fp)
  805c38:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805c3c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805c40:	0005303a 	rdctl	r2,status
  805c44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805c48:	e0fffa17 	ldw	r3,-24(fp)
  805c4c:	00bfff84 	movi	r2,-2
  805c50:	1884703a 	and	r2,r3,r2
  805c54:	1001703a 	wrctl	status,r2
  
  return context;
  805c58:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  805c5c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  805c60:	d0a70817 	ldw	r2,-25568(gp)
  805c64:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  805c68:	e0bff617 	ldw	r2,-40(fp)
  805c6c:	10009326 	beq	r2,zero,805ebc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  805c70:	e0bff617 	ldw	r2,-40(fp)
  805c74:	10800517 	ldw	r2,20(r2)
  805c78:	d0a70815 	stw	r2,-25568(gp)
  805c7c:	e0bff417 	ldw	r2,-48(fp)
  805c80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805c84:	e0bff817 	ldw	r2,-32(fp)
  805c88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  805c8c:	e0bff617 	ldw	r2,-40(fp)
  805c90:	e0fffc17 	ldw	r3,-16(fp)
  805c94:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  805c98:	e0bff617 	ldw	r2,-40(fp)
  805c9c:	e0fffb03 	ldbu	r3,-20(fp)
  805ca0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  805ca4:	e0bff617 	ldw	r2,-40(fp)
  805ca8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  805cac:	e0bff617 	ldw	r2,-40(fp)
  805cb0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  805cb4:	e0bff617 	ldw	r2,-40(fp)
  805cb8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  805cbc:	e0bff617 	ldw	r2,-40(fp)
  805cc0:	e0c00317 	ldw	r3,12(fp)
  805cc4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  805cc8:	e0bff617 	ldw	r2,-40(fp)
  805ccc:	e0c00217 	ldw	r3,8(fp)
  805cd0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  805cd4:	e0bff617 	ldw	r2,-40(fp)
  805cd8:	e0fffd17 	ldw	r3,-12(fp)
  805cdc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  805ce0:	e0bff617 	ldw	r2,-40(fp)
  805ce4:	e0ffff0b 	ldhu	r3,-4(fp)
  805ce8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  805cec:	e0bff617 	ldw	r2,-40(fp)
  805cf0:	e0fffe0b 	ldhu	r3,-8(fp)
  805cf4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  805cf8:	e0bff617 	ldw	r2,-40(fp)
  805cfc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  805d00:	e0bffb03 	ldbu	r2,-20(fp)
  805d04:	1004d0fa 	srli	r2,r2,3
  805d08:	1007883a 	mov	r3,r2
  805d0c:	e0bff617 	ldw	r2,-40(fp)
  805d10:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  805d14:	e0bffb03 	ldbu	r2,-20(fp)
  805d18:	108001cc 	andi	r2,r2,7
  805d1c:	1007883a 	mov	r3,r2
  805d20:	e0bff617 	ldw	r2,-40(fp)
  805d24:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  805d28:	e0bff617 	ldw	r2,-40(fp)
  805d2c:	10800d03 	ldbu	r2,52(r2)
  805d30:	10803fcc 	andi	r2,r2,255
  805d34:	00c00044 	movi	r3,1
  805d38:	1884983a 	sll	r2,r3,r2
  805d3c:	1007883a 	mov	r3,r2
  805d40:	e0bff617 	ldw	r2,-40(fp)
  805d44:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  805d48:	e0bff617 	ldw	r2,-40(fp)
  805d4c:	10800cc3 	ldbu	r2,51(r2)
  805d50:	10803fcc 	andi	r2,r2,255
  805d54:	00c00044 	movi	r3,1
  805d58:	1884983a 	sll	r2,r3,r2
  805d5c:	1007883a 	mov	r3,r2
  805d60:	e0bff617 	ldw	r2,-40(fp)
  805d64:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  805d68:	e0bff617 	ldw	r2,-40(fp)
  805d6c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  805d70:	e0bff617 	ldw	r2,-40(fp)
  805d74:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  805d78:	e0bff617 	ldw	r2,-40(fp)
  805d7c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  805d80:	e0bff617 	ldw	r2,-40(fp)
  805d84:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  805d88:	e0bff617 	ldw	r2,-40(fp)
  805d8c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  805d90:	e0bff617 	ldw	r2,-40(fp)
  805d94:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  805d98:	e0bff617 	ldw	r2,-40(fp)
  805d9c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  805da0:	e0bff617 	ldw	r2,-40(fp)
  805da4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  805da8:	e0bff617 	ldw	r2,-40(fp)
  805dac:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  805db0:	e0bff617 	ldw	r2,-40(fp)
  805db4:	00c00fc4 	movi	r3,63
  805db8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  805dbc:	e0bff617 	ldw	r2,-40(fp)
  805dc0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  805dc4:	e13ff617 	ldw	r4,-40(fp)
  805dc8:	080d3240 	call	80d324 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  805dcc:	e13ff617 	ldw	r4,-40(fp)
  805dd0:	080d21c0 	call	80d21c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805dd4:	0005303a 	rdctl	r2,status
  805dd8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ddc:	e0fff517 	ldw	r3,-44(fp)
  805de0:	00bfff84 	movi	r2,-2
  805de4:	1884703a 	and	r2,r3,r2
  805de8:	1001703a 	wrctl	status,r2
  
  return context;
  805dec:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  805df0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  805df4:	e0fffb03 	ldbu	r3,-20(fp)
  805df8:	008020b4 	movhi	r2,130
  805dfc:	10a1d204 	addi	r2,r2,-30904
  805e00:	18c7883a 	add	r3,r3,r3
  805e04:	18c7883a 	add	r3,r3,r3
  805e08:	10c5883a 	add	r2,r2,r3
  805e0c:	e0fff617 	ldw	r3,-40(fp)
  805e10:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  805e14:	d0e70417 	ldw	r3,-25584(gp)
  805e18:	e0bff617 	ldw	r2,-40(fp)
  805e1c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  805e20:	e0bff617 	ldw	r2,-40(fp)
  805e24:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  805e28:	d0a70417 	ldw	r2,-25584(gp)
  805e2c:	10000326 	beq	r2,zero,805e3c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  805e30:	d0a70417 	ldw	r2,-25584(gp)
  805e34:	e0fff617 	ldw	r3,-40(fp)
  805e38:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  805e3c:	e0bff617 	ldw	r2,-40(fp)
  805e40:	d0a70415 	stw	r2,-25584(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  805e44:	e0bff617 	ldw	r2,-40(fp)
  805e48:	10c00d83 	ldbu	r3,54(r2)
  805e4c:	d0a70d03 	ldbu	r2,-25548(gp)
  805e50:	1884b03a 	or	r2,r3,r2
  805e54:	d0a70d05 	stb	r2,-25548(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  805e58:	e0bff617 	ldw	r2,-40(fp)
  805e5c:	10800d03 	ldbu	r2,52(r2)
  805e60:	10c03fcc 	andi	r3,r2,255
  805e64:	e0bff617 	ldw	r2,-40(fp)
  805e68:	10800d03 	ldbu	r2,52(r2)
  805e6c:	11003fcc 	andi	r4,r2,255
  805e70:	d0a70d44 	addi	r2,gp,-25547
  805e74:	2085883a 	add	r2,r4,r2
  805e78:	11000003 	ldbu	r4,0(r2)
  805e7c:	e0bff617 	ldw	r2,-40(fp)
  805e80:	10800d43 	ldbu	r2,53(r2)
  805e84:	2084b03a 	or	r2,r4,r2
  805e88:	1009883a 	mov	r4,r2
  805e8c:	d0a70d44 	addi	r2,gp,-25547
  805e90:	1885883a 	add	r2,r3,r2
  805e94:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  805e98:	d0a70943 	ldbu	r2,-25563(gp)
  805e9c:	10800044 	addi	r2,r2,1
  805ea0:	d0a70945 	stb	r2,-25563(gp)
  805ea4:	e0bff417 	ldw	r2,-48(fp)
  805ea8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805eac:	e0bff717 	ldw	r2,-36(fp)
  805eb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  805eb4:	0005883a 	mov	r2,zero
  805eb8:	00000506 	br	805ed0 <OS_TCBInit+0x2c0>
  805ebc:	e0bff417 	ldw	r2,-48(fp)
  805ec0:	e0bff915 	stw	r2,-28(fp)
  805ec4:	e0bff917 	ldw	r2,-28(fp)
  805ec8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  805ecc:	00801084 	movi	r2,66
}
  805ed0:	e037883a 	mov	sp,fp
  805ed4:	dfc00117 	ldw	ra,4(sp)
  805ed8:	df000017 	ldw	fp,0(sp)
  805edc:	dec00204 	addi	sp,sp,8
  805ee0:	f800283a 	ret

00805ee4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  805ee4:	defffe04 	addi	sp,sp,-8
  805ee8:	df000115 	stw	fp,4(sp)
  805eec:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  805ef0:	d0a00d04 	addi	r2,gp,-32716
  805ef4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  805ef8:	d0a00e04 	addi	r2,gp,-32712
  805efc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  805f00:	d0a00f84 	addi	r2,gp,-32706
  805f04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  805f08:	d0a01004 	addi	r2,gp,-32704
  805f0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  805f10:	d0a00f04 	addi	r2,gp,-32708
  805f14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  805f18:	d0a01084 	addi	r2,gp,-32702
  805f1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  805f20:	d0a01104 	addi	r2,gp,-32700
  805f24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  805f28:	d0a01184 	addi	r2,gp,-32698
  805f2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  805f30:	d0a01204 	addi	r2,gp,-32696
  805f34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  805f38:	d0a01284 	addi	r2,gp,-32694
  805f3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  805f40:	d0a01304 	addi	r2,gp,-32692
  805f44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  805f48:	d0a01384 	addi	r2,gp,-32690
  805f4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  805f50:	d0a01404 	addi	r2,gp,-32688
  805f54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  805f58:	d0a01484 	addi	r2,gp,-32686
  805f5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  805f60:	d0a01504 	addi	r2,gp,-32684
  805f64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  805f68:	d0a01584 	addi	r2,gp,-32682
  805f6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  805f70:	d0a01604 	addi	r2,gp,-32680
  805f74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  805f78:	d0a01684 	addi	r2,gp,-32678
  805f7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  805f80:	d0a01704 	addi	r2,gp,-32676
  805f84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  805f88:	d0a01784 	addi	r2,gp,-32674
  805f8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  805f90:	d0a01804 	addi	r2,gp,-32672
  805f94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  805f98:	d0a01884 	addi	r2,gp,-32670
  805f9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  805fa0:	d0a01904 	addi	r2,gp,-32668
  805fa4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  805fa8:	d0a01984 	addi	r2,gp,-32666
  805fac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  805fb0:	d0a01a04 	addi	r2,gp,-32664
  805fb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  805fb8:	d0a01a84 	addi	r2,gp,-32662
  805fbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  805fc0:	d0a01b04 	addi	r2,gp,-32660
  805fc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  805fc8:	d0a01b84 	addi	r2,gp,-32658
  805fcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  805fd0:	d0a01c04 	addi	r2,gp,-32656
  805fd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  805fd8:	d0a01c84 	addi	r2,gp,-32654
  805fdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  805fe0:	d0a01d04 	addi	r2,gp,-32652
  805fe4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  805fe8:	d0a01d84 	addi	r2,gp,-32650
  805fec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  805ff0:	d0a01e04 	addi	r2,gp,-32648
  805ff4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  805ff8:	d0a01e84 	addi	r2,gp,-32646
  805ffc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  806000:	d0a01f04 	addi	r2,gp,-32644
  806004:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  806008:	d0a01f84 	addi	r2,gp,-32642
  80600c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  806010:	d0a02004 	addi	r2,gp,-32640
  806014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  806018:	d0a02084 	addi	r2,gp,-32638
  80601c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  806020:	d0a02104 	addi	r2,gp,-32636
  806024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  806028:	d0a02184 	addi	r2,gp,-32634
  80602c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  806030:	d0a02204 	addi	r2,gp,-32632
  806034:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  806038:	d0a02284 	addi	r2,gp,-32630
  80603c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  806040:	d0a02304 	addi	r2,gp,-32628
  806044:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  806048:	d0a02384 	addi	r2,gp,-32626
  80604c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  806050:	d0a02404 	addi	r2,gp,-32624
  806054:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  806058:	d0a02904 	addi	r2,gp,-32604
  80605c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  806060:	0001883a 	nop
  806064:	e037883a 	mov	sp,fp
  806068:	df000017 	ldw	fp,0(sp)
  80606c:	dec00104 	addi	sp,sp,4
  806070:	f800283a 	ret

00806074 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  806074:	defff204 	addi	sp,sp,-56
  806078:	df000d15 	stw	fp,52(sp)
  80607c:	df000d04 	addi	fp,sp,52
  806080:	e13ffc15 	stw	r4,-16(fp)
  806084:	2807883a 	mov	r3,r5
  806088:	3005883a 	mov	r2,r6
  80608c:	e1ffff15 	stw	r7,-4(fp)
  806090:	e0fffd0d 	sth	r3,-12(fp)
  806094:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  806098:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80609c:	e0bfff17 	ldw	r2,-4(fp)
  8060a0:	1000021e 	bne	r2,zero,8060ac <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  8060a4:	0005883a 	mov	r2,zero
  8060a8:	0000b006 	br	80636c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8060ac:	e0bffc17 	ldw	r2,-16(fp)
  8060b0:	1000051e 	bne	r2,zero,8060c8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8060b4:	e0bfff17 	ldw	r2,-4(fp)
  8060b8:	00c01b84 	movi	r3,110
  8060bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8060c0:	0005883a 	mov	r2,zero
  8060c4:	0000a906 	br	80636c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8060c8:	e0bffc17 	ldw	r2,-16(fp)
  8060cc:	10800003 	ldbu	r2,0(r2)
  8060d0:	10803fcc 	andi	r2,r2,255
  8060d4:	10800160 	cmpeqi	r2,r2,5
  8060d8:	1000051e 	bne	r2,zero,8060f0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  8060dc:	e0bfff17 	ldw	r2,-4(fp)
  8060e0:	00c00044 	movi	r3,1
  8060e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8060e8:	0005883a 	mov	r2,zero
  8060ec:	00009f06 	br	80636c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  8060f0:	e0fffe03 	ldbu	r3,-8(fp)
  8060f4:	00bfe004 	movi	r2,-128
  8060f8:	1884703a 	and	r2,r3,r2
  8060fc:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  806100:	e0bff503 	ldbu	r2,-44(fp)
  806104:	10000626 	beq	r2,zero,806120 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  806108:	e0bffe03 	ldbu	r2,-8(fp)
  80610c:	10801fcc 	andi	r2,r2,127
  806110:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  806114:	00800044 	movi	r2,1
  806118:	e0bff385 	stb	r2,-50(fp)
  80611c:	00000106 	br	806124 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  806120:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  806124:	e0bfff17 	ldw	r2,-4(fp)
  806128:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80612c:	0005303a 	rdctl	r2,status
  806130:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806134:	e0fffb17 	ldw	r3,-20(fp)
  806138:	00bfff84 	movi	r2,-2
  80613c:	1884703a 	and	r2,r3,r2
  806140:	1001703a 	wrctl	status,r2
  
  return context;
  806144:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  806148:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  80614c:	e0bffe03 	ldbu	r2,-8(fp)
  806150:	10c00060 	cmpeqi	r3,r2,1
  806154:	18005f1e 	bne	r3,zero,8062d4 <OSFlagAccept+0x260>
  806158:	10c00088 	cmpgei	r3,r2,2
  80615c:	1800021e 	bne	r3,zero,806168 <OSFlagAccept+0xf4>
  806160:	10003f26 	beq	r2,zero,806260 <OSFlagAccept+0x1ec>
  806164:	00007706 	br	806344 <OSFlagAccept+0x2d0>
  806168:	10c000a0 	cmpeqi	r3,r2,2
  80616c:	1800031e 	bne	r3,zero,80617c <OSFlagAccept+0x108>
  806170:	108000e0 	cmpeqi	r2,r2,3
  806174:	10001e1e 	bne	r2,zero,8061f0 <OSFlagAccept+0x17c>
  806178:	00007206 	br	806344 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80617c:	e0bffc17 	ldw	r2,-16(fp)
  806180:	10c0020b 	ldhu	r3,8(r2)
  806184:	e0bffd0b 	ldhu	r2,-12(fp)
  806188:	1884703a 	and	r2,r3,r2
  80618c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  806190:	e0fff30b 	ldhu	r3,-52(fp)
  806194:	e0bffd0b 	ldhu	r2,-12(fp)
  806198:	18800d1e 	bne	r3,r2,8061d0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80619c:	e0bff383 	ldbu	r2,-50(fp)
  8061a0:	10800058 	cmpnei	r2,r2,1
  8061a4:	10000d1e 	bne	r2,zero,8061dc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8061a8:	e0bffc17 	ldw	r2,-16(fp)
  8061ac:	1080020b 	ldhu	r2,8(r2)
  8061b0:	1007883a 	mov	r3,r2
  8061b4:	e0bff30b 	ldhu	r2,-52(fp)
  8061b8:	0084303a 	nor	r2,zero,r2
  8061bc:	1884703a 	and	r2,r3,r2
  8061c0:	1007883a 	mov	r3,r2
  8061c4:	e0bffc17 	ldw	r2,-16(fp)
  8061c8:	10c0020d 	sth	r3,8(r2)
  8061cc:	00000306 	br	8061dc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8061d0:	e0bfff17 	ldw	r2,-4(fp)
  8061d4:	00c01c04 	movi	r3,112
  8061d8:	10c00005 	stb	r3,0(r2)
  8061dc:	e0bff417 	ldw	r2,-48(fp)
  8061e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8061e4:	e0bff617 	ldw	r2,-40(fp)
  8061e8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8061ec:	00005e06 	br	806368 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  8061f0:	e0bffc17 	ldw	r2,-16(fp)
  8061f4:	10c0020b 	ldhu	r3,8(r2)
  8061f8:	e0bffd0b 	ldhu	r2,-12(fp)
  8061fc:	1884703a 	and	r2,r3,r2
  806200:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  806204:	e0bff30b 	ldhu	r2,-52(fp)
  806208:	10000d26 	beq	r2,zero,806240 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80620c:	e0bff383 	ldbu	r2,-50(fp)
  806210:	10800058 	cmpnei	r2,r2,1
  806214:	10000d1e 	bne	r2,zero,80624c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  806218:	e0bffc17 	ldw	r2,-16(fp)
  80621c:	1080020b 	ldhu	r2,8(r2)
  806220:	1007883a 	mov	r3,r2
  806224:	e0bff30b 	ldhu	r2,-52(fp)
  806228:	0084303a 	nor	r2,zero,r2
  80622c:	1884703a 	and	r2,r3,r2
  806230:	1007883a 	mov	r3,r2
  806234:	e0bffc17 	ldw	r2,-16(fp)
  806238:	10c0020d 	sth	r3,8(r2)
  80623c:	00000306 	br	80624c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  806240:	e0bfff17 	ldw	r2,-4(fp)
  806244:	00c01c04 	movi	r3,112
  806248:	10c00005 	stb	r3,0(r2)
  80624c:	e0bff417 	ldw	r2,-48(fp)
  806250:	e0bff715 	stw	r2,-36(fp)
  806254:	e0bff717 	ldw	r2,-36(fp)
  806258:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80625c:	00004206 	br	806368 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  806260:	e0bffc17 	ldw	r2,-16(fp)
  806264:	1080020b 	ldhu	r2,8(r2)
  806268:	0084303a 	nor	r2,zero,r2
  80626c:	1007883a 	mov	r3,r2
  806270:	e0bffd0b 	ldhu	r2,-12(fp)
  806274:	1884703a 	and	r2,r3,r2
  806278:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80627c:	e0fff30b 	ldhu	r3,-52(fp)
  806280:	e0bffd0b 	ldhu	r2,-12(fp)
  806284:	18800b1e 	bne	r3,r2,8062b4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806288:	e0bff383 	ldbu	r2,-50(fp)
  80628c:	10800058 	cmpnei	r2,r2,1
  806290:	10000b1e 	bne	r2,zero,8062c0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  806294:	e0bffc17 	ldw	r2,-16(fp)
  806298:	10c0020b 	ldhu	r3,8(r2)
  80629c:	e0bff30b 	ldhu	r2,-52(fp)
  8062a0:	1884b03a 	or	r2,r3,r2
  8062a4:	1007883a 	mov	r3,r2
  8062a8:	e0bffc17 	ldw	r2,-16(fp)
  8062ac:	10c0020d 	sth	r3,8(r2)
  8062b0:	00000306 	br	8062c0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  8062b4:	e0bfff17 	ldw	r2,-4(fp)
  8062b8:	00c01c04 	movi	r3,112
  8062bc:	10c00005 	stb	r3,0(r2)
  8062c0:	e0bff417 	ldw	r2,-48(fp)
  8062c4:	e0bff815 	stw	r2,-32(fp)
  8062c8:	e0bff817 	ldw	r2,-32(fp)
  8062cc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  8062d0:	00002506 	br	806368 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8062d4:	e0bffc17 	ldw	r2,-16(fp)
  8062d8:	1080020b 	ldhu	r2,8(r2)
  8062dc:	0084303a 	nor	r2,zero,r2
  8062e0:	1007883a 	mov	r3,r2
  8062e4:	e0bffd0b 	ldhu	r2,-12(fp)
  8062e8:	1884703a 	and	r2,r3,r2
  8062ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8062f0:	e0bff30b 	ldhu	r2,-52(fp)
  8062f4:	10000b26 	beq	r2,zero,806324 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8062f8:	e0bff383 	ldbu	r2,-50(fp)
  8062fc:	10800058 	cmpnei	r2,r2,1
  806300:	10000b1e 	bne	r2,zero,806330 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  806304:	e0bffc17 	ldw	r2,-16(fp)
  806308:	10c0020b 	ldhu	r3,8(r2)
  80630c:	e0bff30b 	ldhu	r2,-52(fp)
  806310:	1884b03a 	or	r2,r3,r2
  806314:	1007883a 	mov	r3,r2
  806318:	e0bffc17 	ldw	r2,-16(fp)
  80631c:	10c0020d 	sth	r3,8(r2)
  806320:	00000306 	br	806330 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  806324:	e0bfff17 	ldw	r2,-4(fp)
  806328:	00c01c04 	movi	r3,112
  80632c:	10c00005 	stb	r3,0(r2)
  806330:	e0bff417 	ldw	r2,-48(fp)
  806334:	e0bff915 	stw	r2,-28(fp)
  806338:	e0bff917 	ldw	r2,-28(fp)
  80633c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  806340:	00000906 	br	806368 <OSFlagAccept+0x2f4>
  806344:	e0bff417 	ldw	r2,-48(fp)
  806348:	e0bffa15 	stw	r2,-24(fp)
  80634c:	e0bffa17 	ldw	r2,-24(fp)
  806350:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  806354:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  806358:	e0bfff17 	ldw	r2,-4(fp)
  80635c:	00c01bc4 	movi	r3,111
  806360:	10c00005 	stb	r3,0(r2)
             break;
  806364:	0001883a 	nop
    }
    return (flags_rdy);
  806368:	e0bff30b 	ldhu	r2,-52(fp)
}
  80636c:	e037883a 	mov	sp,fp
  806370:	df000017 	ldw	fp,0(sp)
  806374:	dec00104 	addi	sp,sp,4
  806378:	f800283a 	ret

0080637c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80637c:	defff804 	addi	sp,sp,-32
  806380:	df000715 	stw	fp,28(sp)
  806384:	df000704 	addi	fp,sp,28
  806388:	2005883a 	mov	r2,r4
  80638c:	e17fff15 	stw	r5,-4(fp)
  806390:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  806394:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  806398:	e0bfff17 	ldw	r2,-4(fp)
  80639c:	1000021e 	bne	r2,zero,8063a8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  8063a0:	0005883a 	mov	r2,zero
  8063a4:	00003306 	br	806474 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  8063a8:	d0a70f03 	ldbu	r2,-25540(gp)
  8063ac:	10803fcc 	andi	r2,r2,255
  8063b0:	10000526 	beq	r2,zero,8063c8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  8063b4:	e0bfff17 	ldw	r2,-4(fp)
  8063b8:	00c00404 	movi	r3,16
  8063bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  8063c0:	0005883a 	mov	r2,zero
  8063c4:	00002b06 	br	806474 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8063c8:	0005303a 	rdctl	r2,status
  8063cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8063d0:	e0fffd17 	ldw	r3,-12(fp)
  8063d4:	00bfff84 	movi	r2,-2
  8063d8:	1884703a 	and	r2,r3,r2
  8063dc:	1001703a 	wrctl	status,r2
  
  return context;
  8063e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8063e4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  8063e8:	d0a71217 	ldw	r2,-25528(gp)
  8063ec:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  8063f0:	e0bffb17 	ldw	r2,-20(fp)
  8063f4:	10001726 	beq	r2,zero,806454 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  8063f8:	d0a71217 	ldw	r2,-25528(gp)
  8063fc:	10800117 	ldw	r2,4(r2)
  806400:	d0a71215 	stw	r2,-25528(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  806404:	e0bffb17 	ldw	r2,-20(fp)
  806408:	00c00144 	movi	r3,5
  80640c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  806410:	e0bffb17 	ldw	r2,-20(fp)
  806414:	e0fffe0b 	ldhu	r3,-8(fp)
  806418:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80641c:	e0bffb17 	ldw	r2,-20(fp)
  806420:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  806424:	e0bffb17 	ldw	r2,-20(fp)
  806428:	00c00fc4 	movi	r3,63
  80642c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  806430:	e0bffb17 	ldw	r2,-20(fp)
  806434:	100002c5 	stb	zero,11(r2)
  806438:	e0bff917 	ldw	r2,-28(fp)
  80643c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806440:	e0bffa17 	ldw	r2,-24(fp)
  806444:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  806448:	e0bfff17 	ldw	r2,-4(fp)
  80644c:	10000005 	stb	zero,0(r2)
  806450:	00000706 	br	806470 <OSFlagCreate+0xf4>
  806454:	e0bff917 	ldw	r2,-28(fp)
  806458:	e0bffc15 	stw	r2,-16(fp)
  80645c:	e0bffc17 	ldw	r2,-16(fp)
  806460:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  806464:	e0bfff17 	ldw	r2,-4(fp)
  806468:	00c01c84 	movi	r3,114
  80646c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  806470:	e0bffb17 	ldw	r2,-20(fp)
}
  806474:	e037883a 	mov	sp,fp
  806478:	df000017 	ldw	fp,0(sp)
  80647c:	dec00104 	addi	sp,sp,4
  806480:	f800283a 	ret

00806484 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  806484:	defff204 	addi	sp,sp,-56
  806488:	dfc00d15 	stw	ra,52(sp)
  80648c:	df000c15 	stw	fp,48(sp)
  806490:	df000c04 	addi	fp,sp,48
  806494:	e13ffd15 	stw	r4,-12(fp)
  806498:	2805883a 	mov	r2,r5
  80649c:	e1bfff15 	stw	r6,-4(fp)
  8064a0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8064a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8064a8:	e0bfff17 	ldw	r2,-4(fp)
  8064ac:	1000021e 	bne	r2,zero,8064b8 <OSFlagDel+0x34>
        return (pgrp);
  8064b0:	e0bffd17 	ldw	r2,-12(fp)
  8064b4:	00008006 	br	8066b8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8064b8:	e0bffd17 	ldw	r2,-12(fp)
  8064bc:	1000051e 	bne	r2,zero,8064d4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8064c0:	e0bfff17 	ldw	r2,-4(fp)
  8064c4:	00c01b84 	movi	r3,110
  8064c8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  8064cc:	e0bffd17 	ldw	r2,-12(fp)
  8064d0:	00007906 	br	8066b8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8064d4:	d0a70f03 	ldbu	r2,-25540(gp)
  8064d8:	10803fcc 	andi	r2,r2,255
  8064dc:	10000526 	beq	r2,zero,8064f4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  8064e0:	e0bfff17 	ldw	r2,-4(fp)
  8064e4:	00c003c4 	movi	r3,15
  8064e8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  8064ec:	e0bffd17 	ldw	r2,-12(fp)
  8064f0:	00007106 	br	8066b8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  8064f4:	e0bffd17 	ldw	r2,-12(fp)
  8064f8:	10800003 	ldbu	r2,0(r2)
  8064fc:	10803fcc 	andi	r2,r2,255
  806500:	10800160 	cmpeqi	r2,r2,5
  806504:	1000051e 	bne	r2,zero,80651c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  806508:	e0bfff17 	ldw	r2,-4(fp)
  80650c:	00c00044 	movi	r3,1
  806510:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  806514:	e0bffd17 	ldw	r2,-12(fp)
  806518:	00006706 	br	8066b8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80651c:	0005303a 	rdctl	r2,status
  806520:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806524:	e0fffc17 	ldw	r3,-16(fp)
  806528:	00bfff84 	movi	r2,-2
  80652c:	1884703a 	and	r2,r3,r2
  806530:	1001703a 	wrctl	status,r2
  
  return context;
  806534:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806538:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80653c:	e0bffd17 	ldw	r2,-12(fp)
  806540:	10800117 	ldw	r2,4(r2)
  806544:	10000326 	beq	r2,zero,806554 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  806548:	00800044 	movi	r2,1
  80654c:	e0bff405 	stb	r2,-48(fp)
  806550:	00000106 	br	806558 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  806554:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  806558:	e0bffe03 	ldbu	r2,-8(fp)
  80655c:	10000326 	beq	r2,zero,80656c <OSFlagDel+0xe8>
  806560:	10800060 	cmpeqi	r2,r2,1
  806564:	1000231e 	bne	r2,zero,8065f4 <OSFlagDel+0x170>
  806568:	00004806 	br	80668c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80656c:	e0bff403 	ldbu	r2,-48(fp)
  806570:	1000161e 	bne	r2,zero,8065cc <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  806574:	e0bffd17 	ldw	r2,-12(fp)
  806578:	00c00fc4 	movi	r3,63
  80657c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  806580:	e0bffd17 	ldw	r2,-12(fp)
  806584:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  806588:	e0bffd17 	ldw	r2,-12(fp)
  80658c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  806590:	d0e71217 	ldw	r3,-25528(gp)
  806594:	e0bffd17 	ldw	r2,-12(fp)
  806598:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80659c:	e0bffd17 	ldw	r2,-12(fp)
  8065a0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  8065a4:	e0bffd17 	ldw	r2,-12(fp)
  8065a8:	d0a71215 	stw	r2,-25528(gp)
  8065ac:	e0bff717 	ldw	r2,-36(fp)
  8065b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8065b4:	e0bff817 	ldw	r2,-32(fp)
  8065b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  8065bc:	e0bfff17 	ldw	r2,-4(fp)
  8065c0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  8065c4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  8065c8:	00003a06 	br	8066b4 <OSFlagDel+0x230>
  8065cc:	e0bff717 	ldw	r2,-36(fp)
  8065d0:	e0bff915 	stw	r2,-28(fp)
  8065d4:	e0bff917 	ldw	r2,-28(fp)
  8065d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  8065dc:	e0bfff17 	ldw	r2,-4(fp)
  8065e0:	00c01244 	movi	r3,73
  8065e4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  8065e8:	e0bffd17 	ldw	r2,-12(fp)
  8065ec:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  8065f0:	00003006 	br	8066b4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8065f4:	e0bffd17 	ldw	r2,-12(fp)
  8065f8:	10800117 	ldw	r2,4(r2)
  8065fc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  806600:	00000606 	br	80661c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  806604:	000b883a 	mov	r5,zero
  806608:	e13ff517 	ldw	r4,-44(fp)
  80660c:	08075f00 	call	8075f0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  806610:	e0bff517 	ldw	r2,-44(fp)
  806614:	10800017 	ldw	r2,0(r2)
  806618:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80661c:	e0bff517 	ldw	r2,-44(fp)
  806620:	103ff81e 	bne	r2,zero,806604 <__alt_data_end+0xff806604>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  806624:	e0bffd17 	ldw	r2,-12(fp)
  806628:	00c00fc4 	movi	r3,63
  80662c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  806630:	e0bffd17 	ldw	r2,-12(fp)
  806634:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  806638:	e0bffd17 	ldw	r2,-12(fp)
  80663c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  806640:	d0e71217 	ldw	r3,-25528(gp)
  806644:	e0bffd17 	ldw	r2,-12(fp)
  806648:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80664c:	e0bffd17 	ldw	r2,-12(fp)
  806650:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  806654:	e0bffd17 	ldw	r2,-12(fp)
  806658:	d0a71215 	stw	r2,-25528(gp)
  80665c:	e0bff717 	ldw	r2,-36(fp)
  806660:	e0bffa15 	stw	r2,-24(fp)
  806664:	e0bffa17 	ldw	r2,-24(fp)
  806668:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80666c:	e0bff403 	ldbu	r2,-48(fp)
  806670:	10800058 	cmpnei	r2,r2,1
  806674:	1000011e 	bne	r2,zero,80667c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  806678:	08058100 	call	805810 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80667c:	e0bfff17 	ldw	r2,-4(fp)
  806680:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  806684:	e03ff615 	stw	zero,-40(fp)
             break;
  806688:	00000a06 	br	8066b4 <OSFlagDel+0x230>
  80668c:	e0bff717 	ldw	r2,-36(fp)
  806690:	e0bffb15 	stw	r2,-20(fp)
  806694:	e0bffb17 	ldw	r2,-20(fp)
  806698:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80669c:	e0bfff17 	ldw	r2,-4(fp)
  8066a0:	00c001c4 	movi	r3,7
  8066a4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  8066a8:	e0bffd17 	ldw	r2,-12(fp)
  8066ac:	e0bff615 	stw	r2,-40(fp)
             break;
  8066b0:	0001883a 	nop
    }
    return (pgrp_return);
  8066b4:	e0bff617 	ldw	r2,-40(fp)
}
  8066b8:	e037883a 	mov	sp,fp
  8066bc:	dfc00117 	ldw	ra,4(sp)
  8066c0:	df000017 	ldw	fp,0(sp)
  8066c4:	dec00204 	addi	sp,sp,8
  8066c8:	f800283a 	ret

008066cc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8066cc:	defff604 	addi	sp,sp,-40
  8066d0:	dfc00915 	stw	ra,36(sp)
  8066d4:	df000815 	stw	fp,32(sp)
  8066d8:	df000804 	addi	fp,sp,32
  8066dc:	e13ffd15 	stw	r4,-12(fp)
  8066e0:	e17ffe15 	stw	r5,-8(fp)
  8066e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8066e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8066ec:	e0bfff17 	ldw	r2,-4(fp)
  8066f0:	1000021e 	bne	r2,zero,8066fc <OSFlagNameGet+0x30>
        return (0);
  8066f4:	0005883a 	mov	r2,zero
  8066f8:	00003906 	br	8067e0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  8066fc:	e0bffd17 	ldw	r2,-12(fp)
  806700:	1000051e 	bne	r2,zero,806718 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806704:	e0bfff17 	ldw	r2,-4(fp)
  806708:	00c01b84 	movi	r3,110
  80670c:	10c00005 	stb	r3,0(r2)
        return (0);
  806710:	0005883a 	mov	r2,zero
  806714:	00003206 	br	8067e0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  806718:	e0bffe17 	ldw	r2,-8(fp)
  80671c:	1000051e 	bne	r2,zero,806734 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  806720:	e0bfff17 	ldw	r2,-4(fp)
  806724:	00c00304 	movi	r3,12
  806728:	10c00005 	stb	r3,0(r2)
        return (0);
  80672c:	0005883a 	mov	r2,zero
  806730:	00002b06 	br	8067e0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  806734:	d0a70f03 	ldbu	r2,-25540(gp)
  806738:	10803fcc 	andi	r2,r2,255
  80673c:	10000526 	beq	r2,zero,806754 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  806740:	e0bfff17 	ldw	r2,-4(fp)
  806744:	00c00444 	movi	r3,17
  806748:	10c00005 	stb	r3,0(r2)
        return (0);
  80674c:	0005883a 	mov	r2,zero
  806750:	00002306 	br	8067e0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806754:	0005303a 	rdctl	r2,status
  806758:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80675c:	e0fffc17 	ldw	r3,-16(fp)
  806760:	00bfff84 	movi	r2,-2
  806764:	1884703a 	and	r2,r3,r2
  806768:	1001703a 	wrctl	status,r2
  
  return context;
  80676c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806770:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  806774:	e0bffd17 	ldw	r2,-12(fp)
  806778:	10800003 	ldbu	r2,0(r2)
  80677c:	10803fcc 	andi	r2,r2,255
  806780:	10800160 	cmpeqi	r2,r2,5
  806784:	1000091e 	bne	r2,zero,8067ac <OSFlagNameGet+0xe0>
  806788:	e0bff817 	ldw	r2,-32(fp)
  80678c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806790:	e0bff917 	ldw	r2,-28(fp)
  806794:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  806798:	e0bfff17 	ldw	r2,-4(fp)
  80679c:	00c00044 	movi	r3,1
  8067a0:	10c00005 	stb	r3,0(r2)
        return (0);
  8067a4:	0005883a 	mov	r2,zero
  8067a8:	00000d06 	br	8067e0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  8067ac:	e0bffd17 	ldw	r2,-12(fp)
  8067b0:	10800284 	addi	r2,r2,10
  8067b4:	100b883a 	mov	r5,r2
  8067b8:	e13ffe17 	ldw	r4,-8(fp)
  8067bc:	08059540 	call	805954 <OS_StrCopy>
  8067c0:	e0bffb05 	stb	r2,-20(fp)
  8067c4:	e0bff817 	ldw	r2,-32(fp)
  8067c8:	e0bffa15 	stw	r2,-24(fp)
  8067cc:	e0bffa17 	ldw	r2,-24(fp)
  8067d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8067d4:	e0bfff17 	ldw	r2,-4(fp)
  8067d8:	10000005 	stb	zero,0(r2)
    return (len);
  8067dc:	e0bffb03 	ldbu	r2,-20(fp)
}
  8067e0:	e037883a 	mov	sp,fp
  8067e4:	dfc00117 	ldw	ra,4(sp)
  8067e8:	df000017 	ldw	fp,0(sp)
  8067ec:	dec00204 	addi	sp,sp,8
  8067f0:	f800283a 	ret

008067f4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8067f4:	defff504 	addi	sp,sp,-44
  8067f8:	dfc00a15 	stw	ra,40(sp)
  8067fc:	df000915 	stw	fp,36(sp)
  806800:	df000904 	addi	fp,sp,36
  806804:	e13ffd15 	stw	r4,-12(fp)
  806808:	e17ffe15 	stw	r5,-8(fp)
  80680c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  806810:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  806814:	e0bfff17 	ldw	r2,-4(fp)
  806818:	10004326 	beq	r2,zero,806928 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80681c:	e0bffd17 	ldw	r2,-12(fp)
  806820:	1000041e 	bne	r2,zero,806834 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806824:	e0bfff17 	ldw	r2,-4(fp)
  806828:	00c01b84 	movi	r3,110
  80682c:	10c00005 	stb	r3,0(r2)
        return;
  806830:	00003e06 	br	80692c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  806834:	e0bffe17 	ldw	r2,-8(fp)
  806838:	1000041e 	bne	r2,zero,80684c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  80683c:	e0bfff17 	ldw	r2,-4(fp)
  806840:	00c00304 	movi	r3,12
  806844:	10c00005 	stb	r3,0(r2)
        return;
  806848:	00003806 	br	80692c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80684c:	d0a70f03 	ldbu	r2,-25540(gp)
  806850:	10803fcc 	andi	r2,r2,255
  806854:	10000426 	beq	r2,zero,806868 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  806858:	e0bfff17 	ldw	r2,-4(fp)
  80685c:	00c00484 	movi	r3,18
  806860:	10c00005 	stb	r3,0(r2)
        return;
  806864:	00003106 	br	80692c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806868:	0005303a 	rdctl	r2,status
  80686c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806870:	e0fffc17 	ldw	r3,-16(fp)
  806874:	00bfff84 	movi	r2,-2
  806878:	1884703a 	and	r2,r3,r2
  80687c:	1001703a 	wrctl	status,r2
  
  return context;
  806880:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806884:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  806888:	e0bffd17 	ldw	r2,-12(fp)
  80688c:	10800003 	ldbu	r2,0(r2)
  806890:	10803fcc 	andi	r2,r2,255
  806894:	10800160 	cmpeqi	r2,r2,5
  806898:	1000081e 	bne	r2,zero,8068bc <OSFlagNameSet+0xc8>
  80689c:	e0bff717 	ldw	r2,-36(fp)
  8068a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8068a4:	e0bff817 	ldw	r2,-32(fp)
  8068a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  8068ac:	e0bfff17 	ldw	r2,-4(fp)
  8068b0:	00c00044 	movi	r3,1
  8068b4:	10c00005 	stb	r3,0(r2)
        return;
  8068b8:	00001c06 	br	80692c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  8068bc:	e13ffe17 	ldw	r4,-8(fp)
  8068c0:	08059c80 	call	8059c8 <OS_StrLen>
  8068c4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  8068c8:	e0bffa03 	ldbu	r2,-24(fp)
  8068cc:	10800830 	cmpltui	r2,r2,32
  8068d0:	1000081e 	bne	r2,zero,8068f4 <OSFlagNameSet+0x100>
  8068d4:	e0bff717 	ldw	r2,-36(fp)
  8068d8:	e0bff915 	stw	r2,-28(fp)
  8068dc:	e0bff917 	ldw	r2,-28(fp)
  8068e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  8068e4:	e0bfff17 	ldw	r2,-4(fp)
  8068e8:	00c01cc4 	movi	r3,115
  8068ec:	10c00005 	stb	r3,0(r2)
        return;
  8068f0:	00000e06 	br	80692c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  8068f4:	e0bffd17 	ldw	r2,-12(fp)
  8068f8:	10800284 	addi	r2,r2,10
  8068fc:	e17ffe17 	ldw	r5,-8(fp)
  806900:	1009883a 	mov	r4,r2
  806904:	08059540 	call	805954 <OS_StrCopy>
  806908:	e0bff717 	ldw	r2,-36(fp)
  80690c:	e0bffb15 	stw	r2,-20(fp)
  806910:	e0bffb17 	ldw	r2,-20(fp)
  806914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  806918:	e0bfff17 	ldw	r2,-4(fp)
  80691c:	10000005 	stb	zero,0(r2)
    return;
  806920:	0001883a 	nop
  806924:	00000106 	br	80692c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  806928:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  80692c:	e037883a 	mov	sp,fp
  806930:	dfc00117 	ldw	ra,4(sp)
  806934:	df000017 	ldw	fp,0(sp)
  806938:	dec00204 	addi	sp,sp,8
  80693c:	f800283a 	ret

00806940 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  806940:	deffe104 	addi	sp,sp,-124
  806944:	dfc01e15 	stw	ra,120(sp)
  806948:	df001d15 	stw	fp,116(sp)
  80694c:	df001d04 	addi	fp,sp,116
  806950:	e13ffc15 	stw	r4,-16(fp)
  806954:	2809883a 	mov	r4,r5
  806958:	3007883a 	mov	r3,r6
  80695c:	3805883a 	mov	r2,r7
  806960:	e13ffd0d 	sth	r4,-12(fp)
  806964:	e0fffe05 	stb	r3,-8(fp)
  806968:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80696c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  806970:	e0800217 	ldw	r2,8(fp)
  806974:	1000021e 	bne	r2,zero,806980 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  806978:	0005883a 	mov	r2,zero
  80697c:	00015906 	br	806ee4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  806980:	e0bffc17 	ldw	r2,-16(fp)
  806984:	1000051e 	bne	r2,zero,80699c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806988:	e0800217 	ldw	r2,8(fp)
  80698c:	00c01b84 	movi	r3,110
  806990:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  806994:	0005883a 	mov	r2,zero
  806998:	00015206 	br	806ee4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80699c:	d0a70f03 	ldbu	r2,-25540(gp)
  8069a0:	10803fcc 	andi	r2,r2,255
  8069a4:	10000526 	beq	r2,zero,8069bc <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  8069a8:	e0800217 	ldw	r2,8(fp)
  8069ac:	00c00084 	movi	r3,2
  8069b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8069b4:	0005883a 	mov	r2,zero
  8069b8:	00014a06 	br	806ee4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8069bc:	d0a70103 	ldbu	r2,-25596(gp)
  8069c0:	10803fcc 	andi	r2,r2,255
  8069c4:	10000526 	beq	r2,zero,8069dc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  8069c8:	e0800217 	ldw	r2,8(fp)
  8069cc:	00c00344 	movi	r3,13
  8069d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8069d4:	0005883a 	mov	r2,zero
  8069d8:	00014206 	br	806ee4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8069dc:	e0bffc17 	ldw	r2,-16(fp)
  8069e0:	10800003 	ldbu	r2,0(r2)
  8069e4:	10803fcc 	andi	r2,r2,255
  8069e8:	10800160 	cmpeqi	r2,r2,5
  8069ec:	1000051e 	bne	r2,zero,806a04 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  8069f0:	e0800217 	ldw	r2,8(fp)
  8069f4:	00c00044 	movi	r3,1
  8069f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8069fc:	0005883a 	mov	r2,zero
  806a00:	00013806 	br	806ee4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  806a04:	e0fffe03 	ldbu	r3,-8(fp)
  806a08:	00bfe004 	movi	r2,-128
  806a0c:	1884703a 	and	r2,r3,r2
  806a10:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  806a14:	e0bfe603 	ldbu	r2,-104(fp)
  806a18:	10000626 	beq	r2,zero,806a34 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  806a1c:	e0bffe03 	ldbu	r2,-8(fp)
  806a20:	10801fcc 	andi	r2,r2,127
  806a24:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  806a28:	00800044 	movi	r2,1
  806a2c:	e0bfe405 	stb	r2,-112(fp)
  806a30:	00000106 	br	806a38 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  806a34:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806a38:	0005303a 	rdctl	r2,status
  806a3c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806a40:	e0fff617 	ldw	r3,-40(fp)
  806a44:	00bfff84 	movi	r2,-2
  806a48:	1884703a 	and	r2,r3,r2
  806a4c:	1001703a 	wrctl	status,r2
  
  return context;
  806a50:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  806a54:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  806a58:	e0bffe03 	ldbu	r2,-8(fp)
  806a5c:	10c00060 	cmpeqi	r3,r2,1
  806a60:	1800921e 	bne	r3,zero,806cac <OSFlagPend+0x36c>
  806a64:	10c00088 	cmpgei	r3,r2,2
  806a68:	1800021e 	bne	r3,zero,806a74 <OSFlagPend+0x134>
  806a6c:	10006126 	beq	r2,zero,806bf4 <OSFlagPend+0x2b4>
  806a70:	0000bb06 	br	806d60 <OSFlagPend+0x420>
  806a74:	10c000a0 	cmpeqi	r3,r2,2
  806a78:	1800031e 	bne	r3,zero,806a88 <OSFlagPend+0x148>
  806a7c:	108000e0 	cmpeqi	r2,r2,3
  806a80:	10002f1e 	bne	r2,zero,806b40 <OSFlagPend+0x200>
  806a84:	0000b606 	br	806d60 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  806a88:	e0bffc17 	ldw	r2,-16(fp)
  806a8c:	10c0020b 	ldhu	r3,8(r2)
  806a90:	e0bffd0b 	ldhu	r2,-12(fp)
  806a94:	1884703a 	and	r2,r3,r2
  806a98:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  806a9c:	e0ffe80b 	ldhu	r3,-96(fp)
  806aa0:	e0bffd0b 	ldhu	r2,-12(fp)
  806aa4:	1880171e 	bne	r3,r2,806b04 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806aa8:	e0bfe403 	ldbu	r2,-112(fp)
  806aac:	10800058 	cmpnei	r2,r2,1
  806ab0:	1000091e 	bne	r2,zero,806ad8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  806ab4:	e0bffc17 	ldw	r2,-16(fp)
  806ab8:	1080020b 	ldhu	r2,8(r2)
  806abc:	1007883a 	mov	r3,r2
  806ac0:	e0bfe80b 	ldhu	r2,-96(fp)
  806ac4:	0084303a 	nor	r2,zero,r2
  806ac8:	1884703a 	and	r2,r3,r2
  806acc:	1007883a 	mov	r3,r2
  806ad0:	e0bffc17 	ldw	r2,-16(fp)
  806ad4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806ad8:	d0a71017 	ldw	r2,-25536(gp)
  806adc:	e0ffe80b 	ldhu	r3,-96(fp)
  806ae0:	10c00b0d 	sth	r3,44(r2)
  806ae4:	e0bfe517 	ldw	r2,-108(fp)
  806ae8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806aec:	e0bfe717 	ldw	r2,-100(fp)
  806af0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  806af4:	e0800217 	ldw	r2,8(fp)
  806af8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  806afc:	e0bfe80b 	ldhu	r2,-96(fp)
  806b00:	0000f806 	br	806ee4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806b04:	e13ffd0b 	ldhu	r4,-12(fp)
  806b08:	e17ffe03 	ldbu	r5,-8(fp)
  806b0c:	e0bfff0b 	ldhu	r2,-4(fp)
  806b10:	e0fff704 	addi	r3,fp,-36
  806b14:	d8800015 	stw	r2,0(sp)
  806b18:	280f883a 	mov	r7,r5
  806b1c:	200d883a 	mov	r6,r4
  806b20:	180b883a 	mov	r5,r3
  806b24:	e13ffc17 	ldw	r4,-16(fp)
  806b28:	08073b00 	call	8073b0 <OS_FlagBlock>
  806b2c:	e0bfe517 	ldw	r2,-108(fp)
  806b30:	e0bfe915 	stw	r2,-92(fp)
  806b34:	e0bfe917 	ldw	r2,-92(fp)
  806b38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  806b3c:	00009206 	br	806d88 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  806b40:	e0bffc17 	ldw	r2,-16(fp)
  806b44:	10c0020b 	ldhu	r3,8(r2)
  806b48:	e0bffd0b 	ldhu	r2,-12(fp)
  806b4c:	1884703a 	and	r2,r3,r2
  806b50:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  806b54:	e0bfe80b 	ldhu	r2,-96(fp)
  806b58:	10001726 	beq	r2,zero,806bb8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806b5c:	e0bfe403 	ldbu	r2,-112(fp)
  806b60:	10800058 	cmpnei	r2,r2,1
  806b64:	1000091e 	bne	r2,zero,806b8c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  806b68:	e0bffc17 	ldw	r2,-16(fp)
  806b6c:	1080020b 	ldhu	r2,8(r2)
  806b70:	1007883a 	mov	r3,r2
  806b74:	e0bfe80b 	ldhu	r2,-96(fp)
  806b78:	0084303a 	nor	r2,zero,r2
  806b7c:	1884703a 	and	r2,r3,r2
  806b80:	1007883a 	mov	r3,r2
  806b84:	e0bffc17 	ldw	r2,-16(fp)
  806b88:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806b8c:	d0a71017 	ldw	r2,-25536(gp)
  806b90:	e0ffe80b 	ldhu	r3,-96(fp)
  806b94:	10c00b0d 	sth	r3,44(r2)
  806b98:	e0bfe517 	ldw	r2,-108(fp)
  806b9c:	e0bfea15 	stw	r2,-88(fp)
  806ba0:	e0bfea17 	ldw	r2,-88(fp)
  806ba4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  806ba8:	e0800217 	ldw	r2,8(fp)
  806bac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  806bb0:	e0bfe80b 	ldhu	r2,-96(fp)
  806bb4:	0000cb06 	br	806ee4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806bb8:	e13ffd0b 	ldhu	r4,-12(fp)
  806bbc:	e17ffe03 	ldbu	r5,-8(fp)
  806bc0:	e0bfff0b 	ldhu	r2,-4(fp)
  806bc4:	e0fff704 	addi	r3,fp,-36
  806bc8:	d8800015 	stw	r2,0(sp)
  806bcc:	280f883a 	mov	r7,r5
  806bd0:	200d883a 	mov	r6,r4
  806bd4:	180b883a 	mov	r5,r3
  806bd8:	e13ffc17 	ldw	r4,-16(fp)
  806bdc:	08073b00 	call	8073b0 <OS_FlagBlock>
  806be0:	e0bfe517 	ldw	r2,-108(fp)
  806be4:	e0bfeb15 	stw	r2,-84(fp)
  806be8:	e0bfeb17 	ldw	r2,-84(fp)
  806bec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  806bf0:	00006506 	br	806d88 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  806bf4:	e0bffc17 	ldw	r2,-16(fp)
  806bf8:	1080020b 	ldhu	r2,8(r2)
  806bfc:	0084303a 	nor	r2,zero,r2
  806c00:	1007883a 	mov	r3,r2
  806c04:	e0bffd0b 	ldhu	r2,-12(fp)
  806c08:	1884703a 	and	r2,r3,r2
  806c0c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  806c10:	e0ffe80b 	ldhu	r3,-96(fp)
  806c14:	e0bffd0b 	ldhu	r2,-12(fp)
  806c18:	1880151e 	bne	r3,r2,806c70 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806c1c:	e0bfe403 	ldbu	r2,-112(fp)
  806c20:	10800058 	cmpnei	r2,r2,1
  806c24:	1000071e 	bne	r2,zero,806c44 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  806c28:	e0bffc17 	ldw	r2,-16(fp)
  806c2c:	10c0020b 	ldhu	r3,8(r2)
  806c30:	e0bfe80b 	ldhu	r2,-96(fp)
  806c34:	1884b03a 	or	r2,r3,r2
  806c38:	1007883a 	mov	r3,r2
  806c3c:	e0bffc17 	ldw	r2,-16(fp)
  806c40:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806c44:	d0a71017 	ldw	r2,-25536(gp)
  806c48:	e0ffe80b 	ldhu	r3,-96(fp)
  806c4c:	10c00b0d 	sth	r3,44(r2)
  806c50:	e0bfe517 	ldw	r2,-108(fp)
  806c54:	e0bfec15 	stw	r2,-80(fp)
  806c58:	e0bfec17 	ldw	r2,-80(fp)
  806c5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  806c60:	e0800217 	ldw	r2,8(fp)
  806c64:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  806c68:	e0bfe80b 	ldhu	r2,-96(fp)
  806c6c:	00009d06 	br	806ee4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806c70:	e13ffd0b 	ldhu	r4,-12(fp)
  806c74:	e17ffe03 	ldbu	r5,-8(fp)
  806c78:	e0bfff0b 	ldhu	r2,-4(fp)
  806c7c:	e0fff704 	addi	r3,fp,-36
  806c80:	d8800015 	stw	r2,0(sp)
  806c84:	280f883a 	mov	r7,r5
  806c88:	200d883a 	mov	r6,r4
  806c8c:	180b883a 	mov	r5,r3
  806c90:	e13ffc17 	ldw	r4,-16(fp)
  806c94:	08073b00 	call	8073b0 <OS_FlagBlock>
  806c98:	e0bfe517 	ldw	r2,-108(fp)
  806c9c:	e0bfed15 	stw	r2,-76(fp)
  806ca0:	e0bfed17 	ldw	r2,-76(fp)
  806ca4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  806ca8:	00003706 	br	806d88 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  806cac:	e0bffc17 	ldw	r2,-16(fp)
  806cb0:	1080020b 	ldhu	r2,8(r2)
  806cb4:	0084303a 	nor	r2,zero,r2
  806cb8:	1007883a 	mov	r3,r2
  806cbc:	e0bffd0b 	ldhu	r2,-12(fp)
  806cc0:	1884703a 	and	r2,r3,r2
  806cc4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  806cc8:	e0bfe80b 	ldhu	r2,-96(fp)
  806ccc:	10001526 	beq	r2,zero,806d24 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  806cd0:	e0bfe403 	ldbu	r2,-112(fp)
  806cd4:	10800058 	cmpnei	r2,r2,1
  806cd8:	1000071e 	bne	r2,zero,806cf8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  806cdc:	e0bffc17 	ldw	r2,-16(fp)
  806ce0:	10c0020b 	ldhu	r3,8(r2)
  806ce4:	e0bfe80b 	ldhu	r2,-96(fp)
  806ce8:	1884b03a 	or	r2,r3,r2
  806cec:	1007883a 	mov	r3,r2
  806cf0:	e0bffc17 	ldw	r2,-16(fp)
  806cf4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  806cf8:	d0a71017 	ldw	r2,-25536(gp)
  806cfc:	e0ffe80b 	ldhu	r3,-96(fp)
  806d00:	10c00b0d 	sth	r3,44(r2)
  806d04:	e0bfe517 	ldw	r2,-108(fp)
  806d08:	e0bfee15 	stw	r2,-72(fp)
  806d0c:	e0bfee17 	ldw	r2,-72(fp)
  806d10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  806d14:	e0800217 	ldw	r2,8(fp)
  806d18:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  806d1c:	e0bfe80b 	ldhu	r2,-96(fp)
  806d20:	00007006 	br	806ee4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  806d24:	e13ffd0b 	ldhu	r4,-12(fp)
  806d28:	e17ffe03 	ldbu	r5,-8(fp)
  806d2c:	e0bfff0b 	ldhu	r2,-4(fp)
  806d30:	e0fff704 	addi	r3,fp,-36
  806d34:	d8800015 	stw	r2,0(sp)
  806d38:	280f883a 	mov	r7,r5
  806d3c:	200d883a 	mov	r6,r4
  806d40:	180b883a 	mov	r5,r3
  806d44:	e13ffc17 	ldw	r4,-16(fp)
  806d48:	08073b00 	call	8073b0 <OS_FlagBlock>
  806d4c:	e0bfe517 	ldw	r2,-108(fp)
  806d50:	e0bfef15 	stw	r2,-68(fp)
  806d54:	e0bfef17 	ldw	r2,-68(fp)
  806d58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  806d5c:	00000a06 	br	806d88 <OSFlagPend+0x448>
  806d60:	e0bfe517 	ldw	r2,-108(fp)
  806d64:	e0bff015 	stw	r2,-64(fp)
  806d68:	e0bff017 	ldw	r2,-64(fp)
  806d6c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  806d70:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  806d74:	e0800217 	ldw	r2,8(fp)
  806d78:	00c01bc4 	movi	r3,111
  806d7c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  806d80:	e0bfe80b 	ldhu	r2,-96(fp)
  806d84:	00005706 	br	806ee4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  806d88:	08058100 	call	805810 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806d8c:	0005303a 	rdctl	r2,status
  806d90:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806d94:	e0fff117 	ldw	r3,-60(fp)
  806d98:	00bfff84 	movi	r2,-2
  806d9c:	1884703a 	and	r2,r3,r2
  806da0:	1001703a 	wrctl	status,r2
  
  return context;
  806da4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  806da8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  806dac:	d0a71017 	ldw	r2,-25536(gp)
  806db0:	10800c43 	ldbu	r2,49(r2)
  806db4:	10803fcc 	andi	r2,r2,255
  806db8:	10001c26 	beq	r2,zero,806e2c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  806dbc:	d0a71017 	ldw	r2,-25536(gp)
  806dc0:	10800c43 	ldbu	r2,49(r2)
  806dc4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  806dc8:	d0a71017 	ldw	r2,-25536(gp)
  806dcc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  806dd0:	e0bff704 	addi	r2,fp,-36
  806dd4:	1009883a 	mov	r4,r2
  806dd8:	08076e40 	call	8076e4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  806ddc:	d0a71017 	ldw	r2,-25536(gp)
  806de0:	10000c05 	stb	zero,48(r2)
  806de4:	e0bfe517 	ldw	r2,-108(fp)
  806de8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806dec:	e0bff217 	ldw	r2,-56(fp)
  806df0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  806df4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  806df8:	e0bff303 	ldbu	r2,-52(fp)
  806dfc:	108000a0 	cmpeqi	r2,r2,2
  806e00:	10000426 	beq	r2,zero,806e14 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  806e04:	e0800217 	ldw	r2,8(fp)
  806e08:	00c00384 	movi	r3,14
  806e0c:	10c00005 	stb	r3,0(r2)
                 break;
  806e10:	00000406 	br	806e24 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  806e14:	e0800217 	ldw	r2,8(fp)
  806e18:	00c00284 	movi	r3,10
  806e1c:	10c00005 	stb	r3,0(r2)
                 break;
  806e20:	0001883a 	nop
        }
        return (flags_rdy);
  806e24:	e0bfe80b 	ldhu	r2,-96(fp)
  806e28:	00002e06 	br	806ee4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  806e2c:	d0a71017 	ldw	r2,-25536(gp)
  806e30:	10800b0b 	ldhu	r2,44(r2)
  806e34:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  806e38:	e0bfe403 	ldbu	r2,-112(fp)
  806e3c:	10800058 	cmpnei	r2,r2,1
  806e40:	1000211e 	bne	r2,zero,806ec8 <OSFlagPend+0x588>
        switch (wait_type) {
  806e44:	e0bffe03 	ldbu	r2,-8(fp)
  806e48:	10001616 	blt	r2,zero,806ea4 <OSFlagPend+0x564>
  806e4c:	10c00090 	cmplti	r3,r2,2
  806e50:	18000c1e 	bne	r3,zero,806e84 <OSFlagPend+0x544>
  806e54:	10800108 	cmpgei	r2,r2,4
  806e58:	1000121e 	bne	r2,zero,806ea4 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  806e5c:	e0bffc17 	ldw	r2,-16(fp)
  806e60:	1080020b 	ldhu	r2,8(r2)
  806e64:	1007883a 	mov	r3,r2
  806e68:	e0bfe80b 	ldhu	r2,-96(fp)
  806e6c:	0084303a 	nor	r2,zero,r2
  806e70:	1884703a 	and	r2,r3,r2
  806e74:	1007883a 	mov	r3,r2
  806e78:	e0bffc17 	ldw	r2,-16(fp)
  806e7c:	10c0020d 	sth	r3,8(r2)
                 break;
  806e80:	00001106 	br	806ec8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  806e84:	e0bffc17 	ldw	r2,-16(fp)
  806e88:	10c0020b 	ldhu	r3,8(r2)
  806e8c:	e0bfe80b 	ldhu	r2,-96(fp)
  806e90:	1884b03a 	or	r2,r3,r2
  806e94:	1007883a 	mov	r3,r2
  806e98:	e0bffc17 	ldw	r2,-16(fp)
  806e9c:	10c0020d 	sth	r3,8(r2)
                 break;
  806ea0:	00000906 	br	806ec8 <OSFlagPend+0x588>
  806ea4:	e0bfe517 	ldw	r2,-108(fp)
  806ea8:	e0bff415 	stw	r2,-48(fp)
  806eac:	e0bff417 	ldw	r2,-48(fp)
  806eb0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  806eb4:	e0800217 	ldw	r2,8(fp)
  806eb8:	00c01bc4 	movi	r3,111
  806ebc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  806ec0:	0005883a 	mov	r2,zero
  806ec4:	00000706 	br	806ee4 <OSFlagPend+0x5a4>
  806ec8:	e0bfe517 	ldw	r2,-108(fp)
  806ecc:	e0bff515 	stw	r2,-44(fp)
  806ed0:	e0bff517 	ldw	r2,-44(fp)
  806ed4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  806ed8:	e0800217 	ldw	r2,8(fp)
  806edc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  806ee0:	e0bfe80b 	ldhu	r2,-96(fp)
}
  806ee4:	e037883a 	mov	sp,fp
  806ee8:	dfc00117 	ldw	ra,4(sp)
  806eec:	df000017 	ldw	fp,0(sp)
  806ef0:	dec00204 	addi	sp,sp,8
  806ef4:	f800283a 	ret

00806ef8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  806ef8:	defffb04 	addi	sp,sp,-20
  806efc:	df000415 	stw	fp,16(sp)
  806f00:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  806f04:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806f08:	0005303a 	rdctl	r2,status
  806f0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806f10:	e0fffe17 	ldw	r3,-8(fp)
  806f14:	00bfff84 	movi	r2,-2
  806f18:	1884703a 	and	r2,r3,r2
  806f1c:	1001703a 	wrctl	status,r2
  
  return context;
  806f20:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  806f24:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  806f28:	d0a71017 	ldw	r2,-25536(gp)
  806f2c:	10800b0b 	ldhu	r2,44(r2)
  806f30:	e0bffd0d 	sth	r2,-12(fp)
  806f34:	e0bffc17 	ldw	r2,-16(fp)
  806f38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806f3c:	e0bfff17 	ldw	r2,-4(fp)
  806f40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  806f44:	e0bffd0b 	ldhu	r2,-12(fp)
}
  806f48:	e037883a 	mov	sp,fp
  806f4c:	df000017 	ldw	fp,0(sp)
  806f50:	dec00104 	addi	sp,sp,4
  806f54:	f800283a 	ret

00806f58 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  806f58:	deffef04 	addi	sp,sp,-68
  806f5c:	dfc01015 	stw	ra,64(sp)
  806f60:	df000f15 	stw	fp,60(sp)
  806f64:	df000f04 	addi	fp,sp,60
  806f68:	e13ffc15 	stw	r4,-16(fp)
  806f6c:	2807883a 	mov	r3,r5
  806f70:	3005883a 	mov	r2,r6
  806f74:	e1ffff15 	stw	r7,-4(fp)
  806f78:	e0fffd0d 	sth	r3,-12(fp)
  806f7c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  806f80:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  806f84:	e0bfff17 	ldw	r2,-4(fp)
  806f88:	1000021e 	bne	r2,zero,806f94 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  806f8c:	0005883a 	mov	r2,zero
  806f90:	0000d106 	br	8072d8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  806f94:	e0bffc17 	ldw	r2,-16(fp)
  806f98:	1000051e 	bne	r2,zero,806fb0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  806f9c:	e0bfff17 	ldw	r2,-4(fp)
  806fa0:	00c01b84 	movi	r3,110
  806fa4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  806fa8:	0005883a 	mov	r2,zero
  806fac:	0000ca06 	br	8072d8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  806fb0:	e0bffc17 	ldw	r2,-16(fp)
  806fb4:	10800003 	ldbu	r2,0(r2)
  806fb8:	10803fcc 	andi	r2,r2,255
  806fbc:	10800160 	cmpeqi	r2,r2,5
  806fc0:	1000051e 	bne	r2,zero,806fd8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  806fc4:	e0bfff17 	ldw	r2,-4(fp)
  806fc8:	00c00044 	movi	r3,1
  806fcc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  806fd0:	0005883a 	mov	r2,zero
  806fd4:	0000c006 	br	8072d8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806fd8:	0005303a 	rdctl	r2,status
  806fdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806fe0:	e0fffb17 	ldw	r3,-20(fp)
  806fe4:	00bfff84 	movi	r2,-2
  806fe8:	1884703a 	and	r2,r3,r2
  806fec:	1001703a 	wrctl	status,r2
  
  return context;
  806ff0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  806ff4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  806ff8:	e0bffe03 	ldbu	r2,-8(fp)
  806ffc:	10000326 	beq	r2,zero,80700c <OSFlagPost+0xb4>
  807000:	10800060 	cmpeqi	r2,r2,1
  807004:	10000b1e 	bne	r2,zero,807034 <OSFlagPost+0xdc>
  807008:	00001206 	br	807054 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80700c:	e0bffc17 	ldw	r2,-16(fp)
  807010:	1080020b 	ldhu	r2,8(r2)
  807014:	1007883a 	mov	r3,r2
  807018:	e0bffd0b 	ldhu	r2,-12(fp)
  80701c:	0084303a 	nor	r2,zero,r2
  807020:	1884703a 	and	r2,r3,r2
  807024:	1007883a 	mov	r3,r2
  807028:	e0bffc17 	ldw	r2,-16(fp)
  80702c:	10c0020d 	sth	r3,8(r2)
             break;
  807030:	00001106 	br	807078 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  807034:	e0bffc17 	ldw	r2,-16(fp)
  807038:	10c0020b 	ldhu	r3,8(r2)
  80703c:	e0bffd0b 	ldhu	r2,-12(fp)
  807040:	1884b03a 	or	r2,r3,r2
  807044:	1007883a 	mov	r3,r2
  807048:	e0bffc17 	ldw	r2,-16(fp)
  80704c:	10c0020d 	sth	r3,8(r2)
             break;
  807050:	00000906 	br	807078 <OSFlagPost+0x120>
  807054:	e0bff317 	ldw	r2,-52(fp)
  807058:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80705c:	e0bff417 	ldw	r2,-48(fp)
  807060:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  807064:	e0bfff17 	ldw	r2,-4(fp)
  807068:	00c01c44 	movi	r3,113
  80706c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  807070:	0005883a 	mov	r2,zero
  807074:	00009806 	br	8072d8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  807078:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80707c:	e0bffc17 	ldw	r2,-16(fp)
  807080:	10800117 	ldw	r2,4(r2)
  807084:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  807088:	00007706 	br	807268 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  80708c:	e0bff117 	ldw	r2,-60(fp)
  807090:	10800483 	ldbu	r2,18(r2)
  807094:	10803fcc 	andi	r2,r2,255
  807098:	10c00060 	cmpeqi	r3,r2,1
  80709c:	18004a1e 	bne	r3,zero,8071c8 <OSFlagPost+0x270>
  8070a0:	10c00088 	cmpgei	r3,r2,2
  8070a4:	1800021e 	bne	r3,zero,8070b0 <OSFlagPost+0x158>
  8070a8:	10002f26 	beq	r2,zero,807168 <OSFlagPost+0x210>
  8070ac:	00005b06 	br	80721c <OSFlagPost+0x2c4>
  8070b0:	10c000a0 	cmpeqi	r3,r2,2
  8070b4:	1800031e 	bne	r3,zero,8070c4 <OSFlagPost+0x16c>
  8070b8:	108000e0 	cmpeqi	r2,r2,3
  8070bc:	1000171e 	bne	r2,zero,80711c <OSFlagPost+0x1c4>
  8070c0:	00005606 	br	80721c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8070c4:	e0bffc17 	ldw	r2,-16(fp)
  8070c8:	10c0020b 	ldhu	r3,8(r2)
  8070cc:	e0bff117 	ldw	r2,-60(fp)
  8070d0:	1080040b 	ldhu	r2,16(r2)
  8070d4:	1884703a 	and	r2,r3,r2
  8070d8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  8070dc:	e0bff117 	ldw	r2,-60(fp)
  8070e0:	1080040b 	ldhu	r2,16(r2)
  8070e4:	10ffffcc 	andi	r3,r2,65535
  8070e8:	e0bff60b 	ldhu	r2,-40(fp)
  8070ec:	1880541e 	bne	r3,r2,807240 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8070f0:	e0bff60b 	ldhu	r2,-40(fp)
  8070f4:	100b883a 	mov	r5,r2
  8070f8:	e13ff117 	ldw	r4,-60(fp)
  8070fc:	08075f00 	call	8075f0 <OS_FlagTaskRdy>
  807100:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  807104:	e0bff683 	ldbu	r2,-38(fp)
  807108:	10800058 	cmpnei	r2,r2,1
  80710c:	10004c1e 	bne	r2,zero,807240 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  807110:	00800044 	movi	r2,1
  807114:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  807118:	00004906 	br	807240 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80711c:	e0bffc17 	ldw	r2,-16(fp)
  807120:	10c0020b 	ldhu	r3,8(r2)
  807124:	e0bff117 	ldw	r2,-60(fp)
  807128:	1080040b 	ldhu	r2,16(r2)
  80712c:	1884703a 	and	r2,r3,r2
  807130:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  807134:	e0bff60b 	ldhu	r2,-40(fp)
  807138:	10004326 	beq	r2,zero,807248 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80713c:	e0bff60b 	ldhu	r2,-40(fp)
  807140:	100b883a 	mov	r5,r2
  807144:	e13ff117 	ldw	r4,-60(fp)
  807148:	08075f00 	call	8075f0 <OS_FlagTaskRdy>
  80714c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  807150:	e0bff683 	ldbu	r2,-38(fp)
  807154:	10800058 	cmpnei	r2,r2,1
  807158:	10003b1e 	bne	r2,zero,807248 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80715c:	00800044 	movi	r2,1
  807160:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  807164:	00003806 	br	807248 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  807168:	e0bffc17 	ldw	r2,-16(fp)
  80716c:	1080020b 	ldhu	r2,8(r2)
  807170:	0084303a 	nor	r2,zero,r2
  807174:	1007883a 	mov	r3,r2
  807178:	e0bff117 	ldw	r2,-60(fp)
  80717c:	1080040b 	ldhu	r2,16(r2)
  807180:	1884703a 	and	r2,r3,r2
  807184:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  807188:	e0bff117 	ldw	r2,-60(fp)
  80718c:	1080040b 	ldhu	r2,16(r2)
  807190:	10ffffcc 	andi	r3,r2,65535
  807194:	e0bff60b 	ldhu	r2,-40(fp)
  807198:	18802d1e 	bne	r3,r2,807250 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80719c:	e0bff60b 	ldhu	r2,-40(fp)
  8071a0:	100b883a 	mov	r5,r2
  8071a4:	e13ff117 	ldw	r4,-60(fp)
  8071a8:	08075f00 	call	8075f0 <OS_FlagTaskRdy>
  8071ac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  8071b0:	e0bff683 	ldbu	r2,-38(fp)
  8071b4:	10800058 	cmpnei	r2,r2,1
  8071b8:	1000251e 	bne	r2,zero,807250 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8071bc:	00800044 	movi	r2,1
  8071c0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  8071c4:	00002206 	br	807250 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8071c8:	e0bffc17 	ldw	r2,-16(fp)
  8071cc:	1080020b 	ldhu	r2,8(r2)
  8071d0:	0084303a 	nor	r2,zero,r2
  8071d4:	1007883a 	mov	r3,r2
  8071d8:	e0bff117 	ldw	r2,-60(fp)
  8071dc:	1080040b 	ldhu	r2,16(r2)
  8071e0:	1884703a 	and	r2,r3,r2
  8071e4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8071e8:	e0bff60b 	ldhu	r2,-40(fp)
  8071ec:	10001a26 	beq	r2,zero,807258 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8071f0:	e0bff60b 	ldhu	r2,-40(fp)
  8071f4:	100b883a 	mov	r5,r2
  8071f8:	e13ff117 	ldw	r4,-60(fp)
  8071fc:	08075f00 	call	8075f0 <OS_FlagTaskRdy>
  807200:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  807204:	e0bff683 	ldbu	r2,-38(fp)
  807208:	10800058 	cmpnei	r2,r2,1
  80720c:	1000121e 	bne	r2,zero,807258 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  807210:	00800044 	movi	r2,1
  807214:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  807218:	00000f06 	br	807258 <OSFlagPost+0x300>
  80721c:	e0bff317 	ldw	r2,-52(fp)
  807220:	e0bff515 	stw	r2,-44(fp)
  807224:	e0bff517 	ldw	r2,-44(fp)
  807228:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80722c:	e0bfff17 	ldw	r2,-4(fp)
  807230:	00c01bc4 	movi	r3,111
  807234:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  807238:	0005883a 	mov	r2,zero
  80723c:	00002606 	br	8072d8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  807240:	0001883a 	nop
  807244:	00000506 	br	80725c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  807248:	0001883a 	nop
  80724c:	00000306 	br	80725c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  807250:	0001883a 	nop
  807254:	00000106 	br	80725c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  807258:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80725c:	e0bff117 	ldw	r2,-60(fp)
  807260:	10800017 	ldw	r2,0(r2)
  807264:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  807268:	e0bff117 	ldw	r2,-60(fp)
  80726c:	103f871e 	bne	r2,zero,80708c <__alt_data_end+0xff80708c>
  807270:	e0bff317 	ldw	r2,-52(fp)
  807274:	e0bff715 	stw	r2,-36(fp)
  807278:	e0bff717 	ldw	r2,-36(fp)
  80727c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  807280:	e0bff203 	ldbu	r2,-56(fp)
  807284:	10800058 	cmpnei	r2,r2,1
  807288:	1000011e 	bne	r2,zero,807290 <OSFlagPost+0x338>
        OS_Sched();
  80728c:	08058100 	call	805810 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807290:	0005303a 	rdctl	r2,status
  807294:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807298:	e0fffa17 	ldw	r3,-24(fp)
  80729c:	00bfff84 	movi	r2,-2
  8072a0:	1884703a 	and	r2,r3,r2
  8072a4:	1001703a 	wrctl	status,r2
  
  return context;
  8072a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  8072ac:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  8072b0:	e0bffc17 	ldw	r2,-16(fp)
  8072b4:	1080020b 	ldhu	r2,8(r2)
  8072b8:	e0bff90d 	sth	r2,-28(fp)
  8072bc:	e0bff317 	ldw	r2,-52(fp)
  8072c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8072c4:	e0bff817 	ldw	r2,-32(fp)
  8072c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  8072cc:	e0bfff17 	ldw	r2,-4(fp)
  8072d0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  8072d4:	e0bff90b 	ldhu	r2,-28(fp)
}
  8072d8:	e037883a 	mov	sp,fp
  8072dc:	dfc00117 	ldw	ra,4(sp)
  8072e0:	df000017 	ldw	fp,0(sp)
  8072e4:	dec00204 	addi	sp,sp,8
  8072e8:	f800283a 	ret

008072ec <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  8072ec:	defff904 	addi	sp,sp,-28
  8072f0:	df000615 	stw	fp,24(sp)
  8072f4:	df000604 	addi	fp,sp,24
  8072f8:	e13ffe15 	stw	r4,-8(fp)
  8072fc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  807300:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  807304:	e0bfff17 	ldw	r2,-4(fp)
  807308:	1000021e 	bne	r2,zero,807314 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  80730c:	0005883a 	mov	r2,zero
  807310:	00002306 	br	8073a0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  807314:	e0bffe17 	ldw	r2,-8(fp)
  807318:	1000051e 	bne	r2,zero,807330 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80731c:	e0bfff17 	ldw	r2,-4(fp)
  807320:	00c01b84 	movi	r3,110
  807324:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  807328:	0005883a 	mov	r2,zero
  80732c:	00001c06 	br	8073a0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  807330:	e0bffe17 	ldw	r2,-8(fp)
  807334:	10800003 	ldbu	r2,0(r2)
  807338:	10803fcc 	andi	r2,r2,255
  80733c:	10800160 	cmpeqi	r2,r2,5
  807340:	1000051e 	bne	r2,zero,807358 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  807344:	e0bfff17 	ldw	r2,-4(fp)
  807348:	00c00044 	movi	r3,1
  80734c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  807350:	0005883a 	mov	r2,zero
  807354:	00001206 	br	8073a0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807358:	0005303a 	rdctl	r2,status
  80735c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807360:	e0fffc17 	ldw	r3,-16(fp)
  807364:	00bfff84 	movi	r2,-2
  807368:	1884703a 	and	r2,r3,r2
  80736c:	1001703a 	wrctl	status,r2
  
  return context;
  807370:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  807374:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  807378:	e0bffe17 	ldw	r2,-8(fp)
  80737c:	1080020b 	ldhu	r2,8(r2)
  807380:	e0bffb0d 	sth	r2,-20(fp)
  807384:	e0bffa17 	ldw	r2,-24(fp)
  807388:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80738c:	e0bffd17 	ldw	r2,-12(fp)
  807390:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807394:	e0bfff17 	ldw	r2,-4(fp)
  807398:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  80739c:	e0bffb0b 	ldhu	r2,-20(fp)
}
  8073a0:	e037883a 	mov	sp,fp
  8073a4:	df000017 	ldw	fp,0(sp)
  8073a8:	dec00104 	addi	sp,sp,4
  8073ac:	f800283a 	ret

008073b0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  8073b0:	defff804 	addi	sp,sp,-32
  8073b4:	df000715 	stw	fp,28(sp)
  8073b8:	df000704 	addi	fp,sp,28
  8073bc:	e13ffb15 	stw	r4,-20(fp)
  8073c0:	e17ffc15 	stw	r5,-16(fp)
  8073c4:	3009883a 	mov	r4,r6
  8073c8:	3807883a 	mov	r3,r7
  8073cc:	e0800117 	ldw	r2,4(fp)
  8073d0:	e13ffd0d 	sth	r4,-12(fp)
  8073d4:	e0fffe05 	stb	r3,-8(fp)
  8073d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  8073dc:	d0a71017 	ldw	r2,-25536(gp)
  8073e0:	d0e71017 	ldw	r3,-25536(gp)
  8073e4:	18c00c03 	ldbu	r3,48(r3)
  8073e8:	18c00814 	ori	r3,r3,32
  8073ec:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  8073f0:	d0a71017 	ldw	r2,-25536(gp)
  8073f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  8073f8:	d0a71017 	ldw	r2,-25536(gp)
  8073fc:	e0ffff0b 	ldhu	r3,-4(fp)
  807400:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  807404:	d0a71017 	ldw	r2,-25536(gp)
  807408:	e0fffc17 	ldw	r3,-16(fp)
  80740c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  807410:	e0bffc17 	ldw	r2,-16(fp)
  807414:	e0fffd0b 	ldhu	r3,-12(fp)
  807418:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80741c:	e0bffc17 	ldw	r2,-16(fp)
  807420:	e0fffe03 	ldbu	r3,-8(fp)
  807424:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  807428:	d0e71017 	ldw	r3,-25536(gp)
  80742c:	e0bffc17 	ldw	r2,-16(fp)
  807430:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  807434:	e0bffb17 	ldw	r2,-20(fp)
  807438:	10c00117 	ldw	r3,4(r2)
  80743c:	e0bffc17 	ldw	r2,-16(fp)
  807440:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  807444:	e0bffc17 	ldw	r2,-16(fp)
  807448:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80744c:	e0bffc17 	ldw	r2,-16(fp)
  807450:	e0fffb17 	ldw	r3,-20(fp)
  807454:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  807458:	e0bffb17 	ldw	r2,-20(fp)
  80745c:	10800117 	ldw	r2,4(r2)
  807460:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  807464:	e0bff917 	ldw	r2,-28(fp)
  807468:	10000326 	beq	r2,zero,807478 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  80746c:	e0bff917 	ldw	r2,-28(fp)
  807470:	e0fffc17 	ldw	r3,-16(fp)
  807474:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  807478:	e0bffb17 	ldw	r2,-20(fp)
  80747c:	e0fffc17 	ldw	r3,-16(fp)
  807480:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  807484:	d0a71017 	ldw	r2,-25536(gp)
  807488:	10800d03 	ldbu	r2,52(r2)
  80748c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  807490:	e0fffa03 	ldbu	r3,-24(fp)
  807494:	e13ffa03 	ldbu	r4,-24(fp)
  807498:	d0a70d44 	addi	r2,gp,-25547
  80749c:	2085883a 	add	r2,r4,r2
  8074a0:	10800003 	ldbu	r2,0(r2)
  8074a4:	1009883a 	mov	r4,r2
  8074a8:	d0a71017 	ldw	r2,-25536(gp)
  8074ac:	10800d43 	ldbu	r2,53(r2)
  8074b0:	0084303a 	nor	r2,zero,r2
  8074b4:	2084703a 	and	r2,r4,r2
  8074b8:	1009883a 	mov	r4,r2
  8074bc:	d0a70d44 	addi	r2,gp,-25547
  8074c0:	1885883a 	add	r2,r3,r2
  8074c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  8074c8:	e0fffa03 	ldbu	r3,-24(fp)
  8074cc:	d0a70d44 	addi	r2,gp,-25547
  8074d0:	1885883a 	add	r2,r3,r2
  8074d4:	10800003 	ldbu	r2,0(r2)
  8074d8:	10803fcc 	andi	r2,r2,255
  8074dc:	1000071e 	bne	r2,zero,8074fc <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8074e0:	d0a71017 	ldw	r2,-25536(gp)
  8074e4:	10800d83 	ldbu	r2,54(r2)
  8074e8:	0084303a 	nor	r2,zero,r2
  8074ec:	1007883a 	mov	r3,r2
  8074f0:	d0a70d03 	ldbu	r2,-25548(gp)
  8074f4:	1884703a 	and	r2,r3,r2
  8074f8:	d0a70d05 	stb	r2,-25548(gp)
    }
}
  8074fc:	0001883a 	nop
  807500:	e037883a 	mov	sp,fp
  807504:	df000017 	ldw	fp,0(sp)
  807508:	dec00104 	addi	sp,sp,4
  80750c:	f800283a 	ret

00807510 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  807510:	defffb04 	addi	sp,sp,-20
  807514:	dfc00415 	stw	ra,16(sp)
  807518:	df000315 	stw	fp,12(sp)
  80751c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  807520:	0140dc04 	movi	r5,880
  807524:	01002074 	movhi	r4,129
  807528:	21155e04 	addi	r4,r4,21880
  80752c:	08057540 	call	805754 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  807530:	00802074 	movhi	r2,129
  807534:	10955e04 	addi	r2,r2,21880
  807538:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80753c:	00802074 	movhi	r2,129
  807540:	10956904 	addi	r2,r2,21924
  807544:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  807548:	e03ffd0d 	sth	zero,-12(fp)
  80754c:	00001306 	br	80759c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  807550:	e0bffe17 	ldw	r2,-8(fp)
  807554:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  807558:	e0bffe17 	ldw	r2,-8(fp)
  80755c:	e0ffff17 	ldw	r3,-4(fp)
  807560:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  807564:	e0bffe17 	ldw	r2,-8(fp)
  807568:	00c00fc4 	movi	r3,63
  80756c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  807570:	e0bffe17 	ldw	r2,-8(fp)
  807574:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  807578:	e0bffe17 	ldw	r2,-8(fp)
  80757c:	10800b04 	addi	r2,r2,44
  807580:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  807584:	e0bfff17 	ldw	r2,-4(fp)
  807588:	10800b04 	addi	r2,r2,44
  80758c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  807590:	e0bffd0b 	ldhu	r2,-12(fp)
  807594:	10800044 	addi	r2,r2,1
  807598:	e0bffd0d 	sth	r2,-12(fp)
  80759c:	e0bffd0b 	ldhu	r2,-12(fp)
  8075a0:	108004f0 	cmpltui	r2,r2,19
  8075a4:	103fea1e 	bne	r2,zero,807550 <__alt_data_end+0xff807550>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8075a8:	e0bffe17 	ldw	r2,-8(fp)
  8075ac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  8075b0:	e0bffe17 	ldw	r2,-8(fp)
  8075b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  8075b8:	e0bffe17 	ldw	r2,-8(fp)
  8075bc:	00c00fc4 	movi	r3,63
  8075c0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  8075c4:	e0bffe17 	ldw	r2,-8(fp)
  8075c8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  8075cc:	00802074 	movhi	r2,129
  8075d0:	10955e04 	addi	r2,r2,21880
  8075d4:	d0a71215 	stw	r2,-25528(gp)
#endif
}
  8075d8:	0001883a 	nop
  8075dc:	e037883a 	mov	sp,fp
  8075e0:	dfc00117 	ldw	ra,4(sp)
  8075e4:	df000017 	ldw	fp,0(sp)
  8075e8:	dec00204 	addi	sp,sp,8
  8075ec:	f800283a 	ret

008075f0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  8075f0:	defffa04 	addi	sp,sp,-24
  8075f4:	dfc00515 	stw	ra,20(sp)
  8075f8:	df000415 	stw	fp,16(sp)
  8075fc:	df000404 	addi	fp,sp,16
  807600:	e13ffe15 	stw	r4,-8(fp)
  807604:	2805883a 	mov	r2,r5
  807608:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80760c:	e0bffe17 	ldw	r2,-8(fp)
  807610:	10800217 	ldw	r2,8(r2)
  807614:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  807618:	e0bffd17 	ldw	r2,-12(fp)
  80761c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  807620:	e0bffd17 	ldw	r2,-12(fp)
  807624:	e0ffff0b 	ldhu	r3,-4(fp)
  807628:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80762c:	e0bffd17 	ldw	r2,-12(fp)
  807630:	10c00c03 	ldbu	r3,48(r2)
  807634:	00bff7c4 	movi	r2,-33
  807638:	1884703a 	and	r2,r3,r2
  80763c:	1007883a 	mov	r3,r2
  807640:	e0bffd17 	ldw	r2,-12(fp)
  807644:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  807648:	e0bffd17 	ldw	r2,-12(fp)
  80764c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  807650:	e0bffd17 	ldw	r2,-12(fp)
  807654:	10800c03 	ldbu	r2,48(r2)
  807658:	10803fcc 	andi	r2,r2,255
  80765c:	1000181e 	bne	r2,zero,8076c0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  807660:	e0bffd17 	ldw	r2,-12(fp)
  807664:	10c00d83 	ldbu	r3,54(r2)
  807668:	d0a70d03 	ldbu	r2,-25548(gp)
  80766c:	1884b03a 	or	r2,r3,r2
  807670:	d0a70d05 	stb	r2,-25548(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  807674:	e0bffd17 	ldw	r2,-12(fp)
  807678:	10800d03 	ldbu	r2,52(r2)
  80767c:	10c03fcc 	andi	r3,r2,255
  807680:	e0bffd17 	ldw	r2,-12(fp)
  807684:	10800d03 	ldbu	r2,52(r2)
  807688:	11003fcc 	andi	r4,r2,255
  80768c:	d0a70d44 	addi	r2,gp,-25547
  807690:	2085883a 	add	r2,r4,r2
  807694:	11000003 	ldbu	r4,0(r2)
  807698:	e0bffd17 	ldw	r2,-12(fp)
  80769c:	10800d43 	ldbu	r2,53(r2)
  8076a0:	2084b03a 	or	r2,r4,r2
  8076a4:	1009883a 	mov	r4,r2
  8076a8:	d0a70d44 	addi	r2,gp,-25547
  8076ac:	1885883a 	add	r2,r3,r2
  8076b0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  8076b4:	00800044 	movi	r2,1
  8076b8:	e0bffc05 	stb	r2,-16(fp)
  8076bc:	00000106 	br	8076c4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  8076c0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  8076c4:	e13ffe17 	ldw	r4,-8(fp)
  8076c8:	08076e40 	call	8076e4 <OS_FlagUnlink>
    return (sched);
  8076cc:	e0bffc03 	ldbu	r2,-16(fp)
}
  8076d0:	e037883a 	mov	sp,fp
  8076d4:	dfc00117 	ldw	ra,4(sp)
  8076d8:	df000017 	ldw	fp,0(sp)
  8076dc:	dec00204 	addi	sp,sp,8
  8076e0:	f800283a 	ret

008076e4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  8076e4:	defffa04 	addi	sp,sp,-24
  8076e8:	df000515 	stw	fp,20(sp)
  8076ec:	df000504 	addi	fp,sp,20
  8076f0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  8076f4:	e0bfff17 	ldw	r2,-4(fp)
  8076f8:	10800117 	ldw	r2,4(r2)
  8076fc:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  807700:	e0bfff17 	ldw	r2,-4(fp)
  807704:	10800017 	ldw	r2,0(r2)
  807708:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80770c:	e0bffb17 	ldw	r2,-20(fp)
  807710:	10000b1e 	bne	r2,zero,807740 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  807714:	e0bfff17 	ldw	r2,-4(fp)
  807718:	10800317 	ldw	r2,12(r2)
  80771c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  807720:	e0bffd17 	ldw	r2,-12(fp)
  807724:	e0fffc17 	ldw	r3,-16(fp)
  807728:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80772c:	e0bffc17 	ldw	r2,-16(fp)
  807730:	10000b26 	beq	r2,zero,807760 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  807734:	e0bffc17 	ldw	r2,-16(fp)
  807738:	10000115 	stw	zero,4(r2)
  80773c:	00000806 	br	807760 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  807740:	e0bffb17 	ldw	r2,-20(fp)
  807744:	e0fffc17 	ldw	r3,-16(fp)
  807748:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80774c:	e0bffc17 	ldw	r2,-16(fp)
  807750:	10000326 	beq	r2,zero,807760 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  807754:	e0bffc17 	ldw	r2,-16(fp)
  807758:	e0fffb17 	ldw	r3,-20(fp)
  80775c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  807760:	e0bfff17 	ldw	r2,-4(fp)
  807764:	10800217 	ldw	r2,8(r2)
  807768:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  80776c:	e0bffe17 	ldw	r2,-8(fp)
  807770:	10000a15 	stw	zero,40(r2)
#endif
}
  807774:	0001883a 	nop
  807778:	e037883a 	mov	sp,fp
  80777c:	df000017 	ldw	fp,0(sp)
  807780:	dec00104 	addi	sp,sp,4
  807784:	f800283a 	ret

00807788 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  807788:	defff404 	addi	sp,sp,-48
  80778c:	df000b15 	stw	fp,44(sp)
  807790:	df000b04 	addi	fp,sp,44
  807794:	e13ffc15 	stw	r4,-16(fp)
  807798:	e17ffd15 	stw	r5,-12(fp)
  80779c:	e1bffe15 	stw	r6,-8(fp)
  8077a0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8077a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8077a8:	e0bfff17 	ldw	r2,-4(fp)
  8077ac:	1000021e 	bne	r2,zero,8077b8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  8077b0:	0005883a 	mov	r2,zero
  8077b4:	00006506 	br	80794c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  8077b8:	e0bffc17 	ldw	r2,-16(fp)
  8077bc:	1000051e 	bne	r2,zero,8077d4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  8077c0:	e0bfff17 	ldw	r2,-4(fp)
  8077c4:	00c01884 	movi	r3,98
  8077c8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8077cc:	0005883a 	mov	r2,zero
  8077d0:	00005e06 	br	80794c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  8077d4:	e0bffc17 	ldw	r2,-16(fp)
  8077d8:	108000cc 	andi	r2,r2,3
  8077dc:	10000526 	beq	r2,zero,8077f4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  8077e0:	e0bfff17 	ldw	r2,-4(fp)
  8077e4:	00c01884 	movi	r3,98
  8077e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8077ec:	0005883a 	mov	r2,zero
  8077f0:	00005606 	br	80794c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  8077f4:	e0bffd17 	ldw	r2,-12(fp)
  8077f8:	108000a8 	cmpgeui	r2,r2,2
  8077fc:	1000051e 	bne	r2,zero,807814 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  807800:	e0bfff17 	ldw	r2,-4(fp)
  807804:	00c016c4 	movi	r3,91
  807808:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  80780c:	0005883a 	mov	r2,zero
  807810:	00004e06 	br	80794c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  807814:	e0bffe17 	ldw	r2,-8(fp)
  807818:	10800128 	cmpgeui	r2,r2,4
  80781c:	1000051e 	bne	r2,zero,807834 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  807820:	e0bfff17 	ldw	r2,-4(fp)
  807824:	00c01704 	movi	r3,92
  807828:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  80782c:	0005883a 	mov	r2,zero
  807830:	00004606 	br	80794c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807834:	0005303a 	rdctl	r2,status
  807838:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80783c:	e0fffb17 	ldw	r3,-20(fp)
  807840:	00bfff84 	movi	r2,-2
  807844:	1884703a 	and	r2,r3,r2
  807848:	1001703a 	wrctl	status,r2
  
  return context;
  80784c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807850:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  807854:	d0a70a17 	ldw	r2,-25560(gp)
  807858:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80785c:	d0a70a17 	ldw	r2,-25560(gp)
  807860:	10000326 	beq	r2,zero,807870 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  807864:	d0a70a17 	ldw	r2,-25560(gp)
  807868:	10800117 	ldw	r2,4(r2)
  80786c:	d0a70a15 	stw	r2,-25560(gp)
  807870:	e0bff817 	ldw	r2,-32(fp)
  807874:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807878:	e0bff917 	ldw	r2,-28(fp)
  80787c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  807880:	e0bffa17 	ldw	r2,-24(fp)
  807884:	1000051e 	bne	r2,zero,80789c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  807888:	e0bfff17 	ldw	r2,-4(fp)
  80788c:	00c01684 	movi	r3,90
  807890:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  807894:	0005883a 	mov	r2,zero
  807898:	00002c06 	br	80794c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  80789c:	e0bffc17 	ldw	r2,-16(fp)
  8078a0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  8078a4:	e0fffc17 	ldw	r3,-16(fp)
  8078a8:	e0bffe17 	ldw	r2,-8(fp)
  8078ac:	1885883a 	add	r2,r3,r2
  8078b0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  8078b4:	e03ff715 	stw	zero,-36(fp)
  8078b8:	00000c06 	br	8078ec <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  8078bc:	e0bff617 	ldw	r2,-40(fp)
  8078c0:	e0fff517 	ldw	r3,-44(fp)
  8078c4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  8078c8:	e0bff517 	ldw	r2,-44(fp)
  8078cc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  8078d0:	e0fff517 	ldw	r3,-44(fp)
  8078d4:	e0bffe17 	ldw	r2,-8(fp)
  8078d8:	1885883a 	add	r2,r3,r2
  8078dc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  8078e0:	e0bff717 	ldw	r2,-36(fp)
  8078e4:	10800044 	addi	r2,r2,1
  8078e8:	e0bff715 	stw	r2,-36(fp)
  8078ec:	e0bffd17 	ldw	r2,-12(fp)
  8078f0:	10bfffc4 	addi	r2,r2,-1
  8078f4:	e0fff717 	ldw	r3,-36(fp)
  8078f8:	18bff036 	bltu	r3,r2,8078bc <__alt_data_end+0xff8078bc>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  8078fc:	e0bff617 	ldw	r2,-40(fp)
  807900:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  807904:	e0bffa17 	ldw	r2,-24(fp)
  807908:	e0fffc17 	ldw	r3,-16(fp)
  80790c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  807910:	e0bffa17 	ldw	r2,-24(fp)
  807914:	e0fffc17 	ldw	r3,-16(fp)
  807918:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80791c:	e0bffa17 	ldw	r2,-24(fp)
  807920:	e0fffd17 	ldw	r3,-12(fp)
  807924:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  807928:	e0bffa17 	ldw	r2,-24(fp)
  80792c:	e0fffd17 	ldw	r3,-12(fp)
  807930:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  807934:	e0bffa17 	ldw	r2,-24(fp)
  807938:	e0fffe17 	ldw	r3,-8(fp)
  80793c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  807940:	e0bfff17 	ldw	r2,-4(fp)
  807944:	10000005 	stb	zero,0(r2)
    return (pmem);
  807948:	e0bffa17 	ldw	r2,-24(fp)
}
  80794c:	e037883a 	mov	sp,fp
  807950:	df000017 	ldw	fp,0(sp)
  807954:	dec00104 	addi	sp,sp,4
  807958:	f800283a 	ret

0080795c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80795c:	defff804 	addi	sp,sp,-32
  807960:	df000715 	stw	fp,28(sp)
  807964:	df000704 	addi	fp,sp,28
  807968:	e13ffe15 	stw	r4,-8(fp)
  80796c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  807970:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  807974:	e0bfff17 	ldw	r2,-4(fp)
  807978:	1000021e 	bne	r2,zero,807984 <OSMemGet+0x28>
        return ((void *)0);
  80797c:	0005883a 	mov	r2,zero
  807980:	00002e06 	br	807a3c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  807984:	e0bffe17 	ldw	r2,-8(fp)
  807988:	1000051e 	bne	r2,zero,8079a0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80798c:	e0bfff17 	ldw	r2,-4(fp)
  807990:	00c01804 	movi	r3,96
  807994:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  807998:	0005883a 	mov	r2,zero
  80799c:	00002706 	br	807a3c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8079a0:	0005303a 	rdctl	r2,status
  8079a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8079a8:	e0fffd17 	ldw	r3,-12(fp)
  8079ac:	00bfff84 	movi	r2,-2
  8079b0:	1884703a 	and	r2,r3,r2
  8079b4:	1001703a 	wrctl	status,r2
  
  return context;
  8079b8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8079bc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  8079c0:	e0bffe17 	ldw	r2,-8(fp)
  8079c4:	10800417 	ldw	r2,16(r2)
  8079c8:	10001426 	beq	r2,zero,807a1c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  8079cc:	e0bffe17 	ldw	r2,-8(fp)
  8079d0:	10800117 	ldw	r2,4(r2)
  8079d4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  8079d8:	e0bffb17 	ldw	r2,-20(fp)
  8079dc:	10c00017 	ldw	r3,0(r2)
  8079e0:	e0bffe17 	ldw	r2,-8(fp)
  8079e4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  8079e8:	e0bffe17 	ldw	r2,-8(fp)
  8079ec:	10800417 	ldw	r2,16(r2)
  8079f0:	10ffffc4 	addi	r3,r2,-1
  8079f4:	e0bffe17 	ldw	r2,-8(fp)
  8079f8:	10c00415 	stw	r3,16(r2)
  8079fc:	e0bff917 	ldw	r2,-28(fp)
  807a00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807a04:	e0bffa17 	ldw	r2,-24(fp)
  807a08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  807a0c:	e0bfff17 	ldw	r2,-4(fp)
  807a10:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  807a14:	e0bffb17 	ldw	r2,-20(fp)
  807a18:	00000806 	br	807a3c <OSMemGet+0xe0>
  807a1c:	e0bff917 	ldw	r2,-28(fp)
  807a20:	e0bffc15 	stw	r2,-16(fp)
  807a24:	e0bffc17 	ldw	r2,-16(fp)
  807a28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  807a2c:	e0bfff17 	ldw	r2,-4(fp)
  807a30:	00c01744 	movi	r3,93
  807a34:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  807a38:	0005883a 	mov	r2,zero
}
  807a3c:	e037883a 	mov	sp,fp
  807a40:	df000017 	ldw	fp,0(sp)
  807a44:	dec00104 	addi	sp,sp,4
  807a48:	f800283a 	ret

00807a4c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  807a4c:	defff704 	addi	sp,sp,-36
  807a50:	dfc00815 	stw	ra,32(sp)
  807a54:	df000715 	stw	fp,28(sp)
  807a58:	df000704 	addi	fp,sp,28
  807a5c:	e13ffd15 	stw	r4,-12(fp)
  807a60:	e17ffe15 	stw	r5,-8(fp)
  807a64:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807a68:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807a6c:	e0bfff17 	ldw	r2,-4(fp)
  807a70:	1000021e 	bne	r2,zero,807a7c <OSMemNameGet+0x30>
        return (0);
  807a74:	0005883a 	mov	r2,zero
  807a78:	00002b06 	br	807b28 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  807a7c:	e0bffd17 	ldw	r2,-12(fp)
  807a80:	1000051e 	bne	r2,zero,807a98 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  807a84:	e0bfff17 	ldw	r2,-4(fp)
  807a88:	00c01804 	movi	r3,96
  807a8c:	10c00005 	stb	r3,0(r2)
        return (0);
  807a90:	0005883a 	mov	r2,zero
  807a94:	00002406 	br	807b28 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  807a98:	e0bffe17 	ldw	r2,-8(fp)
  807a9c:	1000051e 	bne	r2,zero,807ab4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  807aa0:	e0bfff17 	ldw	r2,-4(fp)
  807aa4:	00c00304 	movi	r3,12
  807aa8:	10c00005 	stb	r3,0(r2)
        return (0);
  807aac:	0005883a 	mov	r2,zero
  807ab0:	00001d06 	br	807b28 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807ab4:	d0a70f03 	ldbu	r2,-25540(gp)
  807ab8:	10803fcc 	andi	r2,r2,255
  807abc:	10000526 	beq	r2,zero,807ad4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  807ac0:	e0bfff17 	ldw	r2,-4(fp)
  807ac4:	00c00444 	movi	r3,17
  807ac8:	10c00005 	stb	r3,0(r2)
        return (0);
  807acc:	0005883a 	mov	r2,zero
  807ad0:	00001506 	br	807b28 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807ad4:	0005303a 	rdctl	r2,status
  807ad8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807adc:	e0fffb17 	ldw	r3,-20(fp)
  807ae0:	00bfff84 	movi	r2,-2
  807ae4:	1884703a 	and	r2,r3,r2
  807ae8:	1001703a 	wrctl	status,r2
  
  return context;
  807aec:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  807af0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  807af4:	e0bffd17 	ldw	r2,-12(fp)
  807af8:	10800504 	addi	r2,r2,20
  807afc:	100b883a 	mov	r5,r2
  807b00:	e13ffe17 	ldw	r4,-8(fp)
  807b04:	08059540 	call	805954 <OS_StrCopy>
  807b08:	e0bffa05 	stb	r2,-24(fp)
  807b0c:	e0bff917 	ldw	r2,-28(fp)
  807b10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807b14:	e0bffc17 	ldw	r2,-16(fp)
  807b18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807b1c:	e0bfff17 	ldw	r2,-4(fp)
  807b20:	10000005 	stb	zero,0(r2)
    return (len);
  807b24:	e0bffa03 	ldbu	r2,-24(fp)
}
  807b28:	e037883a 	mov	sp,fp
  807b2c:	dfc00117 	ldw	ra,4(sp)
  807b30:	df000017 	ldw	fp,0(sp)
  807b34:	dec00204 	addi	sp,sp,8
  807b38:	f800283a 	ret

00807b3c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  807b3c:	defff604 	addi	sp,sp,-40
  807b40:	dfc00915 	stw	ra,36(sp)
  807b44:	df000815 	stw	fp,32(sp)
  807b48:	df000804 	addi	fp,sp,32
  807b4c:	e13ffd15 	stw	r4,-12(fp)
  807b50:	e17ffe15 	stw	r5,-8(fp)
  807b54:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807b58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807b5c:	e0bfff17 	ldw	r2,-4(fp)
  807b60:	10003526 	beq	r2,zero,807c38 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  807b64:	e0bffd17 	ldw	r2,-12(fp)
  807b68:	1000041e 	bne	r2,zero,807b7c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  807b6c:	e0bfff17 	ldw	r2,-4(fp)
  807b70:	00c01804 	movi	r3,96
  807b74:	10c00005 	stb	r3,0(r2)
        return;
  807b78:	00003006 	br	807c3c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  807b7c:	e0bffe17 	ldw	r2,-8(fp)
  807b80:	1000041e 	bne	r2,zero,807b94 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  807b84:	e0bfff17 	ldw	r2,-4(fp)
  807b88:	00c00304 	movi	r3,12
  807b8c:	10c00005 	stb	r3,0(r2)
        return;
  807b90:	00002a06 	br	807c3c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807b94:	d0a70f03 	ldbu	r2,-25540(gp)
  807b98:	10803fcc 	andi	r2,r2,255
  807b9c:	10000426 	beq	r2,zero,807bb0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  807ba0:	e0bfff17 	ldw	r2,-4(fp)
  807ba4:	00c00484 	movi	r3,18
  807ba8:	10c00005 	stb	r3,0(r2)
        return;
  807bac:	00002306 	br	807c3c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807bb0:	0005303a 	rdctl	r2,status
  807bb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807bb8:	e0fffc17 	ldw	r3,-16(fp)
  807bbc:	00bfff84 	movi	r2,-2
  807bc0:	1884703a 	and	r2,r3,r2
  807bc4:	1001703a 	wrctl	status,r2
  
  return context;
  807bc8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  807bcc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  807bd0:	e13ffe17 	ldw	r4,-8(fp)
  807bd4:	08059c80 	call	8059c8 <OS_StrLen>
  807bd8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  807bdc:	e0bffa03 	ldbu	r2,-24(fp)
  807be0:	10800830 	cmpltui	r2,r2,32
  807be4:	1000081e 	bne	r2,zero,807c08 <OSMemNameSet+0xcc>
  807be8:	e0bff817 	ldw	r2,-32(fp)
  807bec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807bf0:	e0bff917 	ldw	r2,-28(fp)
  807bf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  807bf8:	e0bfff17 	ldw	r2,-4(fp)
  807bfc:	00c018c4 	movi	r3,99
  807c00:	10c00005 	stb	r3,0(r2)
        return;
  807c04:	00000d06 	br	807c3c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  807c08:	e0bffd17 	ldw	r2,-12(fp)
  807c0c:	10800504 	addi	r2,r2,20
  807c10:	e17ffe17 	ldw	r5,-8(fp)
  807c14:	1009883a 	mov	r4,r2
  807c18:	08059540 	call	805954 <OS_StrCopy>
  807c1c:	e0bff817 	ldw	r2,-32(fp)
  807c20:	e0bffb15 	stw	r2,-20(fp)
  807c24:	e0bffb17 	ldw	r2,-20(fp)
  807c28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807c2c:	e0bfff17 	ldw	r2,-4(fp)
  807c30:	10000005 	stb	zero,0(r2)
  807c34:	00000106 	br	807c3c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  807c38:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  807c3c:	e037883a 	mov	sp,fp
  807c40:	dfc00117 	ldw	ra,4(sp)
  807c44:	df000017 	ldw	fp,0(sp)
  807c48:	dec00204 	addi	sp,sp,8
  807c4c:	f800283a 	ret

00807c50 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  807c50:	defff904 	addi	sp,sp,-28
  807c54:	df000615 	stw	fp,24(sp)
  807c58:	df000604 	addi	fp,sp,24
  807c5c:	e13ffe15 	stw	r4,-8(fp)
  807c60:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807c64:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  807c68:	e0bffe17 	ldw	r2,-8(fp)
  807c6c:	1000021e 	bne	r2,zero,807c78 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  807c70:	00801804 	movi	r2,96
  807c74:	00002806 	br	807d18 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  807c78:	e0bfff17 	ldw	r2,-4(fp)
  807c7c:	1000021e 	bne	r2,zero,807c88 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  807c80:	008017c4 	movi	r2,95
  807c84:	00002406 	br	807d18 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807c88:	0005303a 	rdctl	r2,status
  807c8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807c90:	e0fffd17 	ldw	r3,-12(fp)
  807c94:	00bfff84 	movi	r2,-2
  807c98:	1884703a 	and	r2,r3,r2
  807c9c:	1001703a 	wrctl	status,r2
  
  return context;
  807ca0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807ca4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  807ca8:	e0bffe17 	ldw	r2,-8(fp)
  807cac:	10c00417 	ldw	r3,16(r2)
  807cb0:	e0bffe17 	ldw	r2,-8(fp)
  807cb4:	10800317 	ldw	r2,12(r2)
  807cb8:	18800636 	bltu	r3,r2,807cd4 <OSMemPut+0x84>
  807cbc:	e0bffa17 	ldw	r2,-24(fp)
  807cc0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807cc4:	e0bffb17 	ldw	r2,-20(fp)
  807cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  807ccc:	00801784 	movi	r2,94
  807cd0:	00001106 	br	807d18 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  807cd4:	e0bffe17 	ldw	r2,-8(fp)
  807cd8:	10c00117 	ldw	r3,4(r2)
  807cdc:	e0bfff17 	ldw	r2,-4(fp)
  807ce0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  807ce4:	e0bffe17 	ldw	r2,-8(fp)
  807ce8:	e0ffff17 	ldw	r3,-4(fp)
  807cec:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  807cf0:	e0bffe17 	ldw	r2,-8(fp)
  807cf4:	10800417 	ldw	r2,16(r2)
  807cf8:	10c00044 	addi	r3,r2,1
  807cfc:	e0bffe17 	ldw	r2,-8(fp)
  807d00:	10c00415 	stw	r3,16(r2)
  807d04:	e0bffa17 	ldw	r2,-24(fp)
  807d08:	e0bffc15 	stw	r2,-16(fp)
  807d0c:	e0bffc17 	ldw	r2,-16(fp)
  807d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  807d14:	0005883a 	mov	r2,zero
}
  807d18:	e037883a 	mov	sp,fp
  807d1c:	df000017 	ldw	fp,0(sp)
  807d20:	dec00104 	addi	sp,sp,4
  807d24:	f800283a 	ret

00807d28 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  807d28:	defffa04 	addi	sp,sp,-24
  807d2c:	df000515 	stw	fp,20(sp)
  807d30:	df000504 	addi	fp,sp,20
  807d34:	e13ffe15 	stw	r4,-8(fp)
  807d38:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807d3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  807d40:	e0bffe17 	ldw	r2,-8(fp)
  807d44:	1000021e 	bne	r2,zero,807d50 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  807d48:	00801804 	movi	r2,96
  807d4c:	00002c06 	br	807e00 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  807d50:	e0bfff17 	ldw	r2,-4(fp)
  807d54:	1000021e 	bne	r2,zero,807d60 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  807d58:	00801844 	movi	r2,97
  807d5c:	00002806 	br	807e00 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807d60:	0005303a 	rdctl	r2,status
  807d64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807d68:	e0fffc17 	ldw	r3,-16(fp)
  807d6c:	00bfff84 	movi	r2,-2
  807d70:	1884703a 	and	r2,r3,r2
  807d74:	1001703a 	wrctl	status,r2
  
  return context;
  807d78:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807d7c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  807d80:	e0bffe17 	ldw	r2,-8(fp)
  807d84:	10c00017 	ldw	r3,0(r2)
  807d88:	e0bfff17 	ldw	r2,-4(fp)
  807d8c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  807d90:	e0bffe17 	ldw	r2,-8(fp)
  807d94:	10c00117 	ldw	r3,4(r2)
  807d98:	e0bfff17 	ldw	r2,-4(fp)
  807d9c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  807da0:	e0bffe17 	ldw	r2,-8(fp)
  807da4:	10c00217 	ldw	r3,8(r2)
  807da8:	e0bfff17 	ldw	r2,-4(fp)
  807dac:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  807db0:	e0bffe17 	ldw	r2,-8(fp)
  807db4:	10c00317 	ldw	r3,12(r2)
  807db8:	e0bfff17 	ldw	r2,-4(fp)
  807dbc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  807dc0:	e0bffe17 	ldw	r2,-8(fp)
  807dc4:	10c00417 	ldw	r3,16(r2)
  807dc8:	e0bfff17 	ldw	r2,-4(fp)
  807dcc:	10c00415 	stw	r3,16(r2)
  807dd0:	e0bffb17 	ldw	r2,-20(fp)
  807dd4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807dd8:	e0bffd17 	ldw	r2,-12(fp)
  807ddc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  807de0:	e0bfff17 	ldw	r2,-4(fp)
  807de4:	10c00317 	ldw	r3,12(r2)
  807de8:	e0bfff17 	ldw	r2,-4(fp)
  807dec:	10800417 	ldw	r2,16(r2)
  807df0:	1887c83a 	sub	r3,r3,r2
  807df4:	e0bfff17 	ldw	r2,-4(fp)
  807df8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  807dfc:	0005883a 	mov	r2,zero
}
  807e00:	e037883a 	mov	sp,fp
  807e04:	df000017 	ldw	fp,0(sp)
  807e08:	dec00104 	addi	sp,sp,4
  807e0c:	f800283a 	ret

00807e10 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  807e10:	defffc04 	addi	sp,sp,-16
  807e14:	dfc00315 	stw	ra,12(sp)
  807e18:	df000215 	stw	fp,8(sp)
  807e1c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  807e20:	01430c04 	movi	r5,3120
  807e24:	01002074 	movhi	r4,129
  807e28:	21163a04 	addi	r4,r4,22760
  807e2c:	08057540 	call	805754 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  807e30:	00802074 	movhi	r2,129
  807e34:	10963a04 	addi	r2,r2,22760
  807e38:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  807e3c:	e03fff0d 	sth	zero,-4(fp)
  807e40:	00001606 	br	807e9c <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  807e44:	e0bfff0b 	ldhu	r2,-4(fp)
  807e48:	10800044 	addi	r2,r2,1
  807e4c:	01400d04 	movi	r5,52
  807e50:	1009883a 	mov	r4,r2
  807e54:	080320c0 	call	80320c <__mulsi3>
  807e58:	1007883a 	mov	r3,r2
  807e5c:	00802074 	movhi	r2,129
  807e60:	10963a04 	addi	r2,r2,22760
  807e64:	1887883a 	add	r3,r3,r2
  807e68:	e0bffe17 	ldw	r2,-8(fp)
  807e6c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  807e70:	e0bffe17 	ldw	r2,-8(fp)
  807e74:	00c00fc4 	movi	r3,63
  807e78:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  807e7c:	e0bffe17 	ldw	r2,-8(fp)
  807e80:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  807e84:	e0bffe17 	ldw	r2,-8(fp)
  807e88:	10800d04 	addi	r2,r2,52
  807e8c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  807e90:	e0bfff0b 	ldhu	r2,-4(fp)
  807e94:	10800044 	addi	r2,r2,1
  807e98:	e0bfff0d 	sth	r2,-4(fp)
  807e9c:	e0bfff0b 	ldhu	r2,-4(fp)
  807ea0:	10800ef0 	cmpltui	r2,r2,59
  807ea4:	103fe71e 	bne	r2,zero,807e44 <__alt_data_end+0xff807e44>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  807ea8:	e0bffe17 	ldw	r2,-8(fp)
  807eac:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  807eb0:	e0bffe17 	ldw	r2,-8(fp)
  807eb4:	00c00fc4 	movi	r3,63
  807eb8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  807ebc:	e0bffe17 	ldw	r2,-8(fp)
  807ec0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  807ec4:	00802074 	movhi	r2,129
  807ec8:	10963a04 	addi	r2,r2,22760
  807ecc:	d0a70a15 	stw	r2,-25560(gp)
#endif
}
  807ed0:	0001883a 	nop
  807ed4:	e037883a 	mov	sp,fp
  807ed8:	dfc00117 	ldw	ra,4(sp)
  807edc:	df000017 	ldw	fp,0(sp)
  807ee0:	dec00204 	addi	sp,sp,8
  807ee4:	f800283a 	ret

00807ee8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  807ee8:	defff804 	addi	sp,sp,-32
  807eec:	df000715 	stw	fp,28(sp)
  807ef0:	df000704 	addi	fp,sp,28
  807ef4:	e13ffe15 	stw	r4,-8(fp)
  807ef8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807efc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  807f00:	e0bfff17 	ldw	r2,-4(fp)
  807f04:	1000021e 	bne	r2,zero,807f10 <OSQAccept+0x28>
        return ((void *)0);
  807f08:	0005883a 	mov	r2,zero
  807f0c:	00004206 	br	808018 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  807f10:	e0bffe17 	ldw	r2,-8(fp)
  807f14:	1000051e 	bne	r2,zero,807f2c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  807f18:	e0bfff17 	ldw	r2,-4(fp)
  807f1c:	00c00104 	movi	r3,4
  807f20:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  807f24:	0005883a 	mov	r2,zero
  807f28:	00003b06 	br	808018 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  807f2c:	e0bffe17 	ldw	r2,-8(fp)
  807f30:	10800003 	ldbu	r2,0(r2)
  807f34:	10803fcc 	andi	r2,r2,255
  807f38:	108000a0 	cmpeqi	r2,r2,2
  807f3c:	1000051e 	bne	r2,zero,807f54 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  807f40:	e0bfff17 	ldw	r2,-4(fp)
  807f44:	00c00044 	movi	r3,1
  807f48:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  807f4c:	0005883a 	mov	r2,zero
  807f50:	00003106 	br	808018 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807f54:	0005303a 	rdctl	r2,status
  807f58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807f5c:	e0fffd17 	ldw	r3,-12(fp)
  807f60:	00bfff84 	movi	r2,-2
  807f64:	1884703a 	and	r2,r3,r2
  807f68:	1001703a 	wrctl	status,r2
  
  return context;
  807f6c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  807f70:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  807f74:	e0bffe17 	ldw	r2,-8(fp)
  807f78:	10800117 	ldw	r2,4(r2)
  807f7c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  807f80:	e0bffc17 	ldw	r2,-16(fp)
  807f84:	1080058b 	ldhu	r2,22(r2)
  807f88:	10bfffcc 	andi	r2,r2,65535
  807f8c:	10001926 	beq	r2,zero,807ff4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  807f90:	e0bffc17 	ldw	r2,-16(fp)
  807f94:	10800417 	ldw	r2,16(r2)
  807f98:	11000104 	addi	r4,r2,4
  807f9c:	e0fffc17 	ldw	r3,-16(fp)
  807fa0:	19000415 	stw	r4,16(r3)
  807fa4:	10800017 	ldw	r2,0(r2)
  807fa8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  807fac:	e0bffc17 	ldw	r2,-16(fp)
  807fb0:	1080058b 	ldhu	r2,22(r2)
  807fb4:	10bfffc4 	addi	r2,r2,-1
  807fb8:	1007883a 	mov	r3,r2
  807fbc:	e0bffc17 	ldw	r2,-16(fp)
  807fc0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  807fc4:	e0bffc17 	ldw	r2,-16(fp)
  807fc8:	10c00417 	ldw	r3,16(r2)
  807fcc:	e0bffc17 	ldw	r2,-16(fp)
  807fd0:	10800217 	ldw	r2,8(r2)
  807fd4:	1880041e 	bne	r3,r2,807fe8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  807fd8:	e0bffc17 	ldw	r2,-16(fp)
  807fdc:	10c00117 	ldw	r3,4(r2)
  807fe0:	e0bffc17 	ldw	r2,-16(fp)
  807fe4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  807fe8:	e0bfff17 	ldw	r2,-4(fp)
  807fec:	10000005 	stb	zero,0(r2)
  807ff0:	00000406 	br	808004 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  807ff4:	e0bfff17 	ldw	r2,-4(fp)
  807ff8:	00c007c4 	movi	r3,31
  807ffc:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  808000:	e03ff915 	stw	zero,-28(fp)
  808004:	e0bffa17 	ldw	r2,-24(fp)
  808008:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80800c:	e0bffb17 	ldw	r2,-20(fp)
  808010:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  808014:	e0bff917 	ldw	r2,-28(fp)
}
  808018:	e037883a 	mov	sp,fp
  80801c:	df000017 	ldw	fp,0(sp)
  808020:	dec00104 	addi	sp,sp,4
  808024:	f800283a 	ret

00808028 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  808028:	defff404 	addi	sp,sp,-48
  80802c:	dfc00b15 	stw	ra,44(sp)
  808030:	df000a15 	stw	fp,40(sp)
  808034:	df000a04 	addi	fp,sp,40
  808038:	e13ffe15 	stw	r4,-8(fp)
  80803c:	2805883a 	mov	r2,r5
  808040:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808044:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  808048:	d0a70f03 	ldbu	r2,-25540(gp)
  80804c:	10803fcc 	andi	r2,r2,255
  808050:	10000226 	beq	r2,zero,80805c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  808054:	0005883a 	mov	r2,zero
  808058:	00005906 	br	8081c0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80805c:	0005303a 	rdctl	r2,status
  808060:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808064:	e0fffd17 	ldw	r3,-12(fp)
  808068:	00bfff84 	movi	r2,-2
  80806c:	1884703a 	and	r2,r3,r2
  808070:	1001703a 	wrctl	status,r2
  
  return context;
  808074:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  808078:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80807c:	d0a70e17 	ldw	r2,-25544(gp)
  808080:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  808084:	d0a70e17 	ldw	r2,-25544(gp)
  808088:	10000326 	beq	r2,zero,808098 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80808c:	d0a70e17 	ldw	r2,-25544(gp)
  808090:	10800117 	ldw	r2,4(r2)
  808094:	d0a70e15 	stw	r2,-25544(gp)
  808098:	e0bff717 	ldw	r2,-36(fp)
  80809c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8080a0:	e0bff817 	ldw	r2,-32(fp)
  8080a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  8080a8:	e0bff617 	ldw	r2,-40(fp)
  8080ac:	10004326 	beq	r2,zero,8081bc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8080b0:	0005303a 	rdctl	r2,status
  8080b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8080b8:	e0fff917 	ldw	r3,-28(fp)
  8080bc:	00bfff84 	movi	r2,-2
  8080c0:	1884703a 	and	r2,r3,r2
  8080c4:	1001703a 	wrctl	status,r2
  
  return context;
  8080c8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  8080cc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  8080d0:	d0a70c17 	ldw	r2,-25552(gp)
  8080d4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  8080d8:	e0bffb17 	ldw	r2,-20(fp)
  8080dc:	10002d26 	beq	r2,zero,808194 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  8080e0:	d0a70c17 	ldw	r2,-25552(gp)
  8080e4:	10800017 	ldw	r2,0(r2)
  8080e8:	d0a70c15 	stw	r2,-25552(gp)
  8080ec:	e0bff717 	ldw	r2,-36(fp)
  8080f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8080f4:	e0bffa17 	ldw	r2,-24(fp)
  8080f8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  8080fc:	e0bffb17 	ldw	r2,-20(fp)
  808100:	e0fffe17 	ldw	r3,-8(fp)
  808104:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  808108:	e0bfff0b 	ldhu	r2,-4(fp)
  80810c:	1085883a 	add	r2,r2,r2
  808110:	1085883a 	add	r2,r2,r2
  808114:	1007883a 	mov	r3,r2
  808118:	e0bffe17 	ldw	r2,-8(fp)
  80811c:	10c7883a 	add	r3,r2,r3
  808120:	e0bffb17 	ldw	r2,-20(fp)
  808124:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  808128:	e0bffb17 	ldw	r2,-20(fp)
  80812c:	e0fffe17 	ldw	r3,-8(fp)
  808130:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  808134:	e0bffb17 	ldw	r2,-20(fp)
  808138:	e0fffe17 	ldw	r3,-8(fp)
  80813c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  808140:	e0bffb17 	ldw	r2,-20(fp)
  808144:	e0ffff0b 	ldhu	r3,-4(fp)
  808148:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  80814c:	e0bffb17 	ldw	r2,-20(fp)
  808150:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  808154:	e0bff617 	ldw	r2,-40(fp)
  808158:	00c00084 	movi	r3,2
  80815c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  808160:	e0bff617 	ldw	r2,-40(fp)
  808164:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  808168:	e0bff617 	ldw	r2,-40(fp)
  80816c:	e0fffb17 	ldw	r3,-20(fp)
  808170:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  808174:	e0bff617 	ldw	r2,-40(fp)
  808178:	00c00fc4 	movi	r3,63
  80817c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  808180:	e0bff617 	ldw	r2,-40(fp)
  808184:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  808188:	e13ff617 	ldw	r4,-40(fp)
  80818c:	08053740 	call	805374 <OS_EventWaitListInit>
  808190:	00000a06 	br	8081bc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  808194:	d0e70e17 	ldw	r3,-25544(gp)
  808198:	e0bff617 	ldw	r2,-40(fp)
  80819c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  8081a0:	e0bff617 	ldw	r2,-40(fp)
  8081a4:	d0a70e15 	stw	r2,-25544(gp)
  8081a8:	e0bff717 	ldw	r2,-36(fp)
  8081ac:	e0bffc15 	stw	r2,-16(fp)
  8081b0:	e0bffc17 	ldw	r2,-16(fp)
  8081b4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  8081b8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  8081bc:	e0bff617 	ldw	r2,-40(fp)
}
  8081c0:	e037883a 	mov	sp,fp
  8081c4:	dfc00117 	ldw	ra,4(sp)
  8081c8:	df000017 	ldw	fp,0(sp)
  8081cc:	dec00204 	addi	sp,sp,8
  8081d0:	f800283a 	ret

008081d4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8081d4:	defff204 	addi	sp,sp,-56
  8081d8:	dfc00d15 	stw	ra,52(sp)
  8081dc:	df000c15 	stw	fp,48(sp)
  8081e0:	df000c04 	addi	fp,sp,48
  8081e4:	e13ffd15 	stw	r4,-12(fp)
  8081e8:	2805883a 	mov	r2,r5
  8081ec:	e1bfff15 	stw	r6,-4(fp)
  8081f0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8081f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8081f8:	e0bfff17 	ldw	r2,-4(fp)
  8081fc:	1000021e 	bne	r2,zero,808208 <OSQDel+0x34>
        return (pevent);
  808200:	e0bffd17 	ldw	r2,-12(fp)
  808204:	00008e06 	br	808440 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  808208:	e0bffd17 	ldw	r2,-12(fp)
  80820c:	1000051e 	bne	r2,zero,808224 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  808210:	e0bfff17 	ldw	r2,-4(fp)
  808214:	00c00104 	movi	r3,4
  808218:	10c00005 	stb	r3,0(r2)
        return (pevent);
  80821c:	e0bffd17 	ldw	r2,-12(fp)
  808220:	00008706 	br	808440 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  808224:	e0bffd17 	ldw	r2,-12(fp)
  808228:	10800003 	ldbu	r2,0(r2)
  80822c:	10803fcc 	andi	r2,r2,255
  808230:	108000a0 	cmpeqi	r2,r2,2
  808234:	1000051e 	bne	r2,zero,80824c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  808238:	e0bfff17 	ldw	r2,-4(fp)
  80823c:	00c00044 	movi	r3,1
  808240:	10c00005 	stb	r3,0(r2)
        return (pevent);
  808244:	e0bffd17 	ldw	r2,-12(fp)
  808248:	00007d06 	br	808440 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80824c:	d0a70f03 	ldbu	r2,-25540(gp)
  808250:	10803fcc 	andi	r2,r2,255
  808254:	10000526 	beq	r2,zero,80826c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  808258:	e0bfff17 	ldw	r2,-4(fp)
  80825c:	00c003c4 	movi	r3,15
  808260:	10c00005 	stb	r3,0(r2)
        return (pevent);
  808264:	e0bffd17 	ldw	r2,-12(fp)
  808268:	00007506 	br	808440 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80826c:	0005303a 	rdctl	r2,status
  808270:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808274:	e0fffc17 	ldw	r3,-16(fp)
  808278:	00bfff84 	movi	r2,-2
  80827c:	1884703a 	and	r2,r3,r2
  808280:	1001703a 	wrctl	status,r2
  
  return context;
  808284:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  808288:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  80828c:	e0bffd17 	ldw	r2,-12(fp)
  808290:	10800283 	ldbu	r2,10(r2)
  808294:	10803fcc 	andi	r2,r2,255
  808298:	10000326 	beq	r2,zero,8082a8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80829c:	00800044 	movi	r2,1
  8082a0:	e0bff405 	stb	r2,-48(fp)
  8082a4:	00000106 	br	8082ac <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8082a8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  8082ac:	e0bffe03 	ldbu	r2,-8(fp)
  8082b0:	10000326 	beq	r2,zero,8082c0 <OSQDel+0xec>
  8082b4:	10800060 	cmpeqi	r2,r2,1
  8082b8:	1000301e 	bne	r2,zero,80837c <OSQDel+0x1a8>
  8082bc:	00005506 	br	808414 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  8082c0:	e0bff403 	ldbu	r2,-48(fp)
  8082c4:	10001e1e 	bne	r2,zero,808340 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8082c8:	e0bffd17 	ldw	r2,-12(fp)
  8082cc:	00c00fc4 	movi	r3,63
  8082d0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8082d4:	e0bffd17 	ldw	r2,-12(fp)
  8082d8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  8082dc:	e0bffd17 	ldw	r2,-12(fp)
  8082e0:	10800117 	ldw	r2,4(r2)
  8082e4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  8082e8:	d0e70c17 	ldw	r3,-25552(gp)
  8082ec:	e0bff817 	ldw	r2,-32(fp)
  8082f0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  8082f4:	e0bff817 	ldw	r2,-32(fp)
  8082f8:	d0a70c15 	stw	r2,-25552(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8082fc:	e0bffd17 	ldw	r2,-12(fp)
  808300:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  808304:	d0e70e17 	ldw	r3,-25544(gp)
  808308:	e0bffd17 	ldw	r2,-12(fp)
  80830c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  808310:	e0bffd17 	ldw	r2,-12(fp)
  808314:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  808318:	e0bffd17 	ldw	r2,-12(fp)
  80831c:	d0a70e15 	stw	r2,-25544(gp)
  808320:	e0bff617 	ldw	r2,-40(fp)
  808324:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808328:	e0bff717 	ldw	r2,-36(fp)
  80832c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  808330:	e0bfff17 	ldw	r2,-4(fp)
  808334:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  808338:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  80833c:	00003f06 	br	80843c <OSQDel+0x268>
  808340:	e0bff617 	ldw	r2,-40(fp)
  808344:	e0bff915 	stw	r2,-28(fp)
  808348:	e0bff917 	ldw	r2,-28(fp)
  80834c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  808350:	e0bfff17 	ldw	r2,-4(fp)
  808354:	00c01244 	movi	r3,73
  808358:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  80835c:	e0bffd17 	ldw	r2,-12(fp)
  808360:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  808364:	00003506 	br	80843c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  808368:	000f883a 	mov	r7,zero
  80836c:	01800104 	movi	r6,4
  808370:	000b883a 	mov	r5,zero
  808374:	e13ffd17 	ldw	r4,-12(fp)
  808378:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  80837c:	e0bffd17 	ldw	r2,-12(fp)
  808380:	10800283 	ldbu	r2,10(r2)
  808384:	10803fcc 	andi	r2,r2,255
  808388:	103ff71e 	bne	r2,zero,808368 <__alt_data_end+0xff808368>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80838c:	e0bffd17 	ldw	r2,-12(fp)
  808390:	00c00fc4 	movi	r3,63
  808394:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  808398:	e0bffd17 	ldw	r2,-12(fp)
  80839c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  8083a0:	e0bffd17 	ldw	r2,-12(fp)
  8083a4:	10800117 	ldw	r2,4(r2)
  8083a8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  8083ac:	d0e70c17 	ldw	r3,-25552(gp)
  8083b0:	e0bff817 	ldw	r2,-32(fp)
  8083b4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  8083b8:	e0bff817 	ldw	r2,-32(fp)
  8083bc:	d0a70c15 	stw	r2,-25552(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8083c0:	e0bffd17 	ldw	r2,-12(fp)
  8083c4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8083c8:	d0e70e17 	ldw	r3,-25544(gp)
  8083cc:	e0bffd17 	ldw	r2,-12(fp)
  8083d0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8083d4:	e0bffd17 	ldw	r2,-12(fp)
  8083d8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8083dc:	e0bffd17 	ldw	r2,-12(fp)
  8083e0:	d0a70e15 	stw	r2,-25544(gp)
  8083e4:	e0bff617 	ldw	r2,-40(fp)
  8083e8:	e0bffa15 	stw	r2,-24(fp)
  8083ec:	e0bffa17 	ldw	r2,-24(fp)
  8083f0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8083f4:	e0bff403 	ldbu	r2,-48(fp)
  8083f8:	10800058 	cmpnei	r2,r2,1
  8083fc:	1000011e 	bne	r2,zero,808404 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  808400:	08058100 	call	805810 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  808404:	e0bfff17 	ldw	r2,-4(fp)
  808408:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80840c:	e03ff515 	stw	zero,-44(fp)
             break;
  808410:	00000a06 	br	80843c <OSQDel+0x268>
  808414:	e0bff617 	ldw	r2,-40(fp)
  808418:	e0bffb15 	stw	r2,-20(fp)
  80841c:	e0bffb17 	ldw	r2,-20(fp)
  808420:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  808424:	e0bfff17 	ldw	r2,-4(fp)
  808428:	00c001c4 	movi	r3,7
  80842c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  808430:	e0bffd17 	ldw	r2,-12(fp)
  808434:	e0bff515 	stw	r2,-44(fp)
             break;
  808438:	0001883a 	nop
    }
    return (pevent_return);
  80843c:	e0bff517 	ldw	r2,-44(fp)
}
  808440:	e037883a 	mov	sp,fp
  808444:	dfc00117 	ldw	ra,4(sp)
  808448:	df000017 	ldw	fp,0(sp)
  80844c:	dec00204 	addi	sp,sp,8
  808450:	f800283a 	ret

00808454 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  808454:	defffa04 	addi	sp,sp,-24
  808458:	df000515 	stw	fp,20(sp)
  80845c:	df000504 	addi	fp,sp,20
  808460:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808464:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  808468:	e0bfff17 	ldw	r2,-4(fp)
  80846c:	1000021e 	bne	r2,zero,808478 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  808470:	00800104 	movi	r2,4
  808474:	00002106 	br	8084fc <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  808478:	e0bfff17 	ldw	r2,-4(fp)
  80847c:	10800003 	ldbu	r2,0(r2)
  808480:	10803fcc 	andi	r2,r2,255
  808484:	108000a0 	cmpeqi	r2,r2,2
  808488:	1000021e 	bne	r2,zero,808494 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  80848c:	00800044 	movi	r2,1
  808490:	00001a06 	br	8084fc <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808494:	0005303a 	rdctl	r2,status
  808498:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80849c:	e0fffd17 	ldw	r3,-12(fp)
  8084a0:	00bfff84 	movi	r2,-2
  8084a4:	1884703a 	and	r2,r3,r2
  8084a8:	1001703a 	wrctl	status,r2
  
  return context;
  8084ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8084b0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  8084b4:	e0bfff17 	ldw	r2,-4(fp)
  8084b8:	10800117 	ldw	r2,4(r2)
  8084bc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  8084c0:	e0bffc17 	ldw	r2,-16(fp)
  8084c4:	10c00117 	ldw	r3,4(r2)
  8084c8:	e0bffc17 	ldw	r2,-16(fp)
  8084cc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  8084d0:	e0bffc17 	ldw	r2,-16(fp)
  8084d4:	10c00117 	ldw	r3,4(r2)
  8084d8:	e0bffc17 	ldw	r2,-16(fp)
  8084dc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  8084e0:	e0bffc17 	ldw	r2,-16(fp)
  8084e4:	1000058d 	sth	zero,22(r2)
  8084e8:	e0bffb17 	ldw	r2,-20(fp)
  8084ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8084f0:	e0bffe17 	ldw	r2,-8(fp)
  8084f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8084f8:	0005883a 	mov	r2,zero
}
  8084fc:	e037883a 	mov	sp,fp
  808500:	df000017 	ldw	fp,0(sp)
  808504:	dec00104 	addi	sp,sp,4
  808508:	f800283a 	ret

0080850c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80850c:	defff304 	addi	sp,sp,-52
  808510:	dfc00c15 	stw	ra,48(sp)
  808514:	df000b15 	stw	fp,44(sp)
  808518:	df000b04 	addi	fp,sp,44
  80851c:	e13ffd15 	stw	r4,-12(fp)
  808520:	2805883a 	mov	r2,r5
  808524:	e1bfff15 	stw	r6,-4(fp)
  808528:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80852c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  808530:	e0bfff17 	ldw	r2,-4(fp)
  808534:	1000021e 	bne	r2,zero,808540 <OSQPend+0x34>
        return ((void *)0);
  808538:	0005883a 	mov	r2,zero
  80853c:	00009106 	br	808784 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  808540:	e0bffd17 	ldw	r2,-12(fp)
  808544:	1000051e 	bne	r2,zero,80855c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  808548:	e0bfff17 	ldw	r2,-4(fp)
  80854c:	00c00104 	movi	r3,4
  808550:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  808554:	0005883a 	mov	r2,zero
  808558:	00008a06 	br	808784 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80855c:	e0bffd17 	ldw	r2,-12(fp)
  808560:	10800003 	ldbu	r2,0(r2)
  808564:	10803fcc 	andi	r2,r2,255
  808568:	108000a0 	cmpeqi	r2,r2,2
  80856c:	1000051e 	bne	r2,zero,808584 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  808570:	e0bfff17 	ldw	r2,-4(fp)
  808574:	00c00044 	movi	r3,1
  808578:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  80857c:	0005883a 	mov	r2,zero
  808580:	00008006 	br	808784 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  808584:	d0a70f03 	ldbu	r2,-25540(gp)
  808588:	10803fcc 	andi	r2,r2,255
  80858c:	10000526 	beq	r2,zero,8085a4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  808590:	e0bfff17 	ldw	r2,-4(fp)
  808594:	00c00084 	movi	r3,2
  808598:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  80859c:	0005883a 	mov	r2,zero
  8085a0:	00007806 	br	808784 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  8085a4:	d0a70103 	ldbu	r2,-25596(gp)
  8085a8:	10803fcc 	andi	r2,r2,255
  8085ac:	10000526 	beq	r2,zero,8085c4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  8085b0:	e0bfff17 	ldw	r2,-4(fp)
  8085b4:	00c00344 	movi	r3,13
  8085b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8085bc:	0005883a 	mov	r2,zero
  8085c0:	00007006 	br	808784 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8085c4:	0005303a 	rdctl	r2,status
  8085c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8085cc:	e0fffc17 	ldw	r3,-16(fp)
  8085d0:	00bfff84 	movi	r2,-2
  8085d4:	1884703a 	and	r2,r3,r2
  8085d8:	1001703a 	wrctl	status,r2
  
  return context;
  8085dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8085e0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  8085e4:	e0bffd17 	ldw	r2,-12(fp)
  8085e8:	10800117 	ldw	r2,4(r2)
  8085ec:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  8085f0:	e0bff817 	ldw	r2,-32(fp)
  8085f4:	1080058b 	ldhu	r2,22(r2)
  8085f8:	10bfffcc 	andi	r2,r2,65535
  8085fc:	10001e26 	beq	r2,zero,808678 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  808600:	e0bff817 	ldw	r2,-32(fp)
  808604:	10800417 	ldw	r2,16(r2)
  808608:	11000104 	addi	r4,r2,4
  80860c:	e0fff817 	ldw	r3,-32(fp)
  808610:	19000415 	stw	r4,16(r3)
  808614:	10800017 	ldw	r2,0(r2)
  808618:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80861c:	e0bff817 	ldw	r2,-32(fp)
  808620:	1080058b 	ldhu	r2,22(r2)
  808624:	10bfffc4 	addi	r2,r2,-1
  808628:	1007883a 	mov	r3,r2
  80862c:	e0bff817 	ldw	r2,-32(fp)
  808630:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  808634:	e0bff817 	ldw	r2,-32(fp)
  808638:	10c00417 	ldw	r3,16(r2)
  80863c:	e0bff817 	ldw	r2,-32(fp)
  808640:	10800217 	ldw	r2,8(r2)
  808644:	1880041e 	bne	r3,r2,808658 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  808648:	e0bff817 	ldw	r2,-32(fp)
  80864c:	10c00117 	ldw	r3,4(r2)
  808650:	e0bff817 	ldw	r2,-32(fp)
  808654:	10c00415 	stw	r3,16(r2)
  808658:	e0bff617 	ldw	r2,-40(fp)
  80865c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808660:	e0bff717 	ldw	r2,-36(fp)
  808664:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  808668:	e0bfff17 	ldw	r2,-4(fp)
  80866c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  808670:	e0bff517 	ldw	r2,-44(fp)
  808674:	00004306 	br	808784 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  808678:	d0a71017 	ldw	r2,-25536(gp)
  80867c:	d0e71017 	ldw	r3,-25536(gp)
  808680:	18c00c03 	ldbu	r3,48(r3)
  808684:	18c00114 	ori	r3,r3,4
  808688:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80868c:	d0a71017 	ldw	r2,-25536(gp)
  808690:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  808694:	d0a71017 	ldw	r2,-25536(gp)
  808698:	e0fffe0b 	ldhu	r3,-8(fp)
  80869c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  8086a0:	e13ffd17 	ldw	r4,-12(fp)
  8086a4:	0804f5c0 	call	804f5c <OS_EventTaskWait>
  8086a8:	e0bff617 	ldw	r2,-40(fp)
  8086ac:	e0bffb15 	stw	r2,-20(fp)
  8086b0:	e0bffb17 	ldw	r2,-20(fp)
  8086b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  8086b8:	08058100 	call	805810 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8086bc:	0005303a 	rdctl	r2,status
  8086c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8086c4:	e0fff917 	ldw	r3,-28(fp)
  8086c8:	00bfff84 	movi	r2,-2
  8086cc:	1884703a 	and	r2,r3,r2
  8086d0:	1001703a 	wrctl	status,r2
  
  return context;
  8086d4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  8086d8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  8086dc:	d0a71017 	ldw	r2,-25536(gp)
  8086e0:	10800c43 	ldbu	r2,49(r2)
  8086e4:	10803fcc 	andi	r2,r2,255
  8086e8:	10000326 	beq	r2,zero,8086f8 <OSQPend+0x1ec>
  8086ec:	108000a0 	cmpeqi	r2,r2,2
  8086f0:	1000071e 	bne	r2,zero,808710 <OSQPend+0x204>
  8086f4:	00000b06 	br	808724 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  8086f8:	d0a71017 	ldw	r2,-25536(gp)
  8086fc:	10800917 	ldw	r2,36(r2)
  808700:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  808704:	e0bfff17 	ldw	r2,-4(fp)
  808708:	10000005 	stb	zero,0(r2)
             break;
  80870c:	00000e06 	br	808748 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  808710:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  808714:	e0bfff17 	ldw	r2,-4(fp)
  808718:	00c00384 	movi	r3,14
  80871c:	10c00005 	stb	r3,0(r2)
             break;
  808720:	00000906 	br	808748 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  808724:	d0a71017 	ldw	r2,-25536(gp)
  808728:	e17ffd17 	ldw	r5,-12(fp)
  80872c:	1009883a 	mov	r4,r2
  808730:	08051bc0 	call	8051bc <OS_EventTaskRemove>
             pmsg = (void *)0;
  808734:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  808738:	e0bfff17 	ldw	r2,-4(fp)
  80873c:	00c00284 	movi	r3,10
  808740:	10c00005 	stb	r3,0(r2)
             break;
  808744:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  808748:	d0a71017 	ldw	r2,-25536(gp)
  80874c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  808750:	d0a71017 	ldw	r2,-25536(gp)
  808754:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  808758:	d0a71017 	ldw	r2,-25536(gp)
  80875c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  808760:	d0a71017 	ldw	r2,-25536(gp)
  808764:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  808768:	d0a71017 	ldw	r2,-25536(gp)
  80876c:	10000915 	stw	zero,36(r2)
  808770:	e0bff617 	ldw	r2,-40(fp)
  808774:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808778:	e0bffa17 	ldw	r2,-24(fp)
  80877c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  808780:	e0bff517 	ldw	r2,-44(fp)
}
  808784:	e037883a 	mov	sp,fp
  808788:	dfc00117 	ldw	ra,4(sp)
  80878c:	df000017 	ldw	fp,0(sp)
  808790:	dec00204 	addi	sp,sp,8
  808794:	f800283a 	ret

00808798 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  808798:	defff604 	addi	sp,sp,-40
  80879c:	dfc00915 	stw	ra,36(sp)
  8087a0:	df000815 	stw	fp,32(sp)
  8087a4:	df000804 	addi	fp,sp,32
  8087a8:	e13ffd15 	stw	r4,-12(fp)
  8087ac:	2805883a 	mov	r2,r5
  8087b0:	e1bfff15 	stw	r6,-4(fp)
  8087b4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8087b8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8087bc:	e0bfff17 	ldw	r2,-4(fp)
  8087c0:	1000021e 	bne	r2,zero,8087cc <OSQPendAbort+0x34>
        return (0);
  8087c4:	0005883a 	mov	r2,zero
  8087c8:	00004906 	br	8088f0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8087cc:	e0bffd17 	ldw	r2,-12(fp)
  8087d0:	1000051e 	bne	r2,zero,8087e8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8087d4:	e0bfff17 	ldw	r2,-4(fp)
  8087d8:	00c00104 	movi	r3,4
  8087dc:	10c00005 	stb	r3,0(r2)
        return (0);
  8087e0:	0005883a 	mov	r2,zero
  8087e4:	00004206 	br	8088f0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  8087e8:	e0bffd17 	ldw	r2,-12(fp)
  8087ec:	10800003 	ldbu	r2,0(r2)
  8087f0:	10803fcc 	andi	r2,r2,255
  8087f4:	108000a0 	cmpeqi	r2,r2,2
  8087f8:	1000051e 	bne	r2,zero,808810 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8087fc:	e0bfff17 	ldw	r2,-4(fp)
  808800:	00c00044 	movi	r3,1
  808804:	10c00005 	stb	r3,0(r2)
        return (0);
  808808:	0005883a 	mov	r2,zero
  80880c:	00003806 	br	8088f0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808810:	0005303a 	rdctl	r2,status
  808814:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808818:	e0fffc17 	ldw	r3,-16(fp)
  80881c:	00bfff84 	movi	r2,-2
  808820:	1884703a 	and	r2,r3,r2
  808824:	1001703a 	wrctl	status,r2
  
  return context;
  808828:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80882c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  808830:	e0bffd17 	ldw	r2,-12(fp)
  808834:	10800283 	ldbu	r2,10(r2)
  808838:	10803fcc 	andi	r2,r2,255
  80883c:	10002526 	beq	r2,zero,8088d4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  808840:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  808844:	e0bffe03 	ldbu	r2,-8(fp)
  808848:	10800060 	cmpeqi	r2,r2,1
  80884c:	10000e26 	beq	r2,zero,808888 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  808850:	00000806 	br	808874 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  808854:	01c00084 	movi	r7,2
  808858:	01800104 	movi	r6,4
  80885c:	000b883a 	mov	r5,zero
  808860:	e13ffd17 	ldw	r4,-12(fp)
  808864:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
                     nbr_tasks++;
  808868:	e0bff803 	ldbu	r2,-32(fp)
  80886c:	10800044 	addi	r2,r2,1
  808870:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  808874:	e0bffd17 	ldw	r2,-12(fp)
  808878:	10800283 	ldbu	r2,10(r2)
  80887c:	10803fcc 	andi	r2,r2,255
  808880:	103ff41e 	bne	r2,zero,808854 <__alt_data_end+0xff808854>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  808884:	00000906 	br	8088ac <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  808888:	01c00084 	movi	r7,2
  80888c:	01800104 	movi	r6,4
  808890:	000b883a 	mov	r5,zero
  808894:	e13ffd17 	ldw	r4,-12(fp)
  808898:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
                 nbr_tasks++;
  80889c:	e0bff803 	ldbu	r2,-32(fp)
  8088a0:	10800044 	addi	r2,r2,1
  8088a4:	e0bff805 	stb	r2,-32(fp)
                 break;
  8088a8:	0001883a 	nop
  8088ac:	e0bff917 	ldw	r2,-28(fp)
  8088b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8088b4:	e0bffa17 	ldw	r2,-24(fp)
  8088b8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  8088bc:	08058100 	call	805810 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  8088c0:	e0bfff17 	ldw	r2,-4(fp)
  8088c4:	00c00384 	movi	r3,14
  8088c8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  8088cc:	e0bff803 	ldbu	r2,-32(fp)
  8088d0:	00000706 	br	8088f0 <OSQPendAbort+0x158>
  8088d4:	e0bff917 	ldw	r2,-28(fp)
  8088d8:	e0bffb15 	stw	r2,-20(fp)
  8088dc:	e0bffb17 	ldw	r2,-20(fp)
  8088e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8088e4:	e0bfff17 	ldw	r2,-4(fp)
  8088e8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  8088ec:	0005883a 	mov	r2,zero
}
  8088f0:	e037883a 	mov	sp,fp
  8088f4:	dfc00117 	ldw	ra,4(sp)
  8088f8:	df000017 	ldw	fp,0(sp)
  8088fc:	dec00204 	addi	sp,sp,8
  808900:	f800283a 	ret

00808904 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  808904:	defff604 	addi	sp,sp,-40
  808908:	dfc00915 	stw	ra,36(sp)
  80890c:	df000815 	stw	fp,32(sp)
  808910:	df000804 	addi	fp,sp,32
  808914:	e13ffe15 	stw	r4,-8(fp)
  808918:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80891c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  808920:	e0bffe17 	ldw	r2,-8(fp)
  808924:	1000021e 	bne	r2,zero,808930 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  808928:	00800104 	movi	r2,4
  80892c:	00004a06 	br	808a58 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  808930:	e0bffe17 	ldw	r2,-8(fp)
  808934:	10800003 	ldbu	r2,0(r2)
  808938:	10803fcc 	andi	r2,r2,255
  80893c:	108000a0 	cmpeqi	r2,r2,2
  808940:	1000021e 	bne	r2,zero,80894c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  808944:	00800044 	movi	r2,1
  808948:	00004306 	br	808a58 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80894c:	0005303a 	rdctl	r2,status
  808950:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808954:	e0fffd17 	ldw	r3,-12(fp)
  808958:	00bfff84 	movi	r2,-2
  80895c:	1884703a 	and	r2,r3,r2
  808960:	1001703a 	wrctl	status,r2
  
  return context;
  808964:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  808968:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  80896c:	e0bffe17 	ldw	r2,-8(fp)
  808970:	10800283 	ldbu	r2,10(r2)
  808974:	10803fcc 	andi	r2,r2,255
  808978:	10000c26 	beq	r2,zero,8089ac <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80897c:	000f883a 	mov	r7,zero
  808980:	01800104 	movi	r6,4
  808984:	e17fff17 	ldw	r5,-4(fp)
  808988:	e13ffe17 	ldw	r4,-8(fp)
  80898c:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
  808990:	e0bff817 	ldw	r2,-32(fp)
  808994:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808998:	e0bff917 	ldw	r2,-28(fp)
  80899c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  8089a0:	08058100 	call	805810 <OS_Sched>
        return (OS_ERR_NONE);
  8089a4:	0005883a 	mov	r2,zero
  8089a8:	00002b06 	br	808a58 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  8089ac:	e0bffe17 	ldw	r2,-8(fp)
  8089b0:	10800117 	ldw	r2,4(r2)
  8089b4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  8089b8:	e0bffb17 	ldw	r2,-20(fp)
  8089bc:	10c0058b 	ldhu	r3,22(r2)
  8089c0:	e0bffb17 	ldw	r2,-20(fp)
  8089c4:	1080050b 	ldhu	r2,20(r2)
  8089c8:	18ffffcc 	andi	r3,r3,65535
  8089cc:	10bfffcc 	andi	r2,r2,65535
  8089d0:	18800636 	bltu	r3,r2,8089ec <OSQPost+0xe8>
  8089d4:	e0bff817 	ldw	r2,-32(fp)
  8089d8:	e0bffa15 	stw	r2,-24(fp)
  8089dc:	e0bffa17 	ldw	r2,-24(fp)
  8089e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8089e4:	00800784 	movi	r2,30
  8089e8:	00001b06 	br	808a58 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  8089ec:	e0bffb17 	ldw	r2,-20(fp)
  8089f0:	10800317 	ldw	r2,12(r2)
  8089f4:	11000104 	addi	r4,r2,4
  8089f8:	e0fffb17 	ldw	r3,-20(fp)
  8089fc:	19000315 	stw	r4,12(r3)
  808a00:	e0ffff17 	ldw	r3,-4(fp)
  808a04:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  808a08:	e0bffb17 	ldw	r2,-20(fp)
  808a0c:	1080058b 	ldhu	r2,22(r2)
  808a10:	10800044 	addi	r2,r2,1
  808a14:	1007883a 	mov	r3,r2
  808a18:	e0bffb17 	ldw	r2,-20(fp)
  808a1c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  808a20:	e0bffb17 	ldw	r2,-20(fp)
  808a24:	10c00317 	ldw	r3,12(r2)
  808a28:	e0bffb17 	ldw	r2,-20(fp)
  808a2c:	10800217 	ldw	r2,8(r2)
  808a30:	1880041e 	bne	r3,r2,808a44 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  808a34:	e0bffb17 	ldw	r2,-20(fp)
  808a38:	10c00117 	ldw	r3,4(r2)
  808a3c:	e0bffb17 	ldw	r2,-20(fp)
  808a40:	10c00315 	stw	r3,12(r2)
  808a44:	e0bff817 	ldw	r2,-32(fp)
  808a48:	e0bffc15 	stw	r2,-16(fp)
  808a4c:	e0bffc17 	ldw	r2,-16(fp)
  808a50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808a54:	0005883a 	mov	r2,zero
}
  808a58:	e037883a 	mov	sp,fp
  808a5c:	dfc00117 	ldw	ra,4(sp)
  808a60:	df000017 	ldw	fp,0(sp)
  808a64:	dec00204 	addi	sp,sp,8
  808a68:	f800283a 	ret

00808a6c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  808a6c:	defff604 	addi	sp,sp,-40
  808a70:	dfc00915 	stw	ra,36(sp)
  808a74:	df000815 	stw	fp,32(sp)
  808a78:	df000804 	addi	fp,sp,32
  808a7c:	e13ffe15 	stw	r4,-8(fp)
  808a80:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808a84:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  808a88:	e0bffe17 	ldw	r2,-8(fp)
  808a8c:	1000021e 	bne	r2,zero,808a98 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  808a90:	00800104 	movi	r2,4
  808a94:	00004c06 	br	808bc8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  808a98:	e0bffe17 	ldw	r2,-8(fp)
  808a9c:	10800003 	ldbu	r2,0(r2)
  808aa0:	10803fcc 	andi	r2,r2,255
  808aa4:	108000a0 	cmpeqi	r2,r2,2
  808aa8:	1000021e 	bne	r2,zero,808ab4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  808aac:	00800044 	movi	r2,1
  808ab0:	00004506 	br	808bc8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808ab4:	0005303a 	rdctl	r2,status
  808ab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808abc:	e0fffd17 	ldw	r3,-12(fp)
  808ac0:	00bfff84 	movi	r2,-2
  808ac4:	1884703a 	and	r2,r3,r2
  808ac8:	1001703a 	wrctl	status,r2
  
  return context;
  808acc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  808ad0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  808ad4:	e0bffe17 	ldw	r2,-8(fp)
  808ad8:	10800283 	ldbu	r2,10(r2)
  808adc:	10803fcc 	andi	r2,r2,255
  808ae0:	10000c26 	beq	r2,zero,808b14 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  808ae4:	000f883a 	mov	r7,zero
  808ae8:	01800104 	movi	r6,4
  808aec:	e17fff17 	ldw	r5,-4(fp)
  808af0:	e13ffe17 	ldw	r4,-8(fp)
  808af4:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
  808af8:	e0bff817 	ldw	r2,-32(fp)
  808afc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808b00:	e0bff917 	ldw	r2,-28(fp)
  808b04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  808b08:	08058100 	call	805810 <OS_Sched>
        return (OS_ERR_NONE);
  808b0c:	0005883a 	mov	r2,zero
  808b10:	00002d06 	br	808bc8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  808b14:	e0bffe17 	ldw	r2,-8(fp)
  808b18:	10800117 	ldw	r2,4(r2)
  808b1c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  808b20:	e0bffb17 	ldw	r2,-20(fp)
  808b24:	10c0058b 	ldhu	r3,22(r2)
  808b28:	e0bffb17 	ldw	r2,-20(fp)
  808b2c:	1080050b 	ldhu	r2,20(r2)
  808b30:	18ffffcc 	andi	r3,r3,65535
  808b34:	10bfffcc 	andi	r2,r2,65535
  808b38:	18800636 	bltu	r3,r2,808b54 <OSQPostFront+0xe8>
  808b3c:	e0bff817 	ldw	r2,-32(fp)
  808b40:	e0bffa15 	stw	r2,-24(fp)
  808b44:	e0bffa17 	ldw	r2,-24(fp)
  808b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  808b4c:	00800784 	movi	r2,30
  808b50:	00001d06 	br	808bc8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  808b54:	e0bffb17 	ldw	r2,-20(fp)
  808b58:	10c00417 	ldw	r3,16(r2)
  808b5c:	e0bffb17 	ldw	r2,-20(fp)
  808b60:	10800117 	ldw	r2,4(r2)
  808b64:	1880041e 	bne	r3,r2,808b78 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  808b68:	e0bffb17 	ldw	r2,-20(fp)
  808b6c:	10c00217 	ldw	r3,8(r2)
  808b70:	e0bffb17 	ldw	r2,-20(fp)
  808b74:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  808b78:	e0bffb17 	ldw	r2,-20(fp)
  808b7c:	10800417 	ldw	r2,16(r2)
  808b80:	10ffff04 	addi	r3,r2,-4
  808b84:	e0bffb17 	ldw	r2,-20(fp)
  808b88:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  808b8c:	e0bffb17 	ldw	r2,-20(fp)
  808b90:	10800417 	ldw	r2,16(r2)
  808b94:	e0ffff17 	ldw	r3,-4(fp)
  808b98:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  808b9c:	e0bffb17 	ldw	r2,-20(fp)
  808ba0:	1080058b 	ldhu	r2,22(r2)
  808ba4:	10800044 	addi	r2,r2,1
  808ba8:	1007883a 	mov	r3,r2
  808bac:	e0bffb17 	ldw	r2,-20(fp)
  808bb0:	10c0058d 	sth	r3,22(r2)
  808bb4:	e0bff817 	ldw	r2,-32(fp)
  808bb8:	e0bffc15 	stw	r2,-16(fp)
  808bbc:	e0bffc17 	ldw	r2,-16(fp)
  808bc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808bc4:	0005883a 	mov	r2,zero
}
  808bc8:	e037883a 	mov	sp,fp
  808bcc:	dfc00117 	ldw	ra,4(sp)
  808bd0:	df000017 	ldw	fp,0(sp)
  808bd4:	dec00204 	addi	sp,sp,8
  808bd8:	f800283a 	ret

00808bdc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  808bdc:	defff504 	addi	sp,sp,-44
  808be0:	dfc00a15 	stw	ra,40(sp)
  808be4:	df000915 	stw	fp,36(sp)
  808be8:	df000904 	addi	fp,sp,36
  808bec:	e13ffd15 	stw	r4,-12(fp)
  808bf0:	e17ffe15 	stw	r5,-8(fp)
  808bf4:	3005883a 	mov	r2,r6
  808bf8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808bfc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  808c00:	e0bffd17 	ldw	r2,-12(fp)
  808c04:	1000021e 	bne	r2,zero,808c10 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  808c08:	00800104 	movi	r2,4
  808c0c:	00007106 	br	808dd4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  808c10:	e0bffd17 	ldw	r2,-12(fp)
  808c14:	10800003 	ldbu	r2,0(r2)
  808c18:	10803fcc 	andi	r2,r2,255
  808c1c:	108000a0 	cmpeqi	r2,r2,2
  808c20:	1000021e 	bne	r2,zero,808c2c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  808c24:	00800044 	movi	r2,1
  808c28:	00006a06 	br	808dd4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808c2c:	0005303a 	rdctl	r2,status
  808c30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808c34:	e0fffc17 	ldw	r3,-16(fp)
  808c38:	00bfff84 	movi	r2,-2
  808c3c:	1884703a 	and	r2,r3,r2
  808c40:	1001703a 	wrctl	status,r2
  
  return context;
  808c44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  808c48:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  808c4c:	e0bffd17 	ldw	r2,-12(fp)
  808c50:	10800283 	ldbu	r2,10(r2)
  808c54:	10803fcc 	andi	r2,r2,255
  808c58:	10001d26 	beq	r2,zero,808cd0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  808c5c:	e0bfff03 	ldbu	r2,-4(fp)
  808c60:	1080004c 	andi	r2,r2,1
  808c64:	10000b26 	beq	r2,zero,808c94 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  808c68:	00000506 	br	808c80 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  808c6c:	000f883a 	mov	r7,zero
  808c70:	01800104 	movi	r6,4
  808c74:	e17ffe17 	ldw	r5,-8(fp)
  808c78:	e13ffd17 	ldw	r4,-12(fp)
  808c7c:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  808c80:	e0bffd17 	ldw	r2,-12(fp)
  808c84:	10800283 	ldbu	r2,10(r2)
  808c88:	10803fcc 	andi	r2,r2,255
  808c8c:	103ff71e 	bne	r2,zero,808c6c <__alt_data_end+0xff808c6c>
  808c90:	00000506 	br	808ca8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  808c94:	000f883a 	mov	r7,zero
  808c98:	01800104 	movi	r6,4
  808c9c:	e17ffe17 	ldw	r5,-8(fp)
  808ca0:	e13ffd17 	ldw	r4,-12(fp)
  808ca4:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
  808ca8:	e0bff717 	ldw	r2,-36(fp)
  808cac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808cb0:	e0bff817 	ldw	r2,-32(fp)
  808cb4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  808cb8:	e0bfff03 	ldbu	r2,-4(fp)
  808cbc:	1080010c 	andi	r2,r2,4
  808cc0:	1000011e 	bne	r2,zero,808cc8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  808cc4:	08058100 	call	805810 <OS_Sched>
        }
        return (OS_ERR_NONE);
  808cc8:	0005883a 	mov	r2,zero
  808ccc:	00004106 	br	808dd4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  808cd0:	e0bffd17 	ldw	r2,-12(fp)
  808cd4:	10800117 	ldw	r2,4(r2)
  808cd8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  808cdc:	e0bffa17 	ldw	r2,-24(fp)
  808ce0:	10c0058b 	ldhu	r3,22(r2)
  808ce4:	e0bffa17 	ldw	r2,-24(fp)
  808ce8:	1080050b 	ldhu	r2,20(r2)
  808cec:	18ffffcc 	andi	r3,r3,65535
  808cf0:	10bfffcc 	andi	r2,r2,65535
  808cf4:	18800636 	bltu	r3,r2,808d10 <OSQPostOpt+0x134>
  808cf8:	e0bff717 	ldw	r2,-36(fp)
  808cfc:	e0bff915 	stw	r2,-28(fp)
  808d00:	e0bff917 	ldw	r2,-28(fp)
  808d04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  808d08:	00800784 	movi	r2,30
  808d0c:	00003106 	br	808dd4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  808d10:	e0bfff03 	ldbu	r2,-4(fp)
  808d14:	1080008c 	andi	r2,r2,2
  808d18:	10001326 	beq	r2,zero,808d68 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  808d1c:	e0bffa17 	ldw	r2,-24(fp)
  808d20:	10c00417 	ldw	r3,16(r2)
  808d24:	e0bffa17 	ldw	r2,-24(fp)
  808d28:	10800117 	ldw	r2,4(r2)
  808d2c:	1880041e 	bne	r3,r2,808d40 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  808d30:	e0bffa17 	ldw	r2,-24(fp)
  808d34:	10c00217 	ldw	r3,8(r2)
  808d38:	e0bffa17 	ldw	r2,-24(fp)
  808d3c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  808d40:	e0bffa17 	ldw	r2,-24(fp)
  808d44:	10800417 	ldw	r2,16(r2)
  808d48:	10ffff04 	addi	r3,r2,-4
  808d4c:	e0bffa17 	ldw	r2,-24(fp)
  808d50:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  808d54:	e0bffa17 	ldw	r2,-24(fp)
  808d58:	10800417 	ldw	r2,16(r2)
  808d5c:	e0fffe17 	ldw	r3,-8(fp)
  808d60:	10c00015 	stw	r3,0(r2)
  808d64:	00001006 	br	808da8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  808d68:	e0bffa17 	ldw	r2,-24(fp)
  808d6c:	10800317 	ldw	r2,12(r2)
  808d70:	11000104 	addi	r4,r2,4
  808d74:	e0fffa17 	ldw	r3,-24(fp)
  808d78:	19000315 	stw	r4,12(r3)
  808d7c:	e0fffe17 	ldw	r3,-8(fp)
  808d80:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  808d84:	e0bffa17 	ldw	r2,-24(fp)
  808d88:	10c00317 	ldw	r3,12(r2)
  808d8c:	e0bffa17 	ldw	r2,-24(fp)
  808d90:	10800217 	ldw	r2,8(r2)
  808d94:	1880041e 	bne	r3,r2,808da8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  808d98:	e0bffa17 	ldw	r2,-24(fp)
  808d9c:	10c00117 	ldw	r3,4(r2)
  808da0:	e0bffa17 	ldw	r2,-24(fp)
  808da4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  808da8:	e0bffa17 	ldw	r2,-24(fp)
  808dac:	1080058b 	ldhu	r2,22(r2)
  808db0:	10800044 	addi	r2,r2,1
  808db4:	1007883a 	mov	r3,r2
  808db8:	e0bffa17 	ldw	r2,-24(fp)
  808dbc:	10c0058d 	sth	r3,22(r2)
  808dc0:	e0bff717 	ldw	r2,-36(fp)
  808dc4:	e0bffb15 	stw	r2,-20(fp)
  808dc8:	e0bffb17 	ldw	r2,-20(fp)
  808dcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808dd0:	0005883a 	mov	r2,zero
}
  808dd4:	e037883a 	mov	sp,fp
  808dd8:	dfc00117 	ldw	ra,4(sp)
  808ddc:	df000017 	ldw	fp,0(sp)
  808de0:	dec00204 	addi	sp,sp,8
  808de4:	f800283a 	ret

00808de8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  808de8:	defff604 	addi	sp,sp,-40
  808dec:	df000915 	stw	fp,36(sp)
  808df0:	df000904 	addi	fp,sp,36
  808df4:	e13ffe15 	stw	r4,-8(fp)
  808df8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  808dfc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  808e00:	e0bffe17 	ldw	r2,-8(fp)
  808e04:	1000021e 	bne	r2,zero,808e10 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  808e08:	00800104 	movi	r2,4
  808e0c:	00004906 	br	808f34 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  808e10:	e0bfff17 	ldw	r2,-4(fp)
  808e14:	1000021e 	bne	r2,zero,808e20 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  808e18:	00800244 	movi	r2,9
  808e1c:	00004506 	br	808f34 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  808e20:	e0bffe17 	ldw	r2,-8(fp)
  808e24:	10800003 	ldbu	r2,0(r2)
  808e28:	10803fcc 	andi	r2,r2,255
  808e2c:	108000a0 	cmpeqi	r2,r2,2
  808e30:	1000021e 	bne	r2,zero,808e3c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  808e34:	00800044 	movi	r2,1
  808e38:	00003e06 	br	808f34 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808e3c:	0005303a 	rdctl	r2,status
  808e40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808e44:	e0fffd17 	ldw	r3,-12(fp)
  808e48:	00bfff84 	movi	r2,-2
  808e4c:	1884703a 	and	r2,r3,r2
  808e50:	1001703a 	wrctl	status,r2
  
  return context;
  808e54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  808e58:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  808e5c:	e0bffe17 	ldw	r2,-8(fp)
  808e60:	10c00283 	ldbu	r3,10(r2)
  808e64:	e0bfff17 	ldw	r2,-4(fp)
  808e68:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  808e6c:	e0bffe17 	ldw	r2,-8(fp)
  808e70:	108002c4 	addi	r2,r2,11
  808e74:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  808e78:	e0bfff17 	ldw	r2,-4(fp)
  808e7c:	10800204 	addi	r2,r2,8
  808e80:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  808e84:	e03ff705 	stb	zero,-36(fp)
  808e88:	00000b06 	br	808eb8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  808e8c:	e0bff917 	ldw	r2,-28(fp)
  808e90:	10c00044 	addi	r3,r2,1
  808e94:	e0fff915 	stw	r3,-28(fp)
  808e98:	e0fff817 	ldw	r3,-32(fp)
  808e9c:	19000044 	addi	r4,r3,1
  808ea0:	e13ff815 	stw	r4,-32(fp)
  808ea4:	18c00003 	ldbu	r3,0(r3)
  808ea8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  808eac:	e0bff703 	ldbu	r2,-36(fp)
  808eb0:	10800044 	addi	r2,r2,1
  808eb4:	e0bff705 	stb	r2,-36(fp)
  808eb8:	e0bff703 	ldbu	r2,-36(fp)
  808ebc:	108000f0 	cmpltui	r2,r2,3
  808ec0:	103ff21e 	bne	r2,zero,808e8c <__alt_data_end+0xff808e8c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  808ec4:	e0bffe17 	ldw	r2,-8(fp)
  808ec8:	10800117 	ldw	r2,4(r2)
  808ecc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  808ed0:	e0bffc17 	ldw	r2,-16(fp)
  808ed4:	1080058b 	ldhu	r2,22(r2)
  808ed8:	10bfffcc 	andi	r2,r2,65535
  808edc:	10000626 	beq	r2,zero,808ef8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  808ee0:	e0bffc17 	ldw	r2,-16(fp)
  808ee4:	10800417 	ldw	r2,16(r2)
  808ee8:	10c00017 	ldw	r3,0(r2)
  808eec:	e0bfff17 	ldw	r2,-4(fp)
  808ef0:	10c00015 	stw	r3,0(r2)
  808ef4:	00000206 	br	808f00 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  808ef8:	e0bfff17 	ldw	r2,-4(fp)
  808efc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  808f00:	e0bffc17 	ldw	r2,-16(fp)
  808f04:	10c0058b 	ldhu	r3,22(r2)
  808f08:	e0bfff17 	ldw	r2,-4(fp)
  808f0c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  808f10:	e0bffc17 	ldw	r2,-16(fp)
  808f14:	10c0050b 	ldhu	r3,20(r2)
  808f18:	e0bfff17 	ldw	r2,-4(fp)
  808f1c:	10c0018d 	sth	r3,6(r2)
  808f20:	e0bffa17 	ldw	r2,-24(fp)
  808f24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808f28:	e0bffb17 	ldw	r2,-20(fp)
  808f2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  808f30:	0005883a 	mov	r2,zero
}
  808f34:	e037883a 	mov	sp,fp
  808f38:	df000017 	ldw	fp,0(sp)
  808f3c:	dec00104 	addi	sp,sp,4
  808f40:	f800283a 	ret

00808f44 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  808f44:	defffb04 	addi	sp,sp,-20
  808f48:	dfc00415 	stw	ra,16(sp)
  808f4c:	df000315 	stw	fp,12(sp)
  808f50:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  808f54:	01407804 	movi	r5,480
  808f58:	01002074 	movhi	r4,129
  808f5c:	211b4604 	addi	r4,r4,27928
  808f60:	08057540 	call	805754 <OS_MemClr>
    pq1 = &OSQTbl[0];
  808f64:	00802074 	movhi	r2,129
  808f68:	109b4604 	addi	r2,r2,27928
  808f6c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  808f70:	00802074 	movhi	r2,129
  808f74:	109b4c04 	addi	r2,r2,27952
  808f78:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  808f7c:	e03ffd0d 	sth	zero,-12(fp)
  808f80:	00000c06 	br	808fb4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  808f84:	e0bffe17 	ldw	r2,-8(fp)
  808f88:	e0ffff17 	ldw	r3,-4(fp)
  808f8c:	10c00015 	stw	r3,0(r2)
        pq1++;
  808f90:	e0bffe17 	ldw	r2,-8(fp)
  808f94:	10800604 	addi	r2,r2,24
  808f98:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  808f9c:	e0bfff17 	ldw	r2,-4(fp)
  808fa0:	10800604 	addi	r2,r2,24
  808fa4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  808fa8:	e0bffd0b 	ldhu	r2,-12(fp)
  808fac:	10800044 	addi	r2,r2,1
  808fb0:	e0bffd0d 	sth	r2,-12(fp)
  808fb4:	e0bffd0b 	ldhu	r2,-12(fp)
  808fb8:	108004f0 	cmpltui	r2,r2,19
  808fbc:	103ff11e 	bne	r2,zero,808f84 <__alt_data_end+0xff808f84>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  808fc0:	e0bffe17 	ldw	r2,-8(fp)
  808fc4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  808fc8:	00802074 	movhi	r2,129
  808fcc:	109b4604 	addi	r2,r2,27928
  808fd0:	d0a70c15 	stw	r2,-25552(gp)
#endif
}
  808fd4:	0001883a 	nop
  808fd8:	e037883a 	mov	sp,fp
  808fdc:	dfc00117 	ldw	ra,4(sp)
  808fe0:	df000017 	ldw	fp,0(sp)
  808fe4:	dec00204 	addi	sp,sp,8
  808fe8:	f800283a 	ret

00808fec <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  808fec:	defffa04 	addi	sp,sp,-24
  808ff0:	df000515 	stw	fp,20(sp)
  808ff4:	df000504 	addi	fp,sp,20
  808ff8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  808ffc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809000:	e0bfff17 	ldw	r2,-4(fp)
  809004:	1000021e 	bne	r2,zero,809010 <OSSemAccept+0x24>
        return (0);
  809008:	0005883a 	mov	r2,zero
  80900c:	00001f06 	br	80908c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809010:	e0bfff17 	ldw	r2,-4(fp)
  809014:	10800003 	ldbu	r2,0(r2)
  809018:	10803fcc 	andi	r2,r2,255
  80901c:	108000e0 	cmpeqi	r2,r2,3
  809020:	1000021e 	bne	r2,zero,80902c <OSSemAccept+0x40>
        return (0);
  809024:	0005883a 	mov	r2,zero
  809028:	00001806 	br	80908c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80902c:	0005303a 	rdctl	r2,status
  809030:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809034:	e0fffe17 	ldw	r3,-8(fp)
  809038:	00bfff84 	movi	r2,-2
  80903c:	1884703a 	and	r2,r3,r2
  809040:	1001703a 	wrctl	status,r2
  
  return context;
  809044:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  809048:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  80904c:	e0bfff17 	ldw	r2,-4(fp)
  809050:	1080020b 	ldhu	r2,8(r2)
  809054:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  809058:	e0bffd0b 	ldhu	r2,-12(fp)
  80905c:	10000626 	beq	r2,zero,809078 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  809060:	e0bfff17 	ldw	r2,-4(fp)
  809064:	1080020b 	ldhu	r2,8(r2)
  809068:	10bfffc4 	addi	r2,r2,-1
  80906c:	1007883a 	mov	r3,r2
  809070:	e0bfff17 	ldw	r2,-4(fp)
  809074:	10c0020d 	sth	r3,8(r2)
  809078:	e0bffb17 	ldw	r2,-20(fp)
  80907c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809080:	e0bffc17 	ldw	r2,-16(fp)
  809084:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  809088:	e0bffd0b 	ldhu	r2,-12(fp)
}
  80908c:	e037883a 	mov	sp,fp
  809090:	df000017 	ldw	fp,0(sp)
  809094:	dec00104 	addi	sp,sp,4
  809098:	f800283a 	ret

0080909c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  80909c:	defff904 	addi	sp,sp,-28
  8090a0:	dfc00615 	stw	ra,24(sp)
  8090a4:	df000515 	stw	fp,20(sp)
  8090a8:	df000504 	addi	fp,sp,20
  8090ac:	2005883a 	mov	r2,r4
  8090b0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8090b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8090b8:	d0a70f03 	ldbu	r2,-25540(gp)
  8090bc:	10803fcc 	andi	r2,r2,255
  8090c0:	10000226 	beq	r2,zero,8090cc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8090c4:	0005883a 	mov	r2,zero
  8090c8:	00002506 	br	809160 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8090cc:	0005303a 	rdctl	r2,status
  8090d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8090d4:	e0fffe17 	ldw	r3,-8(fp)
  8090d8:	00bfff84 	movi	r2,-2
  8090dc:	1884703a 	and	r2,r3,r2
  8090e0:	1001703a 	wrctl	status,r2
  
  return context;
  8090e4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  8090e8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  8090ec:	d0a70e17 	ldw	r2,-25544(gp)
  8090f0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  8090f4:	d0a70e17 	ldw	r2,-25544(gp)
  8090f8:	10000326 	beq	r2,zero,809108 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8090fc:	d0a70e17 	ldw	r2,-25544(gp)
  809100:	10800117 	ldw	r2,4(r2)
  809104:	d0a70e15 	stw	r2,-25544(gp)
  809108:	e0bffb17 	ldw	r2,-20(fp)
  80910c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809110:	e0bffc17 	ldw	r2,-16(fp)
  809114:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  809118:	e0bffd17 	ldw	r2,-12(fp)
  80911c:	10000f26 	beq	r2,zero,80915c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  809120:	e0bffd17 	ldw	r2,-12(fp)
  809124:	00c000c4 	movi	r3,3
  809128:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  80912c:	e0bffd17 	ldw	r2,-12(fp)
  809130:	e0ffff0b 	ldhu	r3,-4(fp)
  809134:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  809138:	e0bffd17 	ldw	r2,-12(fp)
  80913c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  809140:	e0bffd17 	ldw	r2,-12(fp)
  809144:	00c00fc4 	movi	r3,63
  809148:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  80914c:	e0bffd17 	ldw	r2,-12(fp)
  809150:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  809154:	e13ffd17 	ldw	r4,-12(fp)
  809158:	08053740 	call	805374 <OS_EventWaitListInit>
    }
    return (pevent);
  80915c:	e0bffd17 	ldw	r2,-12(fp)
}
  809160:	e037883a 	mov	sp,fp
  809164:	dfc00117 	ldw	ra,4(sp)
  809168:	df000017 	ldw	fp,0(sp)
  80916c:	dec00204 	addi	sp,sp,8
  809170:	f800283a 	ret

00809174 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  809174:	defff304 	addi	sp,sp,-52
  809178:	dfc00c15 	stw	ra,48(sp)
  80917c:	df000b15 	stw	fp,44(sp)
  809180:	df000b04 	addi	fp,sp,44
  809184:	e13ffd15 	stw	r4,-12(fp)
  809188:	2805883a 	mov	r2,r5
  80918c:	e1bfff15 	stw	r6,-4(fp)
  809190:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  809194:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  809198:	e0bfff17 	ldw	r2,-4(fp)
  80919c:	1000021e 	bne	r2,zero,8091a8 <OSSemDel+0x34>
        return (pevent);
  8091a0:	e0bffd17 	ldw	r2,-12(fp)
  8091a4:	00007e06 	br	8093a0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8091a8:	e0bffd17 	ldw	r2,-12(fp)
  8091ac:	1000051e 	bne	r2,zero,8091c4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8091b0:	e0bfff17 	ldw	r2,-4(fp)
  8091b4:	00c00104 	movi	r3,4
  8091b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8091bc:	e0bffd17 	ldw	r2,-12(fp)
  8091c0:	00007706 	br	8093a0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8091c4:	e0bffd17 	ldw	r2,-12(fp)
  8091c8:	10800003 	ldbu	r2,0(r2)
  8091cc:	10803fcc 	andi	r2,r2,255
  8091d0:	108000e0 	cmpeqi	r2,r2,3
  8091d4:	1000051e 	bne	r2,zero,8091ec <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8091d8:	e0bfff17 	ldw	r2,-4(fp)
  8091dc:	00c00044 	movi	r3,1
  8091e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  8091e4:	e0bffd17 	ldw	r2,-12(fp)
  8091e8:	00006d06 	br	8093a0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8091ec:	d0a70f03 	ldbu	r2,-25540(gp)
  8091f0:	10803fcc 	andi	r2,r2,255
  8091f4:	10000526 	beq	r2,zero,80920c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  8091f8:	e0bfff17 	ldw	r2,-4(fp)
  8091fc:	00c003c4 	movi	r3,15
  809200:	10c00005 	stb	r3,0(r2)
        return (pevent);
  809204:	e0bffd17 	ldw	r2,-12(fp)
  809208:	00006506 	br	8093a0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80920c:	0005303a 	rdctl	r2,status
  809210:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809214:	e0fffc17 	ldw	r3,-16(fp)
  809218:	00bfff84 	movi	r2,-2
  80921c:	1884703a 	and	r2,r3,r2
  809220:	1001703a 	wrctl	status,r2
  
  return context;
  809224:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809228:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  80922c:	e0bffd17 	ldw	r2,-12(fp)
  809230:	10800283 	ldbu	r2,10(r2)
  809234:	10803fcc 	andi	r2,r2,255
  809238:	10000326 	beq	r2,zero,809248 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80923c:	00800044 	movi	r2,1
  809240:	e0bff505 	stb	r2,-44(fp)
  809244:	00000106 	br	80924c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  809248:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  80924c:	e0bffe03 	ldbu	r2,-8(fp)
  809250:	10000326 	beq	r2,zero,809260 <OSSemDel+0xec>
  809254:	10800060 	cmpeqi	r2,r2,1
  809258:	1000281e 	bne	r2,zero,8092fc <OSSemDel+0x188>
  80925c:	00004506 	br	809374 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  809260:	e0bff503 	ldbu	r2,-44(fp)
  809264:	1000161e 	bne	r2,zero,8092c0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  809268:	e0bffd17 	ldw	r2,-12(fp)
  80926c:	00c00fc4 	movi	r3,63
  809270:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  809274:	e0bffd17 	ldw	r2,-12(fp)
  809278:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80927c:	e0bffd17 	ldw	r2,-12(fp)
  809280:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  809284:	d0e70e17 	ldw	r3,-25544(gp)
  809288:	e0bffd17 	ldw	r2,-12(fp)
  80928c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  809290:	e0bffd17 	ldw	r2,-12(fp)
  809294:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  809298:	e0bffd17 	ldw	r2,-12(fp)
  80929c:	d0a70e15 	stw	r2,-25544(gp)
  8092a0:	e0bff717 	ldw	r2,-36(fp)
  8092a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8092a8:	e0bff817 	ldw	r2,-32(fp)
  8092ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  8092b0:	e0bfff17 	ldw	r2,-4(fp)
  8092b4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  8092b8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  8092bc:	00003706 	br	80939c <OSSemDel+0x228>
  8092c0:	e0bff717 	ldw	r2,-36(fp)
  8092c4:	e0bff915 	stw	r2,-28(fp)
  8092c8:	e0bff917 	ldw	r2,-28(fp)
  8092cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8092d0:	e0bfff17 	ldw	r2,-4(fp)
  8092d4:	00c01244 	movi	r3,73
  8092d8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  8092dc:	e0bffd17 	ldw	r2,-12(fp)
  8092e0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  8092e4:	00002d06 	br	80939c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8092e8:	000f883a 	mov	r7,zero
  8092ec:	01800044 	movi	r6,1
  8092f0:	000b883a 	mov	r5,zero
  8092f4:	e13ffd17 	ldw	r4,-12(fp)
  8092f8:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  8092fc:	e0bffd17 	ldw	r2,-12(fp)
  809300:	10800283 	ldbu	r2,10(r2)
  809304:	10803fcc 	andi	r2,r2,255
  809308:	103ff71e 	bne	r2,zero,8092e8 <__alt_data_end+0xff8092e8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80930c:	e0bffd17 	ldw	r2,-12(fp)
  809310:	00c00fc4 	movi	r3,63
  809314:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  809318:	e0bffd17 	ldw	r2,-12(fp)
  80931c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  809320:	e0bffd17 	ldw	r2,-12(fp)
  809324:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  809328:	d0e70e17 	ldw	r3,-25544(gp)
  80932c:	e0bffd17 	ldw	r2,-12(fp)
  809330:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  809334:	e0bffd17 	ldw	r2,-12(fp)
  809338:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80933c:	e0bffd17 	ldw	r2,-12(fp)
  809340:	d0a70e15 	stw	r2,-25544(gp)
  809344:	e0bff717 	ldw	r2,-36(fp)
  809348:	e0bffa15 	stw	r2,-24(fp)
  80934c:	e0bffa17 	ldw	r2,-24(fp)
  809350:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  809354:	e0bff503 	ldbu	r2,-44(fp)
  809358:	10800058 	cmpnei	r2,r2,1
  80935c:	1000011e 	bne	r2,zero,809364 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  809360:	08058100 	call	805810 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  809364:	e0bfff17 	ldw	r2,-4(fp)
  809368:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  80936c:	e03ff615 	stw	zero,-40(fp)
             break;
  809370:	00000a06 	br	80939c <OSSemDel+0x228>
  809374:	e0bff717 	ldw	r2,-36(fp)
  809378:	e0bffb15 	stw	r2,-20(fp)
  80937c:	e0bffb17 	ldw	r2,-20(fp)
  809380:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  809384:	e0bfff17 	ldw	r2,-4(fp)
  809388:	00c001c4 	movi	r3,7
  80938c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  809390:	e0bffd17 	ldw	r2,-12(fp)
  809394:	e0bff615 	stw	r2,-40(fp)
             break;
  809398:	0001883a 	nop
    }
    return (pevent_return);
  80939c:	e0bff617 	ldw	r2,-40(fp)
}
  8093a0:	e037883a 	mov	sp,fp
  8093a4:	dfc00117 	ldw	ra,4(sp)
  8093a8:	df000017 	ldw	fp,0(sp)
  8093ac:	dec00204 	addi	sp,sp,8
  8093b0:	f800283a 	ret

008093b4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8093b4:	defff504 	addi	sp,sp,-44
  8093b8:	dfc00a15 	stw	ra,40(sp)
  8093bc:	df000915 	stw	fp,36(sp)
  8093c0:	df000904 	addi	fp,sp,36
  8093c4:	e13ffd15 	stw	r4,-12(fp)
  8093c8:	2805883a 	mov	r2,r5
  8093cc:	e1bfff15 	stw	r6,-4(fp)
  8093d0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8093d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8093d8:	e0bfff17 	ldw	r2,-4(fp)
  8093dc:	10007226 	beq	r2,zero,8095a8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8093e0:	e0bffd17 	ldw	r2,-12(fp)
  8093e4:	1000041e 	bne	r2,zero,8093f8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8093e8:	e0bfff17 	ldw	r2,-4(fp)
  8093ec:	00c00104 	movi	r3,4
  8093f0:	10c00005 	stb	r3,0(r2)
        return;
  8093f4:	00006d06 	br	8095ac <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8093f8:	e0bffd17 	ldw	r2,-12(fp)
  8093fc:	10800003 	ldbu	r2,0(r2)
  809400:	10803fcc 	andi	r2,r2,255
  809404:	108000e0 	cmpeqi	r2,r2,3
  809408:	1000041e 	bne	r2,zero,80941c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  80940c:	e0bfff17 	ldw	r2,-4(fp)
  809410:	00c00044 	movi	r3,1
  809414:	10c00005 	stb	r3,0(r2)
        return;
  809418:	00006406 	br	8095ac <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  80941c:	d0a70f03 	ldbu	r2,-25540(gp)
  809420:	10803fcc 	andi	r2,r2,255
  809424:	10000426 	beq	r2,zero,809438 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  809428:	e0bfff17 	ldw	r2,-4(fp)
  80942c:	00c00084 	movi	r3,2
  809430:	10c00005 	stb	r3,0(r2)
        return;
  809434:	00005d06 	br	8095ac <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  809438:	d0a70103 	ldbu	r2,-25596(gp)
  80943c:	10803fcc 	andi	r2,r2,255
  809440:	10000426 	beq	r2,zero,809454 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  809444:	e0bfff17 	ldw	r2,-4(fp)
  809448:	00c00344 	movi	r3,13
  80944c:	10c00005 	stb	r3,0(r2)
        return;
  809450:	00005606 	br	8095ac <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809454:	0005303a 	rdctl	r2,status
  809458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80945c:	e0fffc17 	ldw	r3,-16(fp)
  809460:	00bfff84 	movi	r2,-2
  809464:	1884703a 	and	r2,r3,r2
  809468:	1001703a 	wrctl	status,r2
  
  return context;
  80946c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809470:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  809474:	e0bffd17 	ldw	r2,-12(fp)
  809478:	1080020b 	ldhu	r2,8(r2)
  80947c:	10bfffcc 	andi	r2,r2,65535
  809480:	10000d26 	beq	r2,zero,8094b8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  809484:	e0bffd17 	ldw	r2,-12(fp)
  809488:	1080020b 	ldhu	r2,8(r2)
  80948c:	10bfffc4 	addi	r2,r2,-1
  809490:	1007883a 	mov	r3,r2
  809494:	e0bffd17 	ldw	r2,-12(fp)
  809498:	10c0020d 	sth	r3,8(r2)
  80949c:	e0bff717 	ldw	r2,-36(fp)
  8094a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8094a4:	e0bff817 	ldw	r2,-32(fp)
  8094a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8094ac:	e0bfff17 	ldw	r2,-4(fp)
  8094b0:	10000005 	stb	zero,0(r2)
        return;
  8094b4:	00003d06 	br	8095ac <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  8094b8:	d0a71017 	ldw	r2,-25536(gp)
  8094bc:	d0e71017 	ldw	r3,-25536(gp)
  8094c0:	18c00c03 	ldbu	r3,48(r3)
  8094c4:	18c00054 	ori	r3,r3,1
  8094c8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8094cc:	d0a71017 	ldw	r2,-25536(gp)
  8094d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  8094d4:	d0a71017 	ldw	r2,-25536(gp)
  8094d8:	e0fffe0b 	ldhu	r3,-8(fp)
  8094dc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  8094e0:	e13ffd17 	ldw	r4,-12(fp)
  8094e4:	0804f5c0 	call	804f5c <OS_EventTaskWait>
  8094e8:	e0bff717 	ldw	r2,-36(fp)
  8094ec:	e0bffb15 	stw	r2,-20(fp)
  8094f0:	e0bffb17 	ldw	r2,-20(fp)
  8094f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  8094f8:	08058100 	call	805810 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8094fc:	0005303a 	rdctl	r2,status
  809500:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809504:	e0fff917 	ldw	r3,-28(fp)
  809508:	00bfff84 	movi	r2,-2
  80950c:	1884703a 	and	r2,r3,r2
  809510:	1001703a 	wrctl	status,r2
  
  return context;
  809514:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  809518:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80951c:	d0a71017 	ldw	r2,-25536(gp)
  809520:	10800c43 	ldbu	r2,49(r2)
  809524:	10803fcc 	andi	r2,r2,255
  809528:	10000326 	beq	r2,zero,809538 <OSSemPend+0x184>
  80952c:	108000a0 	cmpeqi	r2,r2,2
  809530:	1000041e 	bne	r2,zero,809544 <OSSemPend+0x190>
  809534:	00000706 	br	809554 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  809538:	e0bfff17 	ldw	r2,-4(fp)
  80953c:	10000005 	stb	zero,0(r2)
             break;
  809540:	00000c06 	br	809574 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  809544:	e0bfff17 	ldw	r2,-4(fp)
  809548:	00c00384 	movi	r3,14
  80954c:	10c00005 	stb	r3,0(r2)
             break;
  809550:	00000806 	br	809574 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  809554:	d0a71017 	ldw	r2,-25536(gp)
  809558:	e17ffd17 	ldw	r5,-12(fp)
  80955c:	1009883a 	mov	r4,r2
  809560:	08051bc0 	call	8051bc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  809564:	e0bfff17 	ldw	r2,-4(fp)
  809568:	00c00284 	movi	r3,10
  80956c:	10c00005 	stb	r3,0(r2)
             break;
  809570:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  809574:	d0a71017 	ldw	r2,-25536(gp)
  809578:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80957c:	d0a71017 	ldw	r2,-25536(gp)
  809580:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  809584:	d0a71017 	ldw	r2,-25536(gp)
  809588:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80958c:	d0a71017 	ldw	r2,-25536(gp)
  809590:	10000815 	stw	zero,32(r2)
  809594:	e0bff717 	ldw	r2,-36(fp)
  809598:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80959c:	e0bffa17 	ldw	r2,-24(fp)
  8095a0:	1001703a 	wrctl	status,r2
  8095a4:	00000106 	br	8095ac <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  8095a8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  8095ac:	e037883a 	mov	sp,fp
  8095b0:	dfc00117 	ldw	ra,4(sp)
  8095b4:	df000017 	ldw	fp,0(sp)
  8095b8:	dec00204 	addi	sp,sp,8
  8095bc:	f800283a 	ret

008095c0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8095c0:	defff604 	addi	sp,sp,-40
  8095c4:	dfc00915 	stw	ra,36(sp)
  8095c8:	df000815 	stw	fp,32(sp)
  8095cc:	df000804 	addi	fp,sp,32
  8095d0:	e13ffd15 	stw	r4,-12(fp)
  8095d4:	2805883a 	mov	r2,r5
  8095d8:	e1bfff15 	stw	r6,-4(fp)
  8095dc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8095e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8095e4:	e0bfff17 	ldw	r2,-4(fp)
  8095e8:	1000021e 	bne	r2,zero,8095f4 <OSSemPendAbort+0x34>
        return (0);
  8095ec:	0005883a 	mov	r2,zero
  8095f0:	00004906 	br	809718 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8095f4:	e0bffd17 	ldw	r2,-12(fp)
  8095f8:	1000051e 	bne	r2,zero,809610 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8095fc:	e0bfff17 	ldw	r2,-4(fp)
  809600:	00c00104 	movi	r3,4
  809604:	10c00005 	stb	r3,0(r2)
        return (0);
  809608:	0005883a 	mov	r2,zero
  80960c:	00004206 	br	809718 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809610:	e0bffd17 	ldw	r2,-12(fp)
  809614:	10800003 	ldbu	r2,0(r2)
  809618:	10803fcc 	andi	r2,r2,255
  80961c:	108000e0 	cmpeqi	r2,r2,3
  809620:	1000051e 	bne	r2,zero,809638 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  809624:	e0bfff17 	ldw	r2,-4(fp)
  809628:	00c00044 	movi	r3,1
  80962c:	10c00005 	stb	r3,0(r2)
        return (0);
  809630:	0005883a 	mov	r2,zero
  809634:	00003806 	br	809718 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809638:	0005303a 	rdctl	r2,status
  80963c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809640:	e0fffc17 	ldw	r3,-16(fp)
  809644:	00bfff84 	movi	r2,-2
  809648:	1884703a 	and	r2,r3,r2
  80964c:	1001703a 	wrctl	status,r2
  
  return context;
  809650:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  809654:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  809658:	e0bffd17 	ldw	r2,-12(fp)
  80965c:	10800283 	ldbu	r2,10(r2)
  809660:	10803fcc 	andi	r2,r2,255
  809664:	10002526 	beq	r2,zero,8096fc <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  809668:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  80966c:	e0bffe03 	ldbu	r2,-8(fp)
  809670:	10800060 	cmpeqi	r2,r2,1
  809674:	10000e26 	beq	r2,zero,8096b0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  809678:	00000806 	br	80969c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  80967c:	01c00084 	movi	r7,2
  809680:	01800044 	movi	r6,1
  809684:	000b883a 	mov	r5,zero
  809688:	e13ffd17 	ldw	r4,-12(fp)
  80968c:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
                     nbr_tasks++;
  809690:	e0bff803 	ldbu	r2,-32(fp)
  809694:	10800044 	addi	r2,r2,1
  809698:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  80969c:	e0bffd17 	ldw	r2,-12(fp)
  8096a0:	10800283 	ldbu	r2,10(r2)
  8096a4:	10803fcc 	andi	r2,r2,255
  8096a8:	103ff41e 	bne	r2,zero,80967c <__alt_data_end+0xff80967c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8096ac:	00000906 	br	8096d4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8096b0:	01c00084 	movi	r7,2
  8096b4:	01800044 	movi	r6,1
  8096b8:	000b883a 	mov	r5,zero
  8096bc:	e13ffd17 	ldw	r4,-12(fp)
  8096c0:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
                 nbr_tasks++;
  8096c4:	e0bff803 	ldbu	r2,-32(fp)
  8096c8:	10800044 	addi	r2,r2,1
  8096cc:	e0bff805 	stb	r2,-32(fp)
                 break;
  8096d0:	0001883a 	nop
  8096d4:	e0bff917 	ldw	r2,-28(fp)
  8096d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8096dc:	e0bffa17 	ldw	r2,-24(fp)
  8096e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  8096e4:	08058100 	call	805810 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  8096e8:	e0bfff17 	ldw	r2,-4(fp)
  8096ec:	00c00384 	movi	r3,14
  8096f0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  8096f4:	e0bff803 	ldbu	r2,-32(fp)
  8096f8:	00000706 	br	809718 <OSSemPendAbort+0x158>
  8096fc:	e0bff917 	ldw	r2,-28(fp)
  809700:	e0bffb15 	stw	r2,-20(fp)
  809704:	e0bffb17 	ldw	r2,-20(fp)
  809708:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80970c:	e0bfff17 	ldw	r2,-4(fp)
  809710:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  809714:	0005883a 	mov	r2,zero
}
  809718:	e037883a 	mov	sp,fp
  80971c:	dfc00117 	ldw	ra,4(sp)
  809720:	df000017 	ldw	fp,0(sp)
  809724:	dec00204 	addi	sp,sp,8
  809728:	f800283a 	ret

0080972c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  80972c:	defff804 	addi	sp,sp,-32
  809730:	dfc00715 	stw	ra,28(sp)
  809734:	df000615 	stw	fp,24(sp)
  809738:	df000604 	addi	fp,sp,24
  80973c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809740:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809744:	e0bfff17 	ldw	r2,-4(fp)
  809748:	1000021e 	bne	r2,zero,809754 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  80974c:	00800104 	movi	r2,4
  809750:	00003506 	br	809828 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  809754:	e0bfff17 	ldw	r2,-4(fp)
  809758:	10800003 	ldbu	r2,0(r2)
  80975c:	10803fcc 	andi	r2,r2,255
  809760:	108000e0 	cmpeqi	r2,r2,3
  809764:	1000021e 	bne	r2,zero,809770 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  809768:	00800044 	movi	r2,1
  80976c:	00002e06 	br	809828 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809770:	0005303a 	rdctl	r2,status
  809774:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809778:	e0fffe17 	ldw	r3,-8(fp)
  80977c:	00bfff84 	movi	r2,-2
  809780:	1884703a 	and	r2,r3,r2
  809784:	1001703a 	wrctl	status,r2
  
  return context;
  809788:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  80978c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  809790:	e0bfff17 	ldw	r2,-4(fp)
  809794:	10800283 	ldbu	r2,10(r2)
  809798:	10803fcc 	andi	r2,r2,255
  80979c:	10000c26 	beq	r2,zero,8097d0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8097a0:	000f883a 	mov	r7,zero
  8097a4:	01800044 	movi	r6,1
  8097a8:	000b883a 	mov	r5,zero
  8097ac:	e13fff17 	ldw	r4,-4(fp)
  8097b0:	0804dc40 	call	804dc4 <OS_EventTaskRdy>
  8097b4:	e0bffa17 	ldw	r2,-24(fp)
  8097b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8097bc:	e0bffb17 	ldw	r2,-20(fp)
  8097c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  8097c4:	08058100 	call	805810 <OS_Sched>
        return (OS_ERR_NONE);
  8097c8:	0005883a 	mov	r2,zero
  8097cc:	00001606 	br	809828 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  8097d0:	e0bfff17 	ldw	r2,-4(fp)
  8097d4:	1080020b 	ldhu	r2,8(r2)
  8097d8:	10ffffcc 	andi	r3,r2,65535
  8097dc:	00bfffd4 	movui	r2,65535
  8097e0:	18800c26 	beq	r3,r2,809814 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  8097e4:	e0bfff17 	ldw	r2,-4(fp)
  8097e8:	1080020b 	ldhu	r2,8(r2)
  8097ec:	10800044 	addi	r2,r2,1
  8097f0:	1007883a 	mov	r3,r2
  8097f4:	e0bfff17 	ldw	r2,-4(fp)
  8097f8:	10c0020d 	sth	r3,8(r2)
  8097fc:	e0bffa17 	ldw	r2,-24(fp)
  809800:	e0bffc15 	stw	r2,-16(fp)
  809804:	e0bffc17 	ldw	r2,-16(fp)
  809808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80980c:	0005883a 	mov	r2,zero
  809810:	00000506 	br	809828 <OSSemPost+0xfc>
  809814:	e0bffa17 	ldw	r2,-24(fp)
  809818:	e0bffd15 	stw	r2,-12(fp)
  80981c:	e0bffd17 	ldw	r2,-12(fp)
  809820:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  809824:	00800c84 	movi	r2,50
}
  809828:	e037883a 	mov	sp,fp
  80982c:	dfc00117 	ldw	ra,4(sp)
  809830:	df000017 	ldw	fp,0(sp)
  809834:	dec00204 	addi	sp,sp,8
  809838:	f800283a 	ret

0080983c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  80983c:	defff704 	addi	sp,sp,-36
  809840:	df000815 	stw	fp,32(sp)
  809844:	df000804 	addi	fp,sp,32
  809848:	e13ffe15 	stw	r4,-8(fp)
  80984c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  809850:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  809854:	e0bffe17 	ldw	r2,-8(fp)
  809858:	1000021e 	bne	r2,zero,809864 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  80985c:	00800104 	movi	r2,4
  809860:	00003606 	br	80993c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  809864:	e0bfff17 	ldw	r2,-4(fp)
  809868:	1000021e 	bne	r2,zero,809874 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  80986c:	00800244 	movi	r2,9
  809870:	00003206 	br	80993c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  809874:	e0bffe17 	ldw	r2,-8(fp)
  809878:	10800003 	ldbu	r2,0(r2)
  80987c:	10803fcc 	andi	r2,r2,255
  809880:	108000e0 	cmpeqi	r2,r2,3
  809884:	1000021e 	bne	r2,zero,809890 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  809888:	00800044 	movi	r2,1
  80988c:	00002b06 	br	80993c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809890:	0005303a 	rdctl	r2,status
  809894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809898:	e0fffd17 	ldw	r3,-12(fp)
  80989c:	00bfff84 	movi	r2,-2
  8098a0:	1884703a 	and	r2,r3,r2
  8098a4:	1001703a 	wrctl	status,r2
  
  return context;
  8098a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8098ac:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  8098b0:	e0bffe17 	ldw	r2,-8(fp)
  8098b4:	10c00283 	ldbu	r3,10(r2)
  8098b8:	e0bfff17 	ldw	r2,-4(fp)
  8098bc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  8098c0:	e0bffe17 	ldw	r2,-8(fp)
  8098c4:	108002c4 	addi	r2,r2,11
  8098c8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  8098cc:	e0bfff17 	ldw	r2,-4(fp)
  8098d0:	10800084 	addi	r2,r2,2
  8098d4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8098d8:	e03ffa05 	stb	zero,-24(fp)
  8098dc:	00000b06 	br	80990c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  8098e0:	e0bff917 	ldw	r2,-28(fp)
  8098e4:	10c00044 	addi	r3,r2,1
  8098e8:	e0fff915 	stw	r3,-28(fp)
  8098ec:	e0fff817 	ldw	r3,-32(fp)
  8098f0:	19000044 	addi	r4,r3,1
  8098f4:	e13ff815 	stw	r4,-32(fp)
  8098f8:	18c00003 	ldbu	r3,0(r3)
  8098fc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  809900:	e0bffa03 	ldbu	r2,-24(fp)
  809904:	10800044 	addi	r2,r2,1
  809908:	e0bffa05 	stb	r2,-24(fp)
  80990c:	e0bffa03 	ldbu	r2,-24(fp)
  809910:	108000f0 	cmpltui	r2,r2,3
  809914:	103ff21e 	bne	r2,zero,8098e0 <__alt_data_end+0xff8098e0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  809918:	e0bffe17 	ldw	r2,-8(fp)
  80991c:	10c0020b 	ldhu	r3,8(r2)
  809920:	e0bfff17 	ldw	r2,-4(fp)
  809924:	10c0000d 	sth	r3,0(r2)
  809928:	e0bffb17 	ldw	r2,-20(fp)
  80992c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809930:	e0bffc17 	ldw	r2,-16(fp)
  809934:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  809938:	0005883a 	mov	r2,zero
}
  80993c:	e037883a 	mov	sp,fp
  809940:	df000017 	ldw	fp,0(sp)
  809944:	dec00104 	addi	sp,sp,4
  809948:	f800283a 	ret

0080994c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  80994c:	defff904 	addi	sp,sp,-28
  809950:	df000615 	stw	fp,24(sp)
  809954:	df000604 	addi	fp,sp,24
  809958:	e13ffd15 	stw	r4,-12(fp)
  80995c:	2805883a 	mov	r2,r5
  809960:	e1bfff15 	stw	r6,-4(fp)
  809964:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  809968:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80996c:	e0bfff17 	ldw	r2,-4(fp)
  809970:	10003126 	beq	r2,zero,809a38 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  809974:	e0bffd17 	ldw	r2,-12(fp)
  809978:	1000041e 	bne	r2,zero,80998c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  80997c:	e0bfff17 	ldw	r2,-4(fp)
  809980:	00c00104 	movi	r3,4
  809984:	10c00005 	stb	r3,0(r2)
        return;
  809988:	00002c06 	br	809a3c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80998c:	e0bffd17 	ldw	r2,-12(fp)
  809990:	10800003 	ldbu	r2,0(r2)
  809994:	10803fcc 	andi	r2,r2,255
  809998:	108000e0 	cmpeqi	r2,r2,3
  80999c:	1000041e 	bne	r2,zero,8099b0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  8099a0:	e0bfff17 	ldw	r2,-4(fp)
  8099a4:	00c00044 	movi	r3,1
  8099a8:	10c00005 	stb	r3,0(r2)
        return;
  8099ac:	00002306 	br	809a3c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8099b0:	0005303a 	rdctl	r2,status
  8099b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8099b8:	e0fffc17 	ldw	r3,-16(fp)
  8099bc:	00bfff84 	movi	r2,-2
  8099c0:	1884703a 	and	r2,r3,r2
  8099c4:	1001703a 	wrctl	status,r2
  
  return context;
  8099c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8099cc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  8099d0:	e0bfff17 	ldw	r2,-4(fp)
  8099d4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  8099d8:	e0bffd17 	ldw	r2,-12(fp)
  8099dc:	1080020b 	ldhu	r2,8(r2)
  8099e0:	10bfffcc 	andi	r2,r2,65535
  8099e4:	10000426 	beq	r2,zero,8099f8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  8099e8:	e0bffd17 	ldw	r2,-12(fp)
  8099ec:	e0fffe0b 	ldhu	r3,-8(fp)
  8099f0:	10c0020d 	sth	r3,8(r2)
  8099f4:	00000b06 	br	809a24 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  8099f8:	e0bffd17 	ldw	r2,-12(fp)
  8099fc:	10800283 	ldbu	r2,10(r2)
  809a00:	10803fcc 	andi	r2,r2,255
  809a04:	1000041e 	bne	r2,zero,809a18 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  809a08:	e0bffd17 	ldw	r2,-12(fp)
  809a0c:	e0fffe0b 	ldhu	r3,-8(fp)
  809a10:	10c0020d 	sth	r3,8(r2)
  809a14:	00000306 	br	809a24 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  809a18:	e0bfff17 	ldw	r2,-4(fp)
  809a1c:	00c01244 	movi	r3,73
  809a20:	10c00005 	stb	r3,0(r2)
  809a24:	e0bffa17 	ldw	r2,-24(fp)
  809a28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809a2c:	e0bffb17 	ldw	r2,-20(fp)
  809a30:	1001703a 	wrctl	status,r2
  809a34:	00000106 	br	809a3c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  809a38:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  809a3c:	e037883a 	mov	sp,fp
  809a40:	df000017 	ldw	fp,0(sp)
  809a44:	dec00104 	addi	sp,sp,4
  809a48:	f800283a 	ret

00809a4c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  809a4c:	defff104 	addi	sp,sp,-60
  809a50:	dfc00e15 	stw	ra,56(sp)
  809a54:	df000d15 	stw	fp,52(sp)
  809a58:	df000d04 	addi	fp,sp,52
  809a5c:	2007883a 	mov	r3,r4
  809a60:	2805883a 	mov	r2,r5
  809a64:	e0fffe05 	stb	r3,-8(fp)
  809a68:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  809a6c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  809a70:	e0bffe03 	ldbu	r2,-8(fp)
  809a74:	10800530 	cmpltui	r2,r2,20
  809a78:	1000051e 	bne	r2,zero,809a90 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  809a7c:	e0bffe03 	ldbu	r2,-8(fp)
  809a80:	10803fe0 	cmpeqi	r2,r2,255
  809a84:	1000021e 	bne	r2,zero,809a90 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  809a88:	00800a84 	movi	r2,42
  809a8c:	00012606 	br	809f28 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  809a90:	e0bfff03 	ldbu	r2,-4(fp)
  809a94:	10800530 	cmpltui	r2,r2,20
  809a98:	1000021e 	bne	r2,zero,809aa4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  809a9c:	00800a84 	movi	r2,42
  809aa0:	00012106 	br	809f28 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809aa4:	0005303a 	rdctl	r2,status
  809aa8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809aac:	e0fffd17 	ldw	r3,-12(fp)
  809ab0:	00bfff84 	movi	r2,-2
  809ab4:	1884703a 	and	r2,r3,r2
  809ab8:	1001703a 	wrctl	status,r2
  
  return context;
  809abc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  809ac0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  809ac4:	e0ffff03 	ldbu	r3,-4(fp)
  809ac8:	008020b4 	movhi	r2,130
  809acc:	10a1d204 	addi	r2,r2,-30904
  809ad0:	18c7883a 	add	r3,r3,r3
  809ad4:	18c7883a 	add	r3,r3,r3
  809ad8:	10c5883a 	add	r2,r2,r3
  809adc:	10800017 	ldw	r2,0(r2)
  809ae0:	10000626 	beq	r2,zero,809afc <OSTaskChangePrio+0xb0>
  809ae4:	e0bff517 	ldw	r2,-44(fp)
  809ae8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809aec:	e0bff617 	ldw	r2,-40(fp)
  809af0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  809af4:	00800a04 	movi	r2,40
  809af8:	00010b06 	br	809f28 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  809afc:	e0bffe03 	ldbu	r2,-8(fp)
  809b00:	10803fd8 	cmpnei	r2,r2,255
  809b04:	1000031e 	bne	r2,zero,809b14 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  809b08:	d0a71017 	ldw	r2,-25536(gp)
  809b0c:	10800c83 	ldbu	r2,50(r2)
  809b10:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  809b14:	e0fffe03 	ldbu	r3,-8(fp)
  809b18:	008020b4 	movhi	r2,130
  809b1c:	10a1d204 	addi	r2,r2,-30904
  809b20:	18c7883a 	add	r3,r3,r3
  809b24:	18c7883a 	add	r3,r3,r3
  809b28:	10c5883a 	add	r2,r2,r3
  809b2c:	10800017 	ldw	r2,0(r2)
  809b30:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  809b34:	e0bff817 	ldw	r2,-32(fp)
  809b38:	1000061e 	bne	r2,zero,809b54 <OSTaskChangePrio+0x108>
  809b3c:	e0bff517 	ldw	r2,-44(fp)
  809b40:	e0bff715 	stw	r2,-36(fp)
  809b44:	e0bff717 	ldw	r2,-36(fp)
  809b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  809b4c:	00800a44 	movi	r2,41
  809b50:	0000f506 	br	809f28 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  809b54:	e0bff817 	ldw	r2,-32(fp)
  809b58:	10800058 	cmpnei	r2,r2,1
  809b5c:	1000061e 	bne	r2,zero,809b78 <OSTaskChangePrio+0x12c>
  809b60:	e0bff517 	ldw	r2,-44(fp)
  809b64:	e0bff915 	stw	r2,-28(fp)
  809b68:	e0bff917 	ldw	r2,-28(fp)
  809b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  809b70:	008010c4 	movi	r2,67
  809b74:	0000ec06 	br	809f28 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  809b78:	e0bfff03 	ldbu	r2,-4(fp)
  809b7c:	1004d0fa 	srli	r2,r2,3
  809b80:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  809b84:	e0bfff03 	ldbu	r2,-4(fp)
  809b88:	108001cc 	andi	r2,r2,7
  809b8c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  809b90:	e0bffb03 	ldbu	r2,-20(fp)
  809b94:	00c00044 	movi	r3,1
  809b98:	1884983a 	sll	r2,r3,r2
  809b9c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  809ba0:	e0bffb43 	ldbu	r2,-19(fp)
  809ba4:	00c00044 	movi	r3,1
  809ba8:	1884983a 	sll	r2,r3,r2
  809bac:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  809bb0:	e0fffe03 	ldbu	r3,-8(fp)
  809bb4:	008020b4 	movhi	r2,130
  809bb8:	10a1d204 	addi	r2,r2,-30904
  809bbc:	18c7883a 	add	r3,r3,r3
  809bc0:	18c7883a 	add	r3,r3,r3
  809bc4:	10c5883a 	add	r2,r2,r3
  809bc8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  809bcc:	e0ffff03 	ldbu	r3,-4(fp)
  809bd0:	008020b4 	movhi	r2,130
  809bd4:	10a1d204 	addi	r2,r2,-30904
  809bd8:	18c7883a 	add	r3,r3,r3
  809bdc:	18c7883a 	add	r3,r3,r3
  809be0:	10c5883a 	add	r2,r2,r3
  809be4:	e0fff817 	ldw	r3,-32(fp)
  809be8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  809bec:	e0bff817 	ldw	r2,-32(fp)
  809bf0:	10800d03 	ldbu	r2,52(r2)
  809bf4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  809bf8:	e0bff817 	ldw	r2,-32(fp)
  809bfc:	10800d83 	ldbu	r2,54(r2)
  809c00:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  809c04:	e0bff817 	ldw	r2,-32(fp)
  809c08:	10800d43 	ldbu	r2,53(r2)
  809c0c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  809c10:	e0fffc03 	ldbu	r3,-16(fp)
  809c14:	d0a70d44 	addi	r2,gp,-25547
  809c18:	1885883a 	add	r2,r3,r2
  809c1c:	10c00003 	ldbu	r3,0(r2)
  809c20:	e0bffc83 	ldbu	r2,-14(fp)
  809c24:	1884703a 	and	r2,r3,r2
  809c28:	10803fcc 	andi	r2,r2,255
  809c2c:	10002826 	beq	r2,zero,809cd0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  809c30:	e0fffc03 	ldbu	r3,-16(fp)
  809c34:	e13ffc03 	ldbu	r4,-16(fp)
  809c38:	d0a70d44 	addi	r2,gp,-25547
  809c3c:	2085883a 	add	r2,r4,r2
  809c40:	10800003 	ldbu	r2,0(r2)
  809c44:	1009883a 	mov	r4,r2
  809c48:	e0bffc83 	ldbu	r2,-14(fp)
  809c4c:	0084303a 	nor	r2,zero,r2
  809c50:	2084703a 	and	r2,r4,r2
  809c54:	1009883a 	mov	r4,r2
  809c58:	d0a70d44 	addi	r2,gp,-25547
  809c5c:	1885883a 	add	r2,r3,r2
  809c60:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  809c64:	e0fffc03 	ldbu	r3,-16(fp)
  809c68:	d0a70d44 	addi	r2,gp,-25547
  809c6c:	1885883a 	add	r2,r3,r2
  809c70:	10800003 	ldbu	r2,0(r2)
  809c74:	10803fcc 	andi	r2,r2,255
  809c78:	1000061e 	bne	r2,zero,809c94 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  809c7c:	e0bffc43 	ldbu	r2,-15(fp)
  809c80:	0084303a 	nor	r2,zero,r2
  809c84:	1007883a 	mov	r3,r2
  809c88:	d0a70d03 	ldbu	r2,-25548(gp)
  809c8c:	1884703a 	and	r2,r3,r2
  809c90:	d0a70d05 	stb	r2,-25548(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  809c94:	d0e70d03 	ldbu	r3,-25548(gp)
  809c98:	e0bffb83 	ldbu	r2,-18(fp)
  809c9c:	1884b03a 	or	r2,r3,r2
  809ca0:	d0a70d05 	stb	r2,-25548(gp)
         OSRdyTbl[y_new] |= bitx_new;
  809ca4:	e0fffb03 	ldbu	r3,-20(fp)
  809ca8:	e13ffb03 	ldbu	r4,-20(fp)
  809cac:	d0a70d44 	addi	r2,gp,-25547
  809cb0:	2085883a 	add	r2,r4,r2
  809cb4:	11000003 	ldbu	r4,0(r2)
  809cb8:	e0bffbc3 	ldbu	r2,-17(fp)
  809cbc:	2084b03a 	or	r2,r4,r2
  809cc0:	1009883a 	mov	r4,r2
  809cc4:	d0a70d44 	addi	r2,gp,-25547
  809cc8:	1885883a 	add	r2,r3,r2
  809ccc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  809cd0:	e0bff817 	ldw	r2,-32(fp)
  809cd4:	10800717 	ldw	r2,28(r2)
  809cd8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  809cdc:	e0bff317 	ldw	r2,-52(fp)
  809ce0:	10003326 	beq	r2,zero,809db0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  809ce4:	e0bffc03 	ldbu	r2,-16(fp)
  809ce8:	e0fffc03 	ldbu	r3,-16(fp)
  809cec:	e13ff317 	ldw	r4,-52(fp)
  809cf0:	20c7883a 	add	r3,r4,r3
  809cf4:	18c002c4 	addi	r3,r3,11
  809cf8:	18c00003 	ldbu	r3,0(r3)
  809cfc:	1809883a 	mov	r4,r3
  809d00:	e0fffc83 	ldbu	r3,-14(fp)
  809d04:	00c6303a 	nor	r3,zero,r3
  809d08:	20c6703a 	and	r3,r4,r3
  809d0c:	1809883a 	mov	r4,r3
  809d10:	e0fff317 	ldw	r3,-52(fp)
  809d14:	1885883a 	add	r2,r3,r2
  809d18:	108002c4 	addi	r2,r2,11
  809d1c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  809d20:	e0bffc03 	ldbu	r2,-16(fp)
  809d24:	e0fff317 	ldw	r3,-52(fp)
  809d28:	1885883a 	add	r2,r3,r2
  809d2c:	108002c4 	addi	r2,r2,11
  809d30:	10800003 	ldbu	r2,0(r2)
  809d34:	10803fcc 	andi	r2,r2,255
  809d38:	1000091e 	bne	r2,zero,809d60 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  809d3c:	e0bff317 	ldw	r2,-52(fp)
  809d40:	10800283 	ldbu	r2,10(r2)
  809d44:	1007883a 	mov	r3,r2
  809d48:	e0bffc43 	ldbu	r2,-15(fp)
  809d4c:	0084303a 	nor	r2,zero,r2
  809d50:	1884703a 	and	r2,r3,r2
  809d54:	1007883a 	mov	r3,r2
  809d58:	e0bff317 	ldw	r2,-52(fp)
  809d5c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  809d60:	e0bff317 	ldw	r2,-52(fp)
  809d64:	10c00283 	ldbu	r3,10(r2)
  809d68:	e0bffb83 	ldbu	r2,-18(fp)
  809d6c:	1884b03a 	or	r2,r3,r2
  809d70:	1007883a 	mov	r3,r2
  809d74:	e0bff317 	ldw	r2,-52(fp)
  809d78:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  809d7c:	e0bffb03 	ldbu	r2,-20(fp)
  809d80:	e0fffb03 	ldbu	r3,-20(fp)
  809d84:	e13ff317 	ldw	r4,-52(fp)
  809d88:	20c7883a 	add	r3,r4,r3
  809d8c:	18c002c4 	addi	r3,r3,11
  809d90:	19000003 	ldbu	r4,0(r3)
  809d94:	e0fffbc3 	ldbu	r3,-17(fp)
  809d98:	20c6b03a 	or	r3,r4,r3
  809d9c:	1809883a 	mov	r4,r3
  809da0:	e0fff317 	ldw	r3,-52(fp)
  809da4:	1885883a 	add	r2,r3,r2
  809da8:	108002c4 	addi	r2,r2,11
  809dac:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  809db0:	e0bff817 	ldw	r2,-32(fp)
  809db4:	10800817 	ldw	r2,32(r2)
  809db8:	10004226 	beq	r2,zero,809ec4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  809dbc:	e0bff817 	ldw	r2,-32(fp)
  809dc0:	10800817 	ldw	r2,32(r2)
  809dc4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  809dc8:	e0bff417 	ldw	r2,-48(fp)
  809dcc:	10800017 	ldw	r2,0(r2)
  809dd0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  809dd4:	00003906 	br	809ebc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  809dd8:	e0bffc03 	ldbu	r2,-16(fp)
  809ddc:	e0fffc03 	ldbu	r3,-16(fp)
  809de0:	e13ff317 	ldw	r4,-52(fp)
  809de4:	20c7883a 	add	r3,r4,r3
  809de8:	18c002c4 	addi	r3,r3,11
  809dec:	18c00003 	ldbu	r3,0(r3)
  809df0:	1809883a 	mov	r4,r3
  809df4:	e0fffc83 	ldbu	r3,-14(fp)
  809df8:	00c6303a 	nor	r3,zero,r3
  809dfc:	20c6703a 	and	r3,r4,r3
  809e00:	1809883a 	mov	r4,r3
  809e04:	e0fff317 	ldw	r3,-52(fp)
  809e08:	1885883a 	add	r2,r3,r2
  809e0c:	108002c4 	addi	r2,r2,11
  809e10:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  809e14:	e0bffc03 	ldbu	r2,-16(fp)
  809e18:	e0fff317 	ldw	r3,-52(fp)
  809e1c:	1885883a 	add	r2,r3,r2
  809e20:	108002c4 	addi	r2,r2,11
  809e24:	10800003 	ldbu	r2,0(r2)
  809e28:	10803fcc 	andi	r2,r2,255
  809e2c:	1000091e 	bne	r2,zero,809e54 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  809e30:	e0bff317 	ldw	r2,-52(fp)
  809e34:	10800283 	ldbu	r2,10(r2)
  809e38:	1007883a 	mov	r3,r2
  809e3c:	e0bffc43 	ldbu	r2,-15(fp)
  809e40:	0084303a 	nor	r2,zero,r2
  809e44:	1884703a 	and	r2,r3,r2
  809e48:	1007883a 	mov	r3,r2
  809e4c:	e0bff317 	ldw	r2,-52(fp)
  809e50:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  809e54:	e0bff317 	ldw	r2,-52(fp)
  809e58:	10c00283 	ldbu	r3,10(r2)
  809e5c:	e0bffb83 	ldbu	r2,-18(fp)
  809e60:	1884b03a 	or	r2,r3,r2
  809e64:	1007883a 	mov	r3,r2
  809e68:	e0bff317 	ldw	r2,-52(fp)
  809e6c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  809e70:	e0bffb03 	ldbu	r2,-20(fp)
  809e74:	e0fffb03 	ldbu	r3,-20(fp)
  809e78:	e13ff317 	ldw	r4,-52(fp)
  809e7c:	20c7883a 	add	r3,r4,r3
  809e80:	18c002c4 	addi	r3,r3,11
  809e84:	19000003 	ldbu	r4,0(r3)
  809e88:	e0fffbc3 	ldbu	r3,-17(fp)
  809e8c:	20c6b03a 	or	r3,r4,r3
  809e90:	1809883a 	mov	r4,r3
  809e94:	e0fff317 	ldw	r3,-52(fp)
  809e98:	1885883a 	add	r2,r3,r2
  809e9c:	108002c4 	addi	r2,r2,11
  809ea0:	11000005 	stb	r4,0(r2)
            pevents++;
  809ea4:	e0bff417 	ldw	r2,-48(fp)
  809ea8:	10800104 	addi	r2,r2,4
  809eac:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  809eb0:	e0bff417 	ldw	r2,-48(fp)
  809eb4:	10800017 	ldw	r2,0(r2)
  809eb8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  809ebc:	e0bff317 	ldw	r2,-52(fp)
  809ec0:	103fc51e 	bne	r2,zero,809dd8 <__alt_data_end+0xff809dd8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  809ec4:	e0bff817 	ldw	r2,-32(fp)
  809ec8:	e0ffff03 	ldbu	r3,-4(fp)
  809ecc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  809ed0:	e0bff817 	ldw	r2,-32(fp)
  809ed4:	e0fffb03 	ldbu	r3,-20(fp)
  809ed8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  809edc:	e0bff817 	ldw	r2,-32(fp)
  809ee0:	e0fffb43 	ldbu	r3,-19(fp)
  809ee4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  809ee8:	e0bff817 	ldw	r2,-32(fp)
  809eec:	e0fffb83 	ldbu	r3,-18(fp)
  809ef0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  809ef4:	e0bff817 	ldw	r2,-32(fp)
  809ef8:	e0fffbc3 	ldbu	r3,-17(fp)
  809efc:	10c00d45 	stb	r3,53(r2)
  809f00:	e0bff517 	ldw	r2,-44(fp)
  809f04:	e0bffa15 	stw	r2,-24(fp)
  809f08:	e0bffa17 	ldw	r2,-24(fp)
  809f0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  809f10:	d0a70143 	ldbu	r2,-25595(gp)
  809f14:	10803fcc 	andi	r2,r2,255
  809f18:	10800058 	cmpnei	r2,r2,1
  809f1c:	1000011e 	bne	r2,zero,809f24 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  809f20:	08058100 	call	805810 <OS_Sched>
    }
    return (OS_ERR_NONE);
  809f24:	0005883a 	mov	r2,zero
}
  809f28:	e037883a 	mov	sp,fp
  809f2c:	dfc00117 	ldw	ra,4(sp)
  809f30:	df000017 	ldw	fp,0(sp)
  809f34:	dec00204 	addi	sp,sp,8
  809f38:	f800283a 	ret

00809f3c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  809f3c:	deffee04 	addi	sp,sp,-72
  809f40:	dfc01115 	stw	ra,68(sp)
  809f44:	df001015 	stw	fp,64(sp)
  809f48:	df001004 	addi	fp,sp,64
  809f4c:	e13ffc15 	stw	r4,-16(fp)
  809f50:	e17ffd15 	stw	r5,-12(fp)
  809f54:	e1bffe15 	stw	r6,-8(fp)
  809f58:	3805883a 	mov	r2,r7
  809f5c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  809f60:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  809f64:	e0bfff03 	ldbu	r2,-4(fp)
  809f68:	10800570 	cmpltui	r2,r2,21
  809f6c:	1000021e 	bne	r2,zero,809f78 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  809f70:	00800a84 	movi	r2,42
  809f74:	00005706 	br	80a0d4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809f78:	0005303a 	rdctl	r2,status
  809f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809f80:	e0fffb17 	ldw	r3,-20(fp)
  809f84:	00bfff84 	movi	r2,-2
  809f88:	1884703a 	and	r2,r3,r2
  809f8c:	1001703a 	wrctl	status,r2
  
  return context;
  809f90:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  809f94:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  809f98:	d0a70f03 	ldbu	r2,-25540(gp)
  809f9c:	10803fcc 	andi	r2,r2,255
  809fa0:	10000626 	beq	r2,zero,809fbc <OSTaskCreate+0x80>
  809fa4:	e0bff317 	ldw	r2,-52(fp)
  809fa8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809fac:	e0bff417 	ldw	r2,-48(fp)
  809fb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  809fb4:	00800f04 	movi	r2,60
  809fb8:	00004606 	br	80a0d4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  809fbc:	e0ffff03 	ldbu	r3,-4(fp)
  809fc0:	008020b4 	movhi	r2,130
  809fc4:	10a1d204 	addi	r2,r2,-30904
  809fc8:	18c7883a 	add	r3,r3,r3
  809fcc:	18c7883a 	add	r3,r3,r3
  809fd0:	10c5883a 	add	r2,r2,r3
  809fd4:	10800017 	ldw	r2,0(r2)
  809fd8:	1000391e 	bne	r2,zero,80a0c0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  809fdc:	e0ffff03 	ldbu	r3,-4(fp)
  809fe0:	008020b4 	movhi	r2,130
  809fe4:	10a1d204 	addi	r2,r2,-30904
  809fe8:	18c7883a 	add	r3,r3,r3
  809fec:	18c7883a 	add	r3,r3,r3
  809ff0:	10c5883a 	add	r2,r2,r3
  809ff4:	00c00044 	movi	r3,1
  809ff8:	10c00015 	stw	r3,0(r2)
  809ffc:	e0bff317 	ldw	r2,-52(fp)
  80a000:	e0bff515 	stw	r2,-44(fp)
  80a004:	e0bff517 	ldw	r2,-44(fp)
  80a008:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  80a00c:	000f883a 	mov	r7,zero
  80a010:	e1bffe17 	ldw	r6,-8(fp)
  80a014:	e17ffd17 	ldw	r5,-12(fp)
  80a018:	e13ffc17 	ldw	r4,-16(fp)
  80a01c:	080d0c00 	call	80d0c0 <OSTaskStkInit>
  80a020:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  80a024:	e0bfff03 	ldbu	r2,-4(fp)
  80a028:	d8000215 	stw	zero,8(sp)
  80a02c:	d8000115 	stw	zero,4(sp)
  80a030:	d8000015 	stw	zero,0(sp)
  80a034:	000f883a 	mov	r7,zero
  80a038:	000d883a 	mov	r6,zero
  80a03c:	e17ff717 	ldw	r5,-36(fp)
  80a040:	1009883a 	mov	r4,r2
  80a044:	0805c100 	call	805c10 <OS_TCBInit>
  80a048:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  80a04c:	e0bff803 	ldbu	r2,-32(fp)
  80a050:	1000061e 	bne	r2,zero,80a06c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  80a054:	d0a70143 	ldbu	r2,-25595(gp)
  80a058:	10803fcc 	andi	r2,r2,255
  80a05c:	10800058 	cmpnei	r2,r2,1
  80a060:	1000151e 	bne	r2,zero,80a0b8 <OSTaskCreate+0x17c>
                OS_Sched();
  80a064:	08058100 	call	805810 <OS_Sched>
  80a068:	00001306 	br	80a0b8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a06c:	0005303a 	rdctl	r2,status
  80a070:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a074:	e0fffa17 	ldw	r3,-24(fp)
  80a078:	00bfff84 	movi	r2,-2
  80a07c:	1884703a 	and	r2,r3,r2
  80a080:	1001703a 	wrctl	status,r2
  
  return context;
  80a084:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80a088:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  80a08c:	e0ffff03 	ldbu	r3,-4(fp)
  80a090:	008020b4 	movhi	r2,130
  80a094:	10a1d204 	addi	r2,r2,-30904
  80a098:	18c7883a 	add	r3,r3,r3
  80a09c:	18c7883a 	add	r3,r3,r3
  80a0a0:	10c5883a 	add	r2,r2,r3
  80a0a4:	10000015 	stw	zero,0(r2)
  80a0a8:	e0bff317 	ldw	r2,-52(fp)
  80a0ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a0b0:	e0bff617 	ldw	r2,-40(fp)
  80a0b4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80a0b8:	e0bff803 	ldbu	r2,-32(fp)
  80a0bc:	00000506 	br	80a0d4 <OSTaskCreate+0x198>
  80a0c0:	e0bff317 	ldw	r2,-52(fp)
  80a0c4:	e0bff915 	stw	r2,-28(fp)
  80a0c8:	e0bff917 	ldw	r2,-28(fp)
  80a0cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80a0d0:	00800a04 	movi	r2,40
}
  80a0d4:	e037883a 	mov	sp,fp
  80a0d8:	dfc00117 	ldw	ra,4(sp)
  80a0dc:	df000017 	ldw	fp,0(sp)
  80a0e0:	dec00204 	addi	sp,sp,8
  80a0e4:	f800283a 	ret

0080a0e8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  80a0e8:	deffec04 	addi	sp,sp,-80
  80a0ec:	dfc01315 	stw	ra,76(sp)
  80a0f0:	df001215 	stw	fp,72(sp)
  80a0f4:	df001204 	addi	fp,sp,72
  80a0f8:	e13ffa15 	stw	r4,-24(fp)
  80a0fc:	e17ffb15 	stw	r5,-20(fp)
  80a100:	e1bffc15 	stw	r6,-16(fp)
  80a104:	3809883a 	mov	r4,r7
  80a108:	e0c00217 	ldw	r3,8(fp)
  80a10c:	e0800617 	ldw	r2,24(fp)
  80a110:	e13ffd05 	stb	r4,-12(fp)
  80a114:	e0fffe0d 	sth	r3,-8(fp)
  80a118:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  80a11c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  80a120:	e0bffd03 	ldbu	r2,-12(fp)
  80a124:	10800570 	cmpltui	r2,r2,21
  80a128:	1000021e 	bne	r2,zero,80a134 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  80a12c:	00800a84 	movi	r2,42
  80a130:	00006106 	br	80a2b8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a134:	0005303a 	rdctl	r2,status
  80a138:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a13c:	e0fff917 	ldw	r3,-28(fp)
  80a140:	00bfff84 	movi	r2,-2
  80a144:	1884703a 	and	r2,r3,r2
  80a148:	1001703a 	wrctl	status,r2
  
  return context;
  80a14c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80a150:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  80a154:	d0a70f03 	ldbu	r2,-25540(gp)
  80a158:	10803fcc 	andi	r2,r2,255
  80a15c:	10000626 	beq	r2,zero,80a178 <OSTaskCreateExt+0x90>
  80a160:	e0bff117 	ldw	r2,-60(fp)
  80a164:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a168:	e0bff217 	ldw	r2,-56(fp)
  80a16c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  80a170:	00800f04 	movi	r2,60
  80a174:	00005006 	br	80a2b8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80a178:	e0fffd03 	ldbu	r3,-12(fp)
  80a17c:	008020b4 	movhi	r2,130
  80a180:	10a1d204 	addi	r2,r2,-30904
  80a184:	18c7883a 	add	r3,r3,r3
  80a188:	18c7883a 	add	r3,r3,r3
  80a18c:	10c5883a 	add	r2,r2,r3
  80a190:	10800017 	ldw	r2,0(r2)
  80a194:	1000431e 	bne	r2,zero,80a2a4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80a198:	e0fffd03 	ldbu	r3,-12(fp)
  80a19c:	008020b4 	movhi	r2,130
  80a1a0:	10a1d204 	addi	r2,r2,-30904
  80a1a4:	18c7883a 	add	r3,r3,r3
  80a1a8:	18c7883a 	add	r3,r3,r3
  80a1ac:	10c5883a 	add	r2,r2,r3
  80a1b0:	00c00044 	movi	r3,1
  80a1b4:	10c00015 	stw	r3,0(r2)
  80a1b8:	e0bff117 	ldw	r2,-60(fp)
  80a1bc:	e0bff315 	stw	r2,-52(fp)
  80a1c0:	e0bff317 	ldw	r2,-52(fp)
  80a1c4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  80a1c8:	e0bfff0b 	ldhu	r2,-4(fp)
  80a1cc:	100d883a 	mov	r6,r2
  80a1d0:	e1400417 	ldw	r5,16(fp)
  80a1d4:	e1000317 	ldw	r4,12(fp)
  80a1d8:	080b1480 	call	80b148 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  80a1dc:	e0bfff0b 	ldhu	r2,-4(fp)
  80a1e0:	100f883a 	mov	r7,r2
  80a1e4:	e1bffc17 	ldw	r6,-16(fp)
  80a1e8:	e17ffb17 	ldw	r5,-20(fp)
  80a1ec:	e13ffa17 	ldw	r4,-24(fp)
  80a1f0:	080d0c00 	call	80d0c0 <OSTaskStkInit>
  80a1f4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  80a1f8:	e0fffd03 	ldbu	r3,-12(fp)
  80a1fc:	e13ffe0b 	ldhu	r4,-8(fp)
  80a200:	e0bfff0b 	ldhu	r2,-4(fp)
  80a204:	d8800215 	stw	r2,8(sp)
  80a208:	e0800517 	ldw	r2,20(fp)
  80a20c:	d8800115 	stw	r2,4(sp)
  80a210:	e0800417 	ldw	r2,16(fp)
  80a214:	d8800015 	stw	r2,0(sp)
  80a218:	200f883a 	mov	r7,r4
  80a21c:	e1800317 	ldw	r6,12(fp)
  80a220:	e17ff517 	ldw	r5,-44(fp)
  80a224:	1809883a 	mov	r4,r3
  80a228:	0805c100 	call	805c10 <OS_TCBInit>
  80a22c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  80a230:	e0bff603 	ldbu	r2,-40(fp)
  80a234:	1000061e 	bne	r2,zero,80a250 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  80a238:	d0a70143 	ldbu	r2,-25595(gp)
  80a23c:	10803fcc 	andi	r2,r2,255
  80a240:	10800058 	cmpnei	r2,r2,1
  80a244:	1000151e 	bne	r2,zero,80a29c <OSTaskCreateExt+0x1b4>
                OS_Sched();
  80a248:	08058100 	call	805810 <OS_Sched>
  80a24c:	00001306 	br	80a29c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a250:	0005303a 	rdctl	r2,status
  80a254:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a258:	e0fff817 	ldw	r3,-32(fp)
  80a25c:	00bfff84 	movi	r2,-2
  80a260:	1884703a 	and	r2,r3,r2
  80a264:	1001703a 	wrctl	status,r2
  
  return context;
  80a268:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  80a26c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  80a270:	e0fffd03 	ldbu	r3,-12(fp)
  80a274:	008020b4 	movhi	r2,130
  80a278:	10a1d204 	addi	r2,r2,-30904
  80a27c:	18c7883a 	add	r3,r3,r3
  80a280:	18c7883a 	add	r3,r3,r3
  80a284:	10c5883a 	add	r2,r2,r3
  80a288:	10000015 	stw	zero,0(r2)
  80a28c:	e0bff117 	ldw	r2,-60(fp)
  80a290:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a294:	e0bff417 	ldw	r2,-48(fp)
  80a298:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  80a29c:	e0bff603 	ldbu	r2,-40(fp)
  80a2a0:	00000506 	br	80a2b8 <OSTaskCreateExt+0x1d0>
  80a2a4:	e0bff117 	ldw	r2,-60(fp)
  80a2a8:	e0bff715 	stw	r2,-36(fp)
  80a2ac:	e0bff717 	ldw	r2,-36(fp)
  80a2b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  80a2b4:	00800a04 	movi	r2,40
}
  80a2b8:	e037883a 	mov	sp,fp
  80a2bc:	dfc00117 	ldw	ra,4(sp)
  80a2c0:	df000017 	ldw	fp,0(sp)
  80a2c4:	dec00204 	addi	sp,sp,8
  80a2c8:	f800283a 	ret

0080a2cc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  80a2cc:	defff404 	addi	sp,sp,-48
  80a2d0:	dfc00b15 	stw	ra,44(sp)
  80a2d4:	df000a15 	stw	fp,40(sp)
  80a2d8:	df000a04 	addi	fp,sp,40
  80a2dc:	2005883a 	mov	r2,r4
  80a2e0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  80a2e4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  80a2e8:	d0a70f03 	ldbu	r2,-25540(gp)
  80a2ec:	10803fcc 	andi	r2,r2,255
  80a2f0:	10000226 	beq	r2,zero,80a2fc <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  80a2f4:	00801004 	movi	r2,64
  80a2f8:	0000c006 	br	80a5fc <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  80a2fc:	e0bfff03 	ldbu	r2,-4(fp)
  80a300:	10800518 	cmpnei	r2,r2,20
  80a304:	1000021e 	bne	r2,zero,80a310 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  80a308:	00800f84 	movi	r2,62
  80a30c:	0000bb06 	br	80a5fc <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  80a310:	e0bfff03 	ldbu	r2,-4(fp)
  80a314:	10800530 	cmpltui	r2,r2,20
  80a318:	1000051e 	bne	r2,zero,80a330 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  80a31c:	e0bfff03 	ldbu	r2,-4(fp)
  80a320:	10803fe0 	cmpeqi	r2,r2,255
  80a324:	1000021e 	bne	r2,zero,80a330 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  80a328:	00800a84 	movi	r2,42
  80a32c:	0000b306 	br	80a5fc <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a330:	0005303a 	rdctl	r2,status
  80a334:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a338:	e0fffe17 	ldw	r3,-8(fp)
  80a33c:	00bfff84 	movi	r2,-2
  80a340:	1884703a 	and	r2,r3,r2
  80a344:	1001703a 	wrctl	status,r2
  
  return context;
  80a348:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80a34c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  80a350:	e0bfff03 	ldbu	r2,-4(fp)
  80a354:	10803fd8 	cmpnei	r2,r2,255
  80a358:	1000031e 	bne	r2,zero,80a368 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  80a35c:	d0a71017 	ldw	r2,-25536(gp)
  80a360:	10800c83 	ldbu	r2,50(r2)
  80a364:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80a368:	e0ffff03 	ldbu	r3,-4(fp)
  80a36c:	008020b4 	movhi	r2,130
  80a370:	10a1d204 	addi	r2,r2,-30904
  80a374:	18c7883a 	add	r3,r3,r3
  80a378:	18c7883a 	add	r3,r3,r3
  80a37c:	10c5883a 	add	r2,r2,r3
  80a380:	10800017 	ldw	r2,0(r2)
  80a384:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  80a388:	e0bff817 	ldw	r2,-32(fp)
  80a38c:	1000061e 	bne	r2,zero,80a3a8 <OSTaskDel+0xdc>
  80a390:	e0bff617 	ldw	r2,-40(fp)
  80a394:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a398:	e0bff717 	ldw	r2,-36(fp)
  80a39c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80a3a0:	008010c4 	movi	r2,67
  80a3a4:	00009506 	br	80a5fc <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  80a3a8:	e0bff817 	ldw	r2,-32(fp)
  80a3ac:	10800058 	cmpnei	r2,r2,1
  80a3b0:	1000061e 	bne	r2,zero,80a3cc <OSTaskDel+0x100>
  80a3b4:	e0bff617 	ldw	r2,-40(fp)
  80a3b8:	e0bff915 	stw	r2,-28(fp)
  80a3bc:	e0bff917 	ldw	r2,-28(fp)
  80a3c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80a3c4:	00800f44 	movi	r2,61
  80a3c8:	00008c06 	br	80a5fc <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  80a3cc:	e0bff817 	ldw	r2,-32(fp)
  80a3d0:	10800d03 	ldbu	r2,52(r2)
  80a3d4:	10c03fcc 	andi	r3,r2,255
  80a3d8:	e0bff817 	ldw	r2,-32(fp)
  80a3dc:	10800d03 	ldbu	r2,52(r2)
  80a3e0:	11003fcc 	andi	r4,r2,255
  80a3e4:	d0a70d44 	addi	r2,gp,-25547
  80a3e8:	2085883a 	add	r2,r4,r2
  80a3ec:	10800003 	ldbu	r2,0(r2)
  80a3f0:	1009883a 	mov	r4,r2
  80a3f4:	e0bff817 	ldw	r2,-32(fp)
  80a3f8:	10800d43 	ldbu	r2,53(r2)
  80a3fc:	0084303a 	nor	r2,zero,r2
  80a400:	2084703a 	and	r2,r4,r2
  80a404:	1009883a 	mov	r4,r2
  80a408:	d0a70d44 	addi	r2,gp,-25547
  80a40c:	1885883a 	add	r2,r3,r2
  80a410:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  80a414:	e0bff817 	ldw	r2,-32(fp)
  80a418:	10800d03 	ldbu	r2,52(r2)
  80a41c:	10c03fcc 	andi	r3,r2,255
  80a420:	d0a70d44 	addi	r2,gp,-25547
  80a424:	1885883a 	add	r2,r3,r2
  80a428:	10800003 	ldbu	r2,0(r2)
  80a42c:	10803fcc 	andi	r2,r2,255
  80a430:	1000071e 	bne	r2,zero,80a450 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  80a434:	e0bff817 	ldw	r2,-32(fp)
  80a438:	10800d83 	ldbu	r2,54(r2)
  80a43c:	0084303a 	nor	r2,zero,r2
  80a440:	1007883a 	mov	r3,r2
  80a444:	d0a70d03 	ldbu	r2,-25548(gp)
  80a448:	1884703a 	and	r2,r3,r2
  80a44c:	d0a70d05 	stb	r2,-25548(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  80a450:	e0bff817 	ldw	r2,-32(fp)
  80a454:	10800717 	ldw	r2,28(r2)
  80a458:	10000526 	beq	r2,zero,80a470 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  80a45c:	e0bff817 	ldw	r2,-32(fp)
  80a460:	10800717 	ldw	r2,28(r2)
  80a464:	100b883a 	mov	r5,r2
  80a468:	e13ff817 	ldw	r4,-32(fp)
  80a46c:	08051bc0 	call	8051bc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  80a470:	e0bff817 	ldw	r2,-32(fp)
  80a474:	10800817 	ldw	r2,32(r2)
  80a478:	10000526 	beq	r2,zero,80a490 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80a47c:	e0bff817 	ldw	r2,-32(fp)
  80a480:	10800817 	ldw	r2,32(r2)
  80a484:	100b883a 	mov	r5,r2
  80a488:	e13ff817 	ldw	r4,-32(fp)
  80a48c:	08052740 	call	805274 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  80a490:	e0bff817 	ldw	r2,-32(fp)
  80a494:	10800a17 	ldw	r2,40(r2)
  80a498:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  80a49c:	e0bffb17 	ldw	r2,-20(fp)
  80a4a0:	10000226 	beq	r2,zero,80a4ac <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  80a4a4:	e13ffb17 	ldw	r4,-20(fp)
  80a4a8:	08076e40 	call	8076e4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  80a4ac:	e0bff817 	ldw	r2,-32(fp)
  80a4b0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  80a4b4:	e0bff817 	ldw	r2,-32(fp)
  80a4b8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80a4bc:	e0bff817 	ldw	r2,-32(fp)
  80a4c0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  80a4c4:	d0a70103 	ldbu	r2,-25596(gp)
  80a4c8:	10803fcc 	andi	r2,r2,255
  80a4cc:	10803fe0 	cmpeqi	r2,r2,255
  80a4d0:	1000031e 	bne	r2,zero,80a4e0 <OSTaskDel+0x214>
        OSLockNesting++;
  80a4d4:	d0a70103 	ldbu	r2,-25596(gp)
  80a4d8:	10800044 	addi	r2,r2,1
  80a4dc:	d0a70105 	stb	r2,-25596(gp)
  80a4e0:	e0bff617 	ldw	r2,-40(fp)
  80a4e4:	e0bffd15 	stw	r2,-12(fp)
  80a4e8:	e0bffd17 	ldw	r2,-12(fp)
  80a4ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  80a4f0:	0804da40 	call	804da4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a4f4:	0005303a 	rdctl	r2,status
  80a4f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a4fc:	e0fffa17 	ldw	r3,-24(fp)
  80a500:	00bfff84 	movi	r2,-2
  80a504:	1884703a 	and	r2,r3,r2
  80a508:	1001703a 	wrctl	status,r2
  
  return context;
  80a50c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  80a510:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  80a514:	d0a70103 	ldbu	r2,-25596(gp)
  80a518:	10803fcc 	andi	r2,r2,255
  80a51c:	10000326 	beq	r2,zero,80a52c <OSTaskDel+0x260>
        OSLockNesting--;
  80a520:	d0a70103 	ldbu	r2,-25596(gp)
  80a524:	10bfffc4 	addi	r2,r2,-1
  80a528:	d0a70105 	stb	r2,-25596(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  80a52c:	e13ff817 	ldw	r4,-32(fp)
  80a530:	080d2400 	call	80d240 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  80a534:	d0a70943 	ldbu	r2,-25563(gp)
  80a538:	10bfffc4 	addi	r2,r2,-1
  80a53c:	d0a70945 	stb	r2,-25563(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  80a540:	e0ffff03 	ldbu	r3,-4(fp)
  80a544:	008020b4 	movhi	r2,130
  80a548:	10a1d204 	addi	r2,r2,-30904
  80a54c:	18c7883a 	add	r3,r3,r3
  80a550:	18c7883a 	add	r3,r3,r3
  80a554:	10c5883a 	add	r2,r2,r3
  80a558:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  80a55c:	e0bff817 	ldw	r2,-32(fp)
  80a560:	10800617 	ldw	r2,24(r2)
  80a564:	1000071e 	bne	r2,zero,80a584 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  80a568:	e0bff817 	ldw	r2,-32(fp)
  80a56c:	10800517 	ldw	r2,20(r2)
  80a570:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  80a574:	e0bff817 	ldw	r2,-32(fp)
  80a578:	10800517 	ldw	r2,20(r2)
  80a57c:	d0a70415 	stw	r2,-25584(gp)
  80a580:	00000a06 	br	80a5ac <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  80a584:	e0bff817 	ldw	r2,-32(fp)
  80a588:	10800617 	ldw	r2,24(r2)
  80a58c:	e0fff817 	ldw	r3,-32(fp)
  80a590:	18c00517 	ldw	r3,20(r3)
  80a594:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  80a598:	e0bff817 	ldw	r2,-32(fp)
  80a59c:	10800517 	ldw	r2,20(r2)
  80a5a0:	e0fff817 	ldw	r3,-32(fp)
  80a5a4:	18c00617 	ldw	r3,24(r3)
  80a5a8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  80a5ac:	d0e70817 	ldw	r3,-25568(gp)
  80a5b0:	e0bff817 	ldw	r2,-32(fp)
  80a5b4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  80a5b8:	e0bff817 	ldw	r2,-32(fp)
  80a5bc:	d0a70815 	stw	r2,-25568(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80a5c0:	e0bff817 	ldw	r2,-32(fp)
  80a5c4:	00c00fc4 	movi	r3,63
  80a5c8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80a5cc:	e0bff817 	ldw	r2,-32(fp)
  80a5d0:	10001345 	stb	zero,77(r2)
  80a5d4:	e0bff617 	ldw	r2,-40(fp)
  80a5d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a5dc:	e0bffc17 	ldw	r2,-16(fp)
  80a5e0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80a5e4:	d0a70143 	ldbu	r2,-25595(gp)
  80a5e8:	10803fcc 	andi	r2,r2,255
  80a5ec:	10800058 	cmpnei	r2,r2,1
  80a5f0:	1000011e 	bne	r2,zero,80a5f8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  80a5f4:	08058100 	call	805810 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80a5f8:	0005883a 	mov	r2,zero
}
  80a5fc:	e037883a 	mov	sp,fp
  80a600:	dfc00117 	ldw	ra,4(sp)
  80a604:	df000017 	ldw	fp,0(sp)
  80a608:	dec00204 	addi	sp,sp,8
  80a60c:	f800283a 	ret

0080a610 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  80a610:	defff504 	addi	sp,sp,-44
  80a614:	df000a15 	stw	fp,40(sp)
  80a618:	df000a04 	addi	fp,sp,40
  80a61c:	2005883a 	mov	r2,r4
  80a620:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80a624:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  80a628:	e0bfff03 	ldbu	r2,-4(fp)
  80a62c:	10800518 	cmpnei	r2,r2,20
  80a630:	1000021e 	bne	r2,zero,80a63c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  80a634:	00800f84 	movi	r2,62
  80a638:	00004506 	br	80a750 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80a63c:	e0bfff03 	ldbu	r2,-4(fp)
  80a640:	10800530 	cmpltui	r2,r2,20
  80a644:	1000051e 	bne	r2,zero,80a65c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  80a648:	e0bfff03 	ldbu	r2,-4(fp)
  80a64c:	10803fe0 	cmpeqi	r2,r2,255
  80a650:	1000021e 	bne	r2,zero,80a65c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  80a654:	00800a84 	movi	r2,42
  80a658:	00003d06 	br	80a750 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  80a65c:	e0bfff03 	ldbu	r2,-4(fp)
  80a660:	10803fd8 	cmpnei	r2,r2,255
  80a664:	1000111e 	bne	r2,zero,80a6ac <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a668:	0005303a 	rdctl	r2,status
  80a66c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a670:	e0fff917 	ldw	r3,-28(fp)
  80a674:	00bfff84 	movi	r2,-2
  80a678:	1884703a 	and	r2,r3,r2
  80a67c:	1001703a 	wrctl	status,r2
  
  return context;
  80a680:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  80a684:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  80a688:	d0a71017 	ldw	r2,-25536(gp)
  80a68c:	10800dc3 	ldbu	r2,55(r2)
  80a690:	e0bff805 	stb	r2,-32(fp)
  80a694:	e0bff617 	ldw	r2,-40(fp)
  80a698:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a69c:	e0bffe17 	ldw	r2,-8(fp)
  80a6a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  80a6a4:	e0bff803 	ldbu	r2,-32(fp)
  80a6a8:	00002906 	br	80a750 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a6ac:	0005303a 	rdctl	r2,status
  80a6b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a6b4:	e0fff717 	ldw	r3,-36(fp)
  80a6b8:	00bfff84 	movi	r2,-2
  80a6bc:	1884703a 	and	r2,r3,r2
  80a6c0:	1001703a 	wrctl	status,r2
  
  return context;
  80a6c4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80a6c8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  80a6cc:	e0ffff03 	ldbu	r3,-4(fp)
  80a6d0:	008020b4 	movhi	r2,130
  80a6d4:	10a1d204 	addi	r2,r2,-30904
  80a6d8:	18c7883a 	add	r3,r3,r3
  80a6dc:	18c7883a 	add	r3,r3,r3
  80a6e0:	10c5883a 	add	r2,r2,r3
  80a6e4:	10800017 	ldw	r2,0(r2)
  80a6e8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  80a6ec:	e0bffb17 	ldw	r2,-20(fp)
  80a6f0:	1000061e 	bne	r2,zero,80a70c <OSTaskDelReq+0xfc>
  80a6f4:	e0bff617 	ldw	r2,-40(fp)
  80a6f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a6fc:	e0bffa17 	ldw	r2,-24(fp)
  80a700:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  80a704:	008010c4 	movi	r2,67
  80a708:	00001106 	br	80a750 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  80a70c:	e0bffb17 	ldw	r2,-20(fp)
  80a710:	10800058 	cmpnei	r2,r2,1
  80a714:	1000061e 	bne	r2,zero,80a730 <OSTaskDelReq+0x120>
  80a718:	e0bff617 	ldw	r2,-40(fp)
  80a71c:	e0bffc15 	stw	r2,-16(fp)
  80a720:	e0bffc17 	ldw	r2,-16(fp)
  80a724:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  80a728:	00800f44 	movi	r2,61
  80a72c:	00000806 	br	80a750 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80a730:	e0bffb17 	ldw	r2,-20(fp)
  80a734:	00c00fc4 	movi	r3,63
  80a738:	10c00dc5 	stb	r3,55(r2)
  80a73c:	e0bff617 	ldw	r2,-40(fp)
  80a740:	e0bffd15 	stw	r2,-12(fp)
  80a744:	e0bffd17 	ldw	r2,-12(fp)
  80a748:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80a74c:	0005883a 	mov	r2,zero
}
  80a750:	e037883a 	mov	sp,fp
  80a754:	df000017 	ldw	fp,0(sp)
  80a758:	dec00104 	addi	sp,sp,4
  80a75c:	f800283a 	ret

0080a760 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80a760:	defff404 	addi	sp,sp,-48
  80a764:	dfc00b15 	stw	ra,44(sp)
  80a768:	df000a15 	stw	fp,40(sp)
  80a76c:	df000a04 	addi	fp,sp,40
  80a770:	2005883a 	mov	r2,r4
  80a774:	e17ffe15 	stw	r5,-8(fp)
  80a778:	e1bfff15 	stw	r6,-4(fp)
  80a77c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  80a780:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  80a784:	e0bfff17 	ldw	r2,-4(fp)
  80a788:	1000021e 	bne	r2,zero,80a794 <OSTaskNameGet+0x34>
        return (0);
  80a78c:	0005883a 	mov	r2,zero
  80a790:	00005406 	br	80a8e4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  80a794:	e0bffd03 	ldbu	r2,-12(fp)
  80a798:	10800570 	cmpltui	r2,r2,21
  80a79c:	1000081e 	bne	r2,zero,80a7c0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  80a7a0:	e0bffd03 	ldbu	r2,-12(fp)
  80a7a4:	10803fe0 	cmpeqi	r2,r2,255
  80a7a8:	1000051e 	bne	r2,zero,80a7c0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  80a7ac:	e0bfff17 	ldw	r2,-4(fp)
  80a7b0:	00c00a84 	movi	r3,42
  80a7b4:	10c00005 	stb	r3,0(r2)
            return (0);
  80a7b8:	0005883a 	mov	r2,zero
  80a7bc:	00004906 	br	80a8e4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  80a7c0:	e0bffe17 	ldw	r2,-8(fp)
  80a7c4:	1000051e 	bne	r2,zero,80a7dc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  80a7c8:	e0bfff17 	ldw	r2,-4(fp)
  80a7cc:	00c00304 	movi	r3,12
  80a7d0:	10c00005 	stb	r3,0(r2)
        return (0);
  80a7d4:	0005883a 	mov	r2,zero
  80a7d8:	00004206 	br	80a8e4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  80a7dc:	d0a70f03 	ldbu	r2,-25540(gp)
  80a7e0:	10803fcc 	andi	r2,r2,255
  80a7e4:	10000526 	beq	r2,zero,80a7fc <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  80a7e8:	e0bfff17 	ldw	r2,-4(fp)
  80a7ec:	00c00444 	movi	r3,17
  80a7f0:	10c00005 	stb	r3,0(r2)
        return (0);
  80a7f4:	0005883a 	mov	r2,zero
  80a7f8:	00003a06 	br	80a8e4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a7fc:	0005303a 	rdctl	r2,status
  80a800:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a804:	e0fffc17 	ldw	r3,-16(fp)
  80a808:	00bfff84 	movi	r2,-2
  80a80c:	1884703a 	and	r2,r3,r2
  80a810:	1001703a 	wrctl	status,r2
  
  return context;
  80a814:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80a818:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  80a81c:	e0bffd03 	ldbu	r2,-12(fp)
  80a820:	10803fd8 	cmpnei	r2,r2,255
  80a824:	1000031e 	bne	r2,zero,80a834 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  80a828:	d0a71017 	ldw	r2,-25536(gp)
  80a82c:	10800c83 	ldbu	r2,50(r2)
  80a830:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80a834:	e0fffd03 	ldbu	r3,-12(fp)
  80a838:	008020b4 	movhi	r2,130
  80a83c:	10a1d204 	addi	r2,r2,-30904
  80a840:	18c7883a 	add	r3,r3,r3
  80a844:	18c7883a 	add	r3,r3,r3
  80a848:	10c5883a 	add	r2,r2,r3
  80a84c:	10800017 	ldw	r2,0(r2)
  80a850:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  80a854:	e0bff817 	ldw	r2,-32(fp)
  80a858:	1000091e 	bne	r2,zero,80a880 <OSTaskNameGet+0x120>
  80a85c:	e0bff617 	ldw	r2,-40(fp)
  80a860:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a864:	e0bff717 	ldw	r2,-36(fp)
  80a868:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80a86c:	e0bfff17 	ldw	r2,-4(fp)
  80a870:	00c010c4 	movi	r3,67
  80a874:	10c00005 	stb	r3,0(r2)
        return (0);
  80a878:	0005883a 	mov	r2,zero
  80a87c:	00001906 	br	80a8e4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  80a880:	e0bff817 	ldw	r2,-32(fp)
  80a884:	10800058 	cmpnei	r2,r2,1
  80a888:	1000091e 	bne	r2,zero,80a8b0 <OSTaskNameGet+0x150>
  80a88c:	e0bff617 	ldw	r2,-40(fp)
  80a890:	e0bff915 	stw	r2,-28(fp)
  80a894:	e0bff917 	ldw	r2,-28(fp)
  80a898:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80a89c:	e0bfff17 	ldw	r2,-4(fp)
  80a8a0:	00c010c4 	movi	r3,67
  80a8a4:	10c00005 	stb	r3,0(r2)
        return (0);
  80a8a8:	0005883a 	mov	r2,zero
  80a8ac:	00000d06 	br	80a8e4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  80a8b0:	e0bff817 	ldw	r2,-32(fp)
  80a8b4:	10801304 	addi	r2,r2,76
  80a8b8:	100b883a 	mov	r5,r2
  80a8bc:	e13ffe17 	ldw	r4,-8(fp)
  80a8c0:	08059540 	call	805954 <OS_StrCopy>
  80a8c4:	e0bffb05 	stb	r2,-20(fp)
  80a8c8:	e0bff617 	ldw	r2,-40(fp)
  80a8cc:	e0bffa15 	stw	r2,-24(fp)
  80a8d0:	e0bffa17 	ldw	r2,-24(fp)
  80a8d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80a8d8:	e0bfff17 	ldw	r2,-4(fp)
  80a8dc:	10000005 	stb	zero,0(r2)
    return (len);
  80a8e0:	e0bffb03 	ldbu	r2,-20(fp)
}
  80a8e4:	e037883a 	mov	sp,fp
  80a8e8:	dfc00117 	ldw	ra,4(sp)
  80a8ec:	df000017 	ldw	fp,0(sp)
  80a8f0:	dec00204 	addi	sp,sp,8
  80a8f4:	f800283a 	ret

0080a8f8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  80a8f8:	defff304 	addi	sp,sp,-52
  80a8fc:	dfc00c15 	stw	ra,48(sp)
  80a900:	df000b15 	stw	fp,44(sp)
  80a904:	df000b04 	addi	fp,sp,44
  80a908:	2005883a 	mov	r2,r4
  80a90c:	e17ffe15 	stw	r5,-8(fp)
  80a910:	e1bfff15 	stw	r6,-4(fp)
  80a914:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80a918:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80a91c:	e0bfff17 	ldw	r2,-4(fp)
  80a920:	10005c26 	beq	r2,zero,80aa94 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  80a924:	e0bffd03 	ldbu	r2,-12(fp)
  80a928:	10800570 	cmpltui	r2,r2,21
  80a92c:	1000071e 	bne	r2,zero,80a94c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  80a930:	e0bffd03 	ldbu	r2,-12(fp)
  80a934:	10803fe0 	cmpeqi	r2,r2,255
  80a938:	1000041e 	bne	r2,zero,80a94c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  80a93c:	e0bfff17 	ldw	r2,-4(fp)
  80a940:	00c00a84 	movi	r3,42
  80a944:	10c00005 	stb	r3,0(r2)
            return;
  80a948:	00005306 	br	80aa98 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  80a94c:	e0bffe17 	ldw	r2,-8(fp)
  80a950:	1000041e 	bne	r2,zero,80a964 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  80a954:	e0bfff17 	ldw	r2,-4(fp)
  80a958:	00c00304 	movi	r3,12
  80a95c:	10c00005 	stb	r3,0(r2)
        return;
  80a960:	00004d06 	br	80aa98 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  80a964:	d0a70f03 	ldbu	r2,-25540(gp)
  80a968:	10803fcc 	andi	r2,r2,255
  80a96c:	10000426 	beq	r2,zero,80a980 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  80a970:	e0bfff17 	ldw	r2,-4(fp)
  80a974:	00c00484 	movi	r3,18
  80a978:	10c00005 	stb	r3,0(r2)
        return;
  80a97c:	00004606 	br	80aa98 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a980:	0005303a 	rdctl	r2,status
  80a984:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a988:	e0fffc17 	ldw	r3,-16(fp)
  80a98c:	00bfff84 	movi	r2,-2
  80a990:	1884703a 	and	r2,r3,r2
  80a994:	1001703a 	wrctl	status,r2
  
  return context;
  80a998:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80a99c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  80a9a0:	e0bffd03 	ldbu	r2,-12(fp)
  80a9a4:	10803fd8 	cmpnei	r2,r2,255
  80a9a8:	1000031e 	bne	r2,zero,80a9b8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  80a9ac:	d0a71017 	ldw	r2,-25536(gp)
  80a9b0:	10800c83 	ldbu	r2,50(r2)
  80a9b4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80a9b8:	e0fffd03 	ldbu	r3,-12(fp)
  80a9bc:	008020b4 	movhi	r2,130
  80a9c0:	10a1d204 	addi	r2,r2,-30904
  80a9c4:	18c7883a 	add	r3,r3,r3
  80a9c8:	18c7883a 	add	r3,r3,r3
  80a9cc:	10c5883a 	add	r2,r2,r3
  80a9d0:	10800017 	ldw	r2,0(r2)
  80a9d4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  80a9d8:	e0bff717 	ldw	r2,-36(fp)
  80a9dc:	1000081e 	bne	r2,zero,80aa00 <OSTaskNameSet+0x108>
  80a9e0:	e0bff517 	ldw	r2,-44(fp)
  80a9e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a9e8:	e0bff617 	ldw	r2,-40(fp)
  80a9ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80a9f0:	e0bfff17 	ldw	r2,-4(fp)
  80a9f4:	00c010c4 	movi	r3,67
  80a9f8:	10c00005 	stb	r3,0(r2)
        return;
  80a9fc:	00002606 	br	80aa98 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  80aa00:	e0bff717 	ldw	r2,-36(fp)
  80aa04:	10800058 	cmpnei	r2,r2,1
  80aa08:	1000081e 	bne	r2,zero,80aa2c <OSTaskNameSet+0x134>
  80aa0c:	e0bff517 	ldw	r2,-44(fp)
  80aa10:	e0bff815 	stw	r2,-32(fp)
  80aa14:	e0bff817 	ldw	r2,-32(fp)
  80aa18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80aa1c:	e0bfff17 	ldw	r2,-4(fp)
  80aa20:	00c010c4 	movi	r3,67
  80aa24:	10c00005 	stb	r3,0(r2)
        return;
  80aa28:	00001b06 	br	80aa98 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  80aa2c:	e13ffe17 	ldw	r4,-8(fp)
  80aa30:	08059c80 	call	8059c8 <OS_StrLen>
  80aa34:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  80aa38:	e0bffa03 	ldbu	r2,-24(fp)
  80aa3c:	10800830 	cmpltui	r2,r2,32
  80aa40:	1000081e 	bne	r2,zero,80aa64 <OSTaskNameSet+0x16c>
  80aa44:	e0bff517 	ldw	r2,-44(fp)
  80aa48:	e0bff915 	stw	r2,-28(fp)
  80aa4c:	e0bff917 	ldw	r2,-28(fp)
  80aa50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  80aa54:	e0bfff17 	ldw	r2,-4(fp)
  80aa58:	00c01044 	movi	r3,65
  80aa5c:	10c00005 	stb	r3,0(r2)
        return;
  80aa60:	00000d06 	br	80aa98 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  80aa64:	e0bff717 	ldw	r2,-36(fp)
  80aa68:	10801304 	addi	r2,r2,76
  80aa6c:	e17ffe17 	ldw	r5,-8(fp)
  80aa70:	1009883a 	mov	r4,r2
  80aa74:	08059540 	call	805954 <OS_StrCopy>
  80aa78:	e0bff517 	ldw	r2,-44(fp)
  80aa7c:	e0bffb15 	stw	r2,-20(fp)
  80aa80:	e0bffb17 	ldw	r2,-20(fp)
  80aa84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80aa88:	e0bfff17 	ldw	r2,-4(fp)
  80aa8c:	10000005 	stb	zero,0(r2)
  80aa90:	00000106 	br	80aa98 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  80aa94:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  80aa98:	e037883a 	mov	sp,fp
  80aa9c:	dfc00117 	ldw	ra,4(sp)
  80aaa0:	df000017 	ldw	fp,0(sp)
  80aaa4:	dec00204 	addi	sp,sp,8
  80aaa8:	f800283a 	ret

0080aaac <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  80aaac:	defff404 	addi	sp,sp,-48
  80aab0:	dfc00b15 	stw	ra,44(sp)
  80aab4:	df000a15 	stw	fp,40(sp)
  80aab8:	df000a04 	addi	fp,sp,40
  80aabc:	2005883a 	mov	r2,r4
  80aac0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  80aac4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  80aac8:	e0bfff03 	ldbu	r2,-4(fp)
  80aacc:	10800530 	cmpltui	r2,r2,20
  80aad0:	1000021e 	bne	r2,zero,80aadc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80aad4:	00800a84 	movi	r2,42
  80aad8:	00006406 	br	80ac6c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aadc:	0005303a 	rdctl	r2,status
  80aae0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aae4:	e0fffe17 	ldw	r3,-8(fp)
  80aae8:	00bfff84 	movi	r2,-2
  80aaec:	1884703a 	and	r2,r3,r2
  80aaf0:	1001703a 	wrctl	status,r2
  
  return context;
  80aaf4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80aaf8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  80aafc:	e0ffff03 	ldbu	r3,-4(fp)
  80ab00:	008020b4 	movhi	r2,130
  80ab04:	10a1d204 	addi	r2,r2,-30904
  80ab08:	18c7883a 	add	r3,r3,r3
  80ab0c:	18c7883a 	add	r3,r3,r3
  80ab10:	10c5883a 	add	r2,r2,r3
  80ab14:	10800017 	ldw	r2,0(r2)
  80ab18:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  80ab1c:	e0bff817 	ldw	r2,-32(fp)
  80ab20:	1000061e 	bne	r2,zero,80ab3c <OSTaskResume+0x90>
  80ab24:	e0bff617 	ldw	r2,-40(fp)
  80ab28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ab2c:	e0bff717 	ldw	r2,-36(fp)
  80ab30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  80ab34:	00801184 	movi	r2,70
  80ab38:	00004c06 	br	80ac6c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  80ab3c:	e0bff817 	ldw	r2,-32(fp)
  80ab40:	10800058 	cmpnei	r2,r2,1
  80ab44:	1000061e 	bne	r2,zero,80ab60 <OSTaskResume+0xb4>
  80ab48:	e0bff617 	ldw	r2,-40(fp)
  80ab4c:	e0bff915 	stw	r2,-28(fp)
  80ab50:	e0bff917 	ldw	r2,-28(fp)
  80ab54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80ab58:	008010c4 	movi	r2,67
  80ab5c:	00004306 	br	80ac6c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  80ab60:	e0bff817 	ldw	r2,-32(fp)
  80ab64:	10800c03 	ldbu	r2,48(r2)
  80ab68:	10803fcc 	andi	r2,r2,255
  80ab6c:	1080020c 	andi	r2,r2,8
  80ab70:	10003926 	beq	r2,zero,80ac58 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  80ab74:	e0bff817 	ldw	r2,-32(fp)
  80ab78:	10c00c03 	ldbu	r3,48(r2)
  80ab7c:	00bffdc4 	movi	r2,-9
  80ab80:	1884703a 	and	r2,r3,r2
  80ab84:	1007883a 	mov	r3,r2
  80ab88:	e0bff817 	ldw	r2,-32(fp)
  80ab8c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  80ab90:	e0bff817 	ldw	r2,-32(fp)
  80ab94:	10800c03 	ldbu	r2,48(r2)
  80ab98:	10803fcc 	andi	r2,r2,255
  80ab9c:	1000281e 	bne	r2,zero,80ac40 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  80aba0:	e0bff817 	ldw	r2,-32(fp)
  80aba4:	10800b8b 	ldhu	r2,46(r2)
  80aba8:	10bfffcc 	andi	r2,r2,65535
  80abac:	10001f1e 	bne	r2,zero,80ac2c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80abb0:	e0bff817 	ldw	r2,-32(fp)
  80abb4:	10c00d83 	ldbu	r3,54(r2)
  80abb8:	d0a70d03 	ldbu	r2,-25548(gp)
  80abbc:	1884b03a 	or	r2,r3,r2
  80abc0:	d0a70d05 	stb	r2,-25548(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80abc4:	e0bff817 	ldw	r2,-32(fp)
  80abc8:	10800d03 	ldbu	r2,52(r2)
  80abcc:	10c03fcc 	andi	r3,r2,255
  80abd0:	e0bff817 	ldw	r2,-32(fp)
  80abd4:	10800d03 	ldbu	r2,52(r2)
  80abd8:	11003fcc 	andi	r4,r2,255
  80abdc:	d0a70d44 	addi	r2,gp,-25547
  80abe0:	2085883a 	add	r2,r4,r2
  80abe4:	11000003 	ldbu	r4,0(r2)
  80abe8:	e0bff817 	ldw	r2,-32(fp)
  80abec:	10800d43 	ldbu	r2,53(r2)
  80abf0:	2084b03a 	or	r2,r4,r2
  80abf4:	1009883a 	mov	r4,r2
  80abf8:	d0a70d44 	addi	r2,gp,-25547
  80abfc:	1885883a 	add	r2,r3,r2
  80ac00:	11000005 	stb	r4,0(r2)
  80ac04:	e0bff617 	ldw	r2,-40(fp)
  80ac08:	e0bffa15 	stw	r2,-24(fp)
  80ac0c:	e0bffa17 	ldw	r2,-24(fp)
  80ac10:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  80ac14:	d0a70143 	ldbu	r2,-25595(gp)
  80ac18:	10803fcc 	andi	r2,r2,255
  80ac1c:	10800058 	cmpnei	r2,r2,1
  80ac20:	10000b1e 	bne	r2,zero,80ac50 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  80ac24:	08058100 	call	805810 <OS_Sched>
  80ac28:	00000906 	br	80ac50 <OSTaskResume+0x1a4>
  80ac2c:	e0bff617 	ldw	r2,-40(fp)
  80ac30:	e0bffb15 	stw	r2,-20(fp)
  80ac34:	e0bffb17 	ldw	r2,-20(fp)
  80ac38:	1001703a 	wrctl	status,r2
  80ac3c:	00000406 	br	80ac50 <OSTaskResume+0x1a4>
  80ac40:	e0bff617 	ldw	r2,-40(fp)
  80ac44:	e0bffc15 	stw	r2,-16(fp)
  80ac48:	e0bffc17 	ldw	r2,-16(fp)
  80ac4c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  80ac50:	0005883a 	mov	r2,zero
  80ac54:	00000506 	br	80ac6c <OSTaskResume+0x1c0>
  80ac58:	e0bff617 	ldw	r2,-40(fp)
  80ac5c:	e0bffd15 	stw	r2,-12(fp)
  80ac60:	e0bffd17 	ldw	r2,-12(fp)
  80ac64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  80ac68:	00801104 	movi	r2,68
}
  80ac6c:	e037883a 	mov	sp,fp
  80ac70:	dfc00117 	ldw	ra,4(sp)
  80ac74:	df000017 	ldw	fp,0(sp)
  80ac78:	dec00204 	addi	sp,sp,8
  80ac7c:	f800283a 	ret

0080ac80 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  80ac80:	defff304 	addi	sp,sp,-52
  80ac84:	df000c15 	stw	fp,48(sp)
  80ac88:	df000c04 	addi	fp,sp,48
  80ac8c:	2005883a 	mov	r2,r4
  80ac90:	e17fff15 	stw	r5,-4(fp)
  80ac94:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80ac98:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  80ac9c:	e0bffe03 	ldbu	r2,-8(fp)
  80aca0:	10800570 	cmpltui	r2,r2,21
  80aca4:	1000051e 	bne	r2,zero,80acbc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  80aca8:	e0bffe03 	ldbu	r2,-8(fp)
  80acac:	10803fe0 	cmpeqi	r2,r2,255
  80acb0:	1000021e 	bne	r2,zero,80acbc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  80acb4:	00800a84 	movi	r2,42
  80acb8:	00005d06 	br	80ae30 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  80acbc:	e0bfff17 	ldw	r2,-4(fp)
  80acc0:	1000021e 	bne	r2,zero,80accc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  80acc4:	00800244 	movi	r2,9
  80acc8:	00005906 	br	80ae30 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  80accc:	e0bfff17 	ldw	r2,-4(fp)
  80acd0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  80acd4:	e0bfff17 	ldw	r2,-4(fp)
  80acd8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80acdc:	0005303a 	rdctl	r2,status
  80ace0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ace4:	e0fffd17 	ldw	r3,-12(fp)
  80ace8:	00bfff84 	movi	r2,-2
  80acec:	1884703a 	and	r2,r3,r2
  80acf0:	1001703a 	wrctl	status,r2
  
  return context;
  80acf4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  80acf8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  80acfc:	e0bffe03 	ldbu	r2,-8(fp)
  80ad00:	10803fd8 	cmpnei	r2,r2,255
  80ad04:	1000031e 	bne	r2,zero,80ad14 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  80ad08:	d0a71017 	ldw	r2,-25536(gp)
  80ad0c:	10800c83 	ldbu	r2,50(r2)
  80ad10:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80ad14:	e0fffe03 	ldbu	r3,-8(fp)
  80ad18:	008020b4 	movhi	r2,130
  80ad1c:	10a1d204 	addi	r2,r2,-30904
  80ad20:	18c7883a 	add	r3,r3,r3
  80ad24:	18c7883a 	add	r3,r3,r3
  80ad28:	10c5883a 	add	r2,r2,r3
  80ad2c:	10800017 	ldw	r2,0(r2)
  80ad30:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  80ad34:	e0bff817 	ldw	r2,-32(fp)
  80ad38:	1000061e 	bne	r2,zero,80ad54 <OSTaskStkChk+0xd4>
  80ad3c:	e0bff617 	ldw	r2,-40(fp)
  80ad40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ad44:	e0bff717 	ldw	r2,-36(fp)
  80ad48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80ad4c:	008010c4 	movi	r2,67
  80ad50:	00003706 	br	80ae30 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80ad54:	e0bff817 	ldw	r2,-32(fp)
  80ad58:	10800058 	cmpnei	r2,r2,1
  80ad5c:	1000061e 	bne	r2,zero,80ad78 <OSTaskStkChk+0xf8>
  80ad60:	e0bff617 	ldw	r2,-40(fp)
  80ad64:	e0bff915 	stw	r2,-28(fp)
  80ad68:	e0bff917 	ldw	r2,-28(fp)
  80ad6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80ad70:	008010c4 	movi	r2,67
  80ad74:	00002e06 	br	80ae30 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  80ad78:	e0bff817 	ldw	r2,-32(fp)
  80ad7c:	1080040b 	ldhu	r2,16(r2)
  80ad80:	10bfffcc 	andi	r2,r2,65535
  80ad84:	1080004c 	andi	r2,r2,1
  80ad88:	1000061e 	bne	r2,zero,80ada4 <OSTaskStkChk+0x124>
  80ad8c:	e0bff617 	ldw	r2,-40(fp)
  80ad90:	e0bffa15 	stw	r2,-24(fp)
  80ad94:	e0bffa17 	ldw	r2,-24(fp)
  80ad98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  80ad9c:	00801144 	movi	r2,69
  80ada0:	00002306 	br	80ae30 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  80ada4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  80ada8:	e0bff817 	ldw	r2,-32(fp)
  80adac:	10800317 	ldw	r2,12(r2)
  80adb0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  80adb4:	e0bff817 	ldw	r2,-32(fp)
  80adb8:	10800217 	ldw	r2,8(r2)
  80adbc:	e0bff415 	stw	r2,-48(fp)
  80adc0:	e0bff617 	ldw	r2,-40(fp)
  80adc4:	e0bffb15 	stw	r2,-20(fp)
  80adc8:	e0bffb17 	ldw	r2,-20(fp)
  80adcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80add0:	00000306 	br	80ade0 <OSTaskStkChk+0x160>
        nfree++;
  80add4:	e0bff517 	ldw	r2,-44(fp)
  80add8:	10800044 	addi	r2,r2,1
  80addc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  80ade0:	e0bff417 	ldw	r2,-48(fp)
  80ade4:	10c00104 	addi	r3,r2,4
  80ade8:	e0fff415 	stw	r3,-48(fp)
  80adec:	10800017 	ldw	r2,0(r2)
  80adf0:	103ff826 	beq	r2,zero,80add4 <__alt_data_end+0xff80add4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  80adf4:	e0bff517 	ldw	r2,-44(fp)
  80adf8:	1085883a 	add	r2,r2,r2
  80adfc:	1085883a 	add	r2,r2,r2
  80ae00:	1007883a 	mov	r3,r2
  80ae04:	e0bfff17 	ldw	r2,-4(fp)
  80ae08:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  80ae0c:	e0fffc17 	ldw	r3,-16(fp)
  80ae10:	e0bff517 	ldw	r2,-44(fp)
  80ae14:	1885c83a 	sub	r2,r3,r2
  80ae18:	1085883a 	add	r2,r2,r2
  80ae1c:	1085883a 	add	r2,r2,r2
  80ae20:	1007883a 	mov	r3,r2
  80ae24:	e0bfff17 	ldw	r2,-4(fp)
  80ae28:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  80ae2c:	0005883a 	mov	r2,zero
}
  80ae30:	e037883a 	mov	sp,fp
  80ae34:	df000017 	ldw	fp,0(sp)
  80ae38:	dec00104 	addi	sp,sp,4
  80ae3c:	f800283a 	ret

0080ae40 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  80ae40:	defff504 	addi	sp,sp,-44
  80ae44:	dfc00a15 	stw	ra,40(sp)
  80ae48:	df000915 	stw	fp,36(sp)
  80ae4c:	df000904 	addi	fp,sp,36
  80ae50:	2005883a 	mov	r2,r4
  80ae54:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ae58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  80ae5c:	e0bfff03 	ldbu	r2,-4(fp)
  80ae60:	10800518 	cmpnei	r2,r2,20
  80ae64:	1000021e 	bne	r2,zero,80ae70 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  80ae68:	008011c4 	movi	r2,71
  80ae6c:	00006806 	br	80b010 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  80ae70:	e0bfff03 	ldbu	r2,-4(fp)
  80ae74:	10800530 	cmpltui	r2,r2,20
  80ae78:	1000051e 	bne	r2,zero,80ae90 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  80ae7c:	e0bfff03 	ldbu	r2,-4(fp)
  80ae80:	10803fe0 	cmpeqi	r2,r2,255
  80ae84:	1000021e 	bne	r2,zero,80ae90 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  80ae88:	00800a84 	movi	r2,42
  80ae8c:	00006006 	br	80b010 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ae90:	0005303a 	rdctl	r2,status
  80ae94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ae98:	e0fffe17 	ldw	r3,-8(fp)
  80ae9c:	00bfff84 	movi	r2,-2
  80aea0:	1884703a 	and	r2,r3,r2
  80aea4:	1001703a 	wrctl	status,r2
  
  return context;
  80aea8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  80aeac:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  80aeb0:	e0bfff03 	ldbu	r2,-4(fp)
  80aeb4:	10803fd8 	cmpnei	r2,r2,255
  80aeb8:	1000061e 	bne	r2,zero,80aed4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  80aebc:	d0a71017 	ldw	r2,-25536(gp)
  80aec0:	10800c83 	ldbu	r2,50(r2)
  80aec4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  80aec8:	00800044 	movi	r2,1
  80aecc:	e0bff705 	stb	r2,-36(fp)
  80aed0:	00000906 	br	80aef8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  80aed4:	d0a71017 	ldw	r2,-25536(gp)
  80aed8:	10800c83 	ldbu	r2,50(r2)
  80aedc:	10c03fcc 	andi	r3,r2,255
  80aee0:	e0bfff03 	ldbu	r2,-4(fp)
  80aee4:	1880031e 	bne	r3,r2,80aef4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  80aee8:	00800044 	movi	r2,1
  80aeec:	e0bff705 	stb	r2,-36(fp)
  80aef0:	00000106 	br	80aef8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  80aef4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80aef8:	e0ffff03 	ldbu	r3,-4(fp)
  80aefc:	008020b4 	movhi	r2,130
  80af00:	10a1d204 	addi	r2,r2,-30904
  80af04:	18c7883a 	add	r3,r3,r3
  80af08:	18c7883a 	add	r3,r3,r3
  80af0c:	10c5883a 	add	r2,r2,r3
  80af10:	10800017 	ldw	r2,0(r2)
  80af14:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  80af18:	e0bffa17 	ldw	r2,-24(fp)
  80af1c:	1000061e 	bne	r2,zero,80af38 <OSTaskSuspend+0xf8>
  80af20:	e0bff817 	ldw	r2,-32(fp)
  80af24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80af28:	e0bff917 	ldw	r2,-28(fp)
  80af2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  80af30:	00801204 	movi	r2,72
  80af34:	00003606 	br	80b010 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  80af38:	e0bffa17 	ldw	r2,-24(fp)
  80af3c:	10800058 	cmpnei	r2,r2,1
  80af40:	1000061e 	bne	r2,zero,80af5c <OSTaskSuspend+0x11c>
  80af44:	e0bff817 	ldw	r2,-32(fp)
  80af48:	e0bffb15 	stw	r2,-20(fp)
  80af4c:	e0bffb17 	ldw	r2,-20(fp)
  80af50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80af54:	008010c4 	movi	r2,67
  80af58:	00002d06 	br	80b010 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  80af5c:	e0bffa17 	ldw	r2,-24(fp)
  80af60:	10800d03 	ldbu	r2,52(r2)
  80af64:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  80af68:	e0fffd03 	ldbu	r3,-12(fp)
  80af6c:	e13ffd03 	ldbu	r4,-12(fp)
  80af70:	d0a70d44 	addi	r2,gp,-25547
  80af74:	2085883a 	add	r2,r4,r2
  80af78:	10800003 	ldbu	r2,0(r2)
  80af7c:	1009883a 	mov	r4,r2
  80af80:	e0bffa17 	ldw	r2,-24(fp)
  80af84:	10800d43 	ldbu	r2,53(r2)
  80af88:	0084303a 	nor	r2,zero,r2
  80af8c:	2084703a 	and	r2,r4,r2
  80af90:	1009883a 	mov	r4,r2
  80af94:	d0a70d44 	addi	r2,gp,-25547
  80af98:	1885883a 	add	r2,r3,r2
  80af9c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  80afa0:	e0fffd03 	ldbu	r3,-12(fp)
  80afa4:	d0a70d44 	addi	r2,gp,-25547
  80afa8:	1885883a 	add	r2,r3,r2
  80afac:	10800003 	ldbu	r2,0(r2)
  80afb0:	10803fcc 	andi	r2,r2,255
  80afb4:	1000071e 	bne	r2,zero,80afd4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  80afb8:	e0bffa17 	ldw	r2,-24(fp)
  80afbc:	10800d83 	ldbu	r2,54(r2)
  80afc0:	0084303a 	nor	r2,zero,r2
  80afc4:	1007883a 	mov	r3,r2
  80afc8:	d0a70d03 	ldbu	r2,-25548(gp)
  80afcc:	1884703a 	and	r2,r3,r2
  80afd0:	d0a70d05 	stb	r2,-25548(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  80afd4:	e0bffa17 	ldw	r2,-24(fp)
  80afd8:	10800c03 	ldbu	r2,48(r2)
  80afdc:	10800214 	ori	r2,r2,8
  80afe0:	1007883a 	mov	r3,r2
  80afe4:	e0bffa17 	ldw	r2,-24(fp)
  80afe8:	10c00c05 	stb	r3,48(r2)
  80afec:	e0bff817 	ldw	r2,-32(fp)
  80aff0:	e0bffc15 	stw	r2,-16(fp)
  80aff4:	e0bffc17 	ldw	r2,-16(fp)
  80aff8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  80affc:	e0bff703 	ldbu	r2,-36(fp)
  80b000:	10800058 	cmpnei	r2,r2,1
  80b004:	1000011e 	bne	r2,zero,80b00c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  80b008:	08058100 	call	805810 <OS_Sched>
    }
    return (OS_ERR_NONE);
  80b00c:	0005883a 	mov	r2,zero
}
  80b010:	e037883a 	mov	sp,fp
  80b014:	dfc00117 	ldw	ra,4(sp)
  80b018:	df000017 	ldw	fp,0(sp)
  80b01c:	dec00204 	addi	sp,sp,8
  80b020:	f800283a 	ret

0080b024 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  80b024:	defff604 	addi	sp,sp,-40
  80b028:	dfc00915 	stw	ra,36(sp)
  80b02c:	df000815 	stw	fp,32(sp)
  80b030:	df000804 	addi	fp,sp,32
  80b034:	2005883a 	mov	r2,r4
  80b038:	e17fff15 	stw	r5,-4(fp)
  80b03c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b040:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  80b044:	e0bffe03 	ldbu	r2,-8(fp)
  80b048:	10800570 	cmpltui	r2,r2,21
  80b04c:	1000051e 	bne	r2,zero,80b064 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  80b050:	e0bffe03 	ldbu	r2,-8(fp)
  80b054:	10803fe0 	cmpeqi	r2,r2,255
  80b058:	1000021e 	bne	r2,zero,80b064 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  80b05c:	00800a84 	movi	r2,42
  80b060:	00003406 	br	80b134 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  80b064:	e0bfff17 	ldw	r2,-4(fp)
  80b068:	1000021e 	bne	r2,zero,80b074 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  80b06c:	00800244 	movi	r2,9
  80b070:	00003006 	br	80b134 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b074:	0005303a 	rdctl	r2,status
  80b078:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b07c:	e0fffd17 	ldw	r3,-12(fp)
  80b080:	00bfff84 	movi	r2,-2
  80b084:	1884703a 	and	r2,r3,r2
  80b088:	1001703a 	wrctl	status,r2
  
  return context;
  80b08c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80b090:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  80b094:	e0bffe03 	ldbu	r2,-8(fp)
  80b098:	10803fd8 	cmpnei	r2,r2,255
  80b09c:	1000031e 	bne	r2,zero,80b0ac <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  80b0a0:	d0a71017 	ldw	r2,-25536(gp)
  80b0a4:	10800c83 	ldbu	r2,50(r2)
  80b0a8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  80b0ac:	e0fffe03 	ldbu	r3,-8(fp)
  80b0b0:	008020b4 	movhi	r2,130
  80b0b4:	10a1d204 	addi	r2,r2,-30904
  80b0b8:	18c7883a 	add	r3,r3,r3
  80b0bc:	18c7883a 	add	r3,r3,r3
  80b0c0:	10c5883a 	add	r2,r2,r3
  80b0c4:	10800017 	ldw	r2,0(r2)
  80b0c8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  80b0cc:	e0bffa17 	ldw	r2,-24(fp)
  80b0d0:	1000061e 	bne	r2,zero,80b0ec <OSTaskQuery+0xc8>
  80b0d4:	e0bff817 	ldw	r2,-32(fp)
  80b0d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b0dc:	e0bff917 	ldw	r2,-28(fp)
  80b0e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  80b0e4:	00800a44 	movi	r2,41
  80b0e8:	00001206 	br	80b134 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  80b0ec:	e0bffa17 	ldw	r2,-24(fp)
  80b0f0:	10800058 	cmpnei	r2,r2,1
  80b0f4:	1000061e 	bne	r2,zero,80b110 <OSTaskQuery+0xec>
  80b0f8:	e0bff817 	ldw	r2,-32(fp)
  80b0fc:	e0bffb15 	stw	r2,-20(fp)
  80b100:	e0bffb17 	ldw	r2,-20(fp)
  80b104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  80b108:	008010c4 	movi	r2,67
  80b10c:	00000906 	br	80b134 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  80b110:	01801b04 	movi	r6,108
  80b114:	e17ffa17 	ldw	r5,-24(fp)
  80b118:	e13fff17 	ldw	r4,-4(fp)
  80b11c:	08057a80 	call	8057a8 <OS_MemCopy>
  80b120:	e0bff817 	ldw	r2,-32(fp)
  80b124:	e0bffc15 	stw	r2,-16(fp)
  80b128:	e0bffc17 	ldw	r2,-16(fp)
  80b12c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80b130:	0005883a 	mov	r2,zero
}
  80b134:	e037883a 	mov	sp,fp
  80b138:	dfc00117 	ldw	ra,4(sp)
  80b13c:	df000017 	ldw	fp,0(sp)
  80b140:	dec00204 	addi	sp,sp,8
  80b144:	f800283a 	ret

0080b148 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  80b148:	defffc04 	addi	sp,sp,-16
  80b14c:	df000315 	stw	fp,12(sp)
  80b150:	df000304 	addi	fp,sp,12
  80b154:	e13ffd15 	stw	r4,-12(fp)
  80b158:	e17ffe15 	stw	r5,-8(fp)
  80b15c:	3005883a 	mov	r2,r6
  80b160:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  80b164:	e0bfff0b 	ldhu	r2,-4(fp)
  80b168:	1080004c 	andi	r2,r2,1
  80b16c:	10000d26 	beq	r2,zero,80b1a4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  80b170:	e0bfff0b 	ldhu	r2,-4(fp)
  80b174:	1080008c 	andi	r2,r2,2
  80b178:	10000a26 	beq	r2,zero,80b1a4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80b17c:	00000706 	br	80b19c <OS_TaskStkClr+0x54>
                size--;
  80b180:	e0bffe17 	ldw	r2,-8(fp)
  80b184:	10bfffc4 	addi	r2,r2,-1
  80b188:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  80b18c:	e0bffd17 	ldw	r2,-12(fp)
  80b190:	10c00104 	addi	r3,r2,4
  80b194:	e0fffd15 	stw	r3,-12(fp)
  80b198:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  80b19c:	e0bffe17 	ldw	r2,-8(fp)
  80b1a0:	103ff71e 	bne	r2,zero,80b180 <__alt_data_end+0xff80b180>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  80b1a4:	0001883a 	nop
  80b1a8:	e037883a 	mov	sp,fp
  80b1ac:	df000017 	ldw	fp,0(sp)
  80b1b0:	dec00104 	addi	sp,sp,4
  80b1b4:	f800283a 	ret

0080b1b8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  80b1b8:	defff904 	addi	sp,sp,-28
  80b1bc:	dfc00615 	stw	ra,24(sp)
  80b1c0:	df000515 	stw	fp,20(sp)
  80b1c4:	df000504 	addi	fp,sp,20
  80b1c8:	2005883a 	mov	r2,r4
  80b1cc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b1d0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80b1d4:	d0a70f03 	ldbu	r2,-25540(gp)
  80b1d8:	10803fcc 	andi	r2,r2,255
  80b1dc:	1000311e 	bne	r2,zero,80b2a4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  80b1e0:	e0bfff0b 	ldhu	r2,-4(fp)
  80b1e4:	10003026 	beq	r2,zero,80b2a8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b1e8:	0005303a 	rdctl	r2,status
  80b1ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b1f0:	e0fffe17 	ldw	r3,-8(fp)
  80b1f4:	00bfff84 	movi	r2,-2
  80b1f8:	1884703a 	and	r2,r3,r2
  80b1fc:	1001703a 	wrctl	status,r2
  
  return context;
  80b200:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b204:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  80b208:	d0a71017 	ldw	r2,-25536(gp)
  80b20c:	10800d03 	ldbu	r2,52(r2)
  80b210:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80b214:	e0fffd03 	ldbu	r3,-12(fp)
  80b218:	e13ffd03 	ldbu	r4,-12(fp)
  80b21c:	d0a70d44 	addi	r2,gp,-25547
  80b220:	2085883a 	add	r2,r4,r2
  80b224:	10800003 	ldbu	r2,0(r2)
  80b228:	1009883a 	mov	r4,r2
  80b22c:	d0a71017 	ldw	r2,-25536(gp)
  80b230:	10800d43 	ldbu	r2,53(r2)
  80b234:	0084303a 	nor	r2,zero,r2
  80b238:	2084703a 	and	r2,r4,r2
  80b23c:	1009883a 	mov	r4,r2
  80b240:	d0a70d44 	addi	r2,gp,-25547
  80b244:	1885883a 	add	r2,r3,r2
  80b248:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  80b24c:	e0fffd03 	ldbu	r3,-12(fp)
  80b250:	d0a70d44 	addi	r2,gp,-25547
  80b254:	1885883a 	add	r2,r3,r2
  80b258:	10800003 	ldbu	r2,0(r2)
  80b25c:	10803fcc 	andi	r2,r2,255
  80b260:	1000071e 	bne	r2,zero,80b280 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80b264:	d0a71017 	ldw	r2,-25536(gp)
  80b268:	10800d83 	ldbu	r2,54(r2)
  80b26c:	0084303a 	nor	r2,zero,r2
  80b270:	1007883a 	mov	r3,r2
  80b274:	d0a70d03 	ldbu	r2,-25548(gp)
  80b278:	1884703a 	and	r2,r3,r2
  80b27c:	d0a70d05 	stb	r2,-25548(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  80b280:	d0a71017 	ldw	r2,-25536(gp)
  80b284:	e0ffff0b 	ldhu	r3,-4(fp)
  80b288:	10c00b8d 	sth	r3,46(r2)
  80b28c:	e0bffb17 	ldw	r2,-20(fp)
  80b290:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b294:	e0bffc17 	ldw	r2,-16(fp)
  80b298:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  80b29c:	08058100 	call	805810 <OS_Sched>
  80b2a0:	00000106 	br	80b2a8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  80b2a4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  80b2a8:	e037883a 	mov	sp,fp
  80b2ac:	dfc00117 	ldw	ra,4(sp)
  80b2b0:	df000017 	ldw	fp,0(sp)
  80b2b4:	dec00204 	addi	sp,sp,8
  80b2b8:	f800283a 	ret

0080b2bc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  80b2bc:	defff704 	addi	sp,sp,-36
  80b2c0:	dfc00815 	stw	ra,32(sp)
  80b2c4:	df000715 	stw	fp,28(sp)
  80b2c8:	dc000615 	stw	r16,24(sp)
  80b2cc:	df000704 	addi	fp,sp,28
  80b2d0:	2011883a 	mov	r8,r4
  80b2d4:	2809883a 	mov	r4,r5
  80b2d8:	3007883a 	mov	r3,r6
  80b2dc:	3805883a 	mov	r2,r7
  80b2e0:	e23ffb05 	stb	r8,-20(fp)
  80b2e4:	e13ffc05 	stb	r4,-16(fp)
  80b2e8:	e0fffd05 	stb	r3,-12(fp)
  80b2ec:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80b2f0:	d0a70f03 	ldbu	r2,-25540(gp)
  80b2f4:	10803fcc 	andi	r2,r2,255
  80b2f8:	10000226 	beq	r2,zero,80b304 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  80b2fc:	00801544 	movi	r2,85
  80b300:	00004706 	br	80b420 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  80b304:	e0bffb03 	ldbu	r2,-20(fp)
  80b308:	1000081e 	bne	r2,zero,80b32c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  80b30c:	e0bffc03 	ldbu	r2,-16(fp)
  80b310:	1000061e 	bne	r2,zero,80b32c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  80b314:	e0bffd03 	ldbu	r2,-12(fp)
  80b318:	1000041e 	bne	r2,zero,80b32c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  80b31c:	e0bffe0b 	ldhu	r2,-8(fp)
  80b320:	1000021e 	bne	r2,zero,80b32c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  80b324:	00801504 	movi	r2,84
  80b328:	00003d06 	br	80b420 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  80b32c:	e0bffc03 	ldbu	r2,-16(fp)
  80b330:	10800f30 	cmpltui	r2,r2,60
  80b334:	1000021e 	bne	r2,zero,80b340 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  80b338:	00801444 	movi	r2,81
  80b33c:	00003806 	br	80b420 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  80b340:	e0bffd03 	ldbu	r2,-12(fp)
  80b344:	10800f30 	cmpltui	r2,r2,60
  80b348:	1000021e 	bne	r2,zero,80b354 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  80b34c:	00801484 	movi	r2,82
  80b350:	00003306 	br	80b420 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  80b354:	e0bffe0b 	ldhu	r2,-8(fp)
  80b358:	1080fa30 	cmpltui	r2,r2,1000
  80b35c:	1000021e 	bne	r2,zero,80b368 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  80b360:	008014c4 	movi	r2,83
  80b364:	00002e06 	br	80b420 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80b368:	e0bffb03 	ldbu	r2,-20(fp)
  80b36c:	01438404 	movi	r5,3600
  80b370:	1009883a 	mov	r4,r2
  80b374:	080320c0 	call	80320c <__mulsi3>
  80b378:	1021883a 	mov	r16,r2
  80b37c:	e0bffc03 	ldbu	r2,-16(fp)
  80b380:	01400f04 	movi	r5,60
  80b384:	1009883a 	mov	r4,r2
  80b388:	080320c0 	call	80320c <__mulsi3>
  80b38c:	8087883a 	add	r3,r16,r2
  80b390:	e0bffd03 	ldbu	r2,-12(fp)
  80b394:	1885883a 	add	r2,r3,r2
  80b398:	0140fa04 	movi	r5,1000
  80b39c:	1009883a 	mov	r4,r2
  80b3a0:	080320c0 	call	80320c <__mulsi3>
  80b3a4:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  80b3a8:	e0bffe0b 	ldhu	r2,-8(fp)
  80b3ac:	0140fa04 	movi	r5,1000
  80b3b0:	1009883a 	mov	r4,r2
  80b3b4:	080320c0 	call	80320c <__mulsi3>
  80b3b8:	0140fa04 	movi	r5,1000
  80b3bc:	1009883a 	mov	r4,r2
  80b3c0:	08031500 	call	803150 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  80b3c4:	8085883a 	add	r2,r16,r2
  80b3c8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  80b3cc:	e0bffa17 	ldw	r2,-24(fp)
  80b3d0:	1004d43a 	srli	r2,r2,16
  80b3d4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  80b3d8:	e0bffa17 	ldw	r2,-24(fp)
  80b3dc:	10bfffcc 	andi	r2,r2,65535
  80b3e0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  80b3e4:	e0bffa17 	ldw	r2,-24(fp)
  80b3e8:	10bfffcc 	andi	r2,r2,65535
  80b3ec:	1009883a 	mov	r4,r2
  80b3f0:	080b1b80 	call	80b1b8 <OSTimeDly>
    while (loops > 0) {
  80b3f4:	00000706 	br	80b414 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  80b3f8:	01200014 	movui	r4,32768
  80b3fc:	080b1b80 	call	80b1b8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  80b400:	01200014 	movui	r4,32768
  80b404:	080b1b80 	call	80b1b8 <OSTimeDly>
        loops--;
  80b408:	e0bff90b 	ldhu	r2,-28(fp)
  80b40c:	10bfffc4 	addi	r2,r2,-1
  80b410:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  80b414:	e0bff90b 	ldhu	r2,-28(fp)
  80b418:	103ff71e 	bne	r2,zero,80b3f8 <__alt_data_end+0xff80b3f8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  80b41c:	0005883a 	mov	r2,zero
}
  80b420:	e6ffff04 	addi	sp,fp,-4
  80b424:	dfc00217 	ldw	ra,8(sp)
  80b428:	df000117 	ldw	fp,4(sp)
  80b42c:	dc000017 	ldw	r16,0(sp)
  80b430:	dec00304 	addi	sp,sp,12
  80b434:	f800283a 	ret

0080b438 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  80b438:	defff504 	addi	sp,sp,-44
  80b43c:	dfc00a15 	stw	ra,40(sp)
  80b440:	df000915 	stw	fp,36(sp)
  80b444:	df000904 	addi	fp,sp,36
  80b448:	2005883a 	mov	r2,r4
  80b44c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80b450:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  80b454:	e0bfff03 	ldbu	r2,-4(fp)
  80b458:	10800530 	cmpltui	r2,r2,20
  80b45c:	1000021e 	bne	r2,zero,80b468 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  80b460:	00800a84 	movi	r2,42
  80b464:	00006406 	br	80b5f8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b468:	0005303a 	rdctl	r2,status
  80b46c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b470:	e0fffe17 	ldw	r3,-8(fp)
  80b474:	00bfff84 	movi	r2,-2
  80b478:	1884703a 	and	r2,r3,r2
  80b47c:	1001703a 	wrctl	status,r2
  
  return context;
  80b480:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  80b484:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  80b488:	e0ffff03 	ldbu	r3,-4(fp)
  80b48c:	008020b4 	movhi	r2,130
  80b490:	10a1d204 	addi	r2,r2,-30904
  80b494:	18c7883a 	add	r3,r3,r3
  80b498:	18c7883a 	add	r3,r3,r3
  80b49c:	10c5883a 	add	r2,r2,r3
  80b4a0:	10800017 	ldw	r2,0(r2)
  80b4a4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  80b4a8:	e0bff917 	ldw	r2,-28(fp)
  80b4ac:	1000061e 	bne	r2,zero,80b4c8 <OSTimeDlyResume+0x90>
  80b4b0:	e0bff717 	ldw	r2,-36(fp)
  80b4b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4b8:	e0bff817 	ldw	r2,-32(fp)
  80b4bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80b4c0:	008010c4 	movi	r2,67
  80b4c4:	00004c06 	br	80b5f8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  80b4c8:	e0bff917 	ldw	r2,-28(fp)
  80b4cc:	10800058 	cmpnei	r2,r2,1
  80b4d0:	1000061e 	bne	r2,zero,80b4ec <OSTimeDlyResume+0xb4>
  80b4d4:	e0bff717 	ldw	r2,-36(fp)
  80b4d8:	e0bffa15 	stw	r2,-24(fp)
  80b4dc:	e0bffa17 	ldw	r2,-24(fp)
  80b4e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80b4e4:	008010c4 	movi	r2,67
  80b4e8:	00004306 	br	80b5f8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  80b4ec:	e0bff917 	ldw	r2,-28(fp)
  80b4f0:	10800b8b 	ldhu	r2,46(r2)
  80b4f4:	10bfffcc 	andi	r2,r2,65535
  80b4f8:	1000061e 	bne	r2,zero,80b514 <OSTimeDlyResume+0xdc>
  80b4fc:	e0bff717 	ldw	r2,-36(fp)
  80b500:	e0bffb15 	stw	r2,-20(fp)
  80b504:	e0bffb17 	ldw	r2,-20(fp)
  80b508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  80b50c:	00801404 	movi	r2,80
  80b510:	00003906 	br	80b5f8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  80b514:	e0bff917 	ldw	r2,-28(fp)
  80b518:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80b51c:	e0bff917 	ldw	r2,-28(fp)
  80b520:	10800c03 	ldbu	r2,48(r2)
  80b524:	10803fcc 	andi	r2,r2,255
  80b528:	10800dcc 	andi	r2,r2,55
  80b52c:	10000b26 	beq	r2,zero,80b55c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  80b530:	e0bff917 	ldw	r2,-28(fp)
  80b534:	10c00c03 	ldbu	r3,48(r2)
  80b538:	00bff204 	movi	r2,-56
  80b53c:	1884703a 	and	r2,r3,r2
  80b540:	1007883a 	mov	r3,r2
  80b544:	e0bff917 	ldw	r2,-28(fp)
  80b548:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  80b54c:	e0bff917 	ldw	r2,-28(fp)
  80b550:	00c00044 	movi	r3,1
  80b554:	10c00c45 	stb	r3,49(r2)
  80b558:	00000206 	br	80b564 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  80b55c:	e0bff917 	ldw	r2,-28(fp)
  80b560:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  80b564:	e0bff917 	ldw	r2,-28(fp)
  80b568:	10800c03 	ldbu	r2,48(r2)
  80b56c:	10803fcc 	andi	r2,r2,255
  80b570:	1080020c 	andi	r2,r2,8
  80b574:	10001b1e 	bne	r2,zero,80b5e4 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  80b578:	e0bff917 	ldw	r2,-28(fp)
  80b57c:	10c00d83 	ldbu	r3,54(r2)
  80b580:	d0a70d03 	ldbu	r2,-25548(gp)
  80b584:	1884b03a 	or	r2,r3,r2
  80b588:	d0a70d05 	stb	r2,-25548(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80b58c:	e0bff917 	ldw	r2,-28(fp)
  80b590:	10800d03 	ldbu	r2,52(r2)
  80b594:	10c03fcc 	andi	r3,r2,255
  80b598:	e0bff917 	ldw	r2,-28(fp)
  80b59c:	10800d03 	ldbu	r2,52(r2)
  80b5a0:	11003fcc 	andi	r4,r2,255
  80b5a4:	d0a70d44 	addi	r2,gp,-25547
  80b5a8:	2085883a 	add	r2,r4,r2
  80b5ac:	11000003 	ldbu	r4,0(r2)
  80b5b0:	e0bff917 	ldw	r2,-28(fp)
  80b5b4:	10800d43 	ldbu	r2,53(r2)
  80b5b8:	2084b03a 	or	r2,r4,r2
  80b5bc:	1009883a 	mov	r4,r2
  80b5c0:	d0a70d44 	addi	r2,gp,-25547
  80b5c4:	1885883a 	add	r2,r3,r2
  80b5c8:	11000005 	stb	r4,0(r2)
  80b5cc:	e0bff717 	ldw	r2,-36(fp)
  80b5d0:	e0bffc15 	stw	r2,-16(fp)
  80b5d4:	e0bffc17 	ldw	r2,-16(fp)
  80b5d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  80b5dc:	08058100 	call	805810 <OS_Sched>
  80b5e0:	00000406 	br	80b5f4 <OSTimeDlyResume+0x1bc>
  80b5e4:	e0bff717 	ldw	r2,-36(fp)
  80b5e8:	e0bffd15 	stw	r2,-12(fp)
  80b5ec:	e0bffd17 	ldw	r2,-12(fp)
  80b5f0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  80b5f4:	0005883a 	mov	r2,zero
}
  80b5f8:	e037883a 	mov	sp,fp
  80b5fc:	dfc00117 	ldw	ra,4(sp)
  80b600:	df000017 	ldw	fp,0(sp)
  80b604:	dec00204 	addi	sp,sp,8
  80b608:	f800283a 	ret

0080b60c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  80b60c:	defffb04 	addi	sp,sp,-20
  80b610:	df000415 	stw	fp,16(sp)
  80b614:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b618:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b61c:	0005303a 	rdctl	r2,status
  80b620:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b624:	e0fffe17 	ldw	r3,-8(fp)
  80b628:	00bfff84 	movi	r2,-2
  80b62c:	1884703a 	and	r2,r3,r2
  80b630:	1001703a 	wrctl	status,r2
  
  return context;
  80b634:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80b638:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  80b63c:	d0a71117 	ldw	r2,-25532(gp)
  80b640:	e0bffd15 	stw	r2,-12(fp)
  80b644:	e0bffc17 	ldw	r2,-16(fp)
  80b648:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b64c:	e0bfff17 	ldw	r2,-4(fp)
  80b650:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  80b654:	e0bffd17 	ldw	r2,-12(fp)
}
  80b658:	e037883a 	mov	sp,fp
  80b65c:	df000017 	ldw	fp,0(sp)
  80b660:	dec00104 	addi	sp,sp,4
  80b664:	f800283a 	ret

0080b668 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  80b668:	defffb04 	addi	sp,sp,-20
  80b66c:	df000415 	stw	fp,16(sp)
  80b670:	df000404 	addi	fp,sp,16
  80b674:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b678:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b67c:	0005303a 	rdctl	r2,status
  80b680:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b684:	e0fffd17 	ldw	r3,-12(fp)
  80b688:	00bfff84 	movi	r2,-2
  80b68c:	1884703a 	and	r2,r3,r2
  80b690:	1001703a 	wrctl	status,r2
  
  return context;
  80b694:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80b698:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  80b69c:	e0bfff17 	ldw	r2,-4(fp)
  80b6a0:	d0a71115 	stw	r2,-25532(gp)
  80b6a4:	e0bffc17 	ldw	r2,-16(fp)
  80b6a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b6ac:	e0bffe17 	ldw	r2,-8(fp)
  80b6b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80b6b4:	0001883a 	nop
  80b6b8:	e037883a 	mov	sp,fp
  80b6bc:	df000017 	ldw	fp,0(sp)
  80b6c0:	dec00104 	addi	sp,sp,4
  80b6c4:	f800283a 	ret

0080b6c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b6c8:	defffd04 	addi	sp,sp,-12
  80b6cc:	dfc00215 	stw	ra,8(sp)
  80b6d0:	df000115 	stw	fp,4(sp)
  80b6d4:	df000104 	addi	fp,sp,4
  80b6d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b6dc:	d1600604 	addi	r5,gp,-32744
  80b6e0:	e13fff17 	ldw	r4,-4(fp)
  80b6e4:	080c7400 	call	80c740 <alt_dev_llist_insert>
}
  80b6e8:	e037883a 	mov	sp,fp
  80b6ec:	dfc00117 	ldw	ra,4(sp)
  80b6f0:	df000017 	ldw	fp,0(sp)
  80b6f4:	dec00204 	addi	sp,sp,8
  80b6f8:	f800283a 	ret

0080b6fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b6fc:	defffd04 	addi	sp,sp,-12
  80b700:	dfc00215 	stw	ra,8(sp)
  80b704:	df000115 	stw	fp,4(sp)
  80b708:	df000104 	addi	fp,sp,4
  80b70c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80b710:	080cfcc0 	call	80cfcc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b714:	00800044 	movi	r2,1
  80b718:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b71c:	0001883a 	nop
  80b720:	e037883a 	mov	sp,fp
  80b724:	dfc00117 	ldw	ra,4(sp)
  80b728:	df000017 	ldw	fp,0(sp)
  80b72c:	dec00204 	addi	sp,sp,8
  80b730:	f800283a 	ret

0080b734 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b734:	defffe04 	addi	sp,sp,-8
  80b738:	dfc00115 	stw	ra,4(sp)
  80b73c:	df000015 	stw	fp,0(sp)
  80b740:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  80b744:	01c0fa04 	movi	r7,1000
  80b748:	01800144 	movi	r6,5
  80b74c:	000b883a 	mov	r5,zero
  80b750:	01004034 	movhi	r4,256
  80b754:	21042004 	addi	r4,r4,4224
  80b758:	080c5440 	call	80c544 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80b75c:	01800044 	movi	r6,1
  80b760:	000b883a 	mov	r5,zero
  80b764:	01002074 	movhi	r4,129
  80b768:	213a1f04 	addi	r4,r4,-6020
  80b76c:	080b9080 	call	80b908 <altera_avalon_jtag_uart_init>
  80b770:	01002074 	movhi	r4,129
  80b774:	213a1504 	addi	r4,r4,-6060
  80b778:	080b6c80 	call	80b6c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  80b77c:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
  80b780:	01002074 	movhi	r4,129
  80b784:	213e3004 	addi	r4,r4,-1856
  80b788:	080b6c80 	call	80b6c8 <alt_dev_reg>
}
  80b78c:	0001883a 	nop
  80b790:	e037883a 	mov	sp,fp
  80b794:	dfc00117 	ldw	ra,4(sp)
  80b798:	df000017 	ldw	fp,0(sp)
  80b79c:	dec00204 	addi	sp,sp,8
  80b7a0:	f800283a 	ret

0080b7a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80b7a4:	defffa04 	addi	sp,sp,-24
  80b7a8:	dfc00515 	stw	ra,20(sp)
  80b7ac:	df000415 	stw	fp,16(sp)
  80b7b0:	df000404 	addi	fp,sp,16
  80b7b4:	e13ffd15 	stw	r4,-12(fp)
  80b7b8:	e17ffe15 	stw	r5,-8(fp)
  80b7bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b7c0:	e0bffd17 	ldw	r2,-12(fp)
  80b7c4:	10800017 	ldw	r2,0(r2)
  80b7c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b7cc:	e0bffc17 	ldw	r2,-16(fp)
  80b7d0:	10c00a04 	addi	r3,r2,40
  80b7d4:	e0bffd17 	ldw	r2,-12(fp)
  80b7d8:	10800217 	ldw	r2,8(r2)
  80b7dc:	100f883a 	mov	r7,r2
  80b7e0:	e1bfff17 	ldw	r6,-4(fp)
  80b7e4:	e17ffe17 	ldw	r5,-8(fp)
  80b7e8:	1809883a 	mov	r4,r3
  80b7ec:	080bf480 	call	80bf48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80b7f0:	e037883a 	mov	sp,fp
  80b7f4:	dfc00117 	ldw	ra,4(sp)
  80b7f8:	df000017 	ldw	fp,0(sp)
  80b7fc:	dec00204 	addi	sp,sp,8
  80b800:	f800283a 	ret

0080b804 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b804:	defffa04 	addi	sp,sp,-24
  80b808:	dfc00515 	stw	ra,20(sp)
  80b80c:	df000415 	stw	fp,16(sp)
  80b810:	df000404 	addi	fp,sp,16
  80b814:	e13ffd15 	stw	r4,-12(fp)
  80b818:	e17ffe15 	stw	r5,-8(fp)
  80b81c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b820:	e0bffd17 	ldw	r2,-12(fp)
  80b824:	10800017 	ldw	r2,0(r2)
  80b828:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b82c:	e0bffc17 	ldw	r2,-16(fp)
  80b830:	10c00a04 	addi	r3,r2,40
  80b834:	e0bffd17 	ldw	r2,-12(fp)
  80b838:	10800217 	ldw	r2,8(r2)
  80b83c:	100f883a 	mov	r7,r2
  80b840:	e1bfff17 	ldw	r6,-4(fp)
  80b844:	e17ffe17 	ldw	r5,-8(fp)
  80b848:	1809883a 	mov	r4,r3
  80b84c:	080c2040 	call	80c204 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80b850:	e037883a 	mov	sp,fp
  80b854:	dfc00117 	ldw	ra,4(sp)
  80b858:	df000017 	ldw	fp,0(sp)
  80b85c:	dec00204 	addi	sp,sp,8
  80b860:	f800283a 	ret

0080b864 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80b864:	defffc04 	addi	sp,sp,-16
  80b868:	dfc00315 	stw	ra,12(sp)
  80b86c:	df000215 	stw	fp,8(sp)
  80b870:	df000204 	addi	fp,sp,8
  80b874:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b878:	e0bfff17 	ldw	r2,-4(fp)
  80b87c:	10800017 	ldw	r2,0(r2)
  80b880:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b884:	e0bffe17 	ldw	r2,-8(fp)
  80b888:	10c00a04 	addi	r3,r2,40
  80b88c:	e0bfff17 	ldw	r2,-4(fp)
  80b890:	10800217 	ldw	r2,8(r2)
  80b894:	100b883a 	mov	r5,r2
  80b898:	1809883a 	mov	r4,r3
  80b89c:	080bdf00 	call	80bdf0 <altera_avalon_jtag_uart_close>
}
  80b8a0:	e037883a 	mov	sp,fp
  80b8a4:	dfc00117 	ldw	ra,4(sp)
  80b8a8:	df000017 	ldw	fp,0(sp)
  80b8ac:	dec00204 	addi	sp,sp,8
  80b8b0:	f800283a 	ret

0080b8b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80b8b4:	defffa04 	addi	sp,sp,-24
  80b8b8:	dfc00515 	stw	ra,20(sp)
  80b8bc:	df000415 	stw	fp,16(sp)
  80b8c0:	df000404 	addi	fp,sp,16
  80b8c4:	e13ffd15 	stw	r4,-12(fp)
  80b8c8:	e17ffe15 	stw	r5,-8(fp)
  80b8cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80b8d0:	e0bffd17 	ldw	r2,-12(fp)
  80b8d4:	10800017 	ldw	r2,0(r2)
  80b8d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80b8dc:	e0bffc17 	ldw	r2,-16(fp)
  80b8e0:	10800a04 	addi	r2,r2,40
  80b8e4:	e1bfff17 	ldw	r6,-4(fp)
  80b8e8:	e17ffe17 	ldw	r5,-8(fp)
  80b8ec:	1009883a 	mov	r4,r2
  80b8f0:	080be580 	call	80be58 <altera_avalon_jtag_uart_ioctl>
}
  80b8f4:	e037883a 	mov	sp,fp
  80b8f8:	dfc00117 	ldw	ra,4(sp)
  80b8fc:	df000017 	ldw	fp,0(sp)
  80b900:	dec00204 	addi	sp,sp,8
  80b904:	f800283a 	ret

0080b908 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b908:	defff204 	addi	sp,sp,-56
  80b90c:	dfc00d15 	stw	ra,52(sp)
  80b910:	df000c15 	stw	fp,48(sp)
  80b914:	df000c04 	addi	fp,sp,48
  80b918:	e13ff915 	stw	r4,-28(fp)
  80b91c:	e17ffa15 	stw	r5,-24(fp)
  80b920:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  80b924:	e0bff917 	ldw	r2,-28(fp)
  80b928:	10800c04 	addi	r2,r2,48
  80b92c:	e0bff415 	stw	r2,-48(fp)
  80b930:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  80b934:	e0bff80b 	ldhu	r2,-32(fp)
  80b938:	e0fff884 	addi	r3,fp,-30
  80b93c:	180b883a 	mov	r5,r3
  80b940:	1009883a 	mov	r4,r2
  80b944:	080637c0 	call	80637c <OSFlagCreate>
  80b948:	1007883a 	mov	r3,r2
  80b94c:	e0bff417 	ldw	r2,-48(fp)
  80b950:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  80b954:	e0bff917 	ldw	r2,-28(fp)
  80b958:	10800a04 	addi	r2,r2,40
  80b95c:	e0bff515 	stw	r2,-44(fp)
  80b960:	00800044 	movi	r2,1
  80b964:	e0bff78d 	sth	r2,-34(fp)
  80b968:	e0bff78b 	ldhu	r2,-34(fp)
  80b96c:	1009883a 	mov	r4,r2
  80b970:	080909c0 	call	80909c <OSSemCreate>
  80b974:	1007883a 	mov	r3,r2
  80b978:	e0bff517 	ldw	r2,-44(fp)
  80b97c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  80b980:	e0bff917 	ldw	r2,-28(fp)
  80b984:	10800b04 	addi	r2,r2,44
  80b988:	e0bff615 	stw	r2,-40(fp)
  80b98c:	00800044 	movi	r2,1
  80b990:	e0bff70d 	sth	r2,-36(fp)
  80b994:	e0bff70b 	ldhu	r2,-36(fp)
  80b998:	1009883a 	mov	r4,r2
  80b99c:	080909c0 	call	80909c <OSSemCreate>
  80b9a0:	1007883a 	mov	r3,r2
  80b9a4:	e0bff617 	ldw	r2,-40(fp)
  80b9a8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b9ac:	e0bff917 	ldw	r2,-28(fp)
  80b9b0:	00c00044 	movi	r3,1
  80b9b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b9b8:	e0bff917 	ldw	r2,-28(fp)
  80b9bc:	10800017 	ldw	r2,0(r2)
  80b9c0:	10800104 	addi	r2,r2,4
  80b9c4:	1007883a 	mov	r3,r2
  80b9c8:	e0bff917 	ldw	r2,-28(fp)
  80b9cc:	10800817 	ldw	r2,32(r2)
  80b9d0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80b9d4:	e0bffb17 	ldw	r2,-20(fp)
  80b9d8:	01802074 	movhi	r6,129
  80b9dc:	31ae9104 	addi	r6,r6,-17852
  80b9e0:	e17ff917 	ldw	r5,-28(fp)
  80b9e4:	1009883a 	mov	r4,r2
  80b9e8:	080ca240 	call	80ca24 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80b9ec:	e0bff917 	ldw	r2,-28(fp)
  80b9f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b9f4:	e0bff917 	ldw	r2,-28(fp)
  80b9f8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b9fc:	d0e71617 	ldw	r3,-25512(gp)
  80ba00:	e1fff917 	ldw	r7,-28(fp)
  80ba04:	01802074 	movhi	r6,129
  80ba08:	31af3b04 	addi	r6,r6,-17172
  80ba0c:	180b883a 	mov	r5,r3
  80ba10:	1009883a 	mov	r4,r2
  80ba14:	080c5b80 	call	80c5b8 <alt_alarm_start>
  80ba18:	1000040e 	bge	r2,zero,80ba2c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80ba1c:	e0fff917 	ldw	r3,-28(fp)
  80ba20:	00a00034 	movhi	r2,32768
  80ba24:	10bfffc4 	addi	r2,r2,-1
  80ba28:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80ba2c:	0001883a 	nop
  80ba30:	e037883a 	mov	sp,fp
  80ba34:	dfc00117 	ldw	ra,4(sp)
  80ba38:	df000017 	ldw	fp,0(sp)
  80ba3c:	dec00204 	addi	sp,sp,8
  80ba40:	f800283a 	ret

0080ba44 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ba44:	defff104 	addi	sp,sp,-60
  80ba48:	dfc00e15 	stw	ra,56(sp)
  80ba4c:	df000d15 	stw	fp,52(sp)
  80ba50:	df000d04 	addi	fp,sp,52
  80ba54:	e13ffe15 	stw	r4,-8(fp)
  80ba58:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ba5c:	e0bffe17 	ldw	r2,-8(fp)
  80ba60:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
  80ba64:	e0bff517 	ldw	r2,-44(fp)
  80ba68:	10800017 	ldw	r2,0(r2)
  80ba6c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ba70:	e0bff617 	ldw	r2,-40(fp)
  80ba74:	10800104 	addi	r2,r2,4
  80ba78:	10800037 	ldwio	r2,0(r2)
  80ba7c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ba80:	e0bff717 	ldw	r2,-36(fp)
  80ba84:	1080c00c 	andi	r2,r2,768
  80ba88:	10009126 	beq	r2,zero,80bcd0 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ba8c:	e0bff717 	ldw	r2,-36(fp)
  80ba90:	1080400c 	andi	r2,r2,256
  80ba94:	10004726 	beq	r2,zero,80bbb4 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ba98:	00800074 	movhi	r2,1
  80ba9c:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80baa0:	e0bff517 	ldw	r2,-44(fp)
  80baa4:	10800d17 	ldw	r2,52(r2)
  80baa8:	10800044 	addi	r2,r2,1
  80baac:	1081ffcc 	andi	r2,r2,2047
  80bab0:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  80bab4:	e0bff517 	ldw	r2,-44(fp)
  80bab8:	10c00e17 	ldw	r3,56(r2)
  80babc:	e0bff817 	ldw	r2,-32(fp)
  80bac0:	18802726 	beq	r3,r2,80bb60 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80bac4:	e0bff617 	ldw	r2,-40(fp)
  80bac8:	10800037 	ldwio	r2,0(r2)
  80bacc:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80bad0:	e0bff317 	ldw	r2,-52(fp)
  80bad4:	10a0000c 	andi	r2,r2,32768
  80bad8:	10002326 	beq	r2,zero,80bb68 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80badc:	e0bff517 	ldw	r2,-44(fp)
  80bae0:	10800d17 	ldw	r2,52(r2)
  80bae4:	e0fff317 	ldw	r3,-52(fp)
  80bae8:	1809883a 	mov	r4,r3
  80baec:	e0fff517 	ldw	r3,-44(fp)
  80baf0:	1885883a 	add	r2,r3,r2
  80baf4:	10801104 	addi	r2,r2,68
  80baf8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bafc:	e0bff517 	ldw	r2,-44(fp)
  80bb00:	10800d17 	ldw	r2,52(r2)
  80bb04:	10800044 	addi	r2,r2,1
  80bb08:	10c1ffcc 	andi	r3,r2,2047
  80bb0c:	e0bff517 	ldw	r2,-44(fp)
  80bb10:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  80bb14:	e0bff517 	ldw	r2,-44(fp)
  80bb18:	10800c17 	ldw	r2,48(r2)
  80bb1c:	e0bffa15 	stw	r2,-24(fp)
  80bb20:	00800044 	movi	r2,1
  80bb24:	e0bffb0d 	sth	r2,-20(fp)
  80bb28:	00800044 	movi	r2,1
  80bb2c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80bb30:	d0a70143 	ldbu	r2,-25595(gp)
  80bb34:	10803fcc 	andi	r2,r2,255
  80bb38:	103fd926 	beq	r2,zero,80baa0 <__alt_data_end+0xff80baa0>
  {
    OSFlagPost (group, flags, opt, &err);
  80bb3c:	e0bffb0b 	ldhu	r2,-20(fp)
  80bb40:	e0fffb83 	ldbu	r3,-18(fp)
  80bb44:	e13ffcc4 	addi	r4,fp,-13
  80bb48:	200f883a 	mov	r7,r4
  80bb4c:	180d883a 	mov	r6,r3
  80bb50:	100b883a 	mov	r5,r2
  80bb54:	e13ffa17 	ldw	r4,-24(fp)
  80bb58:	0806f580 	call	806f58 <OSFlagPost>
      }
  80bb5c:	003fd006 	br	80baa0 <__alt_data_end+0xff80baa0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80bb60:	0001883a 	nop
  80bb64:	00000106 	br	80bb6c <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80bb68:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80bb6c:	e0bff317 	ldw	r2,-52(fp)
  80bb70:	10bfffec 	andhi	r2,r2,65535
  80bb74:	10000f26 	beq	r2,zero,80bbb4 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80bb78:	e0bff517 	ldw	r2,-44(fp)
  80bb7c:	10c00817 	ldw	r3,32(r2)
  80bb80:	00bfff84 	movi	r2,-2
  80bb84:	1886703a 	and	r3,r3,r2
  80bb88:	e0bff517 	ldw	r2,-44(fp)
  80bb8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80bb90:	e0bff617 	ldw	r2,-40(fp)
  80bb94:	10800104 	addi	r2,r2,4
  80bb98:	1007883a 	mov	r3,r2
  80bb9c:	e0bff517 	ldw	r2,-44(fp)
  80bba0:	10800817 	ldw	r2,32(r2)
  80bba4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bba8:	e0bff617 	ldw	r2,-40(fp)
  80bbac:	10800104 	addi	r2,r2,4
  80bbb0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80bbb4:	e0bff717 	ldw	r2,-36(fp)
  80bbb8:	1080800c 	andi	r2,r2,512
  80bbbc:	103fac26 	beq	r2,zero,80ba70 <__alt_data_end+0xff80ba70>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80bbc0:	e0bff717 	ldw	r2,-36(fp)
  80bbc4:	1004d43a 	srli	r2,r2,16
  80bbc8:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80bbcc:	00002606 	br	80bc68 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80bbd0:	e0bff617 	ldw	r2,-40(fp)
  80bbd4:	e0fff517 	ldw	r3,-44(fp)
  80bbd8:	18c01017 	ldw	r3,64(r3)
  80bbdc:	e13ff517 	ldw	r4,-44(fp)
  80bbe0:	20c7883a 	add	r3,r4,r3
  80bbe4:	18c21104 	addi	r3,r3,2116
  80bbe8:	18c00003 	ldbu	r3,0(r3)
  80bbec:	18c03fcc 	andi	r3,r3,255
  80bbf0:	18c0201c 	xori	r3,r3,128
  80bbf4:	18ffe004 	addi	r3,r3,-128
  80bbf8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bbfc:	e0bff517 	ldw	r2,-44(fp)
  80bc00:	10801017 	ldw	r2,64(r2)
  80bc04:	10800044 	addi	r2,r2,1
  80bc08:	10c1ffcc 	andi	r3,r2,2047
  80bc0c:	e0bff517 	ldw	r2,-44(fp)
  80bc10:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  80bc14:	e0bff517 	ldw	r2,-44(fp)
  80bc18:	10800c17 	ldw	r2,48(r2)
  80bc1c:	e0bff915 	stw	r2,-28(fp)
  80bc20:	00800084 	movi	r2,2
  80bc24:	e0bffc0d 	sth	r2,-16(fp)
  80bc28:	00800044 	movi	r2,1
  80bc2c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80bc30:	d0a70143 	ldbu	r2,-25595(gp)
  80bc34:	10803fcc 	andi	r2,r2,255
  80bc38:	10000826 	beq	r2,zero,80bc5c <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
  80bc3c:	e0bffc0b 	ldhu	r2,-16(fp)
  80bc40:	e0fffc83 	ldbu	r3,-14(fp)
  80bc44:	e13ffd04 	addi	r4,fp,-12
  80bc48:	200f883a 	mov	r7,r4
  80bc4c:	180d883a 	mov	r6,r3
  80bc50:	100b883a 	mov	r5,r2
  80bc54:	e13ff917 	ldw	r4,-28(fp)
  80bc58:	0806f580 	call	806f58 <OSFlagPost>

        space--;
  80bc5c:	e0bff417 	ldw	r2,-48(fp)
  80bc60:	10bfffc4 	addi	r2,r2,-1
  80bc64:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80bc68:	e0bff417 	ldw	r2,-48(fp)
  80bc6c:	10000526 	beq	r2,zero,80bc84 <altera_avalon_jtag_uart_irq+0x240>
  80bc70:	e0bff517 	ldw	r2,-44(fp)
  80bc74:	10c01017 	ldw	r3,64(r2)
  80bc78:	e0bff517 	ldw	r2,-44(fp)
  80bc7c:	10800f17 	ldw	r2,60(r2)
  80bc80:	18bfd31e 	bne	r3,r2,80bbd0 <__alt_data_end+0xff80bbd0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80bc84:	e0bff417 	ldw	r2,-48(fp)
  80bc88:	103f7926 	beq	r2,zero,80ba70 <__alt_data_end+0xff80ba70>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bc8c:	e0bff517 	ldw	r2,-44(fp)
  80bc90:	10c00817 	ldw	r3,32(r2)
  80bc94:	00bfff44 	movi	r2,-3
  80bc98:	1886703a 	and	r3,r3,r2
  80bc9c:	e0bff517 	ldw	r2,-44(fp)
  80bca0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bca4:	e0bff517 	ldw	r2,-44(fp)
  80bca8:	10800017 	ldw	r2,0(r2)
  80bcac:	10800104 	addi	r2,r2,4
  80bcb0:	1007883a 	mov	r3,r2
  80bcb4:	e0bff517 	ldw	r2,-44(fp)
  80bcb8:	10800817 	ldw	r2,32(r2)
  80bcbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bcc0:	e0bff617 	ldw	r2,-40(fp)
  80bcc4:	10800104 	addi	r2,r2,4
  80bcc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80bccc:	003f6806 	br	80ba70 <__alt_data_end+0xff80ba70>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80bcd0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80bcd4:	0001883a 	nop
  80bcd8:	e037883a 	mov	sp,fp
  80bcdc:	dfc00117 	ldw	ra,4(sp)
  80bce0:	df000017 	ldw	fp,0(sp)
  80bce4:	dec00204 	addi	sp,sp,8
  80bce8:	f800283a 	ret

0080bcec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80bcec:	defff904 	addi	sp,sp,-28
  80bcf0:	dfc00615 	stw	ra,24(sp)
  80bcf4:	df000515 	stw	fp,20(sp)
  80bcf8:	df000504 	addi	fp,sp,20
  80bcfc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80bd00:	e0bfff17 	ldw	r2,-4(fp)
  80bd04:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80bd08:	e0bffb17 	ldw	r2,-20(fp)
  80bd0c:	10800017 	ldw	r2,0(r2)
  80bd10:	10800104 	addi	r2,r2,4
  80bd14:	10800037 	ldwio	r2,0(r2)
  80bd18:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80bd1c:	e0bffc17 	ldw	r2,-16(fp)
  80bd20:	1081000c 	andi	r2,r2,1024
  80bd24:	10000b26 	beq	r2,zero,80bd54 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80bd28:	e0bffb17 	ldw	r2,-20(fp)
  80bd2c:	10800017 	ldw	r2,0(r2)
  80bd30:	10800104 	addi	r2,r2,4
  80bd34:	1007883a 	mov	r3,r2
  80bd38:	e0bffb17 	ldw	r2,-20(fp)
  80bd3c:	10800817 	ldw	r2,32(r2)
  80bd40:	10810014 	ori	r2,r2,1024
  80bd44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80bd48:	e0bffb17 	ldw	r2,-20(fp)
  80bd4c:	10000915 	stw	zero,36(r2)
  80bd50:	00002106 	br	80bdd8 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80bd54:	e0bffb17 	ldw	r2,-20(fp)
  80bd58:	10c00917 	ldw	r3,36(r2)
  80bd5c:	00a00034 	movhi	r2,32768
  80bd60:	10bfff04 	addi	r2,r2,-4
  80bd64:	10c01c36 	bltu	r2,r3,80bdd8 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  80bd68:	e0bffb17 	ldw	r2,-20(fp)
  80bd6c:	10800917 	ldw	r2,36(r2)
  80bd70:	10c00044 	addi	r3,r2,1
  80bd74:	e0bffb17 	ldw	r2,-20(fp)
  80bd78:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  80bd7c:	e0bffb17 	ldw	r2,-20(fp)
  80bd80:	10c00917 	ldw	r3,36(r2)
  80bd84:	e0bffb17 	ldw	r2,-20(fp)
  80bd88:	10800117 	ldw	r2,4(r2)
  80bd8c:	18801236 	bltu	r3,r2,80bdd8 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  80bd90:	e0bffb17 	ldw	r2,-20(fp)
  80bd94:	10800c17 	ldw	r2,48(r2)
  80bd98:	e0bffd15 	stw	r2,-12(fp)
  80bd9c:	00800104 	movi	r2,4
  80bda0:	e0bffe0d 	sth	r2,-8(fp)
  80bda4:	00800044 	movi	r2,1
  80bda8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  80bdac:	d0a70143 	ldbu	r2,-25595(gp)
  80bdb0:	10803fcc 	andi	r2,r2,255
  80bdb4:	10000826 	beq	r2,zero,80bdd8 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  80bdb8:	e0bffe0b 	ldhu	r2,-8(fp)
  80bdbc:	e0fffe83 	ldbu	r3,-6(fp)
  80bdc0:	e13ffec4 	addi	r4,fp,-5
  80bdc4:	200f883a 	mov	r7,r4
  80bdc8:	180d883a 	mov	r6,r3
  80bdcc:	100b883a 	mov	r5,r2
  80bdd0:	e13ffd17 	ldw	r4,-12(fp)
  80bdd4:	0806f580 	call	806f58 <OSFlagPost>
  80bdd8:	d0a71617 	ldw	r2,-25512(gp)
    }
  }

  return alt_ticks_per_second();
}
  80bddc:	e037883a 	mov	sp,fp
  80bde0:	dfc00117 	ldw	ra,4(sp)
  80bde4:	df000017 	ldw	fp,0(sp)
  80bde8:	dec00204 	addi	sp,sp,8
  80bdec:	f800283a 	ret

0080bdf0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80bdf0:	defffd04 	addi	sp,sp,-12
  80bdf4:	df000215 	stw	fp,8(sp)
  80bdf8:	df000204 	addi	fp,sp,8
  80bdfc:	e13ffe15 	stw	r4,-8(fp)
  80be00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80be04:	00000506 	br	80be1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80be08:	e0bfff17 	ldw	r2,-4(fp)
  80be0c:	1090000c 	andi	r2,r2,16384
  80be10:	10000226 	beq	r2,zero,80be1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80be14:	00bffd44 	movi	r2,-11
  80be18:	00000b06 	br	80be48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80be1c:	e0bffe17 	ldw	r2,-8(fp)
  80be20:	10c01017 	ldw	r3,64(r2)
  80be24:	e0bffe17 	ldw	r2,-8(fp)
  80be28:	10800f17 	ldw	r2,60(r2)
  80be2c:	18800526 	beq	r3,r2,80be44 <altera_avalon_jtag_uart_close+0x54>
  80be30:	e0bffe17 	ldw	r2,-8(fp)
  80be34:	10c00917 	ldw	r3,36(r2)
  80be38:	e0bffe17 	ldw	r2,-8(fp)
  80be3c:	10800117 	ldw	r2,4(r2)
  80be40:	18bff136 	bltu	r3,r2,80be08 <__alt_data_end+0xff80be08>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80be44:	0005883a 	mov	r2,zero
}
  80be48:	e037883a 	mov	sp,fp
  80be4c:	df000017 	ldw	fp,0(sp)
  80be50:	dec00104 	addi	sp,sp,4
  80be54:	f800283a 	ret

0080be58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80be58:	defffa04 	addi	sp,sp,-24
  80be5c:	df000515 	stw	fp,20(sp)
  80be60:	df000504 	addi	fp,sp,20
  80be64:	e13ffd15 	stw	r4,-12(fp)
  80be68:	e17ffe15 	stw	r5,-8(fp)
  80be6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80be70:	00bff9c4 	movi	r2,-25
  80be74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80be78:	e0bffe17 	ldw	r2,-8(fp)
  80be7c:	10da8060 	cmpeqi	r3,r2,27137
  80be80:	1800031e 	bne	r3,zero,80be90 <altera_avalon_jtag_uart_ioctl+0x38>
  80be84:	109a80a0 	cmpeqi	r2,r2,27138
  80be88:	1000181e 	bne	r2,zero,80beec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80be8c:	00002906 	br	80bf34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80be90:	e0bffd17 	ldw	r2,-12(fp)
  80be94:	10c00117 	ldw	r3,4(r2)
  80be98:	00a00034 	movhi	r2,32768
  80be9c:	10bfffc4 	addi	r2,r2,-1
  80bea0:	18802126 	beq	r3,r2,80bf28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80bea4:	e0bfff17 	ldw	r2,-4(fp)
  80bea8:	10800017 	ldw	r2,0(r2)
  80beac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80beb0:	e0bffc17 	ldw	r2,-16(fp)
  80beb4:	10800090 	cmplti	r2,r2,2
  80beb8:	1000061e 	bne	r2,zero,80bed4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80bebc:	e0fffc17 	ldw	r3,-16(fp)
  80bec0:	00a00034 	movhi	r2,32768
  80bec4:	10bfffc4 	addi	r2,r2,-1
  80bec8:	18800226 	beq	r3,r2,80bed4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80becc:	e0bffc17 	ldw	r2,-16(fp)
  80bed0:	00000206 	br	80bedc <altera_avalon_jtag_uart_ioctl+0x84>
  80bed4:	00a00034 	movhi	r2,32768
  80bed8:	10bfff84 	addi	r2,r2,-2
  80bedc:	e0fffd17 	ldw	r3,-12(fp)
  80bee0:	18800115 	stw	r2,4(r3)
      rc = 0;
  80bee4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80bee8:	00000f06 	br	80bf28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80beec:	e0bffd17 	ldw	r2,-12(fp)
  80bef0:	10c00117 	ldw	r3,4(r2)
  80bef4:	00a00034 	movhi	r2,32768
  80bef8:	10bfffc4 	addi	r2,r2,-1
  80befc:	18800c26 	beq	r3,r2,80bf30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80bf00:	e0bffd17 	ldw	r2,-12(fp)
  80bf04:	10c00917 	ldw	r3,36(r2)
  80bf08:	e0bffd17 	ldw	r2,-12(fp)
  80bf0c:	10800117 	ldw	r2,4(r2)
  80bf10:	1885803a 	cmpltu	r2,r3,r2
  80bf14:	10c03fcc 	andi	r3,r2,255
  80bf18:	e0bfff17 	ldw	r2,-4(fp)
  80bf1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80bf20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80bf24:	00000206 	br	80bf30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80bf28:	0001883a 	nop
  80bf2c:	00000106 	br	80bf34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80bf30:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80bf34:	e0bffb17 	ldw	r2,-20(fp)
}
  80bf38:	e037883a 	mov	sp,fp
  80bf3c:	df000017 	ldw	fp,0(sp)
  80bf40:	dec00104 	addi	sp,sp,4
  80bf44:	f800283a 	ret

0080bf48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80bf48:	deffed04 	addi	sp,sp,-76
  80bf4c:	dfc01215 	stw	ra,72(sp)
  80bf50:	df001115 	stw	fp,68(sp)
  80bf54:	df001104 	addi	fp,sp,68
  80bf58:	e13ffc15 	stw	r4,-16(fp)
  80bf5c:	e17ffd15 	stw	r5,-12(fp)
  80bf60:	e1bffe15 	stw	r6,-8(fp)
  80bf64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80bf68:	e0bffd17 	ldw	r2,-12(fp)
  80bf6c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  80bf70:	e0bffc17 	ldw	r2,-16(fp)
  80bf74:	10800a17 	ldw	r2,40(r2)
  80bf78:	e0bff815 	stw	r2,-32(fp)
  80bf7c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  80bf80:	e0bff90b 	ldhu	r2,-28(fp)
  80bf84:	e0fffb04 	addi	r3,fp,-20
  80bf88:	180d883a 	mov	r6,r3
  80bf8c:	100b883a 	mov	r5,r2
  80bf90:	e13ff817 	ldw	r4,-32(fp)
  80bf94:	08093b40 	call	8093b4 <OSSemPend>

  while (space > 0)
  80bf98:	00006106 	br	80c120 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80bf9c:	e0bffc17 	ldw	r2,-16(fp)
  80bfa0:	10800d17 	ldw	r2,52(r2)
  80bfa4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
  80bfa8:	e0bffc17 	ldw	r2,-16(fp)
  80bfac:	10800e17 	ldw	r2,56(r2)
  80bfb0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
  80bfb4:	e0fff317 	ldw	r3,-52(fp)
  80bfb8:	e0bff417 	ldw	r2,-48(fp)
  80bfbc:	18800536 	bltu	r3,r2,80bfd4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  80bfc0:	e0fff317 	ldw	r3,-52(fp)
  80bfc4:	e0bff417 	ldw	r2,-48(fp)
  80bfc8:	1885c83a 	sub	r2,r3,r2
  80bfcc:	e0bff115 	stw	r2,-60(fp)
  80bfd0:	00000406 	br	80bfe4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80bfd4:	00c20004 	movi	r3,2048
  80bfd8:	e0bff417 	ldw	r2,-48(fp)
  80bfdc:	1885c83a 	sub	r2,r3,r2
  80bfe0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  80bfe4:	e0bff117 	ldw	r2,-60(fp)
  80bfe8:	10001e26 	beq	r2,zero,80c064 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  80bfec:	e0fffe17 	ldw	r3,-8(fp)
  80bff0:	e0bff117 	ldw	r2,-60(fp)
  80bff4:	1880022e 	bgeu	r3,r2,80c000 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  80bff8:	e0bffe17 	ldw	r2,-8(fp)
  80bffc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c000:	e0bffc17 	ldw	r2,-16(fp)
  80c004:	10c01104 	addi	r3,r2,68
  80c008:	e0bff417 	ldw	r2,-48(fp)
  80c00c:	1885883a 	add	r2,r3,r2
  80c010:	e1bff117 	ldw	r6,-60(fp)
  80c014:	100b883a 	mov	r5,r2
  80c018:	e13ff017 	ldw	r4,-64(fp)
  80c01c:	08018840 	call	801884 <memcpy>
      ptr   += n;
  80c020:	e0fff017 	ldw	r3,-64(fp)
  80c024:	e0bff117 	ldw	r2,-60(fp)
  80c028:	1885883a 	add	r2,r3,r2
  80c02c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
  80c030:	e0fffe17 	ldw	r3,-8(fp)
  80c034:	e0bff117 	ldw	r2,-60(fp)
  80c038:	1885c83a 	sub	r2,r3,r2
  80c03c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c040:	e0fff417 	ldw	r3,-48(fp)
  80c044:	e0bff117 	ldw	r2,-60(fp)
  80c048:	1885883a 	add	r2,r3,r2
  80c04c:	10c1ffcc 	andi	r3,r2,2047
  80c050:	e0bffc17 	ldw	r2,-16(fp)
  80c054:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  80c058:	e0bffe17 	ldw	r2,-8(fp)
  80c05c:	00bfcf16 	blt	zero,r2,80bf9c <__alt_data_end+0xff80bf9c>
  80c060:	00000106 	br	80c068 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80c064:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80c068:	e0fff017 	ldw	r3,-64(fp)
  80c06c:	e0bffd17 	ldw	r2,-12(fp)
  80c070:	18802e1e 	bne	r3,r2,80c12c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c074:	e0bfff17 	ldw	r2,-4(fp)
  80c078:	1090000c 	andi	r2,r2,16384
  80c07c:	10002d1e 	bne	r2,zero,80c134 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  80c080:	d0a70143 	ldbu	r2,-25595(gp)
  80c084:	10803fcc 	andi	r2,r2,255
  80c088:	10800058 	cmpnei	r2,r2,1
  80c08c:	1000161e 	bne	r2,zero,80c0e8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  80c090:	e0bffc17 	ldw	r2,-16(fp)
  80c094:	10800c17 	ldw	r2,48(r2)
  80c098:	e0bff215 	stw	r2,-56(fp)
  80c09c:	00800144 	movi	r2,5
  80c0a0:	e0bff98d 	sth	r2,-26(fp)
  80c0a4:	00bfe0c4 	movi	r2,-125
  80c0a8:	e0bffa05 	stb	r2,-24(fp)
  80c0ac:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80c0b0:	d0a70143 	ldbu	r2,-25595(gp)
  80c0b4:	10803fcc 	andi	r2,r2,255
  80c0b8:	10001526 	beq	r2,zero,80c110 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80c0bc:	e0fff98b 	ldhu	r3,-26(fp)
  80c0c0:	e13ffa03 	ldbu	r4,-24(fp)
  80c0c4:	e17ffa8b 	ldhu	r5,-22(fp)
  80c0c8:	e0bffb44 	addi	r2,fp,-19
  80c0cc:	d8800015 	stw	r2,0(sp)
  80c0d0:	280f883a 	mov	r7,r5
  80c0d4:	200d883a 	mov	r6,r4
  80c0d8:	180b883a 	mov	r5,r3
  80c0dc:	e13ff217 	ldw	r4,-56(fp)
  80c0e0:	08069400 	call	806940 <OSFlagPend>
  80c0e4:	00000a06 	br	80c110 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c0e8:	0001883a 	nop
  80c0ec:	e0bffc17 	ldw	r2,-16(fp)
  80c0f0:	10c00d17 	ldw	r3,52(r2)
  80c0f4:	e0bff317 	ldw	r2,-52(fp)
  80c0f8:	1880051e 	bne	r3,r2,80c110 <altera_avalon_jtag_uart_read+0x1c8>
  80c0fc:	e0bffc17 	ldw	r2,-16(fp)
  80c100:	10c00917 	ldw	r3,36(r2)
  80c104:	e0bffc17 	ldw	r2,-16(fp)
  80c108:	10800117 	ldw	r2,4(r2)
  80c10c:	18bff736 	bltu	r3,r2,80c0ec <__alt_data_end+0xff80c0ec>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c110:	e0bffc17 	ldw	r2,-16(fp)
  80c114:	10c00d17 	ldw	r3,52(r2)
  80c118:	e0bff317 	ldw	r2,-52(fp)
  80c11c:	18800726 	beq	r3,r2,80c13c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c120:	e0bffe17 	ldw	r2,-8(fp)
  80c124:	00bf9d16 	blt	zero,r2,80bf9c <__alt_data_end+0xff80bf9c>
  80c128:	00000506 	br	80c140 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80c12c:	0001883a 	nop
  80c130:	00000306 	br	80c140 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80c134:	0001883a 	nop
  80c138:	00000106 	br	80c140 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80c13c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  80c140:	e0bffc17 	ldw	r2,-16(fp)
  80c144:	10800a17 	ldw	r2,40(r2)
  80c148:	1009883a 	mov	r4,r2
  80c14c:	080972c0 	call	80972c <OSSemPost>

  if (ptr != buffer)
  80c150:	e0fff017 	ldw	r3,-64(fp)
  80c154:	e0bffd17 	ldw	r2,-12(fp)
  80c158:	18801826 	beq	r3,r2,80c1bc <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c15c:	0005303a 	rdctl	r2,status
  80c160:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c164:	e0fff717 	ldw	r3,-36(fp)
  80c168:	00bfff84 	movi	r2,-2
  80c16c:	1884703a 	and	r2,r3,r2
  80c170:	1001703a 	wrctl	status,r2
  
  return context;
  80c174:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c178:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c17c:	e0bffc17 	ldw	r2,-16(fp)
  80c180:	10800817 	ldw	r2,32(r2)
  80c184:	10c00054 	ori	r3,r2,1
  80c188:	e0bffc17 	ldw	r2,-16(fp)
  80c18c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c190:	e0bffc17 	ldw	r2,-16(fp)
  80c194:	10800017 	ldw	r2,0(r2)
  80c198:	10800104 	addi	r2,r2,4
  80c19c:	1007883a 	mov	r3,r2
  80c1a0:	e0bffc17 	ldw	r2,-16(fp)
  80c1a4:	10800817 	ldw	r2,32(r2)
  80c1a8:	18800035 	stwio	r2,0(r3)
  80c1ac:	e0bff617 	ldw	r2,-40(fp)
  80c1b0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c1b4:	e0bff517 	ldw	r2,-44(fp)
  80c1b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c1bc:	e0fff017 	ldw	r3,-64(fp)
  80c1c0:	e0bffd17 	ldw	r2,-12(fp)
  80c1c4:	18800426 	beq	r3,r2,80c1d8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
  80c1c8:	e0fff017 	ldw	r3,-64(fp)
  80c1cc:	e0bffd17 	ldw	r2,-12(fp)
  80c1d0:	1885c83a 	sub	r2,r3,r2
  80c1d4:	00000606 	br	80c1f0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  80c1d8:	e0bfff17 	ldw	r2,-4(fp)
  80c1dc:	1090000c 	andi	r2,r2,16384
  80c1e0:	10000226 	beq	r2,zero,80c1ec <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
  80c1e4:	00bffd44 	movi	r2,-11
  80c1e8:	00000106 	br	80c1f0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  80c1ec:	00bffec4 	movi	r2,-5
}
  80c1f0:	e037883a 	mov	sp,fp
  80c1f4:	dfc00117 	ldw	ra,4(sp)
  80c1f8:	df000017 	ldw	fp,0(sp)
  80c1fc:	dec00204 	addi	sp,sp,8
  80c200:	f800283a 	ret

0080c204 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c204:	deffed04 	addi	sp,sp,-76
  80c208:	dfc01215 	stw	ra,72(sp)
  80c20c:	df001115 	stw	fp,68(sp)
  80c210:	df001104 	addi	fp,sp,68
  80c214:	e13ffc15 	stw	r4,-16(fp)
  80c218:	e17ffd15 	stw	r5,-12(fp)
  80c21c:	e1bffe15 	stw	r6,-8(fp)
  80c220:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c224:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c228:	e0bffd17 	ldw	r2,-12(fp)
  80c22c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  80c230:	e0bffc17 	ldw	r2,-16(fp)
  80c234:	10800b17 	ldw	r2,44(r2)
  80c238:	e0bff815 	stw	r2,-32(fp)
  80c23c:	e03ff90d 	sth	zero,-28(fp)
  80c240:	e0bff90b 	ldhu	r2,-28(fp)
  80c244:	e0fffb44 	addi	r3,fp,-19
  80c248:	180d883a 	mov	r6,r3
  80c24c:	100b883a 	mov	r5,r2
  80c250:	e13ff817 	ldw	r4,-32(fp)
  80c254:	08093b40 	call	8093b4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c258:	00003706 	br	80c338 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c25c:	e0bffc17 	ldw	r2,-16(fp)
  80c260:	10800f17 	ldw	r2,60(r2)
  80c264:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
  80c268:	e0bffc17 	ldw	r2,-16(fp)
  80c26c:	10801017 	ldw	r2,64(r2)
  80c270:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
  80c274:	e0fff417 	ldw	r3,-48(fp)
  80c278:	e0bff017 	ldw	r2,-64(fp)
  80c27c:	1880062e 	bgeu	r3,r2,80c298 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  80c280:	e0fff017 	ldw	r3,-64(fp)
  80c284:	e0bff417 	ldw	r2,-48(fp)
  80c288:	1885c83a 	sub	r2,r3,r2
  80c28c:	10bfffc4 	addi	r2,r2,-1
  80c290:	e0bff115 	stw	r2,-60(fp)
  80c294:	00000b06 	br	80c2c4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  80c298:	e0bff017 	ldw	r2,-64(fp)
  80c29c:	10000526 	beq	r2,zero,80c2b4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c2a0:	00c20004 	movi	r3,2048
  80c2a4:	e0bff417 	ldw	r2,-48(fp)
  80c2a8:	1885c83a 	sub	r2,r3,r2
  80c2ac:	e0bff115 	stw	r2,-60(fp)
  80c2b0:	00000406 	br	80c2c4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c2b4:	00c1ffc4 	movi	r3,2047
  80c2b8:	e0bff417 	ldw	r2,-48(fp)
  80c2bc:	1885c83a 	sub	r2,r3,r2
  80c2c0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
  80c2c4:	e0bff117 	ldw	r2,-60(fp)
  80c2c8:	10001e26 	beq	r2,zero,80c344 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  80c2cc:	e0fffe17 	ldw	r3,-8(fp)
  80c2d0:	e0bff117 	ldw	r2,-60(fp)
  80c2d4:	1880022e 	bgeu	r3,r2,80c2e0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  80c2d8:	e0bffe17 	ldw	r2,-8(fp)
  80c2dc:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c2e0:	e0bffc17 	ldw	r2,-16(fp)
  80c2e4:	10c21104 	addi	r3,r2,2116
  80c2e8:	e0bff417 	ldw	r2,-48(fp)
  80c2ec:	1885883a 	add	r2,r3,r2
  80c2f0:	e1bff117 	ldw	r6,-60(fp)
  80c2f4:	e17ffd17 	ldw	r5,-12(fp)
  80c2f8:	1009883a 	mov	r4,r2
  80c2fc:	08018840 	call	801884 <memcpy>
      ptr   += n;
  80c300:	e0fffd17 	ldw	r3,-12(fp)
  80c304:	e0bff117 	ldw	r2,-60(fp)
  80c308:	1885883a 	add	r2,r3,r2
  80c30c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80c310:	e0fffe17 	ldw	r3,-8(fp)
  80c314:	e0bff117 	ldw	r2,-60(fp)
  80c318:	1885c83a 	sub	r2,r3,r2
  80c31c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c320:	e0fff417 	ldw	r3,-48(fp)
  80c324:	e0bff117 	ldw	r2,-60(fp)
  80c328:	1885883a 	add	r2,r3,r2
  80c32c:	10c1ffcc 	andi	r3,r2,2047
  80c330:	e0bffc17 	ldw	r2,-16(fp)
  80c334:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c338:	e0bffe17 	ldw	r2,-8(fp)
  80c33c:	00bfc716 	blt	zero,r2,80c25c <__alt_data_end+0xff80c25c>
  80c340:	00000106 	br	80c348 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80c344:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c348:	0005303a 	rdctl	r2,status
  80c34c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c350:	e0fff717 	ldw	r3,-36(fp)
  80c354:	00bfff84 	movi	r2,-2
  80c358:	1884703a 	and	r2,r3,r2
  80c35c:	1001703a 	wrctl	status,r2
  
  return context;
  80c360:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c364:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c368:	e0bffc17 	ldw	r2,-16(fp)
  80c36c:	10800817 	ldw	r2,32(r2)
  80c370:	10c00094 	ori	r3,r2,2
  80c374:	e0bffc17 	ldw	r2,-16(fp)
  80c378:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c37c:	e0bffc17 	ldw	r2,-16(fp)
  80c380:	10800017 	ldw	r2,0(r2)
  80c384:	10800104 	addi	r2,r2,4
  80c388:	1007883a 	mov	r3,r2
  80c38c:	e0bffc17 	ldw	r2,-16(fp)
  80c390:	10800817 	ldw	r2,32(r2)
  80c394:	18800035 	stwio	r2,0(r3)
  80c398:	e0bff617 	ldw	r2,-40(fp)
  80c39c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c3a0:	e0bff317 	ldw	r2,-52(fp)
  80c3a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80c3a8:	e0bffe17 	ldw	r2,-8(fp)
  80c3ac:	00802a0e 	bge	zero,r2,80c458 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
  80c3b0:	e0bfff17 	ldw	r2,-4(fp)
  80c3b4:	1090000c 	andi	r2,r2,16384
  80c3b8:	10002a1e 	bne	r2,zero,80c464 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  80c3bc:	d0a70143 	ldbu	r2,-25595(gp)
  80c3c0:	10803fcc 	andi	r2,r2,255
  80c3c4:	10800058 	cmpnei	r2,r2,1
  80c3c8:	1000161e 	bne	r2,zero,80c424 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  80c3cc:	e0bffc17 	ldw	r2,-16(fp)
  80c3d0:	10800c17 	ldw	r2,48(r2)
  80c3d4:	e0bff515 	stw	r2,-44(fp)
  80c3d8:	00800184 	movi	r2,6
  80c3dc:	e0bff98d 	sth	r2,-26(fp)
  80c3e0:	00bfe0c4 	movi	r2,-125
  80c3e4:	e0bffa05 	stb	r2,-24(fp)
  80c3e8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  80c3ec:	d0a70143 	ldbu	r2,-25595(gp)
  80c3f0:	10803fcc 	andi	r2,r2,255
  80c3f4:	10001526 	beq	r2,zero,80c44c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  80c3f8:	e0fff98b 	ldhu	r3,-26(fp)
  80c3fc:	e13ffa03 	ldbu	r4,-24(fp)
  80c400:	e17ffa8b 	ldhu	r5,-22(fp)
  80c404:	e0bffb04 	addi	r2,fp,-20
  80c408:	d8800015 	stw	r2,0(sp)
  80c40c:	280f883a 	mov	r7,r5
  80c410:	200d883a 	mov	r6,r4
  80c414:	180b883a 	mov	r5,r3
  80c418:	e13ff517 	ldw	r4,-44(fp)
  80c41c:	08069400 	call	806940 <OSFlagPend>
  80c420:	00000a06 	br	80c44c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80c424:	0001883a 	nop
  80c428:	e0bffc17 	ldw	r2,-16(fp)
  80c42c:	10c01017 	ldw	r3,64(r2)
  80c430:	e0bff017 	ldw	r2,-64(fp)
  80c434:	1880051e 	bne	r3,r2,80c44c <altera_avalon_jtag_uart_write+0x248>
  80c438:	e0bffc17 	ldw	r2,-16(fp)
  80c43c:	10c00917 	ldw	r3,36(r2)
  80c440:	e0bffc17 	ldw	r2,-16(fp)
  80c444:	10800117 	ldw	r2,4(r2)
  80c448:	18bff736 	bltu	r3,r2,80c428 <__alt_data_end+0xff80c428>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80c44c:	e0bffc17 	ldw	r2,-16(fp)
  80c450:	10800917 	ldw	r2,36(r2)
  80c454:	1000051e 	bne	r2,zero,80c46c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
  80c458:	e0bffe17 	ldw	r2,-8(fp)
  80c45c:	00bfb616 	blt	zero,r2,80c338 <__alt_data_end+0xff80c338>
  80c460:	00000306 	br	80c470 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80c464:	0001883a 	nop
  80c468:	00000106 	br	80c470 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80c46c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  80c470:	e0bffc17 	ldw	r2,-16(fp)
  80c474:	10800b17 	ldw	r2,44(r2)
  80c478:	1009883a 	mov	r4,r2
  80c47c:	080972c0 	call	80972c <OSSemPost>

  if (ptr != start)
  80c480:	e0fffd17 	ldw	r3,-12(fp)
  80c484:	e0bff217 	ldw	r2,-56(fp)
  80c488:	18800426 	beq	r3,r2,80c49c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
  80c48c:	e0fffd17 	ldw	r3,-12(fp)
  80c490:	e0bff217 	ldw	r2,-56(fp)
  80c494:	1885c83a 	sub	r2,r3,r2
  80c498:	00000606 	br	80c4b4 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
  80c49c:	e0bfff17 	ldw	r2,-4(fp)
  80c4a0:	1090000c 	andi	r2,r2,16384
  80c4a4:	10000226 	beq	r2,zero,80c4b0 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
  80c4a8:	00bffd44 	movi	r2,-11
  80c4ac:	00000106 	br	80c4b4 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80c4b0:	00bffec4 	movi	r2,-5
}
  80c4b4:	e037883a 	mov	sp,fp
  80c4b8:	dfc00117 	ldw	ra,4(sp)
  80c4bc:	df000017 	ldw	fp,0(sp)
  80c4c0:	dec00204 	addi	sp,sp,8
  80c4c4:	f800283a 	ret

0080c4c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80c4c8:	defff904 	addi	sp,sp,-28
  80c4cc:	dfc00615 	stw	ra,24(sp)
  80c4d0:	df000515 	stw	fp,20(sp)
  80c4d4:	df000504 	addi	fp,sp,20
  80c4d8:	e13ffe15 	stw	r4,-8(fp)
  80c4dc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80c4e0:	0007883a 	mov	r3,zero
  80c4e4:	e0bffe17 	ldw	r2,-8(fp)
  80c4e8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80c4ec:	e0bffe17 	ldw	r2,-8(fp)
  80c4f0:	10800104 	addi	r2,r2,4
  80c4f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c4f8:	0005303a 	rdctl	r2,status
  80c4fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c500:	e0fffc17 	ldw	r3,-16(fp)
  80c504:	00bfff84 	movi	r2,-2
  80c508:	1884703a 	and	r2,r3,r2
  80c50c:	1001703a 	wrctl	status,r2
  
  return context;
  80c510:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80c514:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  80c518:	080cec40 	call	80cec4 <alt_tick>
  80c51c:	e0bffb17 	ldw	r2,-20(fp)
  80c520:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c524:	e0bffd17 	ldw	r2,-12(fp)
  80c528:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80c52c:	0001883a 	nop
  80c530:	e037883a 	mov	sp,fp
  80c534:	dfc00117 	ldw	ra,4(sp)
  80c538:	df000017 	ldw	fp,0(sp)
  80c53c:	dec00204 	addi	sp,sp,8
  80c540:	f800283a 	ret

0080c544 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80c544:	defff904 	addi	sp,sp,-28
  80c548:	dfc00615 	stw	ra,24(sp)
  80c54c:	df000515 	stw	fp,20(sp)
  80c550:	df000504 	addi	fp,sp,20
  80c554:	e13ffc15 	stw	r4,-16(fp)
  80c558:	e17ffd15 	stw	r5,-12(fp)
  80c55c:	e1bffe15 	stw	r6,-8(fp)
  80c560:	e1ffff15 	stw	r7,-4(fp)
  80c564:	e0bfff17 	ldw	r2,-4(fp)
  80c568:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80c56c:	d0a71617 	ldw	r2,-25512(gp)
  80c570:	1000021e 	bne	r2,zero,80c57c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80c574:	e0bffb17 	ldw	r2,-20(fp)
  80c578:	d0a71615 	stw	r2,-25512(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80c57c:	e0bffc17 	ldw	r2,-16(fp)
  80c580:	10800104 	addi	r2,r2,4
  80c584:	00c001c4 	movi	r3,7
  80c588:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  80c58c:	01802074 	movhi	r6,129
  80c590:	31b13204 	addi	r6,r6,-15160
  80c594:	e17ffc17 	ldw	r5,-16(fp)
  80c598:	e13ffe17 	ldw	r4,-8(fp)
  80c59c:	080ca240 	call	80ca24 <alt_irq_register>
#endif  
}
  80c5a0:	0001883a 	nop
  80c5a4:	e037883a 	mov	sp,fp
  80c5a8:	dfc00117 	ldw	ra,4(sp)
  80c5ac:	df000017 	ldw	fp,0(sp)
  80c5b0:	dec00204 	addi	sp,sp,8
  80c5b4:	f800283a 	ret

0080c5b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80c5b8:	defff504 	addi	sp,sp,-44
  80c5bc:	df000a15 	stw	fp,40(sp)
  80c5c0:	df000a04 	addi	fp,sp,40
  80c5c4:	e13ffc15 	stw	r4,-16(fp)
  80c5c8:	e17ffd15 	stw	r5,-12(fp)
  80c5cc:	e1bffe15 	stw	r6,-8(fp)
  80c5d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80c5d4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80c5d8:	d0a71617 	ldw	r2,-25512(gp)
  
  if (alt_ticks_per_second ())
  80c5dc:	10003c26 	beq	r2,zero,80c6d0 <alt_alarm_start+0x118>
  {
    if (alarm)
  80c5e0:	e0bffc17 	ldw	r2,-16(fp)
  80c5e4:	10003826 	beq	r2,zero,80c6c8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80c5e8:	e0bffc17 	ldw	r2,-16(fp)
  80c5ec:	e0fffe17 	ldw	r3,-8(fp)
  80c5f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80c5f4:	e0bffc17 	ldw	r2,-16(fp)
  80c5f8:	e0ffff17 	ldw	r3,-4(fp)
  80c5fc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c600:	0005303a 	rdctl	r2,status
  80c604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c608:	e0fff917 	ldw	r3,-28(fp)
  80c60c:	00bfff84 	movi	r2,-2
  80c610:	1884703a 	and	r2,r3,r2
  80c614:	1001703a 	wrctl	status,r2
  
  return context;
  80c618:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80c61c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80c620:	d0a71717 	ldw	r2,-25508(gp)
      
      current_nticks = alt_nticks();
  80c624:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80c628:	e0fffd17 	ldw	r3,-12(fp)
  80c62c:	e0bff617 	ldw	r2,-40(fp)
  80c630:	1885883a 	add	r2,r3,r2
  80c634:	10c00044 	addi	r3,r2,1
  80c638:	e0bffc17 	ldw	r2,-16(fp)
  80c63c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80c640:	e0bffc17 	ldw	r2,-16(fp)
  80c644:	10c00217 	ldw	r3,8(r2)
  80c648:	e0bff617 	ldw	r2,-40(fp)
  80c64c:	1880042e 	bgeu	r3,r2,80c660 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80c650:	e0bffc17 	ldw	r2,-16(fp)
  80c654:	00c00044 	movi	r3,1
  80c658:	10c00405 	stb	r3,16(r2)
  80c65c:	00000206 	br	80c668 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80c660:	e0bffc17 	ldw	r2,-16(fp)
  80c664:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80c668:	e0bffc17 	ldw	r2,-16(fp)
  80c66c:	d0e02b04 	addi	r3,gp,-32596
  80c670:	e0fffa15 	stw	r3,-24(fp)
  80c674:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80c678:	e0bffb17 	ldw	r2,-20(fp)
  80c67c:	e0fffa17 	ldw	r3,-24(fp)
  80c680:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80c684:	e0bffa17 	ldw	r2,-24(fp)
  80c688:	10c00017 	ldw	r3,0(r2)
  80c68c:	e0bffb17 	ldw	r2,-20(fp)
  80c690:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c694:	e0bffa17 	ldw	r2,-24(fp)
  80c698:	10800017 	ldw	r2,0(r2)
  80c69c:	e0fffb17 	ldw	r3,-20(fp)
  80c6a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80c6a4:	e0bffa17 	ldw	r2,-24(fp)
  80c6a8:	e0fffb17 	ldw	r3,-20(fp)
  80c6ac:	10c00015 	stw	r3,0(r2)
  80c6b0:	e0bff817 	ldw	r2,-32(fp)
  80c6b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c6b8:	e0bff717 	ldw	r2,-36(fp)
  80c6bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80c6c0:	0005883a 	mov	r2,zero
  80c6c4:	00000306 	br	80c6d4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80c6c8:	00bffa84 	movi	r2,-22
  80c6cc:	00000106 	br	80c6d4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80c6d0:	00bfde84 	movi	r2,-134
  }
}
  80c6d4:	e037883a 	mov	sp,fp
  80c6d8:	df000017 	ldw	fp,0(sp)
  80c6dc:	dec00104 	addi	sp,sp,4
  80c6e0:	f800283a 	ret

0080c6e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80c6e4:	deffff04 	addi	sp,sp,-4
  80c6e8:	df000015 	stw	fp,0(sp)
  80c6ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80c6f0:	0001883a 	nop
  80c6f4:	e037883a 	mov	sp,fp
  80c6f8:	df000017 	ldw	fp,0(sp)
  80c6fc:	dec00104 	addi	sp,sp,4
  80c700:	f800283a 	ret

0080c704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c704:	defffe04 	addi	sp,sp,-8
  80c708:	dfc00115 	stw	ra,4(sp)
  80c70c:	df000015 	stw	fp,0(sp)
  80c710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c714:	d0a00917 	ldw	r2,-32732(gp)
  80c718:	10000326 	beq	r2,zero,80c728 <alt_get_errno+0x24>
  80c71c:	d0a00917 	ldw	r2,-32732(gp)
  80c720:	103ee83a 	callr	r2
  80c724:	00000106 	br	80c72c <alt_get_errno+0x28>
  80c728:	d0a6f804 	addi	r2,gp,-25632
}
  80c72c:	e037883a 	mov	sp,fp
  80c730:	dfc00117 	ldw	ra,4(sp)
  80c734:	df000017 	ldw	fp,0(sp)
  80c738:	dec00204 	addi	sp,sp,8
  80c73c:	f800283a 	ret

0080c740 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80c740:	defffa04 	addi	sp,sp,-24
  80c744:	dfc00515 	stw	ra,20(sp)
  80c748:	df000415 	stw	fp,16(sp)
  80c74c:	df000404 	addi	fp,sp,16
  80c750:	e13ffe15 	stw	r4,-8(fp)
  80c754:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80c758:	e0bffe17 	ldw	r2,-8(fp)
  80c75c:	10000326 	beq	r2,zero,80c76c <alt_dev_llist_insert+0x2c>
  80c760:	e0bffe17 	ldw	r2,-8(fp)
  80c764:	10800217 	ldw	r2,8(r2)
  80c768:	1000061e 	bne	r2,zero,80c784 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80c76c:	080c7040 	call	80c704 <alt_get_errno>
  80c770:	1007883a 	mov	r3,r2
  80c774:	00800584 	movi	r2,22
  80c778:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80c77c:	00bffa84 	movi	r2,-22
  80c780:	00001306 	br	80c7d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80c784:	e0bffe17 	ldw	r2,-8(fp)
  80c788:	e0ffff17 	ldw	r3,-4(fp)
  80c78c:	e0fffc15 	stw	r3,-16(fp)
  80c790:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80c794:	e0bffd17 	ldw	r2,-12(fp)
  80c798:	e0fffc17 	ldw	r3,-16(fp)
  80c79c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80c7a0:	e0bffc17 	ldw	r2,-16(fp)
  80c7a4:	10c00017 	ldw	r3,0(r2)
  80c7a8:	e0bffd17 	ldw	r2,-12(fp)
  80c7ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c7b0:	e0bffc17 	ldw	r2,-16(fp)
  80c7b4:	10800017 	ldw	r2,0(r2)
  80c7b8:	e0fffd17 	ldw	r3,-12(fp)
  80c7bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80c7c0:	e0bffc17 	ldw	r2,-16(fp)
  80c7c4:	e0fffd17 	ldw	r3,-12(fp)
  80c7c8:	10c00015 	stw	r3,0(r2)

  return 0;  
  80c7cc:	0005883a 	mov	r2,zero
}
  80c7d0:	e037883a 	mov	sp,fp
  80c7d4:	dfc00117 	ldw	ra,4(sp)
  80c7d8:	df000017 	ldw	fp,0(sp)
  80c7dc:	dec00204 	addi	sp,sp,8
  80c7e0:	f800283a 	ret

0080c7e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80c7e4:	defffd04 	addi	sp,sp,-12
  80c7e8:	dfc00215 	stw	ra,8(sp)
  80c7ec:	df000115 	stw	fp,4(sp)
  80c7f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80c7f4:	00802074 	movhi	r2,129
  80c7f8:	10b68004 	addi	r2,r2,-9728
  80c7fc:	e0bfff15 	stw	r2,-4(fp)
  80c800:	00000606 	br	80c81c <_do_ctors+0x38>
        (*ctor) (); 
  80c804:	e0bfff17 	ldw	r2,-4(fp)
  80c808:	10800017 	ldw	r2,0(r2)
  80c80c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80c810:	e0bfff17 	ldw	r2,-4(fp)
  80c814:	10bfff04 	addi	r2,r2,-4
  80c818:	e0bfff15 	stw	r2,-4(fp)
  80c81c:	e0ffff17 	ldw	r3,-4(fp)
  80c820:	00802074 	movhi	r2,129
  80c824:	10b68104 	addi	r2,r2,-9724
  80c828:	18bff62e 	bgeu	r3,r2,80c804 <__alt_data_end+0xff80c804>
        (*ctor) (); 
}
  80c82c:	0001883a 	nop
  80c830:	e037883a 	mov	sp,fp
  80c834:	dfc00117 	ldw	ra,4(sp)
  80c838:	df000017 	ldw	fp,0(sp)
  80c83c:	dec00204 	addi	sp,sp,8
  80c840:	f800283a 	ret

0080c844 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80c844:	defffd04 	addi	sp,sp,-12
  80c848:	dfc00215 	stw	ra,8(sp)
  80c84c:	df000115 	stw	fp,4(sp)
  80c850:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80c854:	00802074 	movhi	r2,129
  80c858:	10b68004 	addi	r2,r2,-9728
  80c85c:	e0bfff15 	stw	r2,-4(fp)
  80c860:	00000606 	br	80c87c <_do_dtors+0x38>
        (*dtor) (); 
  80c864:	e0bfff17 	ldw	r2,-4(fp)
  80c868:	10800017 	ldw	r2,0(r2)
  80c86c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80c870:	e0bfff17 	ldw	r2,-4(fp)
  80c874:	10bfff04 	addi	r2,r2,-4
  80c878:	e0bfff15 	stw	r2,-4(fp)
  80c87c:	e0ffff17 	ldw	r3,-4(fp)
  80c880:	00802074 	movhi	r2,129
  80c884:	10b68104 	addi	r2,r2,-9724
  80c888:	18bff62e 	bgeu	r3,r2,80c864 <__alt_data_end+0xff80c864>
        (*dtor) (); 
}
  80c88c:	0001883a 	nop
  80c890:	e037883a 	mov	sp,fp
  80c894:	dfc00117 	ldw	ra,4(sp)
  80c898:	df000017 	ldw	fp,0(sp)
  80c89c:	dec00204 	addi	sp,sp,8
  80c8a0:	f800283a 	ret

0080c8a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80c8a4:	deffff04 	addi	sp,sp,-4
  80c8a8:	df000015 	stw	fp,0(sp)
  80c8ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  80c8b0:	0001883a 	nop
  80c8b4:	e037883a 	mov	sp,fp
  80c8b8:	df000017 	ldw	fp,0(sp)
  80c8bc:	dec00104 	addi	sp,sp,4
  80c8c0:	f800283a 	ret

0080c8c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80c8c4:	defff804 	addi	sp,sp,-32
  80c8c8:	dfc00715 	stw	ra,28(sp)
  80c8cc:	df000615 	stw	fp,24(sp)
  80c8d0:	dc000515 	stw	r16,20(sp)
  80c8d4:	df000604 	addi	fp,sp,24
  80c8d8:	e13ffb15 	stw	r4,-20(fp)
  80c8dc:	e17ffc15 	stw	r5,-16(fp)
  80c8e0:	e1bffd15 	stw	r6,-12(fp)
  80c8e4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  80c8e8:	e1bffe17 	ldw	r6,-8(fp)
  80c8ec:	e17ffd17 	ldw	r5,-12(fp)
  80c8f0:	e13ffc17 	ldw	r4,-16(fp)
  80c8f4:	080cccc0 	call	80cccc <open>
  80c8f8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  80c8fc:	e0bffa17 	ldw	r2,-24(fp)
  80c900:	10002216 	blt	r2,zero,80c98c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  80c904:	04002074 	movhi	r16,129
  80c908:	8439b504 	addi	r16,r16,-6444
  80c90c:	e0bffa17 	ldw	r2,-24(fp)
  80c910:	01400304 	movi	r5,12
  80c914:	1009883a 	mov	r4,r2
  80c918:	080320c0 	call	80320c <__mulsi3>
  80c91c:	8085883a 	add	r2,r16,r2
  80c920:	10c00017 	ldw	r3,0(r2)
  80c924:	e0bffb17 	ldw	r2,-20(fp)
  80c928:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80c92c:	04002074 	movhi	r16,129
  80c930:	8439b504 	addi	r16,r16,-6444
  80c934:	e0bffa17 	ldw	r2,-24(fp)
  80c938:	01400304 	movi	r5,12
  80c93c:	1009883a 	mov	r4,r2
  80c940:	080320c0 	call	80320c <__mulsi3>
  80c944:	8085883a 	add	r2,r16,r2
  80c948:	10800104 	addi	r2,r2,4
  80c94c:	10c00017 	ldw	r3,0(r2)
  80c950:	e0bffb17 	ldw	r2,-20(fp)
  80c954:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80c958:	04002074 	movhi	r16,129
  80c95c:	8439b504 	addi	r16,r16,-6444
  80c960:	e0bffa17 	ldw	r2,-24(fp)
  80c964:	01400304 	movi	r5,12
  80c968:	1009883a 	mov	r4,r2
  80c96c:	080320c0 	call	80320c <__mulsi3>
  80c970:	8085883a 	add	r2,r16,r2
  80c974:	10800204 	addi	r2,r2,8
  80c978:	10c00017 	ldw	r3,0(r2)
  80c97c:	e0bffb17 	ldw	r2,-20(fp)
  80c980:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80c984:	e13ffa17 	ldw	r4,-24(fp)
  80c988:	08039500 	call	803950 <alt_release_fd>
  }
} 
  80c98c:	0001883a 	nop
  80c990:	e6ffff04 	addi	sp,fp,-4
  80c994:	dfc00217 	ldw	ra,8(sp)
  80c998:	df000117 	ldw	fp,4(sp)
  80c99c:	dc000017 	ldw	r16,0(sp)
  80c9a0:	dec00304 	addi	sp,sp,12
  80c9a4:	f800283a 	ret

0080c9a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80c9a8:	defffb04 	addi	sp,sp,-20
  80c9ac:	dfc00415 	stw	ra,16(sp)
  80c9b0:	df000315 	stw	fp,12(sp)
  80c9b4:	df000304 	addi	fp,sp,12
  80c9b8:	e13ffd15 	stw	r4,-12(fp)
  80c9bc:	e17ffe15 	stw	r5,-8(fp)
  80c9c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80c9c4:	01c07fc4 	movi	r7,511
  80c9c8:	01800044 	movi	r6,1
  80c9cc:	e17ffd17 	ldw	r5,-12(fp)
  80c9d0:	01002074 	movhi	r4,129
  80c9d4:	2139b804 	addi	r4,r4,-6432
  80c9d8:	080c8c40 	call	80c8c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80c9dc:	01c07fc4 	movi	r7,511
  80c9e0:	000d883a 	mov	r6,zero
  80c9e4:	e17ffe17 	ldw	r5,-8(fp)
  80c9e8:	01002074 	movhi	r4,129
  80c9ec:	2139b504 	addi	r4,r4,-6444
  80c9f0:	080c8c40 	call	80c8c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80c9f4:	01c07fc4 	movi	r7,511
  80c9f8:	01800044 	movi	r6,1
  80c9fc:	e17fff17 	ldw	r5,-4(fp)
  80ca00:	01002074 	movhi	r4,129
  80ca04:	2139bb04 	addi	r4,r4,-6420
  80ca08:	080c8c40 	call	80c8c4 <alt_open_fd>
}  
  80ca0c:	0001883a 	nop
  80ca10:	e037883a 	mov	sp,fp
  80ca14:	dfc00117 	ldw	ra,4(sp)
  80ca18:	df000017 	ldw	fp,0(sp)
  80ca1c:	dec00204 	addi	sp,sp,8
  80ca20:	f800283a 	ret

0080ca24 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80ca24:	defff004 	addi	sp,sp,-64
  80ca28:	df000f15 	stw	fp,60(sp)
  80ca2c:	df000f04 	addi	fp,sp,60
  80ca30:	e13ffd15 	stw	r4,-12(fp)
  80ca34:	e17ffe15 	stw	r5,-8(fp)
  80ca38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80ca3c:	00bffa84 	movi	r2,-22
  80ca40:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80ca44:	e0bffd17 	ldw	r2,-12(fp)
  80ca48:	10800828 	cmpgeui	r2,r2,32
  80ca4c:	1000501e 	bne	r2,zero,80cb90 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca50:	0005303a 	rdctl	r2,status
  80ca54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca58:	e0fff617 	ldw	r3,-40(fp)
  80ca5c:	00bfff84 	movi	r2,-2
  80ca60:	1884703a 	and	r2,r3,r2
  80ca64:	1001703a 	wrctl	status,r2
  
  return context;
  80ca68:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80ca6c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80ca70:	008020b4 	movhi	r2,130
  80ca74:	10a1e704 	addi	r2,r2,-30820
  80ca78:	e0fffd17 	ldw	r3,-12(fp)
  80ca7c:	180690fa 	slli	r3,r3,3
  80ca80:	10c5883a 	add	r2,r2,r3
  80ca84:	e0ffff17 	ldw	r3,-4(fp)
  80ca88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80ca8c:	008020b4 	movhi	r2,130
  80ca90:	10a1e704 	addi	r2,r2,-30820
  80ca94:	e0fffd17 	ldw	r3,-12(fp)
  80ca98:	180690fa 	slli	r3,r3,3
  80ca9c:	10c5883a 	add	r2,r2,r3
  80caa0:	10800104 	addi	r2,r2,4
  80caa4:	e0fffe17 	ldw	r3,-8(fp)
  80caa8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80caac:	e0bfff17 	ldw	r2,-4(fp)
  80cab0:	10001926 	beq	r2,zero,80cb18 <alt_irq_register+0xf4>
  80cab4:	e0bffd17 	ldw	r2,-12(fp)
  80cab8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cabc:	0005303a 	rdctl	r2,status
  80cac0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cac4:	e0fff717 	ldw	r3,-36(fp)
  80cac8:	00bfff84 	movi	r2,-2
  80cacc:	1884703a 	and	r2,r3,r2
  80cad0:	1001703a 	wrctl	status,r2
  
  return context;
  80cad4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80cad8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80cadc:	00c00044 	movi	r3,1
  80cae0:	e0bff217 	ldw	r2,-56(fp)
  80cae4:	1884983a 	sll	r2,r3,r2
  80cae8:	1007883a 	mov	r3,r2
  80caec:	d0a71517 	ldw	r2,-25516(gp)
  80caf0:	1884b03a 	or	r2,r3,r2
  80caf4:	d0a71515 	stw	r2,-25516(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80caf8:	d0a71517 	ldw	r2,-25516(gp)
  80cafc:	100170fa 	wrctl	ienable,r2
  80cb00:	e0bff817 	ldw	r2,-32(fp)
  80cb04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cb08:	e0bff917 	ldw	r2,-28(fp)
  80cb0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80cb10:	0005883a 	mov	r2,zero
  80cb14:	00001906 	br	80cb7c <alt_irq_register+0x158>
  80cb18:	e0bffd17 	ldw	r2,-12(fp)
  80cb1c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cb20:	0005303a 	rdctl	r2,status
  80cb24:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cb28:	e0fffa17 	ldw	r3,-24(fp)
  80cb2c:	00bfff84 	movi	r2,-2
  80cb30:	1884703a 	and	r2,r3,r2
  80cb34:	1001703a 	wrctl	status,r2
  
  return context;
  80cb38:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80cb3c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80cb40:	00c00044 	movi	r3,1
  80cb44:	e0bff417 	ldw	r2,-48(fp)
  80cb48:	1884983a 	sll	r2,r3,r2
  80cb4c:	0084303a 	nor	r2,zero,r2
  80cb50:	1007883a 	mov	r3,r2
  80cb54:	d0a71517 	ldw	r2,-25516(gp)
  80cb58:	1884703a 	and	r2,r3,r2
  80cb5c:	d0a71515 	stw	r2,-25516(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80cb60:	d0a71517 	ldw	r2,-25516(gp)
  80cb64:	100170fa 	wrctl	ienable,r2
  80cb68:	e0bffb17 	ldw	r2,-20(fp)
  80cb6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cb70:	e0bffc17 	ldw	r2,-16(fp)
  80cb74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80cb78:	0005883a 	mov	r2,zero
  80cb7c:	e0bff115 	stw	r2,-60(fp)
  80cb80:	e0bff317 	ldw	r2,-52(fp)
  80cb84:	e0bff515 	stw	r2,-44(fp)
  80cb88:	e0bff517 	ldw	r2,-44(fp)
  80cb8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80cb90:	e0bff117 	ldw	r2,-60(fp)
}
  80cb94:	e037883a 	mov	sp,fp
  80cb98:	df000017 	ldw	fp,0(sp)
  80cb9c:	dec00104 	addi	sp,sp,4
  80cba0:	f800283a 	ret

0080cba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cba4:	defffe04 	addi	sp,sp,-8
  80cba8:	dfc00115 	stw	ra,4(sp)
  80cbac:	df000015 	stw	fp,0(sp)
  80cbb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80cbb4:	d0a00917 	ldw	r2,-32732(gp)
  80cbb8:	10000326 	beq	r2,zero,80cbc8 <alt_get_errno+0x24>
  80cbbc:	d0a00917 	ldw	r2,-32732(gp)
  80cbc0:	103ee83a 	callr	r2
  80cbc4:	00000106 	br	80cbcc <alt_get_errno+0x28>
  80cbc8:	d0a6f804 	addi	r2,gp,-25632
}
  80cbcc:	e037883a 	mov	sp,fp
  80cbd0:	dfc00117 	ldw	ra,4(sp)
  80cbd4:	df000017 	ldw	fp,0(sp)
  80cbd8:	dec00204 	addi	sp,sp,8
  80cbdc:	f800283a 	ret

0080cbe0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80cbe0:	defffb04 	addi	sp,sp,-20
  80cbe4:	dfc00415 	stw	ra,16(sp)
  80cbe8:	df000315 	stw	fp,12(sp)
  80cbec:	dc000215 	stw	r16,8(sp)
  80cbf0:	df000304 	addi	fp,sp,12
  80cbf4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80cbf8:	e0bffe17 	ldw	r2,-8(fp)
  80cbfc:	10800217 	ldw	r2,8(r2)
  80cc00:	10d00034 	orhi	r3,r2,16384
  80cc04:	e0bffe17 	ldw	r2,-8(fp)
  80cc08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80cc0c:	e03ffd15 	stw	zero,-12(fp)
  80cc10:	00002306 	br	80cca0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80cc14:	04002074 	movhi	r16,129
  80cc18:	8439b504 	addi	r16,r16,-6444
  80cc1c:	e0bffd17 	ldw	r2,-12(fp)
  80cc20:	01400304 	movi	r5,12
  80cc24:	1009883a 	mov	r4,r2
  80cc28:	080320c0 	call	80320c <__mulsi3>
  80cc2c:	8085883a 	add	r2,r16,r2
  80cc30:	10c00017 	ldw	r3,0(r2)
  80cc34:	e0bffe17 	ldw	r2,-8(fp)
  80cc38:	10800017 	ldw	r2,0(r2)
  80cc3c:	1880151e 	bne	r3,r2,80cc94 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80cc40:	04002074 	movhi	r16,129
  80cc44:	8439b504 	addi	r16,r16,-6444
  80cc48:	e0bffd17 	ldw	r2,-12(fp)
  80cc4c:	01400304 	movi	r5,12
  80cc50:	1009883a 	mov	r4,r2
  80cc54:	080320c0 	call	80320c <__mulsi3>
  80cc58:	8085883a 	add	r2,r16,r2
  80cc5c:	10800204 	addi	r2,r2,8
  80cc60:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80cc64:	10000b0e 	bge	r2,zero,80cc94 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80cc68:	01400304 	movi	r5,12
  80cc6c:	e13ffd17 	ldw	r4,-12(fp)
  80cc70:	080320c0 	call	80320c <__mulsi3>
  80cc74:	1007883a 	mov	r3,r2
  80cc78:	00802074 	movhi	r2,129
  80cc7c:	10b9b504 	addi	r2,r2,-6444
  80cc80:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80cc84:	e0bffe17 	ldw	r2,-8(fp)
  80cc88:	18800226 	beq	r3,r2,80cc94 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80cc8c:	00bffcc4 	movi	r2,-13
  80cc90:	00000806 	br	80ccb4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80cc94:	e0bffd17 	ldw	r2,-12(fp)
  80cc98:	10800044 	addi	r2,r2,1
  80cc9c:	e0bffd15 	stw	r2,-12(fp)
  80cca0:	d0a00817 	ldw	r2,-32736(gp)
  80cca4:	1007883a 	mov	r3,r2
  80cca8:	e0bffd17 	ldw	r2,-12(fp)
  80ccac:	18bfd92e 	bgeu	r3,r2,80cc14 <__alt_data_end+0xff80cc14>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80ccb0:	0005883a 	mov	r2,zero
}
  80ccb4:	e6ffff04 	addi	sp,fp,-4
  80ccb8:	dfc00217 	ldw	ra,8(sp)
  80ccbc:	df000117 	ldw	fp,4(sp)
  80ccc0:	dc000017 	ldw	r16,0(sp)
  80ccc4:	dec00304 	addi	sp,sp,12
  80ccc8:	f800283a 	ret

0080cccc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80cccc:	defff604 	addi	sp,sp,-40
  80ccd0:	dfc00915 	stw	ra,36(sp)
  80ccd4:	df000815 	stw	fp,32(sp)
  80ccd8:	df000804 	addi	fp,sp,32
  80ccdc:	e13ffd15 	stw	r4,-12(fp)
  80cce0:	e17ffe15 	stw	r5,-8(fp)
  80cce4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80cce8:	00bfffc4 	movi	r2,-1
  80ccec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80ccf0:	00bffb44 	movi	r2,-19
  80ccf4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80ccf8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80ccfc:	d1600604 	addi	r5,gp,-32744
  80cd00:	e13ffd17 	ldw	r4,-12(fp)
  80cd04:	080d3480 	call	80d348 <alt_find_dev>
  80cd08:	e0bff815 	stw	r2,-32(fp)
  80cd0c:	e0bff817 	ldw	r2,-32(fp)
  80cd10:	1000051e 	bne	r2,zero,80cd28 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80cd14:	e13ffd17 	ldw	r4,-12(fp)
  80cd18:	080d3d80 	call	80d3d8 <alt_find_file>
  80cd1c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80cd20:	00800044 	movi	r2,1
  80cd24:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80cd28:	e0bff817 	ldw	r2,-32(fp)
  80cd2c:	10002b26 	beq	r2,zero,80cddc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80cd30:	e13ff817 	ldw	r4,-32(fp)
  80cd34:	080d4e00 	call	80d4e0 <alt_get_fd>
  80cd38:	e0bff915 	stw	r2,-28(fp)
  80cd3c:	e0bff917 	ldw	r2,-28(fp)
  80cd40:	1000030e 	bge	r2,zero,80cd50 <open+0x84>
    {
      status = index;
  80cd44:	e0bff917 	ldw	r2,-28(fp)
  80cd48:	e0bffa15 	stw	r2,-24(fp)
  80cd4c:	00002506 	br	80cde4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  80cd50:	01400304 	movi	r5,12
  80cd54:	e13ff917 	ldw	r4,-28(fp)
  80cd58:	080320c0 	call	80320c <__mulsi3>
  80cd5c:	1007883a 	mov	r3,r2
  80cd60:	00802074 	movhi	r2,129
  80cd64:	10b9b504 	addi	r2,r2,-6444
  80cd68:	1885883a 	add	r2,r3,r2
  80cd6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80cd70:	e0fffe17 	ldw	r3,-8(fp)
  80cd74:	00900034 	movhi	r2,16384
  80cd78:	10bfffc4 	addi	r2,r2,-1
  80cd7c:	1886703a 	and	r3,r3,r2
  80cd80:	e0bffc17 	ldw	r2,-16(fp)
  80cd84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80cd88:	e0bffb17 	ldw	r2,-20(fp)
  80cd8c:	1000051e 	bne	r2,zero,80cda4 <open+0xd8>
  80cd90:	e13ffc17 	ldw	r4,-16(fp)
  80cd94:	080cbe00 	call	80cbe0 <alt_file_locked>
  80cd98:	e0bffa15 	stw	r2,-24(fp)
  80cd9c:	e0bffa17 	ldw	r2,-24(fp)
  80cda0:	10001016 	blt	r2,zero,80cde4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80cda4:	e0bff817 	ldw	r2,-32(fp)
  80cda8:	10800317 	ldw	r2,12(r2)
  80cdac:	10000826 	beq	r2,zero,80cdd0 <open+0x104>
  80cdb0:	e0bff817 	ldw	r2,-32(fp)
  80cdb4:	10800317 	ldw	r2,12(r2)
  80cdb8:	e1ffff17 	ldw	r7,-4(fp)
  80cdbc:	e1bffe17 	ldw	r6,-8(fp)
  80cdc0:	e17ffd17 	ldw	r5,-12(fp)
  80cdc4:	e13ffc17 	ldw	r4,-16(fp)
  80cdc8:	103ee83a 	callr	r2
  80cdcc:	00000106 	br	80cdd4 <open+0x108>
  80cdd0:	0005883a 	mov	r2,zero
  80cdd4:	e0bffa15 	stw	r2,-24(fp)
  80cdd8:	00000206 	br	80cde4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80cddc:	00bffb44 	movi	r2,-19
  80cde0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80cde4:	e0bffa17 	ldw	r2,-24(fp)
  80cde8:	1000090e 	bge	r2,zero,80ce10 <open+0x144>
  {
    alt_release_fd (index);  
  80cdec:	e13ff917 	ldw	r4,-28(fp)
  80cdf0:	08039500 	call	803950 <alt_release_fd>
    ALT_ERRNO = -status;
  80cdf4:	080cba40 	call	80cba4 <alt_get_errno>
  80cdf8:	1007883a 	mov	r3,r2
  80cdfc:	e0bffa17 	ldw	r2,-24(fp)
  80ce00:	0085c83a 	sub	r2,zero,r2
  80ce04:	18800015 	stw	r2,0(r3)
    return -1;
  80ce08:	00bfffc4 	movi	r2,-1
  80ce0c:	00000106 	br	80ce14 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  80ce10:	e0bff917 	ldw	r2,-28(fp)
}
  80ce14:	e037883a 	mov	sp,fp
  80ce18:	dfc00117 	ldw	ra,4(sp)
  80ce1c:	df000017 	ldw	fp,0(sp)
  80ce20:	dec00204 	addi	sp,sp,8
  80ce24:	f800283a 	ret

0080ce28 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80ce28:	defffa04 	addi	sp,sp,-24
  80ce2c:	df000515 	stw	fp,20(sp)
  80ce30:	df000504 	addi	fp,sp,20
  80ce34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ce38:	0005303a 	rdctl	r2,status
  80ce3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ce40:	e0fffc17 	ldw	r3,-16(fp)
  80ce44:	00bfff84 	movi	r2,-2
  80ce48:	1884703a 	and	r2,r3,r2
  80ce4c:	1001703a 	wrctl	status,r2
  
  return context;
  80ce50:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80ce54:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80ce58:	e0bfff17 	ldw	r2,-4(fp)
  80ce5c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80ce60:	e0bffd17 	ldw	r2,-12(fp)
  80ce64:	10800017 	ldw	r2,0(r2)
  80ce68:	e0fffd17 	ldw	r3,-12(fp)
  80ce6c:	18c00117 	ldw	r3,4(r3)
  80ce70:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80ce74:	e0bffd17 	ldw	r2,-12(fp)
  80ce78:	10800117 	ldw	r2,4(r2)
  80ce7c:	e0fffd17 	ldw	r3,-12(fp)
  80ce80:	18c00017 	ldw	r3,0(r3)
  80ce84:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80ce88:	e0bffd17 	ldw	r2,-12(fp)
  80ce8c:	e0fffd17 	ldw	r3,-12(fp)
  80ce90:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80ce94:	e0bffd17 	ldw	r2,-12(fp)
  80ce98:	e0fffd17 	ldw	r3,-12(fp)
  80ce9c:	10c00015 	stw	r3,0(r2)
  80cea0:	e0bffb17 	ldw	r2,-20(fp)
  80cea4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cea8:	e0bffe17 	ldw	r2,-8(fp)
  80ceac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80ceb0:	0001883a 	nop
  80ceb4:	e037883a 	mov	sp,fp
  80ceb8:	df000017 	ldw	fp,0(sp)
  80cebc:	dec00104 	addi	sp,sp,4
  80cec0:	f800283a 	ret

0080cec4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80cec4:	defffb04 	addi	sp,sp,-20
  80cec8:	dfc00415 	stw	ra,16(sp)
  80cecc:	df000315 	stw	fp,12(sp)
  80ced0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80ced4:	d0a02b17 	ldw	r2,-32596(gp)
  80ced8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80cedc:	d0a71717 	ldw	r2,-25508(gp)
  80cee0:	10800044 	addi	r2,r2,1
  80cee4:	d0a71715 	stw	r2,-25508(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80cee8:	00002e06 	br	80cfa4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80ceec:	e0bffd17 	ldw	r2,-12(fp)
  80cef0:	10800017 	ldw	r2,0(r2)
  80cef4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80cef8:	e0bffd17 	ldw	r2,-12(fp)
  80cefc:	10800403 	ldbu	r2,16(r2)
  80cf00:	10803fcc 	andi	r2,r2,255
  80cf04:	10000426 	beq	r2,zero,80cf18 <alt_tick+0x54>
  80cf08:	d0a71717 	ldw	r2,-25508(gp)
  80cf0c:	1000021e 	bne	r2,zero,80cf18 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80cf10:	e0bffd17 	ldw	r2,-12(fp)
  80cf14:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80cf18:	e0bffd17 	ldw	r2,-12(fp)
  80cf1c:	10800217 	ldw	r2,8(r2)
  80cf20:	d0e71717 	ldw	r3,-25508(gp)
  80cf24:	18801d36 	bltu	r3,r2,80cf9c <alt_tick+0xd8>
  80cf28:	e0bffd17 	ldw	r2,-12(fp)
  80cf2c:	10800403 	ldbu	r2,16(r2)
  80cf30:	10803fcc 	andi	r2,r2,255
  80cf34:	1000191e 	bne	r2,zero,80cf9c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80cf38:	e0bffd17 	ldw	r2,-12(fp)
  80cf3c:	10800317 	ldw	r2,12(r2)
  80cf40:	e0fffd17 	ldw	r3,-12(fp)
  80cf44:	18c00517 	ldw	r3,20(r3)
  80cf48:	1809883a 	mov	r4,r3
  80cf4c:	103ee83a 	callr	r2
  80cf50:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80cf54:	e0bfff17 	ldw	r2,-4(fp)
  80cf58:	1000031e 	bne	r2,zero,80cf68 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80cf5c:	e13ffd17 	ldw	r4,-12(fp)
  80cf60:	080ce280 	call	80ce28 <alt_alarm_stop>
  80cf64:	00000d06 	br	80cf9c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80cf68:	e0bffd17 	ldw	r2,-12(fp)
  80cf6c:	10c00217 	ldw	r3,8(r2)
  80cf70:	e0bfff17 	ldw	r2,-4(fp)
  80cf74:	1887883a 	add	r3,r3,r2
  80cf78:	e0bffd17 	ldw	r2,-12(fp)
  80cf7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80cf80:	e0bffd17 	ldw	r2,-12(fp)
  80cf84:	10c00217 	ldw	r3,8(r2)
  80cf88:	d0a71717 	ldw	r2,-25508(gp)
  80cf8c:	1880032e 	bgeu	r3,r2,80cf9c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80cf90:	e0bffd17 	ldw	r2,-12(fp)
  80cf94:	00c00044 	movi	r3,1
  80cf98:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80cf9c:	e0bffe17 	ldw	r2,-8(fp)
  80cfa0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80cfa4:	e0fffd17 	ldw	r3,-12(fp)
  80cfa8:	d0a02b04 	addi	r2,gp,-32596
  80cfac:	18bfcf1e 	bne	r3,r2,80ceec <__alt_data_end+0xff80ceec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80cfb0:	0804b640 	call	804b64 <OSTimeTick>
}
  80cfb4:	0001883a 	nop
  80cfb8:	e037883a 	mov	sp,fp
  80cfbc:	dfc00117 	ldw	ra,4(sp)
  80cfc0:	df000017 	ldw	fp,0(sp)
  80cfc4:	dec00204 	addi	sp,sp,8
  80cfc8:	f800283a 	ret

0080cfcc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80cfcc:	deffff04 	addi	sp,sp,-4
  80cfd0:	df000015 	stw	fp,0(sp)
  80cfd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80cfd8:	000170fa 	wrctl	ienable,zero
}
  80cfdc:	0001883a 	nop
  80cfe0:	e037883a 	mov	sp,fp
  80cfe4:	df000017 	ldw	fp,0(sp)
  80cfe8:	dec00104 	addi	sp,sp,4
  80cfec:	f800283a 	ret

0080cff0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  80cff0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  80cff4:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  80cff8:	d1271017 	ldw	r4,-25536(gp)

      stw ra,  0(sp)
  80cffc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  80d000:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  80d004:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  80d008:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  80d00c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  80d010:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  80d014:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  80d018:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  80d01c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  80d020:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  80d024:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  80d028:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80d02c:	080d2640 	call	80d264 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  80d030:	d1270b17 	ldw	r4,-25556(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  80d034:	d1670307 	ldb	r5,-25588(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  80d038:	d1271015 	stw	r4,-25536(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  80d03c:	d1670345 	stb	r5,-25587(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  80d040:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  80d044:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  80d048:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  80d04c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  80d050:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  80d054:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  80d058:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  80d05c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  80d060:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  80d064:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  80d068:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  80d06c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  80d070:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  80d074:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  80d078:	f800283a 	ret

0080d07c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  80d07c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  80d080:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  80d084:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  80d088:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80d08c:	080d2640 	call	80d264 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  80d090:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  80d094:	d4a70145 	stb	r18,-25595(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  80d098:	003fe506 	br	80d030 <__alt_data_end+0xff80d030>

0080d09c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  80d09c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  80d0a0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  80d0a4:	10800054 	ori	r2,r2,1
      wrctl status, r2
  80d0a8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  80d0ac:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  80d0b0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  80d0b4:	dec00204 	addi	sp,sp,8

      callr r2
  80d0b8:	103ee83a 	callr	r2

      nop
  80d0bc:	0001883a 	nop

0080d0c0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  80d0c0:	defff704 	addi	sp,sp,-36
  80d0c4:	dfc00815 	stw	ra,32(sp)
  80d0c8:	df000715 	stw	fp,28(sp)
  80d0cc:	df000704 	addi	fp,sp,28
  80d0d0:	e13ffc15 	stw	r4,-16(fp)
  80d0d4:	e17ffd15 	stw	r5,-12(fp)
  80d0d8:	e1bffe15 	stw	r6,-8(fp)
  80d0dc:	3805883a 	mov	r2,r7
  80d0e0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  80d0e4:	e0fffe17 	ldw	r3,-8(fp)
  80d0e8:	00bfff04 	movi	r2,-4
  80d0ec:	1884703a 	and	r2,r3,r2
  80d0f0:	10bef704 	addi	r2,r2,-1060
  80d0f4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  80d0f8:	01810904 	movi	r6,1060
  80d0fc:	000b883a 	mov	r5,zero
  80d100:	e13ff917 	ldw	r4,-28(fp)
  80d104:	0801b280 	call	801b28 <memset>
  80d108:	e0bff917 	ldw	r2,-28(fp)
  80d10c:	10c0bb04 	addi	r3,r2,748
  80d110:	e0bff917 	ldw	r2,-28(fp)
  80d114:	10c00115 	stw	r3,4(r2)
  80d118:	e0bff917 	ldw	r2,-28(fp)
  80d11c:	10c0d504 	addi	r3,r2,852
  80d120:	e0bff917 	ldw	r2,-28(fp)
  80d124:	10c00215 	stw	r3,8(r2)
  80d128:	e0bff917 	ldw	r2,-28(fp)
  80d12c:	10c0ef04 	addi	r3,r2,956
  80d130:	e0bff917 	ldw	r2,-28(fp)
  80d134:	10c00315 	stw	r3,12(r2)
  80d138:	e0fff917 	ldw	r3,-28(fp)
  80d13c:	00802074 	movhi	r2,129
  80d140:	10b79f04 	addi	r2,r2,-8580
  80d144:	18800d15 	stw	r2,52(r3)
  80d148:	e0bff917 	ldw	r2,-28(fp)
  80d14c:	00c00044 	movi	r3,1
  80d150:	10c02915 	stw	r3,164(r2)
  80d154:	10002a15 	stw	zero,168(r2)
  80d158:	e0bff917 	ldw	r2,-28(fp)
  80d15c:	00ccc384 	movi	r3,13070
  80d160:	10c02b0d 	sth	r3,172(r2)
  80d164:	e0bff917 	ldw	r2,-28(fp)
  80d168:	00eaf344 	movi	r3,-21555
  80d16c:	10c02b8d 	sth	r3,174(r2)
  80d170:	e0bff917 	ldw	r2,-28(fp)
  80d174:	00c48d04 	movi	r3,4660
  80d178:	10c02c0d 	sth	r3,176(r2)
  80d17c:	e0bff917 	ldw	r2,-28(fp)
  80d180:	00f99b44 	movi	r3,-6547
  80d184:	10c02c8d 	sth	r3,178(r2)
  80d188:	e0bff917 	ldw	r2,-28(fp)
  80d18c:	00f7bb04 	movi	r3,-8468
  80d190:	10c02d0d 	sth	r3,180(r2)
  80d194:	e0bff917 	ldw	r2,-28(fp)
  80d198:	00c00144 	movi	r3,5
  80d19c:	10c02d8d 	sth	r3,182(r2)
  80d1a0:	e0bff917 	ldw	r2,-28(fp)
  80d1a4:	00c002c4 	movi	r3,11
  80d1a8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  80d1ac:	e0bff917 	ldw	r2,-28(fp)
  80d1b0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  80d1b4:	e0bffa17 	ldw	r2,-24(fp)
  80d1b8:	10bff304 	addi	r2,r2,-52
  80d1bc:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  80d1c0:	e0bffb17 	ldw	r2,-20(fp)
  80d1c4:	10800c04 	addi	r2,r2,48
  80d1c8:	e0fffc17 	ldw	r3,-16(fp)
  80d1cc:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  80d1d0:	e0bffb17 	ldw	r2,-20(fp)
  80d1d4:	10800b04 	addi	r2,r2,44
  80d1d8:	e0fffd17 	ldw	r3,-12(fp)
  80d1dc:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  80d1e0:	e0bffb17 	ldw	r2,-20(fp)
  80d1e4:	10800a04 	addi	r2,r2,40
  80d1e8:	e0fff917 	ldw	r3,-28(fp)
  80d1ec:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  80d1f0:	00802074 	movhi	r2,129
  80d1f4:	10b42704 	addi	r2,r2,-12132
  80d1f8:	10c00104 	addi	r3,r2,4
  80d1fc:	e0bffb17 	ldw	r2,-20(fp)
  80d200:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  80d204:	e0bffb17 	ldw	r2,-20(fp)
}
  80d208:	e037883a 	mov	sp,fp
  80d20c:	dfc00117 	ldw	ra,4(sp)
  80d210:	df000017 	ldw	fp,0(sp)
  80d214:	dec00204 	addi	sp,sp,8
  80d218:	f800283a 	ret

0080d21c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  80d21c:	defffe04 	addi	sp,sp,-8
  80d220:	df000115 	stw	fp,4(sp)
  80d224:	df000104 	addi	fp,sp,4
  80d228:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  80d22c:	0001883a 	nop
  80d230:	e037883a 	mov	sp,fp
  80d234:	df000017 	ldw	fp,0(sp)
  80d238:	dec00104 	addi	sp,sp,4
  80d23c:	f800283a 	ret

0080d240 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  80d240:	defffe04 	addi	sp,sp,-8
  80d244:	df000115 	stw	fp,4(sp)
  80d248:	df000104 	addi	fp,sp,4
  80d24c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  80d250:	0001883a 	nop
  80d254:	e037883a 	mov	sp,fp
  80d258:	df000017 	ldw	fp,0(sp)
  80d25c:	dec00104 	addi	sp,sp,4
  80d260:	f800283a 	ret

0080d264 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  80d264:	deffff04 	addi	sp,sp,-4
  80d268:	df000015 	stw	fp,0(sp)
  80d26c:	d839883a 	mov	fp,sp
}
  80d270:	0001883a 	nop
  80d274:	e037883a 	mov	sp,fp
  80d278:	df000017 	ldw	fp,0(sp)
  80d27c:	dec00104 	addi	sp,sp,4
  80d280:	f800283a 	ret

0080d284 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  80d284:	deffff04 	addi	sp,sp,-4
  80d288:	df000015 	stw	fp,0(sp)
  80d28c:	d839883a 	mov	fp,sp
}
  80d290:	0001883a 	nop
  80d294:	e037883a 	mov	sp,fp
  80d298:	df000017 	ldw	fp,0(sp)
  80d29c:	dec00104 	addi	sp,sp,4
  80d2a0:	f800283a 	ret

0080d2a4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  80d2a4:	deffff04 	addi	sp,sp,-4
  80d2a8:	df000015 	stw	fp,0(sp)
  80d2ac:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  80d2b0:	0001883a 	nop
  80d2b4:	e037883a 	mov	sp,fp
  80d2b8:	df000017 	ldw	fp,0(sp)
  80d2bc:	dec00104 	addi	sp,sp,4
  80d2c0:	f800283a 	ret

0080d2c4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  80d2c4:	deffff04 	addi	sp,sp,-4
  80d2c8:	df000015 	stw	fp,0(sp)
  80d2cc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  80d2d0:	0001883a 	nop
  80d2d4:	e037883a 	mov	sp,fp
  80d2d8:	df000017 	ldw	fp,0(sp)
  80d2dc:	dec00104 	addi	sp,sp,4
  80d2e0:	f800283a 	ret

0080d2e4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  80d2e4:	deffff04 	addi	sp,sp,-4
  80d2e8:	df000015 	stw	fp,0(sp)
  80d2ec:	d839883a 	mov	fp,sp
}
  80d2f0:	0001883a 	nop
  80d2f4:	e037883a 	mov	sp,fp
  80d2f8:	df000017 	ldw	fp,0(sp)
  80d2fc:	dec00104 	addi	sp,sp,4
  80d300:	f800283a 	ret

0080d304 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  80d304:	deffff04 	addi	sp,sp,-4
  80d308:	df000015 	stw	fp,0(sp)
  80d30c:	d839883a 	mov	fp,sp
}
  80d310:	0001883a 	nop
  80d314:	e037883a 	mov	sp,fp
  80d318:	df000017 	ldw	fp,0(sp)
  80d31c:	dec00104 	addi	sp,sp,4
  80d320:	f800283a 	ret

0080d324 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  80d324:	defffe04 	addi	sp,sp,-8
  80d328:	df000115 	stw	fp,4(sp)
  80d32c:	df000104 	addi	fp,sp,4
  80d330:	e13fff15 	stw	r4,-4(fp)
}
  80d334:	0001883a 	nop
  80d338:	e037883a 	mov	sp,fp
  80d33c:	df000017 	ldw	fp,0(sp)
  80d340:	dec00104 	addi	sp,sp,4
  80d344:	f800283a 	ret

0080d348 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80d348:	defffa04 	addi	sp,sp,-24
  80d34c:	dfc00515 	stw	ra,20(sp)
  80d350:	df000415 	stw	fp,16(sp)
  80d354:	df000404 	addi	fp,sp,16
  80d358:	e13ffe15 	stw	r4,-8(fp)
  80d35c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80d360:	e0bfff17 	ldw	r2,-4(fp)
  80d364:	10800017 	ldw	r2,0(r2)
  80d368:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80d36c:	e13ffe17 	ldw	r4,-8(fp)
  80d370:	08004fc0 	call	8004fc <strlen>
  80d374:	10800044 	addi	r2,r2,1
  80d378:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d37c:	00000d06 	br	80d3b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80d380:	e0bffc17 	ldw	r2,-16(fp)
  80d384:	10800217 	ldw	r2,8(r2)
  80d388:	e0fffd17 	ldw	r3,-12(fp)
  80d38c:	180d883a 	mov	r6,r3
  80d390:	e17ffe17 	ldw	r5,-8(fp)
  80d394:	1009883a 	mov	r4,r2
  80d398:	080d6bc0 	call	80d6bc <memcmp>
  80d39c:	1000021e 	bne	r2,zero,80d3a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80d3a0:	e0bffc17 	ldw	r2,-16(fp)
  80d3a4:	00000706 	br	80d3c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80d3a8:	e0bffc17 	ldw	r2,-16(fp)
  80d3ac:	10800017 	ldw	r2,0(r2)
  80d3b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d3b4:	e0fffc17 	ldw	r3,-16(fp)
  80d3b8:	e0bfff17 	ldw	r2,-4(fp)
  80d3bc:	18bff01e 	bne	r3,r2,80d380 <__alt_data_end+0xff80d380>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80d3c0:	0005883a 	mov	r2,zero
}
  80d3c4:	e037883a 	mov	sp,fp
  80d3c8:	dfc00117 	ldw	ra,4(sp)
  80d3cc:	df000017 	ldw	fp,0(sp)
  80d3d0:	dec00204 	addi	sp,sp,8
  80d3d4:	f800283a 	ret

0080d3d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80d3d8:	defffb04 	addi	sp,sp,-20
  80d3dc:	dfc00415 	stw	ra,16(sp)
  80d3e0:	df000315 	stw	fp,12(sp)
  80d3e4:	df000304 	addi	fp,sp,12
  80d3e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80d3ec:	d0a00417 	ldw	r2,-32752(gp)
  80d3f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d3f4:	00003106 	br	80d4bc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80d3f8:	e0bffd17 	ldw	r2,-12(fp)
  80d3fc:	10800217 	ldw	r2,8(r2)
  80d400:	1009883a 	mov	r4,r2
  80d404:	08004fc0 	call	8004fc <strlen>
  80d408:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80d40c:	e0bffd17 	ldw	r2,-12(fp)
  80d410:	10c00217 	ldw	r3,8(r2)
  80d414:	e0bffe17 	ldw	r2,-8(fp)
  80d418:	10bfffc4 	addi	r2,r2,-1
  80d41c:	1885883a 	add	r2,r3,r2
  80d420:	10800003 	ldbu	r2,0(r2)
  80d424:	10803fcc 	andi	r2,r2,255
  80d428:	1080201c 	xori	r2,r2,128
  80d42c:	10bfe004 	addi	r2,r2,-128
  80d430:	10800bd8 	cmpnei	r2,r2,47
  80d434:	1000031e 	bne	r2,zero,80d444 <alt_find_file+0x6c>
    {
      len -= 1;
  80d438:	e0bffe17 	ldw	r2,-8(fp)
  80d43c:	10bfffc4 	addi	r2,r2,-1
  80d440:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d444:	e0bffe17 	ldw	r2,-8(fp)
  80d448:	e0ffff17 	ldw	r3,-4(fp)
  80d44c:	1885883a 	add	r2,r3,r2
  80d450:	10800003 	ldbu	r2,0(r2)
  80d454:	10803fcc 	andi	r2,r2,255
  80d458:	1080201c 	xori	r2,r2,128
  80d45c:	10bfe004 	addi	r2,r2,-128
  80d460:	10800be0 	cmpeqi	r2,r2,47
  80d464:	1000081e 	bne	r2,zero,80d488 <alt_find_file+0xb0>
  80d468:	e0bffe17 	ldw	r2,-8(fp)
  80d46c:	e0ffff17 	ldw	r3,-4(fp)
  80d470:	1885883a 	add	r2,r3,r2
  80d474:	10800003 	ldbu	r2,0(r2)
  80d478:	10803fcc 	andi	r2,r2,255
  80d47c:	1080201c 	xori	r2,r2,128
  80d480:	10bfe004 	addi	r2,r2,-128
  80d484:	10000a1e 	bne	r2,zero,80d4b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80d488:	e0bffd17 	ldw	r2,-12(fp)
  80d48c:	10800217 	ldw	r2,8(r2)
  80d490:	e0fffe17 	ldw	r3,-8(fp)
  80d494:	180d883a 	mov	r6,r3
  80d498:	e17fff17 	ldw	r5,-4(fp)
  80d49c:	1009883a 	mov	r4,r2
  80d4a0:	080d6bc0 	call	80d6bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d4a4:	1000021e 	bne	r2,zero,80d4b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80d4a8:	e0bffd17 	ldw	r2,-12(fp)
  80d4ac:	00000706 	br	80d4cc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80d4b0:	e0bffd17 	ldw	r2,-12(fp)
  80d4b4:	10800017 	ldw	r2,0(r2)
  80d4b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d4bc:	e0fffd17 	ldw	r3,-12(fp)
  80d4c0:	d0a00404 	addi	r2,gp,-32752
  80d4c4:	18bfcc1e 	bne	r3,r2,80d3f8 <__alt_data_end+0xff80d3f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80d4c8:	0005883a 	mov	r2,zero
}
  80d4cc:	e037883a 	mov	sp,fp
  80d4d0:	dfc00117 	ldw	ra,4(sp)
  80d4d4:	df000017 	ldw	fp,0(sp)
  80d4d8:	dec00204 	addi	sp,sp,8
  80d4dc:	f800283a 	ret

0080d4e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80d4e0:	defff804 	addi	sp,sp,-32
  80d4e4:	dfc00715 	stw	ra,28(sp)
  80d4e8:	df000615 	stw	fp,24(sp)
  80d4ec:	dc000515 	stw	r16,20(sp)
  80d4f0:	df000604 	addi	fp,sp,24
  80d4f4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  80d4f8:	00bffa04 	movi	r2,-24
  80d4fc:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  80d500:	d0a6f917 	ldw	r2,-25628(gp)
  80d504:	e0bffc15 	stw	r2,-16(fp)
  80d508:	e03ffd0d 	sth	zero,-12(fp)
  80d50c:	e0bffd0b 	ldhu	r2,-12(fp)
  80d510:	e0fffd84 	addi	r3,fp,-10
  80d514:	180d883a 	mov	r6,r3
  80d518:	100b883a 	mov	r5,r2
  80d51c:	e13ffc17 	ldw	r4,-16(fp)
  80d520:	08093b40 	call	8093b4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d524:	e03ffa15 	stw	zero,-24(fp)
  80d528:	00001d06 	br	80d5a0 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  80d52c:	04002074 	movhi	r16,129
  80d530:	8439b504 	addi	r16,r16,-6444
  80d534:	e0bffa17 	ldw	r2,-24(fp)
  80d538:	01400304 	movi	r5,12
  80d53c:	1009883a 	mov	r4,r2
  80d540:	080320c0 	call	80320c <__mulsi3>
  80d544:	8085883a 	add	r2,r16,r2
  80d548:	10800017 	ldw	r2,0(r2)
  80d54c:	1000111e 	bne	r2,zero,80d594 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  80d550:	04002074 	movhi	r16,129
  80d554:	8439b504 	addi	r16,r16,-6444
  80d558:	e0bffa17 	ldw	r2,-24(fp)
  80d55c:	01400304 	movi	r5,12
  80d560:	1009883a 	mov	r4,r2
  80d564:	080320c0 	call	80320c <__mulsi3>
  80d568:	8085883a 	add	r2,r16,r2
  80d56c:	e0fffe17 	ldw	r3,-8(fp)
  80d570:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80d574:	d0e00817 	ldw	r3,-32736(gp)
  80d578:	e0bffa17 	ldw	r2,-24(fp)
  80d57c:	1880020e 	bge	r3,r2,80d588 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  80d580:	e0bffa17 	ldw	r2,-24(fp)
  80d584:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80d588:	e0bffa17 	ldw	r2,-24(fp)
  80d58c:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  80d590:	00000606 	br	80d5ac <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d594:	e0bffa17 	ldw	r2,-24(fp)
  80d598:	10800044 	addi	r2,r2,1
  80d59c:	e0bffa15 	stw	r2,-24(fp)
  80d5a0:	e0bffa17 	ldw	r2,-24(fp)
  80d5a4:	10800810 	cmplti	r2,r2,32
  80d5a8:	103fe01e 	bne	r2,zero,80d52c <__alt_data_end+0xff80d52c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  80d5ac:	d0a6f917 	ldw	r2,-25628(gp)
  80d5b0:	1009883a 	mov	r4,r2
  80d5b4:	080972c0 	call	80972c <OSSemPost>

  return rc;
  80d5b8:	e0bffb17 	ldw	r2,-20(fp)
}
  80d5bc:	e6ffff04 	addi	sp,fp,-4
  80d5c0:	dfc00217 	ldw	ra,8(sp)
  80d5c4:	df000117 	ldw	fp,4(sp)
  80d5c8:	dc000017 	ldw	r16,0(sp)
  80d5cc:	dec00304 	addi	sp,sp,12
  80d5d0:	f800283a 	ret

0080d5d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80d5d4:	defffe04 	addi	sp,sp,-8
  80d5d8:	df000115 	stw	fp,4(sp)
  80d5dc:	df000104 	addi	fp,sp,4
  80d5e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80d5e4:	e0bfff17 	ldw	r2,-4(fp)
  80d5e8:	10bffe84 	addi	r2,r2,-6
  80d5ec:	10c00428 	cmpgeui	r3,r2,16
  80d5f0:	18001a1e 	bne	r3,zero,80d65c <alt_exception_cause_generated_bad_addr+0x88>
  80d5f4:	100690ba 	slli	r3,r2,2
  80d5f8:	00802074 	movhi	r2,129
  80d5fc:	10b58304 	addi	r2,r2,-10740
  80d600:	1885883a 	add	r2,r3,r2
  80d604:	10800017 	ldw	r2,0(r2)
  80d608:	1000683a 	jmp	r2
  80d60c:	0080d64c 	andi	r2,zero,857
  80d610:	0080d64c 	andi	r2,zero,857
  80d614:	0080d65c 	xori	r2,zero,857
  80d618:	0080d65c 	xori	r2,zero,857
  80d61c:	0080d65c 	xori	r2,zero,857
  80d620:	0080d64c 	andi	r2,zero,857
  80d624:	0080d654 	movui	r2,857
  80d628:	0080d65c 	xori	r2,zero,857
  80d62c:	0080d64c 	andi	r2,zero,857
  80d630:	0080d64c 	andi	r2,zero,857
  80d634:	0080d65c 	xori	r2,zero,857
  80d638:	0080d64c 	andi	r2,zero,857
  80d63c:	0080d654 	movui	r2,857
  80d640:	0080d65c 	xori	r2,zero,857
  80d644:	0080d65c 	xori	r2,zero,857
  80d648:	0080d64c 	andi	r2,zero,857
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80d64c:	00800044 	movi	r2,1
  80d650:	00000306 	br	80d660 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80d654:	0005883a 	mov	r2,zero
  80d658:	00000106 	br	80d660 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80d65c:	0005883a 	mov	r2,zero
  }
}
  80d660:	e037883a 	mov	sp,fp
  80d664:	df000017 	ldw	fp,0(sp)
  80d668:	dec00104 	addi	sp,sp,4
  80d66c:	f800283a 	ret

0080d670 <atexit>:
  80d670:	200b883a 	mov	r5,r4
  80d674:	000f883a 	mov	r7,zero
  80d678:	000d883a 	mov	r6,zero
  80d67c:	0009883a 	mov	r4,zero
  80d680:	080d7381 	jmpi	80d738 <__register_exitproc>

0080d684 <exit>:
  80d684:	defffe04 	addi	sp,sp,-8
  80d688:	000b883a 	mov	r5,zero
  80d68c:	dc000015 	stw	r16,0(sp)
  80d690:	dfc00115 	stw	ra,4(sp)
  80d694:	2021883a 	mov	r16,r4
  80d698:	080d8500 	call	80d850 <__call_exitprocs>
  80d69c:	00802074 	movhi	r2,129
  80d6a0:	10be3b04 	addi	r2,r2,-1812
  80d6a4:	11000017 	ldw	r4,0(r2)
  80d6a8:	20800f17 	ldw	r2,60(r4)
  80d6ac:	10000126 	beq	r2,zero,80d6b4 <exit+0x30>
  80d6b0:	103ee83a 	callr	r2
  80d6b4:	8009883a 	mov	r4,r16
  80d6b8:	080d9d00 	call	80d9d0 <_exit>

0080d6bc <memcmp>:
  80d6bc:	01c000c4 	movi	r7,3
  80d6c0:	3980192e 	bgeu	r7,r6,80d728 <memcmp+0x6c>
  80d6c4:	2144b03a 	or	r2,r4,r5
  80d6c8:	11c4703a 	and	r2,r2,r7
  80d6cc:	10000f26 	beq	r2,zero,80d70c <memcmp+0x50>
  80d6d0:	20800003 	ldbu	r2,0(r4)
  80d6d4:	28c00003 	ldbu	r3,0(r5)
  80d6d8:	10c0151e 	bne	r2,r3,80d730 <memcmp+0x74>
  80d6dc:	31bfff84 	addi	r6,r6,-2
  80d6e0:	01ffffc4 	movi	r7,-1
  80d6e4:	00000406 	br	80d6f8 <memcmp+0x3c>
  80d6e8:	20800003 	ldbu	r2,0(r4)
  80d6ec:	28c00003 	ldbu	r3,0(r5)
  80d6f0:	31bfffc4 	addi	r6,r6,-1
  80d6f4:	10c00e1e 	bne	r2,r3,80d730 <memcmp+0x74>
  80d6f8:	21000044 	addi	r4,r4,1
  80d6fc:	29400044 	addi	r5,r5,1
  80d700:	31fff91e 	bne	r6,r7,80d6e8 <__alt_data_end+0xff80d6e8>
  80d704:	0005883a 	mov	r2,zero
  80d708:	f800283a 	ret
  80d70c:	20c00017 	ldw	r3,0(r4)
  80d710:	28800017 	ldw	r2,0(r5)
  80d714:	18bfee1e 	bne	r3,r2,80d6d0 <__alt_data_end+0xff80d6d0>
  80d718:	31bfff04 	addi	r6,r6,-4
  80d71c:	21000104 	addi	r4,r4,4
  80d720:	29400104 	addi	r5,r5,4
  80d724:	39bff936 	bltu	r7,r6,80d70c <__alt_data_end+0xff80d70c>
  80d728:	303fe91e 	bne	r6,zero,80d6d0 <__alt_data_end+0xff80d6d0>
  80d72c:	003ff506 	br	80d704 <__alt_data_end+0xff80d704>
  80d730:	10c5c83a 	sub	r2,r2,r3
  80d734:	f800283a 	ret

0080d738 <__register_exitproc>:
  80d738:	defffa04 	addi	sp,sp,-24
  80d73c:	dc000315 	stw	r16,12(sp)
  80d740:	04002074 	movhi	r16,129
  80d744:	843e3b04 	addi	r16,r16,-1812
  80d748:	80c00017 	ldw	r3,0(r16)
  80d74c:	dc400415 	stw	r17,16(sp)
  80d750:	dfc00515 	stw	ra,20(sp)
  80d754:	18805217 	ldw	r2,328(r3)
  80d758:	2023883a 	mov	r17,r4
  80d75c:	10003726 	beq	r2,zero,80d83c <__register_exitproc+0x104>
  80d760:	10c00117 	ldw	r3,4(r2)
  80d764:	010007c4 	movi	r4,31
  80d768:	20c00e16 	blt	r4,r3,80d7a4 <__register_exitproc+0x6c>
  80d76c:	1a000044 	addi	r8,r3,1
  80d770:	8800221e 	bne	r17,zero,80d7fc <__register_exitproc+0xc4>
  80d774:	18c00084 	addi	r3,r3,2
  80d778:	18c7883a 	add	r3,r3,r3
  80d77c:	18c7883a 	add	r3,r3,r3
  80d780:	12000115 	stw	r8,4(r2)
  80d784:	10c7883a 	add	r3,r2,r3
  80d788:	19400015 	stw	r5,0(r3)
  80d78c:	0005883a 	mov	r2,zero
  80d790:	dfc00517 	ldw	ra,20(sp)
  80d794:	dc400417 	ldw	r17,16(sp)
  80d798:	dc000317 	ldw	r16,12(sp)
  80d79c:	dec00604 	addi	sp,sp,24
  80d7a0:	f800283a 	ret
  80d7a4:	00800034 	movhi	r2,0
  80d7a8:	10800004 	addi	r2,r2,0
  80d7ac:	10002626 	beq	r2,zero,80d848 <__register_exitproc+0x110>
  80d7b0:	01006404 	movi	r4,400
  80d7b4:	d9400015 	stw	r5,0(sp)
  80d7b8:	d9800115 	stw	r6,4(sp)
  80d7bc:	d9c00215 	stw	r7,8(sp)
  80d7c0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80d7c4:	d9400017 	ldw	r5,0(sp)
  80d7c8:	d9800117 	ldw	r6,4(sp)
  80d7cc:	d9c00217 	ldw	r7,8(sp)
  80d7d0:	10001d26 	beq	r2,zero,80d848 <__register_exitproc+0x110>
  80d7d4:	81000017 	ldw	r4,0(r16)
  80d7d8:	10000115 	stw	zero,4(r2)
  80d7dc:	02000044 	movi	r8,1
  80d7e0:	22405217 	ldw	r9,328(r4)
  80d7e4:	0007883a 	mov	r3,zero
  80d7e8:	12400015 	stw	r9,0(r2)
  80d7ec:	20805215 	stw	r2,328(r4)
  80d7f0:	10006215 	stw	zero,392(r2)
  80d7f4:	10006315 	stw	zero,396(r2)
  80d7f8:	883fde26 	beq	r17,zero,80d774 <__alt_data_end+0xff80d774>
  80d7fc:	18c9883a 	add	r4,r3,r3
  80d800:	2109883a 	add	r4,r4,r4
  80d804:	1109883a 	add	r4,r2,r4
  80d808:	21802215 	stw	r6,136(r4)
  80d80c:	01800044 	movi	r6,1
  80d810:	12406217 	ldw	r9,392(r2)
  80d814:	30cc983a 	sll	r6,r6,r3
  80d818:	4992b03a 	or	r9,r9,r6
  80d81c:	12406215 	stw	r9,392(r2)
  80d820:	21c04215 	stw	r7,264(r4)
  80d824:	01000084 	movi	r4,2
  80d828:	893fd21e 	bne	r17,r4,80d774 <__alt_data_end+0xff80d774>
  80d82c:	11006317 	ldw	r4,396(r2)
  80d830:	218cb03a 	or	r6,r4,r6
  80d834:	11806315 	stw	r6,396(r2)
  80d838:	003fce06 	br	80d774 <__alt_data_end+0xff80d774>
  80d83c:	18805304 	addi	r2,r3,332
  80d840:	18805215 	stw	r2,328(r3)
  80d844:	003fc606 	br	80d760 <__alt_data_end+0xff80d760>
  80d848:	00bfffc4 	movi	r2,-1
  80d84c:	003fd006 	br	80d790 <__alt_data_end+0xff80d790>

0080d850 <__call_exitprocs>:
  80d850:	defff504 	addi	sp,sp,-44
  80d854:	df000915 	stw	fp,36(sp)
  80d858:	dd400615 	stw	r21,24(sp)
  80d85c:	dc800315 	stw	r18,12(sp)
  80d860:	dfc00a15 	stw	ra,40(sp)
  80d864:	ddc00815 	stw	r23,32(sp)
  80d868:	dd800715 	stw	r22,28(sp)
  80d86c:	dd000515 	stw	r20,20(sp)
  80d870:	dcc00415 	stw	r19,16(sp)
  80d874:	dc400215 	stw	r17,8(sp)
  80d878:	dc000115 	stw	r16,4(sp)
  80d87c:	d9000015 	stw	r4,0(sp)
  80d880:	2839883a 	mov	fp,r5
  80d884:	04800044 	movi	r18,1
  80d888:	057fffc4 	movi	r21,-1
  80d88c:	00802074 	movhi	r2,129
  80d890:	10be3b04 	addi	r2,r2,-1812
  80d894:	12000017 	ldw	r8,0(r2)
  80d898:	45005217 	ldw	r20,328(r8)
  80d89c:	44c05204 	addi	r19,r8,328
  80d8a0:	a0001c26 	beq	r20,zero,80d914 <__call_exitprocs+0xc4>
  80d8a4:	a0800117 	ldw	r2,4(r20)
  80d8a8:	15ffffc4 	addi	r23,r2,-1
  80d8ac:	b8000d16 	blt	r23,zero,80d8e4 <__call_exitprocs+0x94>
  80d8b0:	14000044 	addi	r16,r2,1
  80d8b4:	8421883a 	add	r16,r16,r16
  80d8b8:	8421883a 	add	r16,r16,r16
  80d8bc:	84402004 	addi	r17,r16,128
  80d8c0:	a463883a 	add	r17,r20,r17
  80d8c4:	a421883a 	add	r16,r20,r16
  80d8c8:	e0001e26 	beq	fp,zero,80d944 <__call_exitprocs+0xf4>
  80d8cc:	80804017 	ldw	r2,256(r16)
  80d8d0:	e0801c26 	beq	fp,r2,80d944 <__call_exitprocs+0xf4>
  80d8d4:	bdffffc4 	addi	r23,r23,-1
  80d8d8:	843fff04 	addi	r16,r16,-4
  80d8dc:	8c7fff04 	addi	r17,r17,-4
  80d8e0:	bd7ff91e 	bne	r23,r21,80d8c8 <__alt_data_end+0xff80d8c8>
  80d8e4:	00800034 	movhi	r2,0
  80d8e8:	10800004 	addi	r2,r2,0
  80d8ec:	10000926 	beq	r2,zero,80d914 <__call_exitprocs+0xc4>
  80d8f0:	a0800117 	ldw	r2,4(r20)
  80d8f4:	1000301e 	bne	r2,zero,80d9b8 <__call_exitprocs+0x168>
  80d8f8:	a0800017 	ldw	r2,0(r20)
  80d8fc:	10003226 	beq	r2,zero,80d9c8 <__call_exitprocs+0x178>
  80d900:	a009883a 	mov	r4,r20
  80d904:	98800015 	stw	r2,0(r19)
  80d908:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  80d90c:	9d000017 	ldw	r20,0(r19)
  80d910:	a03fe41e 	bne	r20,zero,80d8a4 <__alt_data_end+0xff80d8a4>
  80d914:	dfc00a17 	ldw	ra,40(sp)
  80d918:	df000917 	ldw	fp,36(sp)
  80d91c:	ddc00817 	ldw	r23,32(sp)
  80d920:	dd800717 	ldw	r22,28(sp)
  80d924:	dd400617 	ldw	r21,24(sp)
  80d928:	dd000517 	ldw	r20,20(sp)
  80d92c:	dcc00417 	ldw	r19,16(sp)
  80d930:	dc800317 	ldw	r18,12(sp)
  80d934:	dc400217 	ldw	r17,8(sp)
  80d938:	dc000117 	ldw	r16,4(sp)
  80d93c:	dec00b04 	addi	sp,sp,44
  80d940:	f800283a 	ret
  80d944:	a0800117 	ldw	r2,4(r20)
  80d948:	80c00017 	ldw	r3,0(r16)
  80d94c:	10bfffc4 	addi	r2,r2,-1
  80d950:	15c01426 	beq	r2,r23,80d9a4 <__call_exitprocs+0x154>
  80d954:	80000015 	stw	zero,0(r16)
  80d958:	183fde26 	beq	r3,zero,80d8d4 <__alt_data_end+0xff80d8d4>
  80d95c:	95c8983a 	sll	r4,r18,r23
  80d960:	a0806217 	ldw	r2,392(r20)
  80d964:	a5800117 	ldw	r22,4(r20)
  80d968:	2084703a 	and	r2,r4,r2
  80d96c:	10000b26 	beq	r2,zero,80d99c <__call_exitprocs+0x14c>
  80d970:	a0806317 	ldw	r2,396(r20)
  80d974:	2088703a 	and	r4,r4,r2
  80d978:	20000c1e 	bne	r4,zero,80d9ac <__call_exitprocs+0x15c>
  80d97c:	89400017 	ldw	r5,0(r17)
  80d980:	d9000017 	ldw	r4,0(sp)
  80d984:	183ee83a 	callr	r3
  80d988:	a0800117 	ldw	r2,4(r20)
  80d98c:	15bfbf1e 	bne	r2,r22,80d88c <__alt_data_end+0xff80d88c>
  80d990:	98800017 	ldw	r2,0(r19)
  80d994:	153fcf26 	beq	r2,r20,80d8d4 <__alt_data_end+0xff80d8d4>
  80d998:	003fbc06 	br	80d88c <__alt_data_end+0xff80d88c>
  80d99c:	183ee83a 	callr	r3
  80d9a0:	003ff906 	br	80d988 <__alt_data_end+0xff80d988>
  80d9a4:	a5c00115 	stw	r23,4(r20)
  80d9a8:	003feb06 	br	80d958 <__alt_data_end+0xff80d958>
  80d9ac:	89000017 	ldw	r4,0(r17)
  80d9b0:	183ee83a 	callr	r3
  80d9b4:	003ff406 	br	80d988 <__alt_data_end+0xff80d988>
  80d9b8:	a0800017 	ldw	r2,0(r20)
  80d9bc:	a027883a 	mov	r19,r20
  80d9c0:	1029883a 	mov	r20,r2
  80d9c4:	003fb606 	br	80d8a0 <__alt_data_end+0xff80d8a0>
  80d9c8:	0005883a 	mov	r2,zero
  80d9cc:	003ffb06 	br	80d9bc <__alt_data_end+0xff80d9bc>

0080d9d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80d9d0:	defffd04 	addi	sp,sp,-12
  80d9d4:	df000215 	stw	fp,8(sp)
  80d9d8:	df000204 	addi	fp,sp,8
  80d9dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80d9e0:	d0270145 	stb	zero,-25595(gp)
  80d9e4:	e0bfff17 	ldw	r2,-4(fp)
  80d9e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80d9ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80d9f0:	10000226 	beq	r2,zero,80d9fc <_exit+0x2c>
    ALT_SIM_FAIL();
  80d9f4:	002af070 	cmpltui	zero,zero,43969
  80d9f8:	00000106 	br	80da00 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80d9fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80da00:	003fff06 	br	80da00 <__alt_data_end+0xff80da00>
