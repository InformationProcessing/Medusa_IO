
snake2.elf:     file format elf32-littlenios2
snake2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000057c4 memsz 0x000057c4 flags r-x
    LOAD off    0x000067e4 vaddr 0x008057e4 paddr 0x00805b08 align 2**12
         filesz 0x00000324 memsz 0x00000324 flags rw-
    LOAD off    0x00006e2c vaddr 0x00805e2c paddr 0x00805e2c align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000514c  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000518  008052cc  008052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000324  008057e4  00805b08  000067e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00805e2c  00805e2c  00006e2c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00805fa8  00805fa8  00006b08  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006b08  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000007f0  00000000  00000000  00006b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d0e7  00000000  00000000  00007320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000041f2  00000000  00000000  00014407  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004e5b  00000000  00000000  000185f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d34  00000000  00000000  0001d454  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000028e7  00000000  00000000  0001e188  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000090f6  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00029b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ca8  00000000  00000000  00029b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002ca66  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002ca69  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002ca6c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002ca6d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002ca6e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002ca72  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002ca76  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002ca7a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002ca83  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002ca8c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  0002ca95  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  0002ca9a  2**0
                  CONTENTS, READONLY
 29 .jdi          0000433a  00000000  00000000  0002caca  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000ab678  00000000  00000000  00030e04  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
008052cc l    d  .rodata	00000000 .rodata
008057e4 l    d  .rwdata	00000000 .rwdata
00805e2c l    d  .bss	00000000 .bss
00805fa8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../snake2_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00805e34 l     O .bss	00000004 count.3438
00805e2c l     O .bss	00000008 lasttime.3439
0080542a l     O .rodata	0000002d CSWTCH.88
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803c98 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0080424c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00805658 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0080596c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00805ae8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00805a4c l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00805134 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00805e98 g     O .bss	00000004 alt_instruction_exception_handler
00804bd0 g     F .text	0000002c alt_main
00803848 g     F .text	0000002c strcpy
00805ea8 g     O .bss	00000100 alt_irq
00800810 g     F .text	00000070 disp_timer_init
00805e4c g     O .bss	00000004 norm_const
00805b08 g       *ABS*	00000000 __flash_rwdata_start
00805fa8 g       *ABS*	00000000 __alt_heap_start
00803a40 g     F .text	00000008 strtok_r
00805e44 g     O .bss	00000004 disp_length
00803698 g     F .text	0000004c printf
00805e90 g     O .bss	00000004 altera_avalon_timer_ts_freq
00804960 g     F .text	00000060 memmove
008039b0 g     F .text	00000090 __strtok_r
00805e38 g     O .bss	00000004 hfixed
00805aec g     O .rwdata	00000004 jtag_uart
00805220 g     F .text	00000008 altera_nios2_gen2_irq_init
008048b8 g     F .text	000000a8 __sfvwrite_small_str
00800000 g     F .entry	0000000c __reset
00805028 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00805e40 g     O .bss	00000004 led_val
00800020 g       *ABS*	00000000 __flash_exceptions_start
00805e7c g     O .bss	00000004 errno
00805e88 g     O .bss	00000004 alt_argv
0080dad0 g       *ABS*	00000000 _gp
0080047c g     F .text	00000144 coeffs_to_fixed
00805a78 g     O .rwdata	00000030 alt_fd_list
008051a8 g     F .text	00000074 alt_find_dev
00805e50 g     O .bss	00000004 cmdbuffer
00805e48 g     O .bss	00000004 disp_offset
00805228 g     F .text	00000074 alt_exception_cause_generated_bad_addr
008008f0 g     F .text	000000d4 to_hex
00800398 g     F .text	000000e4 convolve_fixed
00804ea8 g     F .text	0000005c altera_avalon_jtag_uart_read
008033d8 g     F .text	00000014 malloc
0080365c g     F .text	0000003c _printf_r
00801728 g     F .text	00000064 .hidden __udivsi3
008005ec g     F .text	00000098 write_to_disp
0080021c g     F .text	00000038 ring_buf_push
008036e4 g     F .text	00000050 _sbrk_r
00805af0 g     O .rwdata	00000004 alt_max_fd
00804a5c g     F .text	00000094 alt_irq_register
00805e3c g     O .bss	00000004 debug
0080180c g     F .text	000008ac .hidden __adddf3
0080070c g     F .text	00000094 read_request
008009c4 g     F .text	00000014 throw_code
00805adc g     O .rwdata	00000004 _global_impure_ptr
00805fa8 g       *ABS*	00000000 __bss_end
00804a18 g     F .text	00000044 alt_getchar
00801034 g     F .text	000005fc .hidden __udivdi3
00805e54 g     O .bss	00000004 x_buf
008001bc g     F .text	00000060 led_timer_isr
008007a0 g     F .text	00000070 acc_timer_init
00803c7c g     F .text	0000001c strtol
00805e80 g     O .bss	00000004 alt_irq_active
00805e58 g     O .bss	00000004 disp_buf
008000fc g     F .exceptions	00000060 alt_irq_handler
00805aa8 g     O .rwdata	00000028 alt_dev_null
00805130 g     F .text	00000004 alt_dcache_flush_all
008032f4 g     F .text	00000080 .hidden __fixdfsi
00800254 g     F .text	00000114 acc_timer_isr
008005c0 g     F .text	0000002c letter_to_hex
00805b08 g       *ABS*	00000000 __ram_rwdata_end
00805af4 g     O .rwdata	00000008 alt_dev_list
00804e00 g     F .text	00000060 write
00804fc8 g     F .text	00000008 alt_timestamp_freq
008057e4 g       *ABS*	00000000 __ram_rodata_end
0080178c g     F .text	00000058 .hidden __umodsi3
00805fa8 g       *ABS*	00000000 end
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00803374 g     F .text	00000064 .hidden __clzsi2
00804f04 g     F .text	00000034 altera_avalon_jtag_uart_write
008042b8 g     F .text	0000052c ___vfprintf_internal_r
00803734 g     F .text	00000064 _sprintf_r
00803420 g     F .text	000000e4 _free_r
00804bfc g     F .text	00000170 alt_printf
00805ad0 g     O .rwdata	00000004 quality
00800180 g     F .text	0000003c _start
008006bc g     F .text	00000050 clr_disp
00805e5c g     O .bss	00000004 y_buf
00804e80 g     F .text	00000028 alt_sys_init
00804fd8 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00805e9c g     O .bss	0000000c hexbuffers
008017e4 g     F .text	00000028 .hidden __mulsi3
008057e4 g       *ABS*	00000000 __ram_rwdata_start
008052cc g       *ABS*	00000000 __ram_rodata_start
00803890 g     F .text	00000054 strncpy
00805080 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
008038e4 g     F .text	000000cc strtok
0080529c g     F .text	00000030 memcmp
00805fa8 g       *ABS*	00000000 __alt_stack_base
008020b8 g     F .text	000009d0 .hidden __divdf3
00802a88 g     F .text	0000086c .hidden __muldf3
0080513c g     F .text	0000006c alt_dev_llist_insert
00804db4 g     F .text	0000004c sbrk
00803d04 g     F .text	0000052c ___svfprintf_internal_r
00804800 g     F .text	000000b8 __sfvwrite_small_dev
00805e2c g       *ABS*	00000000 __bss_start
00803400 g     F .text	00000020 memset
00800e60 g     F .text	000001d4 main
00805e84 g     O .bss	00000004 alt_envp
01000000 g       *ABS*	00000000 __alt_heap_limit
00803a48 g     F .text	00000234 _strtol_r
00804f38 g     F .text	00000044 alt_timestamp_start
00803504 g     F .text	00000158 _malloc_r
00805b04 g     O .rwdata	00000004 alt_errno
00805ad4 g     O .rwdata	00000004 led_offset
00801630 g     F .text	00000084 .hidden __divsi3
00803810 g     F .text	00000038 strcmp
008052cc g       *ABS*	00000000 __flash_rodata_start
00800368 g     F .text	00000030 ring_buf_read
00804e60 g     F .text	00000020 alt_irq_init
008009d8 g     F .text	00000488 parse_request
00803798 g     F .text	00000078 sprintf
00805457 g     O .rodata	00000100 .hidden __clz_tab
008049c0 g     F .text	00000058 _write_r
00805ae0 g     O .rwdata	00000004 _impure_ptr
00805e8c g     O .bss	00000004 alt_argc
00805e94 g     O .bss	00000004 altera_avalon_timer_ts_base
008057e4 g     O .rwdata	00000188 h
00800020 g       .exceptions	00000000 alt_irq_entry
00805afc g     O .rwdata	00000008 alt_fs_list
00804230 g     F .text	0000001c __vfprintf_internal_unused
00805e60 g     O .bss	00000004 z_buf
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804fd0 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00804f7c g     F .text	0000004c alt_timestamp
00805b08 g       *ABS*	00000000 _edata
00805fa8 g       *ABS*	00000000 _end
00800684 g     F .text	00000038 disp_timer_isr
00800180 g       *ABS*	00000000 __ram_exceptions_end
00805e64 g     O .bss	00000008 latency
008016b4 g     F .text	00000074 .hidden __modsi3
00805ad8 g     O .rwdata	00000004 __ctype_ptr__
008050d8 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00805557 g     O .rodata	00000101 _ctype_
0080000c g       .entry	00000000 _exit
00804fec g     F .text	00000020 alt_up_accelerometer_spi_read
0080500c g     F .text	0000001c alt_up_accelerometer_spi_write
00803874 g     F .text	0000001c strlen
00804d6c g     F .text	00000048 alt_putchar
00805e74 g     O .bss	00000004 __malloc_sbrk_start
0080521c g     F .text	00000004 alt_icache_flush_all
00805ae4 g     O .rwdata	00000004 alt_priority_mask
00805e78 g     O .bss	00000004 __malloc_free_list
008047e4 g     F .text	0000001c __vfprintf_internal
00805e6c g     O .bss	00000004 acc_dev
00800880 g     F .text	00000070 led_timer_init
00804af0 g     F .text	000000e0 alt_load
008033ec g     F .text	00000014 free
00805e70 g     O .bss	00000004 led_buf



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80010c:	04002034 	movhi	r16,128
  800110:	8417aa04 	addi	r16,r16,24232

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	000b883a 	mov	r5,zero
    mask = 1;
  800118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	1888703a 	and	r4,r3,r2
  800120:	20000b26 	beq	r4,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800124:	280490fa 	slli	r2,r5,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	183ff51e 	bne	r3,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	1085883a 	add	r2,r2,r2
      i++;
  800154:	29400044 	addi	r5,r5,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a0f217 	ldw	r2,-31800(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6b6b414 	ori	gp,gp,56016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	10978b14 	ori	r2,r2,24108

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d7ea14 	ori	r3,r3,24488

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	0804af00 	call	804af0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	0804bd00 	call	804bd0 <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <led_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void led_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  8001bc:	00804034 	movhi	r2,256
  8001c0:	10844804 	addi	r2,r2,4384
  8001c4:	10000035 	stwio	zero,0(r2)

	if (led_offset != -1){
  8001c8:	d0a00117 	ldw	r2,-32764(gp)
  8001cc:	017fffc4 	movi	r5,-1
  8001d0:	11401126 	beq	r2,r5,800218 <led_timer_isr+0x5c>


		if (led_buf[led_offset] == '\0'){
  8001d4:	d0e0e817 	ldw	r3,-31840(gp)
  8001d8:	1887883a 	add	r3,r3,r2
  8001dc:	19000007 	ldb	r4,0(r3)
  8001e0:	00c04034 	movhi	r3,256
  8001e4:	18c47804 	addi	r3,r3,4576
  8001e8:	2000031e 	bne	r4,zero,8001f8 <led_timer_isr+0x3c>
			led_offset = -1;
  8001ec:	d1600115 	stw	r5,-32764(gp)
			IOWR(LED_BASE, 0, led_val);
  8001f0:	d0a0dc17 	ldw	r2,-31888(gp)
  8001f4:	00000506 	br	80020c <led_timer_isr+0x50>
  8001f8:	10800044 	addi	r2,r2,1

		}
		else if (led_buf[led_offset] == '1'){
  8001fc:	01400c44 	movi	r5,49
			led_offset++;
  800200:	d0a00115 	stw	r2,-32764(gp)
		if (led_buf[led_offset] == '\0'){
			led_offset = -1;
			IOWR(LED_BASE, 0, led_val);

		}
		else if (led_buf[led_offset] == '1'){
  800204:	2140031e 	bne	r4,r5,800214 <led_timer_isr+0x58>
			led_offset++;
			IOWR(LED_BASE, 0, 1023);
  800208:	0080ffc4 	movi	r2,1023
  80020c:	18800035 	stwio	r2,0(r3)
  800210:	f800283a 	ret
		}
		else{
			led_offset++;
			IOWR(LED_BASE, 0, 0);
  800214:	18000035 	stwio	zero,0(r3)
  800218:	f800283a 	ret

0080021c <ring_buf_push>:
	RING_T* values;
};

//Buffer functions
void ring_buf_push(struct ring_buffer* buf, RING_T in){
	if (buf->next_free < 0){
  80021c:	20800117 	ldw	r2,4(r4)
  800220:	1000030e 	bge	r2,zero,800230 <ring_buf_push+0x14>
		buf->next_free = buf ->size-1;
  800224:	20800017 	ldw	r2,0(r4)
  800228:	10bfffc4 	addi	r2,r2,-1
  80022c:	20800115 	stw	r2,4(r4)
	}
	(buf->values)[buf->next_free] = in;
  800230:	20c00117 	ldw	r3,4(r4)
  800234:	21800217 	ldw	r6,8(r4)
  800238:	18c5883a 	add	r2,r3,r3
  80023c:	1085883a 	add	r2,r2,r2
  800240:	3085883a 	add	r2,r6,r2
  800244:	11400015 	stw	r5,0(r2)
	(buf->next_free)--;
  800248:	18ffffc4 	addi	r3,r3,-1
  80024c:	20c00115 	stw	r3,4(r4)
  800250:	f800283a 	ret

00800254 <acc_timer_isr>:
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  800254:	defffa04 	addi	sp,sp,-24
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800258:	00804034 	movhi	r2,256
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  80025c:	dfc00515 	stw	ra,20(sp)
  800260:	dc400415 	stw	r17,16(sp)
  800264:	dc000315 	stw	r16,12(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800268:	10843004 	addi	r2,r2,4288
  80026c:	10000035 	stwio	zero,0(r2)


    alt_32 x,y,z;

    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800270:	d120e717 	ldw	r4,-31844(gp)
  800274:	d9400204 	addi	r5,sp,8
  800278:	08050280 	call	805028 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  80027c:	d120e717 	ldw	r4,-31844(gp)
  800280:	d9400104 	addi	r5,sp,4
  800284:	08050800 	call	805080 <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800288:	d120e717 	ldw	r4,-31844(gp)
  80028c:	d80b883a 	mov	r5,sp
  800290:	08050d80 	call	8050d8 <alt_up_accelerometer_spi_read_z_axis>

	ring_buf_push(x_buf, x);
  800294:	d9400217 	ldw	r5,8(sp)
  800298:	d120e117 	ldw	r4,-31868(gp)
  80029c:	080021c0 	call	80021c <ring_buf_push>
	ring_buf_push(y_buf, y);
  8002a0:	d9400117 	ldw	r5,4(sp)
  8002a4:	d120e317 	ldw	r4,-31860(gp)
  8002a8:	080021c0 	call	80021c <ring_buf_push>
	ring_buf_push(z_buf, z);
  8002ac:	d9400017 	ldw	r5,0(sp)
  8002b0:	d120e417 	ldw	r4,-31856(gp)
  8002b4:	080021c0 	call	80021c <ring_buf_push>

	//iNTERRUPT FREQUENCY MONITORING
	static int count;
	static alt_64 lasttime;

    if(debug && ((count & 4095) == 0) ){
  8002b8:	d0a0db17 	ldw	r2,-31892(gp)
  8002bc:	10002226 	beq	r2,zero,800348 <acc_timer_isr+0xf4>
  8002c0:	d0a0d917 	ldw	r2,-31900(gp)
  8002c4:	1083ffcc 	andi	r2,r2,4095
  8002c8:	10001f1e 	bne	r2,zero,800348 <acc_timer_isr+0xf4>
    	printf("Avg sampling period (us): %i\n", (alt_timestamp()-lasttime)/4096 /(alt_timestamp_freq()/1000000) );
  8002cc:	0804f7c0 	call	804f7c <alt_timestamp>
  8002d0:	d460d717 	ldw	r17,-31908(gp)
  8002d4:	d160d817 	ldw	r5,-31904(gp)
  8002d8:	1463c83a 	sub	r17,r2,r17
  8002dc:	1445803a 	cmpltu	r2,r2,r17
  8002e0:	1947c83a 	sub	r3,r3,r5
  8002e4:	1887c83a 	sub	r3,r3,r2
  8002e8:	1804953a 	slli	r2,r3,20
  8002ec:	8822d33a 	srli	r17,r17,12
  8002f0:	1820d33a 	srli	r16,r3,12
  8002f4:	1462b03a 	or	r17,r2,r17
  8002f8:	0804fc80 	call	804fc8 <alt_timestamp_freq>
  8002fc:	014003f4 	movhi	r5,15
  800300:	29509004 	addi	r5,r5,16960
  800304:	1009883a 	mov	r4,r2
  800308:	08017280 	call	801728 <__udivsi3>
  80030c:	000f883a 	mov	r7,zero
  800310:	100d883a 	mov	r6,r2
  800314:	8809883a 	mov	r4,r17
  800318:	800b883a 	mov	r5,r16
  80031c:	08010340 	call	801034 <__udivdi3>
  800320:	01002034 	movhi	r4,128
  800324:	100b883a 	mov	r5,r2
  800328:	180d883a 	mov	r6,r3
  80032c:	2114b304 	addi	r4,r4,21196
  800330:	08036980 	call	803698 <printf>
		count = 1;
  800334:	00800044 	movi	r2,1
  800338:	d0a0d915 	stw	r2,-31900(gp)
		lasttime = alt_timestamp();
  80033c:	0804f7c0 	call	804f7c <alt_timestamp>
  800340:	d0a0d715 	stw	r2,-31908(gp)
  800344:	d0e0d815 	stw	r3,-31904(gp)
    }
    count++;
  800348:	d0a0d917 	ldw	r2,-31900(gp)
  80034c:	10800044 	addi	r2,r2,1
  800350:	d0a0d915 	stw	r2,-31900(gp)
}
  800354:	dfc00517 	ldw	ra,20(sp)
  800358:	dc400417 	ldw	r17,16(sp)
  80035c:	dc000317 	ldw	r16,12(sp)
  800360:	dec00604 	addi	sp,sp,24
  800364:	f800283a 	ret

00800368 <ring_buf_read>:
	(buf->next_free)--;
}

RING_T ring_buf_read(struct ring_buffer* buf, RING_T idx){
	int mapped_idx;
	if (buf->next_free+1+idx >= buf->size){
  800368:	20800117 	ldw	r2,4(r4)
  80036c:	10800044 	addi	r2,r2,1
  800370:	114b883a 	add	r5,r2,r5
  800374:	20800017 	ldw	r2,0(r4)
  800378:	28800116 	blt	r5,r2,800380 <ring_buf_read+0x18>
		mapped_idx = buf->next_free+1+idx - buf->size;
  80037c:	288bc83a 	sub	r5,r5,r2
	}
	else {
		mapped_idx = buf->next_free+1+idx;
	}

	return buf->values[mapped_idx];
  800380:	20800217 	ldw	r2,8(r4)
  800384:	294b883a 	add	r5,r5,r5
  800388:	294b883a 	add	r5,r5,r5
  80038c:	114b883a 	add	r5,r2,r5
}
  800390:	28800017 	ldw	r2,0(r5)
  800394:	f800283a 	ret

00800398 <convolve_fixed>:

alt_32 convolve_fixed(struct ring_buffer* buf, alt_32 coefficients[]  ){
  800398:	defffa04 	addi	sp,sp,-24
  80039c:	dd000415 	stw	r20,16(sp)
  8003a0:	2029883a 	mov	r20,r4
  8003a4:	dfc00515 	stw	ra,20(sp)
  8003a8:	dcc00315 	stw	r19,12(sp)
  8003ac:	dc800215 	stw	r18,8(sp)
  8003b0:	dc400115 	stw	r17,4(sp)
  8003b4:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8003b8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8003bc:	00bfff84 	movi	r2,-2
  8003c0:	1884703a 	and	r2,r3,r2
  8003c4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  8003c8:	d120ec17 	ldw	r4,-31824(gp)
  8003cc:	00bff7c4 	movi	r2,-33
  8003d0:	2084703a 	and	r2,r4,r2
  8003d4:	d0a0ec15 	stw	r2,-31824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8003d8:	d0a0ec17 	ldw	r2,-31824(gp)
  8003dc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8003e0:	1801703a 	wrctl	status,r3
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	alt_32 sum = 0;
	for(int i = 0; i < quality; i ++){
  8003e4:	d4e00017 	ldw	r19,-32768(gp)
  8003e8:	2821883a 	mov	r16,r5
  8003ec:	0023883a 	mov	r17,zero

	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	alt_32 sum = 0;
  8003f0:	0025883a 	mov	r18,zero
	for(int i = 0; i < quality; i ++){
  8003f4:	8cc00b0e 	bge	r17,r19,800424 <convolve_fixed+0x8c>
		sum += (coefficients[i]*ring_buf_read(buf, i)>>POINT);
  8003f8:	880b883a 	mov	r5,r17
  8003fc:	a009883a 	mov	r4,r20
  800400:	08003680 	call	800368 <ring_buf_read>
  800404:	81400017 	ldw	r5,0(r16)
  800408:	1009883a 	mov	r4,r2
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	alt_32 sum = 0;
	for(int i = 0; i < quality; i ++){
  80040c:	8c400044 	addi	r17,r17,1
		sum += (coefficients[i]*ring_buf_read(buf, i)>>POINT);
  800410:	08017e40 	call	8017e4 <__mulsi3>
  800414:	1005d2fa 	srai	r2,r2,11
  800418:	84000104 	addi	r16,r16,4
  80041c:	90a5883a 	add	r18,r18,r2
  800420:	003ff406 	br	8003f4 <__alt_data_end+0xff8003f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800424:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800428:	00bfff84 	movi	r2,-2
  80042c:	1884703a 	and	r2,r3,r2
  800430:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  800434:	d0a0ec17 	ldw	r2,-31824(gp)
  800438:	10800814 	ori	r2,r2,32
  80043c:	d0a0ec15 	stw	r2,-31824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800440:	d0a0ec17 	ldw	r2,-31824(gp)
  800444:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800448:	1801703a 	wrctl	status,r3
	}

	//Re-enable interrupts from state
	//alt_irq_enable_all(state);
	alt_irq_enable(TIMER_IRQ);
	return ((sum*norm_const)>>POINT);
  80044c:	d160df17 	ldw	r5,-31876(gp)
  800450:	9009883a 	mov	r4,r18
  800454:	08017e40 	call	8017e4 <__mulsi3>

}
  800458:	1005d2fa 	srai	r2,r2,11
  80045c:	dfc00517 	ldw	ra,20(sp)
  800460:	dd000417 	ldw	r20,16(sp)
  800464:	dcc00317 	ldw	r19,12(sp)
  800468:	dc800217 	ldw	r18,8(sp)
  80046c:	dc400117 	ldw	r17,4(sp)
  800470:	dc000017 	ldw	r16,0(sp)
  800474:	dec00604 	addi	sp,sp,24
  800478:	f800283a 	ret

0080047c <coeffs_to_fixed>:
void coeffs_to_fixed(){
	if (hfixed == NULL){
  80047c:	d120da17 	ldw	r4,-31896(gp)
	//alt_irq_enable_all(state);
	alt_irq_enable(TIMER_IRQ);
	return ((sum*norm_const)>>POINT);

}
void coeffs_to_fixed(){
  800480:	defff704 	addi	sp,sp,-36
  800484:	dfc00815 	stw	ra,32(sp)
  800488:	ddc00715 	stw	r23,28(sp)
  80048c:	dd800615 	stw	r22,24(sp)
  800490:	dd400515 	stw	r21,20(sp)
  800494:	dd000415 	stw	r20,16(sp)
  800498:	dcc00315 	stw	r19,12(sp)
  80049c:	dc800215 	stw	r18,8(sp)
  8004a0:	dc400115 	stw	r17,4(sp)
  8004a4:	dc000015 	stw	r16,0(sp)
	if (hfixed == NULL){
  8004a8:	2000041e 	bne	r4,zero,8004bc <coeffs_to_fixed+0x40>
		hfixed = malloc(RING_SIZE * sizeof(FIXED));
  8004ac:	01003b04 	movi	r4,236
  8004b0:	08033d80 	call	8033d8 <malloc>
  8004b4:	d0a0da15 	stw	r2,-31896(gp)
  8004b8:	00000306 	br	8004c8 <coeffs_to_fixed+0x4c>
	}
	else{
		memset(hfixed, 0, RING_SIZE);
  8004bc:	01800ec4 	movi	r6,59
  8004c0:	000b883a 	mov	r5,zero
  8004c4:	08034000 	call	803400 <memset>

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  8004c8:	d0a00017 	ldw	r2,-32768(gp)
  8004cc:	d520da17 	ldw	r20,-31896(gp)

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){

		hfixed[real_index]= (FIXED)(h[i]*scalefactor);
  8004d0:	05c02034 	movhi	r23,128

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  8004d4:	1006d7fa 	srli	r3,r2,31
	}
	else{
		memset(hfixed, 0, RING_SIZE);
	}

	double sum = 0;
  8004d8:	0027883a 	mov	r19,zero
  8004dc:	0025883a 	mov	r18,zero

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  8004e0:	1885883a 	add	r2,r3,r2
  8004e4:	1023d07a 	srai	r17,r2,1
	int upper_bound = RING_SIZE/2 + quality/2;
  8004e8:	1005d07a 	srai	r2,r2,1

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){

		hfixed[real_index]= (FIXED)(h[i]*scalefactor);
  8004ec:	bdd5f904 	addi	r23,r23,22500

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  8004f0:	0463c83a 	sub	r17,zero,r17
  8004f4:	8c400744 	addi	r17,r17,29
	int upper_bound = RING_SIZE/2 + quality/2;
  8004f8:	14000744 	addi	r16,r2,29

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){
  8004fc:	8c00170e 	bge	r17,r16,80055c <coeffs_to_fixed+0xe0>

		hfixed[real_index]= (FIXED)(h[i]*scalefactor);
  800500:	880490fa 	slli	r2,r17,3
  800504:	000d883a 	mov	r6,zero
  800508:	01d02834 	movhi	r7,16544
  80050c:	15c5883a 	add	r2,r2,r23
  800510:	15800017 	ldw	r22,0(r2)
  800514:	15400117 	ldw	r21,4(r2)
	int lower_bound = RING_SIZE/2 - quality/2;
	int upper_bound = RING_SIZE/2 + quality/2;

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){
  800518:	8c400044 	addi	r17,r17,1

		hfixed[real_index]= (FIXED)(h[i]*scalefactor);
  80051c:	b009883a 	mov	r4,r22
  800520:	a80b883a 	mov	r5,r21
  800524:	0802a880 	call	802a88 <__muldf3>
  800528:	180b883a 	mov	r5,r3
  80052c:	1009883a 	mov	r4,r2
  800530:	08032f40 	call	8032f4 <__fixdfsi>
  800534:	a0800015 	stw	r2,0(r20)
		sum += h[i];
  800538:	9809883a 	mov	r4,r19
  80053c:	900b883a 	mov	r5,r18
  800540:	b00d883a 	mov	r6,r22
  800544:	a80f883a 	mov	r7,r21
  800548:	080180c0 	call	80180c <__adddf3>
  80054c:	1027883a 	mov	r19,r2
  800550:	1825883a 	mov	r18,r3
  800554:	a5000104 	addi	r20,r20,4
  800558:	003fe806 	br	8004fc <__alt_data_end+0xff8004fc>

	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
  80055c:	980d883a 	mov	r6,r19
  800560:	900f883a 	mov	r7,r18
  800564:	0009883a 	mov	r4,zero
  800568:	014ffc34 	movhi	r5,16368
  80056c:	08020b80 	call	8020b8 <__divdf3>
  800570:	000d883a 	mov	r6,zero
  800574:	01d02834 	movhi	r7,16544
  800578:	1009883a 	mov	r4,r2
  80057c:	180b883a 	mov	r5,r3
  800580:	0802a880 	call	802a88 <__muldf3>
  800584:	1009883a 	mov	r4,r2
  800588:	180b883a 	mov	r5,r3
  80058c:	08032f40 	call	8032f4 <__fixdfsi>
  800590:	d0a0df15 	stw	r2,-31876(gp)

}
  800594:	dfc00817 	ldw	ra,32(sp)
  800598:	ddc00717 	ldw	r23,28(sp)
  80059c:	dd800617 	ldw	r22,24(sp)
  8005a0:	dd400517 	ldw	r21,20(sp)
  8005a4:	dd000417 	ldw	r20,16(sp)
  8005a8:	dcc00317 	ldw	r19,12(sp)
  8005ac:	dc800217 	ldw	r18,8(sp)
  8005b0:	dc400117 	ldw	r17,4(sp)
  8005b4:	dc000017 	ldw	r16,0(sp)
  8005b8:	dec00904 	addi	sp,sp,36
  8005bc:	f800283a 	ret

008005c0 <letter_to_hex>:


int letter_to_hex(char in){
  8005c0:	213ff484 	addi	r4,r4,-46
  8005c4:	21003fcc 	andi	r4,r4,255
  8005c8:	00800b04 	movi	r2,44
  8005cc:	11000536 	bltu	r2,r4,8005e4 <letter_to_hex+0x24>
  8005d0:	00802034 	movhi	r2,128
  8005d4:	10950a84 	addi	r2,r2,21546
  8005d8:	1109883a 	add	r4,r2,r4
  8005dc:	20800003 	ldbu	r2,0(r4)
  8005e0:	f800283a 	ret

	switch(in){
  8005e4:	00803fc4 	movi	r2,255
		default:
			return 0b11111111;
	};

	return 0;
}
  8005e8:	f800283a 	ret

008005ec <write_to_disp>:

//Display processing
void write_to_disp(char* str, int offset){
  8005ec:	defffe04 	addi	sp,sp,-8
  8005f0:	dc000015 	stw	r16,0(sp)
  8005f4:	dfc00115 	stw	ra,4(sp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, letter_to_hex(str[offset]));
  8005f8:	2161883a 	add	r16,r4,r5
  8005fc:	81000007 	ldb	r4,0(r16)
  800600:	08005c00 	call	8005c0 <letter_to_hex>
  800604:	00c04034 	movhi	r3,256
  800608:	18c47404 	addi	r3,r3,4560
  80060c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, letter_to_hex(str[offset+1]));
  800610:	81000047 	ldb	r4,1(r16)
  800614:	08005c00 	call	8005c0 <letter_to_hex>
  800618:	00c04034 	movhi	r3,256
  80061c:	18c47004 	addi	r3,r3,4544
  800620:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, letter_to_hex(str[offset+2]));
  800624:	81000087 	ldb	r4,2(r16)
  800628:	08005c00 	call	8005c0 <letter_to_hex>
  80062c:	00c04034 	movhi	r3,256
  800630:	18c46c04 	addi	r3,r3,4528
  800634:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, letter_to_hex(str[offset+3]));
  800638:	810000c7 	ldb	r4,3(r16)
  80063c:	08005c00 	call	8005c0 <letter_to_hex>
  800640:	00c04034 	movhi	r3,256
  800644:	18c46804 	addi	r3,r3,4512
  800648:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, letter_to_hex(str[offset+4]));
  80064c:	81000107 	ldb	r4,4(r16)
  800650:	08005c00 	call	8005c0 <letter_to_hex>
  800654:	00c04034 	movhi	r3,256
  800658:	18c46404 	addi	r3,r3,4496
  80065c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, letter_to_hex(str[offset+5]));
  800660:	81000147 	ldb	r4,5(r16)
  800664:	08005c00 	call	8005c0 <letter_to_hex>
  800668:	00c04034 	movhi	r3,256
  80066c:	18c46004 	addi	r3,r3,4480
  800670:	18800035 	stwio	r2,0(r3)
}
  800674:	dfc00117 	ldw	ra,4(sp)
  800678:	dc000017 	ldw	r16,0(sp)
  80067c:	dec00204 	addi	sp,sp,8
  800680:	f800283a 	ret

00800684 <disp_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);

}

void disp_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  800684:	00804034 	movhi	r2,256
  800688:	10843804 	addi	r2,r2,4320
  80068c:	10000035 	stwio	zero,0(r2)

    if(disp_buf[disp_offset+5] == '\0'){
  800690:	d120e217 	ldw	r4,-31864(gp)
  800694:	d0a0de17 	ldw	r2,-31880(gp)
  800698:	2087883a 	add	r3,r4,r2
  80069c:	18c00147 	ldb	r3,5(r3)
  8006a0:	1800021e 	bne	r3,zero,8006ac <disp_timer_isr+0x28>
    	disp_offset = 0;
  8006a4:	d020de15 	stw	zero,-31880(gp)
  8006a8:	00000206 	br	8006b4 <disp_timer_isr+0x30>
    }
    else{
    	disp_offset++;
  8006ac:	10800044 	addi	r2,r2,1
  8006b0:	d0a0de15 	stw	r2,-31880(gp)
    }
    write_to_disp(disp_buf,disp_offset);
  8006b4:	d160de17 	ldw	r5,-31880(gp)
  8006b8:	08005ec1 	jmpi	8005ec <write_to_disp>

008006bc <clr_disp>:
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, letter_to_hex(str[offset+5]));
}


void clr_disp(){
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 255);
  8006bc:	00c04034 	movhi	r3,256
  8006c0:	00803fc4 	movi	r2,255
  8006c4:	18c46004 	addi	r3,r3,4480
  8006c8:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 255);
  8006cc:	00c04034 	movhi	r3,256
  8006d0:	18c46404 	addi	r3,r3,4496
  8006d4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 255);
  8006d8:	00c04034 	movhi	r3,256
  8006dc:	18c46804 	addi	r3,r3,4512
  8006e0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 255);
  8006e4:	00c04034 	movhi	r3,256
  8006e8:	18c46c04 	addi	r3,r3,4528
  8006ec:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 255);
  8006f0:	00c04034 	movhi	r3,256
  8006f4:	18c47004 	addi	r3,r3,4544
  8006f8:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 255);
  8006fc:	00c04034 	movhi	r3,256
  800700:	18c47404 	addi	r3,r3,4560
  800704:	18800035 	stwio	r2,0(r3)
  800708:	f800283a 	ret

0080070c <read_request>:
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  80070c:	defffb04 	addi	sp,sp,-20
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  800710:	01801004 	movi	r6,64
  800714:	000b883a 	mov	r5,zero
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  800718:	dfc00415 	stw	ra,16(sp)
  80071c:	dcc00315 	stw	r19,12(sp)
  800720:	dc800215 	stw	r18,8(sp)
  800724:	dc400115 	stw	r17,4(sp)
  800728:	dc000015 	stw	r16,0(sp)
  80072c:	2023883a 	mov	r17,r4
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  800730:	08034000 	call	803400 <memset>

	//Get first character
	c = alt_getchar();
  800734:	0804a180 	call	804a18 <alt_getchar>
  800738:	1025883a 	mov	r18,r2

	//Start timer after first char received
	latency = alt_timestamp();
  80073c:	0804f7c0 	call	804f7c <alt_timestamp>
  800740:	d0a0e515 	stw	r2,-31852(gp)
  800744:	d0e0e615 	stw	r3,-31848(gp)

	while(c != '\n'){
  800748:	8821883a 	mov	r16,r17
  80074c:	04c00284 	movi	r19,10
  800750:	90803fcc 	andi	r2,r18,255
  800754:	1080201c 	xori	r2,r2,128
  800758:	10bfe004 	addi	r2,r2,-128
  80075c:	8449c83a 	sub	r4,r16,r17
  800760:	14c00526 	beq	r2,r19,800778 <read_request+0x6c>
		outbuf[idx] = c;
  800764:	84800005 	stb	r18,0(r16)
		c = alt_getchar();
  800768:	0804a180 	call	804a18 <alt_getchar>
  80076c:	1025883a 	mov	r18,r2
  800770:	84000044 	addi	r16,r16,1
  800774:	003ff606 	br	800750 <__alt_data_end+0xff800750>
		idx++;
	}
	outbuf[idx] = ' ';
  800778:	8909883a 	add	r4,r17,r4
  80077c:	00800804 	movi	r2,32
  800780:	20800005 	stb	r2,0(r4)

}
  800784:	dfc00417 	ldw	ra,16(sp)
  800788:	dcc00317 	ldw	r19,12(sp)
  80078c:	dc800217 	ldw	r18,8(sp)
  800790:	dc400117 	ldw	r17,4(sp)
  800794:	dc000017 	ldw	r16,0(sp)
  800798:	dec00504 	addi	sp,sp,20
  80079c:	f800283a 	ret

008007a0 <acc_timer_init>:

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  8007a0:	defffe04 	addi	sp,sp,-8
  8007a4:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 1000;
//	alt_32 period = alt_timestamp_freq()/freq;

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  8007a8:	04004034 	movhi	r16,256

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  8007ac:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 1000;
//	alt_32 period = alt_timestamp_freq()/freq;

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  8007b0:	84043104 	addi	r16,r16,4292
  8007b4:	008000c4 	movi	r2,3
  8007b8:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  8007bc:	00804034 	movhi	r2,256
  8007c0:	10843004 	addi	r2,r2,4288
  8007c4:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(ACC_TIMER_BASE, 0xfbd0);
  8007c8:	00804034 	movhi	r2,256
  8007cc:	10843204 	addi	r2,r2,4296
  8007d0:	00fef414 	movui	r3,64464
  8007d4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(ACC_TIMER_BASE, 0x0001);
  8007d8:	00804034 	movhi	r2,256
  8007dc:	10843304 	addi	r2,r2,4300
  8007e0:	00c00044 	movi	r3,1
  8007e4:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
  8007e8:	200d883a 	mov	r6,r4
  8007ec:	000b883a 	mov	r5,zero
  8007f0:	01000244 	movi	r4,9
  8007f4:	0804a5c0 	call	804a5c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);
  8007f8:	008001c4 	movi	r2,7
  8007fc:	80800035 	stwio	r2,0(r16)

}
  800800:	dfc00117 	ldw	ra,4(sp)
  800804:	dc000017 	ldw	r16,0(sp)
  800808:	dec00204 	addi	sp,sp,8
  80080c:	f800283a 	ret

00800810 <disp_timer_init>:
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  800810:	defffe04 	addi	sp,sp,-8
  800814:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  800818:	04004034 	movhi	r16,256
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  80081c:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  800820:	84043904 	addi	r16,r16,4324
  800824:	008000c4 	movi	r2,3
  800828:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  80082c:	00804034 	movhi	r2,256
  800830:	10843804 	addi	r2,r2,4320
  800834:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(HEX_TIMER_BASE, 0x5a00);
  800838:	00804034 	movhi	r2,256
  80083c:	10843a04 	addi	r2,r2,4328
  800840:	00d68004 	movi	r3,23040
  800844:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(HEX_TIMER_BASE, 0x0262);
  800848:	00804034 	movhi	r2,256
  80084c:	10843b04 	addi	r2,r2,4332
  800850:	00c09884 	movi	r3,610
  800854:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(HEX_TIMER_IRQ, 0, isr);
  800858:	200d883a 	mov	r6,r4
  80085c:	000b883a 	mov	r5,zero
  800860:	01000204 	movi	r4,8
  800864:	0804a5c0 	call	804a5c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);
  800868:	008001c4 	movi	r2,7
  80086c:	80800035 	stwio	r2,0(r16)

}
  800870:	dfc00117 	ldw	ra,4(sp)
  800874:	dc000017 	ldw	r16,0(sp)
  800878:	dec00204 	addi	sp,sp,8
  80087c:	f800283a 	ret

00800880 <led_timer_init>:



}

void led_timer_init(void * isr) {
  800880:	defffe04 	addi	sp,sp,-8
  800884:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  800888:	04004034 	movhi	r16,256



}

void led_timer_init(void * isr) {
  80088c:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  800890:	84044904 	addi	r16,r16,4388
  800894:	008000c4 	movi	r2,3
  800898:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  80089c:	00804034 	movhi	r2,256
  8008a0:	10844804 	addi	r2,r2,4384
  8008a4:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x5d40);
  8008a8:	00804034 	movhi	r2,256
  8008ac:	10844a04 	addi	r2,r2,4392
  8008b0:	00d75004 	movi	r3,23872
  8008b4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x00c6);
  8008b8:	00804034 	movhi	r2,256
  8008bc:	10844b04 	addi	r2,r2,4396
  8008c0:	00c03184 	movi	r3,198
  8008c4:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
  8008c8:	200d883a 	mov	r6,r4
  8008cc:	000b883a 	mov	r5,zero
  8008d0:	01000144 	movi	r4,5
  8008d4:	0804a5c0 	call	804a5c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
  8008d8:	008001c4 	movi	r2,7
  8008dc:	80800035 	stwio	r2,0(r16)

}
  8008e0:	dfc00117 	ldw	ra,4(sp)
  8008e4:	dc000017 	ldw	r16,0(sp)
  8008e8:	dec00204 	addi	sp,sp,8
  8008ec:	f800283a 	ret

008008f0 <to_hex>:
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  8008f0:	defffc04 	addi	sp,sp,-16
  8008f4:	dc400115 	stw	r17,4(sp)
  8008f8:	3023883a 	mov	r17,r6
  8008fc:	dc800215 	stw	r18,8(sp)
  800900:	dc000015 	stw	r16,0(sp)
  800904:	2025883a 	mov	r18,r4
  800908:	2821883a 	mov	r16,r5
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  80090c:	01800204 	movi	r6,8
  800910:	000b883a 	mov	r5,zero
  800914:	8809883a 	mov	r4,r17
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  800918:	dfc00315 	stw	ra,12(sp)
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  80091c:	08034000 	call	803400 <memset>
	sprintf(buf, "%x", val);
  800920:	01402034 	movhi	r5,128
  800924:	8809883a 	mov	r4,r17
  800928:	900d883a 	mov	r6,r18
  80092c:	2954bb04 	addi	r5,r5,21228
  800930:	08037980 	call	803798 <sprintf>
	int hexlen = strlen(buf);
  800934:	8809883a 	mov	r4,r17
  800938:	08038740 	call	803874 <strlen>

	//Left shift if string is longer than desired length to take least significant
	if (hexlen > length){
  80093c:	8080090e 	bge	r16,r2,800964 <to_hex+0x74>
  800940:	8807883a 	mov	r3,r17
		for(int i = 0; i < length; i++){
  800944:	1c49c83a 	sub	r4,r3,r17
  800948:	24000c0e 	bge	r4,r16,80097c <to_hex+0x8c>
			buf[i] = buf[(i + hexlen - length)];
  80094c:	10c9883a 	add	r4,r2,r3
  800950:	2409c83a 	sub	r4,r4,r16
  800954:	21000003 	ldbu	r4,0(r4)
  800958:	18c00044 	addi	r3,r3,1
  80095c:	193fffc5 	stb	r4,-1(r3)
  800960:	003ff806 	br	800944 <__alt_data_end+0xff800944>
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
  800964:	1400050e 	bge	r2,r16,80097c <to_hex+0x8c>
  800968:	80ffffc4 	addi	r3,r16,-1
  80096c:	88c7883a 	add	r3,r17,r3
  800970:	0009883a 	mov	r4,zero
		for(int i = 0; i < length; i++){
			if(i < hexlen){
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
			}
			else{
				buf[(length - 1 - i)] = '0';
  800974:	01800c04 	movi	r6,48
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800978:	24000816 	blt	r4,r16,80099c <to_hex+0xac>
			}

		}
	}
	//Add termination
	buf[length] = '\0';
  80097c:	8c21883a 	add	r16,r17,r16
  800980:	80000005 	stb	zero,0(r16)

}
  800984:	dfc00317 	ldw	ra,12(sp)
  800988:	dc800217 	ldw	r18,8(sp)
  80098c:	dc400117 	ldw	r17,4(sp)
  800990:	dc000017 	ldw	r16,0(sp)
  800994:	dec00404 	addi	sp,sp,16
  800998:	f800283a 	ret
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
			if(i < hexlen){
  80099c:	2080050e 	bge	r4,r2,8009b4 <to_hex+0xc4>
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
  8009a0:	1c0bc83a 	sub	r5,r3,r16
  8009a4:	288b883a 	add	r5,r5,r2
  8009a8:	29400003 	ldbu	r5,0(r5)
  8009ac:	19400005 	stb	r5,0(r3)
  8009b0:	00000106 	br	8009b8 <to_hex+0xc8>
			}
			else{
				buf[(length - 1 - i)] = '0';
  8009b4:	19800005 	stb	r6,0(r3)
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  8009b8:	21000044 	addi	r4,r4,1
  8009bc:	18ffffc4 	addi	r3,r3,-1
  8009c0:	003fed06 	br	800978 <__alt_data_end+0xff800978>

008009c4 <throw_code>:

}


void throw_code(char* regname, int code){
	printf("K %s %x\n", regname, code);
  8009c4:	280d883a 	mov	r6,r5
  8009c8:	200b883a 	mov	r5,r4
  8009cc:	01002034 	movhi	r4,128
  8009d0:	2114bc04 	addi	r4,r4,21232
  8009d4:	08036981 	jmpi	803698 <printf>

008009d8 <parse_request>:
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  8009d8:	deffee04 	addi	sp,sp,-72
	int token_number = 0;
	char* tokens[8] = {};
  8009dc:	01800804 	movi	r6,32
  8009e0:	000b883a 	mov	r5,zero
  8009e4:	d809883a 	mov	r4,sp
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  8009e8:	dfc01115 	stw	ra,68(sp)
  8009ec:	dc000b15 	stw	r16,44(sp)
  8009f0:	dd401015 	stw	r21,64(sp)
  8009f4:	dd000f15 	stw	r20,60(sp)
  8009f8:	dcc00e15 	stw	r19,56(sp)
  8009fc:	dc800d15 	stw	r18,52(sp)
  800a00:	dc400c15 	stw	r17,48(sp)
	int token_number = 0;
	char* tokens[8] = {};
  800a04:	08034000 	call	803400 <memset>
	char* token;


	token = strtok(cmdbuffer, " ");
  800a08:	d120e017 	ldw	r4,-31872(gp)
  800a0c:	01402034 	movhi	r5,128
  800a10:	2954d404 	addi	r5,r5,21328
  800a14:	08038e40 	call	8038e4 <strtok>
	outbuf[idx] = ' ';

}

void parse_request(char* request){
	int token_number = 0;
  800a18:	0021883a 	mov	r16,zero


	token = strtok(cmdbuffer, " ");


	while(token != NULL){
  800a1c:	10000a26 	beq	r2,zero,800a48 <parse_request+0x70>
		tokens[token_number]= token;
  800a20:	8407883a 	add	r3,r16,r16
  800a24:	18c7883a 	add	r3,r3,r3
  800a28:	d8c7883a 	add	r3,sp,r3
		token_number++;
		token = strtok(NULL, " ");
  800a2c:	01402034 	movhi	r5,128

	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
  800a30:	18800015 	stw	r2,0(r3)
		token_number++;
		token = strtok(NULL, " ");
  800a34:	2954d404 	addi	r5,r5,21328
  800a38:	0009883a 	mov	r4,zero
	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
		token_number++;
  800a3c:	84000044 	addi	r16,r16,1
		token = strtok(NULL, " ");
  800a40:	08038e40 	call	8038e4 <strtok>
  800a44:	003ff506 	br	800a1c <__alt_data_end+0xff800a1c>
	}

	if(token_number == 0 || strcmp(tokens[0], &"R" ) != 0){
  800a48:	80000526 	beq	r16,zero,800a60 <parse_request+0x88>
  800a4c:	d9000017 	ldw	r4,0(sp)
  800a50:	01402034 	movhi	r5,128
  800a54:	2954bf04 	addi	r5,r5,21244
  800a58:	08038100 	call	803810 <strcmp>
  800a5c:	10000226 	beq	r2,zero,800a68 <parse_request+0x90>
		throw_code(&"ERR", 1);
  800a60:	01400044 	movi	r5,1
  800a64:	00008f06 	br	800ca4 <parse_request+0x2cc>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
  800a68:	dc400117 	ldw	r17,4(sp)
  800a6c:	01402034 	movhi	r5,128
  800a70:	2954c104 	addi	r5,r5,21252
  800a74:	8809883a 	mov	r4,r17
  800a78:	08038100 	call	803810 <strcmp>
  800a7c:	1025883a 	mov	r18,r2
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
  800a80:	10000526 	beq	r2,zero,800a98 <parse_request+0xc0>
  800a84:	01402034 	movhi	r5,128
  800a88:	2954c204 	addi	r5,r5,21256
  800a8c:	8809883a 	mov	r4,r17
  800a90:	08038100 	call	803810 <strcmp>
  800a94:	1000271e 	bne	r2,zero,800b34 <parse_request+0x15c>
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_fixed(x_buf, hfixed);
  800a98:	d160da17 	ldw	r5,-31896(gp)
  800a9c:	d120e117 	ldw	r4,-31868(gp)
			y = convolve_fixed(y_buf, hfixed);
			z = convolve_fixed(z_buf, hfixed);

			to_hex(x, 3, hexbuffers[0]);
  800aa0:	04002034 	movhi	r16,128
  800aa4:	8417a704 	addi	r16,r16,24220
	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_fixed(x_buf, hfixed);
  800aa8:	08003980 	call	800398 <convolve_fixed>
			y = convolve_fixed(y_buf, hfixed);
  800aac:	d160da17 	ldw	r5,-31896(gp)
  800ab0:	d120e317 	ldw	r4,-31860(gp)
	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_fixed(x_buf, hfixed);
  800ab4:	102b883a 	mov	r21,r2
			y = convolve_fixed(y_buf, hfixed);
  800ab8:	08003980 	call	800398 <convolve_fixed>
			z = convolve_fixed(z_buf, hfixed);
  800abc:	d160da17 	ldw	r5,-31896(gp)
  800ac0:	d120e417 	ldw	r4,-31856(gp)
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_fixed(x_buf, hfixed);
			y = convolve_fixed(y_buf, hfixed);
  800ac4:	1029883a 	mov	r20,r2
			z = convolve_fixed(z_buf, hfixed);
  800ac8:	08003980 	call	800398 <convolve_fixed>

			to_hex(x, 3, hexbuffers[0]);
  800acc:	81800017 	ldw	r6,0(r16)
  800ad0:	014000c4 	movi	r5,3
  800ad4:	a809883a 	mov	r4,r21
		matched = 1;

		alt_32 x,y,z;
			x = convolve_fixed(x_buf, hfixed);
			y = convolve_fixed(y_buf, hfixed);
			z = convolve_fixed(z_buf, hfixed);
  800ad8:	1027883a 	mov	r19,r2

			to_hex(x, 3, hexbuffers[0]);
  800adc:	08008f00 	call	8008f0 <to_hex>
			to_hex(y, 3, hexbuffers[1]);
  800ae0:	81800117 	ldw	r6,4(r16)
  800ae4:	014000c4 	movi	r5,3
  800ae8:	a009883a 	mov	r4,r20
  800aec:	08008f00 	call	8008f0 <to_hex>
			to_hex(z, 3, hexbuffers[2]);
  800af0:	81800217 	ldw	r6,8(r16)
  800af4:	014000c4 	movi	r5,3
  800af8:	9809883a 	mov	r4,r19
  800afc:	08008f00 	call	8008f0 <to_hex>

			if (is_all){
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800b00:	81c00217 	ldw	r7,8(r16)
  800b04:	81800117 	ldw	r6,4(r16)
  800b08:	81400017 	ldw	r5,0(r16)

			to_hex(x, 3, hexbuffers[0]);
			to_hex(y, 3, hexbuffers[1]);
			to_hex(z, 3, hexbuffers[2]);

			if (is_all){
  800b0c:	9000041e 	bne	r18,zero,800b20 <parse_request+0x148>
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800b10:	01002034 	movhi	r4,128
  800b14:	2114c404 	addi	r4,r4,21264
  800b18:	0804bfc0 	call	804bfc <alt_printf>
  800b1c:	00000b06 	br	800b4c <parse_request+0x174>
			}
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800b20:	01002034 	movhi	r4,128
  800b24:	2114ca04 	addi	r4,r4,21288
  800b28:	0804bfc0 	call	804bfc <alt_printf>
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;
  800b2c:	04000044 	movi	r16,1
  800b30:	00000106 	br	800b38 <parse_request+0x160>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;
  800b34:	0021883a 	mov	r16,zero
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  800b38:	01402034 	movhi	r5,128
  800b3c:	2954f804 	addi	r5,r5,21472
  800b40:	8809883a 	mov	r4,r17
  800b44:	08038100 	call	803810 <strcmp>
  800b48:	1000231e 	bne	r2,zero,800bd8 <parse_request+0x200>
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800b4c:	d120e717 	ldw	r4,-31844(gp)
  800b50:	d9400a04 	addi	r5,sp,40
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800b54:	04002034 	movhi	r16,128
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800b58:	08050280 	call	805028 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800b5c:	d120e717 	ldw	r4,-31844(gp)
  800b60:	d9400904 	addi	r5,sp,36
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800b64:	8417a704 	addi	r16,r16,24220
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800b68:	08050800 	call	805080 <alt_up_accelerometer_spi_read_y_axis>
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800b6c:	d120e717 	ldw	r4,-31844(gp)
  800b70:	d9400804 	addi	r5,sp,32
  800b74:	08050d80 	call	8050d8 <alt_up_accelerometer_spi_read_z_axis>

		to_hex(x, 3, hexbuffers[0]);
  800b78:	81800017 	ldw	r6,0(r16)
  800b7c:	d9000a17 	ldw	r4,40(sp)
  800b80:	014000c4 	movi	r5,3
  800b84:	08008f00 	call	8008f0 <to_hex>
		to_hex(y, 3, hexbuffers[1]);
  800b88:	81800117 	ldw	r6,4(r16)
  800b8c:	d9000917 	ldw	r4,36(sp)
  800b90:	014000c4 	movi	r5,3
  800b94:	08008f00 	call	8008f0 <to_hex>
		to_hex(z, 3, hexbuffers[2]);
  800b98:	81800217 	ldw	r6,8(r16)
  800b9c:	d9000817 	ldw	r4,32(sp)
  800ba0:	014000c4 	movi	r5,3
  800ba4:	08008f00 	call	8008f0 <to_hex>

		if (is_all){
			printf("ACCRAW X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800ba8:	81c00217 	ldw	r7,8(r16)
  800bac:	81800117 	ldw	r6,4(r16)
  800bb0:	81400017 	ldw	r5,0(r16)

		to_hex(x, 3, hexbuffers[0]);
		to_hex(y, 3, hexbuffers[1]);
		to_hex(z, 3, hexbuffers[2]);

		if (is_all){
  800bb4:	9000041e 	bne	r18,zero,800bc8 <parse_request+0x1f0>
			printf("ACCRAW X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800bb8:	01002034 	movhi	r4,128
  800bbc:	2114d004 	addi	r4,r4,21312
  800bc0:	08036980 	call	803698 <printf>
  800bc4:	00000906 	br	800bec <parse_request+0x214>
		}
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800bc8:	01002034 	movhi	r4,128
  800bcc:	2114d504 	addi	r4,r4,21332
  800bd0:	08036980 	call	803698 <printf>
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;
  800bd4:	04000044 	movi	r16,1
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800bd8:	01402034 	movhi	r5,128
  800bdc:	2954db04 	addi	r5,r5,21356
  800be0:	8809883a 	mov	r4,r17
  800be4:	08038100 	call	803810 <strcmp>
  800be8:	10000e1e 	bne	r2,zero,800c24 <parse_request+0x24c>

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800bec:	00804034 	movhi	r2,256
  800bf0:	10845804 	addi	r2,r2,4448
  800bf4:	11400037 	ldwio	r5,0(r2)
  800bf8:	014a303a 	nor	r5,zero,r5

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
  800bfc:	294000cc 	andi	r5,r5,3

		if (is_all){
  800c00:	9000041e 	bne	r18,zero,800c14 <parse_request+0x23c>
			alt_printf("BUTTON %x ", button);
  800c04:	01002034 	movhi	r4,128
  800c08:	2114dd04 	addi	r4,r4,21364
  800c0c:	0804bfc0 	call	804bfc <alt_printf>
  800c10:	00000906 	br	800c38 <parse_request+0x260>
		}
		else{
			alt_printf("K BUTTON %x 0\n", button);
  800c14:	01002034 	movhi	r4,128
  800c18:	2114e004 	addi	r4,r4,21376
  800c1c:	0804bfc0 	call	804bfc <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
  800c20:	04000044 	movi	r16,1
		else{
			alt_printf("K BUTTON %x 0\n", button);
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  800c24:	01402034 	movhi	r5,128
  800c28:	2954fa04 	addi	r5,r5,21480
  800c2c:	8809883a 	mov	r4,r17
  800c30:	08038100 	call	803810 <strcmp>
  800c34:	10001f1e 	bne	r2,zero,800cb4 <parse_request+0x2dc>
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800c38:	00804034 	movhi	r2,256
  800c3c:	10845c04 	addi	r2,r2,4464
  800c40:	14000037 	ldwio	r16,0(r2)
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800c44:	00802034 	movhi	r2,128
  800c48:	1097a704 	addi	r2,r2,24220
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800c4c:	0420303a 	nor	r16,zero,r16
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800c50:	11800017 	ldw	r6,0(r2)
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
  800c54:	8400ffcc 	andi	r16,r16,1023
		to_hex(switches, 3, hexbuffers[0]);
  800c58:	014000c4 	movi	r5,3
  800c5c:	8009883a 	mov	r4,r16
  800c60:	08008f00 	call	8008f0 <to_hex>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
  800c64:	800b883a 	mov	r5,r16

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);

		if (is_all){
  800c68:	9000071e 	bne	r18,zero,800c88 <parse_request+0x2b0>
			alt_printf("SWITCH %x ", switches);
  800c6c:	01002034 	movhi	r4,128
  800c70:	2114e404 	addi	r4,r4,21392
  800c74:	0804bfc0 	call	804bfc <alt_printf>

	}

	//Saves unnecessary comparisons
	if (is_all){
		alt_printf(" 0\n");
  800c78:	01002034 	movhi	r4,128
  800c7c:	2114e704 	addi	r4,r4,21404
  800c80:	0804bfc0 	call	804bfc <alt_printf>
		return;
  800c84:	00006d06 	br	800e3c <parse_request+0x464>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
		}
		else{
			alt_printf("K SWITCH %x 0\n", switches);
  800c88:	01002034 	movhi	r4,128
  800c8c:	2114e804 	addi	r4,r4,21408
  800c90:	0804bfc0 	call	804bfc <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;
  800c94:	04000044 	movi	r16,1
  800c98:	00000606 	br	800cb4 <parse_request+0x2dc>
			debug = (int) strtol(tokens[2], 0, 16);
			throw_code(&"DEBUG", 0);
			matched = 1;
		}

	if (!matched){
  800c9c:	8000671e 	bne	r16,zero,800e3c <parse_request+0x464>
		throw_code(&"ERR", 2);
  800ca0:	01400084 	movi	r5,2
  800ca4:	01002034 	movhi	r4,128
  800ca8:	2114c004 	addi	r4,r4,21248
  800cac:	08009c40 	call	8009c4 <throw_code>
  800cb0:	00006206 	br	800e3c <parse_request+0x464>
	}


	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){
  800cb4:	01402034 	movhi	r5,128
  800cb8:	2954ec04 	addi	r5,r5,21424
  800cbc:	8809883a 	mov	r4,r17
  800cc0:	08038100 	call	803810 <strcmp>
  800cc4:	1000111e 	bne	r2,zero,800d0c <parse_request+0x334>

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800cc8:	d120e217 	ldw	r4,-31864(gp)
  800ccc:	01801904 	movi	r6,100
  800cd0:	000b883a 	mov	r5,zero
  800cd4:	08034000 	call	803400 <memset>
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800cd8:	d9400217 	ldw	r5,8(sp)
  800cdc:	d120e217 	ldw	r4,-31864(gp)
  800ce0:	01801904 	movi	r6,100
	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
  800ce4:	04000044 	movi	r16,1
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800ce8:	08038900 	call	803890 <strncpy>
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800cec:	d120e217 	ldw	r4,-31864(gp)

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_offset = 0;
  800cf0:	d020de15 	stw	zero,-31880(gp)
		disp_length = strlen(disp_buf);
  800cf4:	08038740 	call	803874 <strlen>

		throw_code(&"HEXTEXT", 0);
  800cf8:	01002034 	movhi	r4,128
  800cfc:	000b883a 	mov	r5,zero
  800d00:	2114ec04 	addi	r4,r4,21424
		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800d04:	d0a0dd15 	stw	r2,-31884(gp)

		throw_code(&"HEXTEXT", 0);
  800d08:	08009c40 	call	8009c4 <throw_code>
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){
  800d0c:	01402034 	movhi	r5,128
  800d10:	2954ee04 	addi	r5,r5,21432
  800d14:	8809883a 	mov	r4,r17
  800d18:	08038100 	call	803810 <strcmp>
  800d1c:	10000d1e 	bne	r2,zero,800d54 <parse_request+0x37c>

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800d20:	d9000217 	ldw	r4,8(sp)
  800d24:	01800404 	movi	r6,16
  800d28:	000b883a 	mov	r5,zero
  800d2c:	0803c7c0 	call	803c7c <strtol>
		IOWR(LED_BASE, 0, led_val);
  800d30:	00c04034 	movhi	r3,256
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800d34:	d0a0dc15 	stw	r2,-31888(gp)
		IOWR(LED_BASE, 0, led_val);
  800d38:	18c47804 	addi	r3,r3,4576
  800d3c:	18800035 	stwio	r2,0(r3)
		throw_code(&"LEDWRITE", 0);
  800d40:	01002034 	movhi	r4,128
  800d44:	000b883a 	mov	r5,zero
  800d48:	2114ee04 	addi	r4,r4,21432
  800d4c:	08009c40 	call	8009c4 <throw_code>
		matched = 1;
  800d50:	04000044 	movi	r16,1

	}
	if (strcmp(tokens[1], &"ACCQUAL") == 0){
  800d54:	01402034 	movhi	r5,128
  800d58:	2954f104 	addi	r5,r5,21444
  800d5c:	8809883a 	mov	r4,r17
  800d60:	08038100 	call	803810 <strcmp>
  800d64:	1000131e 	bne	r2,zero,800db4 <parse_request+0x3dc>

			//alt_printf("Tried to write LEDWRITE");
			quality = (int) strtol(tokens[2], 0, 10);
  800d68:	d9000217 	ldw	r4,8(sp)
  800d6c:	01800284 	movi	r6,10
  800d70:	000b883a 	mov	r5,zero
  800d74:	0803c7c0 	call	803c7c <strtol>
  800d78:	d0a00015 	stw	r2,-32768(gp)

			if (quality<0) {
  800d7c:	1000020e 	bge	r2,zero,800d88 <parse_request+0x3b0>
				quality = 0;
  800d80:	d0200015 	stw	zero,-32768(gp)
  800d84:	00000306 	br	800d94 <parse_request+0x3bc>
				throw_code(&"ACCQUAL", 1);
			}
			else if (quality > RING_SIZE){
  800d88:	00c00ec4 	movi	r3,59
  800d8c:	1880030e 	bge	r3,r2,800d9c <parse_request+0x3c4>
				quality = RING_SIZE;
  800d90:	d0e00015 	stw	r3,-32768(gp)
				throw_code(&"ACCQUAL", 1);
  800d94:	01400044 	movi	r5,1
  800d98:	00000106 	br	800da0 <parse_request+0x3c8>
			}
			else {
				throw_code(&"ACCQUAL", 0);
  800d9c:	000b883a 	mov	r5,zero
  800da0:	01002034 	movhi	r4,128
  800da4:	2114f104 	addi	r4,r4,21444
  800da8:	08009c40 	call	8009c4 <throw_code>
			}

			coeffs_to_fixed();

			matched = 1;
  800dac:	04000044 	movi	r16,1
			}
			else {
				throw_code(&"ACCQUAL", 0);
			}

			coeffs_to_fixed();
  800db0:	080047c0 	call	80047c <coeffs_to_fixed>

			matched = 1;

		}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){
  800db4:	dc400117 	ldw	r17,4(sp)
  800db8:	01402034 	movhi	r5,128
  800dbc:	2954f304 	addi	r5,r5,21452
  800dc0:	8809883a 	mov	r4,r17
  800dc4:	08038100 	call	803810 <strcmp>
  800dc8:	10000e1e 	bne	r2,zero,800e04 <parse_request+0x42c>

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
  800dcc:	d120e817 	ldw	r4,-31840(gp)
  800dd0:	01801904 	movi	r6,100
  800dd4:	000b883a 	mov	r5,zero
  800dd8:	08034000 	call	803400 <memset>
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  800ddc:	d9400217 	ldw	r5,8(sp)
  800de0:	d120e817 	ldw	r4,-31840(gp)
  800de4:	01801904 	movi	r6,100
		led_offset = 0;
		throw_code(&"LEDFLASH", 0);
		matched = 1;
  800de8:	04000044 	movi	r16,1
		}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  800dec:	08038900 	call	803890 <strncpy>
		led_offset = 0;
		throw_code(&"LEDFLASH", 0);
  800df0:	01002034 	movhi	r4,128
  800df4:	000b883a 	mov	r5,zero
  800df8:	2114f304 	addi	r4,r4,21452
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
		led_offset = 0;
  800dfc:	d0200115 	stw	zero,-32764(gp)
		throw_code(&"LEDFLASH", 0);
  800e00:	08009c40 	call	8009c4 <throw_code>
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){
  800e04:	01402034 	movhi	r5,128
  800e08:	2954f604 	addi	r5,r5,21464
  800e0c:	8809883a 	mov	r4,r17
  800e10:	08038100 	call	803810 <strcmp>
  800e14:	103fa11e 	bne	r2,zero,800c9c <__alt_data_end+0xff800c9c>

			debug = (int) strtol(tokens[2], 0, 16);
  800e18:	d9000217 	ldw	r4,8(sp)
  800e1c:	000b883a 	mov	r5,zero
  800e20:	01800404 	movi	r6,16
  800e24:	0803c7c0 	call	803c7c <strtol>
			throw_code(&"DEBUG", 0);
  800e28:	01002034 	movhi	r4,128
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){

			debug = (int) strtol(tokens[2], 0, 16);
  800e2c:	d0a0db15 	stw	r2,-31892(gp)
			throw_code(&"DEBUG", 0);
  800e30:	000b883a 	mov	r5,zero
  800e34:	2114f604 	addi	r4,r4,21464
  800e38:	003f9c06 	br	800cac <__alt_data_end+0xff800cac>
	if (!matched){
		throw_code(&"ERR", 2);
		matched = 1;
	}

}
  800e3c:	dfc01117 	ldw	ra,68(sp)
  800e40:	dd401017 	ldw	r21,64(sp)
  800e44:	dd000f17 	ldw	r20,60(sp)
  800e48:	dcc00e17 	ldw	r19,56(sp)
  800e4c:	dc800d17 	ldw	r18,52(sp)
  800e50:	dc400c17 	ldw	r17,48(sp)
  800e54:	dc000b17 	ldw	r16,44(sp)
  800e58:	dec01204 	addi	sp,sp,72
  800e5c:	f800283a 	ret

00800e60 <main>:

//HEX write
//---------------------------------------------------------------


int main() {
  800e60:	defff404 	addi	sp,sp,-48
  800e64:	dfc00b15 	stw	ra,44(sp)
  800e68:	dc400a15 	stw	r17,40(sp)
  800e6c:	dc000915 	stw	r16,36(sp)

	//Initialize fixed point coefficients
	coeffs_to_fixed();
  800e70:	080047c0 	call	80047c <coeffs_to_fixed>

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800e74:	01001904 	movi	r4,100
  800e78:	08033d80 	call	8033d8 <malloc>
	strcpy(disp_buf, "______");
  800e7c:	01402034 	movhi	r5,128
  800e80:	2954fc04 	addi	r5,r5,21488
  800e84:	1009883a 	mov	r4,r2

	//Initialize fixed point coefficients
	coeffs_to_fixed();

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800e88:	d0a0e215 	stw	r2,-31864(gp)
	strcpy(disp_buf, "______");
  800e8c:	08038480 	call	803848 <strcpy>
	clr_disp();
  800e90:	08006bc0 	call	8006bc <clr_disp>
	disp_timer_init(disp_timer_isr);
  800e94:	01002034 	movhi	r4,128
  800e98:	2101a104 	addi	r4,r4,1668
  800e9c:	08008100 	call	800810 <disp_timer_init>
	disp_length = 6;
  800ea0:	00800184 	movi	r2,6

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800ea4:	01001904 	movi	r4,100
	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
	strcpy(disp_buf, "______");
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;
  800ea8:	d0a0dd15 	stw	r2,-31884(gp)

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800eac:	08033d80 	call	8033d8 <malloc>
	led_timer_init(led_timer_isr);
  800eb0:	01002034 	movhi	r4,128
  800eb4:	21006f04 	addi	r4,r4,444
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800eb8:	d0a0e815 	stw	r2,-31840(gp)
	led_timer_init(led_timer_isr);
  800ebc:	08008800 	call	800880 <led_timer_init>
	led_offset = -1;
  800ec0:	00bfffc4 	movi	r2,-1
  800ec4:	d0a00115 	stw	r2,-32764(gp)
	IOWR(LED_BASE, 0, 0);
  800ec8:	00804034 	movhi	r2,256
  800ecc:	10847804 	addi	r2,r2,4576
  800ed0:	10000035 	stwio	zero,0(r2)


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800ed4:	01001004 	movi	r4,64
  800ed8:	08033d80 	call	8033d8 <malloc>

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800edc:	01000204 	movi	r4,8
	led_offset = -1;
	IOWR(LED_BASE, 0, 0);


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800ee0:	d0a0e015 	stw	r2,-31872(gp)

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800ee4:	04002034 	movhi	r16,128
  800ee8:	08033d80 	call	8033d8 <malloc>
  800eec:	8417a704 	addi	r16,r16,24220
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800ef0:	01000204 	movi	r4,8

	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800ef4:	80800015 	stw	r2,0(r16)
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800ef8:	08033d80 	call	8033d8 <malloc>
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  800efc:	01000204 	movi	r4,8
	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800f00:	80800115 	stw	r2,4(r16)
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  800f04:	08033d80 	call	8033d8 <malloc>
  800f08:	80800215 	stw	r2,8(r16)

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800f0c:	00800ec4 	movi	r2,59
  800f10:	d8800615 	stw	r2,24(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800f14:	d8800315 	stw	r2,12(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800f18:	d8800015 	stw	r2,0(sp)
	x_buf = &x;
  800f1c:	d8800604 	addi	r2,sp,24
  800f20:	d0a0e115 	stw	r2,-31868(gp)
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800f24:	01003b04 	movi	r4,236

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
  800f28:	d8800304 	addi	r2,sp,12
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800f2c:	d8000715 	stw	zero,28(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800f30:	d8000415 	stw	zero,16(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800f34:	d8000115 	stw	zero,4(sp)
	x_buf = &x;
	y_buf = &y;
  800f38:	d0a0e315 	stw	r2,-31860(gp)
	z_buf = &z;
  800f3c:	d6e0e415 	stw	sp,-31856(gp)

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800f40:	08033d80 	call	8033d8 <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800f44:	01003b04 	movi	r4,236
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800f48:	1021883a 	mov	r16,r2
  800f4c:	d8800815 	stw	r2,32(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800f50:	08033d80 	call	8033d8 <malloc>
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800f54:	01803b04 	movi	r6,236
  800f58:	000b883a 	mov	r5,zero
  800f5c:	1009883a 	mov	r4,r2
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800f60:	d8800515 	stw	r2,20(sp)
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800f64:	08034000 	call	803400 <memset>
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800f68:	01003b04 	movi	r4,236
  800f6c:	08033d80 	call	8033d8 <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800f70:	01803b04 	movi	r6,236
  800f74:	000b883a 	mov	r5,zero
  800f78:	8009883a 	mov	r4,r16

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800f7c:	d8800215 	stw	r2,8(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800f80:	08034000 	call	803400 <memset>

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  800f84:	01001904 	movi	r4,100
  800f88:	08033d80 	call	8033d8 <malloc>
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800f8c:	01801904 	movi	r6,100
  800f90:	000b883a 	mov	r5,zero
  800f94:	1009883a 	mov	r4,r2
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  800f98:	d0a0e215 	stw	r2,-31864(gp)
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800f9c:	08034000 	call	803400 <memset>

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  800fa0:	01002034 	movhi	r4,128
  800fa4:	2114fe04 	addi	r4,r4,21496
  800fa8:	0804fd00 	call	804fd0 <alt_up_accelerometer_spi_open_dev>

	//to_hex(16,3,hexbuffers[0]);


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  800fac:	01002034 	movhi	r4,128
  800fb0:	21009504 	addi	r4,r4,596
	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  800fb4:	d0a0e715 	stw	r2,-31844(gp)

	//to_hex(16,3,hexbuffers[0]);


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  800fb8:	08007a00 	call	8007a0 <acc_timer_init>
	alt_timestamp_start();
  800fbc:	0804f380 	call	804f38 <alt_timestamp_start>

	//Command response loop
	while(1){
		read_request(cmdbuffer);
  800fc0:	d120e017 	ldw	r4,-31872(gp)
  800fc4:	080070c0 	call	80070c <read_request>
		parse_request(cmdbuffer);
  800fc8:	d120e017 	ldw	r4,-31872(gp)
  800fcc:	08009d80 	call	8009d8 <parse_request>

		//Request response timing: first char received to last char sent
		if (debug){
  800fd0:	d0a0db17 	ldw	r2,-31892(gp)
  800fd4:	103ffa26 	beq	r2,zero,800fc0 <__alt_data_end+0xff800fc0>
			printf("Response time (us) : %i \n",(alt_timestamp()-latency)/(alt_timestamp_freq()/1000000));
  800fd8:	0804f7c0 	call	804f7c <alt_timestamp>
  800fdc:	d460e517 	ldw	r17,-31852(gp)
  800fe0:	d120e617 	ldw	r4,-31848(gp)
  800fe4:	1463c83a 	sub	r17,r2,r17
  800fe8:	1907c83a 	sub	r3,r3,r4
  800fec:	1445803a 	cmpltu	r2,r2,r17
  800ff0:	18a1c83a 	sub	r16,r3,r2
  800ff4:	0804fc80 	call	804fc8 <alt_timestamp_freq>
  800ff8:	014003f4 	movhi	r5,15
  800ffc:	29509004 	addi	r5,r5,16960
  801000:	1009883a 	mov	r4,r2
  801004:	08017280 	call	801728 <__udivsi3>
  801008:	8809883a 	mov	r4,r17
  80100c:	800b883a 	mov	r5,r16
  801010:	100d883a 	mov	r6,r2
  801014:	000f883a 	mov	r7,zero
  801018:	08010340 	call	801034 <__udivdi3>
  80101c:	01002034 	movhi	r4,128
  801020:	100b883a 	mov	r5,r2
  801024:	180d883a 	mov	r6,r3
  801028:	21150404 	addi	r4,r4,21520
  80102c:	08036980 	call	803698 <printf>
  801030:	003fe306 	br	800fc0 <__alt_data_end+0xff800fc0>

00801034 <__udivdi3>:
  801034:	defff404 	addi	sp,sp,-48
  801038:	dcc00515 	stw	r19,20(sp)
  80103c:	dc000215 	stw	r16,8(sp)
  801040:	dfc00b15 	stw	ra,44(sp)
  801044:	df000a15 	stw	fp,40(sp)
  801048:	ddc00915 	stw	r23,36(sp)
  80104c:	dd800815 	stw	r22,32(sp)
  801050:	dd400715 	stw	r21,28(sp)
  801054:	dd000615 	stw	r20,24(sp)
  801058:	dc800415 	stw	r18,16(sp)
  80105c:	dc400315 	stw	r17,12(sp)
  801060:	2027883a 	mov	r19,r4
  801064:	2821883a 	mov	r16,r5
  801068:	3800461e 	bne	r7,zero,801184 <__udivdi3+0x150>
  80106c:	3023883a 	mov	r17,r6
  801070:	2025883a 	mov	r18,r4
  801074:	2980572e 	bgeu	r5,r6,8011d4 <__udivdi3+0x1a0>
  801078:	00bfffd4 	movui	r2,65535
  80107c:	282d883a 	mov	r22,r5
  801080:	1180b236 	bltu	r2,r6,80134c <__udivdi3+0x318>
  801084:	00803fc4 	movi	r2,255
  801088:	1185803a 	cmpltu	r2,r2,r6
  80108c:	100490fa 	slli	r2,r2,3
  801090:	3086d83a 	srl	r3,r6,r2
  801094:	01002034 	movhi	r4,128
  801098:	211515c4 	addi	r4,r4,21591
  80109c:	20c7883a 	add	r3,r4,r3
  8010a0:	18c00003 	ldbu	r3,0(r3)
  8010a4:	1885883a 	add	r2,r3,r2
  8010a8:	00c00804 	movi	r3,32
  8010ac:	1887c83a 	sub	r3,r3,r2
  8010b0:	18000526 	beq	r3,zero,8010c8 <__udivdi3+0x94>
  8010b4:	80e0983a 	sll	r16,r16,r3
  8010b8:	9884d83a 	srl	r2,r19,r2
  8010bc:	30e2983a 	sll	r17,r6,r3
  8010c0:	98e4983a 	sll	r18,r19,r3
  8010c4:	142cb03a 	or	r22,r2,r16
  8010c8:	882ad43a 	srli	r21,r17,16
  8010cc:	b009883a 	mov	r4,r22
  8010d0:	8d3fffcc 	andi	r20,r17,65535
  8010d4:	a80b883a 	mov	r5,r21
  8010d8:	080178c0 	call	80178c <__umodsi3>
  8010dc:	b009883a 	mov	r4,r22
  8010e0:	a80b883a 	mov	r5,r21
  8010e4:	1027883a 	mov	r19,r2
  8010e8:	08017280 	call	801728 <__udivsi3>
  8010ec:	100b883a 	mov	r5,r2
  8010f0:	a009883a 	mov	r4,r20
  8010f4:	102d883a 	mov	r22,r2
  8010f8:	08017e40 	call	8017e4 <__mulsi3>
  8010fc:	9826943a 	slli	r19,r19,16
  801100:	9006d43a 	srli	r3,r18,16
  801104:	1cc6b03a 	or	r3,r3,r19
  801108:	1880052e 	bgeu	r3,r2,801120 <__udivdi3+0xec>
  80110c:	1c47883a 	add	r3,r3,r17
  801110:	b13fffc4 	addi	r4,r22,-1
  801114:	1c400136 	bltu	r3,r17,80111c <__udivdi3+0xe8>
  801118:	18814236 	bltu	r3,r2,801624 <__udivdi3+0x5f0>
  80111c:	202d883a 	mov	r22,r4
  801120:	18a1c83a 	sub	r16,r3,r2
  801124:	8009883a 	mov	r4,r16
  801128:	a80b883a 	mov	r5,r21
  80112c:	080178c0 	call	80178c <__umodsi3>
  801130:	1027883a 	mov	r19,r2
  801134:	8009883a 	mov	r4,r16
  801138:	a80b883a 	mov	r5,r21
  80113c:	9826943a 	slli	r19,r19,16
  801140:	08017280 	call	801728 <__udivsi3>
  801144:	100b883a 	mov	r5,r2
  801148:	a009883a 	mov	r4,r20
  80114c:	94bfffcc 	andi	r18,r18,65535
  801150:	1021883a 	mov	r16,r2
  801154:	94e4b03a 	or	r18,r18,r19
  801158:	08017e40 	call	8017e4 <__mulsi3>
  80115c:	9080052e 	bgeu	r18,r2,801174 <__udivdi3+0x140>
  801160:	8ca5883a 	add	r18,r17,r18
  801164:	80ffffc4 	addi	r3,r16,-1
  801168:	94410c36 	bltu	r18,r17,80159c <__udivdi3+0x568>
  80116c:	90810b2e 	bgeu	r18,r2,80159c <__udivdi3+0x568>
  801170:	843fff84 	addi	r16,r16,-2
  801174:	b004943a 	slli	r2,r22,16
  801178:	0007883a 	mov	r3,zero
  80117c:	1404b03a 	or	r2,r2,r16
  801180:	00005e06 	br	8012fc <__udivdi3+0x2c8>
  801184:	29c05b36 	bltu	r5,r7,8012f4 <__udivdi3+0x2c0>
  801188:	00bfffd4 	movui	r2,65535
  80118c:	11c0672e 	bgeu	r2,r7,80132c <__udivdi3+0x2f8>
  801190:	00804034 	movhi	r2,256
  801194:	10bfffc4 	addi	r2,r2,-1
  801198:	11c10a36 	bltu	r2,r7,8015c4 <__udivdi3+0x590>
  80119c:	00800404 	movi	r2,16
  8011a0:	3886d83a 	srl	r3,r7,r2
  8011a4:	01002034 	movhi	r4,128
  8011a8:	211515c4 	addi	r4,r4,21591
  8011ac:	20c7883a 	add	r3,r4,r3
  8011b0:	18c00003 	ldbu	r3,0(r3)
  8011b4:	05c00804 	movi	r23,32
  8011b8:	1885883a 	add	r2,r3,r2
  8011bc:	b8afc83a 	sub	r23,r23,r2
  8011c0:	b800671e 	bne	r23,zero,801360 <__udivdi3+0x32c>
  8011c4:	3c010536 	bltu	r7,r16,8015dc <__udivdi3+0x5a8>
  8011c8:	9985403a 	cmpgeu	r2,r19,r6
  8011cc:	0007883a 	mov	r3,zero
  8011d0:	00004a06 	br	8012fc <__udivdi3+0x2c8>
  8011d4:	3000041e 	bne	r6,zero,8011e8 <__udivdi3+0x1b4>
  8011d8:	000b883a 	mov	r5,zero
  8011dc:	01000044 	movi	r4,1
  8011e0:	08017280 	call	801728 <__udivsi3>
  8011e4:	1023883a 	mov	r17,r2
  8011e8:	00bfffd4 	movui	r2,65535
  8011ec:	1440532e 	bgeu	r2,r17,80133c <__udivdi3+0x308>
  8011f0:	00804034 	movhi	r2,256
  8011f4:	10bfffc4 	addi	r2,r2,-1
  8011f8:	1440f436 	bltu	r2,r17,8015cc <__udivdi3+0x598>
  8011fc:	00800404 	movi	r2,16
  801200:	8886d83a 	srl	r3,r17,r2
  801204:	01002034 	movhi	r4,128
  801208:	211515c4 	addi	r4,r4,21591
  80120c:	20c7883a 	add	r3,r4,r3
  801210:	18c00003 	ldbu	r3,0(r3)
  801214:	1885883a 	add	r2,r3,r2
  801218:	00c00804 	movi	r3,32
  80121c:	1887c83a 	sub	r3,r3,r2
  801220:	1800a51e 	bne	r3,zero,8014b8 <__udivdi3+0x484>
  801224:	882ad43a 	srli	r21,r17,16
  801228:	8461c83a 	sub	r16,r16,r17
  80122c:	8d3fffcc 	andi	r20,r17,65535
  801230:	00c00044 	movi	r3,1
  801234:	a80b883a 	mov	r5,r21
  801238:	8009883a 	mov	r4,r16
  80123c:	d8c00115 	stw	r3,4(sp)
  801240:	080178c0 	call	80178c <__umodsi3>
  801244:	a80b883a 	mov	r5,r21
  801248:	8009883a 	mov	r4,r16
  80124c:	1027883a 	mov	r19,r2
  801250:	08017280 	call	801728 <__udivsi3>
  801254:	a00b883a 	mov	r5,r20
  801258:	1009883a 	mov	r4,r2
  80125c:	102d883a 	mov	r22,r2
  801260:	08017e40 	call	8017e4 <__mulsi3>
  801264:	9826943a 	slli	r19,r19,16
  801268:	900ed43a 	srli	r7,r18,16
  80126c:	d8c00117 	ldw	r3,4(sp)
  801270:	3cceb03a 	or	r7,r7,r19
  801274:	3880052e 	bgeu	r7,r2,80128c <__udivdi3+0x258>
  801278:	3c4f883a 	add	r7,r7,r17
  80127c:	b13fffc4 	addi	r4,r22,-1
  801280:	3c400136 	bltu	r7,r17,801288 <__udivdi3+0x254>
  801284:	3880e436 	bltu	r7,r2,801618 <__udivdi3+0x5e4>
  801288:	202d883a 	mov	r22,r4
  80128c:	38a1c83a 	sub	r16,r7,r2
  801290:	8009883a 	mov	r4,r16
  801294:	a80b883a 	mov	r5,r21
  801298:	d8c00115 	stw	r3,4(sp)
  80129c:	080178c0 	call	80178c <__umodsi3>
  8012a0:	1027883a 	mov	r19,r2
  8012a4:	8009883a 	mov	r4,r16
  8012a8:	a80b883a 	mov	r5,r21
  8012ac:	9826943a 	slli	r19,r19,16
  8012b0:	08017280 	call	801728 <__udivsi3>
  8012b4:	a00b883a 	mov	r5,r20
  8012b8:	1009883a 	mov	r4,r2
  8012bc:	94bfffcc 	andi	r18,r18,65535
  8012c0:	1021883a 	mov	r16,r2
  8012c4:	94e4b03a 	or	r18,r18,r19
  8012c8:	08017e40 	call	8017e4 <__mulsi3>
  8012cc:	d8c00117 	ldw	r3,4(sp)
  8012d0:	9080052e 	bgeu	r18,r2,8012e8 <__udivdi3+0x2b4>
  8012d4:	8ca5883a 	add	r18,r17,r18
  8012d8:	813fffc4 	addi	r4,r16,-1
  8012dc:	9440ad36 	bltu	r18,r17,801594 <__udivdi3+0x560>
  8012e0:	9080ac2e 	bgeu	r18,r2,801594 <__udivdi3+0x560>
  8012e4:	843fff84 	addi	r16,r16,-2
  8012e8:	b004943a 	slli	r2,r22,16
  8012ec:	1404b03a 	or	r2,r2,r16
  8012f0:	00000206 	br	8012fc <__udivdi3+0x2c8>
  8012f4:	0007883a 	mov	r3,zero
  8012f8:	0005883a 	mov	r2,zero
  8012fc:	dfc00b17 	ldw	ra,44(sp)
  801300:	df000a17 	ldw	fp,40(sp)
  801304:	ddc00917 	ldw	r23,36(sp)
  801308:	dd800817 	ldw	r22,32(sp)
  80130c:	dd400717 	ldw	r21,28(sp)
  801310:	dd000617 	ldw	r20,24(sp)
  801314:	dcc00517 	ldw	r19,20(sp)
  801318:	dc800417 	ldw	r18,16(sp)
  80131c:	dc400317 	ldw	r17,12(sp)
  801320:	dc000217 	ldw	r16,8(sp)
  801324:	dec00c04 	addi	sp,sp,48
  801328:	f800283a 	ret
  80132c:	00803fc4 	movi	r2,255
  801330:	11c5803a 	cmpltu	r2,r2,r7
  801334:	100490fa 	slli	r2,r2,3
  801338:	003f9906 	br	8011a0 <__alt_data_end+0xff8011a0>
  80133c:	00803fc4 	movi	r2,255
  801340:	1445803a 	cmpltu	r2,r2,r17
  801344:	100490fa 	slli	r2,r2,3
  801348:	003fad06 	br	801200 <__alt_data_end+0xff801200>
  80134c:	00804034 	movhi	r2,256
  801350:	10bfffc4 	addi	r2,r2,-1
  801354:	11809f36 	bltu	r2,r6,8015d4 <__udivdi3+0x5a0>
  801358:	00800404 	movi	r2,16
  80135c:	003f4c06 	br	801090 <__alt_data_end+0xff801090>
  801360:	3dce983a 	sll	r7,r7,r23
  801364:	30b8d83a 	srl	fp,r6,r2
  801368:	80a2d83a 	srl	r17,r16,r2
  80136c:	35cc983a 	sll	r6,r6,r23
  801370:	3f38b03a 	or	fp,r7,fp
  801374:	e024d43a 	srli	r18,fp,16
  801378:	9884d83a 	srl	r2,r19,r2
  80137c:	85e0983a 	sll	r16,r16,r23
  801380:	8809883a 	mov	r4,r17
  801384:	900b883a 	mov	r5,r18
  801388:	d9800015 	stw	r6,0(sp)
  80138c:	1420b03a 	or	r16,r2,r16
  801390:	080178c0 	call	80178c <__umodsi3>
  801394:	900b883a 	mov	r5,r18
  801398:	8809883a 	mov	r4,r17
  80139c:	1029883a 	mov	r20,r2
  8013a0:	e5bfffcc 	andi	r22,fp,65535
  8013a4:	08017280 	call	801728 <__udivsi3>
  8013a8:	100b883a 	mov	r5,r2
  8013ac:	b009883a 	mov	r4,r22
  8013b0:	102b883a 	mov	r21,r2
  8013b4:	08017e40 	call	8017e4 <__mulsi3>
  8013b8:	a028943a 	slli	r20,r20,16
  8013bc:	8006d43a 	srli	r3,r16,16
  8013c0:	1d06b03a 	or	r3,r3,r20
  8013c4:	1880042e 	bgeu	r3,r2,8013d8 <__udivdi3+0x3a4>
  8013c8:	1f07883a 	add	r3,r3,fp
  8013cc:	a93fffc4 	addi	r4,r21,-1
  8013d0:	1f00892e 	bgeu	r3,fp,8015f8 <__udivdi3+0x5c4>
  8013d4:	202b883a 	mov	r21,r4
  8013d8:	18a3c83a 	sub	r17,r3,r2
  8013dc:	8809883a 	mov	r4,r17
  8013e0:	900b883a 	mov	r5,r18
  8013e4:	080178c0 	call	80178c <__umodsi3>
  8013e8:	1029883a 	mov	r20,r2
  8013ec:	8809883a 	mov	r4,r17
  8013f0:	900b883a 	mov	r5,r18
  8013f4:	a028943a 	slli	r20,r20,16
  8013f8:	08017280 	call	801728 <__udivsi3>
  8013fc:	100b883a 	mov	r5,r2
  801400:	b009883a 	mov	r4,r22
  801404:	843fffcc 	andi	r16,r16,65535
  801408:	1023883a 	mov	r17,r2
  80140c:	8520b03a 	or	r16,r16,r20
  801410:	08017e40 	call	8017e4 <__mulsi3>
  801414:	8080042e 	bgeu	r16,r2,801428 <__udivdi3+0x3f4>
  801418:	8721883a 	add	r16,r16,fp
  80141c:	88ffffc4 	addi	r3,r17,-1
  801420:	8700712e 	bgeu	r16,fp,8015e8 <__udivdi3+0x5b4>
  801424:	1823883a 	mov	r17,r3
  801428:	a80e943a 	slli	r7,r21,16
  80142c:	d8c00017 	ldw	r3,0(sp)
  801430:	80a1c83a 	sub	r16,r16,r2
  801434:	3c64b03a 	or	r18,r7,r17
  801438:	1d3fffcc 	andi	r20,r3,65535
  80143c:	9022d43a 	srli	r17,r18,16
  801440:	95bfffcc 	andi	r22,r18,65535
  801444:	a00b883a 	mov	r5,r20
  801448:	b009883a 	mov	r4,r22
  80144c:	182ad43a 	srli	r21,r3,16
  801450:	08017e40 	call	8017e4 <__mulsi3>
  801454:	a00b883a 	mov	r5,r20
  801458:	8809883a 	mov	r4,r17
  80145c:	1039883a 	mov	fp,r2
  801460:	08017e40 	call	8017e4 <__mulsi3>
  801464:	8809883a 	mov	r4,r17
  801468:	a80b883a 	mov	r5,r21
  80146c:	1029883a 	mov	r20,r2
  801470:	08017e40 	call	8017e4 <__mulsi3>
  801474:	a80b883a 	mov	r5,r21
  801478:	b009883a 	mov	r4,r22
  80147c:	1023883a 	mov	r17,r2
  801480:	08017e40 	call	8017e4 <__mulsi3>
  801484:	e006d43a 	srli	r3,fp,16
  801488:	1505883a 	add	r2,r2,r20
  80148c:	1887883a 	add	r3,r3,r2
  801490:	1d00022e 	bgeu	r3,r20,80149c <__udivdi3+0x468>
  801494:	00800074 	movhi	r2,1
  801498:	88a3883a 	add	r17,r17,r2
  80149c:	1804d43a 	srli	r2,r3,16
  8014a0:	1463883a 	add	r17,r2,r17
  8014a4:	84404436 	bltu	r16,r17,8015b8 <__udivdi3+0x584>
  8014a8:	84403e26 	beq	r16,r17,8015a4 <__udivdi3+0x570>
  8014ac:	9005883a 	mov	r2,r18
  8014b0:	0007883a 	mov	r3,zero
  8014b4:	003f9106 	br	8012fc <__alt_data_end+0xff8012fc>
  8014b8:	88e2983a 	sll	r17,r17,r3
  8014bc:	80aed83a 	srl	r23,r16,r2
  8014c0:	80e0983a 	sll	r16,r16,r3
  8014c4:	882ad43a 	srli	r21,r17,16
  8014c8:	9884d83a 	srl	r2,r19,r2
  8014cc:	b809883a 	mov	r4,r23
  8014d0:	a80b883a 	mov	r5,r21
  8014d4:	98e4983a 	sll	r18,r19,r3
  8014d8:	142cb03a 	or	r22,r2,r16
  8014dc:	080178c0 	call	80178c <__umodsi3>
  8014e0:	b809883a 	mov	r4,r23
  8014e4:	a80b883a 	mov	r5,r21
  8014e8:	1027883a 	mov	r19,r2
  8014ec:	8d3fffcc 	andi	r20,r17,65535
  8014f0:	08017280 	call	801728 <__udivsi3>
  8014f4:	a009883a 	mov	r4,r20
  8014f8:	100b883a 	mov	r5,r2
  8014fc:	102f883a 	mov	r23,r2
  801500:	08017e40 	call	8017e4 <__mulsi3>
  801504:	9826943a 	slli	r19,r19,16
  801508:	b008d43a 	srli	r4,r22,16
  80150c:	24c8b03a 	or	r4,r4,r19
  801510:	2080062e 	bgeu	r4,r2,80152c <__udivdi3+0x4f8>
  801514:	2449883a 	add	r4,r4,r17
  801518:	b8ffffc4 	addi	r3,r23,-1
  80151c:	24403c36 	bltu	r4,r17,801610 <__udivdi3+0x5dc>
  801520:	20803b2e 	bgeu	r4,r2,801610 <__udivdi3+0x5dc>
  801524:	bdffff84 	addi	r23,r23,-2
  801528:	2449883a 	add	r4,r4,r17
  80152c:	20a1c83a 	sub	r16,r4,r2
  801530:	a80b883a 	mov	r5,r21
  801534:	8009883a 	mov	r4,r16
  801538:	080178c0 	call	80178c <__umodsi3>
  80153c:	a80b883a 	mov	r5,r21
  801540:	8009883a 	mov	r4,r16
  801544:	1027883a 	mov	r19,r2
  801548:	08017280 	call	801728 <__udivsi3>
  80154c:	a009883a 	mov	r4,r20
  801550:	100b883a 	mov	r5,r2
  801554:	9826943a 	slli	r19,r19,16
  801558:	1039883a 	mov	fp,r2
  80155c:	08017e40 	call	8017e4 <__mulsi3>
  801560:	b13fffcc 	andi	r4,r22,65535
  801564:	24c8b03a 	or	r4,r4,r19
  801568:	2080062e 	bgeu	r4,r2,801584 <__udivdi3+0x550>
  80156c:	2449883a 	add	r4,r4,r17
  801570:	e0ffffc4 	addi	r3,fp,-1
  801574:	24402436 	bltu	r4,r17,801608 <__udivdi3+0x5d4>
  801578:	2080232e 	bgeu	r4,r2,801608 <__udivdi3+0x5d4>
  80157c:	e73fff84 	addi	fp,fp,-2
  801580:	2449883a 	add	r4,r4,r17
  801584:	b82e943a 	slli	r23,r23,16
  801588:	20a1c83a 	sub	r16,r4,r2
  80158c:	bf06b03a 	or	r3,r23,fp
  801590:	003f2806 	br	801234 <__alt_data_end+0xff801234>
  801594:	2021883a 	mov	r16,r4
  801598:	003f5306 	br	8012e8 <__alt_data_end+0xff8012e8>
  80159c:	1821883a 	mov	r16,r3
  8015a0:	003ef406 	br	801174 <__alt_data_end+0xff801174>
  8015a4:	1806943a 	slli	r3,r3,16
  8015a8:	9de6983a 	sll	r19,r19,r23
  8015ac:	e73fffcc 	andi	fp,fp,65535
  8015b0:	1f07883a 	add	r3,r3,fp
  8015b4:	98ffbd2e 	bgeu	r19,r3,8014ac <__alt_data_end+0xff8014ac>
  8015b8:	90bfffc4 	addi	r2,r18,-1
  8015bc:	0007883a 	mov	r3,zero
  8015c0:	003f4e06 	br	8012fc <__alt_data_end+0xff8012fc>
  8015c4:	00800604 	movi	r2,24
  8015c8:	003ef506 	br	8011a0 <__alt_data_end+0xff8011a0>
  8015cc:	00800604 	movi	r2,24
  8015d0:	003f0b06 	br	801200 <__alt_data_end+0xff801200>
  8015d4:	00800604 	movi	r2,24
  8015d8:	003ead06 	br	801090 <__alt_data_end+0xff801090>
  8015dc:	0007883a 	mov	r3,zero
  8015e0:	00800044 	movi	r2,1
  8015e4:	003f4506 	br	8012fc <__alt_data_end+0xff8012fc>
  8015e8:	80bf8e2e 	bgeu	r16,r2,801424 <__alt_data_end+0xff801424>
  8015ec:	8c7fff84 	addi	r17,r17,-2
  8015f0:	8721883a 	add	r16,r16,fp
  8015f4:	003f8c06 	br	801428 <__alt_data_end+0xff801428>
  8015f8:	18bf762e 	bgeu	r3,r2,8013d4 <__alt_data_end+0xff8013d4>
  8015fc:	ad7fff84 	addi	r21,r21,-2
  801600:	1f07883a 	add	r3,r3,fp
  801604:	003f7406 	br	8013d8 <__alt_data_end+0xff8013d8>
  801608:	1839883a 	mov	fp,r3
  80160c:	003fdd06 	br	801584 <__alt_data_end+0xff801584>
  801610:	182f883a 	mov	r23,r3
  801614:	003fc506 	br	80152c <__alt_data_end+0xff80152c>
  801618:	b5bfff84 	addi	r22,r22,-2
  80161c:	3c4f883a 	add	r7,r7,r17
  801620:	003f1a06 	br	80128c <__alt_data_end+0xff80128c>
  801624:	b5bfff84 	addi	r22,r22,-2
  801628:	1c47883a 	add	r3,r3,r17
  80162c:	003ebc06 	br	801120 <__alt_data_end+0xff801120>

00801630 <__divsi3>:
  801630:	20001b16 	blt	r4,zero,8016a0 <__divsi3+0x70>
  801634:	000f883a 	mov	r7,zero
  801638:	28001616 	blt	r5,zero,801694 <__divsi3+0x64>
  80163c:	200d883a 	mov	r6,r4
  801640:	29001a2e 	bgeu	r5,r4,8016ac <__divsi3+0x7c>
  801644:	00800804 	movi	r2,32
  801648:	00c00044 	movi	r3,1
  80164c:	00000106 	br	801654 <__divsi3+0x24>
  801650:	10000d26 	beq	r2,zero,801688 <__divsi3+0x58>
  801654:	294b883a 	add	r5,r5,r5
  801658:	10bfffc4 	addi	r2,r2,-1
  80165c:	18c7883a 	add	r3,r3,r3
  801660:	293ffb36 	bltu	r5,r4,801650 <__alt_data_end+0xff801650>
  801664:	0005883a 	mov	r2,zero
  801668:	18000726 	beq	r3,zero,801688 <__divsi3+0x58>
  80166c:	0005883a 	mov	r2,zero
  801670:	31400236 	bltu	r6,r5,80167c <__divsi3+0x4c>
  801674:	314dc83a 	sub	r6,r6,r5
  801678:	10c4b03a 	or	r2,r2,r3
  80167c:	1806d07a 	srli	r3,r3,1
  801680:	280ad07a 	srli	r5,r5,1
  801684:	183ffa1e 	bne	r3,zero,801670 <__alt_data_end+0xff801670>
  801688:	38000126 	beq	r7,zero,801690 <__divsi3+0x60>
  80168c:	0085c83a 	sub	r2,zero,r2
  801690:	f800283a 	ret
  801694:	014bc83a 	sub	r5,zero,r5
  801698:	39c0005c 	xori	r7,r7,1
  80169c:	003fe706 	br	80163c <__alt_data_end+0xff80163c>
  8016a0:	0109c83a 	sub	r4,zero,r4
  8016a4:	01c00044 	movi	r7,1
  8016a8:	003fe306 	br	801638 <__alt_data_end+0xff801638>
  8016ac:	00c00044 	movi	r3,1
  8016b0:	003fee06 	br	80166c <__alt_data_end+0xff80166c>

008016b4 <__modsi3>:
  8016b4:	20001716 	blt	r4,zero,801714 <__modsi3+0x60>
  8016b8:	000f883a 	mov	r7,zero
  8016bc:	2005883a 	mov	r2,r4
  8016c0:	28001216 	blt	r5,zero,80170c <__modsi3+0x58>
  8016c4:	2900162e 	bgeu	r5,r4,801720 <__modsi3+0x6c>
  8016c8:	01800804 	movi	r6,32
  8016cc:	00c00044 	movi	r3,1
  8016d0:	00000106 	br	8016d8 <__modsi3+0x24>
  8016d4:	30000a26 	beq	r6,zero,801700 <__modsi3+0x4c>
  8016d8:	294b883a 	add	r5,r5,r5
  8016dc:	31bfffc4 	addi	r6,r6,-1
  8016e0:	18c7883a 	add	r3,r3,r3
  8016e4:	293ffb36 	bltu	r5,r4,8016d4 <__alt_data_end+0xff8016d4>
  8016e8:	18000526 	beq	r3,zero,801700 <__modsi3+0x4c>
  8016ec:	1806d07a 	srli	r3,r3,1
  8016f0:	11400136 	bltu	r2,r5,8016f8 <__modsi3+0x44>
  8016f4:	1145c83a 	sub	r2,r2,r5
  8016f8:	280ad07a 	srli	r5,r5,1
  8016fc:	183ffb1e 	bne	r3,zero,8016ec <__alt_data_end+0xff8016ec>
  801700:	38000126 	beq	r7,zero,801708 <__modsi3+0x54>
  801704:	0085c83a 	sub	r2,zero,r2
  801708:	f800283a 	ret
  80170c:	014bc83a 	sub	r5,zero,r5
  801710:	003fec06 	br	8016c4 <__alt_data_end+0xff8016c4>
  801714:	0109c83a 	sub	r4,zero,r4
  801718:	01c00044 	movi	r7,1
  80171c:	003fe706 	br	8016bc <__alt_data_end+0xff8016bc>
  801720:	00c00044 	movi	r3,1
  801724:	003ff106 	br	8016ec <__alt_data_end+0xff8016ec>

00801728 <__udivsi3>:
  801728:	200d883a 	mov	r6,r4
  80172c:	2900152e 	bgeu	r5,r4,801784 <__udivsi3+0x5c>
  801730:	28001416 	blt	r5,zero,801784 <__udivsi3+0x5c>
  801734:	00800804 	movi	r2,32
  801738:	00c00044 	movi	r3,1
  80173c:	00000206 	br	801748 <__udivsi3+0x20>
  801740:	10000e26 	beq	r2,zero,80177c <__udivsi3+0x54>
  801744:	28000516 	blt	r5,zero,80175c <__udivsi3+0x34>
  801748:	294b883a 	add	r5,r5,r5
  80174c:	10bfffc4 	addi	r2,r2,-1
  801750:	18c7883a 	add	r3,r3,r3
  801754:	293ffa36 	bltu	r5,r4,801740 <__alt_data_end+0xff801740>
  801758:	18000826 	beq	r3,zero,80177c <__udivsi3+0x54>
  80175c:	0005883a 	mov	r2,zero
  801760:	31400236 	bltu	r6,r5,80176c <__udivsi3+0x44>
  801764:	314dc83a 	sub	r6,r6,r5
  801768:	10c4b03a 	or	r2,r2,r3
  80176c:	1806d07a 	srli	r3,r3,1
  801770:	280ad07a 	srli	r5,r5,1
  801774:	183ffa1e 	bne	r3,zero,801760 <__alt_data_end+0xff801760>
  801778:	f800283a 	ret
  80177c:	0005883a 	mov	r2,zero
  801780:	f800283a 	ret
  801784:	00c00044 	movi	r3,1
  801788:	003ff406 	br	80175c <__alt_data_end+0xff80175c>

0080178c <__umodsi3>:
  80178c:	2005883a 	mov	r2,r4
  801790:	2900122e 	bgeu	r5,r4,8017dc <__umodsi3+0x50>
  801794:	28001116 	blt	r5,zero,8017dc <__umodsi3+0x50>
  801798:	01800804 	movi	r6,32
  80179c:	00c00044 	movi	r3,1
  8017a0:	00000206 	br	8017ac <__umodsi3+0x20>
  8017a4:	30000c26 	beq	r6,zero,8017d8 <__umodsi3+0x4c>
  8017a8:	28000516 	blt	r5,zero,8017c0 <__umodsi3+0x34>
  8017ac:	294b883a 	add	r5,r5,r5
  8017b0:	31bfffc4 	addi	r6,r6,-1
  8017b4:	18c7883a 	add	r3,r3,r3
  8017b8:	293ffa36 	bltu	r5,r4,8017a4 <__alt_data_end+0xff8017a4>
  8017bc:	18000626 	beq	r3,zero,8017d8 <__umodsi3+0x4c>
  8017c0:	1806d07a 	srli	r3,r3,1
  8017c4:	11400136 	bltu	r2,r5,8017cc <__umodsi3+0x40>
  8017c8:	1145c83a 	sub	r2,r2,r5
  8017cc:	280ad07a 	srli	r5,r5,1
  8017d0:	183ffb1e 	bne	r3,zero,8017c0 <__alt_data_end+0xff8017c0>
  8017d4:	f800283a 	ret
  8017d8:	f800283a 	ret
  8017dc:	00c00044 	movi	r3,1
  8017e0:	003ff706 	br	8017c0 <__alt_data_end+0xff8017c0>

008017e4 <__mulsi3>:
  8017e4:	0005883a 	mov	r2,zero
  8017e8:	20000726 	beq	r4,zero,801808 <__mulsi3+0x24>
  8017ec:	20c0004c 	andi	r3,r4,1
  8017f0:	2008d07a 	srli	r4,r4,1
  8017f4:	18000126 	beq	r3,zero,8017fc <__mulsi3+0x18>
  8017f8:	1145883a 	add	r2,r2,r5
  8017fc:	294b883a 	add	r5,r5,r5
  801800:	203ffa1e 	bne	r4,zero,8017ec <__alt_data_end+0xff8017ec>
  801804:	f800283a 	ret
  801808:	f800283a 	ret

0080180c <__adddf3>:
  80180c:	02c00434 	movhi	r11,16
  801810:	5affffc4 	addi	r11,r11,-1
  801814:	2806d7fa 	srli	r3,r5,31
  801818:	2ad4703a 	and	r10,r5,r11
  80181c:	3ad2703a 	and	r9,r7,r11
  801820:	3804d53a 	srli	r2,r7,20
  801824:	3018d77a 	srli	r12,r6,29
  801828:	280ad53a 	srli	r5,r5,20
  80182c:	501490fa 	slli	r10,r10,3
  801830:	2010d77a 	srli	r8,r4,29
  801834:	481290fa 	slli	r9,r9,3
  801838:	380ed7fa 	srli	r7,r7,31
  80183c:	defffb04 	addi	sp,sp,-20
  801840:	dc800215 	stw	r18,8(sp)
  801844:	dc400115 	stw	r17,4(sp)
  801848:	dc000015 	stw	r16,0(sp)
  80184c:	dfc00415 	stw	ra,16(sp)
  801850:	dcc00315 	stw	r19,12(sp)
  801854:	1c803fcc 	andi	r18,r3,255
  801858:	2c01ffcc 	andi	r16,r5,2047
  80185c:	5210b03a 	or	r8,r10,r8
  801860:	202290fa 	slli	r17,r4,3
  801864:	1081ffcc 	andi	r2,r2,2047
  801868:	4b12b03a 	or	r9,r9,r12
  80186c:	300c90fa 	slli	r6,r6,3
  801870:	91c07526 	beq	r18,r7,801a48 <__adddf3+0x23c>
  801874:	8087c83a 	sub	r3,r16,r2
  801878:	00c0ab0e 	bge	zero,r3,801b28 <__adddf3+0x31c>
  80187c:	10002a1e 	bne	r2,zero,801928 <__adddf3+0x11c>
  801880:	4984b03a 	or	r2,r9,r6
  801884:	1000961e 	bne	r2,zero,801ae0 <__adddf3+0x2d4>
  801888:	888001cc 	andi	r2,r17,7
  80188c:	10000726 	beq	r2,zero,8018ac <__adddf3+0xa0>
  801890:	888003cc 	andi	r2,r17,15
  801894:	00c00104 	movi	r3,4
  801898:	10c00426 	beq	r2,r3,8018ac <__adddf3+0xa0>
  80189c:	88c7883a 	add	r3,r17,r3
  8018a0:	1c63803a 	cmpltu	r17,r3,r17
  8018a4:	4451883a 	add	r8,r8,r17
  8018a8:	1823883a 	mov	r17,r3
  8018ac:	4080202c 	andhi	r2,r8,128
  8018b0:	10005926 	beq	r2,zero,801a18 <__adddf3+0x20c>
  8018b4:	84000044 	addi	r16,r16,1
  8018b8:	0081ffc4 	movi	r2,2047
  8018bc:	8080ba26 	beq	r16,r2,801ba8 <__adddf3+0x39c>
  8018c0:	00bfe034 	movhi	r2,65408
  8018c4:	10bfffc4 	addi	r2,r2,-1
  8018c8:	4090703a 	and	r8,r8,r2
  8018cc:	4004977a 	slli	r2,r8,29
  8018d0:	4010927a 	slli	r8,r8,9
  8018d4:	8822d0fa 	srli	r17,r17,3
  8018d8:	8401ffcc 	andi	r16,r16,2047
  8018dc:	4010d33a 	srli	r8,r8,12
  8018e0:	9007883a 	mov	r3,r18
  8018e4:	1444b03a 	or	r2,r2,r17
  8018e8:	8401ffcc 	andi	r16,r16,2047
  8018ec:	8020953a 	slli	r16,r16,20
  8018f0:	18c03fcc 	andi	r3,r3,255
  8018f4:	01000434 	movhi	r4,16
  8018f8:	213fffc4 	addi	r4,r4,-1
  8018fc:	180697fa 	slli	r3,r3,31
  801900:	4110703a 	and	r8,r8,r4
  801904:	4410b03a 	or	r8,r8,r16
  801908:	40c6b03a 	or	r3,r8,r3
  80190c:	dfc00417 	ldw	ra,16(sp)
  801910:	dcc00317 	ldw	r19,12(sp)
  801914:	dc800217 	ldw	r18,8(sp)
  801918:	dc400117 	ldw	r17,4(sp)
  80191c:	dc000017 	ldw	r16,0(sp)
  801920:	dec00504 	addi	sp,sp,20
  801924:	f800283a 	ret
  801928:	0081ffc4 	movi	r2,2047
  80192c:	80bfd626 	beq	r16,r2,801888 <__alt_data_end+0xff801888>
  801930:	4a402034 	orhi	r9,r9,128
  801934:	00800e04 	movi	r2,56
  801938:	10c09f16 	blt	r2,r3,801bb8 <__adddf3+0x3ac>
  80193c:	008007c4 	movi	r2,31
  801940:	10c0c216 	blt	r2,r3,801c4c <__adddf3+0x440>
  801944:	00800804 	movi	r2,32
  801948:	10c5c83a 	sub	r2,r2,r3
  80194c:	488a983a 	sll	r5,r9,r2
  801950:	30c8d83a 	srl	r4,r6,r3
  801954:	3084983a 	sll	r2,r6,r2
  801958:	48c6d83a 	srl	r3,r9,r3
  80195c:	290cb03a 	or	r6,r5,r4
  801960:	1004c03a 	cmpne	r2,r2,zero
  801964:	308cb03a 	or	r6,r6,r2
  801968:	898dc83a 	sub	r6,r17,r6
  80196c:	89a3803a 	cmpltu	r17,r17,r6
  801970:	40d1c83a 	sub	r8,r8,r3
  801974:	4451c83a 	sub	r8,r8,r17
  801978:	3023883a 	mov	r17,r6
  80197c:	4080202c 	andhi	r2,r8,128
  801980:	10002326 	beq	r2,zero,801a10 <__adddf3+0x204>
  801984:	04c02034 	movhi	r19,128
  801988:	9cffffc4 	addi	r19,r19,-1
  80198c:	44e6703a 	and	r19,r8,r19
  801990:	98007626 	beq	r19,zero,801b6c <__adddf3+0x360>
  801994:	9809883a 	mov	r4,r19
  801998:	08033740 	call	803374 <__clzsi2>
  80199c:	10fffe04 	addi	r3,r2,-8
  8019a0:	010007c4 	movi	r4,31
  8019a4:	20c07716 	blt	r4,r3,801b84 <__adddf3+0x378>
  8019a8:	00800804 	movi	r2,32
  8019ac:	10c5c83a 	sub	r2,r2,r3
  8019b0:	8884d83a 	srl	r2,r17,r2
  8019b4:	98d0983a 	sll	r8,r19,r3
  8019b8:	88e2983a 	sll	r17,r17,r3
  8019bc:	1204b03a 	or	r2,r2,r8
  8019c0:	1c007416 	blt	r3,r16,801b94 <__adddf3+0x388>
  8019c4:	1c21c83a 	sub	r16,r3,r16
  8019c8:	82000044 	addi	r8,r16,1
  8019cc:	00c007c4 	movi	r3,31
  8019d0:	1a009116 	blt	r3,r8,801c18 <__adddf3+0x40c>
  8019d4:	00c00804 	movi	r3,32
  8019d8:	1a07c83a 	sub	r3,r3,r8
  8019dc:	8a08d83a 	srl	r4,r17,r8
  8019e0:	88e2983a 	sll	r17,r17,r3
  8019e4:	10c6983a 	sll	r3,r2,r3
  8019e8:	1210d83a 	srl	r8,r2,r8
  8019ec:	8804c03a 	cmpne	r2,r17,zero
  8019f0:	1906b03a 	or	r3,r3,r4
  8019f4:	18a2b03a 	or	r17,r3,r2
  8019f8:	0021883a 	mov	r16,zero
  8019fc:	003fa206 	br	801888 <__alt_data_end+0xff801888>
  801a00:	1890b03a 	or	r8,r3,r2
  801a04:	40017d26 	beq	r8,zero,801ffc <__adddf3+0x7f0>
  801a08:	1011883a 	mov	r8,r2
  801a0c:	1823883a 	mov	r17,r3
  801a10:	888001cc 	andi	r2,r17,7
  801a14:	103f9e1e 	bne	r2,zero,801890 <__alt_data_end+0xff801890>
  801a18:	4004977a 	slli	r2,r8,29
  801a1c:	8822d0fa 	srli	r17,r17,3
  801a20:	4010d0fa 	srli	r8,r8,3
  801a24:	9007883a 	mov	r3,r18
  801a28:	1444b03a 	or	r2,r2,r17
  801a2c:	0101ffc4 	movi	r4,2047
  801a30:	81002426 	beq	r16,r4,801ac4 <__adddf3+0x2b8>
  801a34:	8120703a 	and	r16,r16,r4
  801a38:	01000434 	movhi	r4,16
  801a3c:	213fffc4 	addi	r4,r4,-1
  801a40:	4110703a 	and	r8,r8,r4
  801a44:	003fa806 	br	8018e8 <__alt_data_end+0xff8018e8>
  801a48:	8089c83a 	sub	r4,r16,r2
  801a4c:	01005e0e 	bge	zero,r4,801bc8 <__adddf3+0x3bc>
  801a50:	10002b26 	beq	r2,zero,801b00 <__adddf3+0x2f4>
  801a54:	0081ffc4 	movi	r2,2047
  801a58:	80bf8b26 	beq	r16,r2,801888 <__alt_data_end+0xff801888>
  801a5c:	4a402034 	orhi	r9,r9,128
  801a60:	00800e04 	movi	r2,56
  801a64:	1100a40e 	bge	r2,r4,801cf8 <__adddf3+0x4ec>
  801a68:	498cb03a 	or	r6,r9,r6
  801a6c:	300ac03a 	cmpne	r5,r6,zero
  801a70:	0013883a 	mov	r9,zero
  801a74:	2c4b883a 	add	r5,r5,r17
  801a78:	2c63803a 	cmpltu	r17,r5,r17
  801a7c:	4a11883a 	add	r8,r9,r8
  801a80:	8a11883a 	add	r8,r17,r8
  801a84:	2823883a 	mov	r17,r5
  801a88:	4080202c 	andhi	r2,r8,128
  801a8c:	103fe026 	beq	r2,zero,801a10 <__alt_data_end+0xff801a10>
  801a90:	84000044 	addi	r16,r16,1
  801a94:	0081ffc4 	movi	r2,2047
  801a98:	8080d226 	beq	r16,r2,801de4 <__adddf3+0x5d8>
  801a9c:	00bfe034 	movhi	r2,65408
  801aa0:	10bfffc4 	addi	r2,r2,-1
  801aa4:	4090703a 	and	r8,r8,r2
  801aa8:	880ad07a 	srli	r5,r17,1
  801aac:	400897fa 	slli	r4,r8,31
  801ab0:	88c0004c 	andi	r3,r17,1
  801ab4:	28e2b03a 	or	r17,r5,r3
  801ab8:	4010d07a 	srli	r8,r8,1
  801abc:	2462b03a 	or	r17,r4,r17
  801ac0:	003f7106 	br	801888 <__alt_data_end+0xff801888>
  801ac4:	4088b03a 	or	r4,r8,r2
  801ac8:	20014526 	beq	r4,zero,801fe0 <__adddf3+0x7d4>
  801acc:	01000434 	movhi	r4,16
  801ad0:	42000234 	orhi	r8,r8,8
  801ad4:	213fffc4 	addi	r4,r4,-1
  801ad8:	4110703a 	and	r8,r8,r4
  801adc:	003f8206 	br	8018e8 <__alt_data_end+0xff8018e8>
  801ae0:	18ffffc4 	addi	r3,r3,-1
  801ae4:	1800491e 	bne	r3,zero,801c0c <__adddf3+0x400>
  801ae8:	898bc83a 	sub	r5,r17,r6
  801aec:	8963803a 	cmpltu	r17,r17,r5
  801af0:	4251c83a 	sub	r8,r8,r9
  801af4:	4451c83a 	sub	r8,r8,r17
  801af8:	2823883a 	mov	r17,r5
  801afc:	003f9f06 	br	80197c <__alt_data_end+0xff80197c>
  801b00:	4984b03a 	or	r2,r9,r6
  801b04:	103f6026 	beq	r2,zero,801888 <__alt_data_end+0xff801888>
  801b08:	213fffc4 	addi	r4,r4,-1
  801b0c:	2000931e 	bne	r4,zero,801d5c <__adddf3+0x550>
  801b10:	898d883a 	add	r6,r17,r6
  801b14:	3463803a 	cmpltu	r17,r6,r17
  801b18:	4251883a 	add	r8,r8,r9
  801b1c:	8a11883a 	add	r8,r17,r8
  801b20:	3023883a 	mov	r17,r6
  801b24:	003fd806 	br	801a88 <__alt_data_end+0xff801a88>
  801b28:	1800541e 	bne	r3,zero,801c7c <__adddf3+0x470>
  801b2c:	80800044 	addi	r2,r16,1
  801b30:	1081ffcc 	andi	r2,r2,2047
  801b34:	00c00044 	movi	r3,1
  801b38:	1880a00e 	bge	r3,r2,801dbc <__adddf3+0x5b0>
  801b3c:	8989c83a 	sub	r4,r17,r6
  801b40:	8905803a 	cmpltu	r2,r17,r4
  801b44:	4267c83a 	sub	r19,r8,r9
  801b48:	98a7c83a 	sub	r19,r19,r2
  801b4c:	9880202c 	andhi	r2,r19,128
  801b50:	10006326 	beq	r2,zero,801ce0 <__adddf3+0x4d4>
  801b54:	3463c83a 	sub	r17,r6,r17
  801b58:	4a07c83a 	sub	r3,r9,r8
  801b5c:	344d803a 	cmpltu	r6,r6,r17
  801b60:	19a7c83a 	sub	r19,r3,r6
  801b64:	3825883a 	mov	r18,r7
  801b68:	983f8a1e 	bne	r19,zero,801994 <__alt_data_end+0xff801994>
  801b6c:	8809883a 	mov	r4,r17
  801b70:	08033740 	call	803374 <__clzsi2>
  801b74:	10800804 	addi	r2,r2,32
  801b78:	10fffe04 	addi	r3,r2,-8
  801b7c:	010007c4 	movi	r4,31
  801b80:	20ff890e 	bge	r4,r3,8019a8 <__alt_data_end+0xff8019a8>
  801b84:	10bff604 	addi	r2,r2,-40
  801b88:	8884983a 	sll	r2,r17,r2
  801b8c:	0023883a 	mov	r17,zero
  801b90:	1c3f8c0e 	bge	r3,r16,8019c4 <__alt_data_end+0xff8019c4>
  801b94:	023fe034 	movhi	r8,65408
  801b98:	423fffc4 	addi	r8,r8,-1
  801b9c:	80e1c83a 	sub	r16,r16,r3
  801ba0:	1210703a 	and	r8,r2,r8
  801ba4:	003f3806 	br	801888 <__alt_data_end+0xff801888>
  801ba8:	9007883a 	mov	r3,r18
  801bac:	0011883a 	mov	r8,zero
  801bb0:	0005883a 	mov	r2,zero
  801bb4:	003f4c06 	br	8018e8 <__alt_data_end+0xff8018e8>
  801bb8:	498cb03a 	or	r6,r9,r6
  801bbc:	300cc03a 	cmpne	r6,r6,zero
  801bc0:	0007883a 	mov	r3,zero
  801bc4:	003f6806 	br	801968 <__alt_data_end+0xff801968>
  801bc8:	20009c1e 	bne	r4,zero,801e3c <__adddf3+0x630>
  801bcc:	80800044 	addi	r2,r16,1
  801bd0:	1141ffcc 	andi	r5,r2,2047
  801bd4:	01000044 	movi	r4,1
  801bd8:	2140670e 	bge	r4,r5,801d78 <__adddf3+0x56c>
  801bdc:	0101ffc4 	movi	r4,2047
  801be0:	11007f26 	beq	r2,r4,801de0 <__adddf3+0x5d4>
  801be4:	898d883a 	add	r6,r17,r6
  801be8:	4247883a 	add	r3,r8,r9
  801bec:	3451803a 	cmpltu	r8,r6,r17
  801bf0:	40d1883a 	add	r8,r8,r3
  801bf4:	402297fa 	slli	r17,r8,31
  801bf8:	300cd07a 	srli	r6,r6,1
  801bfc:	4010d07a 	srli	r8,r8,1
  801c00:	1021883a 	mov	r16,r2
  801c04:	89a2b03a 	or	r17,r17,r6
  801c08:	003f1f06 	br	801888 <__alt_data_end+0xff801888>
  801c0c:	0081ffc4 	movi	r2,2047
  801c10:	80bf481e 	bne	r16,r2,801934 <__alt_data_end+0xff801934>
  801c14:	003f1c06 	br	801888 <__alt_data_end+0xff801888>
  801c18:	843ff844 	addi	r16,r16,-31
  801c1c:	01000804 	movi	r4,32
  801c20:	1406d83a 	srl	r3,r2,r16
  801c24:	41005026 	beq	r8,r4,801d68 <__adddf3+0x55c>
  801c28:	01001004 	movi	r4,64
  801c2c:	2211c83a 	sub	r8,r4,r8
  801c30:	1204983a 	sll	r2,r2,r8
  801c34:	88a2b03a 	or	r17,r17,r2
  801c38:	8822c03a 	cmpne	r17,r17,zero
  801c3c:	1c62b03a 	or	r17,r3,r17
  801c40:	0011883a 	mov	r8,zero
  801c44:	0021883a 	mov	r16,zero
  801c48:	003f7106 	br	801a10 <__alt_data_end+0xff801a10>
  801c4c:	193ff804 	addi	r4,r3,-32
  801c50:	00800804 	movi	r2,32
  801c54:	4908d83a 	srl	r4,r9,r4
  801c58:	18804526 	beq	r3,r2,801d70 <__adddf3+0x564>
  801c5c:	00801004 	movi	r2,64
  801c60:	10c5c83a 	sub	r2,r2,r3
  801c64:	4886983a 	sll	r3,r9,r2
  801c68:	198cb03a 	or	r6,r3,r6
  801c6c:	300cc03a 	cmpne	r6,r6,zero
  801c70:	218cb03a 	or	r6,r4,r6
  801c74:	0007883a 	mov	r3,zero
  801c78:	003f3b06 	br	801968 <__alt_data_end+0xff801968>
  801c7c:	80002a26 	beq	r16,zero,801d28 <__adddf3+0x51c>
  801c80:	0101ffc4 	movi	r4,2047
  801c84:	11006826 	beq	r2,r4,801e28 <__adddf3+0x61c>
  801c88:	00c7c83a 	sub	r3,zero,r3
  801c8c:	42002034 	orhi	r8,r8,128
  801c90:	01000e04 	movi	r4,56
  801c94:	20c07c16 	blt	r4,r3,801e88 <__adddf3+0x67c>
  801c98:	010007c4 	movi	r4,31
  801c9c:	20c0da16 	blt	r4,r3,802008 <__adddf3+0x7fc>
  801ca0:	01000804 	movi	r4,32
  801ca4:	20c9c83a 	sub	r4,r4,r3
  801ca8:	4114983a 	sll	r10,r8,r4
  801cac:	88cad83a 	srl	r5,r17,r3
  801cb0:	8908983a 	sll	r4,r17,r4
  801cb4:	40c6d83a 	srl	r3,r8,r3
  801cb8:	5162b03a 	or	r17,r10,r5
  801cbc:	2008c03a 	cmpne	r4,r4,zero
  801cc0:	8922b03a 	or	r17,r17,r4
  801cc4:	3463c83a 	sub	r17,r6,r17
  801cc8:	48c7c83a 	sub	r3,r9,r3
  801ccc:	344d803a 	cmpltu	r6,r6,r17
  801cd0:	1991c83a 	sub	r8,r3,r6
  801cd4:	1021883a 	mov	r16,r2
  801cd8:	3825883a 	mov	r18,r7
  801cdc:	003f2706 	br	80197c <__alt_data_end+0xff80197c>
  801ce0:	24d0b03a 	or	r8,r4,r19
  801ce4:	40001b1e 	bne	r8,zero,801d54 <__adddf3+0x548>
  801ce8:	0005883a 	mov	r2,zero
  801cec:	0007883a 	mov	r3,zero
  801cf0:	0021883a 	mov	r16,zero
  801cf4:	003f4d06 	br	801a2c <__alt_data_end+0xff801a2c>
  801cf8:	008007c4 	movi	r2,31
  801cfc:	11003c16 	blt	r2,r4,801df0 <__adddf3+0x5e4>
  801d00:	00800804 	movi	r2,32
  801d04:	1105c83a 	sub	r2,r2,r4
  801d08:	488e983a 	sll	r7,r9,r2
  801d0c:	310ad83a 	srl	r5,r6,r4
  801d10:	3084983a 	sll	r2,r6,r2
  801d14:	4912d83a 	srl	r9,r9,r4
  801d18:	394ab03a 	or	r5,r7,r5
  801d1c:	1004c03a 	cmpne	r2,r2,zero
  801d20:	288ab03a 	or	r5,r5,r2
  801d24:	003f5306 	br	801a74 <__alt_data_end+0xff801a74>
  801d28:	4448b03a 	or	r4,r8,r17
  801d2c:	20003e26 	beq	r4,zero,801e28 <__adddf3+0x61c>
  801d30:	00c6303a 	nor	r3,zero,r3
  801d34:	18003a1e 	bne	r3,zero,801e20 <__adddf3+0x614>
  801d38:	3463c83a 	sub	r17,r6,r17
  801d3c:	4a07c83a 	sub	r3,r9,r8
  801d40:	344d803a 	cmpltu	r6,r6,r17
  801d44:	1991c83a 	sub	r8,r3,r6
  801d48:	1021883a 	mov	r16,r2
  801d4c:	3825883a 	mov	r18,r7
  801d50:	003f0a06 	br	80197c <__alt_data_end+0xff80197c>
  801d54:	2023883a 	mov	r17,r4
  801d58:	003f0d06 	br	801990 <__alt_data_end+0xff801990>
  801d5c:	0081ffc4 	movi	r2,2047
  801d60:	80bf3f1e 	bne	r16,r2,801a60 <__alt_data_end+0xff801a60>
  801d64:	003ec806 	br	801888 <__alt_data_end+0xff801888>
  801d68:	0005883a 	mov	r2,zero
  801d6c:	003fb106 	br	801c34 <__alt_data_end+0xff801c34>
  801d70:	0007883a 	mov	r3,zero
  801d74:	003fbc06 	br	801c68 <__alt_data_end+0xff801c68>
  801d78:	4444b03a 	or	r2,r8,r17
  801d7c:	8000871e 	bne	r16,zero,801f9c <__adddf3+0x790>
  801d80:	1000ba26 	beq	r2,zero,80206c <__adddf3+0x860>
  801d84:	4984b03a 	or	r2,r9,r6
  801d88:	103ebf26 	beq	r2,zero,801888 <__alt_data_end+0xff801888>
  801d8c:	8985883a 	add	r2,r17,r6
  801d90:	4247883a 	add	r3,r8,r9
  801d94:	1451803a 	cmpltu	r8,r2,r17
  801d98:	40d1883a 	add	r8,r8,r3
  801d9c:	40c0202c 	andhi	r3,r8,128
  801da0:	1023883a 	mov	r17,r2
  801da4:	183f1a26 	beq	r3,zero,801a10 <__alt_data_end+0xff801a10>
  801da8:	00bfe034 	movhi	r2,65408
  801dac:	10bfffc4 	addi	r2,r2,-1
  801db0:	2021883a 	mov	r16,r4
  801db4:	4090703a 	and	r8,r8,r2
  801db8:	003eb306 	br	801888 <__alt_data_end+0xff801888>
  801dbc:	4444b03a 	or	r2,r8,r17
  801dc0:	8000291e 	bne	r16,zero,801e68 <__adddf3+0x65c>
  801dc4:	10004b1e 	bne	r2,zero,801ef4 <__adddf3+0x6e8>
  801dc8:	4990b03a 	or	r8,r9,r6
  801dcc:	40008b26 	beq	r8,zero,801ffc <__adddf3+0x7f0>
  801dd0:	4811883a 	mov	r8,r9
  801dd4:	3023883a 	mov	r17,r6
  801dd8:	3825883a 	mov	r18,r7
  801ddc:	003eaa06 	br	801888 <__alt_data_end+0xff801888>
  801de0:	1021883a 	mov	r16,r2
  801de4:	0011883a 	mov	r8,zero
  801de8:	0005883a 	mov	r2,zero
  801dec:	003f0f06 	br	801a2c <__alt_data_end+0xff801a2c>
  801df0:	217ff804 	addi	r5,r4,-32
  801df4:	00800804 	movi	r2,32
  801df8:	494ad83a 	srl	r5,r9,r5
  801dfc:	20807d26 	beq	r4,r2,801ff4 <__adddf3+0x7e8>
  801e00:	00801004 	movi	r2,64
  801e04:	1109c83a 	sub	r4,r2,r4
  801e08:	4912983a 	sll	r9,r9,r4
  801e0c:	498cb03a 	or	r6,r9,r6
  801e10:	300cc03a 	cmpne	r6,r6,zero
  801e14:	298ab03a 	or	r5,r5,r6
  801e18:	0013883a 	mov	r9,zero
  801e1c:	003f1506 	br	801a74 <__alt_data_end+0xff801a74>
  801e20:	0101ffc4 	movi	r4,2047
  801e24:	113f9a1e 	bne	r2,r4,801c90 <__alt_data_end+0xff801c90>
  801e28:	4811883a 	mov	r8,r9
  801e2c:	3023883a 	mov	r17,r6
  801e30:	1021883a 	mov	r16,r2
  801e34:	3825883a 	mov	r18,r7
  801e38:	003e9306 	br	801888 <__alt_data_end+0xff801888>
  801e3c:	8000161e 	bne	r16,zero,801e98 <__adddf3+0x68c>
  801e40:	444ab03a 	or	r5,r8,r17
  801e44:	28005126 	beq	r5,zero,801f8c <__adddf3+0x780>
  801e48:	0108303a 	nor	r4,zero,r4
  801e4c:	20004d1e 	bne	r4,zero,801f84 <__adddf3+0x778>
  801e50:	89a3883a 	add	r17,r17,r6
  801e54:	4253883a 	add	r9,r8,r9
  801e58:	898d803a 	cmpltu	r6,r17,r6
  801e5c:	3251883a 	add	r8,r6,r9
  801e60:	1021883a 	mov	r16,r2
  801e64:	003f0806 	br	801a88 <__alt_data_end+0xff801a88>
  801e68:	1000301e 	bne	r2,zero,801f2c <__adddf3+0x720>
  801e6c:	4984b03a 	or	r2,r9,r6
  801e70:	10007126 	beq	r2,zero,802038 <__adddf3+0x82c>
  801e74:	4811883a 	mov	r8,r9
  801e78:	3023883a 	mov	r17,r6
  801e7c:	3825883a 	mov	r18,r7
  801e80:	0401ffc4 	movi	r16,2047
  801e84:	003e8006 	br	801888 <__alt_data_end+0xff801888>
  801e88:	4462b03a 	or	r17,r8,r17
  801e8c:	8822c03a 	cmpne	r17,r17,zero
  801e90:	0007883a 	mov	r3,zero
  801e94:	003f8b06 	br	801cc4 <__alt_data_end+0xff801cc4>
  801e98:	0141ffc4 	movi	r5,2047
  801e9c:	11403b26 	beq	r2,r5,801f8c <__adddf3+0x780>
  801ea0:	0109c83a 	sub	r4,zero,r4
  801ea4:	42002034 	orhi	r8,r8,128
  801ea8:	01400e04 	movi	r5,56
  801eac:	29006716 	blt	r5,r4,80204c <__adddf3+0x840>
  801eb0:	014007c4 	movi	r5,31
  801eb4:	29007016 	blt	r5,r4,802078 <__adddf3+0x86c>
  801eb8:	01400804 	movi	r5,32
  801ebc:	290bc83a 	sub	r5,r5,r4
  801ec0:	4154983a 	sll	r10,r8,r5
  801ec4:	890ed83a 	srl	r7,r17,r4
  801ec8:	894a983a 	sll	r5,r17,r5
  801ecc:	4108d83a 	srl	r4,r8,r4
  801ed0:	51e2b03a 	or	r17,r10,r7
  801ed4:	280ac03a 	cmpne	r5,r5,zero
  801ed8:	8962b03a 	or	r17,r17,r5
  801edc:	89a3883a 	add	r17,r17,r6
  801ee0:	2253883a 	add	r9,r4,r9
  801ee4:	898d803a 	cmpltu	r6,r17,r6
  801ee8:	3251883a 	add	r8,r6,r9
  801eec:	1021883a 	mov	r16,r2
  801ef0:	003ee506 	br	801a88 <__alt_data_end+0xff801a88>
  801ef4:	4984b03a 	or	r2,r9,r6
  801ef8:	103e6326 	beq	r2,zero,801888 <__alt_data_end+0xff801888>
  801efc:	8987c83a 	sub	r3,r17,r6
  801f00:	88c9803a 	cmpltu	r4,r17,r3
  801f04:	4245c83a 	sub	r2,r8,r9
  801f08:	1105c83a 	sub	r2,r2,r4
  801f0c:	1100202c 	andhi	r4,r2,128
  801f10:	203ebb26 	beq	r4,zero,801a00 <__alt_data_end+0xff801a00>
  801f14:	3463c83a 	sub	r17,r6,r17
  801f18:	4a07c83a 	sub	r3,r9,r8
  801f1c:	344d803a 	cmpltu	r6,r6,r17
  801f20:	1991c83a 	sub	r8,r3,r6
  801f24:	3825883a 	mov	r18,r7
  801f28:	003e5706 	br	801888 <__alt_data_end+0xff801888>
  801f2c:	4984b03a 	or	r2,r9,r6
  801f30:	10002e26 	beq	r2,zero,801fec <__adddf3+0x7e0>
  801f34:	4004d0fa 	srli	r2,r8,3
  801f38:	8822d0fa 	srli	r17,r17,3
  801f3c:	4010977a 	slli	r8,r8,29
  801f40:	10c0022c 	andhi	r3,r2,8
  801f44:	4462b03a 	or	r17,r8,r17
  801f48:	18000826 	beq	r3,zero,801f6c <__adddf3+0x760>
  801f4c:	4808d0fa 	srli	r4,r9,3
  801f50:	20c0022c 	andhi	r3,r4,8
  801f54:	1800051e 	bne	r3,zero,801f6c <__adddf3+0x760>
  801f58:	300cd0fa 	srli	r6,r6,3
  801f5c:	4806977a 	slli	r3,r9,29
  801f60:	2005883a 	mov	r2,r4
  801f64:	3825883a 	mov	r18,r7
  801f68:	19a2b03a 	or	r17,r3,r6
  801f6c:	8810d77a 	srli	r8,r17,29
  801f70:	100490fa 	slli	r2,r2,3
  801f74:	882290fa 	slli	r17,r17,3
  801f78:	0401ffc4 	movi	r16,2047
  801f7c:	4090b03a 	or	r8,r8,r2
  801f80:	003e4106 	br	801888 <__alt_data_end+0xff801888>
  801f84:	0141ffc4 	movi	r5,2047
  801f88:	117fc71e 	bne	r2,r5,801ea8 <__alt_data_end+0xff801ea8>
  801f8c:	4811883a 	mov	r8,r9
  801f90:	3023883a 	mov	r17,r6
  801f94:	1021883a 	mov	r16,r2
  801f98:	003e3b06 	br	801888 <__alt_data_end+0xff801888>
  801f9c:	10002f26 	beq	r2,zero,80205c <__adddf3+0x850>
  801fa0:	4984b03a 	or	r2,r9,r6
  801fa4:	10001126 	beq	r2,zero,801fec <__adddf3+0x7e0>
  801fa8:	4004d0fa 	srli	r2,r8,3
  801fac:	8822d0fa 	srli	r17,r17,3
  801fb0:	4010977a 	slli	r8,r8,29
  801fb4:	10c0022c 	andhi	r3,r2,8
  801fb8:	4462b03a 	or	r17,r8,r17
  801fbc:	183feb26 	beq	r3,zero,801f6c <__alt_data_end+0xff801f6c>
  801fc0:	4808d0fa 	srli	r4,r9,3
  801fc4:	20c0022c 	andhi	r3,r4,8
  801fc8:	183fe81e 	bne	r3,zero,801f6c <__alt_data_end+0xff801f6c>
  801fcc:	300cd0fa 	srli	r6,r6,3
  801fd0:	4806977a 	slli	r3,r9,29
  801fd4:	2005883a 	mov	r2,r4
  801fd8:	19a2b03a 	or	r17,r3,r6
  801fdc:	003fe306 	br	801f6c <__alt_data_end+0xff801f6c>
  801fe0:	0011883a 	mov	r8,zero
  801fe4:	0005883a 	mov	r2,zero
  801fe8:	003e3f06 	br	8018e8 <__alt_data_end+0xff8018e8>
  801fec:	0401ffc4 	movi	r16,2047
  801ff0:	003e2506 	br	801888 <__alt_data_end+0xff801888>
  801ff4:	0013883a 	mov	r9,zero
  801ff8:	003f8406 	br	801e0c <__alt_data_end+0xff801e0c>
  801ffc:	0005883a 	mov	r2,zero
  802000:	0007883a 	mov	r3,zero
  802004:	003e8906 	br	801a2c <__alt_data_end+0xff801a2c>
  802008:	197ff804 	addi	r5,r3,-32
  80200c:	01000804 	movi	r4,32
  802010:	414ad83a 	srl	r5,r8,r5
  802014:	19002426 	beq	r3,r4,8020a8 <__adddf3+0x89c>
  802018:	01001004 	movi	r4,64
  80201c:	20c7c83a 	sub	r3,r4,r3
  802020:	40c6983a 	sll	r3,r8,r3
  802024:	1c46b03a 	or	r3,r3,r17
  802028:	1806c03a 	cmpne	r3,r3,zero
  80202c:	28e2b03a 	or	r17,r5,r3
  802030:	0007883a 	mov	r3,zero
  802034:	003f2306 	br	801cc4 <__alt_data_end+0xff801cc4>
  802038:	0007883a 	mov	r3,zero
  80203c:	5811883a 	mov	r8,r11
  802040:	00bfffc4 	movi	r2,-1
  802044:	0401ffc4 	movi	r16,2047
  802048:	003e7806 	br	801a2c <__alt_data_end+0xff801a2c>
  80204c:	4462b03a 	or	r17,r8,r17
  802050:	8822c03a 	cmpne	r17,r17,zero
  802054:	0009883a 	mov	r4,zero
  802058:	003fa006 	br	801edc <__alt_data_end+0xff801edc>
  80205c:	4811883a 	mov	r8,r9
  802060:	3023883a 	mov	r17,r6
  802064:	0401ffc4 	movi	r16,2047
  802068:	003e0706 	br	801888 <__alt_data_end+0xff801888>
  80206c:	4811883a 	mov	r8,r9
  802070:	3023883a 	mov	r17,r6
  802074:	003e0406 	br	801888 <__alt_data_end+0xff801888>
  802078:	21fff804 	addi	r7,r4,-32
  80207c:	01400804 	movi	r5,32
  802080:	41ced83a 	srl	r7,r8,r7
  802084:	21400a26 	beq	r4,r5,8020b0 <__adddf3+0x8a4>
  802088:	01401004 	movi	r5,64
  80208c:	2909c83a 	sub	r4,r5,r4
  802090:	4108983a 	sll	r4,r8,r4
  802094:	2448b03a 	or	r4,r4,r17
  802098:	2008c03a 	cmpne	r4,r4,zero
  80209c:	3922b03a 	or	r17,r7,r4
  8020a0:	0009883a 	mov	r4,zero
  8020a4:	003f8d06 	br	801edc <__alt_data_end+0xff801edc>
  8020a8:	0007883a 	mov	r3,zero
  8020ac:	003fdd06 	br	802024 <__alt_data_end+0xff802024>
  8020b0:	0009883a 	mov	r4,zero
  8020b4:	003ff706 	br	802094 <__alt_data_end+0xff802094>

008020b8 <__divdf3>:
  8020b8:	defff004 	addi	sp,sp,-64
  8020bc:	dc800815 	stw	r18,32(sp)
  8020c0:	2824d53a 	srli	r18,r5,20
  8020c4:	dd800c15 	stw	r22,48(sp)
  8020c8:	282cd7fa 	srli	r22,r5,31
  8020cc:	dc000615 	stw	r16,24(sp)
  8020d0:	04000434 	movhi	r16,16
  8020d4:	843fffc4 	addi	r16,r16,-1
  8020d8:	dfc00f15 	stw	ra,60(sp)
  8020dc:	df000e15 	stw	fp,56(sp)
  8020e0:	ddc00d15 	stw	r23,52(sp)
  8020e4:	dd400b15 	stw	r21,44(sp)
  8020e8:	dd000a15 	stw	r20,40(sp)
  8020ec:	dcc00915 	stw	r19,36(sp)
  8020f0:	dc400715 	stw	r17,28(sp)
  8020f4:	9481ffcc 	andi	r18,r18,2047
  8020f8:	2c20703a 	and	r16,r5,r16
  8020fc:	b2003fcc 	andi	r8,r22,255
  802100:	90006126 	beq	r18,zero,802288 <__divdf3+0x1d0>
  802104:	0081ffc4 	movi	r2,2047
  802108:	202b883a 	mov	r21,r4
  80210c:	90803726 	beq	r18,r2,8021ec <__divdf3+0x134>
  802110:	80800434 	orhi	r2,r16,16
  802114:	100490fa 	slli	r2,r2,3
  802118:	2020d77a 	srli	r16,r4,29
  80211c:	202a90fa 	slli	r21,r4,3
  802120:	94bf0044 	addi	r18,r18,-1023
  802124:	80a0b03a 	or	r16,r16,r2
  802128:	0013883a 	mov	r9,zero
  80212c:	000b883a 	mov	r5,zero
  802130:	3806d53a 	srli	r3,r7,20
  802134:	382ed7fa 	srli	r23,r7,31
  802138:	04400434 	movhi	r17,16
  80213c:	8c7fffc4 	addi	r17,r17,-1
  802140:	18c1ffcc 	andi	r3,r3,2047
  802144:	3029883a 	mov	r20,r6
  802148:	3c62703a 	and	r17,r7,r17
  80214c:	bf003fcc 	andi	fp,r23,255
  802150:	18006e26 	beq	r3,zero,80230c <__divdf3+0x254>
  802154:	0081ffc4 	movi	r2,2047
  802158:	18806626 	beq	r3,r2,8022f4 <__divdf3+0x23c>
  80215c:	88800434 	orhi	r2,r17,16
  802160:	100490fa 	slli	r2,r2,3
  802164:	3022d77a 	srli	r17,r6,29
  802168:	302890fa 	slli	r20,r6,3
  80216c:	18ff0044 	addi	r3,r3,-1023
  802170:	88a2b03a 	or	r17,r17,r2
  802174:	000f883a 	mov	r7,zero
  802178:	b5e6f03a 	xor	r19,r22,r23
  80217c:	3a4cb03a 	or	r6,r7,r9
  802180:	008003c4 	movi	r2,15
  802184:	9809883a 	mov	r4,r19
  802188:	90c7c83a 	sub	r3,r18,r3
  80218c:	9cc03fcc 	andi	r19,r19,255
  802190:	11809636 	bltu	r2,r6,8023ec <__divdf3+0x334>
  802194:	300c90ba 	slli	r6,r6,2
  802198:	00802034 	movhi	r2,128
  80219c:	10886b04 	addi	r2,r2,8620
  8021a0:	308d883a 	add	r6,r6,r2
  8021a4:	30800017 	ldw	r2,0(r6)
  8021a8:	1000683a 	jmp	r2
  8021ac:	008023ec 	andhi	r2,zero,143
  8021b0:	00802224 	muli	r2,zero,136
  8021b4:	008023dc 	xori	r2,zero,143
  8021b8:	00802218 	cmpnei	r2,zero,136
  8021bc:	008023dc 	xori	r2,zero,143
  8021c0:	008023b0 	cmpltui	r2,zero,142
  8021c4:	008023dc 	xori	r2,zero,143
  8021c8:	00802218 	cmpnei	r2,zero,136
  8021cc:	00802224 	muli	r2,zero,136
  8021d0:	00802224 	muli	r2,zero,136
  8021d4:	008023b0 	cmpltui	r2,zero,142
  8021d8:	00802218 	cmpnei	r2,zero,136
  8021dc:	00802208 	cmpgei	r2,zero,136
  8021e0:	00802208 	cmpgei	r2,zero,136
  8021e4:	00802208 	cmpgei	r2,zero,136
  8021e8:	00802774 	movhi	r2,157
  8021ec:	2404b03a 	or	r2,r4,r16
  8021f0:	10006c1e 	bne	r2,zero,8023a4 <__divdf3+0x2ec>
  8021f4:	02400204 	movi	r9,8
  8021f8:	0021883a 	mov	r16,zero
  8021fc:	002b883a 	mov	r21,zero
  802200:	01400084 	movi	r5,2
  802204:	003fca06 	br	802130 <__alt_data_end+0xff802130>
  802208:	8023883a 	mov	r17,r16
  80220c:	a829883a 	mov	r20,r21
  802210:	4039883a 	mov	fp,r8
  802214:	280f883a 	mov	r7,r5
  802218:	00800084 	movi	r2,2
  80221c:	3881601e 	bne	r7,r2,8027a0 <__divdf3+0x6e8>
  802220:	e027883a 	mov	r19,fp
  802224:	9900004c 	andi	r4,r19,1
  802228:	0081ffc4 	movi	r2,2047
  80222c:	0021883a 	mov	r16,zero
  802230:	002b883a 	mov	r21,zero
  802234:	1004953a 	slli	r2,r2,20
  802238:	20c03fcc 	andi	r3,r4,255
  80223c:	01400434 	movhi	r5,16
  802240:	297fffc4 	addi	r5,r5,-1
  802244:	180697fa 	slli	r3,r3,31
  802248:	8160703a 	and	r16,r16,r5
  80224c:	80a0b03a 	or	r16,r16,r2
  802250:	80c6b03a 	or	r3,r16,r3
  802254:	a805883a 	mov	r2,r21
  802258:	dfc00f17 	ldw	ra,60(sp)
  80225c:	df000e17 	ldw	fp,56(sp)
  802260:	ddc00d17 	ldw	r23,52(sp)
  802264:	dd800c17 	ldw	r22,48(sp)
  802268:	dd400b17 	ldw	r21,44(sp)
  80226c:	dd000a17 	ldw	r20,40(sp)
  802270:	dcc00917 	ldw	r19,36(sp)
  802274:	dc800817 	ldw	r18,32(sp)
  802278:	dc400717 	ldw	r17,28(sp)
  80227c:	dc000617 	ldw	r16,24(sp)
  802280:	dec01004 	addi	sp,sp,64
  802284:	f800283a 	ret
  802288:	2404b03a 	or	r2,r4,r16
  80228c:	2023883a 	mov	r17,r4
  802290:	10003f26 	beq	r2,zero,802390 <__divdf3+0x2d8>
  802294:	80015e26 	beq	r16,zero,802810 <__divdf3+0x758>
  802298:	8009883a 	mov	r4,r16
  80229c:	d9800215 	stw	r6,8(sp)
  8022a0:	d9c00515 	stw	r7,20(sp)
  8022a4:	da000415 	stw	r8,16(sp)
  8022a8:	08033740 	call	803374 <__clzsi2>
  8022ac:	d9800217 	ldw	r6,8(sp)
  8022b0:	d9c00517 	ldw	r7,20(sp)
  8022b4:	da000417 	ldw	r8,16(sp)
  8022b8:	113ffd44 	addi	r4,r2,-11
  8022bc:	00c00704 	movi	r3,28
  8022c0:	19014f16 	blt	r3,r4,802800 <__divdf3+0x748>
  8022c4:	00c00744 	movi	r3,29
  8022c8:	157ffe04 	addi	r21,r2,-8
  8022cc:	1907c83a 	sub	r3,r3,r4
  8022d0:	8560983a 	sll	r16,r16,r21
  8022d4:	88c6d83a 	srl	r3,r17,r3
  8022d8:	8d6a983a 	sll	r21,r17,r21
  8022dc:	1c20b03a 	or	r16,r3,r16
  8022e0:	1080fcc4 	addi	r2,r2,1011
  8022e4:	00a5c83a 	sub	r18,zero,r2
  8022e8:	0013883a 	mov	r9,zero
  8022ec:	000b883a 	mov	r5,zero
  8022f0:	003f8f06 	br	802130 <__alt_data_end+0xff802130>
  8022f4:	3444b03a 	or	r2,r6,r17
  8022f8:	1000231e 	bne	r2,zero,802388 <__divdf3+0x2d0>
  8022fc:	0023883a 	mov	r17,zero
  802300:	0029883a 	mov	r20,zero
  802304:	01c00084 	movi	r7,2
  802308:	003f9b06 	br	802178 <__alt_data_end+0xff802178>
  80230c:	3444b03a 	or	r2,r6,r17
  802310:	10001926 	beq	r2,zero,802378 <__divdf3+0x2c0>
  802314:	88014b26 	beq	r17,zero,802844 <__divdf3+0x78c>
  802318:	8809883a 	mov	r4,r17
  80231c:	d9400115 	stw	r5,4(sp)
  802320:	d9800215 	stw	r6,8(sp)
  802324:	da000415 	stw	r8,16(sp)
  802328:	da400315 	stw	r9,12(sp)
  80232c:	08033740 	call	803374 <__clzsi2>
  802330:	d9400117 	ldw	r5,4(sp)
  802334:	d9800217 	ldw	r6,8(sp)
  802338:	da000417 	ldw	r8,16(sp)
  80233c:	da400317 	ldw	r9,12(sp)
  802340:	113ffd44 	addi	r4,r2,-11
  802344:	00c00704 	movi	r3,28
  802348:	19013a16 	blt	r3,r4,802834 <__divdf3+0x77c>
  80234c:	00c00744 	movi	r3,29
  802350:	153ffe04 	addi	r20,r2,-8
  802354:	1907c83a 	sub	r3,r3,r4
  802358:	8d22983a 	sll	r17,r17,r20
  80235c:	30c6d83a 	srl	r3,r6,r3
  802360:	3528983a 	sll	r20,r6,r20
  802364:	1c62b03a 	or	r17,r3,r17
  802368:	1080fcc4 	addi	r2,r2,1011
  80236c:	0087c83a 	sub	r3,zero,r2
  802370:	000f883a 	mov	r7,zero
  802374:	003f8006 	br	802178 <__alt_data_end+0xff802178>
  802378:	0023883a 	mov	r17,zero
  80237c:	0029883a 	mov	r20,zero
  802380:	01c00044 	movi	r7,1
  802384:	003f7c06 	br	802178 <__alt_data_end+0xff802178>
  802388:	01c000c4 	movi	r7,3
  80238c:	003f7a06 	br	802178 <__alt_data_end+0xff802178>
  802390:	02400104 	movi	r9,4
  802394:	0021883a 	mov	r16,zero
  802398:	002b883a 	mov	r21,zero
  80239c:	01400044 	movi	r5,1
  8023a0:	003f6306 	br	802130 <__alt_data_end+0xff802130>
  8023a4:	02400304 	movi	r9,12
  8023a8:	014000c4 	movi	r5,3
  8023ac:	003f6006 	br	802130 <__alt_data_end+0xff802130>
  8023b0:	04000434 	movhi	r16,16
  8023b4:	0009883a 	mov	r4,zero
  8023b8:	843fffc4 	addi	r16,r16,-1
  8023bc:	057fffc4 	movi	r21,-1
  8023c0:	0081ffc4 	movi	r2,2047
  8023c4:	003f9b06 	br	802234 <__alt_data_end+0xff802234>
  8023c8:	00c00044 	movi	r3,1
  8023cc:	1887c83a 	sub	r3,r3,r2
  8023d0:	01000e04 	movi	r4,56
  8023d4:	20c1530e 	bge	r4,r3,802924 <__divdf3+0x86c>
  8023d8:	9900004c 	andi	r4,r19,1
  8023dc:	0005883a 	mov	r2,zero
  8023e0:	0021883a 	mov	r16,zero
  8023e4:	002b883a 	mov	r21,zero
  8023e8:	003f9206 	br	802234 <__alt_data_end+0xff802234>
  8023ec:	8c012e36 	bltu	r17,r16,8028a8 <__divdf3+0x7f0>
  8023f0:	84412c26 	beq	r16,r17,8028a4 <__divdf3+0x7ec>
  8023f4:	a82f883a 	mov	r23,r21
  8023f8:	18ffffc4 	addi	r3,r3,-1
  8023fc:	002b883a 	mov	r21,zero
  802400:	a004d63a 	srli	r2,r20,24
  802404:	8822923a 	slli	r17,r17,8
  802408:	a028923a 	slli	r20,r20,8
  80240c:	8009883a 	mov	r4,r16
  802410:	88acb03a 	or	r22,r17,r2
  802414:	dd000015 	stw	r20,0(sp)
  802418:	b028d43a 	srli	r20,r22,16
  80241c:	d8c00215 	stw	r3,8(sp)
  802420:	b4bfffcc 	andi	r18,r22,65535
  802424:	a00b883a 	mov	r5,r20
  802428:	08017280 	call	801728 <__udivsi3>
  80242c:	100b883a 	mov	r5,r2
  802430:	9009883a 	mov	r4,r18
  802434:	1023883a 	mov	r17,r2
  802438:	08017e40 	call	8017e4 <__mulsi3>
  80243c:	8009883a 	mov	r4,r16
  802440:	a00b883a 	mov	r5,r20
  802444:	1039883a 	mov	fp,r2
  802448:	080178c0 	call	80178c <__umodsi3>
  80244c:	1004943a 	slli	r2,r2,16
  802450:	b808d43a 	srli	r4,r23,16
  802454:	d8c00217 	ldw	r3,8(sp)
  802458:	2084b03a 	or	r2,r4,r2
  80245c:	1700062e 	bgeu	r2,fp,802478 <__divdf3+0x3c0>
  802460:	1585883a 	add	r2,r2,r22
  802464:	893fffc4 	addi	r4,r17,-1
  802468:	15811d36 	bltu	r2,r22,8028e0 <__divdf3+0x828>
  80246c:	17011c2e 	bgeu	r2,fp,8028e0 <__divdf3+0x828>
  802470:	8c7fff84 	addi	r17,r17,-2
  802474:	1585883a 	add	r2,r2,r22
  802478:	1739c83a 	sub	fp,r2,fp
  80247c:	a00b883a 	mov	r5,r20
  802480:	e009883a 	mov	r4,fp
  802484:	d8c00215 	stw	r3,8(sp)
  802488:	08017280 	call	801728 <__udivsi3>
  80248c:	100b883a 	mov	r5,r2
  802490:	9009883a 	mov	r4,r18
  802494:	1021883a 	mov	r16,r2
  802498:	08017e40 	call	8017e4 <__mulsi3>
  80249c:	a00b883a 	mov	r5,r20
  8024a0:	e009883a 	mov	r4,fp
  8024a4:	d8800415 	stw	r2,16(sp)
  8024a8:	080178c0 	call	80178c <__umodsi3>
  8024ac:	1004943a 	slli	r2,r2,16
  8024b0:	da000417 	ldw	r8,16(sp)
  8024b4:	bdffffcc 	andi	r23,r23,65535
  8024b8:	b884b03a 	or	r2,r23,r2
  8024bc:	d8c00217 	ldw	r3,8(sp)
  8024c0:	1200062e 	bgeu	r2,r8,8024dc <__divdf3+0x424>
  8024c4:	1585883a 	add	r2,r2,r22
  8024c8:	813fffc4 	addi	r4,r16,-1
  8024cc:	15810236 	bltu	r2,r22,8028d8 <__divdf3+0x820>
  8024d0:	1201012e 	bgeu	r2,r8,8028d8 <__divdf3+0x820>
  8024d4:	843fff84 	addi	r16,r16,-2
  8024d8:	1585883a 	add	r2,r2,r22
  8024dc:	8822943a 	slli	r17,r17,16
  8024e0:	d9800017 	ldw	r6,0(sp)
  8024e4:	1211c83a 	sub	r8,r2,r8
  8024e8:	8c22b03a 	or	r17,r17,r16
  8024ec:	373fffcc 	andi	fp,r6,65535
  8024f0:	8abfffcc 	andi	r10,r17,65535
  8024f4:	8820d43a 	srli	r16,r17,16
  8024f8:	5009883a 	mov	r4,r10
  8024fc:	e00b883a 	mov	r5,fp
  802500:	302ed43a 	srli	r23,r6,16
  802504:	d8c00215 	stw	r3,8(sp)
  802508:	da000415 	stw	r8,16(sp)
  80250c:	da800115 	stw	r10,4(sp)
  802510:	08017e40 	call	8017e4 <__mulsi3>
  802514:	800b883a 	mov	r5,r16
  802518:	e009883a 	mov	r4,fp
  80251c:	d8800515 	stw	r2,20(sp)
  802520:	08017e40 	call	8017e4 <__mulsi3>
  802524:	8009883a 	mov	r4,r16
  802528:	b80b883a 	mov	r5,r23
  80252c:	d8800315 	stw	r2,12(sp)
  802530:	08017e40 	call	8017e4 <__mulsi3>
  802534:	da800117 	ldw	r10,4(sp)
  802538:	b80b883a 	mov	r5,r23
  80253c:	1021883a 	mov	r16,r2
  802540:	5009883a 	mov	r4,r10
  802544:	08017e40 	call	8017e4 <__mulsi3>
  802548:	d9c00517 	ldw	r7,20(sp)
  80254c:	da400317 	ldw	r9,12(sp)
  802550:	d8c00217 	ldw	r3,8(sp)
  802554:	3808d43a 	srli	r4,r7,16
  802558:	1245883a 	add	r2,r2,r9
  80255c:	da000417 	ldw	r8,16(sp)
  802560:	2085883a 	add	r2,r4,r2
  802564:	1240022e 	bgeu	r2,r9,802570 <__divdf3+0x4b8>
  802568:	01000074 	movhi	r4,1
  80256c:	8121883a 	add	r16,r16,r4
  802570:	1008d43a 	srli	r4,r2,16
  802574:	1004943a 	slli	r2,r2,16
  802578:	39ffffcc 	andi	r7,r7,65535
  80257c:	2409883a 	add	r4,r4,r16
  802580:	11c5883a 	add	r2,r2,r7
  802584:	4100bb36 	bltu	r8,r4,802874 <__divdf3+0x7bc>
  802588:	4100d726 	beq	r8,r4,8028e8 <__divdf3+0x830>
  80258c:	4109c83a 	sub	r4,r8,r4
  802590:	a8a1c83a 	sub	r16,r21,r2
  802594:	ac2b803a 	cmpltu	r21,r21,r16
  802598:	256bc83a 	sub	r21,r4,r21
  80259c:	b540d926 	beq	r22,r21,802904 <__divdf3+0x84c>
  8025a0:	a00b883a 	mov	r5,r20
  8025a4:	a809883a 	mov	r4,r21
  8025a8:	d8c00215 	stw	r3,8(sp)
  8025ac:	08017280 	call	801728 <__udivsi3>
  8025b0:	100b883a 	mov	r5,r2
  8025b4:	9009883a 	mov	r4,r18
  8025b8:	d8800515 	stw	r2,20(sp)
  8025bc:	08017e40 	call	8017e4 <__mulsi3>
  8025c0:	a809883a 	mov	r4,r21
  8025c4:	a00b883a 	mov	r5,r20
  8025c8:	d8800415 	stw	r2,16(sp)
  8025cc:	080178c0 	call	80178c <__umodsi3>
  8025d0:	1004943a 	slli	r2,r2,16
  8025d4:	8008d43a 	srli	r4,r16,16
  8025d8:	da000417 	ldw	r8,16(sp)
  8025dc:	d8c00217 	ldw	r3,8(sp)
  8025e0:	2084b03a 	or	r2,r4,r2
  8025e4:	d9c00517 	ldw	r7,20(sp)
  8025e8:	1200062e 	bgeu	r2,r8,802604 <__divdf3+0x54c>
  8025ec:	1585883a 	add	r2,r2,r22
  8025f0:	393fffc4 	addi	r4,r7,-1
  8025f4:	1580c536 	bltu	r2,r22,80290c <__divdf3+0x854>
  8025f8:	1200c42e 	bgeu	r2,r8,80290c <__divdf3+0x854>
  8025fc:	39ffff84 	addi	r7,r7,-2
  802600:	1585883a 	add	r2,r2,r22
  802604:	122bc83a 	sub	r21,r2,r8
  802608:	a00b883a 	mov	r5,r20
  80260c:	a809883a 	mov	r4,r21
  802610:	d8c00215 	stw	r3,8(sp)
  802614:	d9c00515 	stw	r7,20(sp)
  802618:	08017280 	call	801728 <__udivsi3>
  80261c:	9009883a 	mov	r4,r18
  802620:	100b883a 	mov	r5,r2
  802624:	d8800415 	stw	r2,16(sp)
  802628:	08017e40 	call	8017e4 <__mulsi3>
  80262c:	a809883a 	mov	r4,r21
  802630:	a00b883a 	mov	r5,r20
  802634:	1025883a 	mov	r18,r2
  802638:	080178c0 	call	80178c <__umodsi3>
  80263c:	1004943a 	slli	r2,r2,16
  802640:	813fffcc 	andi	r4,r16,65535
  802644:	d8c00217 	ldw	r3,8(sp)
  802648:	20a0b03a 	or	r16,r4,r2
  80264c:	d9c00517 	ldw	r7,20(sp)
  802650:	da000417 	ldw	r8,16(sp)
  802654:	8480062e 	bgeu	r16,r18,802670 <__divdf3+0x5b8>
  802658:	85a1883a 	add	r16,r16,r22
  80265c:	40bfffc4 	addi	r2,r8,-1
  802660:	8580ac36 	bltu	r16,r22,802914 <__divdf3+0x85c>
  802664:	8480ab2e 	bgeu	r16,r18,802914 <__divdf3+0x85c>
  802668:	423fff84 	addi	r8,r8,-2
  80266c:	85a1883a 	add	r16,r16,r22
  802670:	3804943a 	slli	r2,r7,16
  802674:	84a1c83a 	sub	r16,r16,r18
  802678:	e009883a 	mov	r4,fp
  80267c:	1228b03a 	or	r20,r2,r8
  802680:	a1ffffcc 	andi	r7,r20,65535
  802684:	a024d43a 	srli	r18,r20,16
  802688:	380b883a 	mov	r5,r7
  80268c:	d8c00215 	stw	r3,8(sp)
  802690:	d9c00515 	stw	r7,20(sp)
  802694:	08017e40 	call	8017e4 <__mulsi3>
  802698:	900b883a 	mov	r5,r18
  80269c:	e009883a 	mov	r4,fp
  8026a0:	102b883a 	mov	r21,r2
  8026a4:	08017e40 	call	8017e4 <__mulsi3>
  8026a8:	900b883a 	mov	r5,r18
  8026ac:	b809883a 	mov	r4,r23
  8026b0:	1039883a 	mov	fp,r2
  8026b4:	08017e40 	call	8017e4 <__mulsi3>
  8026b8:	d9c00517 	ldw	r7,20(sp)
  8026bc:	b80b883a 	mov	r5,r23
  8026c0:	1025883a 	mov	r18,r2
  8026c4:	3809883a 	mov	r4,r7
  8026c8:	08017e40 	call	8017e4 <__mulsi3>
  8026cc:	a808d43a 	srli	r4,r21,16
  8026d0:	1705883a 	add	r2,r2,fp
  8026d4:	d8c00217 	ldw	r3,8(sp)
  8026d8:	2085883a 	add	r2,r4,r2
  8026dc:	1700022e 	bgeu	r2,fp,8026e8 <__divdf3+0x630>
  8026e0:	01000074 	movhi	r4,1
  8026e4:	9125883a 	add	r18,r18,r4
  8026e8:	1008d43a 	srli	r4,r2,16
  8026ec:	1004943a 	slli	r2,r2,16
  8026f0:	ad7fffcc 	andi	r21,r21,65535
  8026f4:	2489883a 	add	r4,r4,r18
  8026f8:	1545883a 	add	r2,r2,r21
  8026fc:	81003836 	bltu	r16,r4,8027e0 <__divdf3+0x728>
  802700:	81003626 	beq	r16,r4,8027dc <__divdf3+0x724>
  802704:	a5000054 	ori	r20,r20,1
  802708:	1880ffc4 	addi	r2,r3,1023
  80270c:	00bf2e0e 	bge	zero,r2,8023c8 <__alt_data_end+0xff8023c8>
  802710:	a10001cc 	andi	r4,r20,7
  802714:	20000726 	beq	r4,zero,802734 <__divdf3+0x67c>
  802718:	a10003cc 	andi	r4,r20,15
  80271c:	01400104 	movi	r5,4
  802720:	21400426 	beq	r4,r5,802734 <__divdf3+0x67c>
  802724:	a149883a 	add	r4,r20,r5
  802728:	2529803a 	cmpltu	r20,r4,r20
  80272c:	8d23883a 	add	r17,r17,r20
  802730:	2029883a 	mov	r20,r4
  802734:	8900402c 	andhi	r4,r17,256
  802738:	20000426 	beq	r4,zero,80274c <__divdf3+0x694>
  80273c:	18810004 	addi	r2,r3,1024
  802740:	00ffc034 	movhi	r3,65280
  802744:	18ffffc4 	addi	r3,r3,-1
  802748:	88e2703a 	and	r17,r17,r3
  80274c:	00c1ff84 	movi	r3,2046
  802750:	18beb416 	blt	r3,r2,802224 <__alt_data_end+0xff802224>
  802754:	a028d0fa 	srli	r20,r20,3
  802758:	882a977a 	slli	r21,r17,29
  80275c:	8820927a 	slli	r16,r17,9
  802760:	1081ffcc 	andi	r2,r2,2047
  802764:	ad2ab03a 	or	r21,r21,r20
  802768:	8020d33a 	srli	r16,r16,12
  80276c:	9900004c 	andi	r4,r19,1
  802770:	003eb006 	br	802234 <__alt_data_end+0xff802234>
  802774:	8080022c 	andhi	r2,r16,8
  802778:	10001226 	beq	r2,zero,8027c4 <__divdf3+0x70c>
  80277c:	8880022c 	andhi	r2,r17,8
  802780:	1000101e 	bne	r2,zero,8027c4 <__divdf3+0x70c>
  802784:	00800434 	movhi	r2,16
  802788:	8c000234 	orhi	r16,r17,8
  80278c:	10bfffc4 	addi	r2,r2,-1
  802790:	b809883a 	mov	r4,r23
  802794:	80a0703a 	and	r16,r16,r2
  802798:	a02b883a 	mov	r21,r20
  80279c:	003f0806 	br	8023c0 <__alt_data_end+0xff8023c0>
  8027a0:	008000c4 	movi	r2,3
  8027a4:	3880b126 	beq	r7,r2,802a6c <__divdf3+0x9b4>
  8027a8:	00800044 	movi	r2,1
  8027ac:	38805b1e 	bne	r7,r2,80291c <__divdf3+0x864>
  8027b0:	e009883a 	mov	r4,fp
  8027b4:	0005883a 	mov	r2,zero
  8027b8:	0021883a 	mov	r16,zero
  8027bc:	002b883a 	mov	r21,zero
  8027c0:	003e9c06 	br	802234 <__alt_data_end+0xff802234>
  8027c4:	00800434 	movhi	r2,16
  8027c8:	84000234 	orhi	r16,r16,8
  8027cc:	10bfffc4 	addi	r2,r2,-1
  8027d0:	b009883a 	mov	r4,r22
  8027d4:	80a0703a 	and	r16,r16,r2
  8027d8:	003ef906 	br	8023c0 <__alt_data_end+0xff8023c0>
  8027dc:	103fca26 	beq	r2,zero,802708 <__alt_data_end+0xff802708>
  8027e0:	b421883a 	add	r16,r22,r16
  8027e4:	a17fffc4 	addi	r5,r20,-1
  8027e8:	8580422e 	bgeu	r16,r22,8028f4 <__divdf3+0x83c>
  8027ec:	2829883a 	mov	r20,r5
  8027f0:	813fc41e 	bne	r16,r4,802704 <__alt_data_end+0xff802704>
  8027f4:	d9800017 	ldw	r6,0(sp)
  8027f8:	30bfc21e 	bne	r6,r2,802704 <__alt_data_end+0xff802704>
  8027fc:	003fc206 	br	802708 <__alt_data_end+0xff802708>
  802800:	143ff604 	addi	r16,r2,-40
  802804:	8c20983a 	sll	r16,r17,r16
  802808:	002b883a 	mov	r21,zero
  80280c:	003eb406 	br	8022e0 <__alt_data_end+0xff8022e0>
  802810:	d9800215 	stw	r6,8(sp)
  802814:	d9c00515 	stw	r7,20(sp)
  802818:	da000415 	stw	r8,16(sp)
  80281c:	08033740 	call	803374 <__clzsi2>
  802820:	10800804 	addi	r2,r2,32
  802824:	da000417 	ldw	r8,16(sp)
  802828:	d9c00517 	ldw	r7,20(sp)
  80282c:	d9800217 	ldw	r6,8(sp)
  802830:	003ea106 	br	8022b8 <__alt_data_end+0xff8022b8>
  802834:	147ff604 	addi	r17,r2,-40
  802838:	3462983a 	sll	r17,r6,r17
  80283c:	0029883a 	mov	r20,zero
  802840:	003ec906 	br	802368 <__alt_data_end+0xff802368>
  802844:	3009883a 	mov	r4,r6
  802848:	d9400115 	stw	r5,4(sp)
  80284c:	d9800215 	stw	r6,8(sp)
  802850:	da000415 	stw	r8,16(sp)
  802854:	da400315 	stw	r9,12(sp)
  802858:	08033740 	call	803374 <__clzsi2>
  80285c:	10800804 	addi	r2,r2,32
  802860:	da400317 	ldw	r9,12(sp)
  802864:	da000417 	ldw	r8,16(sp)
  802868:	d9800217 	ldw	r6,8(sp)
  80286c:	d9400117 	ldw	r5,4(sp)
  802870:	003eb306 	br	802340 <__alt_data_end+0xff802340>
  802874:	d9800017 	ldw	r6,0(sp)
  802878:	a9ab883a 	add	r21,r21,r6
  80287c:	a98b803a 	cmpltu	r5,r21,r6
  802880:	2d8b883a 	add	r5,r5,r22
  802884:	2a11883a 	add	r8,r5,r8
  802888:	897fffc4 	addi	r5,r17,-1
  80288c:	b2000c2e 	bgeu	r22,r8,8028c0 <__divdf3+0x808>
  802890:	41003f36 	bltu	r8,r4,802990 <__divdf3+0x8d8>
  802894:	22006c26 	beq	r4,r8,802a48 <__divdf3+0x990>
  802898:	4109c83a 	sub	r4,r8,r4
  80289c:	2823883a 	mov	r17,r5
  8028a0:	003f3b06 	br	802590 <__alt_data_end+0xff802590>
  8028a4:	ad3ed336 	bltu	r21,r20,8023f4 <__alt_data_end+0xff8023f4>
  8028a8:	a804d07a 	srli	r2,r21,1
  8028ac:	802e97fa 	slli	r23,r16,31
  8028b0:	a82a97fa 	slli	r21,r21,31
  8028b4:	8020d07a 	srli	r16,r16,1
  8028b8:	b8aeb03a 	or	r23,r23,r2
  8028bc:	003ed006 	br	802400 <__alt_data_end+0xff802400>
  8028c0:	b23ff51e 	bne	r22,r8,802898 <__alt_data_end+0xff802898>
  8028c4:	d9800017 	ldw	r6,0(sp)
  8028c8:	a9bff12e 	bgeu	r21,r6,802890 <__alt_data_end+0xff802890>
  8028cc:	b109c83a 	sub	r4,r22,r4
  8028d0:	2823883a 	mov	r17,r5
  8028d4:	003f2e06 	br	802590 <__alt_data_end+0xff802590>
  8028d8:	2021883a 	mov	r16,r4
  8028dc:	003eff06 	br	8024dc <__alt_data_end+0xff8024dc>
  8028e0:	2023883a 	mov	r17,r4
  8028e4:	003ee406 	br	802478 <__alt_data_end+0xff802478>
  8028e8:	a8bfe236 	bltu	r21,r2,802874 <__alt_data_end+0xff802874>
  8028ec:	0009883a 	mov	r4,zero
  8028f0:	003f2706 	br	802590 <__alt_data_end+0xff802590>
  8028f4:	81002d36 	bltu	r16,r4,8029ac <__divdf3+0x8f4>
  8028f8:	24005626 	beq	r4,r16,802a54 <__divdf3+0x99c>
  8028fc:	2829883a 	mov	r20,r5
  802900:	003f8006 	br	802704 <__alt_data_end+0xff802704>
  802904:	053fffc4 	movi	r20,-1
  802908:	003f7f06 	br	802708 <__alt_data_end+0xff802708>
  80290c:	200f883a 	mov	r7,r4
  802910:	003f3c06 	br	802604 <__alt_data_end+0xff802604>
  802914:	1011883a 	mov	r8,r2
  802918:	003f5506 	br	802670 <__alt_data_end+0xff802670>
  80291c:	e027883a 	mov	r19,fp
  802920:	003f7906 	br	802708 <__alt_data_end+0xff802708>
  802924:	010007c4 	movi	r4,31
  802928:	20c02816 	blt	r4,r3,8029cc <__divdf3+0x914>
  80292c:	00800804 	movi	r2,32
  802930:	10c5c83a 	sub	r2,r2,r3
  802934:	888a983a 	sll	r5,r17,r2
  802938:	a0c8d83a 	srl	r4,r20,r3
  80293c:	a084983a 	sll	r2,r20,r2
  802940:	88e2d83a 	srl	r17,r17,r3
  802944:	2906b03a 	or	r3,r5,r4
  802948:	1004c03a 	cmpne	r2,r2,zero
  80294c:	1886b03a 	or	r3,r3,r2
  802950:	188001cc 	andi	r2,r3,7
  802954:	10000726 	beq	r2,zero,802974 <__divdf3+0x8bc>
  802958:	188003cc 	andi	r2,r3,15
  80295c:	01000104 	movi	r4,4
  802960:	11000426 	beq	r2,r4,802974 <__divdf3+0x8bc>
  802964:	1805883a 	mov	r2,r3
  802968:	10c00104 	addi	r3,r2,4
  80296c:	1885803a 	cmpltu	r2,r3,r2
  802970:	88a3883a 	add	r17,r17,r2
  802974:	8880202c 	andhi	r2,r17,128
  802978:	10002926 	beq	r2,zero,802a20 <__divdf3+0x968>
  80297c:	9900004c 	andi	r4,r19,1
  802980:	00800044 	movi	r2,1
  802984:	0021883a 	mov	r16,zero
  802988:	002b883a 	mov	r21,zero
  80298c:	003e2906 	br	802234 <__alt_data_end+0xff802234>
  802990:	d9800017 	ldw	r6,0(sp)
  802994:	8c7fff84 	addi	r17,r17,-2
  802998:	a9ab883a 	add	r21,r21,r6
  80299c:	a98b803a 	cmpltu	r5,r21,r6
  8029a0:	2d8b883a 	add	r5,r5,r22
  8029a4:	2a11883a 	add	r8,r5,r8
  8029a8:	003ef806 	br	80258c <__alt_data_end+0xff80258c>
  8029ac:	d9800017 	ldw	r6,0(sp)
  8029b0:	318f883a 	add	r7,r6,r6
  8029b4:	398b803a 	cmpltu	r5,r7,r6
  8029b8:	2d8d883a 	add	r6,r5,r22
  8029bc:	81a1883a 	add	r16,r16,r6
  8029c0:	a17fff84 	addi	r5,r20,-2
  8029c4:	d9c00015 	stw	r7,0(sp)
  8029c8:	003f8806 	br	8027ec <__alt_data_end+0xff8027ec>
  8029cc:	013ff844 	movi	r4,-31
  8029d0:	2085c83a 	sub	r2,r4,r2
  8029d4:	8888d83a 	srl	r4,r17,r2
  8029d8:	00800804 	movi	r2,32
  8029dc:	18802126 	beq	r3,r2,802a64 <__divdf3+0x9ac>
  8029e0:	04001004 	movi	r16,64
  8029e4:	80c7c83a 	sub	r3,r16,r3
  8029e8:	88e0983a 	sll	r16,r17,r3
  8029ec:	8504b03a 	or	r2,r16,r20
  8029f0:	1004c03a 	cmpne	r2,r2,zero
  8029f4:	2084b03a 	or	r2,r4,r2
  8029f8:	144001cc 	andi	r17,r2,7
  8029fc:	88000d1e 	bne	r17,zero,802a34 <__divdf3+0x97c>
  802a00:	0021883a 	mov	r16,zero
  802a04:	102ad0fa 	srli	r21,r2,3
  802a08:	9900004c 	andi	r4,r19,1
  802a0c:	0005883a 	mov	r2,zero
  802a10:	ac6ab03a 	or	r21,r21,r17
  802a14:	003e0706 	br	802234 <__alt_data_end+0xff802234>
  802a18:	1007883a 	mov	r3,r2
  802a1c:	0023883a 	mov	r17,zero
  802a20:	8820927a 	slli	r16,r17,9
  802a24:	1805883a 	mov	r2,r3
  802a28:	8822977a 	slli	r17,r17,29
  802a2c:	8020d33a 	srli	r16,r16,12
  802a30:	003ff406 	br	802a04 <__alt_data_end+0xff802a04>
  802a34:	10c003cc 	andi	r3,r2,15
  802a38:	01000104 	movi	r4,4
  802a3c:	193ff626 	beq	r3,r4,802a18 <__alt_data_end+0xff802a18>
  802a40:	0023883a 	mov	r17,zero
  802a44:	003fc806 	br	802968 <__alt_data_end+0xff802968>
  802a48:	a8bfd136 	bltu	r21,r2,802990 <__alt_data_end+0xff802990>
  802a4c:	2823883a 	mov	r17,r5
  802a50:	003fa606 	br	8028ec <__alt_data_end+0xff8028ec>
  802a54:	d9800017 	ldw	r6,0(sp)
  802a58:	30bfd436 	bltu	r6,r2,8029ac <__alt_data_end+0xff8029ac>
  802a5c:	2829883a 	mov	r20,r5
  802a60:	003f6406 	br	8027f4 <__alt_data_end+0xff8027f4>
  802a64:	0021883a 	mov	r16,zero
  802a68:	003fe006 	br	8029ec <__alt_data_end+0xff8029ec>
  802a6c:	00800434 	movhi	r2,16
  802a70:	8c000234 	orhi	r16,r17,8
  802a74:	10bfffc4 	addi	r2,r2,-1
  802a78:	e009883a 	mov	r4,fp
  802a7c:	80a0703a 	and	r16,r16,r2
  802a80:	a02b883a 	mov	r21,r20
  802a84:	003e4e06 	br	8023c0 <__alt_data_end+0xff8023c0>

00802a88 <__muldf3>:
  802a88:	deffee04 	addi	sp,sp,-72
  802a8c:	dd000c15 	stw	r20,48(sp)
  802a90:	2828d53a 	srli	r20,r5,20
  802a94:	ddc00f15 	stw	r23,60(sp)
  802a98:	282ed7fa 	srli	r23,r5,31
  802a9c:	dc000815 	stw	r16,32(sp)
  802aa0:	04000434 	movhi	r16,16
  802aa4:	dcc00b15 	stw	r19,44(sp)
  802aa8:	843fffc4 	addi	r16,r16,-1
  802aac:	dfc01115 	stw	ra,68(sp)
  802ab0:	df001015 	stw	fp,64(sp)
  802ab4:	dd800e15 	stw	r22,56(sp)
  802ab8:	dd400d15 	stw	r21,52(sp)
  802abc:	dc800a15 	stw	r18,40(sp)
  802ac0:	dc400915 	stw	r17,36(sp)
  802ac4:	a501ffcc 	andi	r20,r20,2047
  802ac8:	2c20703a 	and	r16,r5,r16
  802acc:	b827883a 	mov	r19,r23
  802ad0:	ba403fcc 	andi	r9,r23,255
  802ad4:	a0006026 	beq	r20,zero,802c58 <__muldf3+0x1d0>
  802ad8:	0081ffc4 	movi	r2,2047
  802adc:	202d883a 	mov	r22,r4
  802ae0:	a0803626 	beq	r20,r2,802bbc <__muldf3+0x134>
  802ae4:	84000434 	orhi	r16,r16,16
  802ae8:	200ad77a 	srli	r5,r4,29
  802aec:	800490fa 	slli	r2,r16,3
  802af0:	202c90fa 	slli	r22,r4,3
  802af4:	a53f0044 	addi	r20,r20,-1023
  802af8:	28a0b03a 	or	r16,r5,r2
  802afc:	002b883a 	mov	r21,zero
  802b00:	000b883a 	mov	r5,zero
  802b04:	3804d53a 	srli	r2,r7,20
  802b08:	3838d7fa 	srli	fp,r7,31
  802b0c:	04400434 	movhi	r17,16
  802b10:	8c7fffc4 	addi	r17,r17,-1
  802b14:	1081ffcc 	andi	r2,r2,2047
  802b18:	3025883a 	mov	r18,r6
  802b1c:	3c62703a 	and	r17,r7,r17
  802b20:	e2803fcc 	andi	r10,fp,255
  802b24:	10006d26 	beq	r2,zero,802cdc <__muldf3+0x254>
  802b28:	00c1ffc4 	movi	r3,2047
  802b2c:	10c06526 	beq	r2,r3,802cc4 <__muldf3+0x23c>
  802b30:	8c400434 	orhi	r17,r17,16
  802b34:	300ed77a 	srli	r7,r6,29
  802b38:	880690fa 	slli	r3,r17,3
  802b3c:	302490fa 	slli	r18,r6,3
  802b40:	10bf0044 	addi	r2,r2,-1023
  802b44:	38e2b03a 	or	r17,r7,r3
  802b48:	000f883a 	mov	r7,zero
  802b4c:	a087883a 	add	r3,r20,r2
  802b50:	010003c4 	movi	r4,15
  802b54:	3d44b03a 	or	r2,r7,r21
  802b58:	e5ccf03a 	xor	r6,fp,r23
  802b5c:	1a000044 	addi	r8,r3,1
  802b60:	20809b36 	bltu	r4,r2,802dd0 <__muldf3+0x348>
  802b64:	100490ba 	slli	r2,r2,2
  802b68:	01002034 	movhi	r4,128
  802b6c:	210adf04 	addi	r4,r4,11132
  802b70:	1105883a 	add	r2,r2,r4
  802b74:	10800017 	ldw	r2,0(r2)
  802b78:	1000683a 	jmp	r2
  802b7c:	00802dd0 	cmplti	r2,zero,183
  802b80:	00802bdc 	xori	r2,zero,175
  802b84:	00802bdc 	xori	r2,zero,175
  802b88:	00802bd8 	cmpnei	r2,zero,175
  802b8c:	00802dac 	andhi	r2,zero,182
  802b90:	00802dac 	andhi	r2,zero,182
  802b94:	00802d94 	movui	r2,182
  802b98:	00802bd8 	cmpnei	r2,zero,175
  802b9c:	00802dac 	andhi	r2,zero,182
  802ba0:	00802d94 	movui	r2,182
  802ba4:	00802dac 	andhi	r2,zero,182
  802ba8:	00802bd8 	cmpnei	r2,zero,175
  802bac:	00802dbc 	xorhi	r2,zero,182
  802bb0:	00802dbc 	xorhi	r2,zero,182
  802bb4:	00802dbc 	xorhi	r2,zero,182
  802bb8:	0080311c 	xori	r2,zero,196
  802bbc:	2404b03a 	or	r2,r4,r16
  802bc0:	1000711e 	bne	r2,zero,802d88 <__muldf3+0x300>
  802bc4:	05400204 	movi	r21,8
  802bc8:	0021883a 	mov	r16,zero
  802bcc:	002d883a 	mov	r22,zero
  802bd0:	01400084 	movi	r5,2
  802bd4:	003fcb06 	br	802b04 <__alt_data_end+0xff802b04>
  802bd8:	500d883a 	mov	r6,r10
  802bdc:	00800084 	movi	r2,2
  802be0:	38805926 	beq	r7,r2,802d48 <__muldf3+0x2c0>
  802be4:	008000c4 	movi	r2,3
  802be8:	3881bb26 	beq	r7,r2,8032d8 <__muldf3+0x850>
  802bec:	00800044 	movi	r2,1
  802bf0:	3881961e 	bne	r7,r2,80324c <__muldf3+0x7c4>
  802bf4:	3027883a 	mov	r19,r6
  802bf8:	0005883a 	mov	r2,zero
  802bfc:	0021883a 	mov	r16,zero
  802c00:	002d883a 	mov	r22,zero
  802c04:	1004953a 	slli	r2,r2,20
  802c08:	98c03fcc 	andi	r3,r19,255
  802c0c:	04400434 	movhi	r17,16
  802c10:	8c7fffc4 	addi	r17,r17,-1
  802c14:	180697fa 	slli	r3,r3,31
  802c18:	8460703a 	and	r16,r16,r17
  802c1c:	80a0b03a 	or	r16,r16,r2
  802c20:	80c6b03a 	or	r3,r16,r3
  802c24:	b005883a 	mov	r2,r22
  802c28:	dfc01117 	ldw	ra,68(sp)
  802c2c:	df001017 	ldw	fp,64(sp)
  802c30:	ddc00f17 	ldw	r23,60(sp)
  802c34:	dd800e17 	ldw	r22,56(sp)
  802c38:	dd400d17 	ldw	r21,52(sp)
  802c3c:	dd000c17 	ldw	r20,48(sp)
  802c40:	dcc00b17 	ldw	r19,44(sp)
  802c44:	dc800a17 	ldw	r18,40(sp)
  802c48:	dc400917 	ldw	r17,36(sp)
  802c4c:	dc000817 	ldw	r16,32(sp)
  802c50:	dec01204 	addi	sp,sp,72
  802c54:	f800283a 	ret
  802c58:	2404b03a 	or	r2,r4,r16
  802c5c:	202b883a 	mov	r21,r4
  802c60:	10004426 	beq	r2,zero,802d74 <__muldf3+0x2ec>
  802c64:	80015126 	beq	r16,zero,8031ac <__muldf3+0x724>
  802c68:	8009883a 	mov	r4,r16
  802c6c:	d9800715 	stw	r6,28(sp)
  802c70:	d9c00215 	stw	r7,8(sp)
  802c74:	da400415 	stw	r9,16(sp)
  802c78:	08033740 	call	803374 <__clzsi2>
  802c7c:	d9800717 	ldw	r6,28(sp)
  802c80:	d9c00217 	ldw	r7,8(sp)
  802c84:	da400417 	ldw	r9,16(sp)
  802c88:	113ffd44 	addi	r4,r2,-11
  802c8c:	00c00704 	movi	r3,28
  802c90:	19014216 	blt	r3,r4,80319c <__muldf3+0x714>
  802c94:	00c00744 	movi	r3,29
  802c98:	15bffe04 	addi	r22,r2,-8
  802c9c:	1907c83a 	sub	r3,r3,r4
  802ca0:	85a0983a 	sll	r16,r16,r22
  802ca4:	a8c6d83a 	srl	r3,r21,r3
  802ca8:	adac983a 	sll	r22,r21,r22
  802cac:	1c20b03a 	or	r16,r3,r16
  802cb0:	1080fcc4 	addi	r2,r2,1011
  802cb4:	00a9c83a 	sub	r20,zero,r2
  802cb8:	002b883a 	mov	r21,zero
  802cbc:	000b883a 	mov	r5,zero
  802cc0:	003f9006 	br	802b04 <__alt_data_end+0xff802b04>
  802cc4:	3446b03a 	or	r3,r6,r17
  802cc8:	1800281e 	bne	r3,zero,802d6c <__muldf3+0x2e4>
  802ccc:	0023883a 	mov	r17,zero
  802cd0:	0025883a 	mov	r18,zero
  802cd4:	01c00084 	movi	r7,2
  802cd8:	003f9c06 	br	802b4c <__alt_data_end+0xff802b4c>
  802cdc:	3446b03a 	or	r3,r6,r17
  802ce0:	18001e26 	beq	r3,zero,802d5c <__muldf3+0x2d4>
  802ce4:	88012126 	beq	r17,zero,80316c <__muldf3+0x6e4>
  802ce8:	8809883a 	mov	r4,r17
  802cec:	d9400215 	stw	r5,8(sp)
  802cf0:	d9800715 	stw	r6,28(sp)
  802cf4:	da400415 	stw	r9,16(sp)
  802cf8:	da800315 	stw	r10,12(sp)
  802cfc:	08033740 	call	803374 <__clzsi2>
  802d00:	d9400217 	ldw	r5,8(sp)
  802d04:	d9800717 	ldw	r6,28(sp)
  802d08:	da400417 	ldw	r9,16(sp)
  802d0c:	da800317 	ldw	r10,12(sp)
  802d10:	113ffd44 	addi	r4,r2,-11
  802d14:	00c00704 	movi	r3,28
  802d18:	19011016 	blt	r3,r4,80315c <__muldf3+0x6d4>
  802d1c:	00c00744 	movi	r3,29
  802d20:	14bffe04 	addi	r18,r2,-8
  802d24:	1907c83a 	sub	r3,r3,r4
  802d28:	8ca2983a 	sll	r17,r17,r18
  802d2c:	30c6d83a 	srl	r3,r6,r3
  802d30:	34a4983a 	sll	r18,r6,r18
  802d34:	1c62b03a 	or	r17,r3,r17
  802d38:	1080fcc4 	addi	r2,r2,1011
  802d3c:	0085c83a 	sub	r2,zero,r2
  802d40:	000f883a 	mov	r7,zero
  802d44:	003f8106 	br	802b4c <__alt_data_end+0xff802b4c>
  802d48:	3027883a 	mov	r19,r6
  802d4c:	0081ffc4 	movi	r2,2047
  802d50:	0021883a 	mov	r16,zero
  802d54:	002d883a 	mov	r22,zero
  802d58:	003faa06 	br	802c04 <__alt_data_end+0xff802c04>
  802d5c:	0023883a 	mov	r17,zero
  802d60:	0025883a 	mov	r18,zero
  802d64:	01c00044 	movi	r7,1
  802d68:	003f7806 	br	802b4c <__alt_data_end+0xff802b4c>
  802d6c:	01c000c4 	movi	r7,3
  802d70:	003f7606 	br	802b4c <__alt_data_end+0xff802b4c>
  802d74:	05400104 	movi	r21,4
  802d78:	0021883a 	mov	r16,zero
  802d7c:	002d883a 	mov	r22,zero
  802d80:	01400044 	movi	r5,1
  802d84:	003f5f06 	br	802b04 <__alt_data_end+0xff802b04>
  802d88:	05400304 	movi	r21,12
  802d8c:	014000c4 	movi	r5,3
  802d90:	003f5c06 	br	802b04 <__alt_data_end+0xff802b04>
  802d94:	04000434 	movhi	r16,16
  802d98:	0027883a 	mov	r19,zero
  802d9c:	843fffc4 	addi	r16,r16,-1
  802da0:	05bfffc4 	movi	r22,-1
  802da4:	0081ffc4 	movi	r2,2047
  802da8:	003f9606 	br	802c04 <__alt_data_end+0xff802c04>
  802dac:	8023883a 	mov	r17,r16
  802db0:	b025883a 	mov	r18,r22
  802db4:	280f883a 	mov	r7,r5
  802db8:	003f8806 	br	802bdc <__alt_data_end+0xff802bdc>
  802dbc:	8023883a 	mov	r17,r16
  802dc0:	b025883a 	mov	r18,r22
  802dc4:	480d883a 	mov	r6,r9
  802dc8:	280f883a 	mov	r7,r5
  802dcc:	003f8306 	br	802bdc <__alt_data_end+0xff802bdc>
  802dd0:	b026d43a 	srli	r19,r22,16
  802dd4:	902ed43a 	srli	r23,r18,16
  802dd8:	b5bfffcc 	andi	r22,r22,65535
  802ddc:	94bfffcc 	andi	r18,r18,65535
  802de0:	b00b883a 	mov	r5,r22
  802de4:	9009883a 	mov	r4,r18
  802de8:	d8c00515 	stw	r3,20(sp)
  802dec:	d9800715 	stw	r6,28(sp)
  802df0:	da000615 	stw	r8,24(sp)
  802df4:	08017e40 	call	8017e4 <__mulsi3>
  802df8:	980b883a 	mov	r5,r19
  802dfc:	9009883a 	mov	r4,r18
  802e00:	1029883a 	mov	r20,r2
  802e04:	08017e40 	call	8017e4 <__mulsi3>
  802e08:	b80b883a 	mov	r5,r23
  802e0c:	9809883a 	mov	r4,r19
  802e10:	102b883a 	mov	r21,r2
  802e14:	08017e40 	call	8017e4 <__mulsi3>
  802e18:	b809883a 	mov	r4,r23
  802e1c:	b00b883a 	mov	r5,r22
  802e20:	1039883a 	mov	fp,r2
  802e24:	08017e40 	call	8017e4 <__mulsi3>
  802e28:	a008d43a 	srli	r4,r20,16
  802e2c:	1545883a 	add	r2,r2,r21
  802e30:	d8c00517 	ldw	r3,20(sp)
  802e34:	2085883a 	add	r2,r4,r2
  802e38:	d9800717 	ldw	r6,28(sp)
  802e3c:	da000617 	ldw	r8,24(sp)
  802e40:	1540022e 	bgeu	r2,r21,802e4c <__muldf3+0x3c4>
  802e44:	01000074 	movhi	r4,1
  802e48:	e139883a 	add	fp,fp,r4
  802e4c:	100e943a 	slli	r7,r2,16
  802e50:	1004d43a 	srli	r2,r2,16
  802e54:	882ad43a 	srli	r21,r17,16
  802e58:	a53fffcc 	andi	r20,r20,65535
  802e5c:	8c7fffcc 	andi	r17,r17,65535
  802e60:	3d29883a 	add	r20,r7,r20
  802e64:	b00b883a 	mov	r5,r22
  802e68:	8809883a 	mov	r4,r17
  802e6c:	d8c00515 	stw	r3,20(sp)
  802e70:	d9800715 	stw	r6,28(sp)
  802e74:	da000615 	stw	r8,24(sp)
  802e78:	dd000115 	stw	r20,4(sp)
  802e7c:	d8800015 	stw	r2,0(sp)
  802e80:	08017e40 	call	8017e4 <__mulsi3>
  802e84:	980b883a 	mov	r5,r19
  802e88:	8809883a 	mov	r4,r17
  802e8c:	d8800215 	stw	r2,8(sp)
  802e90:	08017e40 	call	8017e4 <__mulsi3>
  802e94:	9809883a 	mov	r4,r19
  802e98:	a80b883a 	mov	r5,r21
  802e9c:	1029883a 	mov	r20,r2
  802ea0:	08017e40 	call	8017e4 <__mulsi3>
  802ea4:	b00b883a 	mov	r5,r22
  802ea8:	a809883a 	mov	r4,r21
  802eac:	d8800415 	stw	r2,16(sp)
  802eb0:	08017e40 	call	8017e4 <__mulsi3>
  802eb4:	d9c00217 	ldw	r7,8(sp)
  802eb8:	1505883a 	add	r2,r2,r20
  802ebc:	d8c00517 	ldw	r3,20(sp)
  802ec0:	3826d43a 	srli	r19,r7,16
  802ec4:	d9800717 	ldw	r6,28(sp)
  802ec8:	da000617 	ldw	r8,24(sp)
  802ecc:	9885883a 	add	r2,r19,r2
  802ed0:	da400417 	ldw	r9,16(sp)
  802ed4:	1500022e 	bgeu	r2,r20,802ee0 <__muldf3+0x458>
  802ed8:	01000074 	movhi	r4,1
  802edc:	4913883a 	add	r9,r9,r4
  802ee0:	1028d43a 	srli	r20,r2,16
  802ee4:	1004943a 	slli	r2,r2,16
  802ee8:	802cd43a 	srli	r22,r16,16
  802eec:	843fffcc 	andi	r16,r16,65535
  802ef0:	3cffffcc 	andi	r19,r7,65535
  802ef4:	9009883a 	mov	r4,r18
  802ef8:	800b883a 	mov	r5,r16
  802efc:	a269883a 	add	r20,r20,r9
  802f00:	d8c00515 	stw	r3,20(sp)
  802f04:	d9800715 	stw	r6,28(sp)
  802f08:	da000615 	stw	r8,24(sp)
  802f0c:	14e7883a 	add	r19,r2,r19
  802f10:	08017e40 	call	8017e4 <__mulsi3>
  802f14:	9009883a 	mov	r4,r18
  802f18:	b00b883a 	mov	r5,r22
  802f1c:	d8800315 	stw	r2,12(sp)
  802f20:	08017e40 	call	8017e4 <__mulsi3>
  802f24:	b809883a 	mov	r4,r23
  802f28:	b00b883a 	mov	r5,r22
  802f2c:	d8800215 	stw	r2,8(sp)
  802f30:	08017e40 	call	8017e4 <__mulsi3>
  802f34:	b80b883a 	mov	r5,r23
  802f38:	8009883a 	mov	r4,r16
  802f3c:	d8800415 	stw	r2,16(sp)
  802f40:	08017e40 	call	8017e4 <__mulsi3>
  802f44:	da800317 	ldw	r10,12(sp)
  802f48:	d9c00217 	ldw	r7,8(sp)
  802f4c:	d9000017 	ldw	r4,0(sp)
  802f50:	502ed43a 	srli	r23,r10,16
  802f54:	11c5883a 	add	r2,r2,r7
  802f58:	24e5883a 	add	r18,r4,r19
  802f5c:	b885883a 	add	r2,r23,r2
  802f60:	d8c00517 	ldw	r3,20(sp)
  802f64:	d9800717 	ldw	r6,28(sp)
  802f68:	da000617 	ldw	r8,24(sp)
  802f6c:	da400417 	ldw	r9,16(sp)
  802f70:	11c0022e 	bgeu	r2,r7,802f7c <__muldf3+0x4f4>
  802f74:	01000074 	movhi	r4,1
  802f78:	4913883a 	add	r9,r9,r4
  802f7c:	100ed43a 	srli	r7,r2,16
  802f80:	1004943a 	slli	r2,r2,16
  802f84:	55ffffcc 	andi	r23,r10,65535
  802f88:	3a53883a 	add	r9,r7,r9
  802f8c:	8809883a 	mov	r4,r17
  802f90:	800b883a 	mov	r5,r16
  802f94:	d8c00515 	stw	r3,20(sp)
  802f98:	d9800715 	stw	r6,28(sp)
  802f9c:	da000615 	stw	r8,24(sp)
  802fa0:	da400415 	stw	r9,16(sp)
  802fa4:	15ef883a 	add	r23,r2,r23
  802fa8:	08017e40 	call	8017e4 <__mulsi3>
  802fac:	8809883a 	mov	r4,r17
  802fb0:	b00b883a 	mov	r5,r22
  802fb4:	d8800215 	stw	r2,8(sp)
  802fb8:	08017e40 	call	8017e4 <__mulsi3>
  802fbc:	b00b883a 	mov	r5,r22
  802fc0:	a809883a 	mov	r4,r21
  802fc4:	d8800315 	stw	r2,12(sp)
  802fc8:	08017e40 	call	8017e4 <__mulsi3>
  802fcc:	8009883a 	mov	r4,r16
  802fd0:	a80b883a 	mov	r5,r21
  802fd4:	1023883a 	mov	r17,r2
  802fd8:	08017e40 	call	8017e4 <__mulsi3>
  802fdc:	d9c00217 	ldw	r7,8(sp)
  802fe0:	da800317 	ldw	r10,12(sp)
  802fe4:	d8c00517 	ldw	r3,20(sp)
  802fe8:	3808d43a 	srli	r4,r7,16
  802fec:	1285883a 	add	r2,r2,r10
  802ff0:	d9800717 	ldw	r6,28(sp)
  802ff4:	2085883a 	add	r2,r4,r2
  802ff8:	da000617 	ldw	r8,24(sp)
  802ffc:	da400417 	ldw	r9,16(sp)
  803000:	1280022e 	bgeu	r2,r10,80300c <__muldf3+0x584>
  803004:	01000074 	movhi	r4,1
  803008:	8923883a 	add	r17,r17,r4
  80300c:	1008943a 	slli	r4,r2,16
  803010:	39ffffcc 	andi	r7,r7,65535
  803014:	e4b9883a 	add	fp,fp,r18
  803018:	21cf883a 	add	r7,r4,r7
  80301c:	e4e7803a 	cmpltu	r19,fp,r19
  803020:	3d0f883a 	add	r7,r7,r20
  803024:	bf39883a 	add	fp,r23,fp
  803028:	99c9883a 	add	r4,r19,r7
  80302c:	e5ef803a 	cmpltu	r23,fp,r23
  803030:	490b883a 	add	r5,r9,r4
  803034:	1004d43a 	srli	r2,r2,16
  803038:	b965883a 	add	r18,r23,r5
  80303c:	24c9803a 	cmpltu	r4,r4,r19
  803040:	3d29803a 	cmpltu	r20,r7,r20
  803044:	a128b03a 	or	r20,r20,r4
  803048:	95ef803a 	cmpltu	r23,r18,r23
  80304c:	2a53803a 	cmpltu	r9,r5,r9
  803050:	a0a9883a 	add	r20,r20,r2
  803054:	4deeb03a 	or	r23,r9,r23
  803058:	a5ef883a 	add	r23,r20,r23
  80305c:	bc63883a 	add	r17,r23,r17
  803060:	e004927a 	slli	r2,fp,9
  803064:	d9000117 	ldw	r4,4(sp)
  803068:	882e927a 	slli	r23,r17,9
  80306c:	9022d5fa 	srli	r17,r18,23
  803070:	e038d5fa 	srli	fp,fp,23
  803074:	1104b03a 	or	r2,r2,r4
  803078:	9024927a 	slli	r18,r18,9
  80307c:	1004c03a 	cmpne	r2,r2,zero
  803080:	bc62b03a 	or	r17,r23,r17
  803084:	1738b03a 	or	fp,r2,fp
  803088:	8880402c 	andhi	r2,r17,256
  80308c:	e4a4b03a 	or	r18,fp,r18
  803090:	10000726 	beq	r2,zero,8030b0 <__muldf3+0x628>
  803094:	9006d07a 	srli	r3,r18,1
  803098:	880497fa 	slli	r2,r17,31
  80309c:	9480004c 	andi	r18,r18,1
  8030a0:	8822d07a 	srli	r17,r17,1
  8030a4:	1ca4b03a 	or	r18,r3,r18
  8030a8:	14a4b03a 	or	r18,r2,r18
  8030ac:	4007883a 	mov	r3,r8
  8030b0:	1880ffc4 	addi	r2,r3,1023
  8030b4:	0080460e 	bge	zero,r2,8031d0 <__muldf3+0x748>
  8030b8:	910001cc 	andi	r4,r18,7
  8030bc:	20000726 	beq	r4,zero,8030dc <__muldf3+0x654>
  8030c0:	910003cc 	andi	r4,r18,15
  8030c4:	01400104 	movi	r5,4
  8030c8:	21400426 	beq	r4,r5,8030dc <__muldf3+0x654>
  8030cc:	9149883a 	add	r4,r18,r5
  8030d0:	24a5803a 	cmpltu	r18,r4,r18
  8030d4:	8ca3883a 	add	r17,r17,r18
  8030d8:	2025883a 	mov	r18,r4
  8030dc:	8900402c 	andhi	r4,r17,256
  8030e0:	20000426 	beq	r4,zero,8030f4 <__muldf3+0x66c>
  8030e4:	18810004 	addi	r2,r3,1024
  8030e8:	00ffc034 	movhi	r3,65280
  8030ec:	18ffffc4 	addi	r3,r3,-1
  8030f0:	88e2703a 	and	r17,r17,r3
  8030f4:	00c1ff84 	movi	r3,2046
  8030f8:	18bf1316 	blt	r3,r2,802d48 <__alt_data_end+0xff802d48>
  8030fc:	882c977a 	slli	r22,r17,29
  803100:	9024d0fa 	srli	r18,r18,3
  803104:	8822927a 	slli	r17,r17,9
  803108:	1081ffcc 	andi	r2,r2,2047
  80310c:	b4acb03a 	or	r22,r22,r18
  803110:	8820d33a 	srli	r16,r17,12
  803114:	3027883a 	mov	r19,r6
  803118:	003eba06 	br	802c04 <__alt_data_end+0xff802c04>
  80311c:	8080022c 	andhi	r2,r16,8
  803120:	10000926 	beq	r2,zero,803148 <__muldf3+0x6c0>
  803124:	8880022c 	andhi	r2,r17,8
  803128:	1000071e 	bne	r2,zero,803148 <__muldf3+0x6c0>
  80312c:	00800434 	movhi	r2,16
  803130:	8c000234 	orhi	r16,r17,8
  803134:	10bfffc4 	addi	r2,r2,-1
  803138:	e027883a 	mov	r19,fp
  80313c:	80a0703a 	and	r16,r16,r2
  803140:	902d883a 	mov	r22,r18
  803144:	003f1706 	br	802da4 <__alt_data_end+0xff802da4>
  803148:	00800434 	movhi	r2,16
  80314c:	84000234 	orhi	r16,r16,8
  803150:	10bfffc4 	addi	r2,r2,-1
  803154:	80a0703a 	and	r16,r16,r2
  803158:	003f1206 	br	802da4 <__alt_data_end+0xff802da4>
  80315c:	147ff604 	addi	r17,r2,-40
  803160:	3462983a 	sll	r17,r6,r17
  803164:	0025883a 	mov	r18,zero
  803168:	003ef306 	br	802d38 <__alt_data_end+0xff802d38>
  80316c:	3009883a 	mov	r4,r6
  803170:	d9400215 	stw	r5,8(sp)
  803174:	d9800715 	stw	r6,28(sp)
  803178:	da400415 	stw	r9,16(sp)
  80317c:	da800315 	stw	r10,12(sp)
  803180:	08033740 	call	803374 <__clzsi2>
  803184:	10800804 	addi	r2,r2,32
  803188:	da800317 	ldw	r10,12(sp)
  80318c:	da400417 	ldw	r9,16(sp)
  803190:	d9800717 	ldw	r6,28(sp)
  803194:	d9400217 	ldw	r5,8(sp)
  803198:	003edd06 	br	802d10 <__alt_data_end+0xff802d10>
  80319c:	143ff604 	addi	r16,r2,-40
  8031a0:	ac20983a 	sll	r16,r21,r16
  8031a4:	002d883a 	mov	r22,zero
  8031a8:	003ec106 	br	802cb0 <__alt_data_end+0xff802cb0>
  8031ac:	d9800715 	stw	r6,28(sp)
  8031b0:	d9c00215 	stw	r7,8(sp)
  8031b4:	da400415 	stw	r9,16(sp)
  8031b8:	08033740 	call	803374 <__clzsi2>
  8031bc:	10800804 	addi	r2,r2,32
  8031c0:	da400417 	ldw	r9,16(sp)
  8031c4:	d9c00217 	ldw	r7,8(sp)
  8031c8:	d9800717 	ldw	r6,28(sp)
  8031cc:	003eae06 	br	802c88 <__alt_data_end+0xff802c88>
  8031d0:	00c00044 	movi	r3,1
  8031d4:	1887c83a 	sub	r3,r3,r2
  8031d8:	01000e04 	movi	r4,56
  8031dc:	20fe8516 	blt	r4,r3,802bf4 <__alt_data_end+0xff802bf4>
  8031e0:	010007c4 	movi	r4,31
  8031e4:	20c01b16 	blt	r4,r3,803254 <__muldf3+0x7cc>
  8031e8:	00800804 	movi	r2,32
  8031ec:	10c5c83a 	sub	r2,r2,r3
  8031f0:	888a983a 	sll	r5,r17,r2
  8031f4:	90c8d83a 	srl	r4,r18,r3
  8031f8:	9084983a 	sll	r2,r18,r2
  8031fc:	88e2d83a 	srl	r17,r17,r3
  803200:	2906b03a 	or	r3,r5,r4
  803204:	1004c03a 	cmpne	r2,r2,zero
  803208:	1886b03a 	or	r3,r3,r2
  80320c:	188001cc 	andi	r2,r3,7
  803210:	10000726 	beq	r2,zero,803230 <__muldf3+0x7a8>
  803214:	188003cc 	andi	r2,r3,15
  803218:	01000104 	movi	r4,4
  80321c:	11000426 	beq	r2,r4,803230 <__muldf3+0x7a8>
  803220:	1805883a 	mov	r2,r3
  803224:	10c00104 	addi	r3,r2,4
  803228:	1885803a 	cmpltu	r2,r3,r2
  80322c:	88a3883a 	add	r17,r17,r2
  803230:	8880202c 	andhi	r2,r17,128
  803234:	10001c26 	beq	r2,zero,8032a8 <__muldf3+0x820>
  803238:	3027883a 	mov	r19,r6
  80323c:	00800044 	movi	r2,1
  803240:	0021883a 	mov	r16,zero
  803244:	002d883a 	mov	r22,zero
  803248:	003e6e06 	br	802c04 <__alt_data_end+0xff802c04>
  80324c:	4007883a 	mov	r3,r8
  803250:	003f9706 	br	8030b0 <__alt_data_end+0xff8030b0>
  803254:	017ff844 	movi	r5,-31
  803258:	2885c83a 	sub	r2,r5,r2
  80325c:	888ad83a 	srl	r5,r17,r2
  803260:	00800804 	movi	r2,32
  803264:	18801a26 	beq	r3,r2,8032d0 <__muldf3+0x848>
  803268:	01001004 	movi	r4,64
  80326c:	20c7c83a 	sub	r3,r4,r3
  803270:	88e2983a 	sll	r17,r17,r3
  803274:	8ca4b03a 	or	r18,r17,r18
  803278:	9004c03a 	cmpne	r2,r18,zero
  80327c:	2884b03a 	or	r2,r5,r2
  803280:	144001cc 	andi	r17,r2,7
  803284:	88000d1e 	bne	r17,zero,8032bc <__muldf3+0x834>
  803288:	0021883a 	mov	r16,zero
  80328c:	102cd0fa 	srli	r22,r2,3
  803290:	3027883a 	mov	r19,r6
  803294:	0005883a 	mov	r2,zero
  803298:	b46cb03a 	or	r22,r22,r17
  80329c:	003e5906 	br	802c04 <__alt_data_end+0xff802c04>
  8032a0:	1007883a 	mov	r3,r2
  8032a4:	0023883a 	mov	r17,zero
  8032a8:	8820927a 	slli	r16,r17,9
  8032ac:	1805883a 	mov	r2,r3
  8032b0:	8822977a 	slli	r17,r17,29
  8032b4:	8020d33a 	srli	r16,r16,12
  8032b8:	003ff406 	br	80328c <__alt_data_end+0xff80328c>
  8032bc:	10c003cc 	andi	r3,r2,15
  8032c0:	01000104 	movi	r4,4
  8032c4:	193ff626 	beq	r3,r4,8032a0 <__alt_data_end+0xff8032a0>
  8032c8:	0023883a 	mov	r17,zero
  8032cc:	003fd506 	br	803224 <__alt_data_end+0xff803224>
  8032d0:	0023883a 	mov	r17,zero
  8032d4:	003fe706 	br	803274 <__alt_data_end+0xff803274>
  8032d8:	00800434 	movhi	r2,16
  8032dc:	8c000234 	orhi	r16,r17,8
  8032e0:	10bfffc4 	addi	r2,r2,-1
  8032e4:	3027883a 	mov	r19,r6
  8032e8:	80a0703a 	and	r16,r16,r2
  8032ec:	902d883a 	mov	r22,r18
  8032f0:	003eac06 	br	802da4 <__alt_data_end+0xff802da4>

008032f4 <__fixdfsi>:
  8032f4:	280cd53a 	srli	r6,r5,20
  8032f8:	00c00434 	movhi	r3,16
  8032fc:	18ffffc4 	addi	r3,r3,-1
  803300:	3181ffcc 	andi	r6,r6,2047
  803304:	01c0ff84 	movi	r7,1022
  803308:	28c6703a 	and	r3,r5,r3
  80330c:	280ad7fa 	srli	r5,r5,31
  803310:	3980120e 	bge	r7,r6,80335c <__fixdfsi+0x68>
  803314:	00810744 	movi	r2,1053
  803318:	11800c16 	blt	r2,r6,80334c <__fixdfsi+0x58>
  80331c:	00810cc4 	movi	r2,1075
  803320:	1185c83a 	sub	r2,r2,r6
  803324:	01c007c4 	movi	r7,31
  803328:	18c00434 	orhi	r3,r3,16
  80332c:	38800d16 	blt	r7,r2,803364 <__fixdfsi+0x70>
  803330:	31befb44 	addi	r6,r6,-1043
  803334:	2084d83a 	srl	r2,r4,r2
  803338:	1986983a 	sll	r3,r3,r6
  80333c:	1884b03a 	or	r2,r3,r2
  803340:	28000726 	beq	r5,zero,803360 <__fixdfsi+0x6c>
  803344:	0085c83a 	sub	r2,zero,r2
  803348:	f800283a 	ret
  80334c:	00a00034 	movhi	r2,32768
  803350:	10bfffc4 	addi	r2,r2,-1
  803354:	2885883a 	add	r2,r5,r2
  803358:	f800283a 	ret
  80335c:	0005883a 	mov	r2,zero
  803360:	f800283a 	ret
  803364:	008104c4 	movi	r2,1043
  803368:	1185c83a 	sub	r2,r2,r6
  80336c:	1884d83a 	srl	r2,r3,r2
  803370:	003ff306 	br	803340 <__alt_data_end+0xff803340>

00803374 <__clzsi2>:
  803374:	00bfffd4 	movui	r2,65535
  803378:	11000536 	bltu	r2,r4,803390 <__clzsi2+0x1c>
  80337c:	00803fc4 	movi	r2,255
  803380:	11000f36 	bltu	r2,r4,8033c0 <__clzsi2+0x4c>
  803384:	00800804 	movi	r2,32
  803388:	0007883a 	mov	r3,zero
  80338c:	00000506 	br	8033a4 <__clzsi2+0x30>
  803390:	00804034 	movhi	r2,256
  803394:	10bfffc4 	addi	r2,r2,-1
  803398:	11000c2e 	bgeu	r2,r4,8033cc <__clzsi2+0x58>
  80339c:	00800204 	movi	r2,8
  8033a0:	00c00604 	movi	r3,24
  8033a4:	20c8d83a 	srl	r4,r4,r3
  8033a8:	00c02034 	movhi	r3,128
  8033ac:	18d515c4 	addi	r3,r3,21591
  8033b0:	1909883a 	add	r4,r3,r4
  8033b4:	20c00003 	ldbu	r3,0(r4)
  8033b8:	10c5c83a 	sub	r2,r2,r3
  8033bc:	f800283a 	ret
  8033c0:	00800604 	movi	r2,24
  8033c4:	00c00204 	movi	r3,8
  8033c8:	003ff606 	br	8033a4 <__alt_data_end+0xff8033a4>
  8033cc:	00800404 	movi	r2,16
  8033d0:	1007883a 	mov	r3,r2
  8033d4:	003ff306 	br	8033a4 <__alt_data_end+0xff8033a4>

008033d8 <malloc>:
  8033d8:	00802034 	movhi	r2,128
  8033dc:	1096b804 	addi	r2,r2,23264
  8033e0:	200b883a 	mov	r5,r4
  8033e4:	11000017 	ldw	r4,0(r2)
  8033e8:	08035041 	jmpi	803504 <_malloc_r>

008033ec <free>:
  8033ec:	00802034 	movhi	r2,128
  8033f0:	1096b804 	addi	r2,r2,23264
  8033f4:	200b883a 	mov	r5,r4
  8033f8:	11000017 	ldw	r4,0(r2)
  8033fc:	08034201 	jmpi	803420 <_free_r>

00803400 <memset>:
  803400:	2005883a 	mov	r2,r4
  803404:	2007883a 	mov	r3,r4
  803408:	218d883a 	add	r6,r4,r6
  80340c:	19800326 	beq	r3,r6,80341c <memset+0x1c>
  803410:	19400005 	stb	r5,0(r3)
  803414:	18c00044 	addi	r3,r3,1
  803418:	003ffc06 	br	80340c <__alt_data_end+0xff80340c>
  80341c:	f800283a 	ret

00803420 <_free_r>:
  803420:	28003726 	beq	r5,zero,803500 <_free_r+0xe0>
  803424:	28ffff17 	ldw	r3,-4(r5)
  803428:	28bfff04 	addi	r2,r5,-4
  80342c:	1800010e 	bge	r3,zero,803434 <_free_r+0x14>
  803430:	10c5883a 	add	r2,r2,r3
  803434:	01402034 	movhi	r5,128
  803438:	29579e04 	addi	r5,r5,24184
  80343c:	28c00017 	ldw	r3,0(r5)
  803440:	280d883a 	mov	r6,r5
  803444:	1800031e 	bne	r3,zero,803454 <_free_r+0x34>
  803448:	10000115 	stw	zero,4(r2)
  80344c:	28800015 	stw	r2,0(r5)
  803450:	f800283a 	ret
  803454:	10c00c2e 	bgeu	r2,r3,803488 <_free_r+0x68>
  803458:	11000017 	ldw	r4,0(r2)
  80345c:	110b883a 	add	r5,r2,r4
  803460:	1940041e 	bne	r3,r5,803474 <_free_r+0x54>
  803464:	19400017 	ldw	r5,0(r3)
  803468:	18c00117 	ldw	r3,4(r3)
  80346c:	2909883a 	add	r4,r5,r4
  803470:	11000015 	stw	r4,0(r2)
  803474:	10c00115 	stw	r3,4(r2)
  803478:	30800015 	stw	r2,0(r6)
  80347c:	f800283a 	ret
  803480:	11400336 	bltu	r2,r5,803490 <_free_r+0x70>
  803484:	2807883a 	mov	r3,r5
  803488:	19400117 	ldw	r5,4(r3)
  80348c:	283ffc1e 	bne	r5,zero,803480 <__alt_data_end+0xff803480>
  803490:	19c00017 	ldw	r7,0(r3)
  803494:	19cd883a 	add	r6,r3,r7
  803498:	30800a1e 	bne	r6,r2,8034c4 <_free_r+0xa4>
  80349c:	10800017 	ldw	r2,0(r2)
  8034a0:	3885883a 	add	r2,r7,r2
  8034a4:	18800015 	stw	r2,0(r3)
  8034a8:	1889883a 	add	r4,r3,r2
  8034ac:	2900141e 	bne	r5,r4,803500 <_free_r+0xe0>
  8034b0:	29000017 	ldw	r4,0(r5)
  8034b4:	2085883a 	add	r2,r4,r2
  8034b8:	18800015 	stw	r2,0(r3)
  8034bc:	28800117 	ldw	r2,4(r5)
  8034c0:	00000e06 	br	8034fc <_free_r+0xdc>
  8034c4:	1180032e 	bgeu	r2,r6,8034d4 <_free_r+0xb4>
  8034c8:	00800304 	movi	r2,12
  8034cc:	20800015 	stw	r2,0(r4)
  8034d0:	f800283a 	ret
  8034d4:	11000017 	ldw	r4,0(r2)
  8034d8:	110d883a 	add	r6,r2,r4
  8034dc:	2980061e 	bne	r5,r6,8034f8 <_free_r+0xd8>
  8034e0:	29800017 	ldw	r6,0(r5)
  8034e4:	3109883a 	add	r4,r6,r4
  8034e8:	11000015 	stw	r4,0(r2)
  8034ec:	29000117 	ldw	r4,4(r5)
  8034f0:	11000115 	stw	r4,4(r2)
  8034f4:	00000106 	br	8034fc <_free_r+0xdc>
  8034f8:	11400115 	stw	r5,4(r2)
  8034fc:	18800115 	stw	r2,4(r3)
  803500:	f800283a 	ret

00803504 <_malloc_r>:
  803504:	defffb04 	addi	sp,sp,-20
  803508:	00bfff04 	movi	r2,-4
  80350c:	dc400115 	stw	r17,4(sp)
  803510:	2c4000c4 	addi	r17,r5,3
  803514:	88a2703a 	and	r17,r17,r2
  803518:	dc800215 	stw	r18,8(sp)
  80351c:	dfc00415 	stw	ra,16(sp)
  803520:	dcc00315 	stw	r19,12(sp)
  803524:	dc000015 	stw	r16,0(sp)
  803528:	8c400204 	addi	r17,r17,8
  80352c:	00800304 	movi	r2,12
  803530:	2025883a 	mov	r18,r4
  803534:	8880022e 	bgeu	r17,r2,803540 <_malloc_r+0x3c>
  803538:	1023883a 	mov	r17,r2
  80353c:	00000506 	br	803554 <_malloc_r+0x50>
  803540:	8800040e 	bge	r17,zero,803554 <_malloc_r+0x50>
  803544:	00800304 	movi	r2,12
  803548:	90800015 	stw	r2,0(r18)
  80354c:	0005883a 	mov	r2,zero
  803550:	00003b06 	br	803640 <_malloc_r+0x13c>
  803554:	897ffb36 	bltu	r17,r5,803544 <__alt_data_end+0xff803544>
  803558:	00802034 	movhi	r2,128
  80355c:	10979e04 	addi	r2,r2,24184
  803560:	10c00017 	ldw	r3,0(r2)
  803564:	1009883a 	mov	r4,r2
  803568:	1821883a 	mov	r16,r3
  80356c:	80000926 	beq	r16,zero,803594 <_malloc_r+0x90>
  803570:	80800017 	ldw	r2,0(r16)
  803574:	1445c83a 	sub	r2,r2,r17
  803578:	10001516 	blt	r2,zero,8035d0 <_malloc_r+0xcc>
  80357c:	014002c4 	movi	r5,11
  803580:	28800d2e 	bgeu	r5,r2,8035b8 <_malloc_r+0xb4>
  803584:	80800015 	stw	r2,0(r16)
  803588:	80a1883a 	add	r16,r16,r2
  80358c:	84400015 	stw	r17,0(r16)
  803590:	8000221e 	bne	r16,zero,80361c <_malloc_r+0x118>
  803594:	04002034 	movhi	r16,128
  803598:	84179d04 	addi	r16,r16,24180
  80359c:	80800017 	ldw	r2,0(r16)
  8035a0:	10000e1e 	bne	r2,zero,8035dc <_malloc_r+0xd8>
  8035a4:	000b883a 	mov	r5,zero
  8035a8:	9009883a 	mov	r4,r18
  8035ac:	08036e40 	call	8036e4 <_sbrk_r>
  8035b0:	80800015 	stw	r2,0(r16)
  8035b4:	00000906 	br	8035dc <_malloc_r+0xd8>
  8035b8:	80800117 	ldw	r2,4(r16)
  8035bc:	1c00021e 	bne	r3,r16,8035c8 <_malloc_r+0xc4>
  8035c0:	20800015 	stw	r2,0(r4)
  8035c4:	00001506 	br	80361c <_malloc_r+0x118>
  8035c8:	18800115 	stw	r2,4(r3)
  8035cc:	00001306 	br	80361c <_malloc_r+0x118>
  8035d0:	8007883a 	mov	r3,r16
  8035d4:	84000117 	ldw	r16,4(r16)
  8035d8:	003fe406 	br	80356c <__alt_data_end+0xff80356c>
  8035dc:	880b883a 	mov	r5,r17
  8035e0:	9009883a 	mov	r4,r18
  8035e4:	08036e40 	call	8036e4 <_sbrk_r>
  8035e8:	04ffffc4 	movi	r19,-1
  8035ec:	14ffd526 	beq	r2,r19,803544 <__alt_data_end+0xff803544>
  8035f0:	140000c4 	addi	r16,r2,3
  8035f4:	00ffff04 	movi	r3,-4
  8035f8:	80e0703a 	and	r16,r16,r3
  8035fc:	1400021e 	bne	r2,r16,803608 <_malloc_r+0x104>
  803600:	84400015 	stw	r17,0(r16)
  803604:	00000506 	br	80361c <_malloc_r+0x118>
  803608:	808bc83a 	sub	r5,r16,r2
  80360c:	9009883a 	mov	r4,r18
  803610:	08036e40 	call	8036e4 <_sbrk_r>
  803614:	14fffa1e 	bne	r2,r19,803600 <__alt_data_end+0xff803600>
  803618:	003fca06 	br	803544 <__alt_data_end+0xff803544>
  80361c:	810002c4 	addi	r4,r16,11
  803620:	00bffe04 	movi	r2,-8
  803624:	80c00104 	addi	r3,r16,4
  803628:	2084703a 	and	r2,r4,r2
  80362c:	10c7c83a 	sub	r3,r2,r3
  803630:	18000326 	beq	r3,zero,803640 <_malloc_r+0x13c>
  803634:	80e1883a 	add	r16,r16,r3
  803638:	00c7c83a 	sub	r3,zero,r3
  80363c:	80c00015 	stw	r3,0(r16)
  803640:	dfc00417 	ldw	ra,16(sp)
  803644:	dcc00317 	ldw	r19,12(sp)
  803648:	dc800217 	ldw	r18,8(sp)
  80364c:	dc400117 	ldw	r17,4(sp)
  803650:	dc000017 	ldw	r16,0(sp)
  803654:	dec00504 	addi	sp,sp,20
  803658:	f800283a 	ret

0080365c <_printf_r>:
  80365c:	defffd04 	addi	sp,sp,-12
  803660:	dfc00015 	stw	ra,0(sp)
  803664:	d9800115 	stw	r6,4(sp)
  803668:	d9c00215 	stw	r7,8(sp)
  80366c:	20c00217 	ldw	r3,8(r4)
  803670:	01802034 	movhi	r6,128
  803674:	31920004 	addi	r6,r6,18432
  803678:	19800115 	stw	r6,4(r3)
  80367c:	280d883a 	mov	r6,r5
  803680:	21400217 	ldw	r5,8(r4)
  803684:	d9c00104 	addi	r7,sp,4
  803688:	08042b80 	call	8042b8 <___vfprintf_internal_r>
  80368c:	dfc00017 	ldw	ra,0(sp)
  803690:	dec00304 	addi	sp,sp,12
  803694:	f800283a 	ret

00803698 <printf>:
  803698:	defffc04 	addi	sp,sp,-16
  80369c:	dfc00015 	stw	ra,0(sp)
  8036a0:	d9400115 	stw	r5,4(sp)
  8036a4:	d9800215 	stw	r6,8(sp)
  8036a8:	d9c00315 	stw	r7,12(sp)
  8036ac:	00802034 	movhi	r2,128
  8036b0:	1096b804 	addi	r2,r2,23264
  8036b4:	10800017 	ldw	r2,0(r2)
  8036b8:	01402034 	movhi	r5,128
  8036bc:	29520004 	addi	r5,r5,18432
  8036c0:	10c00217 	ldw	r3,8(r2)
  8036c4:	d9800104 	addi	r6,sp,4
  8036c8:	19400115 	stw	r5,4(r3)
  8036cc:	200b883a 	mov	r5,r4
  8036d0:	11000217 	ldw	r4,8(r2)
  8036d4:	08047e40 	call	8047e4 <__vfprintf_internal>
  8036d8:	dfc00017 	ldw	ra,0(sp)
  8036dc:	dec00404 	addi	sp,sp,16
  8036e0:	f800283a 	ret

008036e4 <_sbrk_r>:
  8036e4:	defffd04 	addi	sp,sp,-12
  8036e8:	dc000015 	stw	r16,0(sp)
  8036ec:	04002034 	movhi	r16,128
  8036f0:	dc400115 	stw	r17,4(sp)
  8036f4:	84179f04 	addi	r16,r16,24188
  8036f8:	2023883a 	mov	r17,r4
  8036fc:	2809883a 	mov	r4,r5
  803700:	dfc00215 	stw	ra,8(sp)
  803704:	80000015 	stw	zero,0(r16)
  803708:	0804db40 	call	804db4 <sbrk>
  80370c:	00ffffc4 	movi	r3,-1
  803710:	10c0031e 	bne	r2,r3,803720 <_sbrk_r+0x3c>
  803714:	80c00017 	ldw	r3,0(r16)
  803718:	18000126 	beq	r3,zero,803720 <_sbrk_r+0x3c>
  80371c:	88c00015 	stw	r3,0(r17)
  803720:	dfc00217 	ldw	ra,8(sp)
  803724:	dc400117 	ldw	r17,4(sp)
  803728:	dc000017 	ldw	r16,0(sp)
  80372c:	dec00304 	addi	sp,sp,12
  803730:	f800283a 	ret

00803734 <_sprintf_r>:
  803734:	defff704 	addi	sp,sp,-36
  803738:	dfc00715 	stw	ra,28(sp)
  80373c:	d9c00815 	stw	r7,32(sp)
  803740:	00808204 	movi	r2,520
  803744:	d880000d 	sth	r2,0(sp)
  803748:	00a00034 	movhi	r2,32768
  80374c:	10bfffc4 	addi	r2,r2,-1
  803750:	d8800515 	stw	r2,20(sp)
  803754:	d8800315 	stw	r2,12(sp)
  803758:	00bfffc4 	movi	r2,-1
  80375c:	d880008d 	sth	r2,2(sp)
  803760:	00802034 	movhi	r2,128
  803764:	d9400415 	stw	r5,16(sp)
  803768:	d9400215 	stw	r5,8(sp)
  80376c:	10922e04 	addi	r2,r2,18616
  803770:	d9c00804 	addi	r7,sp,32
  803774:	d80b883a 	mov	r5,sp
  803778:	d8800115 	stw	r2,4(sp)
  80377c:	d8000615 	stw	zero,24(sp)
  803780:	0803d040 	call	803d04 <___svfprintf_internal_r>
  803784:	d8c00417 	ldw	r3,16(sp)
  803788:	18000005 	stb	zero,0(r3)
  80378c:	dfc00717 	ldw	ra,28(sp)
  803790:	dec00904 	addi	sp,sp,36
  803794:	f800283a 	ret

00803798 <sprintf>:
  803798:	defff604 	addi	sp,sp,-40
  80379c:	dfc00715 	stw	ra,28(sp)
  8037a0:	d9800815 	stw	r6,32(sp)
  8037a4:	d9c00915 	stw	r7,36(sp)
  8037a8:	00808204 	movi	r2,520
  8037ac:	d880000d 	sth	r2,0(sp)
  8037b0:	00a00034 	movhi	r2,32768
  8037b4:	10bfffc4 	addi	r2,r2,-1
  8037b8:	d8800515 	stw	r2,20(sp)
  8037bc:	d8800315 	stw	r2,12(sp)
  8037c0:	00bfffc4 	movi	r2,-1
  8037c4:	d880008d 	sth	r2,2(sp)
  8037c8:	00802034 	movhi	r2,128
  8037cc:	10922e04 	addi	r2,r2,18616
  8037d0:	d8800115 	stw	r2,4(sp)
  8037d4:	00802034 	movhi	r2,128
  8037d8:	1096b804 	addi	r2,r2,23264
  8037dc:	d9000415 	stw	r4,16(sp)
  8037e0:	d9000215 	stw	r4,8(sp)
  8037e4:	11000017 	ldw	r4,0(r2)
  8037e8:	280d883a 	mov	r6,r5
  8037ec:	d9c00804 	addi	r7,sp,32
  8037f0:	d80b883a 	mov	r5,sp
  8037f4:	d8000615 	stw	zero,24(sp)
  8037f8:	0803d040 	call	803d04 <___svfprintf_internal_r>
  8037fc:	d8c00417 	ldw	r3,16(sp)
  803800:	18000005 	stb	zero,0(r3)
  803804:	dfc00717 	ldw	ra,28(sp)
  803808:	dec00a04 	addi	sp,sp,40
  80380c:	f800283a 	ret

00803810 <strcmp>:
  803810:	20800003 	ldbu	r2,0(r4)
  803814:	10c03fcc 	andi	r3,r2,255
  803818:	18c0201c 	xori	r3,r3,128
  80381c:	18ffe004 	addi	r3,r3,-128
  803820:	18000526 	beq	r3,zero,803838 <strcmp+0x28>
  803824:	29800007 	ldb	r6,0(r5)
  803828:	1980031e 	bne	r3,r6,803838 <strcmp+0x28>
  80382c:	21000044 	addi	r4,r4,1
  803830:	29400044 	addi	r5,r5,1
  803834:	003ff606 	br	803810 <__alt_data_end+0xff803810>
  803838:	28c00003 	ldbu	r3,0(r5)
  80383c:	10803fcc 	andi	r2,r2,255
  803840:	10c5c83a 	sub	r2,r2,r3
  803844:	f800283a 	ret

00803848 <strcpy>:
  803848:	2005883a 	mov	r2,r4
  80384c:	200d883a 	mov	r6,r4
  803850:	28c00003 	ldbu	r3,0(r5)
  803854:	31800044 	addi	r6,r6,1
  803858:	29400044 	addi	r5,r5,1
  80385c:	30ffffc5 	stb	r3,-1(r6)
  803860:	18c03fcc 	andi	r3,r3,255
  803864:	18c0201c 	xori	r3,r3,128
  803868:	18ffe004 	addi	r3,r3,-128
  80386c:	183ff81e 	bne	r3,zero,803850 <__alt_data_end+0xff803850>
  803870:	f800283a 	ret

00803874 <strlen>:
  803874:	2005883a 	mov	r2,r4
  803878:	10c00007 	ldb	r3,0(r2)
  80387c:	18000226 	beq	r3,zero,803888 <strlen+0x14>
  803880:	10800044 	addi	r2,r2,1
  803884:	003ffc06 	br	803878 <__alt_data_end+0xff803878>
  803888:	1105c83a 	sub	r2,r2,r4
  80388c:	f800283a 	ret

00803890 <strncpy>:
  803890:	2005883a 	mov	r2,r4
  803894:	200f883a 	mov	r7,r4
  803898:	30000c26 	beq	r6,zero,8038cc <strncpy+0x3c>
  80389c:	2a000003 	ldbu	r8,0(r5)
  8038a0:	38c00044 	addi	r3,r7,1
  8038a4:	31bfffc4 	addi	r6,r6,-1
  8038a8:	3a000005 	stb	r8,0(r7)
  8038ac:	42003fcc 	andi	r8,r8,255
  8038b0:	4200201c 	xori	r8,r8,128
  8038b4:	423fe004 	addi	r8,r8,-128
  8038b8:	29400044 	addi	r5,r5,1
  8038bc:	180f883a 	mov	r7,r3
  8038c0:	403ff51e 	bne	r8,zero,803898 <__alt_data_end+0xff803898>
  8038c4:	198d883a 	add	r6,r3,r6
  8038c8:	00000106 	br	8038d0 <strncpy+0x40>
  8038cc:	f800283a 	ret
  8038d0:	30c00326 	beq	r6,r3,8038e0 <strncpy+0x50>
  8038d4:	18000005 	stb	zero,0(r3)
  8038d8:	18c00044 	addi	r3,r3,1
  8038dc:	003ffc06 	br	8038d0 <__alt_data_end+0xff8038d0>
  8038e0:	f800283a 	ret

008038e4 <strtok>:
  8038e4:	00802034 	movhi	r2,128
  8038e8:	defffc04 	addi	sp,sp,-16
  8038ec:	1096b804 	addi	r2,r2,23264
  8038f0:	dc000115 	stw	r16,4(sp)
  8038f4:	14000017 	ldw	r16,0(r2)
  8038f8:	dc400215 	stw	r17,8(sp)
  8038fc:	dfc00315 	stw	ra,12(sp)
  803900:	80803617 	ldw	r2,216(r16)
  803904:	2023883a 	mov	r17,r4
  803908:	1000211e 	bne	r2,zero,803990 <strtok+0xac>
  80390c:	01001404 	movi	r4,80
  803910:	d9400015 	stw	r5,0(sp)
  803914:	08033d80 	call	8033d8 <malloc>
  803918:	80803615 	stw	r2,216(r16)
  80391c:	10000215 	stw	zero,8(r2)
  803920:	10000015 	stw	zero,0(r2)
  803924:	10000115 	stw	zero,4(r2)
  803928:	80803617 	ldw	r2,216(r16)
  80392c:	10000415 	stw	zero,16(r2)
  803930:	10000315 	stw	zero,12(r2)
  803934:	80803617 	ldw	r2,216(r16)
  803938:	10000615 	stw	zero,24(r2)
  80393c:	10000515 	stw	zero,20(r2)
  803940:	80803617 	ldw	r2,216(r16)
  803944:	10000b15 	stw	zero,44(r2)
  803948:	10000a15 	stw	zero,40(r2)
  80394c:	80803617 	ldw	r2,216(r16)
  803950:	10000d15 	stw	zero,52(r2)
  803954:	10000c15 	stw	zero,48(r2)
  803958:	80803617 	ldw	r2,216(r16)
  80395c:	10000f15 	stw	zero,60(r2)
  803960:	10000e15 	stw	zero,56(r2)
  803964:	80803617 	ldw	r2,216(r16)
  803968:	10001115 	stw	zero,68(r2)
  80396c:	10001015 	stw	zero,64(r2)
  803970:	80803617 	ldw	r2,216(r16)
  803974:	10001315 	stw	zero,76(r2)
  803978:	10001215 	stw	zero,72(r2)
  80397c:	80803617 	ldw	r2,216(r16)
  803980:	10000705 	stb	zero,28(r2)
  803984:	80803617 	ldw	r2,216(r16)
  803988:	d9400017 	ldw	r5,0(sp)
  80398c:	10000915 	stw	zero,36(r2)
  803990:	81803617 	ldw	r6,216(r16)
  803994:	01c00044 	movi	r7,1
  803998:	8809883a 	mov	r4,r17
  80399c:	dfc00317 	ldw	ra,12(sp)
  8039a0:	dc400217 	ldw	r17,8(sp)
  8039a4:	dc000117 	ldw	r16,4(sp)
  8039a8:	dec00404 	addi	sp,sp,16
  8039ac:	08039b01 	jmpi	8039b0 <__strtok_r>

008039b0 <__strtok_r>:
  8039b0:	2000021e 	bne	r4,zero,8039bc <__strtok_r+0xc>
  8039b4:	31000017 	ldw	r4,0(r6)
  8039b8:	20001f26 	beq	r4,zero,803a38 <__strtok_r+0x88>
  8039bc:	2005883a 	mov	r2,r4
  8039c0:	12000007 	ldb	r8,0(r2)
  8039c4:	21000044 	addi	r4,r4,1
  8039c8:	2807883a 	mov	r3,r5
  8039cc:	1a400007 	ldb	r9,0(r3)
  8039d0:	48000626 	beq	r9,zero,8039ec <__strtok_r+0x3c>
  8039d4:	18c00044 	addi	r3,r3,1
  8039d8:	427ffc1e 	bne	r8,r9,8039cc <__alt_data_end+0xff8039cc>
  8039dc:	383ff71e 	bne	r7,zero,8039bc <__alt_data_end+0xff8039bc>
  8039e0:	31000015 	stw	r4,0(r6)
  8039e4:	10000005 	stb	zero,0(r2)
  8039e8:	f800283a 	ret
  8039ec:	4000061e 	bne	r8,zero,803a08 <__strtok_r+0x58>
  8039f0:	30000015 	stw	zero,0(r6)
  8039f4:	00001006 	br	803a38 <__strtok_r+0x88>
  8039f8:	19c00007 	ldb	r7,0(r3)
  8039fc:	51c00826 	beq	r10,r7,803a20 <__strtok_r+0x70>
  803a00:	18c00044 	addi	r3,r3,1
  803a04:	383ffc1e 	bne	r7,zero,8039f8 <__alt_data_end+0xff8039f8>
  803a08:	2011883a 	mov	r8,r4
  803a0c:	21000044 	addi	r4,r4,1
  803a10:	2013883a 	mov	r9,r4
  803a14:	42800007 	ldb	r10,0(r8)
  803a18:	2807883a 	mov	r3,r5
  803a1c:	003ff606 	br	8039f8 <__alt_data_end+0xff8039f8>
  803a20:	50000226 	beq	r10,zero,803a2c <__strtok_r+0x7c>
  803a24:	40000005 	stb	zero,0(r8)
  803a28:	00000106 	br	803a30 <__strtok_r+0x80>
  803a2c:	0013883a 	mov	r9,zero
  803a30:	32400015 	stw	r9,0(r6)
  803a34:	f800283a 	ret
  803a38:	0005883a 	mov	r2,zero
  803a3c:	f800283a 	ret

00803a40 <strtok_r>:
  803a40:	01c00044 	movi	r7,1
  803a44:	08039b01 	jmpi	8039b0 <__strtok_r>

00803a48 <_strtol_r>:
  803a48:	00802034 	movhi	r2,128
  803a4c:	defff304 	addi	sp,sp,-52
  803a50:	1096b604 	addi	r2,r2,23256
  803a54:	dcc00615 	stw	r19,24(sp)
  803a58:	14c00017 	ldw	r19,0(r2)
  803a5c:	df000b15 	stw	fp,44(sp)
  803a60:	dd400815 	stw	r21,32(sp)
  803a64:	dd000715 	stw	r20,28(sp)
  803a68:	dc800515 	stw	r18,20(sp)
  803a6c:	202b883a 	mov	r21,r4
  803a70:	dfc00c15 	stw	ra,48(sp)
  803a74:	ddc00a15 	stw	r23,40(sp)
  803a78:	dd800915 	stw	r22,36(sp)
  803a7c:	dc400415 	stw	r17,16(sp)
  803a80:	dc000315 	stw	r16,12(sp)
  803a84:	2829883a 	mov	r20,r5
  803a88:	3039883a 	mov	fp,r6
  803a8c:	3825883a 	mov	r18,r7
  803a90:	2809883a 	mov	r4,r5
  803a94:	2005883a 	mov	r2,r4
  803a98:	14400003 	ldbu	r17,0(r2)
  803a9c:	24000044 	addi	r16,r4,1
  803aa0:	8009883a 	mov	r4,r16
  803aa4:	9c47883a 	add	r3,r19,r17
  803aa8:	18c00043 	ldbu	r3,1(r3)
  803aac:	18c0020c 	andi	r3,r3,8
  803ab0:	183ff81e 	bne	r3,zero,803a94 <__alt_data_end+0xff803a94>
  803ab4:	00c00b44 	movi	r3,45
  803ab8:	88c0041e 	bne	r17,r3,803acc <_strtol_r+0x84>
  803abc:	14000084 	addi	r16,r2,2
  803ac0:	14400043 	ldbu	r17,1(r2)
  803ac4:	05c00044 	movi	r23,1
  803ac8:	00000506 	br	803ae0 <_strtol_r+0x98>
  803acc:	00c00ac4 	movi	r3,43
  803ad0:	88c0021e 	bne	r17,r3,803adc <_strtol_r+0x94>
  803ad4:	14400043 	ldbu	r17,1(r2)
  803ad8:	14000084 	addi	r16,r2,2
  803adc:	002f883a 	mov	r23,zero
  803ae0:	90000326 	beq	r18,zero,803af0 <_strtol_r+0xa8>
  803ae4:	00800404 	movi	r2,16
  803ae8:	90800a1e 	bne	r18,r2,803b14 <_strtol_r+0xcc>
  803aec:	00005406 	br	803c40 <_strtol_r+0x1f8>
  803af0:	00800c04 	movi	r2,48
  803af4:	8880501e 	bne	r17,r2,803c38 <_strtol_r+0x1f0>
  803af8:	80800003 	ldbu	r2,0(r16)
  803afc:	00c01604 	movi	r3,88
  803b00:	108037cc 	andi	r2,r2,223
  803b04:	10c0481e 	bne	r2,r3,803c28 <_strtol_r+0x1e0>
  803b08:	84400043 	ldbu	r17,1(r16)
  803b0c:	04800404 	movi	r18,16
  803b10:	84000084 	addi	r16,r16,2
  803b14:	00e00034 	movhi	r3,32768
  803b18:	18ffffc4 	addi	r3,r3,-1
  803b1c:	b8c7883a 	add	r3,r23,r3
  803b20:	1809883a 	mov	r4,r3
  803b24:	900b883a 	mov	r5,r18
  803b28:	d8c00015 	stw	r3,0(sp)
  803b2c:	080178c0 	call	80178c <__umodsi3>
  803b30:	d8c00017 	ldw	r3,0(sp)
  803b34:	900b883a 	mov	r5,r18
  803b38:	102d883a 	mov	r22,r2
  803b3c:	1809883a 	mov	r4,r3
  803b40:	08017280 	call	801728 <__udivsi3>
  803b44:	100d883a 	mov	r6,r2
  803b48:	0009883a 	mov	r4,zero
  803b4c:	0005883a 	mov	r2,zero
  803b50:	01c00044 	movi	r7,1
  803b54:	023fffc4 	movi	r8,-1
  803b58:	9c47883a 	add	r3,r19,r17
  803b5c:	18c00043 	ldbu	r3,1(r3)
  803b60:	1940010c 	andi	r5,r3,4
  803b64:	28000226 	beq	r5,zero,803b70 <_strtol_r+0x128>
  803b68:	8c7ff404 	addi	r17,r17,-48
  803b6c:	00000706 	br	803b8c <_strtol_r+0x144>
  803b70:	18c000cc 	andi	r3,r3,3
  803b74:	18001a26 	beq	r3,zero,803be0 <_strtol_r+0x198>
  803b78:	19c00226 	beq	r3,r7,803b84 <_strtol_r+0x13c>
  803b7c:	00c015c4 	movi	r3,87
  803b80:	00000106 	br	803b88 <_strtol_r+0x140>
  803b84:	00c00dc4 	movi	r3,55
  803b88:	88e3c83a 	sub	r17,r17,r3
  803b8c:	8c80140e 	bge	r17,r18,803be0 <_strtol_r+0x198>
  803b90:	22001026 	beq	r4,r8,803bd4 <_strtol_r+0x18c>
  803b94:	30800e36 	bltu	r6,r2,803bd0 <_strtol_r+0x188>
  803b98:	1180011e 	bne	r2,r6,803ba0 <_strtol_r+0x158>
  803b9c:	b4400c16 	blt	r22,r17,803bd0 <_strtol_r+0x188>
  803ba0:	1009883a 	mov	r4,r2
  803ba4:	900b883a 	mov	r5,r18
  803ba8:	d9800015 	stw	r6,0(sp)
  803bac:	d9c00115 	stw	r7,4(sp)
  803bb0:	da000215 	stw	r8,8(sp)
  803bb4:	08017e40 	call	8017e4 <__mulsi3>
  803bb8:	8885883a 	add	r2,r17,r2
  803bbc:	01000044 	movi	r4,1
  803bc0:	d9800017 	ldw	r6,0(sp)
  803bc4:	d9c00117 	ldw	r7,4(sp)
  803bc8:	da000217 	ldw	r8,8(sp)
  803bcc:	00000106 	br	803bd4 <_strtol_r+0x18c>
  803bd0:	013fffc4 	movi	r4,-1
  803bd4:	84400003 	ldbu	r17,0(r16)
  803bd8:	84000044 	addi	r16,r16,1
  803bdc:	003fde06 	br	803b58 <__alt_data_end+0xff803b58>
  803be0:	00ffffc4 	movi	r3,-1
  803be4:	20c0071e 	bne	r4,r3,803c04 <_strtol_r+0x1bc>
  803be8:	00a00034 	movhi	r2,32768
  803bec:	10c5883a 	add	r2,r2,r3
  803bf0:	00c00884 	movi	r3,34
  803bf4:	a8c00015 	stw	r3,0(r21)
  803bf8:	b885883a 	add	r2,r23,r2
  803bfc:	e000051e 	bne	fp,zero,803c14 <_strtol_r+0x1cc>
  803c00:	00001206 	br	803c4c <_strtol_r+0x204>
  803c04:	b8000126 	beq	r23,zero,803c0c <_strtol_r+0x1c4>
  803c08:	0085c83a 	sub	r2,zero,r2
  803c0c:	e0000f26 	beq	fp,zero,803c4c <_strtol_r+0x204>
  803c10:	20000226 	beq	r4,zero,803c1c <_strtol_r+0x1d4>
  803c14:	843fffc4 	addi	r16,r16,-1
  803c18:	00000106 	br	803c20 <_strtol_r+0x1d8>
  803c1c:	a021883a 	mov	r16,r20
  803c20:	e4000015 	stw	r16,0(fp)
  803c24:	00000906 	br	803c4c <_strtol_r+0x204>
  803c28:	04400c04 	movi	r17,48
  803c2c:	903fb91e 	bne	r18,zero,803b14 <__alt_data_end+0xff803b14>
  803c30:	04800204 	movi	r18,8
  803c34:	003fb706 	br	803b14 <__alt_data_end+0xff803b14>
  803c38:	04800284 	movi	r18,10
  803c3c:	003fb506 	br	803b14 <__alt_data_end+0xff803b14>
  803c40:	00800c04 	movi	r2,48
  803c44:	88bfac26 	beq	r17,r2,803af8 <__alt_data_end+0xff803af8>
  803c48:	003fb206 	br	803b14 <__alt_data_end+0xff803b14>
  803c4c:	dfc00c17 	ldw	ra,48(sp)
  803c50:	df000b17 	ldw	fp,44(sp)
  803c54:	ddc00a17 	ldw	r23,40(sp)
  803c58:	dd800917 	ldw	r22,36(sp)
  803c5c:	dd400817 	ldw	r21,32(sp)
  803c60:	dd000717 	ldw	r20,28(sp)
  803c64:	dcc00617 	ldw	r19,24(sp)
  803c68:	dc800517 	ldw	r18,20(sp)
  803c6c:	dc400417 	ldw	r17,16(sp)
  803c70:	dc000317 	ldw	r16,12(sp)
  803c74:	dec00d04 	addi	sp,sp,52
  803c78:	f800283a 	ret

00803c7c <strtol>:
  803c7c:	00802034 	movhi	r2,128
  803c80:	1096b804 	addi	r2,r2,23264
  803c84:	300f883a 	mov	r7,r6
  803c88:	280d883a 	mov	r6,r5
  803c8c:	200b883a 	mov	r5,r4
  803c90:	11000017 	ldw	r4,0(r2)
  803c94:	0803a481 	jmpi	803a48 <_strtol_r>

00803c98 <print_repeat>:
  803c98:	defffb04 	addi	sp,sp,-20
  803c9c:	dc800315 	stw	r18,12(sp)
  803ca0:	dc400215 	stw	r17,8(sp)
  803ca4:	dc000115 	stw	r16,4(sp)
  803ca8:	dfc00415 	stw	ra,16(sp)
  803cac:	2025883a 	mov	r18,r4
  803cb0:	2823883a 	mov	r17,r5
  803cb4:	d9800005 	stb	r6,0(sp)
  803cb8:	3821883a 	mov	r16,r7
  803cbc:	04000a0e 	bge	zero,r16,803ce8 <print_repeat+0x50>
  803cc0:	88800117 	ldw	r2,4(r17)
  803cc4:	01c00044 	movi	r7,1
  803cc8:	d80d883a 	mov	r6,sp
  803ccc:	880b883a 	mov	r5,r17
  803cd0:	9009883a 	mov	r4,r18
  803cd4:	103ee83a 	callr	r2
  803cd8:	843fffc4 	addi	r16,r16,-1
  803cdc:	103ff726 	beq	r2,zero,803cbc <__alt_data_end+0xff803cbc>
  803ce0:	00bfffc4 	movi	r2,-1
  803ce4:	00000106 	br	803cec <print_repeat+0x54>
  803ce8:	0005883a 	mov	r2,zero
  803cec:	dfc00417 	ldw	ra,16(sp)
  803cf0:	dc800317 	ldw	r18,12(sp)
  803cf4:	dc400217 	ldw	r17,8(sp)
  803cf8:	dc000117 	ldw	r16,4(sp)
  803cfc:	dec00504 	addi	sp,sp,20
  803d00:	f800283a 	ret

00803d04 <___svfprintf_internal_r>:
  803d04:	deffe504 	addi	sp,sp,-108
  803d08:	d8c00804 	addi	r3,sp,32
  803d0c:	ddc01815 	stw	r23,96(sp)
  803d10:	dd801715 	stw	r22,92(sp)
  803d14:	dd401615 	stw	r21,88(sp)
  803d18:	dd001515 	stw	r20,84(sp)
  803d1c:	dcc01415 	stw	r19,80(sp)
  803d20:	dc801315 	stw	r18,76(sp)
  803d24:	dc401215 	stw	r17,72(sp)
  803d28:	dc001115 	stw	r16,68(sp)
  803d2c:	dfc01a15 	stw	ra,104(sp)
  803d30:	df001915 	stw	fp,100(sp)
  803d34:	2029883a 	mov	r20,r4
  803d38:	2823883a 	mov	r17,r5
  803d3c:	382d883a 	mov	r22,r7
  803d40:	d9800f15 	stw	r6,60(sp)
  803d44:	0021883a 	mov	r16,zero
  803d48:	d8000e15 	stw	zero,56(sp)
  803d4c:	d8000a15 	stw	zero,40(sp)
  803d50:	002b883a 	mov	r21,zero
  803d54:	0027883a 	mov	r19,zero
  803d58:	0025883a 	mov	r18,zero
  803d5c:	d8000c15 	stw	zero,48(sp)
  803d60:	d8000b15 	stw	zero,44(sp)
  803d64:	002f883a 	mov	r23,zero
  803d68:	d8c00915 	stw	r3,36(sp)
  803d6c:	d8c00f17 	ldw	r3,60(sp)
  803d70:	19000003 	ldbu	r4,0(r3)
  803d74:	20803fcc 	andi	r2,r4,255
  803d78:	1080201c 	xori	r2,r2,128
  803d7c:	10bfe004 	addi	r2,r2,-128
  803d80:	10011e26 	beq	r2,zero,8041fc <___svfprintf_internal_r+0x4f8>
  803d84:	00c00044 	movi	r3,1
  803d88:	b8c01426 	beq	r23,r3,803ddc <___svfprintf_internal_r+0xd8>
  803d8c:	1dc00216 	blt	r3,r23,803d98 <___svfprintf_internal_r+0x94>
  803d90:	b8000626 	beq	r23,zero,803dac <___svfprintf_internal_r+0xa8>
  803d94:	00011506 	br	8041ec <___svfprintf_internal_r+0x4e8>
  803d98:	01400084 	movi	r5,2
  803d9c:	b9401d26 	beq	r23,r5,803e14 <___svfprintf_internal_r+0x110>
  803da0:	014000c4 	movi	r5,3
  803da4:	b9402b26 	beq	r23,r5,803e54 <___svfprintf_internal_r+0x150>
  803da8:	00011006 	br	8041ec <___svfprintf_internal_r+0x4e8>
  803dac:	01400944 	movi	r5,37
  803db0:	1140fc26 	beq	r2,r5,8041a4 <___svfprintf_internal_r+0x4a0>
  803db4:	88800117 	ldw	r2,4(r17)
  803db8:	d9000005 	stb	r4,0(sp)
  803dbc:	01c00044 	movi	r7,1
  803dc0:	d80d883a 	mov	r6,sp
  803dc4:	880b883a 	mov	r5,r17
  803dc8:	a009883a 	mov	r4,r20
  803dcc:	103ee83a 	callr	r2
  803dd0:	1000d81e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  803dd4:	84000044 	addi	r16,r16,1
  803dd8:	00010406 	br	8041ec <___svfprintf_internal_r+0x4e8>
  803ddc:	01400c04 	movi	r5,48
  803de0:	1140fa26 	beq	r2,r5,8041cc <___svfprintf_internal_r+0x4c8>
  803de4:	01400944 	movi	r5,37
  803de8:	11400a1e 	bne	r2,r5,803e14 <___svfprintf_internal_r+0x110>
  803dec:	d8800005 	stb	r2,0(sp)
  803df0:	88800117 	ldw	r2,4(r17)
  803df4:	b80f883a 	mov	r7,r23
  803df8:	d80d883a 	mov	r6,sp
  803dfc:	880b883a 	mov	r5,r17
  803e00:	a009883a 	mov	r4,r20
  803e04:	103ee83a 	callr	r2
  803e08:	1000ca1e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  803e0c:	84000044 	addi	r16,r16,1
  803e10:	0000f506 	br	8041e8 <___svfprintf_internal_r+0x4e4>
  803e14:	25fff404 	addi	r23,r4,-48
  803e18:	bdc03fcc 	andi	r23,r23,255
  803e1c:	00c00244 	movi	r3,9
  803e20:	1dc00936 	bltu	r3,r23,803e48 <___svfprintf_internal_r+0x144>
  803e24:	00bfffc4 	movi	r2,-1
  803e28:	90800426 	beq	r18,r2,803e3c <___svfprintf_internal_r+0x138>
  803e2c:	01400284 	movi	r5,10
  803e30:	9009883a 	mov	r4,r18
  803e34:	08017e40 	call	8017e4 <__mulsi3>
  803e38:	00000106 	br	803e40 <___svfprintf_internal_r+0x13c>
  803e3c:	0005883a 	mov	r2,zero
  803e40:	b8a5883a 	add	r18,r23,r2
  803e44:	0000e206 	br	8041d0 <___svfprintf_internal_r+0x4cc>
  803e48:	01400b84 	movi	r5,46
  803e4c:	1140e426 	beq	r2,r5,8041e0 <___svfprintf_internal_r+0x4dc>
  803e50:	05c00084 	movi	r23,2
  803e54:	213ff404 	addi	r4,r4,-48
  803e58:	27003fcc 	andi	fp,r4,255
  803e5c:	00c00244 	movi	r3,9
  803e60:	1f000936 	bltu	r3,fp,803e88 <___svfprintf_internal_r+0x184>
  803e64:	00bfffc4 	movi	r2,-1
  803e68:	98800426 	beq	r19,r2,803e7c <___svfprintf_internal_r+0x178>
  803e6c:	01400284 	movi	r5,10
  803e70:	9809883a 	mov	r4,r19
  803e74:	08017e40 	call	8017e4 <__mulsi3>
  803e78:	00000106 	br	803e80 <___svfprintf_internal_r+0x17c>
  803e7c:	0005883a 	mov	r2,zero
  803e80:	e0a7883a 	add	r19,fp,r2
  803e84:	0000d906 	br	8041ec <___svfprintf_internal_r+0x4e8>
  803e88:	00c01b04 	movi	r3,108
  803e8c:	10c0d226 	beq	r2,r3,8041d8 <___svfprintf_internal_r+0x4d4>
  803e90:	013fffc4 	movi	r4,-1
  803e94:	99000226 	beq	r19,r4,803ea0 <___svfprintf_internal_r+0x19c>
  803e98:	d8000b15 	stw	zero,44(sp)
  803e9c:	00000106 	br	803ea4 <___svfprintf_internal_r+0x1a0>
  803ea0:	04c00044 	movi	r19,1
  803ea4:	01001a44 	movi	r4,105
  803ea8:	11001626 	beq	r2,r4,803f04 <___svfprintf_internal_r+0x200>
  803eac:	20800916 	blt	r4,r2,803ed4 <___svfprintf_internal_r+0x1d0>
  803eb0:	010018c4 	movi	r4,99
  803eb4:	11008826 	beq	r2,r4,8040d8 <___svfprintf_internal_r+0x3d4>
  803eb8:	01001904 	movi	r4,100
  803ebc:	11001126 	beq	r2,r4,803f04 <___svfprintf_internal_r+0x200>
  803ec0:	01001604 	movi	r4,88
  803ec4:	1100c81e 	bne	r2,r4,8041e8 <___svfprintf_internal_r+0x4e4>
  803ec8:	00c00044 	movi	r3,1
  803ecc:	d8c00e15 	stw	r3,56(sp)
  803ed0:	00001506 	br	803f28 <___svfprintf_internal_r+0x224>
  803ed4:	01001cc4 	movi	r4,115
  803ed8:	11009826 	beq	r2,r4,80413c <___svfprintf_internal_r+0x438>
  803edc:	20800416 	blt	r4,r2,803ef0 <___svfprintf_internal_r+0x1ec>
  803ee0:	01001bc4 	movi	r4,111
  803ee4:	1100c01e 	bne	r2,r4,8041e8 <___svfprintf_internal_r+0x4e4>
  803ee8:	05400204 	movi	r21,8
  803eec:	00000f06 	br	803f2c <___svfprintf_internal_r+0x228>
  803ef0:	01001d44 	movi	r4,117
  803ef4:	11000d26 	beq	r2,r4,803f2c <___svfprintf_internal_r+0x228>
  803ef8:	01001e04 	movi	r4,120
  803efc:	11000a26 	beq	r2,r4,803f28 <___svfprintf_internal_r+0x224>
  803f00:	0000b906 	br	8041e8 <___svfprintf_internal_r+0x4e4>
  803f04:	d8c00a17 	ldw	r3,40(sp)
  803f08:	b7000104 	addi	fp,r22,4
  803f0c:	18000726 	beq	r3,zero,803f2c <___svfprintf_internal_r+0x228>
  803f10:	df000d15 	stw	fp,52(sp)
  803f14:	b5c00017 	ldw	r23,0(r22)
  803f18:	b800080e 	bge	r23,zero,803f3c <___svfprintf_internal_r+0x238>
  803f1c:	05efc83a 	sub	r23,zero,r23
  803f20:	02400044 	movi	r9,1
  803f24:	00000606 	br	803f40 <___svfprintf_internal_r+0x23c>
  803f28:	05400404 	movi	r21,16
  803f2c:	b0c00104 	addi	r3,r22,4
  803f30:	d8c00d15 	stw	r3,52(sp)
  803f34:	b5c00017 	ldw	r23,0(r22)
  803f38:	d8000a15 	stw	zero,40(sp)
  803f3c:	0013883a 	mov	r9,zero
  803f40:	d839883a 	mov	fp,sp
  803f44:	b8001726 	beq	r23,zero,803fa4 <___svfprintf_internal_r+0x2a0>
  803f48:	a80b883a 	mov	r5,r21
  803f4c:	b809883a 	mov	r4,r23
  803f50:	da401015 	stw	r9,64(sp)
  803f54:	08017280 	call	801728 <__udivsi3>
  803f58:	a80b883a 	mov	r5,r21
  803f5c:	1009883a 	mov	r4,r2
  803f60:	102d883a 	mov	r22,r2
  803f64:	08017e40 	call	8017e4 <__mulsi3>
  803f68:	b885c83a 	sub	r2,r23,r2
  803f6c:	00c00244 	movi	r3,9
  803f70:	da401017 	ldw	r9,64(sp)
  803f74:	18800216 	blt	r3,r2,803f80 <___svfprintf_internal_r+0x27c>
  803f78:	10800c04 	addi	r2,r2,48
  803f7c:	00000506 	br	803f94 <___svfprintf_internal_r+0x290>
  803f80:	d8c00e17 	ldw	r3,56(sp)
  803f84:	18000226 	beq	r3,zero,803f90 <___svfprintf_internal_r+0x28c>
  803f88:	10800dc4 	addi	r2,r2,55
  803f8c:	00000106 	br	803f94 <___svfprintf_internal_r+0x290>
  803f90:	108015c4 	addi	r2,r2,87
  803f94:	e0800005 	stb	r2,0(fp)
  803f98:	b02f883a 	mov	r23,r22
  803f9c:	e7000044 	addi	fp,fp,1
  803fa0:	003fe806 	br	803f44 <__alt_data_end+0xff803f44>
  803fa4:	e6efc83a 	sub	r23,fp,sp
  803fa8:	9dc5c83a 	sub	r2,r19,r23
  803fac:	0080090e 	bge	zero,r2,803fd4 <___svfprintf_internal_r+0x2d0>
  803fb0:	e085883a 	add	r2,fp,r2
  803fb4:	01400c04 	movi	r5,48
  803fb8:	d8c00917 	ldw	r3,36(sp)
  803fbc:	e009883a 	mov	r4,fp
  803fc0:	e0c0032e 	bgeu	fp,r3,803fd0 <___svfprintf_internal_r+0x2cc>
  803fc4:	e7000044 	addi	fp,fp,1
  803fc8:	21400005 	stb	r5,0(r4)
  803fcc:	e0bffa1e 	bne	fp,r2,803fb8 <__alt_data_end+0xff803fb8>
  803fd0:	e6efc83a 	sub	r23,fp,sp
  803fd4:	d8c00b17 	ldw	r3,44(sp)
  803fd8:	4dd1883a 	add	r8,r9,r23
  803fdc:	922dc83a 	sub	r22,r18,r8
  803fe0:	18001626 	beq	r3,zero,80403c <___svfprintf_internal_r+0x338>
  803fe4:	48000a26 	beq	r9,zero,804010 <___svfprintf_internal_r+0x30c>
  803fe8:	00800b44 	movi	r2,45
  803fec:	d8800805 	stb	r2,32(sp)
  803ff0:	88800117 	ldw	r2,4(r17)
  803ff4:	01c00044 	movi	r7,1
  803ff8:	d9800804 	addi	r6,sp,32
  803ffc:	880b883a 	mov	r5,r17
  804000:	a009883a 	mov	r4,r20
  804004:	103ee83a 	callr	r2
  804008:	10004a1e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  80400c:	84000044 	addi	r16,r16,1
  804010:	0580070e 	bge	zero,r22,804030 <___svfprintf_internal_r+0x32c>
  804014:	b00f883a 	mov	r7,r22
  804018:	01800c04 	movi	r6,48
  80401c:	880b883a 	mov	r5,r17
  804020:	a009883a 	mov	r4,r20
  804024:	0803c980 	call	803c98 <print_repeat>
  804028:	1000421e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  80402c:	85a1883a 	add	r16,r16,r22
  804030:	e02d883a 	mov	r22,fp
  804034:	bf2fc83a 	sub	r23,r23,fp
  804038:	00002006 	br	8040bc <___svfprintf_internal_r+0x3b8>
  80403c:	0580090e 	bge	zero,r22,804064 <___svfprintf_internal_r+0x360>
  804040:	b00f883a 	mov	r7,r22
  804044:	01800804 	movi	r6,32
  804048:	880b883a 	mov	r5,r17
  80404c:	a009883a 	mov	r4,r20
  804050:	da401015 	stw	r9,64(sp)
  804054:	0803c980 	call	803c98 <print_repeat>
  804058:	da401017 	ldw	r9,64(sp)
  80405c:	1000351e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  804060:	85a1883a 	add	r16,r16,r22
  804064:	483ff226 	beq	r9,zero,804030 <__alt_data_end+0xff804030>
  804068:	00800b44 	movi	r2,45
  80406c:	d8800805 	stb	r2,32(sp)
  804070:	88800117 	ldw	r2,4(r17)
  804074:	01c00044 	movi	r7,1
  804078:	d9800804 	addi	r6,sp,32
  80407c:	880b883a 	mov	r5,r17
  804080:	a009883a 	mov	r4,r20
  804084:	103ee83a 	callr	r2
  804088:	10002a1e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  80408c:	84000044 	addi	r16,r16,1
  804090:	003fe706 	br	804030 <__alt_data_end+0xff804030>
  804094:	b5bfffc4 	addi	r22,r22,-1
  804098:	b0800003 	ldbu	r2,0(r22)
  80409c:	01c00044 	movi	r7,1
  8040a0:	d9800804 	addi	r6,sp,32
  8040a4:	d8800805 	stb	r2,32(sp)
  8040a8:	88800117 	ldw	r2,4(r17)
  8040ac:	880b883a 	mov	r5,r17
  8040b0:	a009883a 	mov	r4,r20
  8040b4:	103ee83a 	callr	r2
  8040b8:	10001e1e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  8040bc:	8585c83a 	sub	r2,r16,r22
  8040c0:	b5c9883a 	add	r4,r22,r23
  8040c4:	e085883a 	add	r2,fp,r2
  8040c8:	013ff216 	blt	zero,r4,804094 <__alt_data_end+0xff804094>
  8040cc:	1021883a 	mov	r16,r2
  8040d0:	dd800d17 	ldw	r22,52(sp)
  8040d4:	00004406 	br	8041e8 <___svfprintf_internal_r+0x4e4>
  8040d8:	00800044 	movi	r2,1
  8040dc:	1480080e 	bge	r2,r18,804100 <___svfprintf_internal_r+0x3fc>
  8040e0:	95ffffc4 	addi	r23,r18,-1
  8040e4:	b80f883a 	mov	r7,r23
  8040e8:	01800804 	movi	r6,32
  8040ec:	880b883a 	mov	r5,r17
  8040f0:	a009883a 	mov	r4,r20
  8040f4:	0803c980 	call	803c98 <print_repeat>
  8040f8:	10000e1e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  8040fc:	85e1883a 	add	r16,r16,r23
  804100:	b0800017 	ldw	r2,0(r22)
  804104:	01c00044 	movi	r7,1
  804108:	d80d883a 	mov	r6,sp
  80410c:	d8800005 	stb	r2,0(sp)
  804110:	88800117 	ldw	r2,4(r17)
  804114:	880b883a 	mov	r5,r17
  804118:	a009883a 	mov	r4,r20
  80411c:	b5c00104 	addi	r23,r22,4
  804120:	103ee83a 	callr	r2
  804124:	1000031e 	bne	r2,zero,804134 <___svfprintf_internal_r+0x430>
  804128:	84000044 	addi	r16,r16,1
  80412c:	b82d883a 	mov	r22,r23
  804130:	00002d06 	br	8041e8 <___svfprintf_internal_r+0x4e4>
  804134:	00bfffc4 	movi	r2,-1
  804138:	00003106 	br	804200 <___svfprintf_internal_r+0x4fc>
  80413c:	b5c00017 	ldw	r23,0(r22)
  804140:	b7000104 	addi	fp,r22,4
  804144:	b809883a 	mov	r4,r23
  804148:	08038740 	call	803874 <strlen>
  80414c:	9091c83a 	sub	r8,r18,r2
  804150:	102d883a 	mov	r22,r2
  804154:	0200090e 	bge	zero,r8,80417c <___svfprintf_internal_r+0x478>
  804158:	400f883a 	mov	r7,r8
  80415c:	01800804 	movi	r6,32
  804160:	880b883a 	mov	r5,r17
  804164:	a009883a 	mov	r4,r20
  804168:	da001015 	stw	r8,64(sp)
  80416c:	0803c980 	call	803c98 <print_repeat>
  804170:	da001017 	ldw	r8,64(sp)
  804174:	103fef1e 	bne	r2,zero,804134 <__alt_data_end+0xff804134>
  804178:	8221883a 	add	r16,r16,r8
  80417c:	88800117 	ldw	r2,4(r17)
  804180:	b00f883a 	mov	r7,r22
  804184:	b80d883a 	mov	r6,r23
  804188:	880b883a 	mov	r5,r17
  80418c:	a009883a 	mov	r4,r20
  804190:	103ee83a 	callr	r2
  804194:	103fe71e 	bne	r2,zero,804134 <__alt_data_end+0xff804134>
  804198:	85a1883a 	add	r16,r16,r22
  80419c:	e02d883a 	mov	r22,fp
  8041a0:	00001106 	br	8041e8 <___svfprintf_internal_r+0x4e4>
  8041a4:	00c00044 	movi	r3,1
  8041a8:	04ffffc4 	movi	r19,-1
  8041ac:	d8000e15 	stw	zero,56(sp)
  8041b0:	d8c00a15 	stw	r3,40(sp)
  8041b4:	05400284 	movi	r21,10
  8041b8:	9825883a 	mov	r18,r19
  8041bc:	d8000c15 	stw	zero,48(sp)
  8041c0:	d8000b15 	stw	zero,44(sp)
  8041c4:	182f883a 	mov	r23,r3
  8041c8:	00000806 	br	8041ec <___svfprintf_internal_r+0x4e8>
  8041cc:	ddc00b15 	stw	r23,44(sp)
  8041d0:	05c00084 	movi	r23,2
  8041d4:	00000506 	br	8041ec <___svfprintf_internal_r+0x4e8>
  8041d8:	00c00044 	movi	r3,1
  8041dc:	d8c00c15 	stw	r3,48(sp)
  8041e0:	05c000c4 	movi	r23,3
  8041e4:	00000106 	br	8041ec <___svfprintf_internal_r+0x4e8>
  8041e8:	002f883a 	mov	r23,zero
  8041ec:	d8c00f17 	ldw	r3,60(sp)
  8041f0:	18c00044 	addi	r3,r3,1
  8041f4:	d8c00f15 	stw	r3,60(sp)
  8041f8:	003edc06 	br	803d6c <__alt_data_end+0xff803d6c>
  8041fc:	8005883a 	mov	r2,r16
  804200:	dfc01a17 	ldw	ra,104(sp)
  804204:	df001917 	ldw	fp,100(sp)
  804208:	ddc01817 	ldw	r23,96(sp)
  80420c:	dd801717 	ldw	r22,92(sp)
  804210:	dd401617 	ldw	r21,88(sp)
  804214:	dd001517 	ldw	r20,84(sp)
  804218:	dcc01417 	ldw	r19,80(sp)
  80421c:	dc801317 	ldw	r18,76(sp)
  804220:	dc401217 	ldw	r17,72(sp)
  804224:	dc001117 	ldw	r16,68(sp)
  804228:	dec01b04 	addi	sp,sp,108
  80422c:	f800283a 	ret

00804230 <__vfprintf_internal_unused>:
  804230:	00802034 	movhi	r2,128
  804234:	1096b804 	addi	r2,r2,23264
  804238:	300f883a 	mov	r7,r6
  80423c:	280d883a 	mov	r6,r5
  804240:	200b883a 	mov	r5,r4
  804244:	11000017 	ldw	r4,0(r2)
  804248:	0803d041 	jmpi	803d04 <___svfprintf_internal_r>

0080424c <print_repeat>:
  80424c:	defffb04 	addi	sp,sp,-20
  804250:	dc800315 	stw	r18,12(sp)
  804254:	dc400215 	stw	r17,8(sp)
  804258:	dc000115 	stw	r16,4(sp)
  80425c:	dfc00415 	stw	ra,16(sp)
  804260:	2025883a 	mov	r18,r4
  804264:	2823883a 	mov	r17,r5
  804268:	d9800005 	stb	r6,0(sp)
  80426c:	3821883a 	mov	r16,r7
  804270:	04000a0e 	bge	zero,r16,80429c <print_repeat+0x50>
  804274:	88800117 	ldw	r2,4(r17)
  804278:	01c00044 	movi	r7,1
  80427c:	d80d883a 	mov	r6,sp
  804280:	880b883a 	mov	r5,r17
  804284:	9009883a 	mov	r4,r18
  804288:	103ee83a 	callr	r2
  80428c:	843fffc4 	addi	r16,r16,-1
  804290:	103ff726 	beq	r2,zero,804270 <__alt_data_end+0xff804270>
  804294:	00bfffc4 	movi	r2,-1
  804298:	00000106 	br	8042a0 <print_repeat+0x54>
  80429c:	0005883a 	mov	r2,zero
  8042a0:	dfc00417 	ldw	ra,16(sp)
  8042a4:	dc800317 	ldw	r18,12(sp)
  8042a8:	dc400217 	ldw	r17,8(sp)
  8042ac:	dc000117 	ldw	r16,4(sp)
  8042b0:	dec00504 	addi	sp,sp,20
  8042b4:	f800283a 	ret

008042b8 <___vfprintf_internal_r>:
  8042b8:	deffe504 	addi	sp,sp,-108
  8042bc:	d8c00804 	addi	r3,sp,32
  8042c0:	ddc01815 	stw	r23,96(sp)
  8042c4:	dd801715 	stw	r22,92(sp)
  8042c8:	dd401615 	stw	r21,88(sp)
  8042cc:	dd001515 	stw	r20,84(sp)
  8042d0:	dcc01415 	stw	r19,80(sp)
  8042d4:	dc801315 	stw	r18,76(sp)
  8042d8:	dc401215 	stw	r17,72(sp)
  8042dc:	dc001115 	stw	r16,68(sp)
  8042e0:	dfc01a15 	stw	ra,104(sp)
  8042e4:	df001915 	stw	fp,100(sp)
  8042e8:	2029883a 	mov	r20,r4
  8042ec:	2823883a 	mov	r17,r5
  8042f0:	382d883a 	mov	r22,r7
  8042f4:	d9800f15 	stw	r6,60(sp)
  8042f8:	0021883a 	mov	r16,zero
  8042fc:	d8000e15 	stw	zero,56(sp)
  804300:	d8000a15 	stw	zero,40(sp)
  804304:	002b883a 	mov	r21,zero
  804308:	0027883a 	mov	r19,zero
  80430c:	0025883a 	mov	r18,zero
  804310:	d8000c15 	stw	zero,48(sp)
  804314:	d8000b15 	stw	zero,44(sp)
  804318:	002f883a 	mov	r23,zero
  80431c:	d8c00915 	stw	r3,36(sp)
  804320:	d8c00f17 	ldw	r3,60(sp)
  804324:	19000003 	ldbu	r4,0(r3)
  804328:	20803fcc 	andi	r2,r4,255
  80432c:	1080201c 	xori	r2,r2,128
  804330:	10bfe004 	addi	r2,r2,-128
  804334:	10011e26 	beq	r2,zero,8047b0 <___vfprintf_internal_r+0x4f8>
  804338:	00c00044 	movi	r3,1
  80433c:	b8c01426 	beq	r23,r3,804390 <___vfprintf_internal_r+0xd8>
  804340:	1dc00216 	blt	r3,r23,80434c <___vfprintf_internal_r+0x94>
  804344:	b8000626 	beq	r23,zero,804360 <___vfprintf_internal_r+0xa8>
  804348:	00011506 	br	8047a0 <___vfprintf_internal_r+0x4e8>
  80434c:	01400084 	movi	r5,2
  804350:	b9401d26 	beq	r23,r5,8043c8 <___vfprintf_internal_r+0x110>
  804354:	014000c4 	movi	r5,3
  804358:	b9402b26 	beq	r23,r5,804408 <___vfprintf_internal_r+0x150>
  80435c:	00011006 	br	8047a0 <___vfprintf_internal_r+0x4e8>
  804360:	01400944 	movi	r5,37
  804364:	1140fc26 	beq	r2,r5,804758 <___vfprintf_internal_r+0x4a0>
  804368:	88800117 	ldw	r2,4(r17)
  80436c:	d9000005 	stb	r4,0(sp)
  804370:	01c00044 	movi	r7,1
  804374:	d80d883a 	mov	r6,sp
  804378:	880b883a 	mov	r5,r17
  80437c:	a009883a 	mov	r4,r20
  804380:	103ee83a 	callr	r2
  804384:	1000d81e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  804388:	84000044 	addi	r16,r16,1
  80438c:	00010406 	br	8047a0 <___vfprintf_internal_r+0x4e8>
  804390:	01400c04 	movi	r5,48
  804394:	1140fa26 	beq	r2,r5,804780 <___vfprintf_internal_r+0x4c8>
  804398:	01400944 	movi	r5,37
  80439c:	11400a1e 	bne	r2,r5,8043c8 <___vfprintf_internal_r+0x110>
  8043a0:	d8800005 	stb	r2,0(sp)
  8043a4:	88800117 	ldw	r2,4(r17)
  8043a8:	b80f883a 	mov	r7,r23
  8043ac:	d80d883a 	mov	r6,sp
  8043b0:	880b883a 	mov	r5,r17
  8043b4:	a009883a 	mov	r4,r20
  8043b8:	103ee83a 	callr	r2
  8043bc:	1000ca1e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  8043c0:	84000044 	addi	r16,r16,1
  8043c4:	0000f506 	br	80479c <___vfprintf_internal_r+0x4e4>
  8043c8:	25fff404 	addi	r23,r4,-48
  8043cc:	bdc03fcc 	andi	r23,r23,255
  8043d0:	00c00244 	movi	r3,9
  8043d4:	1dc00936 	bltu	r3,r23,8043fc <___vfprintf_internal_r+0x144>
  8043d8:	00bfffc4 	movi	r2,-1
  8043dc:	90800426 	beq	r18,r2,8043f0 <___vfprintf_internal_r+0x138>
  8043e0:	01400284 	movi	r5,10
  8043e4:	9009883a 	mov	r4,r18
  8043e8:	08017e40 	call	8017e4 <__mulsi3>
  8043ec:	00000106 	br	8043f4 <___vfprintf_internal_r+0x13c>
  8043f0:	0005883a 	mov	r2,zero
  8043f4:	b8a5883a 	add	r18,r23,r2
  8043f8:	0000e206 	br	804784 <___vfprintf_internal_r+0x4cc>
  8043fc:	01400b84 	movi	r5,46
  804400:	1140e426 	beq	r2,r5,804794 <___vfprintf_internal_r+0x4dc>
  804404:	05c00084 	movi	r23,2
  804408:	213ff404 	addi	r4,r4,-48
  80440c:	27003fcc 	andi	fp,r4,255
  804410:	00c00244 	movi	r3,9
  804414:	1f000936 	bltu	r3,fp,80443c <___vfprintf_internal_r+0x184>
  804418:	00bfffc4 	movi	r2,-1
  80441c:	98800426 	beq	r19,r2,804430 <___vfprintf_internal_r+0x178>
  804420:	01400284 	movi	r5,10
  804424:	9809883a 	mov	r4,r19
  804428:	08017e40 	call	8017e4 <__mulsi3>
  80442c:	00000106 	br	804434 <___vfprintf_internal_r+0x17c>
  804430:	0005883a 	mov	r2,zero
  804434:	e0a7883a 	add	r19,fp,r2
  804438:	0000d906 	br	8047a0 <___vfprintf_internal_r+0x4e8>
  80443c:	00c01b04 	movi	r3,108
  804440:	10c0d226 	beq	r2,r3,80478c <___vfprintf_internal_r+0x4d4>
  804444:	013fffc4 	movi	r4,-1
  804448:	99000226 	beq	r19,r4,804454 <___vfprintf_internal_r+0x19c>
  80444c:	d8000b15 	stw	zero,44(sp)
  804450:	00000106 	br	804458 <___vfprintf_internal_r+0x1a0>
  804454:	04c00044 	movi	r19,1
  804458:	01001a44 	movi	r4,105
  80445c:	11001626 	beq	r2,r4,8044b8 <___vfprintf_internal_r+0x200>
  804460:	20800916 	blt	r4,r2,804488 <___vfprintf_internal_r+0x1d0>
  804464:	010018c4 	movi	r4,99
  804468:	11008826 	beq	r2,r4,80468c <___vfprintf_internal_r+0x3d4>
  80446c:	01001904 	movi	r4,100
  804470:	11001126 	beq	r2,r4,8044b8 <___vfprintf_internal_r+0x200>
  804474:	01001604 	movi	r4,88
  804478:	1100c81e 	bne	r2,r4,80479c <___vfprintf_internal_r+0x4e4>
  80447c:	00c00044 	movi	r3,1
  804480:	d8c00e15 	stw	r3,56(sp)
  804484:	00001506 	br	8044dc <___vfprintf_internal_r+0x224>
  804488:	01001cc4 	movi	r4,115
  80448c:	11009826 	beq	r2,r4,8046f0 <___vfprintf_internal_r+0x438>
  804490:	20800416 	blt	r4,r2,8044a4 <___vfprintf_internal_r+0x1ec>
  804494:	01001bc4 	movi	r4,111
  804498:	1100c01e 	bne	r2,r4,80479c <___vfprintf_internal_r+0x4e4>
  80449c:	05400204 	movi	r21,8
  8044a0:	00000f06 	br	8044e0 <___vfprintf_internal_r+0x228>
  8044a4:	01001d44 	movi	r4,117
  8044a8:	11000d26 	beq	r2,r4,8044e0 <___vfprintf_internal_r+0x228>
  8044ac:	01001e04 	movi	r4,120
  8044b0:	11000a26 	beq	r2,r4,8044dc <___vfprintf_internal_r+0x224>
  8044b4:	0000b906 	br	80479c <___vfprintf_internal_r+0x4e4>
  8044b8:	d8c00a17 	ldw	r3,40(sp)
  8044bc:	b7000104 	addi	fp,r22,4
  8044c0:	18000726 	beq	r3,zero,8044e0 <___vfprintf_internal_r+0x228>
  8044c4:	df000d15 	stw	fp,52(sp)
  8044c8:	b5c00017 	ldw	r23,0(r22)
  8044cc:	b800080e 	bge	r23,zero,8044f0 <___vfprintf_internal_r+0x238>
  8044d0:	05efc83a 	sub	r23,zero,r23
  8044d4:	02400044 	movi	r9,1
  8044d8:	00000606 	br	8044f4 <___vfprintf_internal_r+0x23c>
  8044dc:	05400404 	movi	r21,16
  8044e0:	b0c00104 	addi	r3,r22,4
  8044e4:	d8c00d15 	stw	r3,52(sp)
  8044e8:	b5c00017 	ldw	r23,0(r22)
  8044ec:	d8000a15 	stw	zero,40(sp)
  8044f0:	0013883a 	mov	r9,zero
  8044f4:	d839883a 	mov	fp,sp
  8044f8:	b8001726 	beq	r23,zero,804558 <___vfprintf_internal_r+0x2a0>
  8044fc:	a80b883a 	mov	r5,r21
  804500:	b809883a 	mov	r4,r23
  804504:	da401015 	stw	r9,64(sp)
  804508:	08017280 	call	801728 <__udivsi3>
  80450c:	a80b883a 	mov	r5,r21
  804510:	1009883a 	mov	r4,r2
  804514:	102d883a 	mov	r22,r2
  804518:	08017e40 	call	8017e4 <__mulsi3>
  80451c:	b885c83a 	sub	r2,r23,r2
  804520:	00c00244 	movi	r3,9
  804524:	da401017 	ldw	r9,64(sp)
  804528:	18800216 	blt	r3,r2,804534 <___vfprintf_internal_r+0x27c>
  80452c:	10800c04 	addi	r2,r2,48
  804530:	00000506 	br	804548 <___vfprintf_internal_r+0x290>
  804534:	d8c00e17 	ldw	r3,56(sp)
  804538:	18000226 	beq	r3,zero,804544 <___vfprintf_internal_r+0x28c>
  80453c:	10800dc4 	addi	r2,r2,55
  804540:	00000106 	br	804548 <___vfprintf_internal_r+0x290>
  804544:	108015c4 	addi	r2,r2,87
  804548:	e0800005 	stb	r2,0(fp)
  80454c:	b02f883a 	mov	r23,r22
  804550:	e7000044 	addi	fp,fp,1
  804554:	003fe806 	br	8044f8 <__alt_data_end+0xff8044f8>
  804558:	e6efc83a 	sub	r23,fp,sp
  80455c:	9dc5c83a 	sub	r2,r19,r23
  804560:	0080090e 	bge	zero,r2,804588 <___vfprintf_internal_r+0x2d0>
  804564:	e085883a 	add	r2,fp,r2
  804568:	01400c04 	movi	r5,48
  80456c:	d8c00917 	ldw	r3,36(sp)
  804570:	e009883a 	mov	r4,fp
  804574:	e0c0032e 	bgeu	fp,r3,804584 <___vfprintf_internal_r+0x2cc>
  804578:	e7000044 	addi	fp,fp,1
  80457c:	21400005 	stb	r5,0(r4)
  804580:	e0bffa1e 	bne	fp,r2,80456c <__alt_data_end+0xff80456c>
  804584:	e6efc83a 	sub	r23,fp,sp
  804588:	d8c00b17 	ldw	r3,44(sp)
  80458c:	4dd1883a 	add	r8,r9,r23
  804590:	922dc83a 	sub	r22,r18,r8
  804594:	18001626 	beq	r3,zero,8045f0 <___vfprintf_internal_r+0x338>
  804598:	48000a26 	beq	r9,zero,8045c4 <___vfprintf_internal_r+0x30c>
  80459c:	00800b44 	movi	r2,45
  8045a0:	d8800805 	stb	r2,32(sp)
  8045a4:	88800117 	ldw	r2,4(r17)
  8045a8:	01c00044 	movi	r7,1
  8045ac:	d9800804 	addi	r6,sp,32
  8045b0:	880b883a 	mov	r5,r17
  8045b4:	a009883a 	mov	r4,r20
  8045b8:	103ee83a 	callr	r2
  8045bc:	10004a1e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  8045c0:	84000044 	addi	r16,r16,1
  8045c4:	0580070e 	bge	zero,r22,8045e4 <___vfprintf_internal_r+0x32c>
  8045c8:	b00f883a 	mov	r7,r22
  8045cc:	01800c04 	movi	r6,48
  8045d0:	880b883a 	mov	r5,r17
  8045d4:	a009883a 	mov	r4,r20
  8045d8:	080424c0 	call	80424c <print_repeat>
  8045dc:	1000421e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  8045e0:	85a1883a 	add	r16,r16,r22
  8045e4:	e02d883a 	mov	r22,fp
  8045e8:	bf2fc83a 	sub	r23,r23,fp
  8045ec:	00002006 	br	804670 <___vfprintf_internal_r+0x3b8>
  8045f0:	0580090e 	bge	zero,r22,804618 <___vfprintf_internal_r+0x360>
  8045f4:	b00f883a 	mov	r7,r22
  8045f8:	01800804 	movi	r6,32
  8045fc:	880b883a 	mov	r5,r17
  804600:	a009883a 	mov	r4,r20
  804604:	da401015 	stw	r9,64(sp)
  804608:	080424c0 	call	80424c <print_repeat>
  80460c:	da401017 	ldw	r9,64(sp)
  804610:	1000351e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  804614:	85a1883a 	add	r16,r16,r22
  804618:	483ff226 	beq	r9,zero,8045e4 <__alt_data_end+0xff8045e4>
  80461c:	00800b44 	movi	r2,45
  804620:	d8800805 	stb	r2,32(sp)
  804624:	88800117 	ldw	r2,4(r17)
  804628:	01c00044 	movi	r7,1
  80462c:	d9800804 	addi	r6,sp,32
  804630:	880b883a 	mov	r5,r17
  804634:	a009883a 	mov	r4,r20
  804638:	103ee83a 	callr	r2
  80463c:	10002a1e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  804640:	84000044 	addi	r16,r16,1
  804644:	003fe706 	br	8045e4 <__alt_data_end+0xff8045e4>
  804648:	b5bfffc4 	addi	r22,r22,-1
  80464c:	b0800003 	ldbu	r2,0(r22)
  804650:	01c00044 	movi	r7,1
  804654:	d9800804 	addi	r6,sp,32
  804658:	d8800805 	stb	r2,32(sp)
  80465c:	88800117 	ldw	r2,4(r17)
  804660:	880b883a 	mov	r5,r17
  804664:	a009883a 	mov	r4,r20
  804668:	103ee83a 	callr	r2
  80466c:	10001e1e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  804670:	8585c83a 	sub	r2,r16,r22
  804674:	b5c9883a 	add	r4,r22,r23
  804678:	e085883a 	add	r2,fp,r2
  80467c:	013ff216 	blt	zero,r4,804648 <__alt_data_end+0xff804648>
  804680:	1021883a 	mov	r16,r2
  804684:	dd800d17 	ldw	r22,52(sp)
  804688:	00004406 	br	80479c <___vfprintf_internal_r+0x4e4>
  80468c:	00800044 	movi	r2,1
  804690:	1480080e 	bge	r2,r18,8046b4 <___vfprintf_internal_r+0x3fc>
  804694:	95ffffc4 	addi	r23,r18,-1
  804698:	b80f883a 	mov	r7,r23
  80469c:	01800804 	movi	r6,32
  8046a0:	880b883a 	mov	r5,r17
  8046a4:	a009883a 	mov	r4,r20
  8046a8:	080424c0 	call	80424c <print_repeat>
  8046ac:	10000e1e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  8046b0:	85e1883a 	add	r16,r16,r23
  8046b4:	b0800017 	ldw	r2,0(r22)
  8046b8:	01c00044 	movi	r7,1
  8046bc:	d80d883a 	mov	r6,sp
  8046c0:	d8800005 	stb	r2,0(sp)
  8046c4:	88800117 	ldw	r2,4(r17)
  8046c8:	880b883a 	mov	r5,r17
  8046cc:	a009883a 	mov	r4,r20
  8046d0:	b5c00104 	addi	r23,r22,4
  8046d4:	103ee83a 	callr	r2
  8046d8:	1000031e 	bne	r2,zero,8046e8 <___vfprintf_internal_r+0x430>
  8046dc:	84000044 	addi	r16,r16,1
  8046e0:	b82d883a 	mov	r22,r23
  8046e4:	00002d06 	br	80479c <___vfprintf_internal_r+0x4e4>
  8046e8:	00bfffc4 	movi	r2,-1
  8046ec:	00003106 	br	8047b4 <___vfprintf_internal_r+0x4fc>
  8046f0:	b5c00017 	ldw	r23,0(r22)
  8046f4:	b7000104 	addi	fp,r22,4
  8046f8:	b809883a 	mov	r4,r23
  8046fc:	08038740 	call	803874 <strlen>
  804700:	9091c83a 	sub	r8,r18,r2
  804704:	102d883a 	mov	r22,r2
  804708:	0200090e 	bge	zero,r8,804730 <___vfprintf_internal_r+0x478>
  80470c:	400f883a 	mov	r7,r8
  804710:	01800804 	movi	r6,32
  804714:	880b883a 	mov	r5,r17
  804718:	a009883a 	mov	r4,r20
  80471c:	da001015 	stw	r8,64(sp)
  804720:	080424c0 	call	80424c <print_repeat>
  804724:	da001017 	ldw	r8,64(sp)
  804728:	103fef1e 	bne	r2,zero,8046e8 <__alt_data_end+0xff8046e8>
  80472c:	8221883a 	add	r16,r16,r8
  804730:	88800117 	ldw	r2,4(r17)
  804734:	b00f883a 	mov	r7,r22
  804738:	b80d883a 	mov	r6,r23
  80473c:	880b883a 	mov	r5,r17
  804740:	a009883a 	mov	r4,r20
  804744:	103ee83a 	callr	r2
  804748:	103fe71e 	bne	r2,zero,8046e8 <__alt_data_end+0xff8046e8>
  80474c:	85a1883a 	add	r16,r16,r22
  804750:	e02d883a 	mov	r22,fp
  804754:	00001106 	br	80479c <___vfprintf_internal_r+0x4e4>
  804758:	00c00044 	movi	r3,1
  80475c:	04ffffc4 	movi	r19,-1
  804760:	d8000e15 	stw	zero,56(sp)
  804764:	d8c00a15 	stw	r3,40(sp)
  804768:	05400284 	movi	r21,10
  80476c:	9825883a 	mov	r18,r19
  804770:	d8000c15 	stw	zero,48(sp)
  804774:	d8000b15 	stw	zero,44(sp)
  804778:	182f883a 	mov	r23,r3
  80477c:	00000806 	br	8047a0 <___vfprintf_internal_r+0x4e8>
  804780:	ddc00b15 	stw	r23,44(sp)
  804784:	05c00084 	movi	r23,2
  804788:	00000506 	br	8047a0 <___vfprintf_internal_r+0x4e8>
  80478c:	00c00044 	movi	r3,1
  804790:	d8c00c15 	stw	r3,48(sp)
  804794:	05c000c4 	movi	r23,3
  804798:	00000106 	br	8047a0 <___vfprintf_internal_r+0x4e8>
  80479c:	002f883a 	mov	r23,zero
  8047a0:	d8c00f17 	ldw	r3,60(sp)
  8047a4:	18c00044 	addi	r3,r3,1
  8047a8:	d8c00f15 	stw	r3,60(sp)
  8047ac:	003edc06 	br	804320 <__alt_data_end+0xff804320>
  8047b0:	8005883a 	mov	r2,r16
  8047b4:	dfc01a17 	ldw	ra,104(sp)
  8047b8:	df001917 	ldw	fp,100(sp)
  8047bc:	ddc01817 	ldw	r23,96(sp)
  8047c0:	dd801717 	ldw	r22,92(sp)
  8047c4:	dd401617 	ldw	r21,88(sp)
  8047c8:	dd001517 	ldw	r20,84(sp)
  8047cc:	dcc01417 	ldw	r19,80(sp)
  8047d0:	dc801317 	ldw	r18,76(sp)
  8047d4:	dc401217 	ldw	r17,72(sp)
  8047d8:	dc001117 	ldw	r16,68(sp)
  8047dc:	dec01b04 	addi	sp,sp,108
  8047e0:	f800283a 	ret

008047e4 <__vfprintf_internal>:
  8047e4:	00802034 	movhi	r2,128
  8047e8:	1096b804 	addi	r2,r2,23264
  8047ec:	300f883a 	mov	r7,r6
  8047f0:	280d883a 	mov	r6,r5
  8047f4:	200b883a 	mov	r5,r4
  8047f8:	11000017 	ldw	r4,0(r2)
  8047fc:	08042b81 	jmpi	8042b8 <___vfprintf_internal_r>

00804800 <__sfvwrite_small_dev>:
  804800:	2880000b 	ldhu	r2,0(r5)
  804804:	1080020c 	andi	r2,r2,8
  804808:	10002126 	beq	r2,zero,804890 <__sfvwrite_small_dev+0x90>
  80480c:	2880008f 	ldh	r2,2(r5)
  804810:	defffa04 	addi	sp,sp,-24
  804814:	dc000015 	stw	r16,0(sp)
  804818:	dfc00515 	stw	ra,20(sp)
  80481c:	dd000415 	stw	r20,16(sp)
  804820:	dcc00315 	stw	r19,12(sp)
  804824:	dc800215 	stw	r18,8(sp)
  804828:	dc400115 	stw	r17,4(sp)
  80482c:	2821883a 	mov	r16,r5
  804830:	10001216 	blt	r2,zero,80487c <__sfvwrite_small_dev+0x7c>
  804834:	2027883a 	mov	r19,r4
  804838:	3025883a 	mov	r18,r6
  80483c:	3823883a 	mov	r17,r7
  804840:	05010004 	movi	r20,1024
  804844:	04400b0e 	bge	zero,r17,804874 <__sfvwrite_small_dev+0x74>
  804848:	880f883a 	mov	r7,r17
  80484c:	a440010e 	bge	r20,r17,804854 <__sfvwrite_small_dev+0x54>
  804850:	01c10004 	movi	r7,1024
  804854:	8140008f 	ldh	r5,2(r16)
  804858:	900d883a 	mov	r6,r18
  80485c:	9809883a 	mov	r4,r19
  804860:	08049c00 	call	8049c0 <_write_r>
  804864:	0080050e 	bge	zero,r2,80487c <__sfvwrite_small_dev+0x7c>
  804868:	88a3c83a 	sub	r17,r17,r2
  80486c:	90a5883a 	add	r18,r18,r2
  804870:	003ff406 	br	804844 <__alt_data_end+0xff804844>
  804874:	0005883a 	mov	r2,zero
  804878:	00000706 	br	804898 <__sfvwrite_small_dev+0x98>
  80487c:	8080000b 	ldhu	r2,0(r16)
  804880:	10801014 	ori	r2,r2,64
  804884:	8080000d 	sth	r2,0(r16)
  804888:	00bfffc4 	movi	r2,-1
  80488c:	00000206 	br	804898 <__sfvwrite_small_dev+0x98>
  804890:	00bfffc4 	movi	r2,-1
  804894:	f800283a 	ret
  804898:	dfc00517 	ldw	ra,20(sp)
  80489c:	dd000417 	ldw	r20,16(sp)
  8048a0:	dcc00317 	ldw	r19,12(sp)
  8048a4:	dc800217 	ldw	r18,8(sp)
  8048a8:	dc400117 	ldw	r17,4(sp)
  8048ac:	dc000017 	ldw	r16,0(sp)
  8048b0:	dec00604 	addi	sp,sp,24
  8048b4:	f800283a 	ret

008048b8 <__sfvwrite_small_str>:
  8048b8:	2880000b 	ldhu	r2,0(r5)
  8048bc:	10c0020c 	andi	r3,r2,8
  8048c0:	18002026 	beq	r3,zero,804944 <__sfvwrite_small_str+0x8c>
  8048c4:	28c0008f 	ldh	r3,2(r5)
  8048c8:	defffd04 	addi	sp,sp,-12
  8048cc:	dc000015 	stw	r16,0(sp)
  8048d0:	dfc00215 	stw	ra,8(sp)
  8048d4:	dc400115 	stw	r17,4(sp)
  8048d8:	2821883a 	mov	r16,r5
  8048dc:	1800150e 	bge	r3,zero,804934 <__sfvwrite_small_str+0x7c>
  8048e0:	10c0800c 	andi	r3,r2,512
  8048e4:	18001326 	beq	r3,zero,804934 <__sfvwrite_small_str+0x7c>
  8048e8:	2c400517 	ldw	r17,20(r5)
  8048ec:	89c0030e 	bge	r17,r7,8048fc <__sfvwrite_small_str+0x44>
  8048f0:	10c0200c 	andi	r3,r2,128
  8048f4:	18000326 	beq	r3,zero,804904 <__sfvwrite_small_str+0x4c>
  8048f8:	00000e06 	br	804934 <__sfvwrite_small_str+0x7c>
  8048fc:	3c40010e 	bge	r7,r17,804904 <__sfvwrite_small_str+0x4c>
  804900:	3823883a 	mov	r17,r7
  804904:	81000417 	ldw	r4,16(r16)
  804908:	300b883a 	mov	r5,r6
  80490c:	880d883a 	mov	r6,r17
  804910:	08049600 	call	804960 <memmove>
  804914:	80800517 	ldw	r2,20(r16)
  804918:	1445c83a 	sub	r2,r2,r17
  80491c:	80800515 	stw	r2,20(r16)
  804920:	80800417 	ldw	r2,16(r16)
  804924:	1463883a 	add	r17,r2,r17
  804928:	84400415 	stw	r17,16(r16)
  80492c:	0005883a 	mov	r2,zero
  804930:	00000606 	br	80494c <__sfvwrite_small_str+0x94>
  804934:	10801014 	ori	r2,r2,64
  804938:	8080000d 	sth	r2,0(r16)
  80493c:	00bfffc4 	movi	r2,-1
  804940:	00000206 	br	80494c <__sfvwrite_small_str+0x94>
  804944:	00bfffc4 	movi	r2,-1
  804948:	f800283a 	ret
  80494c:	dfc00217 	ldw	ra,8(sp)
  804950:	dc400117 	ldw	r17,4(sp)
  804954:	dc000017 	ldw	r16,0(sp)
  804958:	dec00304 	addi	sp,sp,12
  80495c:	f800283a 	ret

00804960 <memmove>:
  804960:	2005883a 	mov	r2,r4
  804964:	218f883a 	add	r7,r4,r6
  804968:	29000236 	bltu	r5,r4,804974 <memmove+0x14>
  80496c:	1007883a 	mov	r3,r2
  804970:	00000c06 	br	8049a4 <memmove+0x44>
  804974:	2987883a 	add	r3,r5,r6
  804978:	20fffc2e 	bgeu	r4,r3,80496c <__alt_data_end+0xff80496c>
  80497c:	380b883a 	mov	r5,r7
  804980:	30cdc83a 	sub	r6,r6,r3
  804984:	1989883a 	add	r4,r3,r6
  804988:	20000526 	beq	r4,zero,8049a0 <memmove+0x40>
  80498c:	18ffffc4 	addi	r3,r3,-1
  804990:	19000003 	ldbu	r4,0(r3)
  804994:	297fffc4 	addi	r5,r5,-1
  804998:	29000005 	stb	r4,0(r5)
  80499c:	003ff906 	br	804984 <__alt_data_end+0xff804984>
  8049a0:	f800283a 	ret
  8049a4:	19c00526 	beq	r3,r7,8049bc <memmove+0x5c>
  8049a8:	29000003 	ldbu	r4,0(r5)
  8049ac:	18c00044 	addi	r3,r3,1
  8049b0:	29400044 	addi	r5,r5,1
  8049b4:	193fffc5 	stb	r4,-1(r3)
  8049b8:	003ffa06 	br	8049a4 <__alt_data_end+0xff8049a4>
  8049bc:	f800283a 	ret

008049c0 <_write_r>:
  8049c0:	defffd04 	addi	sp,sp,-12
  8049c4:	dc000015 	stw	r16,0(sp)
  8049c8:	04002034 	movhi	r16,128
  8049cc:	dc400115 	stw	r17,4(sp)
  8049d0:	84179f04 	addi	r16,r16,24188
  8049d4:	2023883a 	mov	r17,r4
  8049d8:	2809883a 	mov	r4,r5
  8049dc:	300b883a 	mov	r5,r6
  8049e0:	380d883a 	mov	r6,r7
  8049e4:	dfc00215 	stw	ra,8(sp)
  8049e8:	80000015 	stw	zero,0(r16)
  8049ec:	0804e000 	call	804e00 <write>
  8049f0:	00ffffc4 	movi	r3,-1
  8049f4:	10c0031e 	bne	r2,r3,804a04 <_write_r+0x44>
  8049f8:	80c00017 	ldw	r3,0(r16)
  8049fc:	18000126 	beq	r3,zero,804a04 <_write_r+0x44>
  804a00:	88c00015 	stw	r3,0(r17)
  804a04:	dfc00217 	ldw	ra,8(sp)
  804a08:	dc400117 	ldw	r17,4(sp)
  804a0c:	dc000017 	ldw	r16,0(sp)
  804a10:	dec00304 	addi	sp,sp,12
  804a14:	f800283a 	ret

00804a18 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804a18:	00802034 	movhi	r2,128
  804a1c:	10969e04 	addi	r2,r2,23160
  804a20:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804a24:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804a28:	01002034 	movhi	r4,128
  804a2c:	01800044 	movi	r6,1
  804a30:	d80b883a 	mov	r5,sp
  804a34:	2116bb04 	addi	r4,r4,23276
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804a38:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804a3c:	0804ea80 	call	804ea8 <altera_avalon_jtag_uart_read>
  804a40:	0080020e 	bge	zero,r2,804a4c <alt_getchar+0x34>
        return -1;
    }
    return c;
  804a44:	d8800007 	ldb	r2,0(sp)
  804a48:	00000106 	br	804a50 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  804a4c:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  804a50:	dfc00117 	ldw	ra,4(sp)
  804a54:	dec00204 	addi	sp,sp,8
  804a58:	f800283a 	ret

00804a5c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  804a5c:	008007c4 	movi	r2,31
  804a60:	11002136 	bltu	r2,r4,804ae8 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a64:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a68:	00ffff84 	movi	r3,-2
  804a6c:	38c4703a 	and	r2,r7,r3
  804a70:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  804a74:	200490fa 	slli	r2,r4,3
  804a78:	02002034 	movhi	r8,128
  804a7c:	4217aa04 	addi	r8,r8,24232
  804a80:	4085883a 	add	r2,r8,r2
  804a84:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
  804a88:	11400115 	stw	r5,4(r2)
  804a8c:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  804a90:	30000726 	beq	r6,zero,804ab0 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a94:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a98:	28c6703a 	and	r3,r5,r3
  804a9c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  804aa0:	d0e0ec17 	ldw	r3,-31824(gp)
  804aa4:	1104983a 	sll	r2,r2,r4
  804aa8:	10c4b03a 	or	r2,r2,r3
  804aac:	00000706 	br	804acc <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ab0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ab4:	28c6703a 	and	r3,r5,r3
  804ab8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  804abc:	1104983a 	sll	r2,r2,r4
  804ac0:	d0e0ec17 	ldw	r3,-31824(gp)
  804ac4:	0084303a 	nor	r2,zero,r2
  804ac8:	10c4703a 	and	r2,r2,r3
  804acc:	d0a0ec15 	stw	r2,-31824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804ad0:	d0a0ec17 	ldw	r2,-31824(gp)
  804ad4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ad8:	2801703a 	wrctl	status,r5
  804adc:	3801703a 	wrctl	status,r7
  804ae0:	0005883a 	mov	r2,zero
  804ae4:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  804ae8:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  804aec:	f800283a 	ret

00804af0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  804af0:	deffff04 	addi	sp,sp,-4
  804af4:	01002034 	movhi	r4,128
  804af8:	01402034 	movhi	r5,128
  804afc:	dfc00015 	stw	ra,0(sp)
  804b00:	2115f904 	addi	r4,r4,22500
  804b04:	2956c204 	addi	r5,r5,23304

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804b08:	2140061e 	bne	r4,r5,804b24 <alt_load+0x34>
  804b0c:	01002034 	movhi	r4,128
  804b10:	01402034 	movhi	r5,128
  804b14:	21000804 	addi	r4,r4,32
  804b18:	29400804 	addi	r5,r5,32
  804b1c:	2140121e 	bne	r4,r5,804b68 <alt_load+0x78>
  804b20:	00000b06 	br	804b50 <alt_load+0x60>
  804b24:	00c02034 	movhi	r3,128
  804b28:	18d6c204 	addi	r3,r3,23304
  804b2c:	1907c83a 	sub	r3,r3,r4
  804b30:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804b34:	10fff526 	beq	r2,r3,804b0c <__alt_data_end+0xff804b0c>
    {
      *to++ = *from++;
  804b38:	114f883a 	add	r7,r2,r5
  804b3c:	39c00017 	ldw	r7,0(r7)
  804b40:	110d883a 	add	r6,r2,r4
  804b44:	10800104 	addi	r2,r2,4
  804b48:	31c00015 	stw	r7,0(r6)
  804b4c:	003ff906 	br	804b34 <__alt_data_end+0xff804b34>
  804b50:	01002034 	movhi	r4,128
  804b54:	01402034 	movhi	r5,128
  804b58:	2114b304 	addi	r4,r4,21196
  804b5c:	2954b304 	addi	r5,r5,21196

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804b60:	2140101e 	bne	r4,r5,804ba4 <alt_load+0xb4>
  804b64:	00000b06 	br	804b94 <alt_load+0xa4>
  804b68:	00c02034 	movhi	r3,128
  804b6c:	18c06004 	addi	r3,r3,384
  804b70:	1907c83a 	sub	r3,r3,r4
  804b74:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804b78:	10fff526 	beq	r2,r3,804b50 <__alt_data_end+0xff804b50>
    {
      *to++ = *from++;
  804b7c:	114f883a 	add	r7,r2,r5
  804b80:	39c00017 	ldw	r7,0(r7)
  804b84:	110d883a 	add	r6,r2,r4
  804b88:	10800104 	addi	r2,r2,4
  804b8c:	31c00015 	stw	r7,0(r6)
  804b90:	003ff906 	br	804b78 <__alt_data_end+0xff804b78>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804b94:	08051300 	call	805130 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  804b98:	dfc00017 	ldw	ra,0(sp)
  804b9c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  804ba0:	080521c1 	jmpi	80521c <alt_icache_flush_all>
  804ba4:	00c02034 	movhi	r3,128
  804ba8:	18d5f904 	addi	r3,r3,22500
  804bac:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804bb0:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804bb4:	18bff726 	beq	r3,r2,804b94 <__alt_data_end+0xff804b94>
    {
      *to++ = *from++;
  804bb8:	114f883a 	add	r7,r2,r5
  804bbc:	39c00017 	ldw	r7,0(r7)
  804bc0:	110d883a 	add	r6,r2,r4
  804bc4:	10800104 	addi	r2,r2,4
  804bc8:	31c00015 	stw	r7,0(r6)
  804bcc:	003ff906 	br	804bb4 <__alt_data_end+0xff804bb4>

00804bd0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804bd0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804bd4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804bd8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804bdc:	0804e600 	call	804e60 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  804be0:	0804e800 	call	804e80 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804be4:	d1a0ed17 	ldw	r6,-31820(gp)
  804be8:	d160ee17 	ldw	r5,-31816(gp)
  804bec:	d120ef17 	ldw	r4,-31812(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  804bf0:	dfc00017 	ldw	ra,0(sp)
  804bf4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804bf8:	0800e601 	jmpi	800e60 <main>

00804bfc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  804bfc:	defff204 	addi	sp,sp,-56
  804c00:	2005883a 	mov	r2,r4
  804c04:	dfc00a15 	stw	ra,40(sp)
  804c08:	df000915 	stw	fp,36(sp)
  804c0c:	ddc00815 	stw	r23,32(sp)
  804c10:	dd800715 	stw	r22,28(sp)
  804c14:	dd400615 	stw	r21,24(sp)
  804c18:	dd000515 	stw	r20,20(sp)
  804c1c:	dcc00415 	stw	r19,16(sp)
  804c20:	dc800315 	stw	r18,12(sp)
  804c24:	dc400215 	stw	r17,8(sp)
  804c28:	dc000115 	stw	r16,4(sp)
  804c2c:	d9400b15 	stw	r5,44(sp)
  804c30:	d9800c15 	stw	r6,48(sp)
  804c34:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804c38:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  804c3c:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  804c40:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  804c44:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804c48:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804c4c:	11000007 	ldb	r4,0(r2)
  804c50:	20003a26 	beq	r4,zero,804d3c <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804c54:	24000226 	beq	r4,r16,804c60 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804c58:	14400044 	addi	r17,r2,1
  804c5c:	00001406 	br	804cb0 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  804c60:	14400084 	addi	r17,r2,2
  804c64:	10800047 	ldb	r2,1(r2)
  804c68:	10003426 	beq	r2,zero,804d3c <alt_printf+0x140>
            {
                if (c == '%')
  804c6c:	1400021e 	bne	r2,r16,804c78 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  804c70:	8009883a 	mov	r4,r16
  804c74:	00000e06 	br	804cb0 <alt_printf+0xb4>
                } 
                else if (c == 'c')
  804c78:	1480051e 	bne	r2,r18,804c90 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  804c7c:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  804c80:	ad800104 	addi	r22,r21,4
  804c84:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  804c88:	0804d6c0 	call	804d6c <alt_putchar>
  804c8c:	00002906 	br	804d34 <alt_printf+0x138>
                }
                else if (c == 'x')
  804c90:	14c0201e 	bne	r2,r19,804d14 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  804c94:	adc00017 	ldw	r23,0(r21)
  804c98:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  804c9c:	b8000326 	beq	r23,zero,804cac <alt_printf+0xb0>
  804ca0:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804ca4:	00c003c4 	movi	r3,15
  804ca8:	00000306 	br	804cb8 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  804cac:	01000c04 	movi	r4,48
  804cb0:	0804d6c0 	call	804d6c <alt_putchar>
                        continue;
  804cb4:	00001f06 	br	804d34 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804cb8:	1d84983a 	sll	r2,r3,r22
  804cbc:	15c4703a 	and	r2,r2,r23
  804cc0:	1000021e 	bne	r2,zero,804ccc <alt_printf+0xd0>
                        digit_shift -= 4;
  804cc4:	b5bfff04 	addi	r22,r22,-4
  804cc8:	003ffb06 	br	804cb8 <__alt_data_end+0xff804cb8>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804ccc:	070003c4 	movi	fp,15
                        if (digit <= 9)
  804cd0:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804cd4:	b0001716 	blt	r22,zero,804d34 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804cd8:	e588983a 	sll	r4,fp,r22
  804cdc:	25c8703a 	and	r4,r4,r23
  804ce0:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  804ce4:	19000236 	bltu	r3,r4,804cf0 <alt_printf+0xf4>
                            c = '0' + digit;
  804ce8:	21000c04 	addi	r4,r4,48
  804cec:	00000106 	br	804cf4 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  804cf0:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  804cf4:	21003fcc 	andi	r4,r4,255
  804cf8:	2100201c 	xori	r4,r4,128
  804cfc:	213fe004 	addi	r4,r4,-128
  804d00:	d8c00015 	stw	r3,0(sp)
  804d04:	0804d6c0 	call	804d6c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804d08:	b5bfff04 	addi	r22,r22,-4
  804d0c:	d8c00017 	ldw	r3,0(sp)
  804d10:	003ff006 	br	804cd4 <__alt_data_end+0xff804cd4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804d14:	1500071e 	bne	r2,r20,804d34 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  804d18:	ad800017 	ldw	r22,0(r21)
  804d1c:	ad400104 	addi	r21,r21,4

                    while(*s)
  804d20:	b1000007 	ldb	r4,0(r22)
  804d24:	20000326 	beq	r4,zero,804d34 <alt_printf+0x138>
                      alt_putchar(*s++);
  804d28:	b5800044 	addi	r22,r22,1
  804d2c:	0804d6c0 	call	804d6c <alt_putchar>
  804d30:	003ffb06 	br	804d20 <__alt_data_end+0xff804d20>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  804d34:	8805883a 	mov	r2,r17
  804d38:	003fc406 	br	804c4c <__alt_data_end+0xff804c4c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  804d3c:	dfc00a17 	ldw	ra,40(sp)
  804d40:	df000917 	ldw	fp,36(sp)
  804d44:	ddc00817 	ldw	r23,32(sp)
  804d48:	dd800717 	ldw	r22,28(sp)
  804d4c:	dd400617 	ldw	r21,24(sp)
  804d50:	dd000517 	ldw	r20,20(sp)
  804d54:	dcc00417 	ldw	r19,16(sp)
  804d58:	dc800317 	ldw	r18,12(sp)
  804d5c:	dc400217 	ldw	r17,8(sp)
  804d60:	dc000117 	ldw	r16,4(sp)
  804d64:	dec00e04 	addi	sp,sp,56
  804d68:	f800283a 	ret

00804d6c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804d6c:	defffd04 	addi	sp,sp,-12
  804d70:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  804d74:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804d78:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804d7c:	01002034 	movhi	r4,128
  804d80:	000f883a 	mov	r7,zero
  804d84:	01800044 	movi	r6,1
  804d88:	d80b883a 	mov	r5,sp
  804d8c:	2116bb04 	addi	r4,r4,23276
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804d90:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804d94:	0804f040 	call	804f04 <altera_avalon_jtag_uart_write>
  804d98:	00ffffc4 	movi	r3,-1
  804d9c:	10c00126 	beq	r2,r3,804da4 <alt_putchar+0x38>
        return -1;
    }
    return c;
  804da0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
  804da4:	dfc00217 	ldw	ra,8(sp)
  804da8:	dc000117 	ldw	r16,4(sp)
  804dac:	dec00304 	addi	sp,sp,12
  804db0:	f800283a 	ret

00804db4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804db4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804db8:	00bfff84 	movi	r2,-2
  804dbc:	2884703a 	and	r2,r5,r2
  804dc0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804dc4:	d0a00617 	ldw	r2,-32744(gp)
  804dc8:	00ffff04 	movi	r3,-4
  804dcc:	108000c4 	addi	r2,r2,3
  804dd0:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804dd4:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804dd8:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804ddc:	1109883a 	add	r4,r2,r4
  804de0:	18c00004 	addi	r3,r3,0
  804de4:	1900032e 	bgeu	r3,r4,804df4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804de8:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804dec:	00bfffc4 	movi	r2,-1
  804df0:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  804df4:	d1200615 	stw	r4,-32744(gp)
  804df8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  804dfc:	f800283a 	ret

00804e00 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
  804e00:	00800044 	movi	r2,1
  804e04:	20800226 	beq	r4,r2,804e10 <write+0x10>
  804e08:	00800084 	movi	r2,2
  804e0c:	2080041e 	bne	r4,r2,804e20 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
  804e10:	01002034 	movhi	r4,128
  804e14:	000f883a 	mov	r7,zero
  804e18:	2116bb04 	addi	r4,r4,23276
  804e1c:	0804f041 	jmpi	804f04 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  804e20:	d0a00d17 	ldw	r2,-32716(gp)
  804e24:	10000926 	beq	r2,zero,804e4c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  804e28:	deffff04 	addi	sp,sp,-4
  804e2c:	dfc00015 	stw	ra,0(sp)
  804e30:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  804e34:	00c01444 	movi	r3,81
  804e38:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  804e3c:	00bfffc4 	movi	r2,-1
  804e40:	dfc00017 	ldw	ra,0(sp)
  804e44:	dec00104 	addi	sp,sp,4
  804e48:	f800283a 	ret
  804e4c:	d0a0eb04 	addi	r2,gp,-31828
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  804e50:	00c01444 	movi	r3,81
  804e54:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  804e58:	00bfffc4 	movi	r2,-1
  804e5c:	f800283a 	ret

00804e60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  804e60:	deffff04 	addi	sp,sp,-4
  804e64:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  804e68:	08052200 	call	805220 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  804e6c:	00800044 	movi	r2,1
  804e70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  804e74:	dfc00017 	ldw	ra,0(sp)
  804e78:	dec00104 	addi	sp,sp,4
  804e7c:	f800283a 	ret

00804e80 <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  804e80:	00804034 	movhi	r2,256
  804e84:	10840004 	addi	r2,r2,4096
  804e88:	d0a0f115 	stw	r2,-31804(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  804e8c:	01002034 	movhi	r4,128
  804e90:	0081c9f4 	movhi	r2,1831
  804e94:	10838004 	addi	r2,r2,3584
  804e98:	d1600904 	addi	r5,gp,-32732
  804e9c:	21169304 	addi	r4,r4,23116
  804ea0:	d0a0f015 	stw	r2,-31808(gp)
  804ea4:	080513c1 	jmpi	80513c <alt_dev_llist_insert>

00804ea8 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  804ea8:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  804eac:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  804eb0:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  804eb4:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  804eb8:	11800b2e 	bgeu	r2,r6,804ee8 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804ebc:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  804ec0:	1a60000c 	andi	r9,r3,32768
  804ec4:	48000326 	beq	r9,zero,804ed4 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804ec8:	10c00005 	stb	r3,0(r2)
  804ecc:	10800044 	addi	r2,r2,1
  804ed0:	003ff906 	br	804eb8 <__alt_data_end+0xff804eb8>
    else if (ptr != buffer)
  804ed4:	11400226 	beq	r2,r5,804ee0 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  804ed8:	1145c83a 	sub	r2,r2,r5
  804edc:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  804ee0:	403ff526 	beq	r8,zero,804eb8 <__alt_data_end+0xff804eb8>
  804ee4:	00000106 	br	804eec <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  804ee8:	117ffb1e 	bne	r2,r5,804ed8 <__alt_data_end+0xff804ed8>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  804eec:	39d0000c 	andi	r7,r7,16384
  804ef0:	3800021e 	bne	r7,zero,804efc <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  804ef4:	00bffec4 	movi	r2,-5
  804ef8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  804efc:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  804f00:	f800283a 	ret

00804f04 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  804f04:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804f08:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  804f0c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  804f10:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  804f14:	2980072e 	bgeu	r5,r6,804f34 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  804f18:	38c00037 	ldwio	r3,0(r7)
  804f1c:	18ffffec 	andhi	r3,r3,65535
  804f20:	183ffc26 	beq	r3,zero,804f14 <__alt_data_end+0xff804f14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  804f24:	28c00007 	ldb	r3,0(r5)
  804f28:	20c00035 	stwio	r3,0(r4)
  804f2c:	29400044 	addi	r5,r5,1
  804f30:	003ff806 	br	804f14 <__alt_data_end+0xff804f14>

  return count;
}
  804f34:	f800283a 	ret

00804f38 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  804f38:	d0e0f017 	ldw	r3,-31808(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  804f3c:	d0a0f117 	ldw	r2,-31804(gp)

  if (!altera_avalon_timer_ts_freq)
  804f40:	18000c26 	beq	r3,zero,804f74 <alt_timestamp_start+0x3c>
    return -1;
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  804f44:	11000104 	addi	r4,r2,4
  804f48:	00c00204 	movi	r3,8
  804f4c:	20c00035 	stwio	r3,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  804f50:	00ffffd4 	movui	r3,65535
  804f54:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  804f58:	10c00335 	stwio	r3,12(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  804f5c:	10c00435 	stwio	r3,16(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  804f60:	10c00535 	stwio	r3,20(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  804f64:	00800104 	movi	r2,4
  804f68:	20800035 	stwio	r2,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  804f6c:	0005883a 	mov	r2,zero
  804f70:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
  804f74:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
  804f78:	f800283a 	ret

00804f7c <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  804f7c:	d0a0f017 	ldw	r2,-31808(gp)
  804f80:	10000e26 	beq	r2,zero,804fbc <alt_timestamp+0x40>
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  804f84:	d120f117 	ldw	r4,-31804(gp)
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  804f88:	20800604 	addi	r2,r4,24
  804f8c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  804f90:	11400037 	ldwio	r5,0(r2)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  804f94:	20800737 	ldwio	r2,28(r4)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  804f98:	20c00837 	ldwio	r3,32(r4)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  804f9c:	21000937 	ldwio	r4,36(r4)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  804fa0:	2008943a 	slli	r4,r4,16
  804fa4:	1004943a 	slli	r2,r2,16
  804fa8:	297fffcc 	andi	r5,r5,65535
  804fac:	18ffffcc 	andi	r3,r3,65535
  804fb0:	2884303a 	nor	r2,r5,r2
  804fb4:	20c6303a 	nor	r3,r4,r3
  804fb8:	f800283a 	ret
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
  804fbc:	00bfffc4 	movi	r2,-1
  804fc0:	1007883a 	mov	r3,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
  804fc4:	f800283a 	ret

00804fc8 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
  804fc8:	d0a0f017 	ldw	r2,-31808(gp)
  804fcc:	f800283a 	ret

00804fd0 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
  804fd0:	d1600904 	addi	r5,gp,-32732
  804fd4:	08051a81 	jmpi	8051a8 <alt_find_dev>

00804fd8 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
  804fd8:	20800a17 	ldw	r2,40(r4)
  804fdc:	10800023 	ldbuio	r2,0(r2)
  804fe0:	28800005 	stb	r2,0(r5)

	return 0;
}
  804fe4:	0005883a 	mov	r2,zero
  804fe8:	f800283a 	ret

00804fec <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804fec:	20800a17 	ldw	r2,40(r4)
  804ff0:	29400fcc 	andi	r5,r5,63
  804ff4:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  804ff8:	20800a17 	ldw	r2,40(r4)
  804ffc:	10800063 	ldbuio	r2,1(r2)
  805000:	30800005 	stb	r2,0(r6)

	return 0;
}
  805004:	0005883a 	mov	r2,zero
  805008:	f800283a 	ret

0080500c <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  80500c:	20800a17 	ldw	r2,40(r4)
  805010:	29400fcc 	andi	r5,r5,63
  805014:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
  805018:	20800a17 	ldw	r2,40(r4)
  80501c:	11800065 	stbio	r6,1(r2)

	return 0;
}
  805020:	0005883a 	mov	r2,zero
  805024:	f800283a 	ret

00805028 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805028:	20800a17 	ldw	r2,40(r4)
  80502c:	00c00c84 	movi	r3,50
  805030:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805034:	20800a17 	ldw	r2,40(r4)
  805038:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  80503c:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805040:	10803fcc 	andi	r2,r2,255
  805044:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805048:	20800a17 	ldw	r2,40(r4)
  80504c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  805050:	20800a17 	ldw	r2,40(r4)
  805054:	10800063 	ldbuio	r2,1(r2)
  805058:	10803fcc 	andi	r2,r2,255
  80505c:	1006923a 	slli	r3,r2,8
  805060:	28800017 	ldw	r2,0(r5)
  805064:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
  805068:	10e0000c 	andi	r3,r2,32768
  80506c:	18000126 	beq	r3,zero,805074 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
  805070:	10bffff4 	orhi	r2,r2,65535
  805074:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  805078:	0005883a 	mov	r2,zero
  80507c:	f800283a 	ret

00805080 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805080:	20800a17 	ldw	r2,40(r4)
  805084:	00c00d04 	movi	r3,52
  805088:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  80508c:	20800a17 	ldw	r2,40(r4)
  805090:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805094:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805098:	10803fcc 	andi	r2,r2,255
  80509c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8050a0:	20800a17 	ldw	r2,40(r4)
  8050a4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  8050a8:	20800a17 	ldw	r2,40(r4)
  8050ac:	10800063 	ldbuio	r2,1(r2)
  8050b0:	10803fcc 	andi	r2,r2,255
  8050b4:	1006923a 	slli	r3,r2,8
  8050b8:	28800017 	ldw	r2,0(r5)
  8050bc:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
  8050c0:	10e0000c 	andi	r3,r2,32768
  8050c4:	18000126 	beq	r3,zero,8050cc <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
  8050c8:	10bffff4 	orhi	r2,r2,65535
  8050cc:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  8050d0:	0005883a 	mov	r2,zero
  8050d4:	f800283a 	ret

008050d8 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8050d8:	20800a17 	ldw	r2,40(r4)
  8050dc:	00c00d84 	movi	r3,54
  8050e0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8050e4:	20800a17 	ldw	r2,40(r4)
  8050e8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8050ec:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8050f0:	10803fcc 	andi	r2,r2,255
  8050f4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8050f8:	20800a17 	ldw	r2,40(r4)
  8050fc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  805100:	20800a17 	ldw	r2,40(r4)
  805104:	10800063 	ldbuio	r2,1(r2)
  805108:	10803fcc 	andi	r2,r2,255
  80510c:	1006923a 	slli	r3,r2,8
  805110:	28800017 	ldw	r2,0(r5)
  805114:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
  805118:	10e0000c 	andi	r3,r2,32768
  80511c:	18000126 	beq	r3,zero,805124 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
  805120:	10bffff4 	orhi	r2,r2,65535
  805124:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  805128:	0005883a 	mov	r2,zero
  80512c:	f800283a 	ret

00805130 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  805130:	f800283a 	ret

00805134 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  805134:	3005883a 	mov	r2,r6
  805138:	f800283a 	ret

0080513c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80513c:	20000226 	beq	r4,zero,805148 <alt_dev_llist_insert+0xc>
  805140:	20800217 	ldw	r2,8(r4)
  805144:	1000101e 	bne	r2,zero,805188 <alt_dev_llist_insert+0x4c>
  805148:	d0a00d17 	ldw	r2,-32716(gp)
  80514c:	10000926 	beq	r2,zero,805174 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  805150:	deffff04 	addi	sp,sp,-4
  805154:	dfc00015 	stw	ra,0(sp)
  805158:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  80515c:	00c00584 	movi	r3,22
  805160:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  805164:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  805168:	dfc00017 	ldw	ra,0(sp)
  80516c:	dec00104 	addi	sp,sp,4
  805170:	f800283a 	ret
  805174:	d0a0eb04 	addi	r2,gp,-31828
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  805178:	00c00584 	movi	r3,22
  80517c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  805180:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  805184:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  805188:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80518c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  805190:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  805194:	28800017 	ldw	r2,0(r5)
  805198:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  80519c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  8051a0:	0005883a 	mov	r2,zero
  8051a4:	f800283a 	ret

008051a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8051a8:	defffb04 	addi	sp,sp,-20
  8051ac:	dcc00315 	stw	r19,12(sp)
  8051b0:	dc800215 	stw	r18,8(sp)
  8051b4:	dc400115 	stw	r17,4(sp)
  8051b8:	dc000015 	stw	r16,0(sp)
  8051bc:	dfc00415 	stw	ra,16(sp)
  8051c0:	2027883a 	mov	r19,r4
  8051c4:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  8051c8:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  8051cc:	08038740 	call	803874 <strlen>
  8051d0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8051d4:	84400726 	beq	r16,r17,8051f4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8051d8:	81000217 	ldw	r4,8(r16)
  8051dc:	900d883a 	mov	r6,r18
  8051e0:	980b883a 	mov	r5,r19
  8051e4:	080529c0 	call	80529c <memcmp>
  8051e8:	10000426 	beq	r2,zero,8051fc <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  8051ec:	84000017 	ldw	r16,0(r16)
  8051f0:	003ff806 	br	8051d4 <__alt_data_end+0xff8051d4>
  }
  
  /* No match found */
  
  return NULL;
  8051f4:	0005883a 	mov	r2,zero
  8051f8:	00000106 	br	805200 <alt_find_dev+0x58>
  8051fc:	8005883a 	mov	r2,r16
}
  805200:	dfc00417 	ldw	ra,16(sp)
  805204:	dcc00317 	ldw	r19,12(sp)
  805208:	dc800217 	ldw	r18,8(sp)
  80520c:	dc400117 	ldw	r17,4(sp)
  805210:	dc000017 	ldw	r16,0(sp)
  805214:	dec00504 	addi	sp,sp,20
  805218:	f800283a 	ret

0080521c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80521c:	f800283a 	ret

00805220 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  805220:	000170fa 	wrctl	ienable,zero
  805224:	f800283a 	ret

00805228 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  805228:	213ffe84 	addi	r4,r4,-6
  80522c:	008003c4 	movi	r2,15
  805230:	11001636 	bltu	r2,r4,80528c <alt_exception_cause_generated_bad_addr+0x64>
  805234:	200890ba 	slli	r4,r4,2
  805238:	00802034 	movhi	r2,128
  80523c:	10949304 	addi	r2,r2,21068
  805240:	2089883a 	add	r4,r4,r2
  805244:	20800017 	ldw	r2,0(r4)
  805248:	1000683a 	jmp	r2
  80524c:	00805294 	movui	r2,330
  805250:	00805294 	movui	r2,330
  805254:	0080528c 	andi	r2,zero,330
  805258:	0080528c 	andi	r2,zero,330
  80525c:	0080528c 	andi	r2,zero,330
  805260:	00805294 	movui	r2,330
  805264:	0080528c 	andi	r2,zero,330
  805268:	0080528c 	andi	r2,zero,330
  80526c:	00805294 	movui	r2,330
  805270:	00805294 	movui	r2,330
  805274:	0080528c 	andi	r2,zero,330
  805278:	00805294 	movui	r2,330
  80527c:	0080528c 	andi	r2,zero,330
  805280:	0080528c 	andi	r2,zero,330
  805284:	0080528c 	andi	r2,zero,330
  805288:	00805294 	movui	r2,330
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80528c:	0005883a 	mov	r2,zero
  805290:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  805294:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  805298:	f800283a 	ret

0080529c <memcmp>:
  80529c:	218d883a 	add	r6,r4,r6
  8052a0:	21800826 	beq	r4,r6,8052c4 <memcmp+0x28>
  8052a4:	20800003 	ldbu	r2,0(r4)
  8052a8:	28c00003 	ldbu	r3,0(r5)
  8052ac:	10c00226 	beq	r2,r3,8052b8 <memcmp+0x1c>
  8052b0:	10c5c83a 	sub	r2,r2,r3
  8052b4:	f800283a 	ret
  8052b8:	21000044 	addi	r4,r4,1
  8052bc:	29400044 	addi	r5,r5,1
  8052c0:	003ff706 	br	8052a0 <__alt_data_end+0xff8052a0>
  8052c4:	0005883a 	mov	r2,zero
  8052c8:	f800283a 	ret
