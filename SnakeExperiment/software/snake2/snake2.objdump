
snake2.elf:     file format elf32-littlenios2
snake2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004c34 memsz 0x00004c34 flags r-x
    LOAD off    0x00005c54 vaddr 0x00804c54 paddr 0x00804ed4 align 2**12
         filesz 0x00000280 memsz 0x00000280 flags rw-
    LOAD off    0x00006154 vaddr 0x00805154 paddr 0x00805154 align 2**12
         filesz 0x00000000 memsz 0x00000174 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004608  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004cc  00804788  00804788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000280  00804c54  00804ed4  00005c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000174  00805154  00805154  00006154  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008052c8  008052c8  00005ed4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005ed4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000818  00000000  00000000  00005ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d138  00000000  00000000  00006710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004361  00000000  00000000  00013848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004dd8  00000000  00000000  00017ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000cf4  00000000  00000000  0001c984  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000284e  00000000  00000000  0001d678  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007647  00000000  00000000  0001fec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00027510  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bb0  00000000  00000000  00027520  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002a2d2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002a2d5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002a2d8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002a2d9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002a2da  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002a2de  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002a2e2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002a2e6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002a2ef  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002a2f8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  0002a301  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  0002a306  2**0
                  CONTENTS, READONLY
 29 .jdi          0000433a  00000000  00000000  0002a336  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000ab678  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
00804788 l    d  .rodata	00000000 .rodata
00804c54 l    d  .rwdata	00000000 .rwdata
00805154 l    d  .bss	00000000 .bss
008052c8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../snake2_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0080515c l     O .bss	00000004 count.3427
00805154 l     O .bss	00000008 lasttime.3428
0080489a l     O .rodata	0000002d CSWTCH.74
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803154 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00803708 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00804ac8 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00804d3c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00804eb4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00804e1c l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
008045f0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
008051b8 g     O .bss	00000004 alt_instruction_exception_handler
0080408c g     F .text	0000002c alt_main
00802d04 g     F .text	0000002c strcpy
008051c8 g     O .bss	00000100 alt_irq
00800698 g     F .text	00000070 disp_timer_init
00804ed4 g       *ABS*	00000000 __flash_rwdata_start
008052c8 g       *ABS*	00000000 __alt_heap_start
00802efc g     F .text	00000008 strtok_r
00805168 g     O .bss	00000004 disp_length
00802b54 g     F .text	0000004c printf
008051b0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00803e1c g     F .text	00000060 memmove
00802e6c g     F .text	00000090 __strtok_r
00804eb8 g     O .rwdata	00000004 jtag_uart
008046dc g     F .text	00000008 altera_nios2_gen2_irq_init
00803d74 g     F .text	000000a8 __sfvwrite_small_str
00800000 g     F .entry	0000000c __reset
008044e4 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00805164 g     O .bss	00000004 led_val
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080519c g     O .bss	00000004 errno
008051a8 g     O .bss	00000004 alt_argv
0080cea0 g       *ABS*	00000000 _gp
00804e48 g     O .rwdata	00000030 alt_fd_list
00804664 g     F .text	00000074 alt_find_dev
00805170 g     O .bss	00000004 cmdbuffer
0080273c g     F .text	000000dc .hidden __floatsidf
0080516c g     O .bss	00000004 disp_offset
008046e4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00800708 g     F .text	000000d4 to_hex
00804364 g     F .text	0000005c altera_avalon_jtag_uart_read
00802894 g     F .text	00000014 malloc
00802b18 g     F .text	0000003c _printf_r
008014c0 g     F .text	00000064 .hidden __udivsi3
00800474 g     F .text	00000098 write_to_disp
008001bc g     F .text	00000038 ring_buf_push
00802ba0 g     F .text	00000050 _sbrk_r
00804ebc g     O .rwdata	00000004 alt_max_fd
00803f18 g     F .text	00000094 alt_irq_register
00805160 g     O .bss	00000004 debug
008015a4 g     F .text	000008ac .hidden __adddf3
00800594 g     F .text	00000094 read_request
0080088c g     F .text	00000014 throw_code
00804ea8 g     O .rwdata	00000004 _global_impure_ptr
008052c8 g       *ABS*	00000000 __bss_end
00803ed4 g     F .text	00000044 alt_getchar
00800dcc g     F .text	000005fc .hidden __udivdi3
00805174 g     O .bss	00000004 x_buf
00800628 g     F .text	00000070 acc_timer_init
00803138 g     F .text	0000001c strtol
008051a0 g     O .bss	00000004 alt_irq_active
00805178 g     O .bss	00000004 disp_buf
008000fc g     F .exceptions	00000060 alt_irq_handler
00804e78 g     O .rwdata	00000028 alt_dev_null
008045ec g     F .text	00000004 alt_dcache_flush_all
008026bc g     F .text	00000080 .hidden __fixdfsi
008001f4 g     F .text	00000114 acc_timer_isr
00800448 g     F .text	0000002c letter_to_hex
00804ed4 g       *ABS*	00000000 __ram_rwdata_end
00804ec0 g     O .rwdata	00000008 alt_dev_list
008042bc g     F .text	00000060 write
00804484 g     F .text	00000008 alt_timestamp_freq
00804c54 g       *ABS*	00000000 __ram_rodata_end
00801524 g     F .text	00000058 .hidden __umodsi3
008052c8 g       *ABS*	00000000 end
00802888 g     F .text	0000000c _atoi_r
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802818 g     F .text	00000064 .hidden __clzsi2
008043c0 g     F .text	00000034 altera_avalon_jtag_uart_write
00803774 g     F .text	0000052c ___vfprintf_internal_r
00802bf0 g     F .text	00000064 _sprintf_r
008028dc g     F .text	000000e4 _free_r
008040b8 g     F .text	00000170 alt_printf
00800180 g     F .text	0000003c _start
00800544 g     F .text	00000050 clr_disp
0080517c g     O .bss	00000004 y_buf
0080433c g     F .text	00000028 alt_sys_init
00804494 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
008051bc g     O .bss	0000000c hexbuffers
0080157c g     F .text	00000028 .hidden __mulsi3
00804c54 g       *ABS*	00000000 __ram_rwdata_start
00804788 g       *ABS*	00000000 __ram_rodata_start
00802d4c g     F .text	00000054 strncpy
0080453c g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00802da0 g     F .text	000000cc strtok
00804758 g     F .text	00000030 memcmp
008052c8 g       *ABS*	00000000 __alt_stack_base
00800338 g     F .text	00000110 convolve_float
00801e50 g     F .text	0000086c .hidden __muldf3
008045f8 g     F .text	0000006c alt_dev_llist_insert
00804270 g     F .text	0000004c sbrk
008031c0 g     F .text	0000052c ___svfprintf_internal_r
00803cbc g     F .text	000000b8 __sfvwrite_small_dev
00805154 g       *ABS*	00000000 __bss_start
008028bc g     F .text	00000020 memset
00800c28 g     F .text	000001a4 main
008051a4 g     O .bss	00000004 alt_envp
01000000 g       *ABS*	00000000 __alt_heap_limit
00802f04 g     F .text	00000234 _strtol_r
008043f4 g     F .text	00000044 alt_timestamp_start
008029c0 g     F .text	00000158 _malloc_r
00804ed0 g     O .rwdata	00000004 alt_errno
00804ea0 g     O .rwdata	00000004 led_offset
008013c8 g     F .text	00000084 .hidden __divsi3
00802ccc g     F .text	00000038 strcmp
00804788 g       *ABS*	00000000 __flash_rodata_start
00800308 g     F .text	00000030 ring_buf_read
0080431c g     F .text	00000020 alt_irq_init
008008a0 g     F .text	00000388 parse_request
00802c54 g     F .text	00000078 sprintf
008048c7 g     O .rodata	00000100 .hidden __clz_tab
00803e7c g     F .text	00000058 _write_r
00804eac g     O .rwdata	00000004 _impure_ptr
008051ac g     O .bss	00000004 alt_argc
008051b4 g     O .bss	00000004 altera_avalon_timer_ts_base
00804c54 g     O .rwdata	000000e8 h
00800020 g       .exceptions	00000000 alt_irq_entry
00804ec8 g     O .rwdata	00000008 alt_fs_list
008036ec g     F .text	0000001c __vfprintf_internal_unused
00805180 g     O .bss	00000004 z_buf
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080448c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
008007dc g     F .text	000000b0 get_input
00804438 g     F .text	0000004c alt_timestamp
00804ed4 g       *ABS*	00000000 _edata
008052c8 g       *ABS*	00000000 _end
0080050c g     F .text	00000038 disp_timer_isr
00800180 g       *ABS*	00000000 __ram_exceptions_end
00805184 g     O .bss	00000008 latency
0080144c g     F .text	00000074 .hidden __modsi3
00804ea4 g     O .rwdata	00000004 __ctype_ptr__
00804594 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080287c g     F .text	0000000c atoi
008049c7 g     O .rodata	00000101 _ctype_
0080000c g       .entry	00000000 _exit
008044a8 g     F .text	00000020 alt_up_accelerometer_spi_read
008044c8 g     F .text	0000001c alt_up_accelerometer_spi_write
00802d30 g     F .text	0000001c strlen
00804228 g     F .text	00000048 alt_putchar
00805194 g     O .bss	00000004 __malloc_sbrk_start
008046d8 g     F .text	00000004 alt_icache_flush_all
00804eb0 g     O .rwdata	00000004 alt_priority_mask
00805198 g     O .bss	00000004 __malloc_free_list
00803ca0 g     F .text	0000001c __vfprintf_internal
0080518c g     O .bss	00000004 acc_dev
00803fac g     F .text	000000e0 alt_load
008028a8 g     F .text	00000014 free
00805190 g     O .bss	00000004 led_buf



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80010c:	04002034 	movhi	r16,128
  800110:	84147204 	addi	r16,r16,20936

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	000b883a 	mov	r5,zero
    mask = 1;
  800118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	1888703a 	and	r4,r3,r2
  800120:	20000b26 	beq	r4,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800124:	280490fa 	slli	r2,r5,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	183ff51e 	bne	r3,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	1085883a 	add	r2,r2,r2
      i++;
  800154:	29400044 	addi	r5,r5,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a0c617 	ldw	r2,-31976(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6b3a814 	ori	gp,gp,52896
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	10945514 	ori	r2,r2,20820

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d4b214 	ori	r3,r3,21192

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	0803fac0 	call	803fac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	080408c0 	call	80408c <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <ring_buf_push>:
	RING_T* values;
};

//Buffer functions
void ring_buf_push(struct ring_buffer* buf, RING_T in){
	if (buf->next_free < 0){
  8001bc:	20800117 	ldw	r2,4(r4)
  8001c0:	1000030e 	bge	r2,zero,8001d0 <ring_buf_push+0x14>
		buf->next_free = buf ->size-1;
  8001c4:	20800017 	ldw	r2,0(r4)
  8001c8:	10bfffc4 	addi	r2,r2,-1
  8001cc:	20800115 	stw	r2,4(r4)
	}
	(buf->values)[buf->next_free] = in;
  8001d0:	20c00117 	ldw	r3,4(r4)
  8001d4:	21800217 	ldw	r6,8(r4)
  8001d8:	18c5883a 	add	r2,r3,r3
  8001dc:	1085883a 	add	r2,r2,r2
  8001e0:	3085883a 	add	r2,r6,r2
  8001e4:	11400015 	stw	r5,0(r2)
	(buf->next_free)--;
  8001e8:	18ffffc4 	addi	r3,r3,-1
  8001ec:	20c00115 	stw	r3,4(r4)
  8001f0:	f800283a 	ret

008001f4 <acc_timer_isr>:
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  8001f4:	defffa04 	addi	sp,sp,-24
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  8001f8:	00804034 	movhi	r2,256
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  8001fc:	dfc00515 	stw	ra,20(sp)
  800200:	dc400415 	stw	r17,16(sp)
  800204:	dc000315 	stw	r16,12(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800208:	10843004 	addi	r2,r2,4288
  80020c:	10000035 	stwio	zero,0(r2)


    alt_32 x,y,z;

    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800210:	d120bb17 	ldw	r4,-32020(gp)
  800214:	d9400204 	addi	r5,sp,8
  800218:	08044e40 	call	8044e4 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  80021c:	d120bb17 	ldw	r4,-32020(gp)
  800220:	d9400104 	addi	r5,sp,4
  800224:	080453c0 	call	80453c <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800228:	d120bb17 	ldw	r4,-32020(gp)
  80022c:	d80b883a 	mov	r5,sp
  800230:	08045940 	call	804594 <alt_up_accelerometer_spi_read_z_axis>

	ring_buf_push(x_buf, x);
  800234:	d9400217 	ldw	r5,8(sp)
  800238:	d120b517 	ldw	r4,-32044(gp)
  80023c:	08001bc0 	call	8001bc <ring_buf_push>
	ring_buf_push(y_buf, y);
  800240:	d9400117 	ldw	r5,4(sp)
  800244:	d120b717 	ldw	r4,-32036(gp)
  800248:	08001bc0 	call	8001bc <ring_buf_push>
	ring_buf_push(z_buf, z);
  80024c:	d9400017 	ldw	r5,0(sp)
  800250:	d120b817 	ldw	r4,-32032(gp)
  800254:	08001bc0 	call	8001bc <ring_buf_push>

	//iNTERRUPT FREQUENCY MONITORING
	static int count;
	static alt_64 lasttime;

    if(debug && ((count & 4095) == 0) ){
  800258:	d0a0b017 	ldw	r2,-32064(gp)
  80025c:	10002226 	beq	r2,zero,8002e8 <acc_timer_isr+0xf4>
  800260:	d0a0af17 	ldw	r2,-32068(gp)
  800264:	1083ffcc 	andi	r2,r2,4095
  800268:	10001f1e 	bne	r2,zero,8002e8 <acc_timer_isr+0xf4>
    	printf("Avg sampling period (us): %i\n", (alt_timestamp()-lasttime)/4096 /(alt_timestamp_freq()/1000000) );
  80026c:	08044380 	call	804438 <alt_timestamp>
  800270:	d460ad17 	ldw	r17,-32076(gp)
  800274:	d160ae17 	ldw	r5,-32072(gp)
  800278:	1463c83a 	sub	r17,r2,r17
  80027c:	1445803a 	cmpltu	r2,r2,r17
  800280:	1947c83a 	sub	r3,r3,r5
  800284:	1887c83a 	sub	r3,r3,r2
  800288:	1804953a 	slli	r2,r3,20
  80028c:	8822d33a 	srli	r17,r17,12
  800290:	1820d33a 	srli	r16,r3,12
  800294:	1462b03a 	or	r17,r2,r17
  800298:	08044840 	call	804484 <alt_timestamp_freq>
  80029c:	014003f4 	movhi	r5,15
  8002a0:	29509004 	addi	r5,r5,16960
  8002a4:	1009883a 	mov	r4,r2
  8002a8:	08014c00 	call	8014c0 <__udivsi3>
  8002ac:	000f883a 	mov	r7,zero
  8002b0:	100d883a 	mov	r6,r2
  8002b4:	8809883a 	mov	r4,r17
  8002b8:	800b883a 	mov	r5,r16
  8002bc:	0800dcc0 	call	800dcc <__udivdi3>
  8002c0:	01002034 	movhi	r4,128
  8002c4:	100b883a 	mov	r5,r2
  8002c8:	180d883a 	mov	r6,r3
  8002cc:	2111e204 	addi	r4,r4,18312
  8002d0:	0802b540 	call	802b54 <printf>
		count = 1;
  8002d4:	00800044 	movi	r2,1
  8002d8:	d0a0af15 	stw	r2,-32068(gp)
		lasttime = alt_timestamp();
  8002dc:	08044380 	call	804438 <alt_timestamp>
  8002e0:	d0a0ad15 	stw	r2,-32076(gp)
  8002e4:	d0e0ae15 	stw	r3,-32072(gp)
    }
    count++;
  8002e8:	d0a0af17 	ldw	r2,-32068(gp)
  8002ec:	10800044 	addi	r2,r2,1
  8002f0:	d0a0af15 	stw	r2,-32068(gp)
}
  8002f4:	dfc00517 	ldw	ra,20(sp)
  8002f8:	dc400417 	ldw	r17,16(sp)
  8002fc:	dc000317 	ldw	r16,12(sp)
  800300:	dec00604 	addi	sp,sp,24
  800304:	f800283a 	ret

00800308 <ring_buf_read>:
	(buf->next_free)--;
}

RING_T ring_buf_read(struct ring_buffer* buf, RING_T idx){
	int mapped_idx;
	if (buf->next_free+1+idx >= buf->size){
  800308:	20800117 	ldw	r2,4(r4)
  80030c:	10800044 	addi	r2,r2,1
  800310:	114b883a 	add	r5,r2,r5
  800314:	20800017 	ldw	r2,0(r4)
  800318:	28800116 	blt	r5,r2,800320 <ring_buf_read+0x18>
		mapped_idx = buf->next_free+1+idx - buf->size;
  80031c:	288bc83a 	sub	r5,r5,r2
	}
	else {
		mapped_idx = buf->next_free+1+idx;
	}

	return buf->values[mapped_idx];
  800320:	20800217 	ldw	r2,8(r4)
  800324:	294b883a 	add	r5,r5,r5
  800328:	294b883a 	add	r5,r5,r5
  80032c:	114b883a 	add	r5,r2,r5
}
  800330:	28800017 	ldw	r2,0(r5)
  800334:	f800283a 	ret

00800338 <convolve_float>:

alt_32 convolve_float(struct ring_buffer* buf, double coefficients[]  ){
  800338:	defff904 	addi	sp,sp,-28
  80033c:	dd000415 	stw	r20,16(sp)
  800340:	2029883a 	mov	r20,r4
  800344:	dfc00615 	stw	ra,24(sp)
  800348:	dd400515 	stw	r21,20(sp)
  80034c:	dcc00315 	stw	r19,12(sp)
  800350:	dc800215 	stw	r18,8(sp)
  800354:	dc400115 	stw	r17,4(sp)
  800358:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80035c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800360:	00bfff84 	movi	r2,-2
  800364:	1884703a 	and	r2,r3,r2
  800368:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  80036c:	d120c017 	ldw	r4,-32000(gp)
  800370:	00bff7c4 	movi	r2,-33
  800374:	2084703a 	and	r2,r4,r2
  800378:	d0a0c015 	stw	r2,-32000(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80037c:	d0a0c017 	ldw	r2,-32000(gp)
  800380:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800384:	1801703a 	wrctl	status,r3
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
	for(int i = 0; i < buf->size; i ++){
  800388:	a5400017 	ldw	r21,0(r20)
  80038c:	2821883a 	mov	r16,r5
  800390:	0023883a 	mov	r17,zero

	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
  800394:	0027883a 	mov	r19,zero
  800398:	0025883a 	mov	r18,zero
	for(int i = 0; i < buf->size; i ++){
  80039c:	8d40140e 	bge	r17,r21,8003f0 <convolve_float+0xb8>
		sum += ring_buf_read(buf, i)* coefficients[i];
  8003a0:	880b883a 	mov	r5,r17
  8003a4:	a009883a 	mov	r4,r20
  8003a8:	08003080 	call	800308 <ring_buf_read>
  8003ac:	1009883a 	mov	r4,r2
  8003b0:	080273c0 	call	80273c <__floatsidf>
  8003b4:	81800017 	ldw	r6,0(r16)
  8003b8:	81c00117 	ldw	r7,4(r16)
  8003bc:	1009883a 	mov	r4,r2
  8003c0:	180b883a 	mov	r5,r3
  8003c4:	0801e500 	call	801e50 <__muldf3>
  8003c8:	9809883a 	mov	r4,r19
  8003cc:	900b883a 	mov	r5,r18
  8003d0:	100d883a 	mov	r6,r2
  8003d4:	180f883a 	mov	r7,r3
  8003d8:	08015a40 	call	8015a4 <__adddf3>
  8003dc:	1027883a 	mov	r19,r2
  8003e0:	1825883a 	mov	r18,r3
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
	for(int i = 0; i < buf->size; i ++){
  8003e4:	8c400044 	addi	r17,r17,1
  8003e8:	84000204 	addi	r16,r16,8
  8003ec:	003feb06 	br	80039c <__alt_data_end+0xff80039c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8003f0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8003f4:	00bfff84 	movi	r2,-2
  8003f8:	1884703a 	and	r2,r3,r2
  8003fc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  800400:	d0a0c017 	ldw	r2,-32000(gp)
  800404:	10800814 	ori	r2,r2,32
  800408:	d0a0c015 	stw	r2,-32000(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80040c:	d0a0c017 	ldw	r2,-32000(gp)
  800410:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800414:	1801703a 	wrctl	status,r3
	}

	//Re-enable interrupts from state
	//alt_irq_enable_all(state);
	alt_irq_enable(TIMER_IRQ);
	return (alt_32)sum;
  800418:	9809883a 	mov	r4,r19
  80041c:	900b883a 	mov	r5,r18
  800420:	08026bc0 	call	8026bc <__fixdfsi>

}
  800424:	dfc00617 	ldw	ra,24(sp)
  800428:	dd400517 	ldw	r21,20(sp)
  80042c:	dd000417 	ldw	r20,16(sp)
  800430:	dcc00317 	ldw	r19,12(sp)
  800434:	dc800217 	ldw	r18,8(sp)
  800438:	dc400117 	ldw	r17,4(sp)
  80043c:	dc000017 	ldw	r16,0(sp)
  800440:	dec00704 	addi	sp,sp,28
  800444:	f800283a 	ret

00800448 <letter_to_hex>:


int letter_to_hex(char in){
  800448:	213ff484 	addi	r4,r4,-46
  80044c:	21003fcc 	andi	r4,r4,255
  800450:	00800b04 	movi	r2,44
  800454:	11000536 	bltu	r2,r4,80046c <letter_to_hex+0x24>
  800458:	00802034 	movhi	r2,128
  80045c:	10922684 	addi	r2,r2,18586
  800460:	1109883a 	add	r4,r2,r4
  800464:	20800003 	ldbu	r2,0(r4)
  800468:	f800283a 	ret

	switch(in){
  80046c:	00803fc4 	movi	r2,255
		default:
			return 0b11111111;
	};

	return 0;
}
  800470:	f800283a 	ret

00800474 <write_to_disp>:

//Display processing
void write_to_disp(char* str, int offset){
  800474:	defffe04 	addi	sp,sp,-8
  800478:	dc000015 	stw	r16,0(sp)
  80047c:	dfc00115 	stw	ra,4(sp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, letter_to_hex(str[offset]));
  800480:	2161883a 	add	r16,r4,r5
  800484:	81000007 	ldb	r4,0(r16)
  800488:	08004480 	call	800448 <letter_to_hex>
  80048c:	00c04034 	movhi	r3,256
  800490:	18c47404 	addi	r3,r3,4560
  800494:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, letter_to_hex(str[offset+1]));
  800498:	81000047 	ldb	r4,1(r16)
  80049c:	08004480 	call	800448 <letter_to_hex>
  8004a0:	00c04034 	movhi	r3,256
  8004a4:	18c47004 	addi	r3,r3,4544
  8004a8:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, letter_to_hex(str[offset+2]));
  8004ac:	81000087 	ldb	r4,2(r16)
  8004b0:	08004480 	call	800448 <letter_to_hex>
  8004b4:	00c04034 	movhi	r3,256
  8004b8:	18c46c04 	addi	r3,r3,4528
  8004bc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, letter_to_hex(str[offset+3]));
  8004c0:	810000c7 	ldb	r4,3(r16)
  8004c4:	08004480 	call	800448 <letter_to_hex>
  8004c8:	00c04034 	movhi	r3,256
  8004cc:	18c46804 	addi	r3,r3,4512
  8004d0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, letter_to_hex(str[offset+4]));
  8004d4:	81000107 	ldb	r4,4(r16)
  8004d8:	08004480 	call	800448 <letter_to_hex>
  8004dc:	00c04034 	movhi	r3,256
  8004e0:	18c46404 	addi	r3,r3,4496
  8004e4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, letter_to_hex(str[offset+5]));
  8004e8:	81000147 	ldb	r4,5(r16)
  8004ec:	08004480 	call	800448 <letter_to_hex>
  8004f0:	00c04034 	movhi	r3,256
  8004f4:	18c46004 	addi	r3,r3,4480
  8004f8:	18800035 	stwio	r2,0(r3)
}
  8004fc:	dfc00117 	ldw	ra,4(sp)
  800500:	dc000017 	ldw	r16,0(sp)
  800504:	dec00204 	addi	sp,sp,8
  800508:	f800283a 	ret

0080050c <disp_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);

}

void disp_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  80050c:	00804034 	movhi	r2,256
  800510:	10843804 	addi	r2,r2,4320
  800514:	10000035 	stwio	zero,0(r2)

    if(disp_buf[disp_offset+5] == '\0'){
  800518:	d120b617 	ldw	r4,-32040(gp)
  80051c:	d0a0b317 	ldw	r2,-32052(gp)
  800520:	2087883a 	add	r3,r4,r2
  800524:	18c00147 	ldb	r3,5(r3)
  800528:	1800021e 	bne	r3,zero,800534 <disp_timer_isr+0x28>
    	disp_offset = 0;
  80052c:	d020b315 	stw	zero,-32052(gp)
  800530:	00000206 	br	80053c <disp_timer_isr+0x30>
    }
    else{
    	disp_offset++;
  800534:	10800044 	addi	r2,r2,1
  800538:	d0a0b315 	stw	r2,-32052(gp)
    }
    write_to_disp(disp_buf,disp_offset);
  80053c:	d160b317 	ldw	r5,-32052(gp)
  800540:	08004741 	jmpi	800474 <write_to_disp>

00800544 <clr_disp>:
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, letter_to_hex(str[offset+5]));
}


void clr_disp(){
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 255);
  800544:	00c04034 	movhi	r3,256
  800548:	00803fc4 	movi	r2,255
  80054c:	18c46004 	addi	r3,r3,4480
  800550:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 255);
  800554:	00c04034 	movhi	r3,256
  800558:	18c46404 	addi	r3,r3,4496
  80055c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 255);
  800560:	00c04034 	movhi	r3,256
  800564:	18c46804 	addi	r3,r3,4512
  800568:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 255);
  80056c:	00c04034 	movhi	r3,256
  800570:	18c46c04 	addi	r3,r3,4528
  800574:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 255);
  800578:	00c04034 	movhi	r3,256
  80057c:	18c47004 	addi	r3,r3,4544
  800580:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 255);
  800584:	00c04034 	movhi	r3,256
  800588:	18c47404 	addi	r3,r3,4560
  80058c:	18800035 	stwio	r2,0(r3)
  800590:	f800283a 	ret

00800594 <read_request>:
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  800594:	defffb04 	addi	sp,sp,-20
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  800598:	01801004 	movi	r6,64
  80059c:	000b883a 	mov	r5,zero
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  8005a0:	dfc00415 	stw	ra,16(sp)
  8005a4:	dcc00315 	stw	r19,12(sp)
  8005a8:	dc800215 	stw	r18,8(sp)
  8005ac:	dc400115 	stw	r17,4(sp)
  8005b0:	dc000015 	stw	r16,0(sp)
  8005b4:	2023883a 	mov	r17,r4
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  8005b8:	08028bc0 	call	8028bc <memset>

	//Get first character
	c = alt_getchar();
  8005bc:	0803ed40 	call	803ed4 <alt_getchar>
  8005c0:	1025883a 	mov	r18,r2

	//Start timer after first char received
	latency = alt_timestamp();
  8005c4:	08044380 	call	804438 <alt_timestamp>
  8005c8:	d0a0b915 	stw	r2,-32028(gp)
  8005cc:	d0e0ba15 	stw	r3,-32024(gp)

	while(c != '\n'){
  8005d0:	8821883a 	mov	r16,r17
  8005d4:	04c00284 	movi	r19,10
  8005d8:	90803fcc 	andi	r2,r18,255
  8005dc:	1080201c 	xori	r2,r2,128
  8005e0:	10bfe004 	addi	r2,r2,-128
  8005e4:	8449c83a 	sub	r4,r16,r17
  8005e8:	14c00526 	beq	r2,r19,800600 <read_request+0x6c>
		outbuf[idx] = c;
  8005ec:	84800005 	stb	r18,0(r16)
		c = alt_getchar();
  8005f0:	0803ed40 	call	803ed4 <alt_getchar>
  8005f4:	1025883a 	mov	r18,r2
  8005f8:	84000044 	addi	r16,r16,1
  8005fc:	003ff606 	br	8005d8 <__alt_data_end+0xff8005d8>
		idx++;
	}
	outbuf[idx] = ' ';
  800600:	8909883a 	add	r4,r17,r4
  800604:	00800804 	movi	r2,32
  800608:	20800005 	stb	r2,0(r4)

}
  80060c:	dfc00417 	ldw	ra,16(sp)
  800610:	dcc00317 	ldw	r19,12(sp)
  800614:	dc800217 	ldw	r18,8(sp)
  800618:	dc400117 	ldw	r17,4(sp)
  80061c:	dc000017 	ldw	r16,0(sp)
  800620:	dec00504 	addi	sp,sp,20
  800624:	f800283a 	ret

00800628 <acc_timer_init>:

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  800628:	defffe04 	addi	sp,sp,-8
  80062c:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 1000;
//	alt_32 period = alt_timestamp_freq()/freq;

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  800630:	04004034 	movhi	r16,256

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  800634:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 1000;
//	alt_32 period = alt_timestamp_freq()/freq;

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  800638:	84043104 	addi	r16,r16,4292
  80063c:	008000c4 	movi	r2,3
  800640:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800644:	00804034 	movhi	r2,256
  800648:	10843004 	addi	r2,r2,4288
  80064c:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(ACC_TIMER_BASE, 0xfbd0);
  800650:	00804034 	movhi	r2,256
  800654:	10843204 	addi	r2,r2,4296
  800658:	00fef414 	movui	r3,64464
  80065c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(ACC_TIMER_BASE, 0x0001);
  800660:	00804034 	movhi	r2,256
  800664:	10843304 	addi	r2,r2,4300
  800668:	00c00044 	movi	r3,1
  80066c:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
  800670:	200d883a 	mov	r6,r4
  800674:	000b883a 	mov	r5,zero
  800678:	01000244 	movi	r4,9
  80067c:	0803f180 	call	803f18 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);
  800680:	008001c4 	movi	r2,7
  800684:	80800035 	stwio	r2,0(r16)

}
  800688:	dfc00117 	ldw	ra,4(sp)
  80068c:	dc000017 	ldw	r16,0(sp)
  800690:	dec00204 	addi	sp,sp,8
  800694:	f800283a 	ret

00800698 <disp_timer_init>:
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  800698:	defffe04 	addi	sp,sp,-8
  80069c:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  8006a0:	04004034 	movhi	r16,256
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  8006a4:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  8006a8:	84043904 	addi	r16,r16,4324
  8006ac:	008000c4 	movi	r2,3
  8006b0:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  8006b4:	00804034 	movhi	r2,256
  8006b8:	10843804 	addi	r2,r2,4320
  8006bc:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(HEX_TIMER_BASE, 0x5a00);
  8006c0:	00804034 	movhi	r2,256
  8006c4:	10843a04 	addi	r2,r2,4328
  8006c8:	00d68004 	movi	r3,23040
  8006cc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(HEX_TIMER_BASE, 0x0262);
  8006d0:	00804034 	movhi	r2,256
  8006d4:	10843b04 	addi	r2,r2,4332
  8006d8:	00c09884 	movi	r3,610
  8006dc:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(HEX_TIMER_IRQ, 0, isr);
  8006e0:	200d883a 	mov	r6,r4
  8006e4:	000b883a 	mov	r5,zero
  8006e8:	01000204 	movi	r4,8
  8006ec:	0803f180 	call	803f18 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);
  8006f0:	008001c4 	movi	r2,7
  8006f4:	80800035 	stwio	r2,0(r16)

}
  8006f8:	dfc00117 	ldw	ra,4(sp)
  8006fc:	dc000017 	ldw	r16,0(sp)
  800700:	dec00204 	addi	sp,sp,8
  800704:	f800283a 	ret

00800708 <to_hex>:
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  800708:	defffc04 	addi	sp,sp,-16
  80070c:	dc400115 	stw	r17,4(sp)
  800710:	3023883a 	mov	r17,r6
  800714:	dc800215 	stw	r18,8(sp)
  800718:	dc000015 	stw	r16,0(sp)
  80071c:	2025883a 	mov	r18,r4
  800720:	2821883a 	mov	r16,r5
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  800724:	01800204 	movi	r6,8
  800728:	000b883a 	mov	r5,zero
  80072c:	8809883a 	mov	r4,r17
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  800730:	dfc00315 	stw	ra,12(sp)
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  800734:	08028bc0 	call	8028bc <memset>
	sprintf(buf, "%x", val);
  800738:	01402034 	movhi	r5,128
  80073c:	8809883a 	mov	r4,r17
  800740:	900d883a 	mov	r6,r18
  800744:	2951ea04 	addi	r5,r5,18344
  800748:	0802c540 	call	802c54 <sprintf>
	int hexlen = strlen(buf);
  80074c:	8809883a 	mov	r4,r17
  800750:	0802d300 	call	802d30 <strlen>

	//Left shift if string is longer than desired length to take least significant
	if (hexlen > length){
  800754:	8080090e 	bge	r16,r2,80077c <to_hex+0x74>
  800758:	8807883a 	mov	r3,r17
		for(int i = 0; i < length; i++){
  80075c:	1c49c83a 	sub	r4,r3,r17
  800760:	24000c0e 	bge	r4,r16,800794 <to_hex+0x8c>
			buf[i] = buf[(i + hexlen - length)];
  800764:	10c9883a 	add	r4,r2,r3
  800768:	2409c83a 	sub	r4,r4,r16
  80076c:	21000003 	ldbu	r4,0(r4)
  800770:	18c00044 	addi	r3,r3,1
  800774:	193fffc5 	stb	r4,-1(r3)
  800778:	003ff806 	br	80075c <__alt_data_end+0xff80075c>
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
  80077c:	1400050e 	bge	r2,r16,800794 <to_hex+0x8c>
  800780:	80ffffc4 	addi	r3,r16,-1
  800784:	88c7883a 	add	r3,r17,r3
  800788:	0009883a 	mov	r4,zero
		for(int i = 0; i < length; i++){
			if(i < hexlen){
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
			}
			else{
				buf[(length - 1 - i)] = '0';
  80078c:	01800c04 	movi	r6,48
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800790:	24000816 	blt	r4,r16,8007b4 <to_hex+0xac>
			}

		}
	}
	//Add termination
	buf[length] = '\0';
  800794:	8c21883a 	add	r16,r17,r16
  800798:	80000005 	stb	zero,0(r16)

}
  80079c:	dfc00317 	ldw	ra,12(sp)
  8007a0:	dc800217 	ldw	r18,8(sp)
  8007a4:	dc400117 	ldw	r17,4(sp)
  8007a8:	dc000017 	ldw	r16,0(sp)
  8007ac:	dec00404 	addi	sp,sp,16
  8007b0:	f800283a 	ret
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
			if(i < hexlen){
  8007b4:	2080050e 	bge	r4,r2,8007cc <to_hex+0xc4>
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
  8007b8:	1c0bc83a 	sub	r5,r3,r16
  8007bc:	288b883a 	add	r5,r5,r2
  8007c0:	29400003 	ldbu	r5,0(r5)
  8007c4:	19400005 	stb	r5,0(r3)
  8007c8:	00000106 	br	8007d0 <to_hex+0xc8>
			}
			else{
				buf[(length - 1 - i)] = '0';
  8007cc:	19800005 	stb	r6,0(r3)
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  8007d0:	21000044 	addi	r4,r4,1
  8007d4:	18ffffc4 	addi	r3,r3,-1
  8007d8:	003fed06 	br	800790 <__alt_data_end+0xff800790>

008007dc <get_input>:
alt_32 get_input(char x){

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8007dc:	21003fcc 	andi	r4,r4,255
	buf[length] = '\0';

}


alt_32 get_input(char x){
  8007e0:	defffe04 	addi	sp,sp,-8

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8007e4:	2100201c 	xori	r4,r4,128
	buf[length] = '\0';

}


alt_32 get_input(char x){
  8007e8:	dfc00115 	stw	ra,4(sp)

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8007ec:	213fe004 	addi	r4,r4,-128
  8007f0:	00801e04 	movi	r2,120
  8007f4:	2080081e 	bne	r4,r2,800818 <get_input+0x3c>
		alt_32 x = convolve_float(x_buf, h);
  8007f8:	d120b517 	ldw	r4,-32044(gp)
  8007fc:	01402034 	movhi	r5,128
  800800:	29531504 	addi	r5,r5,19540
  800804:	08003380 	call	800338 <convolve_float>
		if(x<-thresh)x = 15;
  800808:	00ffda84 	movi	r3,-150
  80080c:	10c01916 	blt	r2,r3,800874 <get_input+0x98>
		else if(x>thresh) x = 1;
  800810:	108025c8 	cmpgei	r2,r2,151
  800814:	00001a06 	br	800880 <get_input+0xa4>
		else x = 0;

		return x;

	}
	else if(x == 'y'){
  800818:	00801e44 	movi	r2,121
  80081c:	2080041e 	bne	r4,r2,800830 <get_input+0x54>
		alt_32 y = alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800820:	d120bb17 	ldw	r4,-32020(gp)
  800824:	d80b883a 	mov	r5,sp
  800828:	080453c0 	call	80453c <alt_up_accelerometer_spi_read_y_axis>
  80082c:	00000506 	br	800844 <get_input+0x68>
		else y = 0;

		return y;

	}
	else if(x == 'z'){
  800830:	00801e84 	movi	r2,122
  800834:	2080111e 	bne	r4,r2,80087c <get_input+0xa0>
		alt_32 z = alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800838:	d120bb17 	ldw	r4,-32020(gp)
  80083c:	d80b883a 	mov	r5,sp
  800840:	08045940 	call	804594 <alt_up_accelerometer_spi_read_z_axis>
		if(z<-thresh)z = 15;
  800844:	00ffda84 	movi	r3,-150
  800848:	10c0020e 	bge	r2,r3,800854 <get_input+0x78>
  80084c:	008003c4 	movi	r2,15
  800850:	00000306 	br	800860 <get_input+0x84>
		else if(z>thresh) z = 1;
  800854:	00c02584 	movi	r3,150
  800858:	1880030e 	bge	r3,r2,800868 <get_input+0x8c>
  80085c:	00800044 	movi	r2,1
  800860:	d8800015 	stw	r2,0(sp)
  800864:	00000106 	br	80086c <get_input+0x90>
		else z = 0;
  800868:	d8000015 	stw	zero,0(sp)

		return z;
  80086c:	d8800017 	ldw	r2,0(sp)
  800870:	00000306 	br	800880 <get_input+0xa4>
	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
		alt_32 x = convolve_float(x_buf, h);
		if(x<-thresh)x = 15;
  800874:	008003c4 	movi	r2,15
  800878:	00000106 	br	800880 <get_input+0xa4>
		return z;

	}
	else{
		//throw_code(3);
		return 16;
  80087c:	00800404 	movi	r2,16
	}
}
  800880:	dfc00117 	ldw	ra,4(sp)
  800884:	dec00204 	addi	sp,sp,8
  800888:	f800283a 	ret

0080088c <throw_code>:


void throw_code(char* regname, int code){
	printf("K %s %x\n", regname, code);
  80088c:	280d883a 	mov	r6,r5
  800890:	200b883a 	mov	r5,r4
  800894:	01002034 	movhi	r4,128
  800898:	2111eb04 	addi	r4,r4,18348
  80089c:	0802b541 	jmpi	802b54 <printf>

008008a0 <parse_request>:
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  8008a0:	deffee04 	addi	sp,sp,-72
	int token_number = 0;
	char* tokens[8] = {};
  8008a4:	01800804 	movi	r6,32
  8008a8:	000b883a 	mov	r5,zero
  8008ac:	d809883a 	mov	r4,sp
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  8008b0:	dfc01115 	stw	ra,68(sp)
  8008b4:	dc000b15 	stw	r16,44(sp)
  8008b8:	dd401015 	stw	r21,64(sp)
  8008bc:	dd000f15 	stw	r20,60(sp)
  8008c0:	dcc00e15 	stw	r19,56(sp)
  8008c4:	dc800d15 	stw	r18,52(sp)
  8008c8:	dc400c15 	stw	r17,48(sp)
	int token_number = 0;
	char* tokens[8] = {};
  8008cc:	08028bc0 	call	8028bc <memset>
	char* token;


	token = strtok(cmdbuffer, " ");
  8008d0:	d120b417 	ldw	r4,-32048(gp)
  8008d4:	01402034 	movhi	r5,128
  8008d8:	2951ee04 	addi	r5,r5,18360
  8008dc:	0802da00 	call	802da0 <strtok>
	outbuf[idx] = ' ';

}

void parse_request(char* request){
	int token_number = 0;
  8008e0:	0021883a 	mov	r16,zero


	token = strtok(cmdbuffer, " ");


	while(token != NULL){
  8008e4:	10000a26 	beq	r2,zero,800910 <parse_request+0x70>
		tokens[token_number]= token;
  8008e8:	8407883a 	add	r3,r16,r16
  8008ec:	18c7883a 	add	r3,r3,r3
  8008f0:	d8c7883a 	add	r3,sp,r3
		token_number++;
		token = strtok(NULL, " ");
  8008f4:	01402034 	movhi	r5,128

	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
  8008f8:	18800015 	stw	r2,0(r3)
		token_number++;
		token = strtok(NULL, " ");
  8008fc:	2951ee04 	addi	r5,r5,18360
  800900:	0009883a 	mov	r4,zero
	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
		token_number++;
  800904:	84000044 	addi	r16,r16,1
		token = strtok(NULL, " ");
  800908:	0802da00 	call	802da0 <strtok>
  80090c:	003ff506 	br	8008e4 <__alt_data_end+0xff8008e4>
	}

	if(token_number == 0 || strcmp(tokens[0], &"R" ) != 0){
  800910:	80000526 	beq	r16,zero,800928 <parse_request+0x88>
  800914:	d9000017 	ldw	r4,0(sp)
  800918:	01402034 	movhi	r5,128
  80091c:	2951ef04 	addi	r5,r5,18364
  800920:	0802ccc0 	call	802ccc <strcmp>
  800924:	10000226 	beq	r2,zero,800930 <parse_request+0x90>
		throw_code(&"ERR", 1);
  800928:	01400044 	movi	r5,1
  80092c:	0000b206 	br	800bf8 <parse_request+0x358>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
  800930:	dc000117 	ldw	r16,4(sp)
  800934:	01402034 	movhi	r5,128
  800938:	2951f104 	addi	r5,r5,18372
  80093c:	8009883a 	mov	r4,r16
  800940:	0802ccc0 	call	802ccc <strcmp>
  800944:	1025883a 	mov	r18,r2
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
  800948:	10000526 	beq	r2,zero,800960 <parse_request+0xc0>
  80094c:	01402034 	movhi	r5,128
  800950:	2951f204 	addi	r5,r5,18376
  800954:	8009883a 	mov	r4,r16
  800958:	0802ccc0 	call	802ccc <strcmp>
  80095c:	1000441e 	bne	r2,zero,800a70 <parse_request+0x1d0>
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
  800960:	d120b517 	ldw	r4,-32044(gp)
  800964:	01402034 	movhi	r5,128
  800968:	29531504 	addi	r5,r5,19540
  80096c:	08003380 	call	800338 <convolve_float>
			y = convolve_float(y_buf, h);
  800970:	d120b717 	ldw	r4,-32036(gp)
  800974:	01402034 	movhi	r5,128
  800978:	29531504 	addi	r5,r5,19540
	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
  80097c:	102b883a 	mov	r21,r2
			y = convolve_float(y_buf, h);
  800980:	08003380 	call	800338 <convolve_float>
			z = convolve_float(z_buf, h);
  800984:	d120b817 	ldw	r4,-32032(gp)
  800988:	01402034 	movhi	r5,128
  80098c:	29531504 	addi	r5,r5,19540

			to_hex(x, 3, hexbuffers[0]);
  800990:	04402034 	movhi	r17,128
  800994:	8c546f04 	addi	r17,r17,20924
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
			y = convolve_float(y_buf, h);
  800998:	1029883a 	mov	r20,r2
			z = convolve_float(z_buf, h);
  80099c:	08003380 	call	800338 <convolve_float>

			to_hex(x, 3, hexbuffers[0]);
  8009a0:	89800017 	ldw	r6,0(r17)
  8009a4:	014000c4 	movi	r5,3
  8009a8:	a809883a 	mov	r4,r21
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
			y = convolve_float(y_buf, h);
			z = convolve_float(z_buf, h);
  8009ac:	1027883a 	mov	r19,r2

			to_hex(x, 3, hexbuffers[0]);
  8009b0:	08007080 	call	800708 <to_hex>
			to_hex(y, 3, hexbuffers[1]);
  8009b4:	89800117 	ldw	r6,4(r17)
  8009b8:	014000c4 	movi	r5,3
  8009bc:	a009883a 	mov	r4,r20
  8009c0:	08007080 	call	800708 <to_hex>
			to_hex(z, 3, hexbuffers[2]);
  8009c4:	89800217 	ldw	r6,8(r17)
  8009c8:	014000c4 	movi	r5,3
  8009cc:	9809883a 	mov	r4,r19
  8009d0:	08007080 	call	800708 <to_hex>
			printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  8009d4:	89c00217 	ldw	r7,8(r17)
  8009d8:	89800117 	ldw	r6,4(r17)
  8009dc:	89400017 	ldw	r5,0(r17)
  8009e0:	01002034 	movhi	r4,128
  8009e4:	2111f404 	addi	r4,r4,18384
  8009e8:	0802b540 	call	802b54 <printf>

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  8009ec:	9000221e 	bne	r18,zero,800a78 <parse_request+0x1d8>
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  8009f0:	d120bb17 	ldw	r4,-32020(gp)
  8009f4:	d9400a04 	addi	r5,sp,40
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  8009f8:	04402034 	movhi	r17,128
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  8009fc:	08044e40 	call	8044e4 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800a00:	d120bb17 	ldw	r4,-32020(gp)
  800a04:	d9400904 	addi	r5,sp,36
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800a08:	8c546f04 	addi	r17,r17,20924
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800a0c:	080453c0 	call	80453c <alt_up_accelerometer_spi_read_y_axis>
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800a10:	d120bb17 	ldw	r4,-32020(gp)
  800a14:	d9400804 	addi	r5,sp,32
  800a18:	08045940 	call	804594 <alt_up_accelerometer_spi_read_z_axis>

		to_hex(x, 3, hexbuffers[0]);
  800a1c:	89800017 	ldw	r6,0(r17)
  800a20:	d9000a17 	ldw	r4,40(sp)
  800a24:	014000c4 	movi	r5,3
  800a28:	08007080 	call	800708 <to_hex>
		to_hex(y, 3, hexbuffers[1]);
  800a2c:	89800117 	ldw	r6,4(r17)
  800a30:	d9000917 	ldw	r4,36(sp)
  800a34:	014000c4 	movi	r5,3
  800a38:	08007080 	call	800708 <to_hex>
		to_hex(z, 3, hexbuffers[2]);
  800a3c:	89800217 	ldw	r6,8(r17)
  800a40:	d9000817 	ldw	r4,32(sp)
  800a44:	014000c4 	movi	r5,3
  800a48:	08007080 	call	800708 <to_hex>
		printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800a4c:	89c00217 	ldw	r7,8(r17)
  800a50:	89800117 	ldw	r6,4(r17)
  800a54:	89400017 	ldw	r5,0(r17)
  800a58:	01002034 	movhi	r4,128
  800a5c:	2111fa04 	addi	r4,r4,18408
  800a60:	0802b540 	call	802b54 <printf>

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800a64:	90000f26 	beq	r18,zero,800aa4 <parse_request+0x204>
			to_hex(z, 3, hexbuffers[2]);
			printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;
  800a68:	04400044 	movi	r17,1
  800a6c:	00000806 	br	800a90 <parse_request+0x1f0>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;
  800a70:	0023883a 	mov	r17,zero
  800a74:	00000106 	br	800a7c <parse_request+0x1dc>

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;
  800a78:	04400044 	movi	r17,1
			to_hex(y, 3, hexbuffers[1]);
			to_hex(z, 3, hexbuffers[2]);
			printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  800a7c:	01402034 	movhi	r5,128
  800a80:	29520004 	addi	r5,r5,18432
  800a84:	8009883a 	mov	r4,r16
  800a88:	0802ccc0 	call	802ccc <strcmp>
  800a8c:	103fd826 	beq	r2,zero,8009f0 <__alt_data_end+0xff8009f0>
		to_hex(y, 3, hexbuffers[1]);
		to_hex(z, 3, hexbuffers[2]);
		printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800a90:	01402034 	movhi	r5,128
  800a94:	29520604 	addi	r5,r5,18456
  800a98:	8009883a 	mov	r4,r16
  800a9c:	0802ccc0 	call	802ccc <strcmp>
  800aa0:	10000a1e 	bne	r2,zero,800acc <parse_request+0x22c>

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800aa4:	00804034 	movhi	r2,256
  800aa8:	10845804 	addi	r2,r2,4448
  800aac:	11400037 	ldwio	r5,0(r2)

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
		alt_printf("K BUTTON %x 0", button);
  800ab0:	01002034 	movhi	r4,128

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800ab4:	014a303a 	nor	r5,zero,r5

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
		alt_printf("K BUTTON %x 0", button);
  800ab8:	294000cc 	andi	r5,r5,3
  800abc:	21120204 	addi	r4,r4,18440
  800ac0:	08040b80 	call	8040b8 <alt_printf>
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  800ac4:	90000626 	beq	r18,zero,800ae0 <parse_request+0x240>
		printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
  800ac8:	04400044 	movi	r17,1
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
		alt_printf("K BUTTON %x 0", button);
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  800acc:	01402034 	movhi	r5,128
  800ad0:	29520c04 	addi	r5,r5,18480
  800ad4:	8009883a 	mov	r4,r16
  800ad8:	0802ccc0 	call	802ccc <strcmp>
  800adc:	10000f1e 	bne	r2,zero,800b1c <parse_request+0x27c>
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800ae0:	00804034 	movhi	r2,256
  800ae4:	10845c04 	addi	r2,r2,4464
  800ae8:	11000037 	ldwio	r4,0(r2)
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800aec:	04402034 	movhi	r17,128
  800af0:	8c546f04 	addi	r17,r17,20924
  800af4:	89800017 	ldw	r6,0(r17)
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800af8:	0108303a 	nor	r4,zero,r4
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800afc:	014000c4 	movi	r5,3
  800b00:	2100ffcc 	andi	r4,r4,1023
  800b04:	08007080 	call	800708 <to_hex>
		alt_printf("K SWITCH %x 0", hexbuffers[0]);
  800b08:	89400017 	ldw	r5,0(r17)
  800b0c:	01002034 	movhi	r4,128
  800b10:	21120804 	addi	r4,r4,18464
  800b14:	08040b80 	call	8040b8 <alt_printf>
		button = button & mask;
		alt_printf("K BUTTON %x 0", button);
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;
  800b18:	04400044 	movi	r17,1
	}


	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){
  800b1c:	01402034 	movhi	r5,128
  800b20:	29520e04 	addi	r5,r5,18488
  800b24:	8009883a 	mov	r4,r16
  800b28:	0802ccc0 	call	802ccc <strcmp>
  800b2c:	10000d1e 	bne	r2,zero,800b64 <parse_request+0x2c4>

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800b30:	d120b617 	ldw	r4,-32040(gp)
  800b34:	01801904 	movi	r6,100
  800b38:	000b883a 	mov	r5,zero
  800b3c:	08028bc0 	call	8028bc <memset>
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800b40:	d9400217 	ldw	r5,8(sp)
  800b44:	d120b617 	ldw	r4,-32040(gp)
  800b48:	01801904 	movi	r6,100
	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
  800b4c:	04400044 	movi	r17,1
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800b50:	0802d4c0 	call	802d4c <strncpy>
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800b54:	d120b617 	ldw	r4,-32040(gp)

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_offset = 0;
  800b58:	d020b315 	stw	zero,-32052(gp)
		disp_length = strlen(disp_buf);
  800b5c:	0802d300 	call	802d30 <strlen>
  800b60:	d0a0b215 	stw	r2,-32056(gp)

	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){
  800b64:	01402034 	movhi	r5,128
  800b68:	29521004 	addi	r5,r5,18496
  800b6c:	8009883a 	mov	r4,r16
  800b70:	0802ccc0 	call	802ccc <strcmp>
  800b74:	1000041e 	bne	r2,zero,800b88 <parse_request+0x2e8>
		//alt_printf("Tried to write LEDWRITE");
		matched = 1;

		led_val = atoi(tokens[2]);
  800b78:	d9000217 	ldw	r4,8(sp)
  800b7c:	080287c0 	call	80287c <atoi>
  800b80:	d0a0b115 	stw	r2,-32060(gp)
  800b84:	00000706 	br	800ba4 <parse_request+0x304>
		IOWR(LED_BASE, 0, led_val);
		throw_code(&"LEDFLASH", 0);
		return;

	}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){
  800b88:	01402034 	movhi	r5,128
  800b8c:	29521304 	addi	r5,r5,18508
  800b90:	8009883a 	mov	r4,r16
  800b94:	0802ccc0 	call	802ccc <strcmp>
  800b98:	1000091e 	bne	r2,zero,800bc0 <parse_request+0x320>
			//alt_printf("Tried to write LEDFLASH");
			matched = 1;

			int k = atoi(tokens[2]);
  800b9c:	d9000217 	ldw	r4,8(sp)
  800ba0:	080287c0 	call	80287c <atoi>
			IOWR(LED_BASE, 0, k);
  800ba4:	00c04034 	movhi	r3,256
  800ba8:	18c47804 	addi	r3,r3,4576
  800bac:	18800035 	stwio	r2,0(r3)
			throw_code(&"LEDFLASH", 0);
  800bb0:	01002034 	movhi	r4,128
  800bb4:	000b883a 	mov	r5,zero
  800bb8:	21121304 	addi	r4,r4,18508
  800bbc:	00001006 	br	800c00 <parse_request+0x360>
			return;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){
  800bc0:	01402034 	movhi	r5,128
  800bc4:	29521604 	addi	r5,r5,18520
  800bc8:	8009883a 	mov	r4,r16
  800bcc:	0802ccc0 	call	802ccc <strcmp>
  800bd0:	1000071e 	bne	r2,zero,800bf0 <parse_request+0x350>
			matched = 1;

			debug = atoi(tokens[2]);
  800bd4:	d9000217 	ldw	r4,8(sp)
  800bd8:	080287c0 	call	80287c <atoi>
			throw_code(&"DEBUG", 0);
  800bdc:	01002034 	movhi	r4,128

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){
			matched = 1;

			debug = atoi(tokens[2]);
  800be0:	d0a0b015 	stw	r2,-32064(gp)
			throw_code(&"DEBUG", 0);
  800be4:	000b883a 	mov	r5,zero
  800be8:	21121604 	addi	r4,r4,18520
  800bec:	00000406 	br	800c00 <parse_request+0x360>
			return;
		}

	if (!matched){
  800bf0:	8800041e 	bne	r17,zero,800c04 <parse_request+0x364>
		throw_code(&"ERR", 2);
  800bf4:	01400084 	movi	r5,2
  800bf8:	01002034 	movhi	r4,128
  800bfc:	2111f004 	addi	r4,r4,18368
  800c00:	080088c0 	call	80088c <throw_code>
		return;
	}

}
  800c04:	dfc01117 	ldw	ra,68(sp)
  800c08:	dd401017 	ldw	r21,64(sp)
  800c0c:	dd000f17 	ldw	r20,60(sp)
  800c10:	dcc00e17 	ldw	r19,56(sp)
  800c14:	dc800d17 	ldw	r18,52(sp)
  800c18:	dc400c17 	ldw	r17,48(sp)
  800c1c:	dc000b17 	ldw	r16,44(sp)
  800c20:	dec01204 	addi	sp,sp,72
  800c24:	f800283a 	ret

00800c28 <main>:

//HEX write
//---------------------------------------------------------------


int main() {
  800c28:	defff404 	addi	sp,sp,-48

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800c2c:	01001904 	movi	r4,100

//HEX write
//---------------------------------------------------------------


int main() {
  800c30:	dfc00b15 	stw	ra,44(sp)
  800c34:	dc000915 	stw	r16,36(sp)
  800c38:	dc400a15 	stw	r17,40(sp)

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800c3c:	08028940 	call	802894 <malloc>
	strcpy(disp_buf, "______");
  800c40:	01402034 	movhi	r5,128
  800c44:	29521804 	addi	r5,r5,18528
  800c48:	1009883a 	mov	r4,r2


int main() {

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800c4c:	d0a0b615 	stw	r2,-32040(gp)
	strcpy(disp_buf, "______");
  800c50:	0802d040 	call	802d04 <strcpy>
	clr_disp();
  800c54:	08005440 	call	800544 <clr_disp>
	disp_timer_init(disp_timer_isr);
  800c58:	01002034 	movhi	r4,128
  800c5c:	21014304 	addi	r4,r4,1292
  800c60:	08006980 	call	800698 <disp_timer_init>
	disp_length = 6;
  800c64:	00800184 	movi	r2,6


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800c68:	01001004 	movi	r4,64
	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
	strcpy(disp_buf, "______");
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;
  800c6c:	d0a0b215 	stw	r2,-32056(gp)


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800c70:	08028940 	call	802894 <malloc>

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800c74:	01000204 	movi	r4,8
	disp_timer_init(disp_timer_isr);
	disp_length = 6;


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800c78:	d0a0b415 	stw	r2,-32048(gp)

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800c7c:	04002034 	movhi	r16,128
  800c80:	08028940 	call	802894 <malloc>
  800c84:	84146f04 	addi	r16,r16,20924
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800c88:	01000204 	movi	r4,8

	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800c8c:	80800015 	stw	r2,0(r16)
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800c90:	08028940 	call	802894 <malloc>
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  800c94:	01000204 	movi	r4,8
	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800c98:	80800115 	stw	r2,4(r16)
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  800c9c:	08028940 	call	802894 <malloc>
  800ca0:	80800215 	stw	r2,8(r16)

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800ca4:	00800744 	movi	r2,29
  800ca8:	d8800615 	stw	r2,24(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800cac:	d8800315 	stw	r2,12(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800cb0:	d8800015 	stw	r2,0(sp)
	x_buf = &x;
  800cb4:	d8800604 	addi	r2,sp,24
  800cb8:	d0a0b515 	stw	r2,-32044(gp)
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800cbc:	01001d04 	movi	r4,116

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
  800cc0:	d8800304 	addi	r2,sp,12
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800cc4:	d8000715 	stw	zero,28(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800cc8:	d8000415 	stw	zero,16(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800ccc:	d8000115 	stw	zero,4(sp)
	x_buf = &x;
	y_buf = &y;
  800cd0:	d0a0b715 	stw	r2,-32036(gp)
	z_buf = &z;
  800cd4:	d6e0b815 	stw	sp,-32032(gp)

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800cd8:	08028940 	call	802894 <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800cdc:	01001d04 	movi	r4,116
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800ce0:	1021883a 	mov	r16,r2
  800ce4:	d8800815 	stw	r2,32(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800ce8:	08028940 	call	802894 <malloc>
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800cec:	01801d04 	movi	r6,116
  800cf0:	000b883a 	mov	r5,zero
  800cf4:	1009883a 	mov	r4,r2
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800cf8:	d8800515 	stw	r2,20(sp)
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800cfc:	08028bc0 	call	8028bc <memset>
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800d00:	01001d04 	movi	r4,116
  800d04:	08028940 	call	802894 <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800d08:	01801d04 	movi	r6,116
  800d0c:	000b883a 	mov	r5,zero
  800d10:	8009883a 	mov	r4,r16

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800d14:	d8800215 	stw	r2,8(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800d18:	08028bc0 	call	8028bc <memset>

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  800d1c:	01001904 	movi	r4,100
  800d20:	08028940 	call	802894 <malloc>
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800d24:	01801904 	movi	r6,100
  800d28:	000b883a 	mov	r5,zero
  800d2c:	1009883a 	mov	r4,r2
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  800d30:	d0a0b615 	stw	r2,-32040(gp)
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800d34:	08028bc0 	call	8028bc <memset>

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  800d38:	01002034 	movhi	r4,128
  800d3c:	21121a04 	addi	r4,r4,18536
  800d40:	080448c0 	call	80448c <alt_up_accelerometer_spi_open_dev>

	//to_hex(16,3,hexbuffers[0]);


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  800d44:	01002034 	movhi	r4,128
  800d48:	21007d04 	addi	r4,r4,500
	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  800d4c:	d0a0bb15 	stw	r2,-32020(gp)

	//to_hex(16,3,hexbuffers[0]);


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  800d50:	08006280 	call	800628 <acc_timer_init>
	alt_timestamp_start();
  800d54:	08043f40 	call	8043f4 <alt_timestamp_start>

	//Command response loop
	while(1){
		read_request(cmdbuffer);
  800d58:	d120b417 	ldw	r4,-32048(gp)
  800d5c:	08005940 	call	800594 <read_request>
		parse_request(cmdbuffer);
  800d60:	d120b417 	ldw	r4,-32048(gp)
  800d64:	08008a00 	call	8008a0 <parse_request>

		//Request response timing: first char received to last char sent
		if (debug){
  800d68:	d0a0b017 	ldw	r2,-32064(gp)
  800d6c:	103ffa26 	beq	r2,zero,800d58 <__alt_data_end+0xff800d58>
			printf("Response time (us) : %i \n",(alt_timestamp()-latency)/(alt_timestamp_freq()/1000000));
  800d70:	08044380 	call	804438 <alt_timestamp>
  800d74:	d460b917 	ldw	r17,-32028(gp)
  800d78:	d120ba17 	ldw	r4,-32024(gp)
  800d7c:	1463c83a 	sub	r17,r2,r17
  800d80:	1907c83a 	sub	r3,r3,r4
  800d84:	1445803a 	cmpltu	r2,r2,r17
  800d88:	18a1c83a 	sub	r16,r3,r2
  800d8c:	08044840 	call	804484 <alt_timestamp_freq>
  800d90:	014003f4 	movhi	r5,15
  800d94:	29509004 	addi	r5,r5,16960
  800d98:	1009883a 	mov	r4,r2
  800d9c:	08014c00 	call	8014c0 <__udivsi3>
  800da0:	8809883a 	mov	r4,r17
  800da4:	800b883a 	mov	r5,r16
  800da8:	100d883a 	mov	r6,r2
  800dac:	000f883a 	mov	r7,zero
  800db0:	0800dcc0 	call	800dcc <__udivdi3>
  800db4:	01002034 	movhi	r4,128
  800db8:	100b883a 	mov	r5,r2
  800dbc:	180d883a 	mov	r6,r3
  800dc0:	21122004 	addi	r4,r4,18560
  800dc4:	0802b540 	call	802b54 <printf>
  800dc8:	003fe306 	br	800d58 <__alt_data_end+0xff800d58>

00800dcc <__udivdi3>:
  800dcc:	defff404 	addi	sp,sp,-48
  800dd0:	dcc00515 	stw	r19,20(sp)
  800dd4:	dc000215 	stw	r16,8(sp)
  800dd8:	dfc00b15 	stw	ra,44(sp)
  800ddc:	df000a15 	stw	fp,40(sp)
  800de0:	ddc00915 	stw	r23,36(sp)
  800de4:	dd800815 	stw	r22,32(sp)
  800de8:	dd400715 	stw	r21,28(sp)
  800dec:	dd000615 	stw	r20,24(sp)
  800df0:	dc800415 	stw	r18,16(sp)
  800df4:	dc400315 	stw	r17,12(sp)
  800df8:	2027883a 	mov	r19,r4
  800dfc:	2821883a 	mov	r16,r5
  800e00:	3800461e 	bne	r7,zero,800f1c <__udivdi3+0x150>
  800e04:	3023883a 	mov	r17,r6
  800e08:	2025883a 	mov	r18,r4
  800e0c:	2980572e 	bgeu	r5,r6,800f6c <__udivdi3+0x1a0>
  800e10:	00bfffd4 	movui	r2,65535
  800e14:	282d883a 	mov	r22,r5
  800e18:	1180b236 	bltu	r2,r6,8010e4 <__udivdi3+0x318>
  800e1c:	00803fc4 	movi	r2,255
  800e20:	1185803a 	cmpltu	r2,r2,r6
  800e24:	100490fa 	slli	r2,r2,3
  800e28:	3086d83a 	srl	r3,r6,r2
  800e2c:	01002034 	movhi	r4,128
  800e30:	211231c4 	addi	r4,r4,18631
  800e34:	20c7883a 	add	r3,r4,r3
  800e38:	18c00003 	ldbu	r3,0(r3)
  800e3c:	1885883a 	add	r2,r3,r2
  800e40:	00c00804 	movi	r3,32
  800e44:	1887c83a 	sub	r3,r3,r2
  800e48:	18000526 	beq	r3,zero,800e60 <__udivdi3+0x94>
  800e4c:	80e0983a 	sll	r16,r16,r3
  800e50:	9884d83a 	srl	r2,r19,r2
  800e54:	30e2983a 	sll	r17,r6,r3
  800e58:	98e4983a 	sll	r18,r19,r3
  800e5c:	142cb03a 	or	r22,r2,r16
  800e60:	882ad43a 	srli	r21,r17,16
  800e64:	b009883a 	mov	r4,r22
  800e68:	8d3fffcc 	andi	r20,r17,65535
  800e6c:	a80b883a 	mov	r5,r21
  800e70:	08015240 	call	801524 <__umodsi3>
  800e74:	b009883a 	mov	r4,r22
  800e78:	a80b883a 	mov	r5,r21
  800e7c:	1027883a 	mov	r19,r2
  800e80:	08014c00 	call	8014c0 <__udivsi3>
  800e84:	100b883a 	mov	r5,r2
  800e88:	a009883a 	mov	r4,r20
  800e8c:	102d883a 	mov	r22,r2
  800e90:	080157c0 	call	80157c <__mulsi3>
  800e94:	9826943a 	slli	r19,r19,16
  800e98:	9006d43a 	srli	r3,r18,16
  800e9c:	1cc6b03a 	or	r3,r3,r19
  800ea0:	1880052e 	bgeu	r3,r2,800eb8 <__udivdi3+0xec>
  800ea4:	1c47883a 	add	r3,r3,r17
  800ea8:	b13fffc4 	addi	r4,r22,-1
  800eac:	1c400136 	bltu	r3,r17,800eb4 <__udivdi3+0xe8>
  800eb0:	18814236 	bltu	r3,r2,8013bc <__udivdi3+0x5f0>
  800eb4:	202d883a 	mov	r22,r4
  800eb8:	18a1c83a 	sub	r16,r3,r2
  800ebc:	8009883a 	mov	r4,r16
  800ec0:	a80b883a 	mov	r5,r21
  800ec4:	08015240 	call	801524 <__umodsi3>
  800ec8:	1027883a 	mov	r19,r2
  800ecc:	8009883a 	mov	r4,r16
  800ed0:	a80b883a 	mov	r5,r21
  800ed4:	9826943a 	slli	r19,r19,16
  800ed8:	08014c00 	call	8014c0 <__udivsi3>
  800edc:	100b883a 	mov	r5,r2
  800ee0:	a009883a 	mov	r4,r20
  800ee4:	94bfffcc 	andi	r18,r18,65535
  800ee8:	1021883a 	mov	r16,r2
  800eec:	94e4b03a 	or	r18,r18,r19
  800ef0:	080157c0 	call	80157c <__mulsi3>
  800ef4:	9080052e 	bgeu	r18,r2,800f0c <__udivdi3+0x140>
  800ef8:	8ca5883a 	add	r18,r17,r18
  800efc:	80ffffc4 	addi	r3,r16,-1
  800f00:	94410c36 	bltu	r18,r17,801334 <__udivdi3+0x568>
  800f04:	90810b2e 	bgeu	r18,r2,801334 <__udivdi3+0x568>
  800f08:	843fff84 	addi	r16,r16,-2
  800f0c:	b004943a 	slli	r2,r22,16
  800f10:	0007883a 	mov	r3,zero
  800f14:	1404b03a 	or	r2,r2,r16
  800f18:	00005e06 	br	801094 <__udivdi3+0x2c8>
  800f1c:	29c05b36 	bltu	r5,r7,80108c <__udivdi3+0x2c0>
  800f20:	00bfffd4 	movui	r2,65535
  800f24:	11c0672e 	bgeu	r2,r7,8010c4 <__udivdi3+0x2f8>
  800f28:	00804034 	movhi	r2,256
  800f2c:	10bfffc4 	addi	r2,r2,-1
  800f30:	11c10a36 	bltu	r2,r7,80135c <__udivdi3+0x590>
  800f34:	00800404 	movi	r2,16
  800f38:	3886d83a 	srl	r3,r7,r2
  800f3c:	01002034 	movhi	r4,128
  800f40:	211231c4 	addi	r4,r4,18631
  800f44:	20c7883a 	add	r3,r4,r3
  800f48:	18c00003 	ldbu	r3,0(r3)
  800f4c:	05c00804 	movi	r23,32
  800f50:	1885883a 	add	r2,r3,r2
  800f54:	b8afc83a 	sub	r23,r23,r2
  800f58:	b800671e 	bne	r23,zero,8010f8 <__udivdi3+0x32c>
  800f5c:	3c010536 	bltu	r7,r16,801374 <__udivdi3+0x5a8>
  800f60:	9985403a 	cmpgeu	r2,r19,r6
  800f64:	0007883a 	mov	r3,zero
  800f68:	00004a06 	br	801094 <__udivdi3+0x2c8>
  800f6c:	3000041e 	bne	r6,zero,800f80 <__udivdi3+0x1b4>
  800f70:	000b883a 	mov	r5,zero
  800f74:	01000044 	movi	r4,1
  800f78:	08014c00 	call	8014c0 <__udivsi3>
  800f7c:	1023883a 	mov	r17,r2
  800f80:	00bfffd4 	movui	r2,65535
  800f84:	1440532e 	bgeu	r2,r17,8010d4 <__udivdi3+0x308>
  800f88:	00804034 	movhi	r2,256
  800f8c:	10bfffc4 	addi	r2,r2,-1
  800f90:	1440f436 	bltu	r2,r17,801364 <__udivdi3+0x598>
  800f94:	00800404 	movi	r2,16
  800f98:	8886d83a 	srl	r3,r17,r2
  800f9c:	01002034 	movhi	r4,128
  800fa0:	211231c4 	addi	r4,r4,18631
  800fa4:	20c7883a 	add	r3,r4,r3
  800fa8:	18c00003 	ldbu	r3,0(r3)
  800fac:	1885883a 	add	r2,r3,r2
  800fb0:	00c00804 	movi	r3,32
  800fb4:	1887c83a 	sub	r3,r3,r2
  800fb8:	1800a51e 	bne	r3,zero,801250 <__udivdi3+0x484>
  800fbc:	882ad43a 	srli	r21,r17,16
  800fc0:	8461c83a 	sub	r16,r16,r17
  800fc4:	8d3fffcc 	andi	r20,r17,65535
  800fc8:	00c00044 	movi	r3,1
  800fcc:	a80b883a 	mov	r5,r21
  800fd0:	8009883a 	mov	r4,r16
  800fd4:	d8c00115 	stw	r3,4(sp)
  800fd8:	08015240 	call	801524 <__umodsi3>
  800fdc:	a80b883a 	mov	r5,r21
  800fe0:	8009883a 	mov	r4,r16
  800fe4:	1027883a 	mov	r19,r2
  800fe8:	08014c00 	call	8014c0 <__udivsi3>
  800fec:	a00b883a 	mov	r5,r20
  800ff0:	1009883a 	mov	r4,r2
  800ff4:	102d883a 	mov	r22,r2
  800ff8:	080157c0 	call	80157c <__mulsi3>
  800ffc:	9826943a 	slli	r19,r19,16
  801000:	900ed43a 	srli	r7,r18,16
  801004:	d8c00117 	ldw	r3,4(sp)
  801008:	3cceb03a 	or	r7,r7,r19
  80100c:	3880052e 	bgeu	r7,r2,801024 <__udivdi3+0x258>
  801010:	3c4f883a 	add	r7,r7,r17
  801014:	b13fffc4 	addi	r4,r22,-1
  801018:	3c400136 	bltu	r7,r17,801020 <__udivdi3+0x254>
  80101c:	3880e436 	bltu	r7,r2,8013b0 <__udivdi3+0x5e4>
  801020:	202d883a 	mov	r22,r4
  801024:	38a1c83a 	sub	r16,r7,r2
  801028:	8009883a 	mov	r4,r16
  80102c:	a80b883a 	mov	r5,r21
  801030:	d8c00115 	stw	r3,4(sp)
  801034:	08015240 	call	801524 <__umodsi3>
  801038:	1027883a 	mov	r19,r2
  80103c:	8009883a 	mov	r4,r16
  801040:	a80b883a 	mov	r5,r21
  801044:	9826943a 	slli	r19,r19,16
  801048:	08014c00 	call	8014c0 <__udivsi3>
  80104c:	a00b883a 	mov	r5,r20
  801050:	1009883a 	mov	r4,r2
  801054:	94bfffcc 	andi	r18,r18,65535
  801058:	1021883a 	mov	r16,r2
  80105c:	94e4b03a 	or	r18,r18,r19
  801060:	080157c0 	call	80157c <__mulsi3>
  801064:	d8c00117 	ldw	r3,4(sp)
  801068:	9080052e 	bgeu	r18,r2,801080 <__udivdi3+0x2b4>
  80106c:	8ca5883a 	add	r18,r17,r18
  801070:	813fffc4 	addi	r4,r16,-1
  801074:	9440ad36 	bltu	r18,r17,80132c <__udivdi3+0x560>
  801078:	9080ac2e 	bgeu	r18,r2,80132c <__udivdi3+0x560>
  80107c:	843fff84 	addi	r16,r16,-2
  801080:	b004943a 	slli	r2,r22,16
  801084:	1404b03a 	or	r2,r2,r16
  801088:	00000206 	br	801094 <__udivdi3+0x2c8>
  80108c:	0007883a 	mov	r3,zero
  801090:	0005883a 	mov	r2,zero
  801094:	dfc00b17 	ldw	ra,44(sp)
  801098:	df000a17 	ldw	fp,40(sp)
  80109c:	ddc00917 	ldw	r23,36(sp)
  8010a0:	dd800817 	ldw	r22,32(sp)
  8010a4:	dd400717 	ldw	r21,28(sp)
  8010a8:	dd000617 	ldw	r20,24(sp)
  8010ac:	dcc00517 	ldw	r19,20(sp)
  8010b0:	dc800417 	ldw	r18,16(sp)
  8010b4:	dc400317 	ldw	r17,12(sp)
  8010b8:	dc000217 	ldw	r16,8(sp)
  8010bc:	dec00c04 	addi	sp,sp,48
  8010c0:	f800283a 	ret
  8010c4:	00803fc4 	movi	r2,255
  8010c8:	11c5803a 	cmpltu	r2,r2,r7
  8010cc:	100490fa 	slli	r2,r2,3
  8010d0:	003f9906 	br	800f38 <__alt_data_end+0xff800f38>
  8010d4:	00803fc4 	movi	r2,255
  8010d8:	1445803a 	cmpltu	r2,r2,r17
  8010dc:	100490fa 	slli	r2,r2,3
  8010e0:	003fad06 	br	800f98 <__alt_data_end+0xff800f98>
  8010e4:	00804034 	movhi	r2,256
  8010e8:	10bfffc4 	addi	r2,r2,-1
  8010ec:	11809f36 	bltu	r2,r6,80136c <__udivdi3+0x5a0>
  8010f0:	00800404 	movi	r2,16
  8010f4:	003f4c06 	br	800e28 <__alt_data_end+0xff800e28>
  8010f8:	3dce983a 	sll	r7,r7,r23
  8010fc:	30b8d83a 	srl	fp,r6,r2
  801100:	80a2d83a 	srl	r17,r16,r2
  801104:	35cc983a 	sll	r6,r6,r23
  801108:	3f38b03a 	or	fp,r7,fp
  80110c:	e024d43a 	srli	r18,fp,16
  801110:	9884d83a 	srl	r2,r19,r2
  801114:	85e0983a 	sll	r16,r16,r23
  801118:	8809883a 	mov	r4,r17
  80111c:	900b883a 	mov	r5,r18
  801120:	d9800015 	stw	r6,0(sp)
  801124:	1420b03a 	or	r16,r2,r16
  801128:	08015240 	call	801524 <__umodsi3>
  80112c:	900b883a 	mov	r5,r18
  801130:	8809883a 	mov	r4,r17
  801134:	1029883a 	mov	r20,r2
  801138:	e5bfffcc 	andi	r22,fp,65535
  80113c:	08014c00 	call	8014c0 <__udivsi3>
  801140:	100b883a 	mov	r5,r2
  801144:	b009883a 	mov	r4,r22
  801148:	102b883a 	mov	r21,r2
  80114c:	080157c0 	call	80157c <__mulsi3>
  801150:	a028943a 	slli	r20,r20,16
  801154:	8006d43a 	srli	r3,r16,16
  801158:	1d06b03a 	or	r3,r3,r20
  80115c:	1880042e 	bgeu	r3,r2,801170 <__udivdi3+0x3a4>
  801160:	1f07883a 	add	r3,r3,fp
  801164:	a93fffc4 	addi	r4,r21,-1
  801168:	1f00892e 	bgeu	r3,fp,801390 <__udivdi3+0x5c4>
  80116c:	202b883a 	mov	r21,r4
  801170:	18a3c83a 	sub	r17,r3,r2
  801174:	8809883a 	mov	r4,r17
  801178:	900b883a 	mov	r5,r18
  80117c:	08015240 	call	801524 <__umodsi3>
  801180:	1029883a 	mov	r20,r2
  801184:	8809883a 	mov	r4,r17
  801188:	900b883a 	mov	r5,r18
  80118c:	a028943a 	slli	r20,r20,16
  801190:	08014c00 	call	8014c0 <__udivsi3>
  801194:	100b883a 	mov	r5,r2
  801198:	b009883a 	mov	r4,r22
  80119c:	843fffcc 	andi	r16,r16,65535
  8011a0:	1023883a 	mov	r17,r2
  8011a4:	8520b03a 	or	r16,r16,r20
  8011a8:	080157c0 	call	80157c <__mulsi3>
  8011ac:	8080042e 	bgeu	r16,r2,8011c0 <__udivdi3+0x3f4>
  8011b0:	8721883a 	add	r16,r16,fp
  8011b4:	88ffffc4 	addi	r3,r17,-1
  8011b8:	8700712e 	bgeu	r16,fp,801380 <__udivdi3+0x5b4>
  8011bc:	1823883a 	mov	r17,r3
  8011c0:	a80e943a 	slli	r7,r21,16
  8011c4:	d8c00017 	ldw	r3,0(sp)
  8011c8:	80a1c83a 	sub	r16,r16,r2
  8011cc:	3c64b03a 	or	r18,r7,r17
  8011d0:	1d3fffcc 	andi	r20,r3,65535
  8011d4:	9022d43a 	srli	r17,r18,16
  8011d8:	95bfffcc 	andi	r22,r18,65535
  8011dc:	a00b883a 	mov	r5,r20
  8011e0:	b009883a 	mov	r4,r22
  8011e4:	182ad43a 	srli	r21,r3,16
  8011e8:	080157c0 	call	80157c <__mulsi3>
  8011ec:	a00b883a 	mov	r5,r20
  8011f0:	8809883a 	mov	r4,r17
  8011f4:	1039883a 	mov	fp,r2
  8011f8:	080157c0 	call	80157c <__mulsi3>
  8011fc:	8809883a 	mov	r4,r17
  801200:	a80b883a 	mov	r5,r21
  801204:	1029883a 	mov	r20,r2
  801208:	080157c0 	call	80157c <__mulsi3>
  80120c:	a80b883a 	mov	r5,r21
  801210:	b009883a 	mov	r4,r22
  801214:	1023883a 	mov	r17,r2
  801218:	080157c0 	call	80157c <__mulsi3>
  80121c:	e006d43a 	srli	r3,fp,16
  801220:	1505883a 	add	r2,r2,r20
  801224:	1887883a 	add	r3,r3,r2
  801228:	1d00022e 	bgeu	r3,r20,801234 <__udivdi3+0x468>
  80122c:	00800074 	movhi	r2,1
  801230:	88a3883a 	add	r17,r17,r2
  801234:	1804d43a 	srli	r2,r3,16
  801238:	1463883a 	add	r17,r2,r17
  80123c:	84404436 	bltu	r16,r17,801350 <__udivdi3+0x584>
  801240:	84403e26 	beq	r16,r17,80133c <__udivdi3+0x570>
  801244:	9005883a 	mov	r2,r18
  801248:	0007883a 	mov	r3,zero
  80124c:	003f9106 	br	801094 <__alt_data_end+0xff801094>
  801250:	88e2983a 	sll	r17,r17,r3
  801254:	80aed83a 	srl	r23,r16,r2
  801258:	80e0983a 	sll	r16,r16,r3
  80125c:	882ad43a 	srli	r21,r17,16
  801260:	9884d83a 	srl	r2,r19,r2
  801264:	b809883a 	mov	r4,r23
  801268:	a80b883a 	mov	r5,r21
  80126c:	98e4983a 	sll	r18,r19,r3
  801270:	142cb03a 	or	r22,r2,r16
  801274:	08015240 	call	801524 <__umodsi3>
  801278:	b809883a 	mov	r4,r23
  80127c:	a80b883a 	mov	r5,r21
  801280:	1027883a 	mov	r19,r2
  801284:	8d3fffcc 	andi	r20,r17,65535
  801288:	08014c00 	call	8014c0 <__udivsi3>
  80128c:	a009883a 	mov	r4,r20
  801290:	100b883a 	mov	r5,r2
  801294:	102f883a 	mov	r23,r2
  801298:	080157c0 	call	80157c <__mulsi3>
  80129c:	9826943a 	slli	r19,r19,16
  8012a0:	b008d43a 	srli	r4,r22,16
  8012a4:	24c8b03a 	or	r4,r4,r19
  8012a8:	2080062e 	bgeu	r4,r2,8012c4 <__udivdi3+0x4f8>
  8012ac:	2449883a 	add	r4,r4,r17
  8012b0:	b8ffffc4 	addi	r3,r23,-1
  8012b4:	24403c36 	bltu	r4,r17,8013a8 <__udivdi3+0x5dc>
  8012b8:	20803b2e 	bgeu	r4,r2,8013a8 <__udivdi3+0x5dc>
  8012bc:	bdffff84 	addi	r23,r23,-2
  8012c0:	2449883a 	add	r4,r4,r17
  8012c4:	20a1c83a 	sub	r16,r4,r2
  8012c8:	a80b883a 	mov	r5,r21
  8012cc:	8009883a 	mov	r4,r16
  8012d0:	08015240 	call	801524 <__umodsi3>
  8012d4:	a80b883a 	mov	r5,r21
  8012d8:	8009883a 	mov	r4,r16
  8012dc:	1027883a 	mov	r19,r2
  8012e0:	08014c00 	call	8014c0 <__udivsi3>
  8012e4:	a009883a 	mov	r4,r20
  8012e8:	100b883a 	mov	r5,r2
  8012ec:	9826943a 	slli	r19,r19,16
  8012f0:	1039883a 	mov	fp,r2
  8012f4:	080157c0 	call	80157c <__mulsi3>
  8012f8:	b13fffcc 	andi	r4,r22,65535
  8012fc:	24c8b03a 	or	r4,r4,r19
  801300:	2080062e 	bgeu	r4,r2,80131c <__udivdi3+0x550>
  801304:	2449883a 	add	r4,r4,r17
  801308:	e0ffffc4 	addi	r3,fp,-1
  80130c:	24402436 	bltu	r4,r17,8013a0 <__udivdi3+0x5d4>
  801310:	2080232e 	bgeu	r4,r2,8013a0 <__udivdi3+0x5d4>
  801314:	e73fff84 	addi	fp,fp,-2
  801318:	2449883a 	add	r4,r4,r17
  80131c:	b82e943a 	slli	r23,r23,16
  801320:	20a1c83a 	sub	r16,r4,r2
  801324:	bf06b03a 	or	r3,r23,fp
  801328:	003f2806 	br	800fcc <__alt_data_end+0xff800fcc>
  80132c:	2021883a 	mov	r16,r4
  801330:	003f5306 	br	801080 <__alt_data_end+0xff801080>
  801334:	1821883a 	mov	r16,r3
  801338:	003ef406 	br	800f0c <__alt_data_end+0xff800f0c>
  80133c:	1806943a 	slli	r3,r3,16
  801340:	9de6983a 	sll	r19,r19,r23
  801344:	e73fffcc 	andi	fp,fp,65535
  801348:	1f07883a 	add	r3,r3,fp
  80134c:	98ffbd2e 	bgeu	r19,r3,801244 <__alt_data_end+0xff801244>
  801350:	90bfffc4 	addi	r2,r18,-1
  801354:	0007883a 	mov	r3,zero
  801358:	003f4e06 	br	801094 <__alt_data_end+0xff801094>
  80135c:	00800604 	movi	r2,24
  801360:	003ef506 	br	800f38 <__alt_data_end+0xff800f38>
  801364:	00800604 	movi	r2,24
  801368:	003f0b06 	br	800f98 <__alt_data_end+0xff800f98>
  80136c:	00800604 	movi	r2,24
  801370:	003ead06 	br	800e28 <__alt_data_end+0xff800e28>
  801374:	0007883a 	mov	r3,zero
  801378:	00800044 	movi	r2,1
  80137c:	003f4506 	br	801094 <__alt_data_end+0xff801094>
  801380:	80bf8e2e 	bgeu	r16,r2,8011bc <__alt_data_end+0xff8011bc>
  801384:	8c7fff84 	addi	r17,r17,-2
  801388:	8721883a 	add	r16,r16,fp
  80138c:	003f8c06 	br	8011c0 <__alt_data_end+0xff8011c0>
  801390:	18bf762e 	bgeu	r3,r2,80116c <__alt_data_end+0xff80116c>
  801394:	ad7fff84 	addi	r21,r21,-2
  801398:	1f07883a 	add	r3,r3,fp
  80139c:	003f7406 	br	801170 <__alt_data_end+0xff801170>
  8013a0:	1839883a 	mov	fp,r3
  8013a4:	003fdd06 	br	80131c <__alt_data_end+0xff80131c>
  8013a8:	182f883a 	mov	r23,r3
  8013ac:	003fc506 	br	8012c4 <__alt_data_end+0xff8012c4>
  8013b0:	b5bfff84 	addi	r22,r22,-2
  8013b4:	3c4f883a 	add	r7,r7,r17
  8013b8:	003f1a06 	br	801024 <__alt_data_end+0xff801024>
  8013bc:	b5bfff84 	addi	r22,r22,-2
  8013c0:	1c47883a 	add	r3,r3,r17
  8013c4:	003ebc06 	br	800eb8 <__alt_data_end+0xff800eb8>

008013c8 <__divsi3>:
  8013c8:	20001b16 	blt	r4,zero,801438 <__divsi3+0x70>
  8013cc:	000f883a 	mov	r7,zero
  8013d0:	28001616 	blt	r5,zero,80142c <__divsi3+0x64>
  8013d4:	200d883a 	mov	r6,r4
  8013d8:	29001a2e 	bgeu	r5,r4,801444 <__divsi3+0x7c>
  8013dc:	00800804 	movi	r2,32
  8013e0:	00c00044 	movi	r3,1
  8013e4:	00000106 	br	8013ec <__divsi3+0x24>
  8013e8:	10000d26 	beq	r2,zero,801420 <__divsi3+0x58>
  8013ec:	294b883a 	add	r5,r5,r5
  8013f0:	10bfffc4 	addi	r2,r2,-1
  8013f4:	18c7883a 	add	r3,r3,r3
  8013f8:	293ffb36 	bltu	r5,r4,8013e8 <__alt_data_end+0xff8013e8>
  8013fc:	0005883a 	mov	r2,zero
  801400:	18000726 	beq	r3,zero,801420 <__divsi3+0x58>
  801404:	0005883a 	mov	r2,zero
  801408:	31400236 	bltu	r6,r5,801414 <__divsi3+0x4c>
  80140c:	314dc83a 	sub	r6,r6,r5
  801410:	10c4b03a 	or	r2,r2,r3
  801414:	1806d07a 	srli	r3,r3,1
  801418:	280ad07a 	srli	r5,r5,1
  80141c:	183ffa1e 	bne	r3,zero,801408 <__alt_data_end+0xff801408>
  801420:	38000126 	beq	r7,zero,801428 <__divsi3+0x60>
  801424:	0085c83a 	sub	r2,zero,r2
  801428:	f800283a 	ret
  80142c:	014bc83a 	sub	r5,zero,r5
  801430:	39c0005c 	xori	r7,r7,1
  801434:	003fe706 	br	8013d4 <__alt_data_end+0xff8013d4>
  801438:	0109c83a 	sub	r4,zero,r4
  80143c:	01c00044 	movi	r7,1
  801440:	003fe306 	br	8013d0 <__alt_data_end+0xff8013d0>
  801444:	00c00044 	movi	r3,1
  801448:	003fee06 	br	801404 <__alt_data_end+0xff801404>

0080144c <__modsi3>:
  80144c:	20001716 	blt	r4,zero,8014ac <__modsi3+0x60>
  801450:	000f883a 	mov	r7,zero
  801454:	2005883a 	mov	r2,r4
  801458:	28001216 	blt	r5,zero,8014a4 <__modsi3+0x58>
  80145c:	2900162e 	bgeu	r5,r4,8014b8 <__modsi3+0x6c>
  801460:	01800804 	movi	r6,32
  801464:	00c00044 	movi	r3,1
  801468:	00000106 	br	801470 <__modsi3+0x24>
  80146c:	30000a26 	beq	r6,zero,801498 <__modsi3+0x4c>
  801470:	294b883a 	add	r5,r5,r5
  801474:	31bfffc4 	addi	r6,r6,-1
  801478:	18c7883a 	add	r3,r3,r3
  80147c:	293ffb36 	bltu	r5,r4,80146c <__alt_data_end+0xff80146c>
  801480:	18000526 	beq	r3,zero,801498 <__modsi3+0x4c>
  801484:	1806d07a 	srli	r3,r3,1
  801488:	11400136 	bltu	r2,r5,801490 <__modsi3+0x44>
  80148c:	1145c83a 	sub	r2,r2,r5
  801490:	280ad07a 	srli	r5,r5,1
  801494:	183ffb1e 	bne	r3,zero,801484 <__alt_data_end+0xff801484>
  801498:	38000126 	beq	r7,zero,8014a0 <__modsi3+0x54>
  80149c:	0085c83a 	sub	r2,zero,r2
  8014a0:	f800283a 	ret
  8014a4:	014bc83a 	sub	r5,zero,r5
  8014a8:	003fec06 	br	80145c <__alt_data_end+0xff80145c>
  8014ac:	0109c83a 	sub	r4,zero,r4
  8014b0:	01c00044 	movi	r7,1
  8014b4:	003fe706 	br	801454 <__alt_data_end+0xff801454>
  8014b8:	00c00044 	movi	r3,1
  8014bc:	003ff106 	br	801484 <__alt_data_end+0xff801484>

008014c0 <__udivsi3>:
  8014c0:	200d883a 	mov	r6,r4
  8014c4:	2900152e 	bgeu	r5,r4,80151c <__udivsi3+0x5c>
  8014c8:	28001416 	blt	r5,zero,80151c <__udivsi3+0x5c>
  8014cc:	00800804 	movi	r2,32
  8014d0:	00c00044 	movi	r3,1
  8014d4:	00000206 	br	8014e0 <__udivsi3+0x20>
  8014d8:	10000e26 	beq	r2,zero,801514 <__udivsi3+0x54>
  8014dc:	28000516 	blt	r5,zero,8014f4 <__udivsi3+0x34>
  8014e0:	294b883a 	add	r5,r5,r5
  8014e4:	10bfffc4 	addi	r2,r2,-1
  8014e8:	18c7883a 	add	r3,r3,r3
  8014ec:	293ffa36 	bltu	r5,r4,8014d8 <__alt_data_end+0xff8014d8>
  8014f0:	18000826 	beq	r3,zero,801514 <__udivsi3+0x54>
  8014f4:	0005883a 	mov	r2,zero
  8014f8:	31400236 	bltu	r6,r5,801504 <__udivsi3+0x44>
  8014fc:	314dc83a 	sub	r6,r6,r5
  801500:	10c4b03a 	or	r2,r2,r3
  801504:	1806d07a 	srli	r3,r3,1
  801508:	280ad07a 	srli	r5,r5,1
  80150c:	183ffa1e 	bne	r3,zero,8014f8 <__alt_data_end+0xff8014f8>
  801510:	f800283a 	ret
  801514:	0005883a 	mov	r2,zero
  801518:	f800283a 	ret
  80151c:	00c00044 	movi	r3,1
  801520:	003ff406 	br	8014f4 <__alt_data_end+0xff8014f4>

00801524 <__umodsi3>:
  801524:	2005883a 	mov	r2,r4
  801528:	2900122e 	bgeu	r5,r4,801574 <__umodsi3+0x50>
  80152c:	28001116 	blt	r5,zero,801574 <__umodsi3+0x50>
  801530:	01800804 	movi	r6,32
  801534:	00c00044 	movi	r3,1
  801538:	00000206 	br	801544 <__umodsi3+0x20>
  80153c:	30000c26 	beq	r6,zero,801570 <__umodsi3+0x4c>
  801540:	28000516 	blt	r5,zero,801558 <__umodsi3+0x34>
  801544:	294b883a 	add	r5,r5,r5
  801548:	31bfffc4 	addi	r6,r6,-1
  80154c:	18c7883a 	add	r3,r3,r3
  801550:	293ffa36 	bltu	r5,r4,80153c <__alt_data_end+0xff80153c>
  801554:	18000626 	beq	r3,zero,801570 <__umodsi3+0x4c>
  801558:	1806d07a 	srli	r3,r3,1
  80155c:	11400136 	bltu	r2,r5,801564 <__umodsi3+0x40>
  801560:	1145c83a 	sub	r2,r2,r5
  801564:	280ad07a 	srli	r5,r5,1
  801568:	183ffb1e 	bne	r3,zero,801558 <__alt_data_end+0xff801558>
  80156c:	f800283a 	ret
  801570:	f800283a 	ret
  801574:	00c00044 	movi	r3,1
  801578:	003ff706 	br	801558 <__alt_data_end+0xff801558>

0080157c <__mulsi3>:
  80157c:	0005883a 	mov	r2,zero
  801580:	20000726 	beq	r4,zero,8015a0 <__mulsi3+0x24>
  801584:	20c0004c 	andi	r3,r4,1
  801588:	2008d07a 	srli	r4,r4,1
  80158c:	18000126 	beq	r3,zero,801594 <__mulsi3+0x18>
  801590:	1145883a 	add	r2,r2,r5
  801594:	294b883a 	add	r5,r5,r5
  801598:	203ffa1e 	bne	r4,zero,801584 <__alt_data_end+0xff801584>
  80159c:	f800283a 	ret
  8015a0:	f800283a 	ret

008015a4 <__adddf3>:
  8015a4:	02c00434 	movhi	r11,16
  8015a8:	5affffc4 	addi	r11,r11,-1
  8015ac:	2806d7fa 	srli	r3,r5,31
  8015b0:	2ad4703a 	and	r10,r5,r11
  8015b4:	3ad2703a 	and	r9,r7,r11
  8015b8:	3804d53a 	srli	r2,r7,20
  8015bc:	3018d77a 	srli	r12,r6,29
  8015c0:	280ad53a 	srli	r5,r5,20
  8015c4:	501490fa 	slli	r10,r10,3
  8015c8:	2010d77a 	srli	r8,r4,29
  8015cc:	481290fa 	slli	r9,r9,3
  8015d0:	380ed7fa 	srli	r7,r7,31
  8015d4:	defffb04 	addi	sp,sp,-20
  8015d8:	dc800215 	stw	r18,8(sp)
  8015dc:	dc400115 	stw	r17,4(sp)
  8015e0:	dc000015 	stw	r16,0(sp)
  8015e4:	dfc00415 	stw	ra,16(sp)
  8015e8:	dcc00315 	stw	r19,12(sp)
  8015ec:	1c803fcc 	andi	r18,r3,255
  8015f0:	2c01ffcc 	andi	r16,r5,2047
  8015f4:	5210b03a 	or	r8,r10,r8
  8015f8:	202290fa 	slli	r17,r4,3
  8015fc:	1081ffcc 	andi	r2,r2,2047
  801600:	4b12b03a 	or	r9,r9,r12
  801604:	300c90fa 	slli	r6,r6,3
  801608:	91c07526 	beq	r18,r7,8017e0 <__adddf3+0x23c>
  80160c:	8087c83a 	sub	r3,r16,r2
  801610:	00c0ab0e 	bge	zero,r3,8018c0 <__adddf3+0x31c>
  801614:	10002a1e 	bne	r2,zero,8016c0 <__adddf3+0x11c>
  801618:	4984b03a 	or	r2,r9,r6
  80161c:	1000961e 	bne	r2,zero,801878 <__adddf3+0x2d4>
  801620:	888001cc 	andi	r2,r17,7
  801624:	10000726 	beq	r2,zero,801644 <__adddf3+0xa0>
  801628:	888003cc 	andi	r2,r17,15
  80162c:	00c00104 	movi	r3,4
  801630:	10c00426 	beq	r2,r3,801644 <__adddf3+0xa0>
  801634:	88c7883a 	add	r3,r17,r3
  801638:	1c63803a 	cmpltu	r17,r3,r17
  80163c:	4451883a 	add	r8,r8,r17
  801640:	1823883a 	mov	r17,r3
  801644:	4080202c 	andhi	r2,r8,128
  801648:	10005926 	beq	r2,zero,8017b0 <__adddf3+0x20c>
  80164c:	84000044 	addi	r16,r16,1
  801650:	0081ffc4 	movi	r2,2047
  801654:	8080ba26 	beq	r16,r2,801940 <__adddf3+0x39c>
  801658:	00bfe034 	movhi	r2,65408
  80165c:	10bfffc4 	addi	r2,r2,-1
  801660:	4090703a 	and	r8,r8,r2
  801664:	4004977a 	slli	r2,r8,29
  801668:	4010927a 	slli	r8,r8,9
  80166c:	8822d0fa 	srli	r17,r17,3
  801670:	8401ffcc 	andi	r16,r16,2047
  801674:	4010d33a 	srli	r8,r8,12
  801678:	9007883a 	mov	r3,r18
  80167c:	1444b03a 	or	r2,r2,r17
  801680:	8401ffcc 	andi	r16,r16,2047
  801684:	8020953a 	slli	r16,r16,20
  801688:	18c03fcc 	andi	r3,r3,255
  80168c:	01000434 	movhi	r4,16
  801690:	213fffc4 	addi	r4,r4,-1
  801694:	180697fa 	slli	r3,r3,31
  801698:	4110703a 	and	r8,r8,r4
  80169c:	4410b03a 	or	r8,r8,r16
  8016a0:	40c6b03a 	or	r3,r8,r3
  8016a4:	dfc00417 	ldw	ra,16(sp)
  8016a8:	dcc00317 	ldw	r19,12(sp)
  8016ac:	dc800217 	ldw	r18,8(sp)
  8016b0:	dc400117 	ldw	r17,4(sp)
  8016b4:	dc000017 	ldw	r16,0(sp)
  8016b8:	dec00504 	addi	sp,sp,20
  8016bc:	f800283a 	ret
  8016c0:	0081ffc4 	movi	r2,2047
  8016c4:	80bfd626 	beq	r16,r2,801620 <__alt_data_end+0xff801620>
  8016c8:	4a402034 	orhi	r9,r9,128
  8016cc:	00800e04 	movi	r2,56
  8016d0:	10c09f16 	blt	r2,r3,801950 <__adddf3+0x3ac>
  8016d4:	008007c4 	movi	r2,31
  8016d8:	10c0c216 	blt	r2,r3,8019e4 <__adddf3+0x440>
  8016dc:	00800804 	movi	r2,32
  8016e0:	10c5c83a 	sub	r2,r2,r3
  8016e4:	488a983a 	sll	r5,r9,r2
  8016e8:	30c8d83a 	srl	r4,r6,r3
  8016ec:	3084983a 	sll	r2,r6,r2
  8016f0:	48c6d83a 	srl	r3,r9,r3
  8016f4:	290cb03a 	or	r6,r5,r4
  8016f8:	1004c03a 	cmpne	r2,r2,zero
  8016fc:	308cb03a 	or	r6,r6,r2
  801700:	898dc83a 	sub	r6,r17,r6
  801704:	89a3803a 	cmpltu	r17,r17,r6
  801708:	40d1c83a 	sub	r8,r8,r3
  80170c:	4451c83a 	sub	r8,r8,r17
  801710:	3023883a 	mov	r17,r6
  801714:	4080202c 	andhi	r2,r8,128
  801718:	10002326 	beq	r2,zero,8017a8 <__adddf3+0x204>
  80171c:	04c02034 	movhi	r19,128
  801720:	9cffffc4 	addi	r19,r19,-1
  801724:	44e6703a 	and	r19,r8,r19
  801728:	98007626 	beq	r19,zero,801904 <__adddf3+0x360>
  80172c:	9809883a 	mov	r4,r19
  801730:	08028180 	call	802818 <__clzsi2>
  801734:	10fffe04 	addi	r3,r2,-8
  801738:	010007c4 	movi	r4,31
  80173c:	20c07716 	blt	r4,r3,80191c <__adddf3+0x378>
  801740:	00800804 	movi	r2,32
  801744:	10c5c83a 	sub	r2,r2,r3
  801748:	8884d83a 	srl	r2,r17,r2
  80174c:	98d0983a 	sll	r8,r19,r3
  801750:	88e2983a 	sll	r17,r17,r3
  801754:	1204b03a 	or	r2,r2,r8
  801758:	1c007416 	blt	r3,r16,80192c <__adddf3+0x388>
  80175c:	1c21c83a 	sub	r16,r3,r16
  801760:	82000044 	addi	r8,r16,1
  801764:	00c007c4 	movi	r3,31
  801768:	1a009116 	blt	r3,r8,8019b0 <__adddf3+0x40c>
  80176c:	00c00804 	movi	r3,32
  801770:	1a07c83a 	sub	r3,r3,r8
  801774:	8a08d83a 	srl	r4,r17,r8
  801778:	88e2983a 	sll	r17,r17,r3
  80177c:	10c6983a 	sll	r3,r2,r3
  801780:	1210d83a 	srl	r8,r2,r8
  801784:	8804c03a 	cmpne	r2,r17,zero
  801788:	1906b03a 	or	r3,r3,r4
  80178c:	18a2b03a 	or	r17,r3,r2
  801790:	0021883a 	mov	r16,zero
  801794:	003fa206 	br	801620 <__alt_data_end+0xff801620>
  801798:	1890b03a 	or	r8,r3,r2
  80179c:	40017d26 	beq	r8,zero,801d94 <__adddf3+0x7f0>
  8017a0:	1011883a 	mov	r8,r2
  8017a4:	1823883a 	mov	r17,r3
  8017a8:	888001cc 	andi	r2,r17,7
  8017ac:	103f9e1e 	bne	r2,zero,801628 <__alt_data_end+0xff801628>
  8017b0:	4004977a 	slli	r2,r8,29
  8017b4:	8822d0fa 	srli	r17,r17,3
  8017b8:	4010d0fa 	srli	r8,r8,3
  8017bc:	9007883a 	mov	r3,r18
  8017c0:	1444b03a 	or	r2,r2,r17
  8017c4:	0101ffc4 	movi	r4,2047
  8017c8:	81002426 	beq	r16,r4,80185c <__adddf3+0x2b8>
  8017cc:	8120703a 	and	r16,r16,r4
  8017d0:	01000434 	movhi	r4,16
  8017d4:	213fffc4 	addi	r4,r4,-1
  8017d8:	4110703a 	and	r8,r8,r4
  8017dc:	003fa806 	br	801680 <__alt_data_end+0xff801680>
  8017e0:	8089c83a 	sub	r4,r16,r2
  8017e4:	01005e0e 	bge	zero,r4,801960 <__adddf3+0x3bc>
  8017e8:	10002b26 	beq	r2,zero,801898 <__adddf3+0x2f4>
  8017ec:	0081ffc4 	movi	r2,2047
  8017f0:	80bf8b26 	beq	r16,r2,801620 <__alt_data_end+0xff801620>
  8017f4:	4a402034 	orhi	r9,r9,128
  8017f8:	00800e04 	movi	r2,56
  8017fc:	1100a40e 	bge	r2,r4,801a90 <__adddf3+0x4ec>
  801800:	498cb03a 	or	r6,r9,r6
  801804:	300ac03a 	cmpne	r5,r6,zero
  801808:	0013883a 	mov	r9,zero
  80180c:	2c4b883a 	add	r5,r5,r17
  801810:	2c63803a 	cmpltu	r17,r5,r17
  801814:	4a11883a 	add	r8,r9,r8
  801818:	8a11883a 	add	r8,r17,r8
  80181c:	2823883a 	mov	r17,r5
  801820:	4080202c 	andhi	r2,r8,128
  801824:	103fe026 	beq	r2,zero,8017a8 <__alt_data_end+0xff8017a8>
  801828:	84000044 	addi	r16,r16,1
  80182c:	0081ffc4 	movi	r2,2047
  801830:	8080d226 	beq	r16,r2,801b7c <__adddf3+0x5d8>
  801834:	00bfe034 	movhi	r2,65408
  801838:	10bfffc4 	addi	r2,r2,-1
  80183c:	4090703a 	and	r8,r8,r2
  801840:	880ad07a 	srli	r5,r17,1
  801844:	400897fa 	slli	r4,r8,31
  801848:	88c0004c 	andi	r3,r17,1
  80184c:	28e2b03a 	or	r17,r5,r3
  801850:	4010d07a 	srli	r8,r8,1
  801854:	2462b03a 	or	r17,r4,r17
  801858:	003f7106 	br	801620 <__alt_data_end+0xff801620>
  80185c:	4088b03a 	or	r4,r8,r2
  801860:	20014526 	beq	r4,zero,801d78 <__adddf3+0x7d4>
  801864:	01000434 	movhi	r4,16
  801868:	42000234 	orhi	r8,r8,8
  80186c:	213fffc4 	addi	r4,r4,-1
  801870:	4110703a 	and	r8,r8,r4
  801874:	003f8206 	br	801680 <__alt_data_end+0xff801680>
  801878:	18ffffc4 	addi	r3,r3,-1
  80187c:	1800491e 	bne	r3,zero,8019a4 <__adddf3+0x400>
  801880:	898bc83a 	sub	r5,r17,r6
  801884:	8963803a 	cmpltu	r17,r17,r5
  801888:	4251c83a 	sub	r8,r8,r9
  80188c:	4451c83a 	sub	r8,r8,r17
  801890:	2823883a 	mov	r17,r5
  801894:	003f9f06 	br	801714 <__alt_data_end+0xff801714>
  801898:	4984b03a 	or	r2,r9,r6
  80189c:	103f6026 	beq	r2,zero,801620 <__alt_data_end+0xff801620>
  8018a0:	213fffc4 	addi	r4,r4,-1
  8018a4:	2000931e 	bne	r4,zero,801af4 <__adddf3+0x550>
  8018a8:	898d883a 	add	r6,r17,r6
  8018ac:	3463803a 	cmpltu	r17,r6,r17
  8018b0:	4251883a 	add	r8,r8,r9
  8018b4:	8a11883a 	add	r8,r17,r8
  8018b8:	3023883a 	mov	r17,r6
  8018bc:	003fd806 	br	801820 <__alt_data_end+0xff801820>
  8018c0:	1800541e 	bne	r3,zero,801a14 <__adddf3+0x470>
  8018c4:	80800044 	addi	r2,r16,1
  8018c8:	1081ffcc 	andi	r2,r2,2047
  8018cc:	00c00044 	movi	r3,1
  8018d0:	1880a00e 	bge	r3,r2,801b54 <__adddf3+0x5b0>
  8018d4:	8989c83a 	sub	r4,r17,r6
  8018d8:	8905803a 	cmpltu	r2,r17,r4
  8018dc:	4267c83a 	sub	r19,r8,r9
  8018e0:	98a7c83a 	sub	r19,r19,r2
  8018e4:	9880202c 	andhi	r2,r19,128
  8018e8:	10006326 	beq	r2,zero,801a78 <__adddf3+0x4d4>
  8018ec:	3463c83a 	sub	r17,r6,r17
  8018f0:	4a07c83a 	sub	r3,r9,r8
  8018f4:	344d803a 	cmpltu	r6,r6,r17
  8018f8:	19a7c83a 	sub	r19,r3,r6
  8018fc:	3825883a 	mov	r18,r7
  801900:	983f8a1e 	bne	r19,zero,80172c <__alt_data_end+0xff80172c>
  801904:	8809883a 	mov	r4,r17
  801908:	08028180 	call	802818 <__clzsi2>
  80190c:	10800804 	addi	r2,r2,32
  801910:	10fffe04 	addi	r3,r2,-8
  801914:	010007c4 	movi	r4,31
  801918:	20ff890e 	bge	r4,r3,801740 <__alt_data_end+0xff801740>
  80191c:	10bff604 	addi	r2,r2,-40
  801920:	8884983a 	sll	r2,r17,r2
  801924:	0023883a 	mov	r17,zero
  801928:	1c3f8c0e 	bge	r3,r16,80175c <__alt_data_end+0xff80175c>
  80192c:	023fe034 	movhi	r8,65408
  801930:	423fffc4 	addi	r8,r8,-1
  801934:	80e1c83a 	sub	r16,r16,r3
  801938:	1210703a 	and	r8,r2,r8
  80193c:	003f3806 	br	801620 <__alt_data_end+0xff801620>
  801940:	9007883a 	mov	r3,r18
  801944:	0011883a 	mov	r8,zero
  801948:	0005883a 	mov	r2,zero
  80194c:	003f4c06 	br	801680 <__alt_data_end+0xff801680>
  801950:	498cb03a 	or	r6,r9,r6
  801954:	300cc03a 	cmpne	r6,r6,zero
  801958:	0007883a 	mov	r3,zero
  80195c:	003f6806 	br	801700 <__alt_data_end+0xff801700>
  801960:	20009c1e 	bne	r4,zero,801bd4 <__adddf3+0x630>
  801964:	80800044 	addi	r2,r16,1
  801968:	1141ffcc 	andi	r5,r2,2047
  80196c:	01000044 	movi	r4,1
  801970:	2140670e 	bge	r4,r5,801b10 <__adddf3+0x56c>
  801974:	0101ffc4 	movi	r4,2047
  801978:	11007f26 	beq	r2,r4,801b78 <__adddf3+0x5d4>
  80197c:	898d883a 	add	r6,r17,r6
  801980:	4247883a 	add	r3,r8,r9
  801984:	3451803a 	cmpltu	r8,r6,r17
  801988:	40d1883a 	add	r8,r8,r3
  80198c:	402297fa 	slli	r17,r8,31
  801990:	300cd07a 	srli	r6,r6,1
  801994:	4010d07a 	srli	r8,r8,1
  801998:	1021883a 	mov	r16,r2
  80199c:	89a2b03a 	or	r17,r17,r6
  8019a0:	003f1f06 	br	801620 <__alt_data_end+0xff801620>
  8019a4:	0081ffc4 	movi	r2,2047
  8019a8:	80bf481e 	bne	r16,r2,8016cc <__alt_data_end+0xff8016cc>
  8019ac:	003f1c06 	br	801620 <__alt_data_end+0xff801620>
  8019b0:	843ff844 	addi	r16,r16,-31
  8019b4:	01000804 	movi	r4,32
  8019b8:	1406d83a 	srl	r3,r2,r16
  8019bc:	41005026 	beq	r8,r4,801b00 <__adddf3+0x55c>
  8019c0:	01001004 	movi	r4,64
  8019c4:	2211c83a 	sub	r8,r4,r8
  8019c8:	1204983a 	sll	r2,r2,r8
  8019cc:	88a2b03a 	or	r17,r17,r2
  8019d0:	8822c03a 	cmpne	r17,r17,zero
  8019d4:	1c62b03a 	or	r17,r3,r17
  8019d8:	0011883a 	mov	r8,zero
  8019dc:	0021883a 	mov	r16,zero
  8019e0:	003f7106 	br	8017a8 <__alt_data_end+0xff8017a8>
  8019e4:	193ff804 	addi	r4,r3,-32
  8019e8:	00800804 	movi	r2,32
  8019ec:	4908d83a 	srl	r4,r9,r4
  8019f0:	18804526 	beq	r3,r2,801b08 <__adddf3+0x564>
  8019f4:	00801004 	movi	r2,64
  8019f8:	10c5c83a 	sub	r2,r2,r3
  8019fc:	4886983a 	sll	r3,r9,r2
  801a00:	198cb03a 	or	r6,r3,r6
  801a04:	300cc03a 	cmpne	r6,r6,zero
  801a08:	218cb03a 	or	r6,r4,r6
  801a0c:	0007883a 	mov	r3,zero
  801a10:	003f3b06 	br	801700 <__alt_data_end+0xff801700>
  801a14:	80002a26 	beq	r16,zero,801ac0 <__adddf3+0x51c>
  801a18:	0101ffc4 	movi	r4,2047
  801a1c:	11006826 	beq	r2,r4,801bc0 <__adddf3+0x61c>
  801a20:	00c7c83a 	sub	r3,zero,r3
  801a24:	42002034 	orhi	r8,r8,128
  801a28:	01000e04 	movi	r4,56
  801a2c:	20c07c16 	blt	r4,r3,801c20 <__adddf3+0x67c>
  801a30:	010007c4 	movi	r4,31
  801a34:	20c0da16 	blt	r4,r3,801da0 <__adddf3+0x7fc>
  801a38:	01000804 	movi	r4,32
  801a3c:	20c9c83a 	sub	r4,r4,r3
  801a40:	4114983a 	sll	r10,r8,r4
  801a44:	88cad83a 	srl	r5,r17,r3
  801a48:	8908983a 	sll	r4,r17,r4
  801a4c:	40c6d83a 	srl	r3,r8,r3
  801a50:	5162b03a 	or	r17,r10,r5
  801a54:	2008c03a 	cmpne	r4,r4,zero
  801a58:	8922b03a 	or	r17,r17,r4
  801a5c:	3463c83a 	sub	r17,r6,r17
  801a60:	48c7c83a 	sub	r3,r9,r3
  801a64:	344d803a 	cmpltu	r6,r6,r17
  801a68:	1991c83a 	sub	r8,r3,r6
  801a6c:	1021883a 	mov	r16,r2
  801a70:	3825883a 	mov	r18,r7
  801a74:	003f2706 	br	801714 <__alt_data_end+0xff801714>
  801a78:	24d0b03a 	or	r8,r4,r19
  801a7c:	40001b1e 	bne	r8,zero,801aec <__adddf3+0x548>
  801a80:	0005883a 	mov	r2,zero
  801a84:	0007883a 	mov	r3,zero
  801a88:	0021883a 	mov	r16,zero
  801a8c:	003f4d06 	br	8017c4 <__alt_data_end+0xff8017c4>
  801a90:	008007c4 	movi	r2,31
  801a94:	11003c16 	blt	r2,r4,801b88 <__adddf3+0x5e4>
  801a98:	00800804 	movi	r2,32
  801a9c:	1105c83a 	sub	r2,r2,r4
  801aa0:	488e983a 	sll	r7,r9,r2
  801aa4:	310ad83a 	srl	r5,r6,r4
  801aa8:	3084983a 	sll	r2,r6,r2
  801aac:	4912d83a 	srl	r9,r9,r4
  801ab0:	394ab03a 	or	r5,r7,r5
  801ab4:	1004c03a 	cmpne	r2,r2,zero
  801ab8:	288ab03a 	or	r5,r5,r2
  801abc:	003f5306 	br	80180c <__alt_data_end+0xff80180c>
  801ac0:	4448b03a 	or	r4,r8,r17
  801ac4:	20003e26 	beq	r4,zero,801bc0 <__adddf3+0x61c>
  801ac8:	00c6303a 	nor	r3,zero,r3
  801acc:	18003a1e 	bne	r3,zero,801bb8 <__adddf3+0x614>
  801ad0:	3463c83a 	sub	r17,r6,r17
  801ad4:	4a07c83a 	sub	r3,r9,r8
  801ad8:	344d803a 	cmpltu	r6,r6,r17
  801adc:	1991c83a 	sub	r8,r3,r6
  801ae0:	1021883a 	mov	r16,r2
  801ae4:	3825883a 	mov	r18,r7
  801ae8:	003f0a06 	br	801714 <__alt_data_end+0xff801714>
  801aec:	2023883a 	mov	r17,r4
  801af0:	003f0d06 	br	801728 <__alt_data_end+0xff801728>
  801af4:	0081ffc4 	movi	r2,2047
  801af8:	80bf3f1e 	bne	r16,r2,8017f8 <__alt_data_end+0xff8017f8>
  801afc:	003ec806 	br	801620 <__alt_data_end+0xff801620>
  801b00:	0005883a 	mov	r2,zero
  801b04:	003fb106 	br	8019cc <__alt_data_end+0xff8019cc>
  801b08:	0007883a 	mov	r3,zero
  801b0c:	003fbc06 	br	801a00 <__alt_data_end+0xff801a00>
  801b10:	4444b03a 	or	r2,r8,r17
  801b14:	8000871e 	bne	r16,zero,801d34 <__adddf3+0x790>
  801b18:	1000ba26 	beq	r2,zero,801e04 <__adddf3+0x860>
  801b1c:	4984b03a 	or	r2,r9,r6
  801b20:	103ebf26 	beq	r2,zero,801620 <__alt_data_end+0xff801620>
  801b24:	8985883a 	add	r2,r17,r6
  801b28:	4247883a 	add	r3,r8,r9
  801b2c:	1451803a 	cmpltu	r8,r2,r17
  801b30:	40d1883a 	add	r8,r8,r3
  801b34:	40c0202c 	andhi	r3,r8,128
  801b38:	1023883a 	mov	r17,r2
  801b3c:	183f1a26 	beq	r3,zero,8017a8 <__alt_data_end+0xff8017a8>
  801b40:	00bfe034 	movhi	r2,65408
  801b44:	10bfffc4 	addi	r2,r2,-1
  801b48:	2021883a 	mov	r16,r4
  801b4c:	4090703a 	and	r8,r8,r2
  801b50:	003eb306 	br	801620 <__alt_data_end+0xff801620>
  801b54:	4444b03a 	or	r2,r8,r17
  801b58:	8000291e 	bne	r16,zero,801c00 <__adddf3+0x65c>
  801b5c:	10004b1e 	bne	r2,zero,801c8c <__adddf3+0x6e8>
  801b60:	4990b03a 	or	r8,r9,r6
  801b64:	40008b26 	beq	r8,zero,801d94 <__adddf3+0x7f0>
  801b68:	4811883a 	mov	r8,r9
  801b6c:	3023883a 	mov	r17,r6
  801b70:	3825883a 	mov	r18,r7
  801b74:	003eaa06 	br	801620 <__alt_data_end+0xff801620>
  801b78:	1021883a 	mov	r16,r2
  801b7c:	0011883a 	mov	r8,zero
  801b80:	0005883a 	mov	r2,zero
  801b84:	003f0f06 	br	8017c4 <__alt_data_end+0xff8017c4>
  801b88:	217ff804 	addi	r5,r4,-32
  801b8c:	00800804 	movi	r2,32
  801b90:	494ad83a 	srl	r5,r9,r5
  801b94:	20807d26 	beq	r4,r2,801d8c <__adddf3+0x7e8>
  801b98:	00801004 	movi	r2,64
  801b9c:	1109c83a 	sub	r4,r2,r4
  801ba0:	4912983a 	sll	r9,r9,r4
  801ba4:	498cb03a 	or	r6,r9,r6
  801ba8:	300cc03a 	cmpne	r6,r6,zero
  801bac:	298ab03a 	or	r5,r5,r6
  801bb0:	0013883a 	mov	r9,zero
  801bb4:	003f1506 	br	80180c <__alt_data_end+0xff80180c>
  801bb8:	0101ffc4 	movi	r4,2047
  801bbc:	113f9a1e 	bne	r2,r4,801a28 <__alt_data_end+0xff801a28>
  801bc0:	4811883a 	mov	r8,r9
  801bc4:	3023883a 	mov	r17,r6
  801bc8:	1021883a 	mov	r16,r2
  801bcc:	3825883a 	mov	r18,r7
  801bd0:	003e9306 	br	801620 <__alt_data_end+0xff801620>
  801bd4:	8000161e 	bne	r16,zero,801c30 <__adddf3+0x68c>
  801bd8:	444ab03a 	or	r5,r8,r17
  801bdc:	28005126 	beq	r5,zero,801d24 <__adddf3+0x780>
  801be0:	0108303a 	nor	r4,zero,r4
  801be4:	20004d1e 	bne	r4,zero,801d1c <__adddf3+0x778>
  801be8:	89a3883a 	add	r17,r17,r6
  801bec:	4253883a 	add	r9,r8,r9
  801bf0:	898d803a 	cmpltu	r6,r17,r6
  801bf4:	3251883a 	add	r8,r6,r9
  801bf8:	1021883a 	mov	r16,r2
  801bfc:	003f0806 	br	801820 <__alt_data_end+0xff801820>
  801c00:	1000301e 	bne	r2,zero,801cc4 <__adddf3+0x720>
  801c04:	4984b03a 	or	r2,r9,r6
  801c08:	10007126 	beq	r2,zero,801dd0 <__adddf3+0x82c>
  801c0c:	4811883a 	mov	r8,r9
  801c10:	3023883a 	mov	r17,r6
  801c14:	3825883a 	mov	r18,r7
  801c18:	0401ffc4 	movi	r16,2047
  801c1c:	003e8006 	br	801620 <__alt_data_end+0xff801620>
  801c20:	4462b03a 	or	r17,r8,r17
  801c24:	8822c03a 	cmpne	r17,r17,zero
  801c28:	0007883a 	mov	r3,zero
  801c2c:	003f8b06 	br	801a5c <__alt_data_end+0xff801a5c>
  801c30:	0141ffc4 	movi	r5,2047
  801c34:	11403b26 	beq	r2,r5,801d24 <__adddf3+0x780>
  801c38:	0109c83a 	sub	r4,zero,r4
  801c3c:	42002034 	orhi	r8,r8,128
  801c40:	01400e04 	movi	r5,56
  801c44:	29006716 	blt	r5,r4,801de4 <__adddf3+0x840>
  801c48:	014007c4 	movi	r5,31
  801c4c:	29007016 	blt	r5,r4,801e10 <__adddf3+0x86c>
  801c50:	01400804 	movi	r5,32
  801c54:	290bc83a 	sub	r5,r5,r4
  801c58:	4154983a 	sll	r10,r8,r5
  801c5c:	890ed83a 	srl	r7,r17,r4
  801c60:	894a983a 	sll	r5,r17,r5
  801c64:	4108d83a 	srl	r4,r8,r4
  801c68:	51e2b03a 	or	r17,r10,r7
  801c6c:	280ac03a 	cmpne	r5,r5,zero
  801c70:	8962b03a 	or	r17,r17,r5
  801c74:	89a3883a 	add	r17,r17,r6
  801c78:	2253883a 	add	r9,r4,r9
  801c7c:	898d803a 	cmpltu	r6,r17,r6
  801c80:	3251883a 	add	r8,r6,r9
  801c84:	1021883a 	mov	r16,r2
  801c88:	003ee506 	br	801820 <__alt_data_end+0xff801820>
  801c8c:	4984b03a 	or	r2,r9,r6
  801c90:	103e6326 	beq	r2,zero,801620 <__alt_data_end+0xff801620>
  801c94:	8987c83a 	sub	r3,r17,r6
  801c98:	88c9803a 	cmpltu	r4,r17,r3
  801c9c:	4245c83a 	sub	r2,r8,r9
  801ca0:	1105c83a 	sub	r2,r2,r4
  801ca4:	1100202c 	andhi	r4,r2,128
  801ca8:	203ebb26 	beq	r4,zero,801798 <__alt_data_end+0xff801798>
  801cac:	3463c83a 	sub	r17,r6,r17
  801cb0:	4a07c83a 	sub	r3,r9,r8
  801cb4:	344d803a 	cmpltu	r6,r6,r17
  801cb8:	1991c83a 	sub	r8,r3,r6
  801cbc:	3825883a 	mov	r18,r7
  801cc0:	003e5706 	br	801620 <__alt_data_end+0xff801620>
  801cc4:	4984b03a 	or	r2,r9,r6
  801cc8:	10002e26 	beq	r2,zero,801d84 <__adddf3+0x7e0>
  801ccc:	4004d0fa 	srli	r2,r8,3
  801cd0:	8822d0fa 	srli	r17,r17,3
  801cd4:	4010977a 	slli	r8,r8,29
  801cd8:	10c0022c 	andhi	r3,r2,8
  801cdc:	4462b03a 	or	r17,r8,r17
  801ce0:	18000826 	beq	r3,zero,801d04 <__adddf3+0x760>
  801ce4:	4808d0fa 	srli	r4,r9,3
  801ce8:	20c0022c 	andhi	r3,r4,8
  801cec:	1800051e 	bne	r3,zero,801d04 <__adddf3+0x760>
  801cf0:	300cd0fa 	srli	r6,r6,3
  801cf4:	4806977a 	slli	r3,r9,29
  801cf8:	2005883a 	mov	r2,r4
  801cfc:	3825883a 	mov	r18,r7
  801d00:	19a2b03a 	or	r17,r3,r6
  801d04:	8810d77a 	srli	r8,r17,29
  801d08:	100490fa 	slli	r2,r2,3
  801d0c:	882290fa 	slli	r17,r17,3
  801d10:	0401ffc4 	movi	r16,2047
  801d14:	4090b03a 	or	r8,r8,r2
  801d18:	003e4106 	br	801620 <__alt_data_end+0xff801620>
  801d1c:	0141ffc4 	movi	r5,2047
  801d20:	117fc71e 	bne	r2,r5,801c40 <__alt_data_end+0xff801c40>
  801d24:	4811883a 	mov	r8,r9
  801d28:	3023883a 	mov	r17,r6
  801d2c:	1021883a 	mov	r16,r2
  801d30:	003e3b06 	br	801620 <__alt_data_end+0xff801620>
  801d34:	10002f26 	beq	r2,zero,801df4 <__adddf3+0x850>
  801d38:	4984b03a 	or	r2,r9,r6
  801d3c:	10001126 	beq	r2,zero,801d84 <__adddf3+0x7e0>
  801d40:	4004d0fa 	srli	r2,r8,3
  801d44:	8822d0fa 	srli	r17,r17,3
  801d48:	4010977a 	slli	r8,r8,29
  801d4c:	10c0022c 	andhi	r3,r2,8
  801d50:	4462b03a 	or	r17,r8,r17
  801d54:	183feb26 	beq	r3,zero,801d04 <__alt_data_end+0xff801d04>
  801d58:	4808d0fa 	srli	r4,r9,3
  801d5c:	20c0022c 	andhi	r3,r4,8
  801d60:	183fe81e 	bne	r3,zero,801d04 <__alt_data_end+0xff801d04>
  801d64:	300cd0fa 	srli	r6,r6,3
  801d68:	4806977a 	slli	r3,r9,29
  801d6c:	2005883a 	mov	r2,r4
  801d70:	19a2b03a 	or	r17,r3,r6
  801d74:	003fe306 	br	801d04 <__alt_data_end+0xff801d04>
  801d78:	0011883a 	mov	r8,zero
  801d7c:	0005883a 	mov	r2,zero
  801d80:	003e3f06 	br	801680 <__alt_data_end+0xff801680>
  801d84:	0401ffc4 	movi	r16,2047
  801d88:	003e2506 	br	801620 <__alt_data_end+0xff801620>
  801d8c:	0013883a 	mov	r9,zero
  801d90:	003f8406 	br	801ba4 <__alt_data_end+0xff801ba4>
  801d94:	0005883a 	mov	r2,zero
  801d98:	0007883a 	mov	r3,zero
  801d9c:	003e8906 	br	8017c4 <__alt_data_end+0xff8017c4>
  801da0:	197ff804 	addi	r5,r3,-32
  801da4:	01000804 	movi	r4,32
  801da8:	414ad83a 	srl	r5,r8,r5
  801dac:	19002426 	beq	r3,r4,801e40 <__adddf3+0x89c>
  801db0:	01001004 	movi	r4,64
  801db4:	20c7c83a 	sub	r3,r4,r3
  801db8:	40c6983a 	sll	r3,r8,r3
  801dbc:	1c46b03a 	or	r3,r3,r17
  801dc0:	1806c03a 	cmpne	r3,r3,zero
  801dc4:	28e2b03a 	or	r17,r5,r3
  801dc8:	0007883a 	mov	r3,zero
  801dcc:	003f2306 	br	801a5c <__alt_data_end+0xff801a5c>
  801dd0:	0007883a 	mov	r3,zero
  801dd4:	5811883a 	mov	r8,r11
  801dd8:	00bfffc4 	movi	r2,-1
  801ddc:	0401ffc4 	movi	r16,2047
  801de0:	003e7806 	br	8017c4 <__alt_data_end+0xff8017c4>
  801de4:	4462b03a 	or	r17,r8,r17
  801de8:	8822c03a 	cmpne	r17,r17,zero
  801dec:	0009883a 	mov	r4,zero
  801df0:	003fa006 	br	801c74 <__alt_data_end+0xff801c74>
  801df4:	4811883a 	mov	r8,r9
  801df8:	3023883a 	mov	r17,r6
  801dfc:	0401ffc4 	movi	r16,2047
  801e00:	003e0706 	br	801620 <__alt_data_end+0xff801620>
  801e04:	4811883a 	mov	r8,r9
  801e08:	3023883a 	mov	r17,r6
  801e0c:	003e0406 	br	801620 <__alt_data_end+0xff801620>
  801e10:	21fff804 	addi	r7,r4,-32
  801e14:	01400804 	movi	r5,32
  801e18:	41ced83a 	srl	r7,r8,r7
  801e1c:	21400a26 	beq	r4,r5,801e48 <__adddf3+0x8a4>
  801e20:	01401004 	movi	r5,64
  801e24:	2909c83a 	sub	r4,r5,r4
  801e28:	4108983a 	sll	r4,r8,r4
  801e2c:	2448b03a 	or	r4,r4,r17
  801e30:	2008c03a 	cmpne	r4,r4,zero
  801e34:	3922b03a 	or	r17,r7,r4
  801e38:	0009883a 	mov	r4,zero
  801e3c:	003f8d06 	br	801c74 <__alt_data_end+0xff801c74>
  801e40:	0007883a 	mov	r3,zero
  801e44:	003fdd06 	br	801dbc <__alt_data_end+0xff801dbc>
  801e48:	0009883a 	mov	r4,zero
  801e4c:	003ff706 	br	801e2c <__alt_data_end+0xff801e2c>

00801e50 <__muldf3>:
  801e50:	deffee04 	addi	sp,sp,-72
  801e54:	dd000c15 	stw	r20,48(sp)
  801e58:	2828d53a 	srli	r20,r5,20
  801e5c:	ddc00f15 	stw	r23,60(sp)
  801e60:	282ed7fa 	srli	r23,r5,31
  801e64:	dc000815 	stw	r16,32(sp)
  801e68:	04000434 	movhi	r16,16
  801e6c:	dcc00b15 	stw	r19,44(sp)
  801e70:	843fffc4 	addi	r16,r16,-1
  801e74:	dfc01115 	stw	ra,68(sp)
  801e78:	df001015 	stw	fp,64(sp)
  801e7c:	dd800e15 	stw	r22,56(sp)
  801e80:	dd400d15 	stw	r21,52(sp)
  801e84:	dc800a15 	stw	r18,40(sp)
  801e88:	dc400915 	stw	r17,36(sp)
  801e8c:	a501ffcc 	andi	r20,r20,2047
  801e90:	2c20703a 	and	r16,r5,r16
  801e94:	b827883a 	mov	r19,r23
  801e98:	ba403fcc 	andi	r9,r23,255
  801e9c:	a0006026 	beq	r20,zero,802020 <__muldf3+0x1d0>
  801ea0:	0081ffc4 	movi	r2,2047
  801ea4:	202d883a 	mov	r22,r4
  801ea8:	a0803626 	beq	r20,r2,801f84 <__muldf3+0x134>
  801eac:	84000434 	orhi	r16,r16,16
  801eb0:	200ad77a 	srli	r5,r4,29
  801eb4:	800490fa 	slli	r2,r16,3
  801eb8:	202c90fa 	slli	r22,r4,3
  801ebc:	a53f0044 	addi	r20,r20,-1023
  801ec0:	28a0b03a 	or	r16,r5,r2
  801ec4:	002b883a 	mov	r21,zero
  801ec8:	000b883a 	mov	r5,zero
  801ecc:	3804d53a 	srli	r2,r7,20
  801ed0:	3838d7fa 	srli	fp,r7,31
  801ed4:	04400434 	movhi	r17,16
  801ed8:	8c7fffc4 	addi	r17,r17,-1
  801edc:	1081ffcc 	andi	r2,r2,2047
  801ee0:	3025883a 	mov	r18,r6
  801ee4:	3c62703a 	and	r17,r7,r17
  801ee8:	e2803fcc 	andi	r10,fp,255
  801eec:	10006d26 	beq	r2,zero,8020a4 <__muldf3+0x254>
  801ef0:	00c1ffc4 	movi	r3,2047
  801ef4:	10c06526 	beq	r2,r3,80208c <__muldf3+0x23c>
  801ef8:	8c400434 	orhi	r17,r17,16
  801efc:	300ed77a 	srli	r7,r6,29
  801f00:	880690fa 	slli	r3,r17,3
  801f04:	302490fa 	slli	r18,r6,3
  801f08:	10bf0044 	addi	r2,r2,-1023
  801f0c:	38e2b03a 	or	r17,r7,r3
  801f10:	000f883a 	mov	r7,zero
  801f14:	a087883a 	add	r3,r20,r2
  801f18:	010003c4 	movi	r4,15
  801f1c:	3d44b03a 	or	r2,r7,r21
  801f20:	e5ccf03a 	xor	r6,fp,r23
  801f24:	1a000044 	addi	r8,r3,1
  801f28:	20809b36 	bltu	r4,r2,802198 <__muldf3+0x348>
  801f2c:	100490ba 	slli	r2,r2,2
  801f30:	01002034 	movhi	r4,128
  801f34:	2107d104 	addi	r4,r4,8004
  801f38:	1105883a 	add	r2,r2,r4
  801f3c:	10800017 	ldw	r2,0(r2)
  801f40:	1000683a 	jmp	r2
  801f44:	00802198 	cmpnei	r2,zero,134
  801f48:	00801fa4 	muli	r2,zero,126
  801f4c:	00801fa4 	muli	r2,zero,126
  801f50:	00801fa0 	cmpeqi	r2,zero,126
  801f54:	00802174 	movhi	r2,133
  801f58:	00802174 	movhi	r2,133
  801f5c:	0080215c 	xori	r2,zero,133
  801f60:	00801fa0 	cmpeqi	r2,zero,126
  801f64:	00802174 	movhi	r2,133
  801f68:	0080215c 	xori	r2,zero,133
  801f6c:	00802174 	movhi	r2,133
  801f70:	00801fa0 	cmpeqi	r2,zero,126
  801f74:	00802184 	movi	r2,134
  801f78:	00802184 	movi	r2,134
  801f7c:	00802184 	movi	r2,134
  801f80:	008024e4 	muli	r2,zero,147
  801f84:	2404b03a 	or	r2,r4,r16
  801f88:	1000711e 	bne	r2,zero,802150 <__muldf3+0x300>
  801f8c:	05400204 	movi	r21,8
  801f90:	0021883a 	mov	r16,zero
  801f94:	002d883a 	mov	r22,zero
  801f98:	01400084 	movi	r5,2
  801f9c:	003fcb06 	br	801ecc <__alt_data_end+0xff801ecc>
  801fa0:	500d883a 	mov	r6,r10
  801fa4:	00800084 	movi	r2,2
  801fa8:	38805926 	beq	r7,r2,802110 <__muldf3+0x2c0>
  801fac:	008000c4 	movi	r2,3
  801fb0:	3881bb26 	beq	r7,r2,8026a0 <__muldf3+0x850>
  801fb4:	00800044 	movi	r2,1
  801fb8:	3881961e 	bne	r7,r2,802614 <__muldf3+0x7c4>
  801fbc:	3027883a 	mov	r19,r6
  801fc0:	0005883a 	mov	r2,zero
  801fc4:	0021883a 	mov	r16,zero
  801fc8:	002d883a 	mov	r22,zero
  801fcc:	1004953a 	slli	r2,r2,20
  801fd0:	98c03fcc 	andi	r3,r19,255
  801fd4:	04400434 	movhi	r17,16
  801fd8:	8c7fffc4 	addi	r17,r17,-1
  801fdc:	180697fa 	slli	r3,r3,31
  801fe0:	8460703a 	and	r16,r16,r17
  801fe4:	80a0b03a 	or	r16,r16,r2
  801fe8:	80c6b03a 	or	r3,r16,r3
  801fec:	b005883a 	mov	r2,r22
  801ff0:	dfc01117 	ldw	ra,68(sp)
  801ff4:	df001017 	ldw	fp,64(sp)
  801ff8:	ddc00f17 	ldw	r23,60(sp)
  801ffc:	dd800e17 	ldw	r22,56(sp)
  802000:	dd400d17 	ldw	r21,52(sp)
  802004:	dd000c17 	ldw	r20,48(sp)
  802008:	dcc00b17 	ldw	r19,44(sp)
  80200c:	dc800a17 	ldw	r18,40(sp)
  802010:	dc400917 	ldw	r17,36(sp)
  802014:	dc000817 	ldw	r16,32(sp)
  802018:	dec01204 	addi	sp,sp,72
  80201c:	f800283a 	ret
  802020:	2404b03a 	or	r2,r4,r16
  802024:	202b883a 	mov	r21,r4
  802028:	10004426 	beq	r2,zero,80213c <__muldf3+0x2ec>
  80202c:	80015126 	beq	r16,zero,802574 <__muldf3+0x724>
  802030:	8009883a 	mov	r4,r16
  802034:	d9800715 	stw	r6,28(sp)
  802038:	d9c00215 	stw	r7,8(sp)
  80203c:	da400415 	stw	r9,16(sp)
  802040:	08028180 	call	802818 <__clzsi2>
  802044:	d9800717 	ldw	r6,28(sp)
  802048:	d9c00217 	ldw	r7,8(sp)
  80204c:	da400417 	ldw	r9,16(sp)
  802050:	113ffd44 	addi	r4,r2,-11
  802054:	00c00704 	movi	r3,28
  802058:	19014216 	blt	r3,r4,802564 <__muldf3+0x714>
  80205c:	00c00744 	movi	r3,29
  802060:	15bffe04 	addi	r22,r2,-8
  802064:	1907c83a 	sub	r3,r3,r4
  802068:	85a0983a 	sll	r16,r16,r22
  80206c:	a8c6d83a 	srl	r3,r21,r3
  802070:	adac983a 	sll	r22,r21,r22
  802074:	1c20b03a 	or	r16,r3,r16
  802078:	1080fcc4 	addi	r2,r2,1011
  80207c:	00a9c83a 	sub	r20,zero,r2
  802080:	002b883a 	mov	r21,zero
  802084:	000b883a 	mov	r5,zero
  802088:	003f9006 	br	801ecc <__alt_data_end+0xff801ecc>
  80208c:	3446b03a 	or	r3,r6,r17
  802090:	1800281e 	bne	r3,zero,802134 <__muldf3+0x2e4>
  802094:	0023883a 	mov	r17,zero
  802098:	0025883a 	mov	r18,zero
  80209c:	01c00084 	movi	r7,2
  8020a0:	003f9c06 	br	801f14 <__alt_data_end+0xff801f14>
  8020a4:	3446b03a 	or	r3,r6,r17
  8020a8:	18001e26 	beq	r3,zero,802124 <__muldf3+0x2d4>
  8020ac:	88012126 	beq	r17,zero,802534 <__muldf3+0x6e4>
  8020b0:	8809883a 	mov	r4,r17
  8020b4:	d9400215 	stw	r5,8(sp)
  8020b8:	d9800715 	stw	r6,28(sp)
  8020bc:	da400415 	stw	r9,16(sp)
  8020c0:	da800315 	stw	r10,12(sp)
  8020c4:	08028180 	call	802818 <__clzsi2>
  8020c8:	d9400217 	ldw	r5,8(sp)
  8020cc:	d9800717 	ldw	r6,28(sp)
  8020d0:	da400417 	ldw	r9,16(sp)
  8020d4:	da800317 	ldw	r10,12(sp)
  8020d8:	113ffd44 	addi	r4,r2,-11
  8020dc:	00c00704 	movi	r3,28
  8020e0:	19011016 	blt	r3,r4,802524 <__muldf3+0x6d4>
  8020e4:	00c00744 	movi	r3,29
  8020e8:	14bffe04 	addi	r18,r2,-8
  8020ec:	1907c83a 	sub	r3,r3,r4
  8020f0:	8ca2983a 	sll	r17,r17,r18
  8020f4:	30c6d83a 	srl	r3,r6,r3
  8020f8:	34a4983a 	sll	r18,r6,r18
  8020fc:	1c62b03a 	or	r17,r3,r17
  802100:	1080fcc4 	addi	r2,r2,1011
  802104:	0085c83a 	sub	r2,zero,r2
  802108:	000f883a 	mov	r7,zero
  80210c:	003f8106 	br	801f14 <__alt_data_end+0xff801f14>
  802110:	3027883a 	mov	r19,r6
  802114:	0081ffc4 	movi	r2,2047
  802118:	0021883a 	mov	r16,zero
  80211c:	002d883a 	mov	r22,zero
  802120:	003faa06 	br	801fcc <__alt_data_end+0xff801fcc>
  802124:	0023883a 	mov	r17,zero
  802128:	0025883a 	mov	r18,zero
  80212c:	01c00044 	movi	r7,1
  802130:	003f7806 	br	801f14 <__alt_data_end+0xff801f14>
  802134:	01c000c4 	movi	r7,3
  802138:	003f7606 	br	801f14 <__alt_data_end+0xff801f14>
  80213c:	05400104 	movi	r21,4
  802140:	0021883a 	mov	r16,zero
  802144:	002d883a 	mov	r22,zero
  802148:	01400044 	movi	r5,1
  80214c:	003f5f06 	br	801ecc <__alt_data_end+0xff801ecc>
  802150:	05400304 	movi	r21,12
  802154:	014000c4 	movi	r5,3
  802158:	003f5c06 	br	801ecc <__alt_data_end+0xff801ecc>
  80215c:	04000434 	movhi	r16,16
  802160:	0027883a 	mov	r19,zero
  802164:	843fffc4 	addi	r16,r16,-1
  802168:	05bfffc4 	movi	r22,-1
  80216c:	0081ffc4 	movi	r2,2047
  802170:	003f9606 	br	801fcc <__alt_data_end+0xff801fcc>
  802174:	8023883a 	mov	r17,r16
  802178:	b025883a 	mov	r18,r22
  80217c:	280f883a 	mov	r7,r5
  802180:	003f8806 	br	801fa4 <__alt_data_end+0xff801fa4>
  802184:	8023883a 	mov	r17,r16
  802188:	b025883a 	mov	r18,r22
  80218c:	480d883a 	mov	r6,r9
  802190:	280f883a 	mov	r7,r5
  802194:	003f8306 	br	801fa4 <__alt_data_end+0xff801fa4>
  802198:	b026d43a 	srli	r19,r22,16
  80219c:	902ed43a 	srli	r23,r18,16
  8021a0:	b5bfffcc 	andi	r22,r22,65535
  8021a4:	94bfffcc 	andi	r18,r18,65535
  8021a8:	b00b883a 	mov	r5,r22
  8021ac:	9009883a 	mov	r4,r18
  8021b0:	d8c00515 	stw	r3,20(sp)
  8021b4:	d9800715 	stw	r6,28(sp)
  8021b8:	da000615 	stw	r8,24(sp)
  8021bc:	080157c0 	call	80157c <__mulsi3>
  8021c0:	980b883a 	mov	r5,r19
  8021c4:	9009883a 	mov	r4,r18
  8021c8:	1029883a 	mov	r20,r2
  8021cc:	080157c0 	call	80157c <__mulsi3>
  8021d0:	b80b883a 	mov	r5,r23
  8021d4:	9809883a 	mov	r4,r19
  8021d8:	102b883a 	mov	r21,r2
  8021dc:	080157c0 	call	80157c <__mulsi3>
  8021e0:	b809883a 	mov	r4,r23
  8021e4:	b00b883a 	mov	r5,r22
  8021e8:	1039883a 	mov	fp,r2
  8021ec:	080157c0 	call	80157c <__mulsi3>
  8021f0:	a008d43a 	srli	r4,r20,16
  8021f4:	1545883a 	add	r2,r2,r21
  8021f8:	d8c00517 	ldw	r3,20(sp)
  8021fc:	2085883a 	add	r2,r4,r2
  802200:	d9800717 	ldw	r6,28(sp)
  802204:	da000617 	ldw	r8,24(sp)
  802208:	1540022e 	bgeu	r2,r21,802214 <__muldf3+0x3c4>
  80220c:	01000074 	movhi	r4,1
  802210:	e139883a 	add	fp,fp,r4
  802214:	100e943a 	slli	r7,r2,16
  802218:	1004d43a 	srli	r2,r2,16
  80221c:	882ad43a 	srli	r21,r17,16
  802220:	a53fffcc 	andi	r20,r20,65535
  802224:	8c7fffcc 	andi	r17,r17,65535
  802228:	3d29883a 	add	r20,r7,r20
  80222c:	b00b883a 	mov	r5,r22
  802230:	8809883a 	mov	r4,r17
  802234:	d8c00515 	stw	r3,20(sp)
  802238:	d9800715 	stw	r6,28(sp)
  80223c:	da000615 	stw	r8,24(sp)
  802240:	dd000115 	stw	r20,4(sp)
  802244:	d8800015 	stw	r2,0(sp)
  802248:	080157c0 	call	80157c <__mulsi3>
  80224c:	980b883a 	mov	r5,r19
  802250:	8809883a 	mov	r4,r17
  802254:	d8800215 	stw	r2,8(sp)
  802258:	080157c0 	call	80157c <__mulsi3>
  80225c:	9809883a 	mov	r4,r19
  802260:	a80b883a 	mov	r5,r21
  802264:	1029883a 	mov	r20,r2
  802268:	080157c0 	call	80157c <__mulsi3>
  80226c:	b00b883a 	mov	r5,r22
  802270:	a809883a 	mov	r4,r21
  802274:	d8800415 	stw	r2,16(sp)
  802278:	080157c0 	call	80157c <__mulsi3>
  80227c:	d9c00217 	ldw	r7,8(sp)
  802280:	1505883a 	add	r2,r2,r20
  802284:	d8c00517 	ldw	r3,20(sp)
  802288:	3826d43a 	srli	r19,r7,16
  80228c:	d9800717 	ldw	r6,28(sp)
  802290:	da000617 	ldw	r8,24(sp)
  802294:	9885883a 	add	r2,r19,r2
  802298:	da400417 	ldw	r9,16(sp)
  80229c:	1500022e 	bgeu	r2,r20,8022a8 <__muldf3+0x458>
  8022a0:	01000074 	movhi	r4,1
  8022a4:	4913883a 	add	r9,r9,r4
  8022a8:	1028d43a 	srli	r20,r2,16
  8022ac:	1004943a 	slli	r2,r2,16
  8022b0:	802cd43a 	srli	r22,r16,16
  8022b4:	843fffcc 	andi	r16,r16,65535
  8022b8:	3cffffcc 	andi	r19,r7,65535
  8022bc:	9009883a 	mov	r4,r18
  8022c0:	800b883a 	mov	r5,r16
  8022c4:	a269883a 	add	r20,r20,r9
  8022c8:	d8c00515 	stw	r3,20(sp)
  8022cc:	d9800715 	stw	r6,28(sp)
  8022d0:	da000615 	stw	r8,24(sp)
  8022d4:	14e7883a 	add	r19,r2,r19
  8022d8:	080157c0 	call	80157c <__mulsi3>
  8022dc:	9009883a 	mov	r4,r18
  8022e0:	b00b883a 	mov	r5,r22
  8022e4:	d8800315 	stw	r2,12(sp)
  8022e8:	080157c0 	call	80157c <__mulsi3>
  8022ec:	b809883a 	mov	r4,r23
  8022f0:	b00b883a 	mov	r5,r22
  8022f4:	d8800215 	stw	r2,8(sp)
  8022f8:	080157c0 	call	80157c <__mulsi3>
  8022fc:	b80b883a 	mov	r5,r23
  802300:	8009883a 	mov	r4,r16
  802304:	d8800415 	stw	r2,16(sp)
  802308:	080157c0 	call	80157c <__mulsi3>
  80230c:	da800317 	ldw	r10,12(sp)
  802310:	d9c00217 	ldw	r7,8(sp)
  802314:	d9000017 	ldw	r4,0(sp)
  802318:	502ed43a 	srli	r23,r10,16
  80231c:	11c5883a 	add	r2,r2,r7
  802320:	24e5883a 	add	r18,r4,r19
  802324:	b885883a 	add	r2,r23,r2
  802328:	d8c00517 	ldw	r3,20(sp)
  80232c:	d9800717 	ldw	r6,28(sp)
  802330:	da000617 	ldw	r8,24(sp)
  802334:	da400417 	ldw	r9,16(sp)
  802338:	11c0022e 	bgeu	r2,r7,802344 <__muldf3+0x4f4>
  80233c:	01000074 	movhi	r4,1
  802340:	4913883a 	add	r9,r9,r4
  802344:	100ed43a 	srli	r7,r2,16
  802348:	1004943a 	slli	r2,r2,16
  80234c:	55ffffcc 	andi	r23,r10,65535
  802350:	3a53883a 	add	r9,r7,r9
  802354:	8809883a 	mov	r4,r17
  802358:	800b883a 	mov	r5,r16
  80235c:	d8c00515 	stw	r3,20(sp)
  802360:	d9800715 	stw	r6,28(sp)
  802364:	da000615 	stw	r8,24(sp)
  802368:	da400415 	stw	r9,16(sp)
  80236c:	15ef883a 	add	r23,r2,r23
  802370:	080157c0 	call	80157c <__mulsi3>
  802374:	8809883a 	mov	r4,r17
  802378:	b00b883a 	mov	r5,r22
  80237c:	d8800215 	stw	r2,8(sp)
  802380:	080157c0 	call	80157c <__mulsi3>
  802384:	b00b883a 	mov	r5,r22
  802388:	a809883a 	mov	r4,r21
  80238c:	d8800315 	stw	r2,12(sp)
  802390:	080157c0 	call	80157c <__mulsi3>
  802394:	8009883a 	mov	r4,r16
  802398:	a80b883a 	mov	r5,r21
  80239c:	1023883a 	mov	r17,r2
  8023a0:	080157c0 	call	80157c <__mulsi3>
  8023a4:	d9c00217 	ldw	r7,8(sp)
  8023a8:	da800317 	ldw	r10,12(sp)
  8023ac:	d8c00517 	ldw	r3,20(sp)
  8023b0:	3808d43a 	srli	r4,r7,16
  8023b4:	1285883a 	add	r2,r2,r10
  8023b8:	d9800717 	ldw	r6,28(sp)
  8023bc:	2085883a 	add	r2,r4,r2
  8023c0:	da000617 	ldw	r8,24(sp)
  8023c4:	da400417 	ldw	r9,16(sp)
  8023c8:	1280022e 	bgeu	r2,r10,8023d4 <__muldf3+0x584>
  8023cc:	01000074 	movhi	r4,1
  8023d0:	8923883a 	add	r17,r17,r4
  8023d4:	1008943a 	slli	r4,r2,16
  8023d8:	39ffffcc 	andi	r7,r7,65535
  8023dc:	e4b9883a 	add	fp,fp,r18
  8023e0:	21cf883a 	add	r7,r4,r7
  8023e4:	e4e7803a 	cmpltu	r19,fp,r19
  8023e8:	3d0f883a 	add	r7,r7,r20
  8023ec:	bf39883a 	add	fp,r23,fp
  8023f0:	99c9883a 	add	r4,r19,r7
  8023f4:	e5ef803a 	cmpltu	r23,fp,r23
  8023f8:	490b883a 	add	r5,r9,r4
  8023fc:	1004d43a 	srli	r2,r2,16
  802400:	b965883a 	add	r18,r23,r5
  802404:	24c9803a 	cmpltu	r4,r4,r19
  802408:	3d29803a 	cmpltu	r20,r7,r20
  80240c:	a128b03a 	or	r20,r20,r4
  802410:	95ef803a 	cmpltu	r23,r18,r23
  802414:	2a53803a 	cmpltu	r9,r5,r9
  802418:	a0a9883a 	add	r20,r20,r2
  80241c:	4deeb03a 	or	r23,r9,r23
  802420:	a5ef883a 	add	r23,r20,r23
  802424:	bc63883a 	add	r17,r23,r17
  802428:	e004927a 	slli	r2,fp,9
  80242c:	d9000117 	ldw	r4,4(sp)
  802430:	882e927a 	slli	r23,r17,9
  802434:	9022d5fa 	srli	r17,r18,23
  802438:	e038d5fa 	srli	fp,fp,23
  80243c:	1104b03a 	or	r2,r2,r4
  802440:	9024927a 	slli	r18,r18,9
  802444:	1004c03a 	cmpne	r2,r2,zero
  802448:	bc62b03a 	or	r17,r23,r17
  80244c:	1738b03a 	or	fp,r2,fp
  802450:	8880402c 	andhi	r2,r17,256
  802454:	e4a4b03a 	or	r18,fp,r18
  802458:	10000726 	beq	r2,zero,802478 <__muldf3+0x628>
  80245c:	9006d07a 	srli	r3,r18,1
  802460:	880497fa 	slli	r2,r17,31
  802464:	9480004c 	andi	r18,r18,1
  802468:	8822d07a 	srli	r17,r17,1
  80246c:	1ca4b03a 	or	r18,r3,r18
  802470:	14a4b03a 	or	r18,r2,r18
  802474:	4007883a 	mov	r3,r8
  802478:	1880ffc4 	addi	r2,r3,1023
  80247c:	0080460e 	bge	zero,r2,802598 <__muldf3+0x748>
  802480:	910001cc 	andi	r4,r18,7
  802484:	20000726 	beq	r4,zero,8024a4 <__muldf3+0x654>
  802488:	910003cc 	andi	r4,r18,15
  80248c:	01400104 	movi	r5,4
  802490:	21400426 	beq	r4,r5,8024a4 <__muldf3+0x654>
  802494:	9149883a 	add	r4,r18,r5
  802498:	24a5803a 	cmpltu	r18,r4,r18
  80249c:	8ca3883a 	add	r17,r17,r18
  8024a0:	2025883a 	mov	r18,r4
  8024a4:	8900402c 	andhi	r4,r17,256
  8024a8:	20000426 	beq	r4,zero,8024bc <__muldf3+0x66c>
  8024ac:	18810004 	addi	r2,r3,1024
  8024b0:	00ffc034 	movhi	r3,65280
  8024b4:	18ffffc4 	addi	r3,r3,-1
  8024b8:	88e2703a 	and	r17,r17,r3
  8024bc:	00c1ff84 	movi	r3,2046
  8024c0:	18bf1316 	blt	r3,r2,802110 <__alt_data_end+0xff802110>
  8024c4:	882c977a 	slli	r22,r17,29
  8024c8:	9024d0fa 	srli	r18,r18,3
  8024cc:	8822927a 	slli	r17,r17,9
  8024d0:	1081ffcc 	andi	r2,r2,2047
  8024d4:	b4acb03a 	or	r22,r22,r18
  8024d8:	8820d33a 	srli	r16,r17,12
  8024dc:	3027883a 	mov	r19,r6
  8024e0:	003eba06 	br	801fcc <__alt_data_end+0xff801fcc>
  8024e4:	8080022c 	andhi	r2,r16,8
  8024e8:	10000926 	beq	r2,zero,802510 <__muldf3+0x6c0>
  8024ec:	8880022c 	andhi	r2,r17,8
  8024f0:	1000071e 	bne	r2,zero,802510 <__muldf3+0x6c0>
  8024f4:	00800434 	movhi	r2,16
  8024f8:	8c000234 	orhi	r16,r17,8
  8024fc:	10bfffc4 	addi	r2,r2,-1
  802500:	e027883a 	mov	r19,fp
  802504:	80a0703a 	and	r16,r16,r2
  802508:	902d883a 	mov	r22,r18
  80250c:	003f1706 	br	80216c <__alt_data_end+0xff80216c>
  802510:	00800434 	movhi	r2,16
  802514:	84000234 	orhi	r16,r16,8
  802518:	10bfffc4 	addi	r2,r2,-1
  80251c:	80a0703a 	and	r16,r16,r2
  802520:	003f1206 	br	80216c <__alt_data_end+0xff80216c>
  802524:	147ff604 	addi	r17,r2,-40
  802528:	3462983a 	sll	r17,r6,r17
  80252c:	0025883a 	mov	r18,zero
  802530:	003ef306 	br	802100 <__alt_data_end+0xff802100>
  802534:	3009883a 	mov	r4,r6
  802538:	d9400215 	stw	r5,8(sp)
  80253c:	d9800715 	stw	r6,28(sp)
  802540:	da400415 	stw	r9,16(sp)
  802544:	da800315 	stw	r10,12(sp)
  802548:	08028180 	call	802818 <__clzsi2>
  80254c:	10800804 	addi	r2,r2,32
  802550:	da800317 	ldw	r10,12(sp)
  802554:	da400417 	ldw	r9,16(sp)
  802558:	d9800717 	ldw	r6,28(sp)
  80255c:	d9400217 	ldw	r5,8(sp)
  802560:	003edd06 	br	8020d8 <__alt_data_end+0xff8020d8>
  802564:	143ff604 	addi	r16,r2,-40
  802568:	ac20983a 	sll	r16,r21,r16
  80256c:	002d883a 	mov	r22,zero
  802570:	003ec106 	br	802078 <__alt_data_end+0xff802078>
  802574:	d9800715 	stw	r6,28(sp)
  802578:	d9c00215 	stw	r7,8(sp)
  80257c:	da400415 	stw	r9,16(sp)
  802580:	08028180 	call	802818 <__clzsi2>
  802584:	10800804 	addi	r2,r2,32
  802588:	da400417 	ldw	r9,16(sp)
  80258c:	d9c00217 	ldw	r7,8(sp)
  802590:	d9800717 	ldw	r6,28(sp)
  802594:	003eae06 	br	802050 <__alt_data_end+0xff802050>
  802598:	00c00044 	movi	r3,1
  80259c:	1887c83a 	sub	r3,r3,r2
  8025a0:	01000e04 	movi	r4,56
  8025a4:	20fe8516 	blt	r4,r3,801fbc <__alt_data_end+0xff801fbc>
  8025a8:	010007c4 	movi	r4,31
  8025ac:	20c01b16 	blt	r4,r3,80261c <__muldf3+0x7cc>
  8025b0:	00800804 	movi	r2,32
  8025b4:	10c5c83a 	sub	r2,r2,r3
  8025b8:	888a983a 	sll	r5,r17,r2
  8025bc:	90c8d83a 	srl	r4,r18,r3
  8025c0:	9084983a 	sll	r2,r18,r2
  8025c4:	88e2d83a 	srl	r17,r17,r3
  8025c8:	2906b03a 	or	r3,r5,r4
  8025cc:	1004c03a 	cmpne	r2,r2,zero
  8025d0:	1886b03a 	or	r3,r3,r2
  8025d4:	188001cc 	andi	r2,r3,7
  8025d8:	10000726 	beq	r2,zero,8025f8 <__muldf3+0x7a8>
  8025dc:	188003cc 	andi	r2,r3,15
  8025e0:	01000104 	movi	r4,4
  8025e4:	11000426 	beq	r2,r4,8025f8 <__muldf3+0x7a8>
  8025e8:	1805883a 	mov	r2,r3
  8025ec:	10c00104 	addi	r3,r2,4
  8025f0:	1885803a 	cmpltu	r2,r3,r2
  8025f4:	88a3883a 	add	r17,r17,r2
  8025f8:	8880202c 	andhi	r2,r17,128
  8025fc:	10001c26 	beq	r2,zero,802670 <__muldf3+0x820>
  802600:	3027883a 	mov	r19,r6
  802604:	00800044 	movi	r2,1
  802608:	0021883a 	mov	r16,zero
  80260c:	002d883a 	mov	r22,zero
  802610:	003e6e06 	br	801fcc <__alt_data_end+0xff801fcc>
  802614:	4007883a 	mov	r3,r8
  802618:	003f9706 	br	802478 <__alt_data_end+0xff802478>
  80261c:	017ff844 	movi	r5,-31
  802620:	2885c83a 	sub	r2,r5,r2
  802624:	888ad83a 	srl	r5,r17,r2
  802628:	00800804 	movi	r2,32
  80262c:	18801a26 	beq	r3,r2,802698 <__muldf3+0x848>
  802630:	01001004 	movi	r4,64
  802634:	20c7c83a 	sub	r3,r4,r3
  802638:	88e2983a 	sll	r17,r17,r3
  80263c:	8ca4b03a 	or	r18,r17,r18
  802640:	9004c03a 	cmpne	r2,r18,zero
  802644:	2884b03a 	or	r2,r5,r2
  802648:	144001cc 	andi	r17,r2,7
  80264c:	88000d1e 	bne	r17,zero,802684 <__muldf3+0x834>
  802650:	0021883a 	mov	r16,zero
  802654:	102cd0fa 	srli	r22,r2,3
  802658:	3027883a 	mov	r19,r6
  80265c:	0005883a 	mov	r2,zero
  802660:	b46cb03a 	or	r22,r22,r17
  802664:	003e5906 	br	801fcc <__alt_data_end+0xff801fcc>
  802668:	1007883a 	mov	r3,r2
  80266c:	0023883a 	mov	r17,zero
  802670:	8820927a 	slli	r16,r17,9
  802674:	1805883a 	mov	r2,r3
  802678:	8822977a 	slli	r17,r17,29
  80267c:	8020d33a 	srli	r16,r16,12
  802680:	003ff406 	br	802654 <__alt_data_end+0xff802654>
  802684:	10c003cc 	andi	r3,r2,15
  802688:	01000104 	movi	r4,4
  80268c:	193ff626 	beq	r3,r4,802668 <__alt_data_end+0xff802668>
  802690:	0023883a 	mov	r17,zero
  802694:	003fd506 	br	8025ec <__alt_data_end+0xff8025ec>
  802698:	0023883a 	mov	r17,zero
  80269c:	003fe706 	br	80263c <__alt_data_end+0xff80263c>
  8026a0:	00800434 	movhi	r2,16
  8026a4:	8c000234 	orhi	r16,r17,8
  8026a8:	10bfffc4 	addi	r2,r2,-1
  8026ac:	3027883a 	mov	r19,r6
  8026b0:	80a0703a 	and	r16,r16,r2
  8026b4:	902d883a 	mov	r22,r18
  8026b8:	003eac06 	br	80216c <__alt_data_end+0xff80216c>

008026bc <__fixdfsi>:
  8026bc:	280cd53a 	srli	r6,r5,20
  8026c0:	00c00434 	movhi	r3,16
  8026c4:	18ffffc4 	addi	r3,r3,-1
  8026c8:	3181ffcc 	andi	r6,r6,2047
  8026cc:	01c0ff84 	movi	r7,1022
  8026d0:	28c6703a 	and	r3,r5,r3
  8026d4:	280ad7fa 	srli	r5,r5,31
  8026d8:	3980120e 	bge	r7,r6,802724 <__fixdfsi+0x68>
  8026dc:	00810744 	movi	r2,1053
  8026e0:	11800c16 	blt	r2,r6,802714 <__fixdfsi+0x58>
  8026e4:	00810cc4 	movi	r2,1075
  8026e8:	1185c83a 	sub	r2,r2,r6
  8026ec:	01c007c4 	movi	r7,31
  8026f0:	18c00434 	orhi	r3,r3,16
  8026f4:	38800d16 	blt	r7,r2,80272c <__fixdfsi+0x70>
  8026f8:	31befb44 	addi	r6,r6,-1043
  8026fc:	2084d83a 	srl	r2,r4,r2
  802700:	1986983a 	sll	r3,r3,r6
  802704:	1884b03a 	or	r2,r3,r2
  802708:	28000726 	beq	r5,zero,802728 <__fixdfsi+0x6c>
  80270c:	0085c83a 	sub	r2,zero,r2
  802710:	f800283a 	ret
  802714:	00a00034 	movhi	r2,32768
  802718:	10bfffc4 	addi	r2,r2,-1
  80271c:	2885883a 	add	r2,r5,r2
  802720:	f800283a 	ret
  802724:	0005883a 	mov	r2,zero
  802728:	f800283a 	ret
  80272c:	008104c4 	movi	r2,1043
  802730:	1185c83a 	sub	r2,r2,r6
  802734:	1884d83a 	srl	r2,r3,r2
  802738:	003ff306 	br	802708 <__alt_data_end+0xff802708>

0080273c <__floatsidf>:
  80273c:	defffd04 	addi	sp,sp,-12
  802740:	dfc00215 	stw	ra,8(sp)
  802744:	dc400115 	stw	r17,4(sp)
  802748:	dc000015 	stw	r16,0(sp)
  80274c:	20002b26 	beq	r4,zero,8027fc <__floatsidf+0xc0>
  802750:	2023883a 	mov	r17,r4
  802754:	2020d7fa 	srli	r16,r4,31
  802758:	20002d16 	blt	r4,zero,802810 <__floatsidf+0xd4>
  80275c:	8809883a 	mov	r4,r17
  802760:	08028180 	call	802818 <__clzsi2>
  802764:	01410784 	movi	r5,1054
  802768:	288bc83a 	sub	r5,r5,r2
  80276c:	01010cc4 	movi	r4,1075
  802770:	2149c83a 	sub	r4,r4,r5
  802774:	00c007c4 	movi	r3,31
  802778:	1900160e 	bge	r3,r4,8027d4 <__floatsidf+0x98>
  80277c:	00c104c4 	movi	r3,1043
  802780:	1947c83a 	sub	r3,r3,r5
  802784:	88c6983a 	sll	r3,r17,r3
  802788:	00800434 	movhi	r2,16
  80278c:	10bfffc4 	addi	r2,r2,-1
  802790:	1886703a 	and	r3,r3,r2
  802794:	2941ffcc 	andi	r5,r5,2047
  802798:	800d883a 	mov	r6,r16
  80279c:	0005883a 	mov	r2,zero
  8027a0:	280a953a 	slli	r5,r5,20
  8027a4:	31803fcc 	andi	r6,r6,255
  8027a8:	01000434 	movhi	r4,16
  8027ac:	300c97fa 	slli	r6,r6,31
  8027b0:	213fffc4 	addi	r4,r4,-1
  8027b4:	1906703a 	and	r3,r3,r4
  8027b8:	1946b03a 	or	r3,r3,r5
  8027bc:	1986b03a 	or	r3,r3,r6
  8027c0:	dfc00217 	ldw	ra,8(sp)
  8027c4:	dc400117 	ldw	r17,4(sp)
  8027c8:	dc000017 	ldw	r16,0(sp)
  8027cc:	dec00304 	addi	sp,sp,12
  8027d0:	f800283a 	ret
  8027d4:	00c002c4 	movi	r3,11
  8027d8:	1887c83a 	sub	r3,r3,r2
  8027dc:	88c6d83a 	srl	r3,r17,r3
  8027e0:	8904983a 	sll	r2,r17,r4
  8027e4:	01000434 	movhi	r4,16
  8027e8:	213fffc4 	addi	r4,r4,-1
  8027ec:	2941ffcc 	andi	r5,r5,2047
  8027f0:	1906703a 	and	r3,r3,r4
  8027f4:	800d883a 	mov	r6,r16
  8027f8:	003fe906 	br	8027a0 <__alt_data_end+0xff8027a0>
  8027fc:	000d883a 	mov	r6,zero
  802800:	000b883a 	mov	r5,zero
  802804:	0007883a 	mov	r3,zero
  802808:	0005883a 	mov	r2,zero
  80280c:	003fe406 	br	8027a0 <__alt_data_end+0xff8027a0>
  802810:	0123c83a 	sub	r17,zero,r4
  802814:	003fd106 	br	80275c <__alt_data_end+0xff80275c>

00802818 <__clzsi2>:
  802818:	00bfffd4 	movui	r2,65535
  80281c:	11000536 	bltu	r2,r4,802834 <__clzsi2+0x1c>
  802820:	00803fc4 	movi	r2,255
  802824:	11000f36 	bltu	r2,r4,802864 <__clzsi2+0x4c>
  802828:	00800804 	movi	r2,32
  80282c:	0007883a 	mov	r3,zero
  802830:	00000506 	br	802848 <__clzsi2+0x30>
  802834:	00804034 	movhi	r2,256
  802838:	10bfffc4 	addi	r2,r2,-1
  80283c:	11000c2e 	bgeu	r2,r4,802870 <__clzsi2+0x58>
  802840:	00800204 	movi	r2,8
  802844:	00c00604 	movi	r3,24
  802848:	20c8d83a 	srl	r4,r4,r3
  80284c:	00c02034 	movhi	r3,128
  802850:	18d231c4 	addi	r3,r3,18631
  802854:	1909883a 	add	r4,r3,r4
  802858:	20c00003 	ldbu	r3,0(r4)
  80285c:	10c5c83a 	sub	r2,r2,r3
  802860:	f800283a 	ret
  802864:	00800604 	movi	r2,24
  802868:	00c00204 	movi	r3,8
  80286c:	003ff606 	br	802848 <__alt_data_end+0xff802848>
  802870:	00800404 	movi	r2,16
  802874:	1007883a 	mov	r3,r2
  802878:	003ff306 	br	802848 <__alt_data_end+0xff802848>

0080287c <atoi>:
  80287c:	01800284 	movi	r6,10
  802880:	000b883a 	mov	r5,zero
  802884:	08031381 	jmpi	803138 <strtol>

00802888 <_atoi_r>:
  802888:	01c00284 	movi	r7,10
  80288c:	000d883a 	mov	r6,zero
  802890:	0802f041 	jmpi	802f04 <_strtol_r>

00802894 <malloc>:
  802894:	00802034 	movhi	r2,128
  802898:	1093ab04 	addi	r2,r2,20140
  80289c:	200b883a 	mov	r5,r4
  8028a0:	11000017 	ldw	r4,0(r2)
  8028a4:	08029c01 	jmpi	8029c0 <_malloc_r>

008028a8 <free>:
  8028a8:	00802034 	movhi	r2,128
  8028ac:	1093ab04 	addi	r2,r2,20140
  8028b0:	200b883a 	mov	r5,r4
  8028b4:	11000017 	ldw	r4,0(r2)
  8028b8:	08028dc1 	jmpi	8028dc <_free_r>

008028bc <memset>:
  8028bc:	2005883a 	mov	r2,r4
  8028c0:	2007883a 	mov	r3,r4
  8028c4:	218d883a 	add	r6,r4,r6
  8028c8:	19800326 	beq	r3,r6,8028d8 <memset+0x1c>
  8028cc:	19400005 	stb	r5,0(r3)
  8028d0:	18c00044 	addi	r3,r3,1
  8028d4:	003ffc06 	br	8028c8 <__alt_data_end+0xff8028c8>
  8028d8:	f800283a 	ret

008028dc <_free_r>:
  8028dc:	28003726 	beq	r5,zero,8029bc <_free_r+0xe0>
  8028e0:	28ffff17 	ldw	r3,-4(r5)
  8028e4:	28bfff04 	addi	r2,r5,-4
  8028e8:	1800010e 	bge	r3,zero,8028f0 <_free_r+0x14>
  8028ec:	10c5883a 	add	r2,r2,r3
  8028f0:	01402034 	movhi	r5,128
  8028f4:	29546604 	addi	r5,r5,20888
  8028f8:	28c00017 	ldw	r3,0(r5)
  8028fc:	280d883a 	mov	r6,r5
  802900:	1800031e 	bne	r3,zero,802910 <_free_r+0x34>
  802904:	10000115 	stw	zero,4(r2)
  802908:	28800015 	stw	r2,0(r5)
  80290c:	f800283a 	ret
  802910:	10c00c2e 	bgeu	r2,r3,802944 <_free_r+0x68>
  802914:	11000017 	ldw	r4,0(r2)
  802918:	110b883a 	add	r5,r2,r4
  80291c:	1940041e 	bne	r3,r5,802930 <_free_r+0x54>
  802920:	19400017 	ldw	r5,0(r3)
  802924:	18c00117 	ldw	r3,4(r3)
  802928:	2909883a 	add	r4,r5,r4
  80292c:	11000015 	stw	r4,0(r2)
  802930:	10c00115 	stw	r3,4(r2)
  802934:	30800015 	stw	r2,0(r6)
  802938:	f800283a 	ret
  80293c:	11400336 	bltu	r2,r5,80294c <_free_r+0x70>
  802940:	2807883a 	mov	r3,r5
  802944:	19400117 	ldw	r5,4(r3)
  802948:	283ffc1e 	bne	r5,zero,80293c <__alt_data_end+0xff80293c>
  80294c:	19c00017 	ldw	r7,0(r3)
  802950:	19cd883a 	add	r6,r3,r7
  802954:	30800a1e 	bne	r6,r2,802980 <_free_r+0xa4>
  802958:	10800017 	ldw	r2,0(r2)
  80295c:	3885883a 	add	r2,r7,r2
  802960:	18800015 	stw	r2,0(r3)
  802964:	1889883a 	add	r4,r3,r2
  802968:	2900141e 	bne	r5,r4,8029bc <_free_r+0xe0>
  80296c:	29000017 	ldw	r4,0(r5)
  802970:	2085883a 	add	r2,r4,r2
  802974:	18800015 	stw	r2,0(r3)
  802978:	28800117 	ldw	r2,4(r5)
  80297c:	00000e06 	br	8029b8 <_free_r+0xdc>
  802980:	1180032e 	bgeu	r2,r6,802990 <_free_r+0xb4>
  802984:	00800304 	movi	r2,12
  802988:	20800015 	stw	r2,0(r4)
  80298c:	f800283a 	ret
  802990:	11000017 	ldw	r4,0(r2)
  802994:	110d883a 	add	r6,r2,r4
  802998:	2980061e 	bne	r5,r6,8029b4 <_free_r+0xd8>
  80299c:	29800017 	ldw	r6,0(r5)
  8029a0:	3109883a 	add	r4,r6,r4
  8029a4:	11000015 	stw	r4,0(r2)
  8029a8:	29000117 	ldw	r4,4(r5)
  8029ac:	11000115 	stw	r4,4(r2)
  8029b0:	00000106 	br	8029b8 <_free_r+0xdc>
  8029b4:	11400115 	stw	r5,4(r2)
  8029b8:	18800115 	stw	r2,4(r3)
  8029bc:	f800283a 	ret

008029c0 <_malloc_r>:
  8029c0:	defffb04 	addi	sp,sp,-20
  8029c4:	00bfff04 	movi	r2,-4
  8029c8:	dc400115 	stw	r17,4(sp)
  8029cc:	2c4000c4 	addi	r17,r5,3
  8029d0:	88a2703a 	and	r17,r17,r2
  8029d4:	dc800215 	stw	r18,8(sp)
  8029d8:	dfc00415 	stw	ra,16(sp)
  8029dc:	dcc00315 	stw	r19,12(sp)
  8029e0:	dc000015 	stw	r16,0(sp)
  8029e4:	8c400204 	addi	r17,r17,8
  8029e8:	00800304 	movi	r2,12
  8029ec:	2025883a 	mov	r18,r4
  8029f0:	8880022e 	bgeu	r17,r2,8029fc <_malloc_r+0x3c>
  8029f4:	1023883a 	mov	r17,r2
  8029f8:	00000506 	br	802a10 <_malloc_r+0x50>
  8029fc:	8800040e 	bge	r17,zero,802a10 <_malloc_r+0x50>
  802a00:	00800304 	movi	r2,12
  802a04:	90800015 	stw	r2,0(r18)
  802a08:	0005883a 	mov	r2,zero
  802a0c:	00003b06 	br	802afc <_malloc_r+0x13c>
  802a10:	897ffb36 	bltu	r17,r5,802a00 <__alt_data_end+0xff802a00>
  802a14:	00802034 	movhi	r2,128
  802a18:	10946604 	addi	r2,r2,20888
  802a1c:	10c00017 	ldw	r3,0(r2)
  802a20:	1009883a 	mov	r4,r2
  802a24:	1821883a 	mov	r16,r3
  802a28:	80000926 	beq	r16,zero,802a50 <_malloc_r+0x90>
  802a2c:	80800017 	ldw	r2,0(r16)
  802a30:	1445c83a 	sub	r2,r2,r17
  802a34:	10001516 	blt	r2,zero,802a8c <_malloc_r+0xcc>
  802a38:	014002c4 	movi	r5,11
  802a3c:	28800d2e 	bgeu	r5,r2,802a74 <_malloc_r+0xb4>
  802a40:	80800015 	stw	r2,0(r16)
  802a44:	80a1883a 	add	r16,r16,r2
  802a48:	84400015 	stw	r17,0(r16)
  802a4c:	8000221e 	bne	r16,zero,802ad8 <_malloc_r+0x118>
  802a50:	04002034 	movhi	r16,128
  802a54:	84146504 	addi	r16,r16,20884
  802a58:	80800017 	ldw	r2,0(r16)
  802a5c:	10000e1e 	bne	r2,zero,802a98 <_malloc_r+0xd8>
  802a60:	000b883a 	mov	r5,zero
  802a64:	9009883a 	mov	r4,r18
  802a68:	0802ba00 	call	802ba0 <_sbrk_r>
  802a6c:	80800015 	stw	r2,0(r16)
  802a70:	00000906 	br	802a98 <_malloc_r+0xd8>
  802a74:	80800117 	ldw	r2,4(r16)
  802a78:	1c00021e 	bne	r3,r16,802a84 <_malloc_r+0xc4>
  802a7c:	20800015 	stw	r2,0(r4)
  802a80:	00001506 	br	802ad8 <_malloc_r+0x118>
  802a84:	18800115 	stw	r2,4(r3)
  802a88:	00001306 	br	802ad8 <_malloc_r+0x118>
  802a8c:	8007883a 	mov	r3,r16
  802a90:	84000117 	ldw	r16,4(r16)
  802a94:	003fe406 	br	802a28 <__alt_data_end+0xff802a28>
  802a98:	880b883a 	mov	r5,r17
  802a9c:	9009883a 	mov	r4,r18
  802aa0:	0802ba00 	call	802ba0 <_sbrk_r>
  802aa4:	04ffffc4 	movi	r19,-1
  802aa8:	14ffd526 	beq	r2,r19,802a00 <__alt_data_end+0xff802a00>
  802aac:	140000c4 	addi	r16,r2,3
  802ab0:	00ffff04 	movi	r3,-4
  802ab4:	80e0703a 	and	r16,r16,r3
  802ab8:	1400021e 	bne	r2,r16,802ac4 <_malloc_r+0x104>
  802abc:	84400015 	stw	r17,0(r16)
  802ac0:	00000506 	br	802ad8 <_malloc_r+0x118>
  802ac4:	808bc83a 	sub	r5,r16,r2
  802ac8:	9009883a 	mov	r4,r18
  802acc:	0802ba00 	call	802ba0 <_sbrk_r>
  802ad0:	14fffa1e 	bne	r2,r19,802abc <__alt_data_end+0xff802abc>
  802ad4:	003fca06 	br	802a00 <__alt_data_end+0xff802a00>
  802ad8:	810002c4 	addi	r4,r16,11
  802adc:	00bffe04 	movi	r2,-8
  802ae0:	80c00104 	addi	r3,r16,4
  802ae4:	2084703a 	and	r2,r4,r2
  802ae8:	10c7c83a 	sub	r3,r2,r3
  802aec:	18000326 	beq	r3,zero,802afc <_malloc_r+0x13c>
  802af0:	80e1883a 	add	r16,r16,r3
  802af4:	00c7c83a 	sub	r3,zero,r3
  802af8:	80c00015 	stw	r3,0(r16)
  802afc:	dfc00417 	ldw	ra,16(sp)
  802b00:	dcc00317 	ldw	r19,12(sp)
  802b04:	dc800217 	ldw	r18,8(sp)
  802b08:	dc400117 	ldw	r17,4(sp)
  802b0c:	dc000017 	ldw	r16,0(sp)
  802b10:	dec00504 	addi	sp,sp,20
  802b14:	f800283a 	ret

00802b18 <_printf_r>:
  802b18:	defffd04 	addi	sp,sp,-12
  802b1c:	dfc00015 	stw	ra,0(sp)
  802b20:	d9800115 	stw	r6,4(sp)
  802b24:	d9c00215 	stw	r7,8(sp)
  802b28:	20c00217 	ldw	r3,8(r4)
  802b2c:	01802034 	movhi	r6,128
  802b30:	318f2f04 	addi	r6,r6,15548
  802b34:	19800115 	stw	r6,4(r3)
  802b38:	280d883a 	mov	r6,r5
  802b3c:	21400217 	ldw	r5,8(r4)
  802b40:	d9c00104 	addi	r7,sp,4
  802b44:	08037740 	call	803774 <___vfprintf_internal_r>
  802b48:	dfc00017 	ldw	ra,0(sp)
  802b4c:	dec00304 	addi	sp,sp,12
  802b50:	f800283a 	ret

00802b54 <printf>:
  802b54:	defffc04 	addi	sp,sp,-16
  802b58:	dfc00015 	stw	ra,0(sp)
  802b5c:	d9400115 	stw	r5,4(sp)
  802b60:	d9800215 	stw	r6,8(sp)
  802b64:	d9c00315 	stw	r7,12(sp)
  802b68:	00802034 	movhi	r2,128
  802b6c:	1093ab04 	addi	r2,r2,20140
  802b70:	10800017 	ldw	r2,0(r2)
  802b74:	01402034 	movhi	r5,128
  802b78:	294f2f04 	addi	r5,r5,15548
  802b7c:	10c00217 	ldw	r3,8(r2)
  802b80:	d9800104 	addi	r6,sp,4
  802b84:	19400115 	stw	r5,4(r3)
  802b88:	200b883a 	mov	r5,r4
  802b8c:	11000217 	ldw	r4,8(r2)
  802b90:	0803ca00 	call	803ca0 <__vfprintf_internal>
  802b94:	dfc00017 	ldw	ra,0(sp)
  802b98:	dec00404 	addi	sp,sp,16
  802b9c:	f800283a 	ret

00802ba0 <_sbrk_r>:
  802ba0:	defffd04 	addi	sp,sp,-12
  802ba4:	dc000015 	stw	r16,0(sp)
  802ba8:	04002034 	movhi	r16,128
  802bac:	dc400115 	stw	r17,4(sp)
  802bb0:	84146704 	addi	r16,r16,20892
  802bb4:	2023883a 	mov	r17,r4
  802bb8:	2809883a 	mov	r4,r5
  802bbc:	dfc00215 	stw	ra,8(sp)
  802bc0:	80000015 	stw	zero,0(r16)
  802bc4:	08042700 	call	804270 <sbrk>
  802bc8:	00ffffc4 	movi	r3,-1
  802bcc:	10c0031e 	bne	r2,r3,802bdc <_sbrk_r+0x3c>
  802bd0:	80c00017 	ldw	r3,0(r16)
  802bd4:	18000126 	beq	r3,zero,802bdc <_sbrk_r+0x3c>
  802bd8:	88c00015 	stw	r3,0(r17)
  802bdc:	dfc00217 	ldw	ra,8(sp)
  802be0:	dc400117 	ldw	r17,4(sp)
  802be4:	dc000017 	ldw	r16,0(sp)
  802be8:	dec00304 	addi	sp,sp,12
  802bec:	f800283a 	ret

00802bf0 <_sprintf_r>:
  802bf0:	defff704 	addi	sp,sp,-36
  802bf4:	dfc00715 	stw	ra,28(sp)
  802bf8:	d9c00815 	stw	r7,32(sp)
  802bfc:	00808204 	movi	r2,520
  802c00:	d880000d 	sth	r2,0(sp)
  802c04:	00a00034 	movhi	r2,32768
  802c08:	10bfffc4 	addi	r2,r2,-1
  802c0c:	d8800515 	stw	r2,20(sp)
  802c10:	d8800315 	stw	r2,12(sp)
  802c14:	00bfffc4 	movi	r2,-1
  802c18:	d880008d 	sth	r2,2(sp)
  802c1c:	00802034 	movhi	r2,128
  802c20:	d9400415 	stw	r5,16(sp)
  802c24:	d9400215 	stw	r5,8(sp)
  802c28:	108f5d04 	addi	r2,r2,15732
  802c2c:	d9c00804 	addi	r7,sp,32
  802c30:	d80b883a 	mov	r5,sp
  802c34:	d8800115 	stw	r2,4(sp)
  802c38:	d8000615 	stw	zero,24(sp)
  802c3c:	08031c00 	call	8031c0 <___svfprintf_internal_r>
  802c40:	d8c00417 	ldw	r3,16(sp)
  802c44:	18000005 	stb	zero,0(r3)
  802c48:	dfc00717 	ldw	ra,28(sp)
  802c4c:	dec00904 	addi	sp,sp,36
  802c50:	f800283a 	ret

00802c54 <sprintf>:
  802c54:	defff604 	addi	sp,sp,-40
  802c58:	dfc00715 	stw	ra,28(sp)
  802c5c:	d9800815 	stw	r6,32(sp)
  802c60:	d9c00915 	stw	r7,36(sp)
  802c64:	00808204 	movi	r2,520
  802c68:	d880000d 	sth	r2,0(sp)
  802c6c:	00a00034 	movhi	r2,32768
  802c70:	10bfffc4 	addi	r2,r2,-1
  802c74:	d8800515 	stw	r2,20(sp)
  802c78:	d8800315 	stw	r2,12(sp)
  802c7c:	00bfffc4 	movi	r2,-1
  802c80:	d880008d 	sth	r2,2(sp)
  802c84:	00802034 	movhi	r2,128
  802c88:	108f5d04 	addi	r2,r2,15732
  802c8c:	d8800115 	stw	r2,4(sp)
  802c90:	00802034 	movhi	r2,128
  802c94:	1093ab04 	addi	r2,r2,20140
  802c98:	d9000415 	stw	r4,16(sp)
  802c9c:	d9000215 	stw	r4,8(sp)
  802ca0:	11000017 	ldw	r4,0(r2)
  802ca4:	280d883a 	mov	r6,r5
  802ca8:	d9c00804 	addi	r7,sp,32
  802cac:	d80b883a 	mov	r5,sp
  802cb0:	d8000615 	stw	zero,24(sp)
  802cb4:	08031c00 	call	8031c0 <___svfprintf_internal_r>
  802cb8:	d8c00417 	ldw	r3,16(sp)
  802cbc:	18000005 	stb	zero,0(r3)
  802cc0:	dfc00717 	ldw	ra,28(sp)
  802cc4:	dec00a04 	addi	sp,sp,40
  802cc8:	f800283a 	ret

00802ccc <strcmp>:
  802ccc:	20800003 	ldbu	r2,0(r4)
  802cd0:	10c03fcc 	andi	r3,r2,255
  802cd4:	18c0201c 	xori	r3,r3,128
  802cd8:	18ffe004 	addi	r3,r3,-128
  802cdc:	18000526 	beq	r3,zero,802cf4 <strcmp+0x28>
  802ce0:	29800007 	ldb	r6,0(r5)
  802ce4:	1980031e 	bne	r3,r6,802cf4 <strcmp+0x28>
  802ce8:	21000044 	addi	r4,r4,1
  802cec:	29400044 	addi	r5,r5,1
  802cf0:	003ff606 	br	802ccc <__alt_data_end+0xff802ccc>
  802cf4:	28c00003 	ldbu	r3,0(r5)
  802cf8:	10803fcc 	andi	r2,r2,255
  802cfc:	10c5c83a 	sub	r2,r2,r3
  802d00:	f800283a 	ret

00802d04 <strcpy>:
  802d04:	2005883a 	mov	r2,r4
  802d08:	200d883a 	mov	r6,r4
  802d0c:	28c00003 	ldbu	r3,0(r5)
  802d10:	31800044 	addi	r6,r6,1
  802d14:	29400044 	addi	r5,r5,1
  802d18:	30ffffc5 	stb	r3,-1(r6)
  802d1c:	18c03fcc 	andi	r3,r3,255
  802d20:	18c0201c 	xori	r3,r3,128
  802d24:	18ffe004 	addi	r3,r3,-128
  802d28:	183ff81e 	bne	r3,zero,802d0c <__alt_data_end+0xff802d0c>
  802d2c:	f800283a 	ret

00802d30 <strlen>:
  802d30:	2005883a 	mov	r2,r4
  802d34:	10c00007 	ldb	r3,0(r2)
  802d38:	18000226 	beq	r3,zero,802d44 <strlen+0x14>
  802d3c:	10800044 	addi	r2,r2,1
  802d40:	003ffc06 	br	802d34 <__alt_data_end+0xff802d34>
  802d44:	1105c83a 	sub	r2,r2,r4
  802d48:	f800283a 	ret

00802d4c <strncpy>:
  802d4c:	2005883a 	mov	r2,r4
  802d50:	200f883a 	mov	r7,r4
  802d54:	30000c26 	beq	r6,zero,802d88 <strncpy+0x3c>
  802d58:	2a000003 	ldbu	r8,0(r5)
  802d5c:	38c00044 	addi	r3,r7,1
  802d60:	31bfffc4 	addi	r6,r6,-1
  802d64:	3a000005 	stb	r8,0(r7)
  802d68:	42003fcc 	andi	r8,r8,255
  802d6c:	4200201c 	xori	r8,r8,128
  802d70:	423fe004 	addi	r8,r8,-128
  802d74:	29400044 	addi	r5,r5,1
  802d78:	180f883a 	mov	r7,r3
  802d7c:	403ff51e 	bne	r8,zero,802d54 <__alt_data_end+0xff802d54>
  802d80:	198d883a 	add	r6,r3,r6
  802d84:	00000106 	br	802d8c <strncpy+0x40>
  802d88:	f800283a 	ret
  802d8c:	30c00326 	beq	r6,r3,802d9c <strncpy+0x50>
  802d90:	18000005 	stb	zero,0(r3)
  802d94:	18c00044 	addi	r3,r3,1
  802d98:	003ffc06 	br	802d8c <__alt_data_end+0xff802d8c>
  802d9c:	f800283a 	ret

00802da0 <strtok>:
  802da0:	00802034 	movhi	r2,128
  802da4:	defffc04 	addi	sp,sp,-16
  802da8:	1093ab04 	addi	r2,r2,20140
  802dac:	dc000115 	stw	r16,4(sp)
  802db0:	14000017 	ldw	r16,0(r2)
  802db4:	dc400215 	stw	r17,8(sp)
  802db8:	dfc00315 	stw	ra,12(sp)
  802dbc:	80803617 	ldw	r2,216(r16)
  802dc0:	2023883a 	mov	r17,r4
  802dc4:	1000211e 	bne	r2,zero,802e4c <strtok+0xac>
  802dc8:	01001404 	movi	r4,80
  802dcc:	d9400015 	stw	r5,0(sp)
  802dd0:	08028940 	call	802894 <malloc>
  802dd4:	80803615 	stw	r2,216(r16)
  802dd8:	10000215 	stw	zero,8(r2)
  802ddc:	10000015 	stw	zero,0(r2)
  802de0:	10000115 	stw	zero,4(r2)
  802de4:	80803617 	ldw	r2,216(r16)
  802de8:	10000415 	stw	zero,16(r2)
  802dec:	10000315 	stw	zero,12(r2)
  802df0:	80803617 	ldw	r2,216(r16)
  802df4:	10000615 	stw	zero,24(r2)
  802df8:	10000515 	stw	zero,20(r2)
  802dfc:	80803617 	ldw	r2,216(r16)
  802e00:	10000b15 	stw	zero,44(r2)
  802e04:	10000a15 	stw	zero,40(r2)
  802e08:	80803617 	ldw	r2,216(r16)
  802e0c:	10000d15 	stw	zero,52(r2)
  802e10:	10000c15 	stw	zero,48(r2)
  802e14:	80803617 	ldw	r2,216(r16)
  802e18:	10000f15 	stw	zero,60(r2)
  802e1c:	10000e15 	stw	zero,56(r2)
  802e20:	80803617 	ldw	r2,216(r16)
  802e24:	10001115 	stw	zero,68(r2)
  802e28:	10001015 	stw	zero,64(r2)
  802e2c:	80803617 	ldw	r2,216(r16)
  802e30:	10001315 	stw	zero,76(r2)
  802e34:	10001215 	stw	zero,72(r2)
  802e38:	80803617 	ldw	r2,216(r16)
  802e3c:	10000705 	stb	zero,28(r2)
  802e40:	80803617 	ldw	r2,216(r16)
  802e44:	d9400017 	ldw	r5,0(sp)
  802e48:	10000915 	stw	zero,36(r2)
  802e4c:	81803617 	ldw	r6,216(r16)
  802e50:	01c00044 	movi	r7,1
  802e54:	8809883a 	mov	r4,r17
  802e58:	dfc00317 	ldw	ra,12(sp)
  802e5c:	dc400217 	ldw	r17,8(sp)
  802e60:	dc000117 	ldw	r16,4(sp)
  802e64:	dec00404 	addi	sp,sp,16
  802e68:	0802e6c1 	jmpi	802e6c <__strtok_r>

00802e6c <__strtok_r>:
  802e6c:	2000021e 	bne	r4,zero,802e78 <__strtok_r+0xc>
  802e70:	31000017 	ldw	r4,0(r6)
  802e74:	20001f26 	beq	r4,zero,802ef4 <__strtok_r+0x88>
  802e78:	2005883a 	mov	r2,r4
  802e7c:	12000007 	ldb	r8,0(r2)
  802e80:	21000044 	addi	r4,r4,1
  802e84:	2807883a 	mov	r3,r5
  802e88:	1a400007 	ldb	r9,0(r3)
  802e8c:	48000626 	beq	r9,zero,802ea8 <__strtok_r+0x3c>
  802e90:	18c00044 	addi	r3,r3,1
  802e94:	427ffc1e 	bne	r8,r9,802e88 <__alt_data_end+0xff802e88>
  802e98:	383ff71e 	bne	r7,zero,802e78 <__alt_data_end+0xff802e78>
  802e9c:	31000015 	stw	r4,0(r6)
  802ea0:	10000005 	stb	zero,0(r2)
  802ea4:	f800283a 	ret
  802ea8:	4000061e 	bne	r8,zero,802ec4 <__strtok_r+0x58>
  802eac:	30000015 	stw	zero,0(r6)
  802eb0:	00001006 	br	802ef4 <__strtok_r+0x88>
  802eb4:	19c00007 	ldb	r7,0(r3)
  802eb8:	51c00826 	beq	r10,r7,802edc <__strtok_r+0x70>
  802ebc:	18c00044 	addi	r3,r3,1
  802ec0:	383ffc1e 	bne	r7,zero,802eb4 <__alt_data_end+0xff802eb4>
  802ec4:	2011883a 	mov	r8,r4
  802ec8:	21000044 	addi	r4,r4,1
  802ecc:	2013883a 	mov	r9,r4
  802ed0:	42800007 	ldb	r10,0(r8)
  802ed4:	2807883a 	mov	r3,r5
  802ed8:	003ff606 	br	802eb4 <__alt_data_end+0xff802eb4>
  802edc:	50000226 	beq	r10,zero,802ee8 <__strtok_r+0x7c>
  802ee0:	40000005 	stb	zero,0(r8)
  802ee4:	00000106 	br	802eec <__strtok_r+0x80>
  802ee8:	0013883a 	mov	r9,zero
  802eec:	32400015 	stw	r9,0(r6)
  802ef0:	f800283a 	ret
  802ef4:	0005883a 	mov	r2,zero
  802ef8:	f800283a 	ret

00802efc <strtok_r>:
  802efc:	01c00044 	movi	r7,1
  802f00:	0802e6c1 	jmpi	802e6c <__strtok_r>

00802f04 <_strtol_r>:
  802f04:	00802034 	movhi	r2,128
  802f08:	defff304 	addi	sp,sp,-52
  802f0c:	1093a904 	addi	r2,r2,20132
  802f10:	dcc00615 	stw	r19,24(sp)
  802f14:	14c00017 	ldw	r19,0(r2)
  802f18:	df000b15 	stw	fp,44(sp)
  802f1c:	dd400815 	stw	r21,32(sp)
  802f20:	dd000715 	stw	r20,28(sp)
  802f24:	dc800515 	stw	r18,20(sp)
  802f28:	202b883a 	mov	r21,r4
  802f2c:	dfc00c15 	stw	ra,48(sp)
  802f30:	ddc00a15 	stw	r23,40(sp)
  802f34:	dd800915 	stw	r22,36(sp)
  802f38:	dc400415 	stw	r17,16(sp)
  802f3c:	dc000315 	stw	r16,12(sp)
  802f40:	2829883a 	mov	r20,r5
  802f44:	3039883a 	mov	fp,r6
  802f48:	3825883a 	mov	r18,r7
  802f4c:	2809883a 	mov	r4,r5
  802f50:	2005883a 	mov	r2,r4
  802f54:	14400003 	ldbu	r17,0(r2)
  802f58:	24000044 	addi	r16,r4,1
  802f5c:	8009883a 	mov	r4,r16
  802f60:	9c47883a 	add	r3,r19,r17
  802f64:	18c00043 	ldbu	r3,1(r3)
  802f68:	18c0020c 	andi	r3,r3,8
  802f6c:	183ff81e 	bne	r3,zero,802f50 <__alt_data_end+0xff802f50>
  802f70:	00c00b44 	movi	r3,45
  802f74:	88c0041e 	bne	r17,r3,802f88 <_strtol_r+0x84>
  802f78:	14000084 	addi	r16,r2,2
  802f7c:	14400043 	ldbu	r17,1(r2)
  802f80:	05c00044 	movi	r23,1
  802f84:	00000506 	br	802f9c <_strtol_r+0x98>
  802f88:	00c00ac4 	movi	r3,43
  802f8c:	88c0021e 	bne	r17,r3,802f98 <_strtol_r+0x94>
  802f90:	14400043 	ldbu	r17,1(r2)
  802f94:	14000084 	addi	r16,r2,2
  802f98:	002f883a 	mov	r23,zero
  802f9c:	90000326 	beq	r18,zero,802fac <_strtol_r+0xa8>
  802fa0:	00800404 	movi	r2,16
  802fa4:	90800a1e 	bne	r18,r2,802fd0 <_strtol_r+0xcc>
  802fa8:	00005406 	br	8030fc <_strtol_r+0x1f8>
  802fac:	00800c04 	movi	r2,48
  802fb0:	8880501e 	bne	r17,r2,8030f4 <_strtol_r+0x1f0>
  802fb4:	80800003 	ldbu	r2,0(r16)
  802fb8:	00c01604 	movi	r3,88
  802fbc:	108037cc 	andi	r2,r2,223
  802fc0:	10c0481e 	bne	r2,r3,8030e4 <_strtol_r+0x1e0>
  802fc4:	84400043 	ldbu	r17,1(r16)
  802fc8:	04800404 	movi	r18,16
  802fcc:	84000084 	addi	r16,r16,2
  802fd0:	00e00034 	movhi	r3,32768
  802fd4:	18ffffc4 	addi	r3,r3,-1
  802fd8:	b8c7883a 	add	r3,r23,r3
  802fdc:	1809883a 	mov	r4,r3
  802fe0:	900b883a 	mov	r5,r18
  802fe4:	d8c00015 	stw	r3,0(sp)
  802fe8:	08015240 	call	801524 <__umodsi3>
  802fec:	d8c00017 	ldw	r3,0(sp)
  802ff0:	900b883a 	mov	r5,r18
  802ff4:	102d883a 	mov	r22,r2
  802ff8:	1809883a 	mov	r4,r3
  802ffc:	08014c00 	call	8014c0 <__udivsi3>
  803000:	100d883a 	mov	r6,r2
  803004:	0009883a 	mov	r4,zero
  803008:	0005883a 	mov	r2,zero
  80300c:	01c00044 	movi	r7,1
  803010:	023fffc4 	movi	r8,-1
  803014:	9c47883a 	add	r3,r19,r17
  803018:	18c00043 	ldbu	r3,1(r3)
  80301c:	1940010c 	andi	r5,r3,4
  803020:	28000226 	beq	r5,zero,80302c <_strtol_r+0x128>
  803024:	8c7ff404 	addi	r17,r17,-48
  803028:	00000706 	br	803048 <_strtol_r+0x144>
  80302c:	18c000cc 	andi	r3,r3,3
  803030:	18001a26 	beq	r3,zero,80309c <_strtol_r+0x198>
  803034:	19c00226 	beq	r3,r7,803040 <_strtol_r+0x13c>
  803038:	00c015c4 	movi	r3,87
  80303c:	00000106 	br	803044 <_strtol_r+0x140>
  803040:	00c00dc4 	movi	r3,55
  803044:	88e3c83a 	sub	r17,r17,r3
  803048:	8c80140e 	bge	r17,r18,80309c <_strtol_r+0x198>
  80304c:	22001026 	beq	r4,r8,803090 <_strtol_r+0x18c>
  803050:	30800e36 	bltu	r6,r2,80308c <_strtol_r+0x188>
  803054:	1180011e 	bne	r2,r6,80305c <_strtol_r+0x158>
  803058:	b4400c16 	blt	r22,r17,80308c <_strtol_r+0x188>
  80305c:	1009883a 	mov	r4,r2
  803060:	900b883a 	mov	r5,r18
  803064:	d9800015 	stw	r6,0(sp)
  803068:	d9c00115 	stw	r7,4(sp)
  80306c:	da000215 	stw	r8,8(sp)
  803070:	080157c0 	call	80157c <__mulsi3>
  803074:	8885883a 	add	r2,r17,r2
  803078:	01000044 	movi	r4,1
  80307c:	d9800017 	ldw	r6,0(sp)
  803080:	d9c00117 	ldw	r7,4(sp)
  803084:	da000217 	ldw	r8,8(sp)
  803088:	00000106 	br	803090 <_strtol_r+0x18c>
  80308c:	013fffc4 	movi	r4,-1
  803090:	84400003 	ldbu	r17,0(r16)
  803094:	84000044 	addi	r16,r16,1
  803098:	003fde06 	br	803014 <__alt_data_end+0xff803014>
  80309c:	00ffffc4 	movi	r3,-1
  8030a0:	20c0071e 	bne	r4,r3,8030c0 <_strtol_r+0x1bc>
  8030a4:	00a00034 	movhi	r2,32768
  8030a8:	10c5883a 	add	r2,r2,r3
  8030ac:	00c00884 	movi	r3,34
  8030b0:	a8c00015 	stw	r3,0(r21)
  8030b4:	b885883a 	add	r2,r23,r2
  8030b8:	e000051e 	bne	fp,zero,8030d0 <_strtol_r+0x1cc>
  8030bc:	00001206 	br	803108 <_strtol_r+0x204>
  8030c0:	b8000126 	beq	r23,zero,8030c8 <_strtol_r+0x1c4>
  8030c4:	0085c83a 	sub	r2,zero,r2
  8030c8:	e0000f26 	beq	fp,zero,803108 <_strtol_r+0x204>
  8030cc:	20000226 	beq	r4,zero,8030d8 <_strtol_r+0x1d4>
  8030d0:	843fffc4 	addi	r16,r16,-1
  8030d4:	00000106 	br	8030dc <_strtol_r+0x1d8>
  8030d8:	a021883a 	mov	r16,r20
  8030dc:	e4000015 	stw	r16,0(fp)
  8030e0:	00000906 	br	803108 <_strtol_r+0x204>
  8030e4:	04400c04 	movi	r17,48
  8030e8:	903fb91e 	bne	r18,zero,802fd0 <__alt_data_end+0xff802fd0>
  8030ec:	04800204 	movi	r18,8
  8030f0:	003fb706 	br	802fd0 <__alt_data_end+0xff802fd0>
  8030f4:	04800284 	movi	r18,10
  8030f8:	003fb506 	br	802fd0 <__alt_data_end+0xff802fd0>
  8030fc:	00800c04 	movi	r2,48
  803100:	88bfac26 	beq	r17,r2,802fb4 <__alt_data_end+0xff802fb4>
  803104:	003fb206 	br	802fd0 <__alt_data_end+0xff802fd0>
  803108:	dfc00c17 	ldw	ra,48(sp)
  80310c:	df000b17 	ldw	fp,44(sp)
  803110:	ddc00a17 	ldw	r23,40(sp)
  803114:	dd800917 	ldw	r22,36(sp)
  803118:	dd400817 	ldw	r21,32(sp)
  80311c:	dd000717 	ldw	r20,28(sp)
  803120:	dcc00617 	ldw	r19,24(sp)
  803124:	dc800517 	ldw	r18,20(sp)
  803128:	dc400417 	ldw	r17,16(sp)
  80312c:	dc000317 	ldw	r16,12(sp)
  803130:	dec00d04 	addi	sp,sp,52
  803134:	f800283a 	ret

00803138 <strtol>:
  803138:	00802034 	movhi	r2,128
  80313c:	1093ab04 	addi	r2,r2,20140
  803140:	300f883a 	mov	r7,r6
  803144:	280d883a 	mov	r6,r5
  803148:	200b883a 	mov	r5,r4
  80314c:	11000017 	ldw	r4,0(r2)
  803150:	0802f041 	jmpi	802f04 <_strtol_r>

00803154 <print_repeat>:
  803154:	defffb04 	addi	sp,sp,-20
  803158:	dc800315 	stw	r18,12(sp)
  80315c:	dc400215 	stw	r17,8(sp)
  803160:	dc000115 	stw	r16,4(sp)
  803164:	dfc00415 	stw	ra,16(sp)
  803168:	2025883a 	mov	r18,r4
  80316c:	2823883a 	mov	r17,r5
  803170:	d9800005 	stb	r6,0(sp)
  803174:	3821883a 	mov	r16,r7
  803178:	04000a0e 	bge	zero,r16,8031a4 <print_repeat+0x50>
  80317c:	88800117 	ldw	r2,4(r17)
  803180:	01c00044 	movi	r7,1
  803184:	d80d883a 	mov	r6,sp
  803188:	880b883a 	mov	r5,r17
  80318c:	9009883a 	mov	r4,r18
  803190:	103ee83a 	callr	r2
  803194:	843fffc4 	addi	r16,r16,-1
  803198:	103ff726 	beq	r2,zero,803178 <__alt_data_end+0xff803178>
  80319c:	00bfffc4 	movi	r2,-1
  8031a0:	00000106 	br	8031a8 <print_repeat+0x54>
  8031a4:	0005883a 	mov	r2,zero
  8031a8:	dfc00417 	ldw	ra,16(sp)
  8031ac:	dc800317 	ldw	r18,12(sp)
  8031b0:	dc400217 	ldw	r17,8(sp)
  8031b4:	dc000117 	ldw	r16,4(sp)
  8031b8:	dec00504 	addi	sp,sp,20
  8031bc:	f800283a 	ret

008031c0 <___svfprintf_internal_r>:
  8031c0:	deffe504 	addi	sp,sp,-108
  8031c4:	d8c00804 	addi	r3,sp,32
  8031c8:	ddc01815 	stw	r23,96(sp)
  8031cc:	dd801715 	stw	r22,92(sp)
  8031d0:	dd401615 	stw	r21,88(sp)
  8031d4:	dd001515 	stw	r20,84(sp)
  8031d8:	dcc01415 	stw	r19,80(sp)
  8031dc:	dc801315 	stw	r18,76(sp)
  8031e0:	dc401215 	stw	r17,72(sp)
  8031e4:	dc001115 	stw	r16,68(sp)
  8031e8:	dfc01a15 	stw	ra,104(sp)
  8031ec:	df001915 	stw	fp,100(sp)
  8031f0:	2029883a 	mov	r20,r4
  8031f4:	2823883a 	mov	r17,r5
  8031f8:	382d883a 	mov	r22,r7
  8031fc:	d9800f15 	stw	r6,60(sp)
  803200:	0021883a 	mov	r16,zero
  803204:	d8000e15 	stw	zero,56(sp)
  803208:	d8000a15 	stw	zero,40(sp)
  80320c:	002b883a 	mov	r21,zero
  803210:	0027883a 	mov	r19,zero
  803214:	0025883a 	mov	r18,zero
  803218:	d8000c15 	stw	zero,48(sp)
  80321c:	d8000b15 	stw	zero,44(sp)
  803220:	002f883a 	mov	r23,zero
  803224:	d8c00915 	stw	r3,36(sp)
  803228:	d8c00f17 	ldw	r3,60(sp)
  80322c:	19000003 	ldbu	r4,0(r3)
  803230:	20803fcc 	andi	r2,r4,255
  803234:	1080201c 	xori	r2,r2,128
  803238:	10bfe004 	addi	r2,r2,-128
  80323c:	10011e26 	beq	r2,zero,8036b8 <___svfprintf_internal_r+0x4f8>
  803240:	00c00044 	movi	r3,1
  803244:	b8c01426 	beq	r23,r3,803298 <___svfprintf_internal_r+0xd8>
  803248:	1dc00216 	blt	r3,r23,803254 <___svfprintf_internal_r+0x94>
  80324c:	b8000626 	beq	r23,zero,803268 <___svfprintf_internal_r+0xa8>
  803250:	00011506 	br	8036a8 <___svfprintf_internal_r+0x4e8>
  803254:	01400084 	movi	r5,2
  803258:	b9401d26 	beq	r23,r5,8032d0 <___svfprintf_internal_r+0x110>
  80325c:	014000c4 	movi	r5,3
  803260:	b9402b26 	beq	r23,r5,803310 <___svfprintf_internal_r+0x150>
  803264:	00011006 	br	8036a8 <___svfprintf_internal_r+0x4e8>
  803268:	01400944 	movi	r5,37
  80326c:	1140fc26 	beq	r2,r5,803660 <___svfprintf_internal_r+0x4a0>
  803270:	88800117 	ldw	r2,4(r17)
  803274:	d9000005 	stb	r4,0(sp)
  803278:	01c00044 	movi	r7,1
  80327c:	d80d883a 	mov	r6,sp
  803280:	880b883a 	mov	r5,r17
  803284:	a009883a 	mov	r4,r20
  803288:	103ee83a 	callr	r2
  80328c:	1000d81e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  803290:	84000044 	addi	r16,r16,1
  803294:	00010406 	br	8036a8 <___svfprintf_internal_r+0x4e8>
  803298:	01400c04 	movi	r5,48
  80329c:	1140fa26 	beq	r2,r5,803688 <___svfprintf_internal_r+0x4c8>
  8032a0:	01400944 	movi	r5,37
  8032a4:	11400a1e 	bne	r2,r5,8032d0 <___svfprintf_internal_r+0x110>
  8032a8:	d8800005 	stb	r2,0(sp)
  8032ac:	88800117 	ldw	r2,4(r17)
  8032b0:	b80f883a 	mov	r7,r23
  8032b4:	d80d883a 	mov	r6,sp
  8032b8:	880b883a 	mov	r5,r17
  8032bc:	a009883a 	mov	r4,r20
  8032c0:	103ee83a 	callr	r2
  8032c4:	1000ca1e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  8032c8:	84000044 	addi	r16,r16,1
  8032cc:	0000f506 	br	8036a4 <___svfprintf_internal_r+0x4e4>
  8032d0:	25fff404 	addi	r23,r4,-48
  8032d4:	bdc03fcc 	andi	r23,r23,255
  8032d8:	00c00244 	movi	r3,9
  8032dc:	1dc00936 	bltu	r3,r23,803304 <___svfprintf_internal_r+0x144>
  8032e0:	00bfffc4 	movi	r2,-1
  8032e4:	90800426 	beq	r18,r2,8032f8 <___svfprintf_internal_r+0x138>
  8032e8:	01400284 	movi	r5,10
  8032ec:	9009883a 	mov	r4,r18
  8032f0:	080157c0 	call	80157c <__mulsi3>
  8032f4:	00000106 	br	8032fc <___svfprintf_internal_r+0x13c>
  8032f8:	0005883a 	mov	r2,zero
  8032fc:	b8a5883a 	add	r18,r23,r2
  803300:	0000e206 	br	80368c <___svfprintf_internal_r+0x4cc>
  803304:	01400b84 	movi	r5,46
  803308:	1140e426 	beq	r2,r5,80369c <___svfprintf_internal_r+0x4dc>
  80330c:	05c00084 	movi	r23,2
  803310:	213ff404 	addi	r4,r4,-48
  803314:	27003fcc 	andi	fp,r4,255
  803318:	00c00244 	movi	r3,9
  80331c:	1f000936 	bltu	r3,fp,803344 <___svfprintf_internal_r+0x184>
  803320:	00bfffc4 	movi	r2,-1
  803324:	98800426 	beq	r19,r2,803338 <___svfprintf_internal_r+0x178>
  803328:	01400284 	movi	r5,10
  80332c:	9809883a 	mov	r4,r19
  803330:	080157c0 	call	80157c <__mulsi3>
  803334:	00000106 	br	80333c <___svfprintf_internal_r+0x17c>
  803338:	0005883a 	mov	r2,zero
  80333c:	e0a7883a 	add	r19,fp,r2
  803340:	0000d906 	br	8036a8 <___svfprintf_internal_r+0x4e8>
  803344:	00c01b04 	movi	r3,108
  803348:	10c0d226 	beq	r2,r3,803694 <___svfprintf_internal_r+0x4d4>
  80334c:	013fffc4 	movi	r4,-1
  803350:	99000226 	beq	r19,r4,80335c <___svfprintf_internal_r+0x19c>
  803354:	d8000b15 	stw	zero,44(sp)
  803358:	00000106 	br	803360 <___svfprintf_internal_r+0x1a0>
  80335c:	04c00044 	movi	r19,1
  803360:	01001a44 	movi	r4,105
  803364:	11001626 	beq	r2,r4,8033c0 <___svfprintf_internal_r+0x200>
  803368:	20800916 	blt	r4,r2,803390 <___svfprintf_internal_r+0x1d0>
  80336c:	010018c4 	movi	r4,99
  803370:	11008826 	beq	r2,r4,803594 <___svfprintf_internal_r+0x3d4>
  803374:	01001904 	movi	r4,100
  803378:	11001126 	beq	r2,r4,8033c0 <___svfprintf_internal_r+0x200>
  80337c:	01001604 	movi	r4,88
  803380:	1100c81e 	bne	r2,r4,8036a4 <___svfprintf_internal_r+0x4e4>
  803384:	00c00044 	movi	r3,1
  803388:	d8c00e15 	stw	r3,56(sp)
  80338c:	00001506 	br	8033e4 <___svfprintf_internal_r+0x224>
  803390:	01001cc4 	movi	r4,115
  803394:	11009826 	beq	r2,r4,8035f8 <___svfprintf_internal_r+0x438>
  803398:	20800416 	blt	r4,r2,8033ac <___svfprintf_internal_r+0x1ec>
  80339c:	01001bc4 	movi	r4,111
  8033a0:	1100c01e 	bne	r2,r4,8036a4 <___svfprintf_internal_r+0x4e4>
  8033a4:	05400204 	movi	r21,8
  8033a8:	00000f06 	br	8033e8 <___svfprintf_internal_r+0x228>
  8033ac:	01001d44 	movi	r4,117
  8033b0:	11000d26 	beq	r2,r4,8033e8 <___svfprintf_internal_r+0x228>
  8033b4:	01001e04 	movi	r4,120
  8033b8:	11000a26 	beq	r2,r4,8033e4 <___svfprintf_internal_r+0x224>
  8033bc:	0000b906 	br	8036a4 <___svfprintf_internal_r+0x4e4>
  8033c0:	d8c00a17 	ldw	r3,40(sp)
  8033c4:	b7000104 	addi	fp,r22,4
  8033c8:	18000726 	beq	r3,zero,8033e8 <___svfprintf_internal_r+0x228>
  8033cc:	df000d15 	stw	fp,52(sp)
  8033d0:	b5c00017 	ldw	r23,0(r22)
  8033d4:	b800080e 	bge	r23,zero,8033f8 <___svfprintf_internal_r+0x238>
  8033d8:	05efc83a 	sub	r23,zero,r23
  8033dc:	02400044 	movi	r9,1
  8033e0:	00000606 	br	8033fc <___svfprintf_internal_r+0x23c>
  8033e4:	05400404 	movi	r21,16
  8033e8:	b0c00104 	addi	r3,r22,4
  8033ec:	d8c00d15 	stw	r3,52(sp)
  8033f0:	b5c00017 	ldw	r23,0(r22)
  8033f4:	d8000a15 	stw	zero,40(sp)
  8033f8:	0013883a 	mov	r9,zero
  8033fc:	d839883a 	mov	fp,sp
  803400:	b8001726 	beq	r23,zero,803460 <___svfprintf_internal_r+0x2a0>
  803404:	a80b883a 	mov	r5,r21
  803408:	b809883a 	mov	r4,r23
  80340c:	da401015 	stw	r9,64(sp)
  803410:	08014c00 	call	8014c0 <__udivsi3>
  803414:	a80b883a 	mov	r5,r21
  803418:	1009883a 	mov	r4,r2
  80341c:	102d883a 	mov	r22,r2
  803420:	080157c0 	call	80157c <__mulsi3>
  803424:	b885c83a 	sub	r2,r23,r2
  803428:	00c00244 	movi	r3,9
  80342c:	da401017 	ldw	r9,64(sp)
  803430:	18800216 	blt	r3,r2,80343c <___svfprintf_internal_r+0x27c>
  803434:	10800c04 	addi	r2,r2,48
  803438:	00000506 	br	803450 <___svfprintf_internal_r+0x290>
  80343c:	d8c00e17 	ldw	r3,56(sp)
  803440:	18000226 	beq	r3,zero,80344c <___svfprintf_internal_r+0x28c>
  803444:	10800dc4 	addi	r2,r2,55
  803448:	00000106 	br	803450 <___svfprintf_internal_r+0x290>
  80344c:	108015c4 	addi	r2,r2,87
  803450:	e0800005 	stb	r2,0(fp)
  803454:	b02f883a 	mov	r23,r22
  803458:	e7000044 	addi	fp,fp,1
  80345c:	003fe806 	br	803400 <__alt_data_end+0xff803400>
  803460:	e6efc83a 	sub	r23,fp,sp
  803464:	9dc5c83a 	sub	r2,r19,r23
  803468:	0080090e 	bge	zero,r2,803490 <___svfprintf_internal_r+0x2d0>
  80346c:	e085883a 	add	r2,fp,r2
  803470:	01400c04 	movi	r5,48
  803474:	d8c00917 	ldw	r3,36(sp)
  803478:	e009883a 	mov	r4,fp
  80347c:	e0c0032e 	bgeu	fp,r3,80348c <___svfprintf_internal_r+0x2cc>
  803480:	e7000044 	addi	fp,fp,1
  803484:	21400005 	stb	r5,0(r4)
  803488:	e0bffa1e 	bne	fp,r2,803474 <__alt_data_end+0xff803474>
  80348c:	e6efc83a 	sub	r23,fp,sp
  803490:	d8c00b17 	ldw	r3,44(sp)
  803494:	4dd1883a 	add	r8,r9,r23
  803498:	922dc83a 	sub	r22,r18,r8
  80349c:	18001626 	beq	r3,zero,8034f8 <___svfprintf_internal_r+0x338>
  8034a0:	48000a26 	beq	r9,zero,8034cc <___svfprintf_internal_r+0x30c>
  8034a4:	00800b44 	movi	r2,45
  8034a8:	d8800805 	stb	r2,32(sp)
  8034ac:	88800117 	ldw	r2,4(r17)
  8034b0:	01c00044 	movi	r7,1
  8034b4:	d9800804 	addi	r6,sp,32
  8034b8:	880b883a 	mov	r5,r17
  8034bc:	a009883a 	mov	r4,r20
  8034c0:	103ee83a 	callr	r2
  8034c4:	10004a1e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  8034c8:	84000044 	addi	r16,r16,1
  8034cc:	0580070e 	bge	zero,r22,8034ec <___svfprintf_internal_r+0x32c>
  8034d0:	b00f883a 	mov	r7,r22
  8034d4:	01800c04 	movi	r6,48
  8034d8:	880b883a 	mov	r5,r17
  8034dc:	a009883a 	mov	r4,r20
  8034e0:	08031540 	call	803154 <print_repeat>
  8034e4:	1000421e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  8034e8:	85a1883a 	add	r16,r16,r22
  8034ec:	e02d883a 	mov	r22,fp
  8034f0:	bf2fc83a 	sub	r23,r23,fp
  8034f4:	00002006 	br	803578 <___svfprintf_internal_r+0x3b8>
  8034f8:	0580090e 	bge	zero,r22,803520 <___svfprintf_internal_r+0x360>
  8034fc:	b00f883a 	mov	r7,r22
  803500:	01800804 	movi	r6,32
  803504:	880b883a 	mov	r5,r17
  803508:	a009883a 	mov	r4,r20
  80350c:	da401015 	stw	r9,64(sp)
  803510:	08031540 	call	803154 <print_repeat>
  803514:	da401017 	ldw	r9,64(sp)
  803518:	1000351e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  80351c:	85a1883a 	add	r16,r16,r22
  803520:	483ff226 	beq	r9,zero,8034ec <__alt_data_end+0xff8034ec>
  803524:	00800b44 	movi	r2,45
  803528:	d8800805 	stb	r2,32(sp)
  80352c:	88800117 	ldw	r2,4(r17)
  803530:	01c00044 	movi	r7,1
  803534:	d9800804 	addi	r6,sp,32
  803538:	880b883a 	mov	r5,r17
  80353c:	a009883a 	mov	r4,r20
  803540:	103ee83a 	callr	r2
  803544:	10002a1e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  803548:	84000044 	addi	r16,r16,1
  80354c:	003fe706 	br	8034ec <__alt_data_end+0xff8034ec>
  803550:	b5bfffc4 	addi	r22,r22,-1
  803554:	b0800003 	ldbu	r2,0(r22)
  803558:	01c00044 	movi	r7,1
  80355c:	d9800804 	addi	r6,sp,32
  803560:	d8800805 	stb	r2,32(sp)
  803564:	88800117 	ldw	r2,4(r17)
  803568:	880b883a 	mov	r5,r17
  80356c:	a009883a 	mov	r4,r20
  803570:	103ee83a 	callr	r2
  803574:	10001e1e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  803578:	8585c83a 	sub	r2,r16,r22
  80357c:	b5c9883a 	add	r4,r22,r23
  803580:	e085883a 	add	r2,fp,r2
  803584:	013ff216 	blt	zero,r4,803550 <__alt_data_end+0xff803550>
  803588:	1021883a 	mov	r16,r2
  80358c:	dd800d17 	ldw	r22,52(sp)
  803590:	00004406 	br	8036a4 <___svfprintf_internal_r+0x4e4>
  803594:	00800044 	movi	r2,1
  803598:	1480080e 	bge	r2,r18,8035bc <___svfprintf_internal_r+0x3fc>
  80359c:	95ffffc4 	addi	r23,r18,-1
  8035a0:	b80f883a 	mov	r7,r23
  8035a4:	01800804 	movi	r6,32
  8035a8:	880b883a 	mov	r5,r17
  8035ac:	a009883a 	mov	r4,r20
  8035b0:	08031540 	call	803154 <print_repeat>
  8035b4:	10000e1e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  8035b8:	85e1883a 	add	r16,r16,r23
  8035bc:	b0800017 	ldw	r2,0(r22)
  8035c0:	01c00044 	movi	r7,1
  8035c4:	d80d883a 	mov	r6,sp
  8035c8:	d8800005 	stb	r2,0(sp)
  8035cc:	88800117 	ldw	r2,4(r17)
  8035d0:	880b883a 	mov	r5,r17
  8035d4:	a009883a 	mov	r4,r20
  8035d8:	b5c00104 	addi	r23,r22,4
  8035dc:	103ee83a 	callr	r2
  8035e0:	1000031e 	bne	r2,zero,8035f0 <___svfprintf_internal_r+0x430>
  8035e4:	84000044 	addi	r16,r16,1
  8035e8:	b82d883a 	mov	r22,r23
  8035ec:	00002d06 	br	8036a4 <___svfprintf_internal_r+0x4e4>
  8035f0:	00bfffc4 	movi	r2,-1
  8035f4:	00003106 	br	8036bc <___svfprintf_internal_r+0x4fc>
  8035f8:	b5c00017 	ldw	r23,0(r22)
  8035fc:	b7000104 	addi	fp,r22,4
  803600:	b809883a 	mov	r4,r23
  803604:	0802d300 	call	802d30 <strlen>
  803608:	9091c83a 	sub	r8,r18,r2
  80360c:	102d883a 	mov	r22,r2
  803610:	0200090e 	bge	zero,r8,803638 <___svfprintf_internal_r+0x478>
  803614:	400f883a 	mov	r7,r8
  803618:	01800804 	movi	r6,32
  80361c:	880b883a 	mov	r5,r17
  803620:	a009883a 	mov	r4,r20
  803624:	da001015 	stw	r8,64(sp)
  803628:	08031540 	call	803154 <print_repeat>
  80362c:	da001017 	ldw	r8,64(sp)
  803630:	103fef1e 	bne	r2,zero,8035f0 <__alt_data_end+0xff8035f0>
  803634:	8221883a 	add	r16,r16,r8
  803638:	88800117 	ldw	r2,4(r17)
  80363c:	b00f883a 	mov	r7,r22
  803640:	b80d883a 	mov	r6,r23
  803644:	880b883a 	mov	r5,r17
  803648:	a009883a 	mov	r4,r20
  80364c:	103ee83a 	callr	r2
  803650:	103fe71e 	bne	r2,zero,8035f0 <__alt_data_end+0xff8035f0>
  803654:	85a1883a 	add	r16,r16,r22
  803658:	e02d883a 	mov	r22,fp
  80365c:	00001106 	br	8036a4 <___svfprintf_internal_r+0x4e4>
  803660:	00c00044 	movi	r3,1
  803664:	04ffffc4 	movi	r19,-1
  803668:	d8000e15 	stw	zero,56(sp)
  80366c:	d8c00a15 	stw	r3,40(sp)
  803670:	05400284 	movi	r21,10
  803674:	9825883a 	mov	r18,r19
  803678:	d8000c15 	stw	zero,48(sp)
  80367c:	d8000b15 	stw	zero,44(sp)
  803680:	182f883a 	mov	r23,r3
  803684:	00000806 	br	8036a8 <___svfprintf_internal_r+0x4e8>
  803688:	ddc00b15 	stw	r23,44(sp)
  80368c:	05c00084 	movi	r23,2
  803690:	00000506 	br	8036a8 <___svfprintf_internal_r+0x4e8>
  803694:	00c00044 	movi	r3,1
  803698:	d8c00c15 	stw	r3,48(sp)
  80369c:	05c000c4 	movi	r23,3
  8036a0:	00000106 	br	8036a8 <___svfprintf_internal_r+0x4e8>
  8036a4:	002f883a 	mov	r23,zero
  8036a8:	d8c00f17 	ldw	r3,60(sp)
  8036ac:	18c00044 	addi	r3,r3,1
  8036b0:	d8c00f15 	stw	r3,60(sp)
  8036b4:	003edc06 	br	803228 <__alt_data_end+0xff803228>
  8036b8:	8005883a 	mov	r2,r16
  8036bc:	dfc01a17 	ldw	ra,104(sp)
  8036c0:	df001917 	ldw	fp,100(sp)
  8036c4:	ddc01817 	ldw	r23,96(sp)
  8036c8:	dd801717 	ldw	r22,92(sp)
  8036cc:	dd401617 	ldw	r21,88(sp)
  8036d0:	dd001517 	ldw	r20,84(sp)
  8036d4:	dcc01417 	ldw	r19,80(sp)
  8036d8:	dc801317 	ldw	r18,76(sp)
  8036dc:	dc401217 	ldw	r17,72(sp)
  8036e0:	dc001117 	ldw	r16,68(sp)
  8036e4:	dec01b04 	addi	sp,sp,108
  8036e8:	f800283a 	ret

008036ec <__vfprintf_internal_unused>:
  8036ec:	00802034 	movhi	r2,128
  8036f0:	1093ab04 	addi	r2,r2,20140
  8036f4:	300f883a 	mov	r7,r6
  8036f8:	280d883a 	mov	r6,r5
  8036fc:	200b883a 	mov	r5,r4
  803700:	11000017 	ldw	r4,0(r2)
  803704:	08031c01 	jmpi	8031c0 <___svfprintf_internal_r>

00803708 <print_repeat>:
  803708:	defffb04 	addi	sp,sp,-20
  80370c:	dc800315 	stw	r18,12(sp)
  803710:	dc400215 	stw	r17,8(sp)
  803714:	dc000115 	stw	r16,4(sp)
  803718:	dfc00415 	stw	ra,16(sp)
  80371c:	2025883a 	mov	r18,r4
  803720:	2823883a 	mov	r17,r5
  803724:	d9800005 	stb	r6,0(sp)
  803728:	3821883a 	mov	r16,r7
  80372c:	04000a0e 	bge	zero,r16,803758 <print_repeat+0x50>
  803730:	88800117 	ldw	r2,4(r17)
  803734:	01c00044 	movi	r7,1
  803738:	d80d883a 	mov	r6,sp
  80373c:	880b883a 	mov	r5,r17
  803740:	9009883a 	mov	r4,r18
  803744:	103ee83a 	callr	r2
  803748:	843fffc4 	addi	r16,r16,-1
  80374c:	103ff726 	beq	r2,zero,80372c <__alt_data_end+0xff80372c>
  803750:	00bfffc4 	movi	r2,-1
  803754:	00000106 	br	80375c <print_repeat+0x54>
  803758:	0005883a 	mov	r2,zero
  80375c:	dfc00417 	ldw	ra,16(sp)
  803760:	dc800317 	ldw	r18,12(sp)
  803764:	dc400217 	ldw	r17,8(sp)
  803768:	dc000117 	ldw	r16,4(sp)
  80376c:	dec00504 	addi	sp,sp,20
  803770:	f800283a 	ret

00803774 <___vfprintf_internal_r>:
  803774:	deffe504 	addi	sp,sp,-108
  803778:	d8c00804 	addi	r3,sp,32
  80377c:	ddc01815 	stw	r23,96(sp)
  803780:	dd801715 	stw	r22,92(sp)
  803784:	dd401615 	stw	r21,88(sp)
  803788:	dd001515 	stw	r20,84(sp)
  80378c:	dcc01415 	stw	r19,80(sp)
  803790:	dc801315 	stw	r18,76(sp)
  803794:	dc401215 	stw	r17,72(sp)
  803798:	dc001115 	stw	r16,68(sp)
  80379c:	dfc01a15 	stw	ra,104(sp)
  8037a0:	df001915 	stw	fp,100(sp)
  8037a4:	2029883a 	mov	r20,r4
  8037a8:	2823883a 	mov	r17,r5
  8037ac:	382d883a 	mov	r22,r7
  8037b0:	d9800f15 	stw	r6,60(sp)
  8037b4:	0021883a 	mov	r16,zero
  8037b8:	d8000e15 	stw	zero,56(sp)
  8037bc:	d8000a15 	stw	zero,40(sp)
  8037c0:	002b883a 	mov	r21,zero
  8037c4:	0027883a 	mov	r19,zero
  8037c8:	0025883a 	mov	r18,zero
  8037cc:	d8000c15 	stw	zero,48(sp)
  8037d0:	d8000b15 	stw	zero,44(sp)
  8037d4:	002f883a 	mov	r23,zero
  8037d8:	d8c00915 	stw	r3,36(sp)
  8037dc:	d8c00f17 	ldw	r3,60(sp)
  8037e0:	19000003 	ldbu	r4,0(r3)
  8037e4:	20803fcc 	andi	r2,r4,255
  8037e8:	1080201c 	xori	r2,r2,128
  8037ec:	10bfe004 	addi	r2,r2,-128
  8037f0:	10011e26 	beq	r2,zero,803c6c <___vfprintf_internal_r+0x4f8>
  8037f4:	00c00044 	movi	r3,1
  8037f8:	b8c01426 	beq	r23,r3,80384c <___vfprintf_internal_r+0xd8>
  8037fc:	1dc00216 	blt	r3,r23,803808 <___vfprintf_internal_r+0x94>
  803800:	b8000626 	beq	r23,zero,80381c <___vfprintf_internal_r+0xa8>
  803804:	00011506 	br	803c5c <___vfprintf_internal_r+0x4e8>
  803808:	01400084 	movi	r5,2
  80380c:	b9401d26 	beq	r23,r5,803884 <___vfprintf_internal_r+0x110>
  803810:	014000c4 	movi	r5,3
  803814:	b9402b26 	beq	r23,r5,8038c4 <___vfprintf_internal_r+0x150>
  803818:	00011006 	br	803c5c <___vfprintf_internal_r+0x4e8>
  80381c:	01400944 	movi	r5,37
  803820:	1140fc26 	beq	r2,r5,803c14 <___vfprintf_internal_r+0x4a0>
  803824:	88800117 	ldw	r2,4(r17)
  803828:	d9000005 	stb	r4,0(sp)
  80382c:	01c00044 	movi	r7,1
  803830:	d80d883a 	mov	r6,sp
  803834:	880b883a 	mov	r5,r17
  803838:	a009883a 	mov	r4,r20
  80383c:	103ee83a 	callr	r2
  803840:	1000d81e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  803844:	84000044 	addi	r16,r16,1
  803848:	00010406 	br	803c5c <___vfprintf_internal_r+0x4e8>
  80384c:	01400c04 	movi	r5,48
  803850:	1140fa26 	beq	r2,r5,803c3c <___vfprintf_internal_r+0x4c8>
  803854:	01400944 	movi	r5,37
  803858:	11400a1e 	bne	r2,r5,803884 <___vfprintf_internal_r+0x110>
  80385c:	d8800005 	stb	r2,0(sp)
  803860:	88800117 	ldw	r2,4(r17)
  803864:	b80f883a 	mov	r7,r23
  803868:	d80d883a 	mov	r6,sp
  80386c:	880b883a 	mov	r5,r17
  803870:	a009883a 	mov	r4,r20
  803874:	103ee83a 	callr	r2
  803878:	1000ca1e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  80387c:	84000044 	addi	r16,r16,1
  803880:	0000f506 	br	803c58 <___vfprintf_internal_r+0x4e4>
  803884:	25fff404 	addi	r23,r4,-48
  803888:	bdc03fcc 	andi	r23,r23,255
  80388c:	00c00244 	movi	r3,9
  803890:	1dc00936 	bltu	r3,r23,8038b8 <___vfprintf_internal_r+0x144>
  803894:	00bfffc4 	movi	r2,-1
  803898:	90800426 	beq	r18,r2,8038ac <___vfprintf_internal_r+0x138>
  80389c:	01400284 	movi	r5,10
  8038a0:	9009883a 	mov	r4,r18
  8038a4:	080157c0 	call	80157c <__mulsi3>
  8038a8:	00000106 	br	8038b0 <___vfprintf_internal_r+0x13c>
  8038ac:	0005883a 	mov	r2,zero
  8038b0:	b8a5883a 	add	r18,r23,r2
  8038b4:	0000e206 	br	803c40 <___vfprintf_internal_r+0x4cc>
  8038b8:	01400b84 	movi	r5,46
  8038bc:	1140e426 	beq	r2,r5,803c50 <___vfprintf_internal_r+0x4dc>
  8038c0:	05c00084 	movi	r23,2
  8038c4:	213ff404 	addi	r4,r4,-48
  8038c8:	27003fcc 	andi	fp,r4,255
  8038cc:	00c00244 	movi	r3,9
  8038d0:	1f000936 	bltu	r3,fp,8038f8 <___vfprintf_internal_r+0x184>
  8038d4:	00bfffc4 	movi	r2,-1
  8038d8:	98800426 	beq	r19,r2,8038ec <___vfprintf_internal_r+0x178>
  8038dc:	01400284 	movi	r5,10
  8038e0:	9809883a 	mov	r4,r19
  8038e4:	080157c0 	call	80157c <__mulsi3>
  8038e8:	00000106 	br	8038f0 <___vfprintf_internal_r+0x17c>
  8038ec:	0005883a 	mov	r2,zero
  8038f0:	e0a7883a 	add	r19,fp,r2
  8038f4:	0000d906 	br	803c5c <___vfprintf_internal_r+0x4e8>
  8038f8:	00c01b04 	movi	r3,108
  8038fc:	10c0d226 	beq	r2,r3,803c48 <___vfprintf_internal_r+0x4d4>
  803900:	013fffc4 	movi	r4,-1
  803904:	99000226 	beq	r19,r4,803910 <___vfprintf_internal_r+0x19c>
  803908:	d8000b15 	stw	zero,44(sp)
  80390c:	00000106 	br	803914 <___vfprintf_internal_r+0x1a0>
  803910:	04c00044 	movi	r19,1
  803914:	01001a44 	movi	r4,105
  803918:	11001626 	beq	r2,r4,803974 <___vfprintf_internal_r+0x200>
  80391c:	20800916 	blt	r4,r2,803944 <___vfprintf_internal_r+0x1d0>
  803920:	010018c4 	movi	r4,99
  803924:	11008826 	beq	r2,r4,803b48 <___vfprintf_internal_r+0x3d4>
  803928:	01001904 	movi	r4,100
  80392c:	11001126 	beq	r2,r4,803974 <___vfprintf_internal_r+0x200>
  803930:	01001604 	movi	r4,88
  803934:	1100c81e 	bne	r2,r4,803c58 <___vfprintf_internal_r+0x4e4>
  803938:	00c00044 	movi	r3,1
  80393c:	d8c00e15 	stw	r3,56(sp)
  803940:	00001506 	br	803998 <___vfprintf_internal_r+0x224>
  803944:	01001cc4 	movi	r4,115
  803948:	11009826 	beq	r2,r4,803bac <___vfprintf_internal_r+0x438>
  80394c:	20800416 	blt	r4,r2,803960 <___vfprintf_internal_r+0x1ec>
  803950:	01001bc4 	movi	r4,111
  803954:	1100c01e 	bne	r2,r4,803c58 <___vfprintf_internal_r+0x4e4>
  803958:	05400204 	movi	r21,8
  80395c:	00000f06 	br	80399c <___vfprintf_internal_r+0x228>
  803960:	01001d44 	movi	r4,117
  803964:	11000d26 	beq	r2,r4,80399c <___vfprintf_internal_r+0x228>
  803968:	01001e04 	movi	r4,120
  80396c:	11000a26 	beq	r2,r4,803998 <___vfprintf_internal_r+0x224>
  803970:	0000b906 	br	803c58 <___vfprintf_internal_r+0x4e4>
  803974:	d8c00a17 	ldw	r3,40(sp)
  803978:	b7000104 	addi	fp,r22,4
  80397c:	18000726 	beq	r3,zero,80399c <___vfprintf_internal_r+0x228>
  803980:	df000d15 	stw	fp,52(sp)
  803984:	b5c00017 	ldw	r23,0(r22)
  803988:	b800080e 	bge	r23,zero,8039ac <___vfprintf_internal_r+0x238>
  80398c:	05efc83a 	sub	r23,zero,r23
  803990:	02400044 	movi	r9,1
  803994:	00000606 	br	8039b0 <___vfprintf_internal_r+0x23c>
  803998:	05400404 	movi	r21,16
  80399c:	b0c00104 	addi	r3,r22,4
  8039a0:	d8c00d15 	stw	r3,52(sp)
  8039a4:	b5c00017 	ldw	r23,0(r22)
  8039a8:	d8000a15 	stw	zero,40(sp)
  8039ac:	0013883a 	mov	r9,zero
  8039b0:	d839883a 	mov	fp,sp
  8039b4:	b8001726 	beq	r23,zero,803a14 <___vfprintf_internal_r+0x2a0>
  8039b8:	a80b883a 	mov	r5,r21
  8039bc:	b809883a 	mov	r4,r23
  8039c0:	da401015 	stw	r9,64(sp)
  8039c4:	08014c00 	call	8014c0 <__udivsi3>
  8039c8:	a80b883a 	mov	r5,r21
  8039cc:	1009883a 	mov	r4,r2
  8039d0:	102d883a 	mov	r22,r2
  8039d4:	080157c0 	call	80157c <__mulsi3>
  8039d8:	b885c83a 	sub	r2,r23,r2
  8039dc:	00c00244 	movi	r3,9
  8039e0:	da401017 	ldw	r9,64(sp)
  8039e4:	18800216 	blt	r3,r2,8039f0 <___vfprintf_internal_r+0x27c>
  8039e8:	10800c04 	addi	r2,r2,48
  8039ec:	00000506 	br	803a04 <___vfprintf_internal_r+0x290>
  8039f0:	d8c00e17 	ldw	r3,56(sp)
  8039f4:	18000226 	beq	r3,zero,803a00 <___vfprintf_internal_r+0x28c>
  8039f8:	10800dc4 	addi	r2,r2,55
  8039fc:	00000106 	br	803a04 <___vfprintf_internal_r+0x290>
  803a00:	108015c4 	addi	r2,r2,87
  803a04:	e0800005 	stb	r2,0(fp)
  803a08:	b02f883a 	mov	r23,r22
  803a0c:	e7000044 	addi	fp,fp,1
  803a10:	003fe806 	br	8039b4 <__alt_data_end+0xff8039b4>
  803a14:	e6efc83a 	sub	r23,fp,sp
  803a18:	9dc5c83a 	sub	r2,r19,r23
  803a1c:	0080090e 	bge	zero,r2,803a44 <___vfprintf_internal_r+0x2d0>
  803a20:	e085883a 	add	r2,fp,r2
  803a24:	01400c04 	movi	r5,48
  803a28:	d8c00917 	ldw	r3,36(sp)
  803a2c:	e009883a 	mov	r4,fp
  803a30:	e0c0032e 	bgeu	fp,r3,803a40 <___vfprintf_internal_r+0x2cc>
  803a34:	e7000044 	addi	fp,fp,1
  803a38:	21400005 	stb	r5,0(r4)
  803a3c:	e0bffa1e 	bne	fp,r2,803a28 <__alt_data_end+0xff803a28>
  803a40:	e6efc83a 	sub	r23,fp,sp
  803a44:	d8c00b17 	ldw	r3,44(sp)
  803a48:	4dd1883a 	add	r8,r9,r23
  803a4c:	922dc83a 	sub	r22,r18,r8
  803a50:	18001626 	beq	r3,zero,803aac <___vfprintf_internal_r+0x338>
  803a54:	48000a26 	beq	r9,zero,803a80 <___vfprintf_internal_r+0x30c>
  803a58:	00800b44 	movi	r2,45
  803a5c:	d8800805 	stb	r2,32(sp)
  803a60:	88800117 	ldw	r2,4(r17)
  803a64:	01c00044 	movi	r7,1
  803a68:	d9800804 	addi	r6,sp,32
  803a6c:	880b883a 	mov	r5,r17
  803a70:	a009883a 	mov	r4,r20
  803a74:	103ee83a 	callr	r2
  803a78:	10004a1e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  803a7c:	84000044 	addi	r16,r16,1
  803a80:	0580070e 	bge	zero,r22,803aa0 <___vfprintf_internal_r+0x32c>
  803a84:	b00f883a 	mov	r7,r22
  803a88:	01800c04 	movi	r6,48
  803a8c:	880b883a 	mov	r5,r17
  803a90:	a009883a 	mov	r4,r20
  803a94:	08037080 	call	803708 <print_repeat>
  803a98:	1000421e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  803a9c:	85a1883a 	add	r16,r16,r22
  803aa0:	e02d883a 	mov	r22,fp
  803aa4:	bf2fc83a 	sub	r23,r23,fp
  803aa8:	00002006 	br	803b2c <___vfprintf_internal_r+0x3b8>
  803aac:	0580090e 	bge	zero,r22,803ad4 <___vfprintf_internal_r+0x360>
  803ab0:	b00f883a 	mov	r7,r22
  803ab4:	01800804 	movi	r6,32
  803ab8:	880b883a 	mov	r5,r17
  803abc:	a009883a 	mov	r4,r20
  803ac0:	da401015 	stw	r9,64(sp)
  803ac4:	08037080 	call	803708 <print_repeat>
  803ac8:	da401017 	ldw	r9,64(sp)
  803acc:	1000351e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  803ad0:	85a1883a 	add	r16,r16,r22
  803ad4:	483ff226 	beq	r9,zero,803aa0 <__alt_data_end+0xff803aa0>
  803ad8:	00800b44 	movi	r2,45
  803adc:	d8800805 	stb	r2,32(sp)
  803ae0:	88800117 	ldw	r2,4(r17)
  803ae4:	01c00044 	movi	r7,1
  803ae8:	d9800804 	addi	r6,sp,32
  803aec:	880b883a 	mov	r5,r17
  803af0:	a009883a 	mov	r4,r20
  803af4:	103ee83a 	callr	r2
  803af8:	10002a1e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  803afc:	84000044 	addi	r16,r16,1
  803b00:	003fe706 	br	803aa0 <__alt_data_end+0xff803aa0>
  803b04:	b5bfffc4 	addi	r22,r22,-1
  803b08:	b0800003 	ldbu	r2,0(r22)
  803b0c:	01c00044 	movi	r7,1
  803b10:	d9800804 	addi	r6,sp,32
  803b14:	d8800805 	stb	r2,32(sp)
  803b18:	88800117 	ldw	r2,4(r17)
  803b1c:	880b883a 	mov	r5,r17
  803b20:	a009883a 	mov	r4,r20
  803b24:	103ee83a 	callr	r2
  803b28:	10001e1e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  803b2c:	8585c83a 	sub	r2,r16,r22
  803b30:	b5c9883a 	add	r4,r22,r23
  803b34:	e085883a 	add	r2,fp,r2
  803b38:	013ff216 	blt	zero,r4,803b04 <__alt_data_end+0xff803b04>
  803b3c:	1021883a 	mov	r16,r2
  803b40:	dd800d17 	ldw	r22,52(sp)
  803b44:	00004406 	br	803c58 <___vfprintf_internal_r+0x4e4>
  803b48:	00800044 	movi	r2,1
  803b4c:	1480080e 	bge	r2,r18,803b70 <___vfprintf_internal_r+0x3fc>
  803b50:	95ffffc4 	addi	r23,r18,-1
  803b54:	b80f883a 	mov	r7,r23
  803b58:	01800804 	movi	r6,32
  803b5c:	880b883a 	mov	r5,r17
  803b60:	a009883a 	mov	r4,r20
  803b64:	08037080 	call	803708 <print_repeat>
  803b68:	10000e1e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  803b6c:	85e1883a 	add	r16,r16,r23
  803b70:	b0800017 	ldw	r2,0(r22)
  803b74:	01c00044 	movi	r7,1
  803b78:	d80d883a 	mov	r6,sp
  803b7c:	d8800005 	stb	r2,0(sp)
  803b80:	88800117 	ldw	r2,4(r17)
  803b84:	880b883a 	mov	r5,r17
  803b88:	a009883a 	mov	r4,r20
  803b8c:	b5c00104 	addi	r23,r22,4
  803b90:	103ee83a 	callr	r2
  803b94:	1000031e 	bne	r2,zero,803ba4 <___vfprintf_internal_r+0x430>
  803b98:	84000044 	addi	r16,r16,1
  803b9c:	b82d883a 	mov	r22,r23
  803ba0:	00002d06 	br	803c58 <___vfprintf_internal_r+0x4e4>
  803ba4:	00bfffc4 	movi	r2,-1
  803ba8:	00003106 	br	803c70 <___vfprintf_internal_r+0x4fc>
  803bac:	b5c00017 	ldw	r23,0(r22)
  803bb0:	b7000104 	addi	fp,r22,4
  803bb4:	b809883a 	mov	r4,r23
  803bb8:	0802d300 	call	802d30 <strlen>
  803bbc:	9091c83a 	sub	r8,r18,r2
  803bc0:	102d883a 	mov	r22,r2
  803bc4:	0200090e 	bge	zero,r8,803bec <___vfprintf_internal_r+0x478>
  803bc8:	400f883a 	mov	r7,r8
  803bcc:	01800804 	movi	r6,32
  803bd0:	880b883a 	mov	r5,r17
  803bd4:	a009883a 	mov	r4,r20
  803bd8:	da001015 	stw	r8,64(sp)
  803bdc:	08037080 	call	803708 <print_repeat>
  803be0:	da001017 	ldw	r8,64(sp)
  803be4:	103fef1e 	bne	r2,zero,803ba4 <__alt_data_end+0xff803ba4>
  803be8:	8221883a 	add	r16,r16,r8
  803bec:	88800117 	ldw	r2,4(r17)
  803bf0:	b00f883a 	mov	r7,r22
  803bf4:	b80d883a 	mov	r6,r23
  803bf8:	880b883a 	mov	r5,r17
  803bfc:	a009883a 	mov	r4,r20
  803c00:	103ee83a 	callr	r2
  803c04:	103fe71e 	bne	r2,zero,803ba4 <__alt_data_end+0xff803ba4>
  803c08:	85a1883a 	add	r16,r16,r22
  803c0c:	e02d883a 	mov	r22,fp
  803c10:	00001106 	br	803c58 <___vfprintf_internal_r+0x4e4>
  803c14:	00c00044 	movi	r3,1
  803c18:	04ffffc4 	movi	r19,-1
  803c1c:	d8000e15 	stw	zero,56(sp)
  803c20:	d8c00a15 	stw	r3,40(sp)
  803c24:	05400284 	movi	r21,10
  803c28:	9825883a 	mov	r18,r19
  803c2c:	d8000c15 	stw	zero,48(sp)
  803c30:	d8000b15 	stw	zero,44(sp)
  803c34:	182f883a 	mov	r23,r3
  803c38:	00000806 	br	803c5c <___vfprintf_internal_r+0x4e8>
  803c3c:	ddc00b15 	stw	r23,44(sp)
  803c40:	05c00084 	movi	r23,2
  803c44:	00000506 	br	803c5c <___vfprintf_internal_r+0x4e8>
  803c48:	00c00044 	movi	r3,1
  803c4c:	d8c00c15 	stw	r3,48(sp)
  803c50:	05c000c4 	movi	r23,3
  803c54:	00000106 	br	803c5c <___vfprintf_internal_r+0x4e8>
  803c58:	002f883a 	mov	r23,zero
  803c5c:	d8c00f17 	ldw	r3,60(sp)
  803c60:	18c00044 	addi	r3,r3,1
  803c64:	d8c00f15 	stw	r3,60(sp)
  803c68:	003edc06 	br	8037dc <__alt_data_end+0xff8037dc>
  803c6c:	8005883a 	mov	r2,r16
  803c70:	dfc01a17 	ldw	ra,104(sp)
  803c74:	df001917 	ldw	fp,100(sp)
  803c78:	ddc01817 	ldw	r23,96(sp)
  803c7c:	dd801717 	ldw	r22,92(sp)
  803c80:	dd401617 	ldw	r21,88(sp)
  803c84:	dd001517 	ldw	r20,84(sp)
  803c88:	dcc01417 	ldw	r19,80(sp)
  803c8c:	dc801317 	ldw	r18,76(sp)
  803c90:	dc401217 	ldw	r17,72(sp)
  803c94:	dc001117 	ldw	r16,68(sp)
  803c98:	dec01b04 	addi	sp,sp,108
  803c9c:	f800283a 	ret

00803ca0 <__vfprintf_internal>:
  803ca0:	00802034 	movhi	r2,128
  803ca4:	1093ab04 	addi	r2,r2,20140
  803ca8:	300f883a 	mov	r7,r6
  803cac:	280d883a 	mov	r6,r5
  803cb0:	200b883a 	mov	r5,r4
  803cb4:	11000017 	ldw	r4,0(r2)
  803cb8:	08037741 	jmpi	803774 <___vfprintf_internal_r>

00803cbc <__sfvwrite_small_dev>:
  803cbc:	2880000b 	ldhu	r2,0(r5)
  803cc0:	1080020c 	andi	r2,r2,8
  803cc4:	10002126 	beq	r2,zero,803d4c <__sfvwrite_small_dev+0x90>
  803cc8:	2880008f 	ldh	r2,2(r5)
  803ccc:	defffa04 	addi	sp,sp,-24
  803cd0:	dc000015 	stw	r16,0(sp)
  803cd4:	dfc00515 	stw	ra,20(sp)
  803cd8:	dd000415 	stw	r20,16(sp)
  803cdc:	dcc00315 	stw	r19,12(sp)
  803ce0:	dc800215 	stw	r18,8(sp)
  803ce4:	dc400115 	stw	r17,4(sp)
  803ce8:	2821883a 	mov	r16,r5
  803cec:	10001216 	blt	r2,zero,803d38 <__sfvwrite_small_dev+0x7c>
  803cf0:	2027883a 	mov	r19,r4
  803cf4:	3025883a 	mov	r18,r6
  803cf8:	3823883a 	mov	r17,r7
  803cfc:	05010004 	movi	r20,1024
  803d00:	04400b0e 	bge	zero,r17,803d30 <__sfvwrite_small_dev+0x74>
  803d04:	880f883a 	mov	r7,r17
  803d08:	a440010e 	bge	r20,r17,803d10 <__sfvwrite_small_dev+0x54>
  803d0c:	01c10004 	movi	r7,1024
  803d10:	8140008f 	ldh	r5,2(r16)
  803d14:	900d883a 	mov	r6,r18
  803d18:	9809883a 	mov	r4,r19
  803d1c:	0803e7c0 	call	803e7c <_write_r>
  803d20:	0080050e 	bge	zero,r2,803d38 <__sfvwrite_small_dev+0x7c>
  803d24:	88a3c83a 	sub	r17,r17,r2
  803d28:	90a5883a 	add	r18,r18,r2
  803d2c:	003ff406 	br	803d00 <__alt_data_end+0xff803d00>
  803d30:	0005883a 	mov	r2,zero
  803d34:	00000706 	br	803d54 <__sfvwrite_small_dev+0x98>
  803d38:	8080000b 	ldhu	r2,0(r16)
  803d3c:	10801014 	ori	r2,r2,64
  803d40:	8080000d 	sth	r2,0(r16)
  803d44:	00bfffc4 	movi	r2,-1
  803d48:	00000206 	br	803d54 <__sfvwrite_small_dev+0x98>
  803d4c:	00bfffc4 	movi	r2,-1
  803d50:	f800283a 	ret
  803d54:	dfc00517 	ldw	ra,20(sp)
  803d58:	dd000417 	ldw	r20,16(sp)
  803d5c:	dcc00317 	ldw	r19,12(sp)
  803d60:	dc800217 	ldw	r18,8(sp)
  803d64:	dc400117 	ldw	r17,4(sp)
  803d68:	dc000017 	ldw	r16,0(sp)
  803d6c:	dec00604 	addi	sp,sp,24
  803d70:	f800283a 	ret

00803d74 <__sfvwrite_small_str>:
  803d74:	2880000b 	ldhu	r2,0(r5)
  803d78:	10c0020c 	andi	r3,r2,8
  803d7c:	18002026 	beq	r3,zero,803e00 <__sfvwrite_small_str+0x8c>
  803d80:	28c0008f 	ldh	r3,2(r5)
  803d84:	defffd04 	addi	sp,sp,-12
  803d88:	dc000015 	stw	r16,0(sp)
  803d8c:	dfc00215 	stw	ra,8(sp)
  803d90:	dc400115 	stw	r17,4(sp)
  803d94:	2821883a 	mov	r16,r5
  803d98:	1800150e 	bge	r3,zero,803df0 <__sfvwrite_small_str+0x7c>
  803d9c:	10c0800c 	andi	r3,r2,512
  803da0:	18001326 	beq	r3,zero,803df0 <__sfvwrite_small_str+0x7c>
  803da4:	2c400517 	ldw	r17,20(r5)
  803da8:	89c0030e 	bge	r17,r7,803db8 <__sfvwrite_small_str+0x44>
  803dac:	10c0200c 	andi	r3,r2,128
  803db0:	18000326 	beq	r3,zero,803dc0 <__sfvwrite_small_str+0x4c>
  803db4:	00000e06 	br	803df0 <__sfvwrite_small_str+0x7c>
  803db8:	3c40010e 	bge	r7,r17,803dc0 <__sfvwrite_small_str+0x4c>
  803dbc:	3823883a 	mov	r17,r7
  803dc0:	81000417 	ldw	r4,16(r16)
  803dc4:	300b883a 	mov	r5,r6
  803dc8:	880d883a 	mov	r6,r17
  803dcc:	0803e1c0 	call	803e1c <memmove>
  803dd0:	80800517 	ldw	r2,20(r16)
  803dd4:	1445c83a 	sub	r2,r2,r17
  803dd8:	80800515 	stw	r2,20(r16)
  803ddc:	80800417 	ldw	r2,16(r16)
  803de0:	1463883a 	add	r17,r2,r17
  803de4:	84400415 	stw	r17,16(r16)
  803de8:	0005883a 	mov	r2,zero
  803dec:	00000606 	br	803e08 <__sfvwrite_small_str+0x94>
  803df0:	10801014 	ori	r2,r2,64
  803df4:	8080000d 	sth	r2,0(r16)
  803df8:	00bfffc4 	movi	r2,-1
  803dfc:	00000206 	br	803e08 <__sfvwrite_small_str+0x94>
  803e00:	00bfffc4 	movi	r2,-1
  803e04:	f800283a 	ret
  803e08:	dfc00217 	ldw	ra,8(sp)
  803e0c:	dc400117 	ldw	r17,4(sp)
  803e10:	dc000017 	ldw	r16,0(sp)
  803e14:	dec00304 	addi	sp,sp,12
  803e18:	f800283a 	ret

00803e1c <memmove>:
  803e1c:	2005883a 	mov	r2,r4
  803e20:	218f883a 	add	r7,r4,r6
  803e24:	29000236 	bltu	r5,r4,803e30 <memmove+0x14>
  803e28:	1007883a 	mov	r3,r2
  803e2c:	00000c06 	br	803e60 <memmove+0x44>
  803e30:	2987883a 	add	r3,r5,r6
  803e34:	20fffc2e 	bgeu	r4,r3,803e28 <__alt_data_end+0xff803e28>
  803e38:	380b883a 	mov	r5,r7
  803e3c:	30cdc83a 	sub	r6,r6,r3
  803e40:	1989883a 	add	r4,r3,r6
  803e44:	20000526 	beq	r4,zero,803e5c <memmove+0x40>
  803e48:	18ffffc4 	addi	r3,r3,-1
  803e4c:	19000003 	ldbu	r4,0(r3)
  803e50:	297fffc4 	addi	r5,r5,-1
  803e54:	29000005 	stb	r4,0(r5)
  803e58:	003ff906 	br	803e40 <__alt_data_end+0xff803e40>
  803e5c:	f800283a 	ret
  803e60:	19c00526 	beq	r3,r7,803e78 <memmove+0x5c>
  803e64:	29000003 	ldbu	r4,0(r5)
  803e68:	18c00044 	addi	r3,r3,1
  803e6c:	29400044 	addi	r5,r5,1
  803e70:	193fffc5 	stb	r4,-1(r3)
  803e74:	003ffa06 	br	803e60 <__alt_data_end+0xff803e60>
  803e78:	f800283a 	ret

00803e7c <_write_r>:
  803e7c:	defffd04 	addi	sp,sp,-12
  803e80:	dc000015 	stw	r16,0(sp)
  803e84:	04002034 	movhi	r16,128
  803e88:	dc400115 	stw	r17,4(sp)
  803e8c:	84146704 	addi	r16,r16,20892
  803e90:	2023883a 	mov	r17,r4
  803e94:	2809883a 	mov	r4,r5
  803e98:	300b883a 	mov	r5,r6
  803e9c:	380d883a 	mov	r6,r7
  803ea0:	dfc00215 	stw	ra,8(sp)
  803ea4:	80000015 	stw	zero,0(r16)
  803ea8:	08042bc0 	call	8042bc <write>
  803eac:	00ffffc4 	movi	r3,-1
  803eb0:	10c0031e 	bne	r2,r3,803ec0 <_write_r+0x44>
  803eb4:	80c00017 	ldw	r3,0(r16)
  803eb8:	18000126 	beq	r3,zero,803ec0 <_write_r+0x44>
  803ebc:	88c00015 	stw	r3,0(r17)
  803ec0:	dfc00217 	ldw	ra,8(sp)
  803ec4:	dc400117 	ldw	r17,4(sp)
  803ec8:	dc000017 	ldw	r16,0(sp)
  803ecc:	dec00304 	addi	sp,sp,12
  803ed0:	f800283a 	ret

00803ed4 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  803ed4:	00802034 	movhi	r2,128
  803ed8:	10939204 	addi	r2,r2,20040
  803edc:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  803ee0:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  803ee4:	01002034 	movhi	r4,128
  803ee8:	01800044 	movi	r6,1
  803eec:	d80b883a 	mov	r5,sp
  803ef0:	2113ae04 	addi	r4,r4,20152
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  803ef4:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  803ef8:	08043640 	call	804364 <altera_avalon_jtag_uart_read>
  803efc:	0080020e 	bge	zero,r2,803f08 <alt_getchar+0x34>
        return -1;
    }
    return c;
  803f00:	d8800007 	ldb	r2,0(sp)
  803f04:	00000106 	br	803f0c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  803f08:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  803f0c:	dfc00117 	ldw	ra,4(sp)
  803f10:	dec00204 	addi	sp,sp,8
  803f14:	f800283a 	ret

00803f18 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803f18:	008007c4 	movi	r2,31
  803f1c:	11002136 	bltu	r2,r4,803fa4 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803f20:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803f24:	00ffff84 	movi	r3,-2
  803f28:	38c4703a 	and	r2,r7,r3
  803f2c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  803f30:	200490fa 	slli	r2,r4,3
  803f34:	02002034 	movhi	r8,128
  803f38:	42147204 	addi	r8,r8,20936
  803f3c:	4085883a 	add	r2,r8,r2
  803f40:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
  803f44:	11400115 	stw	r5,4(r2)
  803f48:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  803f4c:	30000726 	beq	r6,zero,803f6c <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803f50:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803f54:	28c6703a 	and	r3,r5,r3
  803f58:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  803f5c:	d0e0c017 	ldw	r3,-32000(gp)
  803f60:	1104983a 	sll	r2,r2,r4
  803f64:	10c4b03a 	or	r2,r2,r3
  803f68:	00000706 	br	803f88 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803f6c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803f70:	28c6703a 	and	r3,r5,r3
  803f74:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  803f78:	1104983a 	sll	r2,r2,r4
  803f7c:	d0e0c017 	ldw	r3,-32000(gp)
  803f80:	0084303a 	nor	r2,zero,r2
  803f84:	10c4703a 	and	r2,r2,r3
  803f88:	d0a0c015 	stw	r2,-32000(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803f8c:	d0a0c017 	ldw	r2,-32000(gp)
  803f90:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803f94:	2801703a 	wrctl	status,r5
  803f98:	3801703a 	wrctl	status,r7
  803f9c:	0005883a 	mov	r2,zero
  803fa0:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  803fa4:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  803fa8:	f800283a 	ret

00803fac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803fac:	deffff04 	addi	sp,sp,-4
  803fb0:	01002034 	movhi	r4,128
  803fb4:	01402034 	movhi	r5,128
  803fb8:	dfc00015 	stw	ra,0(sp)
  803fbc:	21131504 	addi	r4,r4,19540
  803fc0:	2953b504 	addi	r5,r5,20180

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  803fc4:	2140061e 	bne	r4,r5,803fe0 <alt_load+0x34>
  803fc8:	01002034 	movhi	r4,128
  803fcc:	01402034 	movhi	r5,128
  803fd0:	21000804 	addi	r4,r4,32
  803fd4:	29400804 	addi	r5,r5,32
  803fd8:	2140121e 	bne	r4,r5,804024 <alt_load+0x78>
  803fdc:	00000b06 	br	80400c <alt_load+0x60>
  803fe0:	00c02034 	movhi	r3,128
  803fe4:	18d3b504 	addi	r3,r3,20180
  803fe8:	1907c83a 	sub	r3,r3,r4
  803fec:	0005883a 	mov	r2,zero
  {
    while( to != end )
  803ff0:	10fff526 	beq	r2,r3,803fc8 <__alt_data_end+0xff803fc8>
    {
      *to++ = *from++;
  803ff4:	114f883a 	add	r7,r2,r5
  803ff8:	39c00017 	ldw	r7,0(r7)
  803ffc:	110d883a 	add	r6,r2,r4
  804000:	10800104 	addi	r2,r2,4
  804004:	31c00015 	stw	r7,0(r6)
  804008:	003ff906 	br	803ff0 <__alt_data_end+0xff803ff0>
  80400c:	01002034 	movhi	r4,128
  804010:	01402034 	movhi	r5,128
  804014:	2111e204 	addi	r4,r4,18312
  804018:	2951e204 	addi	r5,r5,18312

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80401c:	2140101e 	bne	r4,r5,804060 <alt_load+0xb4>
  804020:	00000b06 	br	804050 <alt_load+0xa4>
  804024:	00c02034 	movhi	r3,128
  804028:	18c06004 	addi	r3,r3,384
  80402c:	1907c83a 	sub	r3,r3,r4
  804030:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804034:	10fff526 	beq	r2,r3,80400c <__alt_data_end+0xff80400c>
    {
      *to++ = *from++;
  804038:	114f883a 	add	r7,r2,r5
  80403c:	39c00017 	ldw	r7,0(r7)
  804040:	110d883a 	add	r6,r2,r4
  804044:	10800104 	addi	r2,r2,4
  804048:	31c00015 	stw	r7,0(r6)
  80404c:	003ff906 	br	804034 <__alt_data_end+0xff804034>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804050:	08045ec0 	call	8045ec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  804054:	dfc00017 	ldw	ra,0(sp)
  804058:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  80405c:	08046d81 	jmpi	8046d8 <alt_icache_flush_all>
  804060:	00c02034 	movhi	r3,128
  804064:	18d31504 	addi	r3,r3,19540
  804068:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80406c:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804070:	18bff726 	beq	r3,r2,804050 <__alt_data_end+0xff804050>
    {
      *to++ = *from++;
  804074:	114f883a 	add	r7,r2,r5
  804078:	39c00017 	ldw	r7,0(r7)
  80407c:	110d883a 	add	r6,r2,r4
  804080:	10800104 	addi	r2,r2,4
  804084:	31c00015 	stw	r7,0(r6)
  804088:	003ff906 	br	804070 <__alt_data_end+0xff804070>

0080408c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80408c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804090:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804094:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804098:	080431c0 	call	80431c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80409c:	080433c0 	call	80433c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  8040a0:	d1a0c117 	ldw	r6,-31996(gp)
  8040a4:	d160c217 	ldw	r5,-31992(gp)
  8040a8:	d120c317 	ldw	r4,-31988(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  8040ac:	dfc00017 	ldw	ra,0(sp)
  8040b0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  8040b4:	0800c281 	jmpi	800c28 <main>

008040b8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  8040b8:	defff204 	addi	sp,sp,-56
  8040bc:	2005883a 	mov	r2,r4
  8040c0:	dfc00a15 	stw	ra,40(sp)
  8040c4:	df000915 	stw	fp,36(sp)
  8040c8:	ddc00815 	stw	r23,32(sp)
  8040cc:	dd800715 	stw	r22,28(sp)
  8040d0:	dd400615 	stw	r21,24(sp)
  8040d4:	dd000515 	stw	r20,20(sp)
  8040d8:	dcc00415 	stw	r19,16(sp)
  8040dc:	dc800315 	stw	r18,12(sp)
  8040e0:	dc400215 	stw	r17,8(sp)
  8040e4:	dc000115 	stw	r16,4(sp)
  8040e8:	d9400b15 	stw	r5,44(sp)
  8040ec:	d9800c15 	stw	r6,48(sp)
  8040f0:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8040f4:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  8040f8:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  8040fc:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  804100:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804104:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804108:	11000007 	ldb	r4,0(r2)
  80410c:	20003a26 	beq	r4,zero,8041f8 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804110:	24000226 	beq	r4,r16,80411c <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804114:	14400044 	addi	r17,r2,1
  804118:	00001406 	br	80416c <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  80411c:	14400084 	addi	r17,r2,2
  804120:	10800047 	ldb	r2,1(r2)
  804124:	10003426 	beq	r2,zero,8041f8 <alt_printf+0x140>
            {
                if (c == '%')
  804128:	1400021e 	bne	r2,r16,804134 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  80412c:	8009883a 	mov	r4,r16
  804130:	00000e06 	br	80416c <alt_printf+0xb4>
                } 
                else if (c == 'c')
  804134:	1480051e 	bne	r2,r18,80414c <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  804138:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  80413c:	ad800104 	addi	r22,r21,4
  804140:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  804144:	08042280 	call	804228 <alt_putchar>
  804148:	00002906 	br	8041f0 <alt_printf+0x138>
                }
                else if (c == 'x')
  80414c:	14c0201e 	bne	r2,r19,8041d0 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  804150:	adc00017 	ldw	r23,0(r21)
  804154:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  804158:	b8000326 	beq	r23,zero,804168 <alt_printf+0xb0>
  80415c:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804160:	00c003c4 	movi	r3,15
  804164:	00000306 	br	804174 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  804168:	01000c04 	movi	r4,48
  80416c:	08042280 	call	804228 <alt_putchar>
                        continue;
  804170:	00001f06 	br	8041f0 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804174:	1d84983a 	sll	r2,r3,r22
  804178:	15c4703a 	and	r2,r2,r23
  80417c:	1000021e 	bne	r2,zero,804188 <alt_printf+0xd0>
                        digit_shift -= 4;
  804180:	b5bfff04 	addi	r22,r22,-4
  804184:	003ffb06 	br	804174 <__alt_data_end+0xff804174>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804188:	070003c4 	movi	fp,15
                        if (digit <= 9)
  80418c:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804190:	b0001716 	blt	r22,zero,8041f0 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804194:	e588983a 	sll	r4,fp,r22
  804198:	25c8703a 	and	r4,r4,r23
  80419c:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  8041a0:	19000236 	bltu	r3,r4,8041ac <alt_printf+0xf4>
                            c = '0' + digit;
  8041a4:	21000c04 	addi	r4,r4,48
  8041a8:	00000106 	br	8041b0 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  8041ac:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  8041b0:	21003fcc 	andi	r4,r4,255
  8041b4:	2100201c 	xori	r4,r4,128
  8041b8:	213fe004 	addi	r4,r4,-128
  8041bc:	d8c00015 	stw	r3,0(sp)
  8041c0:	08042280 	call	804228 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  8041c4:	b5bfff04 	addi	r22,r22,-4
  8041c8:	d8c00017 	ldw	r3,0(sp)
  8041cc:	003ff006 	br	804190 <__alt_data_end+0xff804190>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  8041d0:	1500071e 	bne	r2,r20,8041f0 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  8041d4:	ad800017 	ldw	r22,0(r21)
  8041d8:	ad400104 	addi	r21,r21,4

                    while(*s)
  8041dc:	b1000007 	ldb	r4,0(r22)
  8041e0:	20000326 	beq	r4,zero,8041f0 <alt_printf+0x138>
                      alt_putchar(*s++);
  8041e4:	b5800044 	addi	r22,r22,1
  8041e8:	08042280 	call	804228 <alt_putchar>
  8041ec:	003ffb06 	br	8041dc <__alt_data_end+0xff8041dc>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  8041f0:	8805883a 	mov	r2,r17
  8041f4:	003fc406 	br	804108 <__alt_data_end+0xff804108>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  8041f8:	dfc00a17 	ldw	ra,40(sp)
  8041fc:	df000917 	ldw	fp,36(sp)
  804200:	ddc00817 	ldw	r23,32(sp)
  804204:	dd800717 	ldw	r22,28(sp)
  804208:	dd400617 	ldw	r21,24(sp)
  80420c:	dd000517 	ldw	r20,20(sp)
  804210:	dcc00417 	ldw	r19,16(sp)
  804214:	dc800317 	ldw	r18,12(sp)
  804218:	dc400217 	ldw	r17,8(sp)
  80421c:	dc000117 	ldw	r16,4(sp)
  804220:	dec00e04 	addi	sp,sp,56
  804224:	f800283a 	ret

00804228 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804228:	defffd04 	addi	sp,sp,-12
  80422c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  804230:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804234:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804238:	01002034 	movhi	r4,128
  80423c:	000f883a 	mov	r7,zero
  804240:	01800044 	movi	r6,1
  804244:	d80b883a 	mov	r5,sp
  804248:	2113ae04 	addi	r4,r4,20152
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  80424c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804250:	08043c00 	call	8043c0 <altera_avalon_jtag_uart_write>
  804254:	00ffffc4 	movi	r3,-1
  804258:	10c00126 	beq	r2,r3,804260 <alt_putchar+0x38>
        return -1;
    }
    return c;
  80425c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
  804260:	dfc00217 	ldw	ra,8(sp)
  804264:	dc000117 	ldw	r16,4(sp)
  804268:	dec00304 	addi	sp,sp,12
  80426c:	f800283a 	ret

00804270 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804270:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804274:	00bfff84 	movi	r2,-2
  804278:	2884703a 	and	r2,r5,r2
  80427c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804280:	d0a00517 	ldw	r2,-32748(gp)
  804284:	00ffff04 	movi	r3,-4
  804288:	108000c4 	addi	r2,r2,3
  80428c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804290:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804294:	d0a00515 	stw	r2,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804298:	1109883a 	add	r4,r2,r4
  80429c:	18c00004 	addi	r3,r3,0
  8042a0:	1900032e 	bgeu	r3,r4,8042b0 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8042a4:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8042a8:	00bfffc4 	movi	r2,-1
  8042ac:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  8042b0:	d1200515 	stw	r4,-32748(gp)
  8042b4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  8042b8:	f800283a 	ret

008042bc <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
  8042bc:	00800044 	movi	r2,1
  8042c0:	20800226 	beq	r4,r2,8042cc <write+0x10>
  8042c4:	00800084 	movi	r2,2
  8042c8:	2080041e 	bne	r4,r2,8042dc <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
  8042cc:	01002034 	movhi	r4,128
  8042d0:	000f883a 	mov	r7,zero
  8042d4:	2113ae04 	addi	r4,r4,20152
  8042d8:	08043c01 	jmpi	8043c0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8042dc:	d0a00c17 	ldw	r2,-32720(gp)
  8042e0:	10000926 	beq	r2,zero,804308 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8042e4:	deffff04 	addi	sp,sp,-4
  8042e8:	dfc00015 	stw	ra,0(sp)
  8042ec:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  8042f0:	00c01444 	movi	r3,81
  8042f4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  8042f8:	00bfffc4 	movi	r2,-1
  8042fc:	dfc00017 	ldw	ra,0(sp)
  804300:	dec00104 	addi	sp,sp,4
  804304:	f800283a 	ret
  804308:	d0a0bf04 	addi	r2,gp,-32004
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  80430c:	00c01444 	movi	r3,81
  804310:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  804314:	00bfffc4 	movi	r2,-1
  804318:	f800283a 	ret

0080431c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80431c:	deffff04 	addi	sp,sp,-4
  804320:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  804324:	08046dc0 	call	8046dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  804328:	00800044 	movi	r2,1
  80432c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  804330:	dfc00017 	ldw	ra,0(sp)
  804334:	dec00104 	addi	sp,sp,4
  804338:	f800283a 	ret

0080433c <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  80433c:	00804034 	movhi	r2,256
  804340:	10840004 	addi	r2,r2,4096
  804344:	d0a0c515 	stw	r2,-31980(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  804348:	01002034 	movhi	r4,128
  80434c:	0081c9f4 	movhi	r2,1831
  804350:	10838004 	addi	r2,r2,3584
  804354:	d1600804 	addi	r5,gp,-32736
  804358:	21138704 	addi	r4,r4,19996
  80435c:	d0a0c415 	stw	r2,-31984(gp)
  804360:	08045f81 	jmpi	8045f8 <alt_dev_llist_insert>

00804364 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  804364:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  804368:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  80436c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  804370:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  804374:	11800b2e 	bgeu	r2,r6,8043a4 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804378:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  80437c:	1a60000c 	andi	r9,r3,32768
  804380:	48000326 	beq	r9,zero,804390 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804384:	10c00005 	stb	r3,0(r2)
  804388:	10800044 	addi	r2,r2,1
  80438c:	003ff906 	br	804374 <__alt_data_end+0xff804374>
    else if (ptr != buffer)
  804390:	11400226 	beq	r2,r5,80439c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  804394:	1145c83a 	sub	r2,r2,r5
  804398:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  80439c:	403ff526 	beq	r8,zero,804374 <__alt_data_end+0xff804374>
  8043a0:	00000106 	br	8043a8 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  8043a4:	117ffb1e 	bne	r2,r5,804394 <__alt_data_end+0xff804394>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  8043a8:	39d0000c 	andi	r7,r7,16384
  8043ac:	3800021e 	bne	r7,zero,8043b8 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  8043b0:	00bffec4 	movi	r2,-5
  8043b4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  8043b8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  8043bc:	f800283a 	ret

008043c0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  8043c0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8043c4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  8043c8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8043cc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  8043d0:	2980072e 	bgeu	r5,r6,8043f0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8043d4:	38c00037 	ldwio	r3,0(r7)
  8043d8:	18ffffec 	andhi	r3,r3,65535
  8043dc:	183ffc26 	beq	r3,zero,8043d0 <__alt_data_end+0xff8043d0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  8043e0:	28c00007 	ldb	r3,0(r5)
  8043e4:	20c00035 	stwio	r3,0(r4)
  8043e8:	29400044 	addi	r5,r5,1
  8043ec:	003ff806 	br	8043d0 <__alt_data_end+0xff8043d0>

  return count;
}
  8043f0:	f800283a 	ret

008043f4 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  8043f4:	d0e0c417 	ldw	r3,-31984(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  8043f8:	d0a0c517 	ldw	r2,-31980(gp)

  if (!altera_avalon_timer_ts_freq)
  8043fc:	18000c26 	beq	r3,zero,804430 <alt_timestamp_start+0x3c>
    return -1;
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  804400:	11000104 	addi	r4,r2,4
  804404:	00c00204 	movi	r3,8
  804408:	20c00035 	stwio	r3,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  80440c:	00ffffd4 	movui	r3,65535
  804410:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  804414:	10c00335 	stwio	r3,12(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  804418:	10c00435 	stwio	r3,16(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  80441c:	10c00535 	stwio	r3,20(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  804420:	00800104 	movi	r2,4
  804424:	20800035 	stwio	r2,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  804428:	0005883a 	mov	r2,zero
  80442c:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
  804430:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
  804434:	f800283a 	ret

00804438 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  804438:	d0a0c417 	ldw	r2,-31984(gp)
  80443c:	10000e26 	beq	r2,zero,804478 <alt_timestamp+0x40>
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  804440:	d120c517 	ldw	r4,-31980(gp)
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  804444:	20800604 	addi	r2,r4,24
  804448:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  80444c:	11400037 	ldwio	r5,0(r2)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  804450:	20800737 	ldwio	r2,28(r4)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  804454:	20c00837 	ldwio	r3,32(r4)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  804458:	21000937 	ldwio	r4,36(r4)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  80445c:	2008943a 	slli	r4,r4,16
  804460:	1004943a 	slli	r2,r2,16
  804464:	297fffcc 	andi	r5,r5,65535
  804468:	18ffffcc 	andi	r3,r3,65535
  80446c:	2884303a 	nor	r2,r5,r2
  804470:	20c6303a 	nor	r3,r4,r3
  804474:	f800283a 	ret
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
  804478:	00bfffc4 	movi	r2,-1
  80447c:	1007883a 	mov	r3,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
  804480:	f800283a 	ret

00804484 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
  804484:	d0a0c417 	ldw	r2,-31984(gp)
  804488:	f800283a 	ret

0080448c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
  80448c:	d1600804 	addi	r5,gp,-32736
  804490:	08046641 	jmpi	804664 <alt_find_dev>

00804494 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
  804494:	20800a17 	ldw	r2,40(r4)
  804498:	10800023 	ldbuio	r2,0(r2)
  80449c:	28800005 	stb	r2,0(r5)

	return 0;
}
  8044a0:	0005883a 	mov	r2,zero
  8044a4:	f800283a 	ret

008044a8 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8044a8:	20800a17 	ldw	r2,40(r4)
  8044ac:	29400fcc 	andi	r5,r5,63
  8044b0:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8044b4:	20800a17 	ldw	r2,40(r4)
  8044b8:	10800063 	ldbuio	r2,1(r2)
  8044bc:	30800005 	stb	r2,0(r6)

	return 0;
}
  8044c0:	0005883a 	mov	r2,zero
  8044c4:	f800283a 	ret

008044c8 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8044c8:	20800a17 	ldw	r2,40(r4)
  8044cc:	29400fcc 	andi	r5,r5,63
  8044d0:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
  8044d4:	20800a17 	ldw	r2,40(r4)
  8044d8:	11800065 	stbio	r6,1(r2)

	return 0;
}
  8044dc:	0005883a 	mov	r2,zero
  8044e0:	f800283a 	ret

008044e4 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8044e4:	20800a17 	ldw	r2,40(r4)
  8044e8:	00c00c84 	movi	r3,50
  8044ec:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8044f0:	20800a17 	ldw	r2,40(r4)
  8044f4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8044f8:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8044fc:	10803fcc 	andi	r2,r2,255
  804500:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804504:	20800a17 	ldw	r2,40(r4)
  804508:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  80450c:	20800a17 	ldw	r2,40(r4)
  804510:	10800063 	ldbuio	r2,1(r2)
  804514:	10803fcc 	andi	r2,r2,255
  804518:	1006923a 	slli	r3,r2,8
  80451c:	28800017 	ldw	r2,0(r5)
  804520:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
  804524:	10e0000c 	andi	r3,r2,32768
  804528:	18000126 	beq	r3,zero,804530 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
  80452c:	10bffff4 	orhi	r2,r2,65535
  804530:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  804534:	0005883a 	mov	r2,zero
  804538:	f800283a 	ret

0080453c <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  80453c:	20800a17 	ldw	r2,40(r4)
  804540:	00c00d04 	movi	r3,52
  804544:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  804548:	20800a17 	ldw	r2,40(r4)
  80454c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804550:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  804554:	10803fcc 	andi	r2,r2,255
  804558:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  80455c:	20800a17 	ldw	r2,40(r4)
  804560:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  804564:	20800a17 	ldw	r2,40(r4)
  804568:	10800063 	ldbuio	r2,1(r2)
  80456c:	10803fcc 	andi	r2,r2,255
  804570:	1006923a 	slli	r3,r2,8
  804574:	28800017 	ldw	r2,0(r5)
  804578:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
  80457c:	10e0000c 	andi	r3,r2,32768
  804580:	18000126 	beq	r3,zero,804588 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
  804584:	10bffff4 	orhi	r2,r2,65535
  804588:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  80458c:	0005883a 	mov	r2,zero
  804590:	f800283a 	ret

00804594 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804594:	20800a17 	ldw	r2,40(r4)
  804598:	00c00d84 	movi	r3,54
  80459c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8045a0:	20800a17 	ldw	r2,40(r4)
  8045a4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8045a8:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8045ac:	10803fcc 	andi	r2,r2,255
  8045b0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8045b4:	20800a17 	ldw	r2,40(r4)
  8045b8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  8045bc:	20800a17 	ldw	r2,40(r4)
  8045c0:	10800063 	ldbuio	r2,1(r2)
  8045c4:	10803fcc 	andi	r2,r2,255
  8045c8:	1006923a 	slli	r3,r2,8
  8045cc:	28800017 	ldw	r2,0(r5)
  8045d0:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
  8045d4:	10e0000c 	andi	r3,r2,32768
  8045d8:	18000126 	beq	r3,zero,8045e0 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
  8045dc:	10bffff4 	orhi	r2,r2,65535
  8045e0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  8045e4:	0005883a 	mov	r2,zero
  8045e8:	f800283a 	ret

008045ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8045ec:	f800283a 	ret

008045f0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  8045f0:	3005883a 	mov	r2,r6
  8045f4:	f800283a 	ret

008045f8 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8045f8:	20000226 	beq	r4,zero,804604 <alt_dev_llist_insert+0xc>
  8045fc:	20800217 	ldw	r2,8(r4)
  804600:	1000101e 	bne	r2,zero,804644 <alt_dev_llist_insert+0x4c>
  804604:	d0a00c17 	ldw	r2,-32720(gp)
  804608:	10000926 	beq	r2,zero,804630 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80460c:	deffff04 	addi	sp,sp,-4
  804610:	dfc00015 	stw	ra,0(sp)
  804614:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  804618:	00c00584 	movi	r3,22
  80461c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  804620:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  804624:	dfc00017 	ldw	ra,0(sp)
  804628:	dec00104 	addi	sp,sp,4
  80462c:	f800283a 	ret
  804630:	d0a0bf04 	addi	r2,gp,-32004
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  804634:	00c00584 	movi	r3,22
  804638:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  80463c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  804640:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  804644:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804648:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  80464c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  804650:	28800017 	ldw	r2,0(r5)
  804654:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  804658:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  80465c:	0005883a 	mov	r2,zero
  804660:	f800283a 	ret

00804664 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  804664:	defffb04 	addi	sp,sp,-20
  804668:	dcc00315 	stw	r19,12(sp)
  80466c:	dc800215 	stw	r18,8(sp)
  804670:	dc400115 	stw	r17,4(sp)
  804674:	dc000015 	stw	r16,0(sp)
  804678:	dfc00415 	stw	ra,16(sp)
  80467c:	2027883a 	mov	r19,r4
  804680:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  804684:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  804688:	0802d300 	call	802d30 <strlen>
  80468c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  804690:	84400726 	beq	r16,r17,8046b0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  804694:	81000217 	ldw	r4,8(r16)
  804698:	900d883a 	mov	r6,r18
  80469c:	980b883a 	mov	r5,r19
  8046a0:	08047580 	call	804758 <memcmp>
  8046a4:	10000426 	beq	r2,zero,8046b8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  8046a8:	84000017 	ldw	r16,0(r16)
  8046ac:	003ff806 	br	804690 <__alt_data_end+0xff804690>
  }
  
  /* No match found */
  
  return NULL;
  8046b0:	0005883a 	mov	r2,zero
  8046b4:	00000106 	br	8046bc <alt_find_dev+0x58>
  8046b8:	8005883a 	mov	r2,r16
}
  8046bc:	dfc00417 	ldw	ra,16(sp)
  8046c0:	dcc00317 	ldw	r19,12(sp)
  8046c4:	dc800217 	ldw	r18,8(sp)
  8046c8:	dc400117 	ldw	r17,4(sp)
  8046cc:	dc000017 	ldw	r16,0(sp)
  8046d0:	dec00504 	addi	sp,sp,20
  8046d4:	f800283a 	ret

008046d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8046d8:	f800283a 	ret

008046dc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  8046dc:	000170fa 	wrctl	ienable,zero
  8046e0:	f800283a 	ret

008046e4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  8046e4:	213ffe84 	addi	r4,r4,-6
  8046e8:	008003c4 	movi	r2,15
  8046ec:	11001636 	bltu	r2,r4,804748 <alt_exception_cause_generated_bad_addr+0x64>
  8046f0:	200890ba 	slli	r4,r4,2
  8046f4:	00802034 	movhi	r2,128
  8046f8:	1091c204 	addi	r2,r2,18184
  8046fc:	2089883a 	add	r4,r4,r2
  804700:	20800017 	ldw	r2,0(r4)
  804704:	1000683a 	jmp	r2
  804708:	00804750 	cmplti	r2,zero,285
  80470c:	00804750 	cmplti	r2,zero,285
  804710:	00804748 	cmpgei	r2,zero,285
  804714:	00804748 	cmpgei	r2,zero,285
  804718:	00804748 	cmpgei	r2,zero,285
  80471c:	00804750 	cmplti	r2,zero,285
  804720:	00804748 	cmpgei	r2,zero,285
  804724:	00804748 	cmpgei	r2,zero,285
  804728:	00804750 	cmplti	r2,zero,285
  80472c:	00804750 	cmplti	r2,zero,285
  804730:	00804748 	cmpgei	r2,zero,285
  804734:	00804750 	cmplti	r2,zero,285
  804738:	00804748 	cmpgei	r2,zero,285
  80473c:	00804748 	cmpgei	r2,zero,285
  804740:	00804748 	cmpgei	r2,zero,285
  804744:	00804750 	cmplti	r2,zero,285
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  804748:	0005883a 	mov	r2,zero
  80474c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  804750:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  804754:	f800283a 	ret

00804758 <memcmp>:
  804758:	218d883a 	add	r6,r4,r6
  80475c:	21800826 	beq	r4,r6,804780 <memcmp+0x28>
  804760:	20800003 	ldbu	r2,0(r4)
  804764:	28c00003 	ldbu	r3,0(r5)
  804768:	10c00226 	beq	r2,r3,804774 <memcmp+0x1c>
  80476c:	10c5c83a 	sub	r2,r2,r3
  804770:	f800283a 	ret
  804774:	21000044 	addi	r4,r4,1
  804778:	29400044 	addi	r5,r5,1
  80477c:	003ff706 	br	80475c <__alt_data_end+0xff80475c>
  804780:	0005883a 	mov	r2,zero
  804784:	f800283a 	ret
