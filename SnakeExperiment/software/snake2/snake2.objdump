
snake2.elf:     file format elf32-littlenios2
snake2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004e04 memsz 0x00004e04 flags r-x
    LOAD off    0x00005e24 vaddr 0x00804e24 paddr 0x008050a4 align 2**12
         filesz 0x00000280 memsz 0x00000280 flags rw-
    LOAD off    0x00006324 vaddr 0x00805324 paddr 0x00805324 align 2**12
         filesz 0x00000000 memsz 0x00000174 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004794  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000510  00804914  00804914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000280  00804e24  008050a4  00005e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000174  00805324  00805324  00006324  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00805498  00805498  000060a4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000007f0  00000000  00000000  000060c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000cc8e  00000000  00000000  000068b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000041fc  00000000  00000000  00013546  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004c2a  00000000  00000000  00017742  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000cf8  00000000  00000000  0001c36c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002823  00000000  00000000  0001d064  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000075d8  00000000  00000000  0001f887  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00026e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b68  00000000  00000000  00026e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00029bd6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00029bd9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00029bdc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00029bdd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00029bde  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00029be2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00029be6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00029bea  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00029bf3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00029bfc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  00029c05  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  00029c0a  2**0
                  CONTENTS, READONLY
 29 .jdi          0000433a  00000000  00000000  00029c3a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000ab678  00000000  00000000  0002df74  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
00804914 l    d  .rodata	00000000 .rodata
00804e24 l    d  .rwdata	00000000 .rwdata
00805324 l    d  .bss	00000000 .bss
00805498 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../snake2_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0080532c l     O .bss	00000004 count.3426
00805324 l     O .bss	00000008 lasttime.3427
00804a6a l     O .rodata	0000002d CSWTCH.83
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
008032e0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00803894 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00804c98 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00804f0c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00805084 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00804fec l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080477c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00805388 g     O .bss	00000004 alt_instruction_exception_handler
00804218 g     F .text	0000002c alt_main
00802e90 g     F .text	0000002c strcpy
00805398 g     O .bss	00000100 alt_irq
008006f8 g     F .text	00000070 disp_timer_init
008050a4 g       *ABS*	00000000 __flash_rwdata_start
00805498 g       *ABS*	00000000 __alt_heap_start
00803088 g     F .text	00000008 strtok_r
00805338 g     O .bss	00000004 disp_length
00802ce0 g     F .text	0000004c printf
00805380 g     O .bss	00000004 altera_avalon_timer_ts_freq
00803fa8 g     F .text	00000060 memmove
00802ff8 g     F .text	00000090 __strtok_r
00805088 g     O .rwdata	00000004 jtag_uart
00804868 g     F .text	00000008 altera_nios2_gen2_irq_init
00803f00 g     F .text	000000a8 __sfvwrite_small_str
00800000 g     F .entry	0000000c __reset
00804670 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00805334 g     O .bss	00000004 led_val
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080536c g     O .bss	00000004 errno
00805378 g     O .bss	00000004 alt_argv
0080d070 g       *ABS*	00000000 _gp
00805018 g     O .rwdata	00000030 alt_fd_list
008047f0 g     F .text	00000074 alt_find_dev
00805340 g     O .bss	00000004 cmdbuffer
008028e0 g     F .text	000000dc .hidden __floatsidf
0080533c g     O .bss	00000004 disp_offset
00804870 g     F .text	00000074 alt_exception_cause_generated_bad_addr
008007d8 g     F .text	000000d4 to_hex
008044f0 g     F .text	0000005c altera_avalon_jtag_uart_read
00802a20 g     F .text	00000014 malloc
00802ca4 g     F .text	0000003c _printf_r
00801664 g     F .text	00000064 .hidden __udivsi3
008004d4 g     F .text	00000098 write_to_disp
0080021c g     F .text	00000038 ring_buf_push
00802d2c g     F .text	00000050 _sbrk_r
0080508c g     O .rwdata	00000004 alt_max_fd
008040a4 g     F .text	00000094 alt_irq_register
00805330 g     O .bss	00000004 debug
00801748 g     F .text	000008ac .hidden __adddf3
008005f4 g     F .text	00000094 read_request
0080095c g     F .text	00000014 throw_code
00805078 g     O .rwdata	00000004 _global_impure_ptr
00805498 g       *ABS*	00000000 __bss_end
00804060 g     F .text	00000044 alt_getchar
00800f70 g     F .text	000005fc .hidden __udivdi3
00805344 g     O .bss	00000004 x_buf
008001bc g     F .text	00000060 led_timer_isr
00800688 g     F .text	00000070 acc_timer_init
008032c4 g     F .text	0000001c strtol
00805370 g     O .bss	00000004 alt_irq_active
00805348 g     O .bss	00000004 disp_buf
008000fc g     F .exceptions	00000060 alt_irq_handler
00805048 g     O .rwdata	00000028 alt_dev_null
00804778 g     F .text	00000004 alt_dcache_flush_all
00802860 g     F .text	00000080 .hidden __fixdfsi
00800254 g     F .text	00000114 acc_timer_isr
008004a8 g     F .text	0000002c letter_to_hex
008050a4 g       *ABS*	00000000 __ram_rwdata_end
00805090 g     O .rwdata	00000008 alt_dev_list
00804448 g     F .text	00000060 write
00804610 g     F .text	00000008 alt_timestamp_freq
00804e24 g       *ABS*	00000000 __ram_rodata_end
008016c8 g     F .text	00000058 .hidden __umodsi3
00805498 g       *ABS*	00000000 end
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
008029bc g     F .text	00000064 .hidden __clzsi2
0080454c g     F .text	00000034 altera_avalon_jtag_uart_write
00803900 g     F .text	0000052c ___vfprintf_internal_r
00802d7c g     F .text	00000064 _sprintf_r
00802a68 g     F .text	000000e4 _free_r
00804244 g     F .text	00000170 alt_printf
00800180 g     F .text	0000003c _start
008005a4 g     F .text	00000050 clr_disp
0080534c g     O .bss	00000004 y_buf
008044c8 g     F .text	00000028 alt_sys_init
00804620 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
0080538c g     O .bss	0000000c hexbuffers
00801720 g     F .text	00000028 .hidden __mulsi3
00804e24 g       *ABS*	00000000 __ram_rwdata_start
00804914 g       *ABS*	00000000 __ram_rodata_start
00802ed8 g     F .text	00000054 strncpy
008046c8 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00802f2c g     F .text	000000cc strtok
008048e4 g     F .text	00000030 memcmp
00805498 g       *ABS*	00000000 __alt_stack_base
00800398 g     F .text	00000110 convolve_float
00801ff4 g     F .text	0000086c .hidden __muldf3
00804784 g     F .text	0000006c alt_dev_llist_insert
008043fc g     F .text	0000004c sbrk
0080334c g     F .text	0000052c ___svfprintf_internal_r
00803e48 g     F .text	000000b8 __sfvwrite_small_dev
00805324 g       *ABS*	00000000 __bss_start
00802a48 g     F .text	00000020 memset
00800da0 g     F .text	000001d0 main
00805374 g     O .bss	00000004 alt_envp
01000000 g       *ABS*	00000000 __alt_heap_limit
00803090 g     F .text	00000234 _strtol_r
00804580 g     F .text	00000044 alt_timestamp_start
00802b4c g     F .text	00000158 _malloc_r
008050a0 g     O .rwdata	00000004 alt_errno
00805070 g     O .rwdata	00000004 led_offset
0080156c g     F .text	00000084 .hidden __divsi3
00802e58 g     F .text	00000038 strcmp
00804914 g       *ABS*	00000000 __flash_rodata_start
00800368 g     F .text	00000030 ring_buf_read
008044a8 g     F .text	00000020 alt_irq_init
00800970 g     F .text	00000430 parse_request
00802de0 g     F .text	00000078 sprintf
00804a97 g     O .rodata	00000100 .hidden __clz_tab
00804008 g     F .text	00000058 _write_r
0080507c g     O .rwdata	00000004 _impure_ptr
0080537c g     O .bss	00000004 alt_argc
00805384 g     O .bss	00000004 altera_avalon_timer_ts_base
00804e24 g     O .rwdata	000000e8 h
00800020 g       .exceptions	00000000 alt_irq_entry
00805098 g     O .rwdata	00000008 alt_fs_list
00803878 g     F .text	0000001c __vfprintf_internal_unused
00805350 g     O .bss	00000004 z_buf
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804618 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
008008ac g     F .text	000000b0 get_input
008045c4 g     F .text	0000004c alt_timestamp
008050a4 g       *ABS*	00000000 _edata
00805498 g       *ABS*	00000000 _end
0080056c g     F .text	00000038 disp_timer_isr
00800180 g       *ABS*	00000000 __ram_exceptions_end
00805354 g     O .bss	00000008 latency
008015f0 g     F .text	00000074 .hidden __modsi3
00805074 g     O .rwdata	00000004 __ctype_ptr__
00804720 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00804b97 g     O .rodata	00000101 _ctype_
0080000c g       .entry	00000000 _exit
00804634 g     F .text	00000020 alt_up_accelerometer_spi_read
00804654 g     F .text	0000001c alt_up_accelerometer_spi_write
00802ebc g     F .text	0000001c strlen
008043b4 g     F .text	00000048 alt_putchar
00805364 g     O .bss	00000004 __malloc_sbrk_start
00804864 g     F .text	00000004 alt_icache_flush_all
00805080 g     O .rwdata	00000004 alt_priority_mask
00805368 g     O .bss	00000004 __malloc_free_list
00803e2c g     F .text	0000001c __vfprintf_internal
0080535c g     O .bss	00000004 acc_dev
00800768 g     F .text	00000070 led_timer_init
00804138 g     F .text	000000e0 alt_load
00802a34 g     F .text	00000014 free
00805360 g     O .bss	00000004 led_buf



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80010c:	04002034 	movhi	r16,128
  800110:	8414e604 	addi	r16,r16,21400

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	000b883a 	mov	r5,zero
    mask = 1;
  800118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	1888703a 	and	r4,r3,r2
  800120:	20000b26 	beq	r4,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800124:	280490fa 	slli	r2,r5,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	183ff51e 	bne	r3,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	1085883a 	add	r2,r2,r2
      i++;
  800154:	29400044 	addi	r5,r5,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a0c617 	ldw	r2,-31976(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6b41c14 	ori	gp,gp,53360
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	1094c914 	ori	r2,r2,21284

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d52614 	ori	r3,r3,21656

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	08041380 	call	804138 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	08042180 	call	804218 <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <led_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void led_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  8001bc:	00804034 	movhi	r2,256
  8001c0:	10844804 	addi	r2,r2,4384
  8001c4:	10000035 	stwio	zero,0(r2)

	if (led_offset != -1){
  8001c8:	d0a00017 	ldw	r2,-32768(gp)
  8001cc:	017fffc4 	movi	r5,-1
  8001d0:	11401126 	beq	r2,r5,800218 <led_timer_isr+0x5c>


		if (led_buf[led_offset] == '\0'){
  8001d4:	d0e0bc17 	ldw	r3,-32016(gp)
  8001d8:	1887883a 	add	r3,r3,r2
  8001dc:	19000007 	ldb	r4,0(r3)
  8001e0:	00c04034 	movhi	r3,256
  8001e4:	18c47804 	addi	r3,r3,4576
  8001e8:	2000031e 	bne	r4,zero,8001f8 <led_timer_isr+0x3c>
			led_offset = -1;
  8001ec:	d1600015 	stw	r5,-32768(gp)
			IOWR(LED_BASE, 0, led_val);
  8001f0:	d0a0b117 	ldw	r2,-32060(gp)
  8001f4:	00000506 	br	80020c <led_timer_isr+0x50>
  8001f8:	10800044 	addi	r2,r2,1

		}
		else if (led_buf[led_offset] == '1'){
  8001fc:	01400c44 	movi	r5,49
			led_offset++;
  800200:	d0a00015 	stw	r2,-32768(gp)
		if (led_buf[led_offset] == '\0'){
			led_offset = -1;
			IOWR(LED_BASE, 0, led_val);

		}
		else if (led_buf[led_offset] == '1'){
  800204:	2140031e 	bne	r4,r5,800214 <led_timer_isr+0x58>
			led_offset++;
			IOWR(LED_BASE, 0, 1023);
  800208:	0080ffc4 	movi	r2,1023
  80020c:	18800035 	stwio	r2,0(r3)
  800210:	f800283a 	ret
		}
		else{
			led_offset++;
			IOWR(LED_BASE, 0, 0);
  800214:	18000035 	stwio	zero,0(r3)
  800218:	f800283a 	ret

0080021c <ring_buf_push>:
	RING_T* values;
};

//Buffer functions
void ring_buf_push(struct ring_buffer* buf, RING_T in){
	if (buf->next_free < 0){
  80021c:	20800117 	ldw	r2,4(r4)
  800220:	1000030e 	bge	r2,zero,800230 <ring_buf_push+0x14>
		buf->next_free = buf ->size-1;
  800224:	20800017 	ldw	r2,0(r4)
  800228:	10bfffc4 	addi	r2,r2,-1
  80022c:	20800115 	stw	r2,4(r4)
	}
	(buf->values)[buf->next_free] = in;
  800230:	20c00117 	ldw	r3,4(r4)
  800234:	21800217 	ldw	r6,8(r4)
  800238:	18c5883a 	add	r2,r3,r3
  80023c:	1085883a 	add	r2,r2,r2
  800240:	3085883a 	add	r2,r6,r2
  800244:	11400015 	stw	r5,0(r2)
	(buf->next_free)--;
  800248:	18ffffc4 	addi	r3,r3,-1
  80024c:	20c00115 	stw	r3,4(r4)
  800250:	f800283a 	ret

00800254 <acc_timer_isr>:
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  800254:	defffa04 	addi	sp,sp,-24
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800258:	00804034 	movhi	r2,256
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  80025c:	dfc00515 	stw	ra,20(sp)
  800260:	dc400415 	stw	r17,16(sp)
  800264:	dc000315 	stw	r16,12(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800268:	10843004 	addi	r2,r2,4288
  80026c:	10000035 	stwio	zero,0(r2)


    alt_32 x,y,z;

    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800270:	d120bb17 	ldw	r4,-32020(gp)
  800274:	d9400204 	addi	r5,sp,8
  800278:	08046700 	call	804670 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  80027c:	d120bb17 	ldw	r4,-32020(gp)
  800280:	d9400104 	addi	r5,sp,4
  800284:	08046c80 	call	8046c8 <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800288:	d120bb17 	ldw	r4,-32020(gp)
  80028c:	d80b883a 	mov	r5,sp
  800290:	08047200 	call	804720 <alt_up_accelerometer_spi_read_z_axis>

	ring_buf_push(x_buf, x);
  800294:	d9400217 	ldw	r5,8(sp)
  800298:	d120b517 	ldw	r4,-32044(gp)
  80029c:	080021c0 	call	80021c <ring_buf_push>
	ring_buf_push(y_buf, y);
  8002a0:	d9400117 	ldw	r5,4(sp)
  8002a4:	d120b717 	ldw	r4,-32036(gp)
  8002a8:	080021c0 	call	80021c <ring_buf_push>
	ring_buf_push(z_buf, z);
  8002ac:	d9400017 	ldw	r5,0(sp)
  8002b0:	d120b817 	ldw	r4,-32032(gp)
  8002b4:	080021c0 	call	80021c <ring_buf_push>

	//iNTERRUPT FREQUENCY MONITORING
	static int count;
	static alt_64 lasttime;

    if(debug && ((count & 4095) == 0) ){
  8002b8:	d0a0b017 	ldw	r2,-32064(gp)
  8002bc:	10002226 	beq	r2,zero,800348 <acc_timer_isr+0xf4>
  8002c0:	d0a0af17 	ldw	r2,-32068(gp)
  8002c4:	1083ffcc 	andi	r2,r2,4095
  8002c8:	10001f1e 	bne	r2,zero,800348 <acc_timer_isr+0xf4>
    	printf("Avg sampling period (us): %i\n", (alt_timestamp()-lasttime)/4096 /(alt_timestamp_freq()/1000000) );
  8002cc:	08045c40 	call	8045c4 <alt_timestamp>
  8002d0:	d460ad17 	ldw	r17,-32076(gp)
  8002d4:	d160ae17 	ldw	r5,-32072(gp)
  8002d8:	1463c83a 	sub	r17,r2,r17
  8002dc:	1445803a 	cmpltu	r2,r2,r17
  8002e0:	1947c83a 	sub	r3,r3,r5
  8002e4:	1887c83a 	sub	r3,r3,r2
  8002e8:	1804953a 	slli	r2,r3,20
  8002ec:	8822d33a 	srli	r17,r17,12
  8002f0:	1820d33a 	srli	r16,r3,12
  8002f4:	1462b03a 	or	r17,r2,r17
  8002f8:	08046100 	call	804610 <alt_timestamp_freq>
  8002fc:	014003f4 	movhi	r5,15
  800300:	29509004 	addi	r5,r5,16960
  800304:	1009883a 	mov	r4,r2
  800308:	08016640 	call	801664 <__udivsi3>
  80030c:	000f883a 	mov	r7,zero
  800310:	100d883a 	mov	r6,r2
  800314:	8809883a 	mov	r4,r17
  800318:	800b883a 	mov	r5,r16
  80031c:	0800f700 	call	800f70 <__udivdi3>
  800320:	01002034 	movhi	r4,128
  800324:	100b883a 	mov	r5,r2
  800328:	180d883a 	mov	r6,r3
  80032c:	21124504 	addi	r4,r4,18708
  800330:	0802ce00 	call	802ce0 <printf>
		count = 1;
  800334:	00800044 	movi	r2,1
  800338:	d0a0af15 	stw	r2,-32068(gp)
		lasttime = alt_timestamp();
  80033c:	08045c40 	call	8045c4 <alt_timestamp>
  800340:	d0a0ad15 	stw	r2,-32076(gp)
  800344:	d0e0ae15 	stw	r3,-32072(gp)
    }
    count++;
  800348:	d0a0af17 	ldw	r2,-32068(gp)
  80034c:	10800044 	addi	r2,r2,1
  800350:	d0a0af15 	stw	r2,-32068(gp)
}
  800354:	dfc00517 	ldw	ra,20(sp)
  800358:	dc400417 	ldw	r17,16(sp)
  80035c:	dc000317 	ldw	r16,12(sp)
  800360:	dec00604 	addi	sp,sp,24
  800364:	f800283a 	ret

00800368 <ring_buf_read>:
	(buf->next_free)--;
}

RING_T ring_buf_read(struct ring_buffer* buf, RING_T idx){
	int mapped_idx;
	if (buf->next_free+1+idx >= buf->size){
  800368:	20800117 	ldw	r2,4(r4)
  80036c:	10800044 	addi	r2,r2,1
  800370:	114b883a 	add	r5,r2,r5
  800374:	20800017 	ldw	r2,0(r4)
  800378:	28800116 	blt	r5,r2,800380 <ring_buf_read+0x18>
		mapped_idx = buf->next_free+1+idx - buf->size;
  80037c:	288bc83a 	sub	r5,r5,r2
	}
	else {
		mapped_idx = buf->next_free+1+idx;
	}

	return buf->values[mapped_idx];
  800380:	20800217 	ldw	r2,8(r4)
  800384:	294b883a 	add	r5,r5,r5
  800388:	294b883a 	add	r5,r5,r5
  80038c:	114b883a 	add	r5,r2,r5
}
  800390:	28800017 	ldw	r2,0(r5)
  800394:	f800283a 	ret

00800398 <convolve_float>:

alt_32 convolve_float(struct ring_buffer* buf, double coefficients[]  ){
  800398:	defff904 	addi	sp,sp,-28
  80039c:	dd000415 	stw	r20,16(sp)
  8003a0:	2029883a 	mov	r20,r4
  8003a4:	dfc00615 	stw	ra,24(sp)
  8003a8:	dd400515 	stw	r21,20(sp)
  8003ac:	dcc00315 	stw	r19,12(sp)
  8003b0:	dc800215 	stw	r18,8(sp)
  8003b4:	dc400115 	stw	r17,4(sp)
  8003b8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8003bc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8003c0:	00bfff84 	movi	r2,-2
  8003c4:	1884703a 	and	r2,r3,r2
  8003c8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  8003cc:	d120c017 	ldw	r4,-32000(gp)
  8003d0:	00bff7c4 	movi	r2,-33
  8003d4:	2084703a 	and	r2,r4,r2
  8003d8:	d0a0c015 	stw	r2,-32000(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8003dc:	d0a0c017 	ldw	r2,-32000(gp)
  8003e0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8003e4:	1801703a 	wrctl	status,r3
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
	for(int i = 0; i < buf->size; i ++){
  8003e8:	a5400017 	ldw	r21,0(r20)
  8003ec:	2821883a 	mov	r16,r5
  8003f0:	0023883a 	mov	r17,zero

	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
  8003f4:	0027883a 	mov	r19,zero
  8003f8:	0025883a 	mov	r18,zero
	for(int i = 0; i < buf->size; i ++){
  8003fc:	8d40140e 	bge	r17,r21,800450 <convolve_float+0xb8>
		sum += ring_buf_read(buf, i)* coefficients[i];
  800400:	880b883a 	mov	r5,r17
  800404:	a009883a 	mov	r4,r20
  800408:	08003680 	call	800368 <ring_buf_read>
  80040c:	1009883a 	mov	r4,r2
  800410:	08028e00 	call	8028e0 <__floatsidf>
  800414:	81800017 	ldw	r6,0(r16)
  800418:	81c00117 	ldw	r7,4(r16)
  80041c:	1009883a 	mov	r4,r2
  800420:	180b883a 	mov	r5,r3
  800424:	0801ff40 	call	801ff4 <__muldf3>
  800428:	9809883a 	mov	r4,r19
  80042c:	900b883a 	mov	r5,r18
  800430:	100d883a 	mov	r6,r2
  800434:	180f883a 	mov	r7,r3
  800438:	08017480 	call	801748 <__adddf3>
  80043c:	1027883a 	mov	r19,r2
  800440:	1825883a 	mov	r18,r3
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
	for(int i = 0; i < buf->size; i ++){
  800444:	8c400044 	addi	r17,r17,1
  800448:	84000204 	addi	r16,r16,8
  80044c:	003feb06 	br	8003fc <__alt_data_end+0xff8003fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800450:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800454:	00bfff84 	movi	r2,-2
  800458:	1884703a 	and	r2,r3,r2
  80045c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  800460:	d0a0c017 	ldw	r2,-32000(gp)
  800464:	10800814 	ori	r2,r2,32
  800468:	d0a0c015 	stw	r2,-32000(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80046c:	d0a0c017 	ldw	r2,-32000(gp)
  800470:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800474:	1801703a 	wrctl	status,r3
	}

	//Re-enable interrupts from state
	//alt_irq_enable_all(state);
	alt_irq_enable(TIMER_IRQ);
	return (alt_32)sum;
  800478:	9809883a 	mov	r4,r19
  80047c:	900b883a 	mov	r5,r18
  800480:	08028600 	call	802860 <__fixdfsi>

}
  800484:	dfc00617 	ldw	ra,24(sp)
  800488:	dd400517 	ldw	r21,20(sp)
  80048c:	dd000417 	ldw	r20,16(sp)
  800490:	dcc00317 	ldw	r19,12(sp)
  800494:	dc800217 	ldw	r18,8(sp)
  800498:	dc400117 	ldw	r17,4(sp)
  80049c:	dc000017 	ldw	r16,0(sp)
  8004a0:	dec00704 	addi	sp,sp,28
  8004a4:	f800283a 	ret

008004a8 <letter_to_hex>:


int letter_to_hex(char in){
  8004a8:	213ff484 	addi	r4,r4,-46
  8004ac:	21003fcc 	andi	r4,r4,255
  8004b0:	00800b04 	movi	r2,44
  8004b4:	11000536 	bltu	r2,r4,8004cc <letter_to_hex+0x24>
  8004b8:	00802034 	movhi	r2,128
  8004bc:	10929a84 	addi	r2,r2,19050
  8004c0:	1109883a 	add	r4,r2,r4
  8004c4:	20800003 	ldbu	r2,0(r4)
  8004c8:	f800283a 	ret

	switch(in){
  8004cc:	00803fc4 	movi	r2,255
		default:
			return 0b11111111;
	};

	return 0;
}
  8004d0:	f800283a 	ret

008004d4 <write_to_disp>:

//Display processing
void write_to_disp(char* str, int offset){
  8004d4:	defffe04 	addi	sp,sp,-8
  8004d8:	dc000015 	stw	r16,0(sp)
  8004dc:	dfc00115 	stw	ra,4(sp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, letter_to_hex(str[offset]));
  8004e0:	2161883a 	add	r16,r4,r5
  8004e4:	81000007 	ldb	r4,0(r16)
  8004e8:	08004a80 	call	8004a8 <letter_to_hex>
  8004ec:	00c04034 	movhi	r3,256
  8004f0:	18c47404 	addi	r3,r3,4560
  8004f4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, letter_to_hex(str[offset+1]));
  8004f8:	81000047 	ldb	r4,1(r16)
  8004fc:	08004a80 	call	8004a8 <letter_to_hex>
  800500:	00c04034 	movhi	r3,256
  800504:	18c47004 	addi	r3,r3,4544
  800508:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, letter_to_hex(str[offset+2]));
  80050c:	81000087 	ldb	r4,2(r16)
  800510:	08004a80 	call	8004a8 <letter_to_hex>
  800514:	00c04034 	movhi	r3,256
  800518:	18c46c04 	addi	r3,r3,4528
  80051c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, letter_to_hex(str[offset+3]));
  800520:	810000c7 	ldb	r4,3(r16)
  800524:	08004a80 	call	8004a8 <letter_to_hex>
  800528:	00c04034 	movhi	r3,256
  80052c:	18c46804 	addi	r3,r3,4512
  800530:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, letter_to_hex(str[offset+4]));
  800534:	81000107 	ldb	r4,4(r16)
  800538:	08004a80 	call	8004a8 <letter_to_hex>
  80053c:	00c04034 	movhi	r3,256
  800540:	18c46404 	addi	r3,r3,4496
  800544:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, letter_to_hex(str[offset+5]));
  800548:	81000147 	ldb	r4,5(r16)
  80054c:	08004a80 	call	8004a8 <letter_to_hex>
  800550:	00c04034 	movhi	r3,256
  800554:	18c46004 	addi	r3,r3,4480
  800558:	18800035 	stwio	r2,0(r3)
}
  80055c:	dfc00117 	ldw	ra,4(sp)
  800560:	dc000017 	ldw	r16,0(sp)
  800564:	dec00204 	addi	sp,sp,8
  800568:	f800283a 	ret

0080056c <disp_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);

}

void disp_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  80056c:	00804034 	movhi	r2,256
  800570:	10843804 	addi	r2,r2,4320
  800574:	10000035 	stwio	zero,0(r2)

    if(disp_buf[disp_offset+5] == '\0'){
  800578:	d120b617 	ldw	r4,-32040(gp)
  80057c:	d0a0b317 	ldw	r2,-32052(gp)
  800580:	2087883a 	add	r3,r4,r2
  800584:	18c00147 	ldb	r3,5(r3)
  800588:	1800021e 	bne	r3,zero,800594 <disp_timer_isr+0x28>
    	disp_offset = 0;
  80058c:	d020b315 	stw	zero,-32052(gp)
  800590:	00000206 	br	80059c <disp_timer_isr+0x30>
    }
    else{
    	disp_offset++;
  800594:	10800044 	addi	r2,r2,1
  800598:	d0a0b315 	stw	r2,-32052(gp)
    }
    write_to_disp(disp_buf,disp_offset);
  80059c:	d160b317 	ldw	r5,-32052(gp)
  8005a0:	08004d41 	jmpi	8004d4 <write_to_disp>

008005a4 <clr_disp>:
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, letter_to_hex(str[offset+5]));
}


void clr_disp(){
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 255);
  8005a4:	00c04034 	movhi	r3,256
  8005a8:	00803fc4 	movi	r2,255
  8005ac:	18c46004 	addi	r3,r3,4480
  8005b0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 255);
  8005b4:	00c04034 	movhi	r3,256
  8005b8:	18c46404 	addi	r3,r3,4496
  8005bc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 255);
  8005c0:	00c04034 	movhi	r3,256
  8005c4:	18c46804 	addi	r3,r3,4512
  8005c8:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 255);
  8005cc:	00c04034 	movhi	r3,256
  8005d0:	18c46c04 	addi	r3,r3,4528
  8005d4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 255);
  8005d8:	00c04034 	movhi	r3,256
  8005dc:	18c47004 	addi	r3,r3,4544
  8005e0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 255);
  8005e4:	00c04034 	movhi	r3,256
  8005e8:	18c47404 	addi	r3,r3,4560
  8005ec:	18800035 	stwio	r2,0(r3)
  8005f0:	f800283a 	ret

008005f4 <read_request>:
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  8005f4:	defffb04 	addi	sp,sp,-20
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  8005f8:	01801004 	movi	r6,64
  8005fc:	000b883a 	mov	r5,zero
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  800600:	dfc00415 	stw	ra,16(sp)
  800604:	dcc00315 	stw	r19,12(sp)
  800608:	dc800215 	stw	r18,8(sp)
  80060c:	dc400115 	stw	r17,4(sp)
  800610:	dc000015 	stw	r16,0(sp)
  800614:	2023883a 	mov	r17,r4
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  800618:	0802a480 	call	802a48 <memset>

	//Get first character
	c = alt_getchar();
  80061c:	08040600 	call	804060 <alt_getchar>
  800620:	1025883a 	mov	r18,r2

	//Start timer after first char received
	latency = alt_timestamp();
  800624:	08045c40 	call	8045c4 <alt_timestamp>
  800628:	d0a0b915 	stw	r2,-32028(gp)
  80062c:	d0e0ba15 	stw	r3,-32024(gp)

	while(c != '\n'){
  800630:	8821883a 	mov	r16,r17
  800634:	04c00284 	movi	r19,10
  800638:	90803fcc 	andi	r2,r18,255
  80063c:	1080201c 	xori	r2,r2,128
  800640:	10bfe004 	addi	r2,r2,-128
  800644:	8449c83a 	sub	r4,r16,r17
  800648:	14c00526 	beq	r2,r19,800660 <read_request+0x6c>
		outbuf[idx] = c;
  80064c:	84800005 	stb	r18,0(r16)
		c = alt_getchar();
  800650:	08040600 	call	804060 <alt_getchar>
  800654:	1025883a 	mov	r18,r2
  800658:	84000044 	addi	r16,r16,1
  80065c:	003ff606 	br	800638 <__alt_data_end+0xff800638>
		idx++;
	}
	outbuf[idx] = ' ';
  800660:	8909883a 	add	r4,r17,r4
  800664:	00800804 	movi	r2,32
  800668:	20800005 	stb	r2,0(r4)

}
  80066c:	dfc00417 	ldw	ra,16(sp)
  800670:	dcc00317 	ldw	r19,12(sp)
  800674:	dc800217 	ldw	r18,8(sp)
  800678:	dc400117 	ldw	r17,4(sp)
  80067c:	dc000017 	ldw	r16,0(sp)
  800680:	dec00504 	addi	sp,sp,20
  800684:	f800283a 	ret

00800688 <acc_timer_init>:

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  800688:	defffe04 	addi	sp,sp,-8
  80068c:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 1000;
//	alt_32 period = alt_timestamp_freq()/freq;

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  800690:	04004034 	movhi	r16,256

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  800694:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 1000;
//	alt_32 period = alt_timestamp_freq()/freq;

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  800698:	84043104 	addi	r16,r16,4292
  80069c:	008000c4 	movi	r2,3
  8006a0:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  8006a4:	00804034 	movhi	r2,256
  8006a8:	10843004 	addi	r2,r2,4288
  8006ac:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(ACC_TIMER_BASE, 0xfbd0);
  8006b0:	00804034 	movhi	r2,256
  8006b4:	10843204 	addi	r2,r2,4296
  8006b8:	00fef414 	movui	r3,64464
  8006bc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(ACC_TIMER_BASE, 0x0001);
  8006c0:	00804034 	movhi	r2,256
  8006c4:	10843304 	addi	r2,r2,4300
  8006c8:	00c00044 	movi	r3,1
  8006cc:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
  8006d0:	200d883a 	mov	r6,r4
  8006d4:	000b883a 	mov	r5,zero
  8006d8:	01000244 	movi	r4,9
  8006dc:	08040a40 	call	8040a4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);
  8006e0:	008001c4 	movi	r2,7
  8006e4:	80800035 	stwio	r2,0(r16)

}
  8006e8:	dfc00117 	ldw	ra,4(sp)
  8006ec:	dc000017 	ldw	r16,0(sp)
  8006f0:	dec00204 	addi	sp,sp,8
  8006f4:	f800283a 	ret

008006f8 <disp_timer_init>:
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  8006f8:	defffe04 	addi	sp,sp,-8
  8006fc:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  800700:	04004034 	movhi	r16,256
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  800704:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  800708:	84043904 	addi	r16,r16,4324
  80070c:	008000c4 	movi	r2,3
  800710:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  800714:	00804034 	movhi	r2,256
  800718:	10843804 	addi	r2,r2,4320
  80071c:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(HEX_TIMER_BASE, 0x5a00);
  800720:	00804034 	movhi	r2,256
  800724:	10843a04 	addi	r2,r2,4328
  800728:	00d68004 	movi	r3,23040
  80072c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(HEX_TIMER_BASE, 0x0262);
  800730:	00804034 	movhi	r2,256
  800734:	10843b04 	addi	r2,r2,4332
  800738:	00c09884 	movi	r3,610
  80073c:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(HEX_TIMER_IRQ, 0, isr);
  800740:	200d883a 	mov	r6,r4
  800744:	000b883a 	mov	r5,zero
  800748:	01000204 	movi	r4,8
  80074c:	08040a40 	call	8040a4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);
  800750:	008001c4 	movi	r2,7
  800754:	80800035 	stwio	r2,0(r16)

}
  800758:	dfc00117 	ldw	ra,4(sp)
  80075c:	dc000017 	ldw	r16,0(sp)
  800760:	dec00204 	addi	sp,sp,8
  800764:	f800283a 	ret

00800768 <led_timer_init>:



}

void led_timer_init(void * isr) {
  800768:	defffe04 	addi	sp,sp,-8
  80076c:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  800770:	04004034 	movhi	r16,256



}

void led_timer_init(void * isr) {
  800774:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  800778:	84044904 	addi	r16,r16,4388
  80077c:	008000c4 	movi	r2,3
  800780:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  800784:	00804034 	movhi	r2,256
  800788:	10844804 	addi	r2,r2,4384
  80078c:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x5d40);
  800790:	00804034 	movhi	r2,256
  800794:	10844a04 	addi	r2,r2,4392
  800798:	00d75004 	movi	r3,23872
  80079c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x00c6);
  8007a0:	00804034 	movhi	r2,256
  8007a4:	10844b04 	addi	r2,r2,4396
  8007a8:	00c03184 	movi	r3,198
  8007ac:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
  8007b0:	200d883a 	mov	r6,r4
  8007b4:	000b883a 	mov	r5,zero
  8007b8:	01000144 	movi	r4,5
  8007bc:	08040a40 	call	8040a4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
  8007c0:	008001c4 	movi	r2,7
  8007c4:	80800035 	stwio	r2,0(r16)

}
  8007c8:	dfc00117 	ldw	ra,4(sp)
  8007cc:	dc000017 	ldw	r16,0(sp)
  8007d0:	dec00204 	addi	sp,sp,8
  8007d4:	f800283a 	ret

008007d8 <to_hex>:
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  8007d8:	defffc04 	addi	sp,sp,-16
  8007dc:	dc400115 	stw	r17,4(sp)
  8007e0:	3023883a 	mov	r17,r6
  8007e4:	dc800215 	stw	r18,8(sp)
  8007e8:	dc000015 	stw	r16,0(sp)
  8007ec:	2025883a 	mov	r18,r4
  8007f0:	2821883a 	mov	r16,r5
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  8007f4:	01800204 	movi	r6,8
  8007f8:	000b883a 	mov	r5,zero
  8007fc:	8809883a 	mov	r4,r17
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  800800:	dfc00315 	stw	ra,12(sp)
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  800804:	0802a480 	call	802a48 <memset>
	sprintf(buf, "%x", val);
  800808:	01402034 	movhi	r5,128
  80080c:	8809883a 	mov	r4,r17
  800810:	900d883a 	mov	r6,r18
  800814:	29524d04 	addi	r5,r5,18740
  800818:	0802de00 	call	802de0 <sprintf>
	int hexlen = strlen(buf);
  80081c:	8809883a 	mov	r4,r17
  800820:	0802ebc0 	call	802ebc <strlen>

	//Left shift if string is longer than desired length to take least significant
	if (hexlen > length){
  800824:	8080090e 	bge	r16,r2,80084c <to_hex+0x74>
  800828:	8807883a 	mov	r3,r17
		for(int i = 0; i < length; i++){
  80082c:	1c49c83a 	sub	r4,r3,r17
  800830:	24000c0e 	bge	r4,r16,800864 <to_hex+0x8c>
			buf[i] = buf[(i + hexlen - length)];
  800834:	10c9883a 	add	r4,r2,r3
  800838:	2409c83a 	sub	r4,r4,r16
  80083c:	21000003 	ldbu	r4,0(r4)
  800840:	18c00044 	addi	r3,r3,1
  800844:	193fffc5 	stb	r4,-1(r3)
  800848:	003ff806 	br	80082c <__alt_data_end+0xff80082c>
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
  80084c:	1400050e 	bge	r2,r16,800864 <to_hex+0x8c>
  800850:	80ffffc4 	addi	r3,r16,-1
  800854:	88c7883a 	add	r3,r17,r3
  800858:	0009883a 	mov	r4,zero
		for(int i = 0; i < length; i++){
			if(i < hexlen){
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
			}
			else{
				buf[(length - 1 - i)] = '0';
  80085c:	01800c04 	movi	r6,48
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800860:	24000816 	blt	r4,r16,800884 <to_hex+0xac>
			}

		}
	}
	//Add termination
	buf[length] = '\0';
  800864:	8c21883a 	add	r16,r17,r16
  800868:	80000005 	stb	zero,0(r16)

}
  80086c:	dfc00317 	ldw	ra,12(sp)
  800870:	dc800217 	ldw	r18,8(sp)
  800874:	dc400117 	ldw	r17,4(sp)
  800878:	dc000017 	ldw	r16,0(sp)
  80087c:	dec00404 	addi	sp,sp,16
  800880:	f800283a 	ret
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
			if(i < hexlen){
  800884:	2080050e 	bge	r4,r2,80089c <to_hex+0xc4>
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
  800888:	1c0bc83a 	sub	r5,r3,r16
  80088c:	288b883a 	add	r5,r5,r2
  800890:	29400003 	ldbu	r5,0(r5)
  800894:	19400005 	stb	r5,0(r3)
  800898:	00000106 	br	8008a0 <to_hex+0xc8>
			}
			else{
				buf[(length - 1 - i)] = '0';
  80089c:	19800005 	stb	r6,0(r3)
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  8008a0:	21000044 	addi	r4,r4,1
  8008a4:	18ffffc4 	addi	r3,r3,-1
  8008a8:	003fed06 	br	800860 <__alt_data_end+0xff800860>

008008ac <get_input>:
alt_32 get_input(char x){

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8008ac:	21003fcc 	andi	r4,r4,255
	buf[length] = '\0';

}


alt_32 get_input(char x){
  8008b0:	defffe04 	addi	sp,sp,-8

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8008b4:	2100201c 	xori	r4,r4,128
	buf[length] = '\0';

}


alt_32 get_input(char x){
  8008b8:	dfc00115 	stw	ra,4(sp)

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8008bc:	213fe004 	addi	r4,r4,-128
  8008c0:	00801e04 	movi	r2,120
  8008c4:	2080081e 	bne	r4,r2,8008e8 <get_input+0x3c>
		alt_32 x = convolve_float(x_buf, h);
  8008c8:	d120b517 	ldw	r4,-32044(gp)
  8008cc:	01402034 	movhi	r5,128
  8008d0:	29538904 	addi	r5,r5,20004
  8008d4:	08003980 	call	800398 <convolve_float>
		if(x<-thresh)x = 15;
  8008d8:	00ffda84 	movi	r3,-150
  8008dc:	10c01916 	blt	r2,r3,800944 <get_input+0x98>
		else if(x>thresh) x = 1;
  8008e0:	108025c8 	cmpgei	r2,r2,151
  8008e4:	00001a06 	br	800950 <get_input+0xa4>
		else x = 0;

		return x;

	}
	else if(x == 'y'){
  8008e8:	00801e44 	movi	r2,121
  8008ec:	2080041e 	bne	r4,r2,800900 <get_input+0x54>
		alt_32 y = alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  8008f0:	d120bb17 	ldw	r4,-32020(gp)
  8008f4:	d80b883a 	mov	r5,sp
  8008f8:	08046c80 	call	8046c8 <alt_up_accelerometer_spi_read_y_axis>
  8008fc:	00000506 	br	800914 <get_input+0x68>
		else y = 0;

		return y;

	}
	else if(x == 'z'){
  800900:	00801e84 	movi	r2,122
  800904:	2080111e 	bne	r4,r2,80094c <get_input+0xa0>
		alt_32 z = alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800908:	d120bb17 	ldw	r4,-32020(gp)
  80090c:	d80b883a 	mov	r5,sp
  800910:	08047200 	call	804720 <alt_up_accelerometer_spi_read_z_axis>
		if(z<-thresh)z = 15;
  800914:	00ffda84 	movi	r3,-150
  800918:	10c0020e 	bge	r2,r3,800924 <get_input+0x78>
  80091c:	008003c4 	movi	r2,15
  800920:	00000306 	br	800930 <get_input+0x84>
		else if(z>thresh) z = 1;
  800924:	00c02584 	movi	r3,150
  800928:	1880030e 	bge	r3,r2,800938 <get_input+0x8c>
  80092c:	00800044 	movi	r2,1
  800930:	d8800015 	stw	r2,0(sp)
  800934:	00000106 	br	80093c <get_input+0x90>
		else z = 0;
  800938:	d8000015 	stw	zero,0(sp)

		return z;
  80093c:	d8800017 	ldw	r2,0(sp)
  800940:	00000306 	br	800950 <get_input+0xa4>
	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
		alt_32 x = convolve_float(x_buf, h);
		if(x<-thresh)x = 15;
  800944:	008003c4 	movi	r2,15
  800948:	00000106 	br	800950 <get_input+0xa4>
		return z;

	}
	else{
		//throw_code(3);
		return 16;
  80094c:	00800404 	movi	r2,16
	}
}
  800950:	dfc00117 	ldw	ra,4(sp)
  800954:	dec00204 	addi	sp,sp,8
  800958:	f800283a 	ret

0080095c <throw_code>:


void throw_code(char* regname, int code){
	printf("K %s %x\n", regname, code);
  80095c:	280d883a 	mov	r6,r5
  800960:	200b883a 	mov	r5,r4
  800964:	01002034 	movhi	r4,128
  800968:	21124e04 	addi	r4,r4,18744
  80096c:	0802ce01 	jmpi	802ce0 <printf>

00800970 <parse_request>:
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  800970:	deffee04 	addi	sp,sp,-72
	int token_number = 0;
	char* tokens[8] = {};
  800974:	01800804 	movi	r6,32
  800978:	000b883a 	mov	r5,zero
  80097c:	d809883a 	mov	r4,sp
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  800980:	dfc01115 	stw	ra,68(sp)
  800984:	dc000b15 	stw	r16,44(sp)
  800988:	dd401015 	stw	r21,64(sp)
  80098c:	dd000f15 	stw	r20,60(sp)
  800990:	dcc00e15 	stw	r19,56(sp)
  800994:	dc800d15 	stw	r18,52(sp)
  800998:	dc400c15 	stw	r17,48(sp)
	int token_number = 0;
	char* tokens[8] = {};
  80099c:	0802a480 	call	802a48 <memset>
	char* token;


	token = strtok(cmdbuffer, " ");
  8009a0:	d120b417 	ldw	r4,-32048(gp)
  8009a4:	01402034 	movhi	r5,128
  8009a8:	29526604 	addi	r5,r5,18840
  8009ac:	0802f2c0 	call	802f2c <strtok>
	outbuf[idx] = ' ';

}

void parse_request(char* request){
	int token_number = 0;
  8009b0:	0021883a 	mov	r16,zero


	token = strtok(cmdbuffer, " ");


	while(token != NULL){
  8009b4:	10000a26 	beq	r2,zero,8009e0 <parse_request+0x70>
		tokens[token_number]= token;
  8009b8:	8407883a 	add	r3,r16,r16
  8009bc:	18c7883a 	add	r3,r3,r3
  8009c0:	d8c7883a 	add	r3,sp,r3
		token_number++;
		token = strtok(NULL, " ");
  8009c4:	01402034 	movhi	r5,128

	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
  8009c8:	18800015 	stw	r2,0(r3)
		token_number++;
		token = strtok(NULL, " ");
  8009cc:	29526604 	addi	r5,r5,18840
  8009d0:	0009883a 	mov	r4,zero
	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
		token_number++;
  8009d4:	84000044 	addi	r16,r16,1
		token = strtok(NULL, " ");
  8009d8:	0802f2c0 	call	802f2c <strtok>
  8009dc:	003ff506 	br	8009b4 <__alt_data_end+0xff8009b4>
	}

	if(token_number == 0 || strcmp(tokens[0], &"R" ) != 0){
  8009e0:	80000526 	beq	r16,zero,8009f8 <parse_request+0x88>
  8009e4:	d9000017 	ldw	r4,0(sp)
  8009e8:	01402034 	movhi	r5,128
  8009ec:	29525104 	addi	r5,r5,18756
  8009f0:	0802e580 	call	802e58 <strcmp>
  8009f4:	10000226 	beq	r2,zero,800a00 <parse_request+0x90>
		throw_code(&"ERR", 1);
  8009f8:	01400044 	movi	r5,1
  8009fc:	00009206 	br	800c48 <parse_request+0x2d8>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
  800a00:	dc000117 	ldw	r16,4(sp)
  800a04:	01402034 	movhi	r5,128
  800a08:	29525304 	addi	r5,r5,18764
  800a0c:	8009883a 	mov	r4,r16
  800a10:	0802e580 	call	802e58 <strcmp>
  800a14:	1025883a 	mov	r18,r2
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
  800a18:	10000526 	beq	r2,zero,800a30 <parse_request+0xc0>
  800a1c:	01402034 	movhi	r5,128
  800a20:	29525404 	addi	r5,r5,18768
  800a24:	8009883a 	mov	r4,r16
  800a28:	0802e580 	call	802e58 <strcmp>
  800a2c:	10002a1e 	bne	r2,zero,800ad8 <parse_request+0x168>
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
  800a30:	d120b517 	ldw	r4,-32044(gp)
  800a34:	01402034 	movhi	r5,128
  800a38:	29538904 	addi	r5,r5,20004
  800a3c:	08003980 	call	800398 <convolve_float>
			y = convolve_float(y_buf, h);
  800a40:	d120b717 	ldw	r4,-32036(gp)
  800a44:	01402034 	movhi	r5,128
  800a48:	29538904 	addi	r5,r5,20004
	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
  800a4c:	102b883a 	mov	r21,r2
			y = convolve_float(y_buf, h);
  800a50:	08003980 	call	800398 <convolve_float>
			z = convolve_float(z_buf, h);
  800a54:	d120b817 	ldw	r4,-32032(gp)
  800a58:	01402034 	movhi	r5,128
  800a5c:	29538904 	addi	r5,r5,20004

			to_hex(x, 3, hexbuffers[0]);
  800a60:	04402034 	movhi	r17,128
  800a64:	8c54e304 	addi	r17,r17,21388
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
			y = convolve_float(y_buf, h);
  800a68:	1029883a 	mov	r20,r2
			z = convolve_float(z_buf, h);
  800a6c:	08003980 	call	800398 <convolve_float>

			to_hex(x, 3, hexbuffers[0]);
  800a70:	89800017 	ldw	r6,0(r17)
  800a74:	014000c4 	movi	r5,3
  800a78:	a809883a 	mov	r4,r21
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
			y = convolve_float(y_buf, h);
			z = convolve_float(z_buf, h);
  800a7c:	1027883a 	mov	r19,r2

			to_hex(x, 3, hexbuffers[0]);
  800a80:	08007d80 	call	8007d8 <to_hex>
			to_hex(y, 3, hexbuffers[1]);
  800a84:	89800117 	ldw	r6,4(r17)
  800a88:	014000c4 	movi	r5,3
  800a8c:	a009883a 	mov	r4,r20
  800a90:	08007d80 	call	8007d8 <to_hex>
			to_hex(z, 3, hexbuffers[2]);
  800a94:	89800217 	ldw	r6,8(r17)
  800a98:	014000c4 	movi	r5,3
  800a9c:	9809883a 	mov	r4,r19
  800aa0:	08007d80 	call	8007d8 <to_hex>

			if (is_all){
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800aa4:	89c00217 	ldw	r7,8(r17)
  800aa8:	89800117 	ldw	r6,4(r17)
  800aac:	89400017 	ldw	r5,0(r17)

			to_hex(x, 3, hexbuffers[0]);
			to_hex(y, 3, hexbuffers[1]);
			to_hex(z, 3, hexbuffers[2]);

			if (is_all){
  800ab0:	9000041e 	bne	r18,zero,800ac4 <parse_request+0x154>
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800ab4:	01002034 	movhi	r4,128
  800ab8:	21125604 	addi	r4,r4,18776
  800abc:	08042440 	call	804244 <alt_printf>
  800ac0:	00000b06 	br	800af0 <parse_request+0x180>
			}
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800ac4:	01002034 	movhi	r4,128
  800ac8:	21125c04 	addi	r4,r4,18800
  800acc:	08042440 	call	804244 <alt_printf>
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;
  800ad0:	04400044 	movi	r17,1
  800ad4:	00000106 	br	800adc <parse_request+0x16c>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;
  800ad8:	0023883a 	mov	r17,zero
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  800adc:	01402034 	movhi	r5,128
  800ae0:	29528804 	addi	r5,r5,18976
  800ae4:	8009883a 	mov	r4,r16
  800ae8:	0802e580 	call	802e58 <strcmp>
  800aec:	1000231e 	bne	r2,zero,800b7c <parse_request+0x20c>
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800af0:	d120bb17 	ldw	r4,-32020(gp)
  800af4:	d9400a04 	addi	r5,sp,40
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800af8:	04402034 	movhi	r17,128
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800afc:	08046700 	call	804670 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800b00:	d120bb17 	ldw	r4,-32020(gp)
  800b04:	d9400904 	addi	r5,sp,36
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800b08:	8c54e304 	addi	r17,r17,21388
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800b0c:	08046c80 	call	8046c8 <alt_up_accelerometer_spi_read_y_axis>
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800b10:	d120bb17 	ldw	r4,-32020(gp)
  800b14:	d9400804 	addi	r5,sp,32
  800b18:	08047200 	call	804720 <alt_up_accelerometer_spi_read_z_axis>

		to_hex(x, 3, hexbuffers[0]);
  800b1c:	89800017 	ldw	r6,0(r17)
  800b20:	d9000a17 	ldw	r4,40(sp)
  800b24:	014000c4 	movi	r5,3
  800b28:	08007d80 	call	8007d8 <to_hex>
		to_hex(y, 3, hexbuffers[1]);
  800b2c:	89800117 	ldw	r6,4(r17)
  800b30:	d9000917 	ldw	r4,36(sp)
  800b34:	014000c4 	movi	r5,3
  800b38:	08007d80 	call	8007d8 <to_hex>
		to_hex(z, 3, hexbuffers[2]);
  800b3c:	89800217 	ldw	r6,8(r17)
  800b40:	d9000817 	ldw	r4,32(sp)
  800b44:	014000c4 	movi	r5,3
  800b48:	08007d80 	call	8007d8 <to_hex>

		if (is_all){
			printf("ACCRAW X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800b4c:	89c00217 	ldw	r7,8(r17)
  800b50:	89800117 	ldw	r6,4(r17)
  800b54:	89400017 	ldw	r5,0(r17)

		to_hex(x, 3, hexbuffers[0]);
		to_hex(y, 3, hexbuffers[1]);
		to_hex(z, 3, hexbuffers[2]);

		if (is_all){
  800b58:	9000041e 	bne	r18,zero,800b6c <parse_request+0x1fc>
			printf("ACCRAW X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800b5c:	01002034 	movhi	r4,128
  800b60:	21126204 	addi	r4,r4,18824
  800b64:	0802ce00 	call	802ce0 <printf>
  800b68:	00000906 	br	800b90 <parse_request+0x220>
		}
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800b6c:	01002034 	movhi	r4,128
  800b70:	21126704 	addi	r4,r4,18844
  800b74:	0802ce00 	call	802ce0 <printf>
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;
  800b78:	04400044 	movi	r17,1
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800b7c:	01402034 	movhi	r5,128
  800b80:	29526d04 	addi	r5,r5,18868
  800b84:	8009883a 	mov	r4,r16
  800b88:	0802e580 	call	802e58 <strcmp>
  800b8c:	10000e1e 	bne	r2,zero,800bc8 <parse_request+0x258>

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800b90:	00804034 	movhi	r2,256
  800b94:	10845804 	addi	r2,r2,4448
  800b98:	11400037 	ldwio	r5,0(r2)
  800b9c:	014a303a 	nor	r5,zero,r5

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
  800ba0:	294000cc 	andi	r5,r5,3

		if (is_all){
  800ba4:	9000041e 	bne	r18,zero,800bb8 <parse_request+0x248>
			alt_printf("BUTTON %x ", button);
  800ba8:	01002034 	movhi	r4,128
  800bac:	21126f04 	addi	r4,r4,18876
  800bb0:	08042440 	call	804244 <alt_printf>
  800bb4:	00000906 	br	800bdc <parse_request+0x26c>
		}
		else{
			alt_printf("K BUTTON %x 0\n", button);
  800bb8:	01002034 	movhi	r4,128
  800bbc:	21127204 	addi	r4,r4,18888
  800bc0:	08042440 	call	804244 <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
  800bc4:	04400044 	movi	r17,1
		else{
			alt_printf("K BUTTON %x 0\n", button);
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  800bc8:	01402034 	movhi	r5,128
  800bcc:	29528a04 	addi	r5,r5,18984
  800bd0:	8009883a 	mov	r4,r16
  800bd4:	0802e580 	call	802e58 <strcmp>
  800bd8:	10001f1e 	bne	r2,zero,800c58 <parse_request+0x2e8>
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800bdc:	00804034 	movhi	r2,256
  800be0:	10845c04 	addi	r2,r2,4464
  800be4:	14400037 	ldwio	r17,0(r2)
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800be8:	00802034 	movhi	r2,128
  800bec:	1094e304 	addi	r2,r2,21388
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800bf0:	0462303a 	nor	r17,zero,r17
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800bf4:	11800017 	ldw	r6,0(r2)
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
  800bf8:	8c40ffcc 	andi	r17,r17,1023
		to_hex(switches, 3, hexbuffers[0]);
  800bfc:	014000c4 	movi	r5,3
  800c00:	8809883a 	mov	r4,r17
  800c04:	08007d80 	call	8007d8 <to_hex>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
  800c08:	880b883a 	mov	r5,r17

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);

		if (is_all){
  800c0c:	9000071e 	bne	r18,zero,800c2c <parse_request+0x2bc>
			alt_printf("SWITCH %x ", switches);
  800c10:	01002034 	movhi	r4,128
  800c14:	21127604 	addi	r4,r4,18904
  800c18:	08042440 	call	804244 <alt_printf>

	}

	//Saves unnecessary comparisons
	if (is_all){
		alt_printf(" 0\n");
  800c1c:	01002034 	movhi	r4,128
  800c20:	21127904 	addi	r4,r4,18916
  800c24:	08042440 	call	804244 <alt_printf>
		return;
  800c28:	00005406 	br	800d7c <parse_request+0x40c>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
		}
		else{
			alt_printf("K SWITCH %x 0\n", switches);
  800c2c:	01002034 	movhi	r4,128
  800c30:	21127a04 	addi	r4,r4,18920
  800c34:	08042440 	call	804244 <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;
  800c38:	04400044 	movi	r17,1
  800c3c:	00000606 	br	800c58 <parse_request+0x2e8>
			debug = (int) strtol(tokens[2], 0, 16);
			throw_code(&"DEBUG", 0);
			matched = 1;
		}

	if (!matched){
  800c40:	88004e1e 	bne	r17,zero,800d7c <parse_request+0x40c>
		throw_code(&"ERR", 2);
  800c44:	01400084 	movi	r5,2
  800c48:	01002034 	movhi	r4,128
  800c4c:	21125204 	addi	r4,r4,18760
  800c50:	080095c0 	call	80095c <throw_code>
  800c54:	00004906 	br	800d7c <parse_request+0x40c>
	}


	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){
  800c58:	01402034 	movhi	r5,128
  800c5c:	29527e04 	addi	r5,r5,18936
  800c60:	8009883a 	mov	r4,r16
  800c64:	0802e580 	call	802e58 <strcmp>
  800c68:	1000111e 	bne	r2,zero,800cb0 <parse_request+0x340>

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800c6c:	d120b617 	ldw	r4,-32040(gp)
  800c70:	01801904 	movi	r6,100
  800c74:	000b883a 	mov	r5,zero
  800c78:	0802a480 	call	802a48 <memset>
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800c7c:	d9400217 	ldw	r5,8(sp)
  800c80:	d120b617 	ldw	r4,-32040(gp)
  800c84:	01801904 	movi	r6,100
	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
  800c88:	04400044 	movi	r17,1
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800c8c:	0802ed80 	call	802ed8 <strncpy>
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800c90:	d120b617 	ldw	r4,-32040(gp)

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_offset = 0;
  800c94:	d020b315 	stw	zero,-32052(gp)
		disp_length = strlen(disp_buf);
  800c98:	0802ebc0 	call	802ebc <strlen>

		throw_code(&"HEXTEXT", 0);
  800c9c:	01002034 	movhi	r4,128
  800ca0:	000b883a 	mov	r5,zero
  800ca4:	21127e04 	addi	r4,r4,18936
		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800ca8:	d0a0b215 	stw	r2,-32056(gp)

		throw_code(&"HEXTEXT", 0);
  800cac:	080095c0 	call	80095c <throw_code>
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){
  800cb0:	01402034 	movhi	r5,128
  800cb4:	29528004 	addi	r5,r5,18944
  800cb8:	8009883a 	mov	r4,r16
  800cbc:	0802e580 	call	802e58 <strcmp>
  800cc0:	10000d1e 	bne	r2,zero,800cf8 <parse_request+0x388>

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800cc4:	d9000217 	ldw	r4,8(sp)
  800cc8:	01800404 	movi	r6,16
  800ccc:	000b883a 	mov	r5,zero
  800cd0:	08032c40 	call	8032c4 <strtol>
		IOWR(LED_BASE, 0, led_val);
  800cd4:	00c04034 	movhi	r3,256
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800cd8:	d0a0b115 	stw	r2,-32060(gp)
		IOWR(LED_BASE, 0, led_val);
  800cdc:	18c47804 	addi	r3,r3,4576
  800ce0:	18800035 	stwio	r2,0(r3)
		throw_code(&"LEDWRITE", 0);
  800ce4:	01002034 	movhi	r4,128
  800ce8:	000b883a 	mov	r5,zero
  800cec:	21128004 	addi	r4,r4,18944
  800cf0:	080095c0 	call	80095c <throw_code>
		matched = 1;
  800cf4:	04400044 	movi	r17,1

	}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){
  800cf8:	01402034 	movhi	r5,128
  800cfc:	29528304 	addi	r5,r5,18956
  800d00:	8009883a 	mov	r4,r16
  800d04:	0802e580 	call	802e58 <strcmp>
  800d08:	10000e1e 	bne	r2,zero,800d44 <parse_request+0x3d4>

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
  800d0c:	d120bc17 	ldw	r4,-32016(gp)
  800d10:	01801904 	movi	r6,100
  800d14:	000b883a 	mov	r5,zero
  800d18:	0802a480 	call	802a48 <memset>
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  800d1c:	d9400217 	ldw	r5,8(sp)
  800d20:	d120bc17 	ldw	r4,-32016(gp)
  800d24:	01801904 	movi	r6,100
		led_offset = 0;
		throw_code(&"LEDWRITE", 0);
		matched = 1;
  800d28:	04400044 	movi	r17,1
	}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  800d2c:	0802ed80 	call	802ed8 <strncpy>
		led_offset = 0;
		throw_code(&"LEDWRITE", 0);
  800d30:	01002034 	movhi	r4,128
  800d34:	000b883a 	mov	r5,zero
  800d38:	21128004 	addi	r4,r4,18944
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
		led_offset = 0;
  800d3c:	d0200015 	stw	zero,-32768(gp)
		throw_code(&"LEDWRITE", 0);
  800d40:	080095c0 	call	80095c <throw_code>
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){
  800d44:	01402034 	movhi	r5,128
  800d48:	29528604 	addi	r5,r5,18968
  800d4c:	8009883a 	mov	r4,r16
  800d50:	0802e580 	call	802e58 <strcmp>
  800d54:	103fba1e 	bne	r2,zero,800c40 <__alt_data_end+0xff800c40>

			debug = (int) strtol(tokens[2], 0, 16);
  800d58:	d9000217 	ldw	r4,8(sp)
  800d5c:	000b883a 	mov	r5,zero
  800d60:	01800404 	movi	r6,16
  800d64:	08032c40 	call	8032c4 <strtol>
			throw_code(&"DEBUG", 0);
  800d68:	01002034 	movhi	r4,128
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){

			debug = (int) strtol(tokens[2], 0, 16);
  800d6c:	d0a0b015 	stw	r2,-32064(gp)
			throw_code(&"DEBUG", 0);
  800d70:	000b883a 	mov	r5,zero
  800d74:	21128604 	addi	r4,r4,18968
  800d78:	003fb506 	br	800c50 <__alt_data_end+0xff800c50>
	if (!matched){
		throw_code(&"ERR", 2);
		matched = 1;
	}

}
  800d7c:	dfc01117 	ldw	ra,68(sp)
  800d80:	dd401017 	ldw	r21,64(sp)
  800d84:	dd000f17 	ldw	r20,60(sp)
  800d88:	dcc00e17 	ldw	r19,56(sp)
  800d8c:	dc800d17 	ldw	r18,52(sp)
  800d90:	dc400c17 	ldw	r17,48(sp)
  800d94:	dc000b17 	ldw	r16,44(sp)
  800d98:	dec01204 	addi	sp,sp,72
  800d9c:	f800283a 	ret

00800da0 <main>:

//HEX write
//---------------------------------------------------------------


int main() {
  800da0:	defff404 	addi	sp,sp,-48

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800da4:	01001904 	movi	r4,100

//HEX write
//---------------------------------------------------------------


int main() {
  800da8:	dfc00b15 	stw	ra,44(sp)
  800dac:	dc400a15 	stw	r17,40(sp)
  800db0:	dc000915 	stw	r16,36(sp)

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800db4:	0802a200 	call	802a20 <malloc>
	strcpy(disp_buf, "______");
  800db8:	01402034 	movhi	r5,128
  800dbc:	29528c04 	addi	r5,r5,18992
  800dc0:	1009883a 	mov	r4,r2


int main() {

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800dc4:	d0a0b615 	stw	r2,-32040(gp)
	strcpy(disp_buf, "______");
  800dc8:	0802e900 	call	802e90 <strcpy>
	clr_disp();
  800dcc:	08005a40 	call	8005a4 <clr_disp>
	disp_timer_init(disp_timer_isr);
  800dd0:	01002034 	movhi	r4,128
  800dd4:	21015b04 	addi	r4,r4,1388
  800dd8:	08006f80 	call	8006f8 <disp_timer_init>
	disp_length = 6;
  800ddc:	00800184 	movi	r2,6

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800de0:	01001904 	movi	r4,100
	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
	strcpy(disp_buf, "______");
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;
  800de4:	d0a0b215 	stw	r2,-32056(gp)

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800de8:	0802a200 	call	802a20 <malloc>
	led_timer_init(led_timer_isr);
  800dec:	01002034 	movhi	r4,128
  800df0:	21006f04 	addi	r4,r4,444
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800df4:	d0a0bc15 	stw	r2,-32016(gp)
	led_timer_init(led_timer_isr);
  800df8:	08007680 	call	800768 <led_timer_init>
	led_offset = -1;
  800dfc:	00bfffc4 	movi	r2,-1
  800e00:	d0a00015 	stw	r2,-32768(gp)
	IOWR(LED_BASE, 0, 0);
  800e04:	00804034 	movhi	r2,256
  800e08:	10847804 	addi	r2,r2,4576
  800e0c:	10000035 	stwio	zero,0(r2)


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800e10:	01001004 	movi	r4,64
  800e14:	0802a200 	call	802a20 <malloc>

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800e18:	01000204 	movi	r4,8
	led_offset = -1;
	IOWR(LED_BASE, 0, 0);


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800e1c:	d0a0b415 	stw	r2,-32048(gp)

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800e20:	04002034 	movhi	r16,128
  800e24:	0802a200 	call	802a20 <malloc>
  800e28:	8414e304 	addi	r16,r16,21388
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800e2c:	01000204 	movi	r4,8

	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800e30:	80800015 	stw	r2,0(r16)
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800e34:	0802a200 	call	802a20 <malloc>
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  800e38:	01000204 	movi	r4,8
	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800e3c:	80800115 	stw	r2,4(r16)
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  800e40:	0802a200 	call	802a20 <malloc>
  800e44:	80800215 	stw	r2,8(r16)

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800e48:	00800744 	movi	r2,29
  800e4c:	d8800615 	stw	r2,24(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800e50:	d8800315 	stw	r2,12(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800e54:	d8800015 	stw	r2,0(sp)
	x_buf = &x;
  800e58:	d8800604 	addi	r2,sp,24
  800e5c:	d0a0b515 	stw	r2,-32044(gp)
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800e60:	01001d04 	movi	r4,116

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
  800e64:	d8800304 	addi	r2,sp,12
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800e68:	d8000715 	stw	zero,28(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800e6c:	d8000415 	stw	zero,16(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800e70:	d8000115 	stw	zero,4(sp)
	x_buf = &x;
	y_buf = &y;
  800e74:	d0a0b715 	stw	r2,-32036(gp)
	z_buf = &z;
  800e78:	d6e0b815 	stw	sp,-32032(gp)

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800e7c:	0802a200 	call	802a20 <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800e80:	01001d04 	movi	r4,116
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800e84:	1021883a 	mov	r16,r2
  800e88:	d8800815 	stw	r2,32(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800e8c:	0802a200 	call	802a20 <malloc>
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800e90:	01801d04 	movi	r6,116
  800e94:	000b883a 	mov	r5,zero
  800e98:	1009883a 	mov	r4,r2
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800e9c:	d8800515 	stw	r2,20(sp)
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800ea0:	0802a480 	call	802a48 <memset>
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800ea4:	01001d04 	movi	r4,116
  800ea8:	0802a200 	call	802a20 <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800eac:	01801d04 	movi	r6,116
  800eb0:	000b883a 	mov	r5,zero
  800eb4:	8009883a 	mov	r4,r16

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800eb8:	d8800215 	stw	r2,8(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800ebc:	0802a480 	call	802a48 <memset>

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  800ec0:	01001904 	movi	r4,100
  800ec4:	0802a200 	call	802a20 <malloc>
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800ec8:	01801904 	movi	r6,100
  800ecc:	000b883a 	mov	r5,zero
  800ed0:	1009883a 	mov	r4,r2
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  800ed4:	d0a0b615 	stw	r2,-32040(gp)
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800ed8:	0802a480 	call	802a48 <memset>

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  800edc:	01002034 	movhi	r4,128
  800ee0:	21128e04 	addi	r4,r4,19000
  800ee4:	08046180 	call	804618 <alt_up_accelerometer_spi_open_dev>

	//to_hex(16,3,hexbuffers[0]);


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  800ee8:	01002034 	movhi	r4,128
  800eec:	21009504 	addi	r4,r4,596
	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  800ef0:	d0a0bb15 	stw	r2,-32020(gp)

	//to_hex(16,3,hexbuffers[0]);


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  800ef4:	08006880 	call	800688 <acc_timer_init>
	alt_timestamp_start();
  800ef8:	08045800 	call	804580 <alt_timestamp_start>

	//Command response loop
	while(1){
		read_request(cmdbuffer);
  800efc:	d120b417 	ldw	r4,-32048(gp)
  800f00:	08005f40 	call	8005f4 <read_request>
		parse_request(cmdbuffer);
  800f04:	d120b417 	ldw	r4,-32048(gp)
  800f08:	08009700 	call	800970 <parse_request>

		//Request response timing: first char received to last char sent
		if (debug){
  800f0c:	d0a0b017 	ldw	r2,-32064(gp)
  800f10:	103ffa26 	beq	r2,zero,800efc <__alt_data_end+0xff800efc>
			printf("Response time (us) : %i \n",(alt_timestamp()-latency)/(alt_timestamp_freq()/1000000));
  800f14:	08045c40 	call	8045c4 <alt_timestamp>
  800f18:	d460b917 	ldw	r17,-32028(gp)
  800f1c:	d120ba17 	ldw	r4,-32024(gp)
  800f20:	1463c83a 	sub	r17,r2,r17
  800f24:	1907c83a 	sub	r3,r3,r4
  800f28:	1445803a 	cmpltu	r2,r2,r17
  800f2c:	18a1c83a 	sub	r16,r3,r2
  800f30:	08046100 	call	804610 <alt_timestamp_freq>
  800f34:	014003f4 	movhi	r5,15
  800f38:	29509004 	addi	r5,r5,16960
  800f3c:	1009883a 	mov	r4,r2
  800f40:	08016640 	call	801664 <__udivsi3>
  800f44:	8809883a 	mov	r4,r17
  800f48:	800b883a 	mov	r5,r16
  800f4c:	100d883a 	mov	r6,r2
  800f50:	000f883a 	mov	r7,zero
  800f54:	0800f700 	call	800f70 <__udivdi3>
  800f58:	01002034 	movhi	r4,128
  800f5c:	100b883a 	mov	r5,r2
  800f60:	180d883a 	mov	r6,r3
  800f64:	21129404 	addi	r4,r4,19024
  800f68:	0802ce00 	call	802ce0 <printf>
  800f6c:	003fe306 	br	800efc <__alt_data_end+0xff800efc>

00800f70 <__udivdi3>:
  800f70:	defff404 	addi	sp,sp,-48
  800f74:	dcc00515 	stw	r19,20(sp)
  800f78:	dc000215 	stw	r16,8(sp)
  800f7c:	dfc00b15 	stw	ra,44(sp)
  800f80:	df000a15 	stw	fp,40(sp)
  800f84:	ddc00915 	stw	r23,36(sp)
  800f88:	dd800815 	stw	r22,32(sp)
  800f8c:	dd400715 	stw	r21,28(sp)
  800f90:	dd000615 	stw	r20,24(sp)
  800f94:	dc800415 	stw	r18,16(sp)
  800f98:	dc400315 	stw	r17,12(sp)
  800f9c:	2027883a 	mov	r19,r4
  800fa0:	2821883a 	mov	r16,r5
  800fa4:	3800461e 	bne	r7,zero,8010c0 <__udivdi3+0x150>
  800fa8:	3023883a 	mov	r17,r6
  800fac:	2025883a 	mov	r18,r4
  800fb0:	2980572e 	bgeu	r5,r6,801110 <__udivdi3+0x1a0>
  800fb4:	00bfffd4 	movui	r2,65535
  800fb8:	282d883a 	mov	r22,r5
  800fbc:	1180b236 	bltu	r2,r6,801288 <__udivdi3+0x318>
  800fc0:	00803fc4 	movi	r2,255
  800fc4:	1185803a 	cmpltu	r2,r2,r6
  800fc8:	100490fa 	slli	r2,r2,3
  800fcc:	3086d83a 	srl	r3,r6,r2
  800fd0:	01002034 	movhi	r4,128
  800fd4:	2112a5c4 	addi	r4,r4,19095
  800fd8:	20c7883a 	add	r3,r4,r3
  800fdc:	18c00003 	ldbu	r3,0(r3)
  800fe0:	1885883a 	add	r2,r3,r2
  800fe4:	00c00804 	movi	r3,32
  800fe8:	1887c83a 	sub	r3,r3,r2
  800fec:	18000526 	beq	r3,zero,801004 <__udivdi3+0x94>
  800ff0:	80e0983a 	sll	r16,r16,r3
  800ff4:	9884d83a 	srl	r2,r19,r2
  800ff8:	30e2983a 	sll	r17,r6,r3
  800ffc:	98e4983a 	sll	r18,r19,r3
  801000:	142cb03a 	or	r22,r2,r16
  801004:	882ad43a 	srli	r21,r17,16
  801008:	b009883a 	mov	r4,r22
  80100c:	8d3fffcc 	andi	r20,r17,65535
  801010:	a80b883a 	mov	r5,r21
  801014:	08016c80 	call	8016c8 <__umodsi3>
  801018:	b009883a 	mov	r4,r22
  80101c:	a80b883a 	mov	r5,r21
  801020:	1027883a 	mov	r19,r2
  801024:	08016640 	call	801664 <__udivsi3>
  801028:	100b883a 	mov	r5,r2
  80102c:	a009883a 	mov	r4,r20
  801030:	102d883a 	mov	r22,r2
  801034:	08017200 	call	801720 <__mulsi3>
  801038:	9826943a 	slli	r19,r19,16
  80103c:	9006d43a 	srli	r3,r18,16
  801040:	1cc6b03a 	or	r3,r3,r19
  801044:	1880052e 	bgeu	r3,r2,80105c <__udivdi3+0xec>
  801048:	1c47883a 	add	r3,r3,r17
  80104c:	b13fffc4 	addi	r4,r22,-1
  801050:	1c400136 	bltu	r3,r17,801058 <__udivdi3+0xe8>
  801054:	18814236 	bltu	r3,r2,801560 <__udivdi3+0x5f0>
  801058:	202d883a 	mov	r22,r4
  80105c:	18a1c83a 	sub	r16,r3,r2
  801060:	8009883a 	mov	r4,r16
  801064:	a80b883a 	mov	r5,r21
  801068:	08016c80 	call	8016c8 <__umodsi3>
  80106c:	1027883a 	mov	r19,r2
  801070:	8009883a 	mov	r4,r16
  801074:	a80b883a 	mov	r5,r21
  801078:	9826943a 	slli	r19,r19,16
  80107c:	08016640 	call	801664 <__udivsi3>
  801080:	100b883a 	mov	r5,r2
  801084:	a009883a 	mov	r4,r20
  801088:	94bfffcc 	andi	r18,r18,65535
  80108c:	1021883a 	mov	r16,r2
  801090:	94e4b03a 	or	r18,r18,r19
  801094:	08017200 	call	801720 <__mulsi3>
  801098:	9080052e 	bgeu	r18,r2,8010b0 <__udivdi3+0x140>
  80109c:	8ca5883a 	add	r18,r17,r18
  8010a0:	80ffffc4 	addi	r3,r16,-1
  8010a4:	94410c36 	bltu	r18,r17,8014d8 <__udivdi3+0x568>
  8010a8:	90810b2e 	bgeu	r18,r2,8014d8 <__udivdi3+0x568>
  8010ac:	843fff84 	addi	r16,r16,-2
  8010b0:	b004943a 	slli	r2,r22,16
  8010b4:	0007883a 	mov	r3,zero
  8010b8:	1404b03a 	or	r2,r2,r16
  8010bc:	00005e06 	br	801238 <__udivdi3+0x2c8>
  8010c0:	29c05b36 	bltu	r5,r7,801230 <__udivdi3+0x2c0>
  8010c4:	00bfffd4 	movui	r2,65535
  8010c8:	11c0672e 	bgeu	r2,r7,801268 <__udivdi3+0x2f8>
  8010cc:	00804034 	movhi	r2,256
  8010d0:	10bfffc4 	addi	r2,r2,-1
  8010d4:	11c10a36 	bltu	r2,r7,801500 <__udivdi3+0x590>
  8010d8:	00800404 	movi	r2,16
  8010dc:	3886d83a 	srl	r3,r7,r2
  8010e0:	01002034 	movhi	r4,128
  8010e4:	2112a5c4 	addi	r4,r4,19095
  8010e8:	20c7883a 	add	r3,r4,r3
  8010ec:	18c00003 	ldbu	r3,0(r3)
  8010f0:	05c00804 	movi	r23,32
  8010f4:	1885883a 	add	r2,r3,r2
  8010f8:	b8afc83a 	sub	r23,r23,r2
  8010fc:	b800671e 	bne	r23,zero,80129c <__udivdi3+0x32c>
  801100:	3c010536 	bltu	r7,r16,801518 <__udivdi3+0x5a8>
  801104:	9985403a 	cmpgeu	r2,r19,r6
  801108:	0007883a 	mov	r3,zero
  80110c:	00004a06 	br	801238 <__udivdi3+0x2c8>
  801110:	3000041e 	bne	r6,zero,801124 <__udivdi3+0x1b4>
  801114:	000b883a 	mov	r5,zero
  801118:	01000044 	movi	r4,1
  80111c:	08016640 	call	801664 <__udivsi3>
  801120:	1023883a 	mov	r17,r2
  801124:	00bfffd4 	movui	r2,65535
  801128:	1440532e 	bgeu	r2,r17,801278 <__udivdi3+0x308>
  80112c:	00804034 	movhi	r2,256
  801130:	10bfffc4 	addi	r2,r2,-1
  801134:	1440f436 	bltu	r2,r17,801508 <__udivdi3+0x598>
  801138:	00800404 	movi	r2,16
  80113c:	8886d83a 	srl	r3,r17,r2
  801140:	01002034 	movhi	r4,128
  801144:	2112a5c4 	addi	r4,r4,19095
  801148:	20c7883a 	add	r3,r4,r3
  80114c:	18c00003 	ldbu	r3,0(r3)
  801150:	1885883a 	add	r2,r3,r2
  801154:	00c00804 	movi	r3,32
  801158:	1887c83a 	sub	r3,r3,r2
  80115c:	1800a51e 	bne	r3,zero,8013f4 <__udivdi3+0x484>
  801160:	882ad43a 	srli	r21,r17,16
  801164:	8461c83a 	sub	r16,r16,r17
  801168:	8d3fffcc 	andi	r20,r17,65535
  80116c:	00c00044 	movi	r3,1
  801170:	a80b883a 	mov	r5,r21
  801174:	8009883a 	mov	r4,r16
  801178:	d8c00115 	stw	r3,4(sp)
  80117c:	08016c80 	call	8016c8 <__umodsi3>
  801180:	a80b883a 	mov	r5,r21
  801184:	8009883a 	mov	r4,r16
  801188:	1027883a 	mov	r19,r2
  80118c:	08016640 	call	801664 <__udivsi3>
  801190:	a00b883a 	mov	r5,r20
  801194:	1009883a 	mov	r4,r2
  801198:	102d883a 	mov	r22,r2
  80119c:	08017200 	call	801720 <__mulsi3>
  8011a0:	9826943a 	slli	r19,r19,16
  8011a4:	900ed43a 	srli	r7,r18,16
  8011a8:	d8c00117 	ldw	r3,4(sp)
  8011ac:	3cceb03a 	or	r7,r7,r19
  8011b0:	3880052e 	bgeu	r7,r2,8011c8 <__udivdi3+0x258>
  8011b4:	3c4f883a 	add	r7,r7,r17
  8011b8:	b13fffc4 	addi	r4,r22,-1
  8011bc:	3c400136 	bltu	r7,r17,8011c4 <__udivdi3+0x254>
  8011c0:	3880e436 	bltu	r7,r2,801554 <__udivdi3+0x5e4>
  8011c4:	202d883a 	mov	r22,r4
  8011c8:	38a1c83a 	sub	r16,r7,r2
  8011cc:	8009883a 	mov	r4,r16
  8011d0:	a80b883a 	mov	r5,r21
  8011d4:	d8c00115 	stw	r3,4(sp)
  8011d8:	08016c80 	call	8016c8 <__umodsi3>
  8011dc:	1027883a 	mov	r19,r2
  8011e0:	8009883a 	mov	r4,r16
  8011e4:	a80b883a 	mov	r5,r21
  8011e8:	9826943a 	slli	r19,r19,16
  8011ec:	08016640 	call	801664 <__udivsi3>
  8011f0:	a00b883a 	mov	r5,r20
  8011f4:	1009883a 	mov	r4,r2
  8011f8:	94bfffcc 	andi	r18,r18,65535
  8011fc:	1021883a 	mov	r16,r2
  801200:	94e4b03a 	or	r18,r18,r19
  801204:	08017200 	call	801720 <__mulsi3>
  801208:	d8c00117 	ldw	r3,4(sp)
  80120c:	9080052e 	bgeu	r18,r2,801224 <__udivdi3+0x2b4>
  801210:	8ca5883a 	add	r18,r17,r18
  801214:	813fffc4 	addi	r4,r16,-1
  801218:	9440ad36 	bltu	r18,r17,8014d0 <__udivdi3+0x560>
  80121c:	9080ac2e 	bgeu	r18,r2,8014d0 <__udivdi3+0x560>
  801220:	843fff84 	addi	r16,r16,-2
  801224:	b004943a 	slli	r2,r22,16
  801228:	1404b03a 	or	r2,r2,r16
  80122c:	00000206 	br	801238 <__udivdi3+0x2c8>
  801230:	0007883a 	mov	r3,zero
  801234:	0005883a 	mov	r2,zero
  801238:	dfc00b17 	ldw	ra,44(sp)
  80123c:	df000a17 	ldw	fp,40(sp)
  801240:	ddc00917 	ldw	r23,36(sp)
  801244:	dd800817 	ldw	r22,32(sp)
  801248:	dd400717 	ldw	r21,28(sp)
  80124c:	dd000617 	ldw	r20,24(sp)
  801250:	dcc00517 	ldw	r19,20(sp)
  801254:	dc800417 	ldw	r18,16(sp)
  801258:	dc400317 	ldw	r17,12(sp)
  80125c:	dc000217 	ldw	r16,8(sp)
  801260:	dec00c04 	addi	sp,sp,48
  801264:	f800283a 	ret
  801268:	00803fc4 	movi	r2,255
  80126c:	11c5803a 	cmpltu	r2,r2,r7
  801270:	100490fa 	slli	r2,r2,3
  801274:	003f9906 	br	8010dc <__alt_data_end+0xff8010dc>
  801278:	00803fc4 	movi	r2,255
  80127c:	1445803a 	cmpltu	r2,r2,r17
  801280:	100490fa 	slli	r2,r2,3
  801284:	003fad06 	br	80113c <__alt_data_end+0xff80113c>
  801288:	00804034 	movhi	r2,256
  80128c:	10bfffc4 	addi	r2,r2,-1
  801290:	11809f36 	bltu	r2,r6,801510 <__udivdi3+0x5a0>
  801294:	00800404 	movi	r2,16
  801298:	003f4c06 	br	800fcc <__alt_data_end+0xff800fcc>
  80129c:	3dce983a 	sll	r7,r7,r23
  8012a0:	30b8d83a 	srl	fp,r6,r2
  8012a4:	80a2d83a 	srl	r17,r16,r2
  8012a8:	35cc983a 	sll	r6,r6,r23
  8012ac:	3f38b03a 	or	fp,r7,fp
  8012b0:	e024d43a 	srli	r18,fp,16
  8012b4:	9884d83a 	srl	r2,r19,r2
  8012b8:	85e0983a 	sll	r16,r16,r23
  8012bc:	8809883a 	mov	r4,r17
  8012c0:	900b883a 	mov	r5,r18
  8012c4:	d9800015 	stw	r6,0(sp)
  8012c8:	1420b03a 	or	r16,r2,r16
  8012cc:	08016c80 	call	8016c8 <__umodsi3>
  8012d0:	900b883a 	mov	r5,r18
  8012d4:	8809883a 	mov	r4,r17
  8012d8:	1029883a 	mov	r20,r2
  8012dc:	e5bfffcc 	andi	r22,fp,65535
  8012e0:	08016640 	call	801664 <__udivsi3>
  8012e4:	100b883a 	mov	r5,r2
  8012e8:	b009883a 	mov	r4,r22
  8012ec:	102b883a 	mov	r21,r2
  8012f0:	08017200 	call	801720 <__mulsi3>
  8012f4:	a028943a 	slli	r20,r20,16
  8012f8:	8006d43a 	srli	r3,r16,16
  8012fc:	1d06b03a 	or	r3,r3,r20
  801300:	1880042e 	bgeu	r3,r2,801314 <__udivdi3+0x3a4>
  801304:	1f07883a 	add	r3,r3,fp
  801308:	a93fffc4 	addi	r4,r21,-1
  80130c:	1f00892e 	bgeu	r3,fp,801534 <__udivdi3+0x5c4>
  801310:	202b883a 	mov	r21,r4
  801314:	18a3c83a 	sub	r17,r3,r2
  801318:	8809883a 	mov	r4,r17
  80131c:	900b883a 	mov	r5,r18
  801320:	08016c80 	call	8016c8 <__umodsi3>
  801324:	1029883a 	mov	r20,r2
  801328:	8809883a 	mov	r4,r17
  80132c:	900b883a 	mov	r5,r18
  801330:	a028943a 	slli	r20,r20,16
  801334:	08016640 	call	801664 <__udivsi3>
  801338:	100b883a 	mov	r5,r2
  80133c:	b009883a 	mov	r4,r22
  801340:	843fffcc 	andi	r16,r16,65535
  801344:	1023883a 	mov	r17,r2
  801348:	8520b03a 	or	r16,r16,r20
  80134c:	08017200 	call	801720 <__mulsi3>
  801350:	8080042e 	bgeu	r16,r2,801364 <__udivdi3+0x3f4>
  801354:	8721883a 	add	r16,r16,fp
  801358:	88ffffc4 	addi	r3,r17,-1
  80135c:	8700712e 	bgeu	r16,fp,801524 <__udivdi3+0x5b4>
  801360:	1823883a 	mov	r17,r3
  801364:	a80e943a 	slli	r7,r21,16
  801368:	d8c00017 	ldw	r3,0(sp)
  80136c:	80a1c83a 	sub	r16,r16,r2
  801370:	3c64b03a 	or	r18,r7,r17
  801374:	1d3fffcc 	andi	r20,r3,65535
  801378:	9022d43a 	srli	r17,r18,16
  80137c:	95bfffcc 	andi	r22,r18,65535
  801380:	a00b883a 	mov	r5,r20
  801384:	b009883a 	mov	r4,r22
  801388:	182ad43a 	srli	r21,r3,16
  80138c:	08017200 	call	801720 <__mulsi3>
  801390:	a00b883a 	mov	r5,r20
  801394:	8809883a 	mov	r4,r17
  801398:	1039883a 	mov	fp,r2
  80139c:	08017200 	call	801720 <__mulsi3>
  8013a0:	8809883a 	mov	r4,r17
  8013a4:	a80b883a 	mov	r5,r21
  8013a8:	1029883a 	mov	r20,r2
  8013ac:	08017200 	call	801720 <__mulsi3>
  8013b0:	a80b883a 	mov	r5,r21
  8013b4:	b009883a 	mov	r4,r22
  8013b8:	1023883a 	mov	r17,r2
  8013bc:	08017200 	call	801720 <__mulsi3>
  8013c0:	e006d43a 	srli	r3,fp,16
  8013c4:	1505883a 	add	r2,r2,r20
  8013c8:	1887883a 	add	r3,r3,r2
  8013cc:	1d00022e 	bgeu	r3,r20,8013d8 <__udivdi3+0x468>
  8013d0:	00800074 	movhi	r2,1
  8013d4:	88a3883a 	add	r17,r17,r2
  8013d8:	1804d43a 	srli	r2,r3,16
  8013dc:	1463883a 	add	r17,r2,r17
  8013e0:	84404436 	bltu	r16,r17,8014f4 <__udivdi3+0x584>
  8013e4:	84403e26 	beq	r16,r17,8014e0 <__udivdi3+0x570>
  8013e8:	9005883a 	mov	r2,r18
  8013ec:	0007883a 	mov	r3,zero
  8013f0:	003f9106 	br	801238 <__alt_data_end+0xff801238>
  8013f4:	88e2983a 	sll	r17,r17,r3
  8013f8:	80aed83a 	srl	r23,r16,r2
  8013fc:	80e0983a 	sll	r16,r16,r3
  801400:	882ad43a 	srli	r21,r17,16
  801404:	9884d83a 	srl	r2,r19,r2
  801408:	b809883a 	mov	r4,r23
  80140c:	a80b883a 	mov	r5,r21
  801410:	98e4983a 	sll	r18,r19,r3
  801414:	142cb03a 	or	r22,r2,r16
  801418:	08016c80 	call	8016c8 <__umodsi3>
  80141c:	b809883a 	mov	r4,r23
  801420:	a80b883a 	mov	r5,r21
  801424:	1027883a 	mov	r19,r2
  801428:	8d3fffcc 	andi	r20,r17,65535
  80142c:	08016640 	call	801664 <__udivsi3>
  801430:	a009883a 	mov	r4,r20
  801434:	100b883a 	mov	r5,r2
  801438:	102f883a 	mov	r23,r2
  80143c:	08017200 	call	801720 <__mulsi3>
  801440:	9826943a 	slli	r19,r19,16
  801444:	b008d43a 	srli	r4,r22,16
  801448:	24c8b03a 	or	r4,r4,r19
  80144c:	2080062e 	bgeu	r4,r2,801468 <__udivdi3+0x4f8>
  801450:	2449883a 	add	r4,r4,r17
  801454:	b8ffffc4 	addi	r3,r23,-1
  801458:	24403c36 	bltu	r4,r17,80154c <__udivdi3+0x5dc>
  80145c:	20803b2e 	bgeu	r4,r2,80154c <__udivdi3+0x5dc>
  801460:	bdffff84 	addi	r23,r23,-2
  801464:	2449883a 	add	r4,r4,r17
  801468:	20a1c83a 	sub	r16,r4,r2
  80146c:	a80b883a 	mov	r5,r21
  801470:	8009883a 	mov	r4,r16
  801474:	08016c80 	call	8016c8 <__umodsi3>
  801478:	a80b883a 	mov	r5,r21
  80147c:	8009883a 	mov	r4,r16
  801480:	1027883a 	mov	r19,r2
  801484:	08016640 	call	801664 <__udivsi3>
  801488:	a009883a 	mov	r4,r20
  80148c:	100b883a 	mov	r5,r2
  801490:	9826943a 	slli	r19,r19,16
  801494:	1039883a 	mov	fp,r2
  801498:	08017200 	call	801720 <__mulsi3>
  80149c:	b13fffcc 	andi	r4,r22,65535
  8014a0:	24c8b03a 	or	r4,r4,r19
  8014a4:	2080062e 	bgeu	r4,r2,8014c0 <__udivdi3+0x550>
  8014a8:	2449883a 	add	r4,r4,r17
  8014ac:	e0ffffc4 	addi	r3,fp,-1
  8014b0:	24402436 	bltu	r4,r17,801544 <__udivdi3+0x5d4>
  8014b4:	2080232e 	bgeu	r4,r2,801544 <__udivdi3+0x5d4>
  8014b8:	e73fff84 	addi	fp,fp,-2
  8014bc:	2449883a 	add	r4,r4,r17
  8014c0:	b82e943a 	slli	r23,r23,16
  8014c4:	20a1c83a 	sub	r16,r4,r2
  8014c8:	bf06b03a 	or	r3,r23,fp
  8014cc:	003f2806 	br	801170 <__alt_data_end+0xff801170>
  8014d0:	2021883a 	mov	r16,r4
  8014d4:	003f5306 	br	801224 <__alt_data_end+0xff801224>
  8014d8:	1821883a 	mov	r16,r3
  8014dc:	003ef406 	br	8010b0 <__alt_data_end+0xff8010b0>
  8014e0:	1806943a 	slli	r3,r3,16
  8014e4:	9de6983a 	sll	r19,r19,r23
  8014e8:	e73fffcc 	andi	fp,fp,65535
  8014ec:	1f07883a 	add	r3,r3,fp
  8014f0:	98ffbd2e 	bgeu	r19,r3,8013e8 <__alt_data_end+0xff8013e8>
  8014f4:	90bfffc4 	addi	r2,r18,-1
  8014f8:	0007883a 	mov	r3,zero
  8014fc:	003f4e06 	br	801238 <__alt_data_end+0xff801238>
  801500:	00800604 	movi	r2,24
  801504:	003ef506 	br	8010dc <__alt_data_end+0xff8010dc>
  801508:	00800604 	movi	r2,24
  80150c:	003f0b06 	br	80113c <__alt_data_end+0xff80113c>
  801510:	00800604 	movi	r2,24
  801514:	003ead06 	br	800fcc <__alt_data_end+0xff800fcc>
  801518:	0007883a 	mov	r3,zero
  80151c:	00800044 	movi	r2,1
  801520:	003f4506 	br	801238 <__alt_data_end+0xff801238>
  801524:	80bf8e2e 	bgeu	r16,r2,801360 <__alt_data_end+0xff801360>
  801528:	8c7fff84 	addi	r17,r17,-2
  80152c:	8721883a 	add	r16,r16,fp
  801530:	003f8c06 	br	801364 <__alt_data_end+0xff801364>
  801534:	18bf762e 	bgeu	r3,r2,801310 <__alt_data_end+0xff801310>
  801538:	ad7fff84 	addi	r21,r21,-2
  80153c:	1f07883a 	add	r3,r3,fp
  801540:	003f7406 	br	801314 <__alt_data_end+0xff801314>
  801544:	1839883a 	mov	fp,r3
  801548:	003fdd06 	br	8014c0 <__alt_data_end+0xff8014c0>
  80154c:	182f883a 	mov	r23,r3
  801550:	003fc506 	br	801468 <__alt_data_end+0xff801468>
  801554:	b5bfff84 	addi	r22,r22,-2
  801558:	3c4f883a 	add	r7,r7,r17
  80155c:	003f1a06 	br	8011c8 <__alt_data_end+0xff8011c8>
  801560:	b5bfff84 	addi	r22,r22,-2
  801564:	1c47883a 	add	r3,r3,r17
  801568:	003ebc06 	br	80105c <__alt_data_end+0xff80105c>

0080156c <__divsi3>:
  80156c:	20001b16 	blt	r4,zero,8015dc <__divsi3+0x70>
  801570:	000f883a 	mov	r7,zero
  801574:	28001616 	blt	r5,zero,8015d0 <__divsi3+0x64>
  801578:	200d883a 	mov	r6,r4
  80157c:	29001a2e 	bgeu	r5,r4,8015e8 <__divsi3+0x7c>
  801580:	00800804 	movi	r2,32
  801584:	00c00044 	movi	r3,1
  801588:	00000106 	br	801590 <__divsi3+0x24>
  80158c:	10000d26 	beq	r2,zero,8015c4 <__divsi3+0x58>
  801590:	294b883a 	add	r5,r5,r5
  801594:	10bfffc4 	addi	r2,r2,-1
  801598:	18c7883a 	add	r3,r3,r3
  80159c:	293ffb36 	bltu	r5,r4,80158c <__alt_data_end+0xff80158c>
  8015a0:	0005883a 	mov	r2,zero
  8015a4:	18000726 	beq	r3,zero,8015c4 <__divsi3+0x58>
  8015a8:	0005883a 	mov	r2,zero
  8015ac:	31400236 	bltu	r6,r5,8015b8 <__divsi3+0x4c>
  8015b0:	314dc83a 	sub	r6,r6,r5
  8015b4:	10c4b03a 	or	r2,r2,r3
  8015b8:	1806d07a 	srli	r3,r3,1
  8015bc:	280ad07a 	srli	r5,r5,1
  8015c0:	183ffa1e 	bne	r3,zero,8015ac <__alt_data_end+0xff8015ac>
  8015c4:	38000126 	beq	r7,zero,8015cc <__divsi3+0x60>
  8015c8:	0085c83a 	sub	r2,zero,r2
  8015cc:	f800283a 	ret
  8015d0:	014bc83a 	sub	r5,zero,r5
  8015d4:	39c0005c 	xori	r7,r7,1
  8015d8:	003fe706 	br	801578 <__alt_data_end+0xff801578>
  8015dc:	0109c83a 	sub	r4,zero,r4
  8015e0:	01c00044 	movi	r7,1
  8015e4:	003fe306 	br	801574 <__alt_data_end+0xff801574>
  8015e8:	00c00044 	movi	r3,1
  8015ec:	003fee06 	br	8015a8 <__alt_data_end+0xff8015a8>

008015f0 <__modsi3>:
  8015f0:	20001716 	blt	r4,zero,801650 <__modsi3+0x60>
  8015f4:	000f883a 	mov	r7,zero
  8015f8:	2005883a 	mov	r2,r4
  8015fc:	28001216 	blt	r5,zero,801648 <__modsi3+0x58>
  801600:	2900162e 	bgeu	r5,r4,80165c <__modsi3+0x6c>
  801604:	01800804 	movi	r6,32
  801608:	00c00044 	movi	r3,1
  80160c:	00000106 	br	801614 <__modsi3+0x24>
  801610:	30000a26 	beq	r6,zero,80163c <__modsi3+0x4c>
  801614:	294b883a 	add	r5,r5,r5
  801618:	31bfffc4 	addi	r6,r6,-1
  80161c:	18c7883a 	add	r3,r3,r3
  801620:	293ffb36 	bltu	r5,r4,801610 <__alt_data_end+0xff801610>
  801624:	18000526 	beq	r3,zero,80163c <__modsi3+0x4c>
  801628:	1806d07a 	srli	r3,r3,1
  80162c:	11400136 	bltu	r2,r5,801634 <__modsi3+0x44>
  801630:	1145c83a 	sub	r2,r2,r5
  801634:	280ad07a 	srli	r5,r5,1
  801638:	183ffb1e 	bne	r3,zero,801628 <__alt_data_end+0xff801628>
  80163c:	38000126 	beq	r7,zero,801644 <__modsi3+0x54>
  801640:	0085c83a 	sub	r2,zero,r2
  801644:	f800283a 	ret
  801648:	014bc83a 	sub	r5,zero,r5
  80164c:	003fec06 	br	801600 <__alt_data_end+0xff801600>
  801650:	0109c83a 	sub	r4,zero,r4
  801654:	01c00044 	movi	r7,1
  801658:	003fe706 	br	8015f8 <__alt_data_end+0xff8015f8>
  80165c:	00c00044 	movi	r3,1
  801660:	003ff106 	br	801628 <__alt_data_end+0xff801628>

00801664 <__udivsi3>:
  801664:	200d883a 	mov	r6,r4
  801668:	2900152e 	bgeu	r5,r4,8016c0 <__udivsi3+0x5c>
  80166c:	28001416 	blt	r5,zero,8016c0 <__udivsi3+0x5c>
  801670:	00800804 	movi	r2,32
  801674:	00c00044 	movi	r3,1
  801678:	00000206 	br	801684 <__udivsi3+0x20>
  80167c:	10000e26 	beq	r2,zero,8016b8 <__udivsi3+0x54>
  801680:	28000516 	blt	r5,zero,801698 <__udivsi3+0x34>
  801684:	294b883a 	add	r5,r5,r5
  801688:	10bfffc4 	addi	r2,r2,-1
  80168c:	18c7883a 	add	r3,r3,r3
  801690:	293ffa36 	bltu	r5,r4,80167c <__alt_data_end+0xff80167c>
  801694:	18000826 	beq	r3,zero,8016b8 <__udivsi3+0x54>
  801698:	0005883a 	mov	r2,zero
  80169c:	31400236 	bltu	r6,r5,8016a8 <__udivsi3+0x44>
  8016a0:	314dc83a 	sub	r6,r6,r5
  8016a4:	10c4b03a 	or	r2,r2,r3
  8016a8:	1806d07a 	srli	r3,r3,1
  8016ac:	280ad07a 	srli	r5,r5,1
  8016b0:	183ffa1e 	bne	r3,zero,80169c <__alt_data_end+0xff80169c>
  8016b4:	f800283a 	ret
  8016b8:	0005883a 	mov	r2,zero
  8016bc:	f800283a 	ret
  8016c0:	00c00044 	movi	r3,1
  8016c4:	003ff406 	br	801698 <__alt_data_end+0xff801698>

008016c8 <__umodsi3>:
  8016c8:	2005883a 	mov	r2,r4
  8016cc:	2900122e 	bgeu	r5,r4,801718 <__umodsi3+0x50>
  8016d0:	28001116 	blt	r5,zero,801718 <__umodsi3+0x50>
  8016d4:	01800804 	movi	r6,32
  8016d8:	00c00044 	movi	r3,1
  8016dc:	00000206 	br	8016e8 <__umodsi3+0x20>
  8016e0:	30000c26 	beq	r6,zero,801714 <__umodsi3+0x4c>
  8016e4:	28000516 	blt	r5,zero,8016fc <__umodsi3+0x34>
  8016e8:	294b883a 	add	r5,r5,r5
  8016ec:	31bfffc4 	addi	r6,r6,-1
  8016f0:	18c7883a 	add	r3,r3,r3
  8016f4:	293ffa36 	bltu	r5,r4,8016e0 <__alt_data_end+0xff8016e0>
  8016f8:	18000626 	beq	r3,zero,801714 <__umodsi3+0x4c>
  8016fc:	1806d07a 	srli	r3,r3,1
  801700:	11400136 	bltu	r2,r5,801708 <__umodsi3+0x40>
  801704:	1145c83a 	sub	r2,r2,r5
  801708:	280ad07a 	srli	r5,r5,1
  80170c:	183ffb1e 	bne	r3,zero,8016fc <__alt_data_end+0xff8016fc>
  801710:	f800283a 	ret
  801714:	f800283a 	ret
  801718:	00c00044 	movi	r3,1
  80171c:	003ff706 	br	8016fc <__alt_data_end+0xff8016fc>

00801720 <__mulsi3>:
  801720:	0005883a 	mov	r2,zero
  801724:	20000726 	beq	r4,zero,801744 <__mulsi3+0x24>
  801728:	20c0004c 	andi	r3,r4,1
  80172c:	2008d07a 	srli	r4,r4,1
  801730:	18000126 	beq	r3,zero,801738 <__mulsi3+0x18>
  801734:	1145883a 	add	r2,r2,r5
  801738:	294b883a 	add	r5,r5,r5
  80173c:	203ffa1e 	bne	r4,zero,801728 <__alt_data_end+0xff801728>
  801740:	f800283a 	ret
  801744:	f800283a 	ret

00801748 <__adddf3>:
  801748:	02c00434 	movhi	r11,16
  80174c:	5affffc4 	addi	r11,r11,-1
  801750:	2806d7fa 	srli	r3,r5,31
  801754:	2ad4703a 	and	r10,r5,r11
  801758:	3ad2703a 	and	r9,r7,r11
  80175c:	3804d53a 	srli	r2,r7,20
  801760:	3018d77a 	srli	r12,r6,29
  801764:	280ad53a 	srli	r5,r5,20
  801768:	501490fa 	slli	r10,r10,3
  80176c:	2010d77a 	srli	r8,r4,29
  801770:	481290fa 	slli	r9,r9,3
  801774:	380ed7fa 	srli	r7,r7,31
  801778:	defffb04 	addi	sp,sp,-20
  80177c:	dc800215 	stw	r18,8(sp)
  801780:	dc400115 	stw	r17,4(sp)
  801784:	dc000015 	stw	r16,0(sp)
  801788:	dfc00415 	stw	ra,16(sp)
  80178c:	dcc00315 	stw	r19,12(sp)
  801790:	1c803fcc 	andi	r18,r3,255
  801794:	2c01ffcc 	andi	r16,r5,2047
  801798:	5210b03a 	or	r8,r10,r8
  80179c:	202290fa 	slli	r17,r4,3
  8017a0:	1081ffcc 	andi	r2,r2,2047
  8017a4:	4b12b03a 	or	r9,r9,r12
  8017a8:	300c90fa 	slli	r6,r6,3
  8017ac:	91c07526 	beq	r18,r7,801984 <__adddf3+0x23c>
  8017b0:	8087c83a 	sub	r3,r16,r2
  8017b4:	00c0ab0e 	bge	zero,r3,801a64 <__adddf3+0x31c>
  8017b8:	10002a1e 	bne	r2,zero,801864 <__adddf3+0x11c>
  8017bc:	4984b03a 	or	r2,r9,r6
  8017c0:	1000961e 	bne	r2,zero,801a1c <__adddf3+0x2d4>
  8017c4:	888001cc 	andi	r2,r17,7
  8017c8:	10000726 	beq	r2,zero,8017e8 <__adddf3+0xa0>
  8017cc:	888003cc 	andi	r2,r17,15
  8017d0:	00c00104 	movi	r3,4
  8017d4:	10c00426 	beq	r2,r3,8017e8 <__adddf3+0xa0>
  8017d8:	88c7883a 	add	r3,r17,r3
  8017dc:	1c63803a 	cmpltu	r17,r3,r17
  8017e0:	4451883a 	add	r8,r8,r17
  8017e4:	1823883a 	mov	r17,r3
  8017e8:	4080202c 	andhi	r2,r8,128
  8017ec:	10005926 	beq	r2,zero,801954 <__adddf3+0x20c>
  8017f0:	84000044 	addi	r16,r16,1
  8017f4:	0081ffc4 	movi	r2,2047
  8017f8:	8080ba26 	beq	r16,r2,801ae4 <__adddf3+0x39c>
  8017fc:	00bfe034 	movhi	r2,65408
  801800:	10bfffc4 	addi	r2,r2,-1
  801804:	4090703a 	and	r8,r8,r2
  801808:	4004977a 	slli	r2,r8,29
  80180c:	4010927a 	slli	r8,r8,9
  801810:	8822d0fa 	srli	r17,r17,3
  801814:	8401ffcc 	andi	r16,r16,2047
  801818:	4010d33a 	srli	r8,r8,12
  80181c:	9007883a 	mov	r3,r18
  801820:	1444b03a 	or	r2,r2,r17
  801824:	8401ffcc 	andi	r16,r16,2047
  801828:	8020953a 	slli	r16,r16,20
  80182c:	18c03fcc 	andi	r3,r3,255
  801830:	01000434 	movhi	r4,16
  801834:	213fffc4 	addi	r4,r4,-1
  801838:	180697fa 	slli	r3,r3,31
  80183c:	4110703a 	and	r8,r8,r4
  801840:	4410b03a 	or	r8,r8,r16
  801844:	40c6b03a 	or	r3,r8,r3
  801848:	dfc00417 	ldw	ra,16(sp)
  80184c:	dcc00317 	ldw	r19,12(sp)
  801850:	dc800217 	ldw	r18,8(sp)
  801854:	dc400117 	ldw	r17,4(sp)
  801858:	dc000017 	ldw	r16,0(sp)
  80185c:	dec00504 	addi	sp,sp,20
  801860:	f800283a 	ret
  801864:	0081ffc4 	movi	r2,2047
  801868:	80bfd626 	beq	r16,r2,8017c4 <__alt_data_end+0xff8017c4>
  80186c:	4a402034 	orhi	r9,r9,128
  801870:	00800e04 	movi	r2,56
  801874:	10c09f16 	blt	r2,r3,801af4 <__adddf3+0x3ac>
  801878:	008007c4 	movi	r2,31
  80187c:	10c0c216 	blt	r2,r3,801b88 <__adddf3+0x440>
  801880:	00800804 	movi	r2,32
  801884:	10c5c83a 	sub	r2,r2,r3
  801888:	488a983a 	sll	r5,r9,r2
  80188c:	30c8d83a 	srl	r4,r6,r3
  801890:	3084983a 	sll	r2,r6,r2
  801894:	48c6d83a 	srl	r3,r9,r3
  801898:	290cb03a 	or	r6,r5,r4
  80189c:	1004c03a 	cmpne	r2,r2,zero
  8018a0:	308cb03a 	or	r6,r6,r2
  8018a4:	898dc83a 	sub	r6,r17,r6
  8018a8:	89a3803a 	cmpltu	r17,r17,r6
  8018ac:	40d1c83a 	sub	r8,r8,r3
  8018b0:	4451c83a 	sub	r8,r8,r17
  8018b4:	3023883a 	mov	r17,r6
  8018b8:	4080202c 	andhi	r2,r8,128
  8018bc:	10002326 	beq	r2,zero,80194c <__adddf3+0x204>
  8018c0:	04c02034 	movhi	r19,128
  8018c4:	9cffffc4 	addi	r19,r19,-1
  8018c8:	44e6703a 	and	r19,r8,r19
  8018cc:	98007626 	beq	r19,zero,801aa8 <__adddf3+0x360>
  8018d0:	9809883a 	mov	r4,r19
  8018d4:	08029bc0 	call	8029bc <__clzsi2>
  8018d8:	10fffe04 	addi	r3,r2,-8
  8018dc:	010007c4 	movi	r4,31
  8018e0:	20c07716 	blt	r4,r3,801ac0 <__adddf3+0x378>
  8018e4:	00800804 	movi	r2,32
  8018e8:	10c5c83a 	sub	r2,r2,r3
  8018ec:	8884d83a 	srl	r2,r17,r2
  8018f0:	98d0983a 	sll	r8,r19,r3
  8018f4:	88e2983a 	sll	r17,r17,r3
  8018f8:	1204b03a 	or	r2,r2,r8
  8018fc:	1c007416 	blt	r3,r16,801ad0 <__adddf3+0x388>
  801900:	1c21c83a 	sub	r16,r3,r16
  801904:	82000044 	addi	r8,r16,1
  801908:	00c007c4 	movi	r3,31
  80190c:	1a009116 	blt	r3,r8,801b54 <__adddf3+0x40c>
  801910:	00c00804 	movi	r3,32
  801914:	1a07c83a 	sub	r3,r3,r8
  801918:	8a08d83a 	srl	r4,r17,r8
  80191c:	88e2983a 	sll	r17,r17,r3
  801920:	10c6983a 	sll	r3,r2,r3
  801924:	1210d83a 	srl	r8,r2,r8
  801928:	8804c03a 	cmpne	r2,r17,zero
  80192c:	1906b03a 	or	r3,r3,r4
  801930:	18a2b03a 	or	r17,r3,r2
  801934:	0021883a 	mov	r16,zero
  801938:	003fa206 	br	8017c4 <__alt_data_end+0xff8017c4>
  80193c:	1890b03a 	or	r8,r3,r2
  801940:	40017d26 	beq	r8,zero,801f38 <__adddf3+0x7f0>
  801944:	1011883a 	mov	r8,r2
  801948:	1823883a 	mov	r17,r3
  80194c:	888001cc 	andi	r2,r17,7
  801950:	103f9e1e 	bne	r2,zero,8017cc <__alt_data_end+0xff8017cc>
  801954:	4004977a 	slli	r2,r8,29
  801958:	8822d0fa 	srli	r17,r17,3
  80195c:	4010d0fa 	srli	r8,r8,3
  801960:	9007883a 	mov	r3,r18
  801964:	1444b03a 	or	r2,r2,r17
  801968:	0101ffc4 	movi	r4,2047
  80196c:	81002426 	beq	r16,r4,801a00 <__adddf3+0x2b8>
  801970:	8120703a 	and	r16,r16,r4
  801974:	01000434 	movhi	r4,16
  801978:	213fffc4 	addi	r4,r4,-1
  80197c:	4110703a 	and	r8,r8,r4
  801980:	003fa806 	br	801824 <__alt_data_end+0xff801824>
  801984:	8089c83a 	sub	r4,r16,r2
  801988:	01005e0e 	bge	zero,r4,801b04 <__adddf3+0x3bc>
  80198c:	10002b26 	beq	r2,zero,801a3c <__adddf3+0x2f4>
  801990:	0081ffc4 	movi	r2,2047
  801994:	80bf8b26 	beq	r16,r2,8017c4 <__alt_data_end+0xff8017c4>
  801998:	4a402034 	orhi	r9,r9,128
  80199c:	00800e04 	movi	r2,56
  8019a0:	1100a40e 	bge	r2,r4,801c34 <__adddf3+0x4ec>
  8019a4:	498cb03a 	or	r6,r9,r6
  8019a8:	300ac03a 	cmpne	r5,r6,zero
  8019ac:	0013883a 	mov	r9,zero
  8019b0:	2c4b883a 	add	r5,r5,r17
  8019b4:	2c63803a 	cmpltu	r17,r5,r17
  8019b8:	4a11883a 	add	r8,r9,r8
  8019bc:	8a11883a 	add	r8,r17,r8
  8019c0:	2823883a 	mov	r17,r5
  8019c4:	4080202c 	andhi	r2,r8,128
  8019c8:	103fe026 	beq	r2,zero,80194c <__alt_data_end+0xff80194c>
  8019cc:	84000044 	addi	r16,r16,1
  8019d0:	0081ffc4 	movi	r2,2047
  8019d4:	8080d226 	beq	r16,r2,801d20 <__adddf3+0x5d8>
  8019d8:	00bfe034 	movhi	r2,65408
  8019dc:	10bfffc4 	addi	r2,r2,-1
  8019e0:	4090703a 	and	r8,r8,r2
  8019e4:	880ad07a 	srli	r5,r17,1
  8019e8:	400897fa 	slli	r4,r8,31
  8019ec:	88c0004c 	andi	r3,r17,1
  8019f0:	28e2b03a 	or	r17,r5,r3
  8019f4:	4010d07a 	srli	r8,r8,1
  8019f8:	2462b03a 	or	r17,r4,r17
  8019fc:	003f7106 	br	8017c4 <__alt_data_end+0xff8017c4>
  801a00:	4088b03a 	or	r4,r8,r2
  801a04:	20014526 	beq	r4,zero,801f1c <__adddf3+0x7d4>
  801a08:	01000434 	movhi	r4,16
  801a0c:	42000234 	orhi	r8,r8,8
  801a10:	213fffc4 	addi	r4,r4,-1
  801a14:	4110703a 	and	r8,r8,r4
  801a18:	003f8206 	br	801824 <__alt_data_end+0xff801824>
  801a1c:	18ffffc4 	addi	r3,r3,-1
  801a20:	1800491e 	bne	r3,zero,801b48 <__adddf3+0x400>
  801a24:	898bc83a 	sub	r5,r17,r6
  801a28:	8963803a 	cmpltu	r17,r17,r5
  801a2c:	4251c83a 	sub	r8,r8,r9
  801a30:	4451c83a 	sub	r8,r8,r17
  801a34:	2823883a 	mov	r17,r5
  801a38:	003f9f06 	br	8018b8 <__alt_data_end+0xff8018b8>
  801a3c:	4984b03a 	or	r2,r9,r6
  801a40:	103f6026 	beq	r2,zero,8017c4 <__alt_data_end+0xff8017c4>
  801a44:	213fffc4 	addi	r4,r4,-1
  801a48:	2000931e 	bne	r4,zero,801c98 <__adddf3+0x550>
  801a4c:	898d883a 	add	r6,r17,r6
  801a50:	3463803a 	cmpltu	r17,r6,r17
  801a54:	4251883a 	add	r8,r8,r9
  801a58:	8a11883a 	add	r8,r17,r8
  801a5c:	3023883a 	mov	r17,r6
  801a60:	003fd806 	br	8019c4 <__alt_data_end+0xff8019c4>
  801a64:	1800541e 	bne	r3,zero,801bb8 <__adddf3+0x470>
  801a68:	80800044 	addi	r2,r16,1
  801a6c:	1081ffcc 	andi	r2,r2,2047
  801a70:	00c00044 	movi	r3,1
  801a74:	1880a00e 	bge	r3,r2,801cf8 <__adddf3+0x5b0>
  801a78:	8989c83a 	sub	r4,r17,r6
  801a7c:	8905803a 	cmpltu	r2,r17,r4
  801a80:	4267c83a 	sub	r19,r8,r9
  801a84:	98a7c83a 	sub	r19,r19,r2
  801a88:	9880202c 	andhi	r2,r19,128
  801a8c:	10006326 	beq	r2,zero,801c1c <__adddf3+0x4d4>
  801a90:	3463c83a 	sub	r17,r6,r17
  801a94:	4a07c83a 	sub	r3,r9,r8
  801a98:	344d803a 	cmpltu	r6,r6,r17
  801a9c:	19a7c83a 	sub	r19,r3,r6
  801aa0:	3825883a 	mov	r18,r7
  801aa4:	983f8a1e 	bne	r19,zero,8018d0 <__alt_data_end+0xff8018d0>
  801aa8:	8809883a 	mov	r4,r17
  801aac:	08029bc0 	call	8029bc <__clzsi2>
  801ab0:	10800804 	addi	r2,r2,32
  801ab4:	10fffe04 	addi	r3,r2,-8
  801ab8:	010007c4 	movi	r4,31
  801abc:	20ff890e 	bge	r4,r3,8018e4 <__alt_data_end+0xff8018e4>
  801ac0:	10bff604 	addi	r2,r2,-40
  801ac4:	8884983a 	sll	r2,r17,r2
  801ac8:	0023883a 	mov	r17,zero
  801acc:	1c3f8c0e 	bge	r3,r16,801900 <__alt_data_end+0xff801900>
  801ad0:	023fe034 	movhi	r8,65408
  801ad4:	423fffc4 	addi	r8,r8,-1
  801ad8:	80e1c83a 	sub	r16,r16,r3
  801adc:	1210703a 	and	r8,r2,r8
  801ae0:	003f3806 	br	8017c4 <__alt_data_end+0xff8017c4>
  801ae4:	9007883a 	mov	r3,r18
  801ae8:	0011883a 	mov	r8,zero
  801aec:	0005883a 	mov	r2,zero
  801af0:	003f4c06 	br	801824 <__alt_data_end+0xff801824>
  801af4:	498cb03a 	or	r6,r9,r6
  801af8:	300cc03a 	cmpne	r6,r6,zero
  801afc:	0007883a 	mov	r3,zero
  801b00:	003f6806 	br	8018a4 <__alt_data_end+0xff8018a4>
  801b04:	20009c1e 	bne	r4,zero,801d78 <__adddf3+0x630>
  801b08:	80800044 	addi	r2,r16,1
  801b0c:	1141ffcc 	andi	r5,r2,2047
  801b10:	01000044 	movi	r4,1
  801b14:	2140670e 	bge	r4,r5,801cb4 <__adddf3+0x56c>
  801b18:	0101ffc4 	movi	r4,2047
  801b1c:	11007f26 	beq	r2,r4,801d1c <__adddf3+0x5d4>
  801b20:	898d883a 	add	r6,r17,r6
  801b24:	4247883a 	add	r3,r8,r9
  801b28:	3451803a 	cmpltu	r8,r6,r17
  801b2c:	40d1883a 	add	r8,r8,r3
  801b30:	402297fa 	slli	r17,r8,31
  801b34:	300cd07a 	srli	r6,r6,1
  801b38:	4010d07a 	srli	r8,r8,1
  801b3c:	1021883a 	mov	r16,r2
  801b40:	89a2b03a 	or	r17,r17,r6
  801b44:	003f1f06 	br	8017c4 <__alt_data_end+0xff8017c4>
  801b48:	0081ffc4 	movi	r2,2047
  801b4c:	80bf481e 	bne	r16,r2,801870 <__alt_data_end+0xff801870>
  801b50:	003f1c06 	br	8017c4 <__alt_data_end+0xff8017c4>
  801b54:	843ff844 	addi	r16,r16,-31
  801b58:	01000804 	movi	r4,32
  801b5c:	1406d83a 	srl	r3,r2,r16
  801b60:	41005026 	beq	r8,r4,801ca4 <__adddf3+0x55c>
  801b64:	01001004 	movi	r4,64
  801b68:	2211c83a 	sub	r8,r4,r8
  801b6c:	1204983a 	sll	r2,r2,r8
  801b70:	88a2b03a 	or	r17,r17,r2
  801b74:	8822c03a 	cmpne	r17,r17,zero
  801b78:	1c62b03a 	or	r17,r3,r17
  801b7c:	0011883a 	mov	r8,zero
  801b80:	0021883a 	mov	r16,zero
  801b84:	003f7106 	br	80194c <__alt_data_end+0xff80194c>
  801b88:	193ff804 	addi	r4,r3,-32
  801b8c:	00800804 	movi	r2,32
  801b90:	4908d83a 	srl	r4,r9,r4
  801b94:	18804526 	beq	r3,r2,801cac <__adddf3+0x564>
  801b98:	00801004 	movi	r2,64
  801b9c:	10c5c83a 	sub	r2,r2,r3
  801ba0:	4886983a 	sll	r3,r9,r2
  801ba4:	198cb03a 	or	r6,r3,r6
  801ba8:	300cc03a 	cmpne	r6,r6,zero
  801bac:	218cb03a 	or	r6,r4,r6
  801bb0:	0007883a 	mov	r3,zero
  801bb4:	003f3b06 	br	8018a4 <__alt_data_end+0xff8018a4>
  801bb8:	80002a26 	beq	r16,zero,801c64 <__adddf3+0x51c>
  801bbc:	0101ffc4 	movi	r4,2047
  801bc0:	11006826 	beq	r2,r4,801d64 <__adddf3+0x61c>
  801bc4:	00c7c83a 	sub	r3,zero,r3
  801bc8:	42002034 	orhi	r8,r8,128
  801bcc:	01000e04 	movi	r4,56
  801bd0:	20c07c16 	blt	r4,r3,801dc4 <__adddf3+0x67c>
  801bd4:	010007c4 	movi	r4,31
  801bd8:	20c0da16 	blt	r4,r3,801f44 <__adddf3+0x7fc>
  801bdc:	01000804 	movi	r4,32
  801be0:	20c9c83a 	sub	r4,r4,r3
  801be4:	4114983a 	sll	r10,r8,r4
  801be8:	88cad83a 	srl	r5,r17,r3
  801bec:	8908983a 	sll	r4,r17,r4
  801bf0:	40c6d83a 	srl	r3,r8,r3
  801bf4:	5162b03a 	or	r17,r10,r5
  801bf8:	2008c03a 	cmpne	r4,r4,zero
  801bfc:	8922b03a 	or	r17,r17,r4
  801c00:	3463c83a 	sub	r17,r6,r17
  801c04:	48c7c83a 	sub	r3,r9,r3
  801c08:	344d803a 	cmpltu	r6,r6,r17
  801c0c:	1991c83a 	sub	r8,r3,r6
  801c10:	1021883a 	mov	r16,r2
  801c14:	3825883a 	mov	r18,r7
  801c18:	003f2706 	br	8018b8 <__alt_data_end+0xff8018b8>
  801c1c:	24d0b03a 	or	r8,r4,r19
  801c20:	40001b1e 	bne	r8,zero,801c90 <__adddf3+0x548>
  801c24:	0005883a 	mov	r2,zero
  801c28:	0007883a 	mov	r3,zero
  801c2c:	0021883a 	mov	r16,zero
  801c30:	003f4d06 	br	801968 <__alt_data_end+0xff801968>
  801c34:	008007c4 	movi	r2,31
  801c38:	11003c16 	blt	r2,r4,801d2c <__adddf3+0x5e4>
  801c3c:	00800804 	movi	r2,32
  801c40:	1105c83a 	sub	r2,r2,r4
  801c44:	488e983a 	sll	r7,r9,r2
  801c48:	310ad83a 	srl	r5,r6,r4
  801c4c:	3084983a 	sll	r2,r6,r2
  801c50:	4912d83a 	srl	r9,r9,r4
  801c54:	394ab03a 	or	r5,r7,r5
  801c58:	1004c03a 	cmpne	r2,r2,zero
  801c5c:	288ab03a 	or	r5,r5,r2
  801c60:	003f5306 	br	8019b0 <__alt_data_end+0xff8019b0>
  801c64:	4448b03a 	or	r4,r8,r17
  801c68:	20003e26 	beq	r4,zero,801d64 <__adddf3+0x61c>
  801c6c:	00c6303a 	nor	r3,zero,r3
  801c70:	18003a1e 	bne	r3,zero,801d5c <__adddf3+0x614>
  801c74:	3463c83a 	sub	r17,r6,r17
  801c78:	4a07c83a 	sub	r3,r9,r8
  801c7c:	344d803a 	cmpltu	r6,r6,r17
  801c80:	1991c83a 	sub	r8,r3,r6
  801c84:	1021883a 	mov	r16,r2
  801c88:	3825883a 	mov	r18,r7
  801c8c:	003f0a06 	br	8018b8 <__alt_data_end+0xff8018b8>
  801c90:	2023883a 	mov	r17,r4
  801c94:	003f0d06 	br	8018cc <__alt_data_end+0xff8018cc>
  801c98:	0081ffc4 	movi	r2,2047
  801c9c:	80bf3f1e 	bne	r16,r2,80199c <__alt_data_end+0xff80199c>
  801ca0:	003ec806 	br	8017c4 <__alt_data_end+0xff8017c4>
  801ca4:	0005883a 	mov	r2,zero
  801ca8:	003fb106 	br	801b70 <__alt_data_end+0xff801b70>
  801cac:	0007883a 	mov	r3,zero
  801cb0:	003fbc06 	br	801ba4 <__alt_data_end+0xff801ba4>
  801cb4:	4444b03a 	or	r2,r8,r17
  801cb8:	8000871e 	bne	r16,zero,801ed8 <__adddf3+0x790>
  801cbc:	1000ba26 	beq	r2,zero,801fa8 <__adddf3+0x860>
  801cc0:	4984b03a 	or	r2,r9,r6
  801cc4:	103ebf26 	beq	r2,zero,8017c4 <__alt_data_end+0xff8017c4>
  801cc8:	8985883a 	add	r2,r17,r6
  801ccc:	4247883a 	add	r3,r8,r9
  801cd0:	1451803a 	cmpltu	r8,r2,r17
  801cd4:	40d1883a 	add	r8,r8,r3
  801cd8:	40c0202c 	andhi	r3,r8,128
  801cdc:	1023883a 	mov	r17,r2
  801ce0:	183f1a26 	beq	r3,zero,80194c <__alt_data_end+0xff80194c>
  801ce4:	00bfe034 	movhi	r2,65408
  801ce8:	10bfffc4 	addi	r2,r2,-1
  801cec:	2021883a 	mov	r16,r4
  801cf0:	4090703a 	and	r8,r8,r2
  801cf4:	003eb306 	br	8017c4 <__alt_data_end+0xff8017c4>
  801cf8:	4444b03a 	or	r2,r8,r17
  801cfc:	8000291e 	bne	r16,zero,801da4 <__adddf3+0x65c>
  801d00:	10004b1e 	bne	r2,zero,801e30 <__adddf3+0x6e8>
  801d04:	4990b03a 	or	r8,r9,r6
  801d08:	40008b26 	beq	r8,zero,801f38 <__adddf3+0x7f0>
  801d0c:	4811883a 	mov	r8,r9
  801d10:	3023883a 	mov	r17,r6
  801d14:	3825883a 	mov	r18,r7
  801d18:	003eaa06 	br	8017c4 <__alt_data_end+0xff8017c4>
  801d1c:	1021883a 	mov	r16,r2
  801d20:	0011883a 	mov	r8,zero
  801d24:	0005883a 	mov	r2,zero
  801d28:	003f0f06 	br	801968 <__alt_data_end+0xff801968>
  801d2c:	217ff804 	addi	r5,r4,-32
  801d30:	00800804 	movi	r2,32
  801d34:	494ad83a 	srl	r5,r9,r5
  801d38:	20807d26 	beq	r4,r2,801f30 <__adddf3+0x7e8>
  801d3c:	00801004 	movi	r2,64
  801d40:	1109c83a 	sub	r4,r2,r4
  801d44:	4912983a 	sll	r9,r9,r4
  801d48:	498cb03a 	or	r6,r9,r6
  801d4c:	300cc03a 	cmpne	r6,r6,zero
  801d50:	298ab03a 	or	r5,r5,r6
  801d54:	0013883a 	mov	r9,zero
  801d58:	003f1506 	br	8019b0 <__alt_data_end+0xff8019b0>
  801d5c:	0101ffc4 	movi	r4,2047
  801d60:	113f9a1e 	bne	r2,r4,801bcc <__alt_data_end+0xff801bcc>
  801d64:	4811883a 	mov	r8,r9
  801d68:	3023883a 	mov	r17,r6
  801d6c:	1021883a 	mov	r16,r2
  801d70:	3825883a 	mov	r18,r7
  801d74:	003e9306 	br	8017c4 <__alt_data_end+0xff8017c4>
  801d78:	8000161e 	bne	r16,zero,801dd4 <__adddf3+0x68c>
  801d7c:	444ab03a 	or	r5,r8,r17
  801d80:	28005126 	beq	r5,zero,801ec8 <__adddf3+0x780>
  801d84:	0108303a 	nor	r4,zero,r4
  801d88:	20004d1e 	bne	r4,zero,801ec0 <__adddf3+0x778>
  801d8c:	89a3883a 	add	r17,r17,r6
  801d90:	4253883a 	add	r9,r8,r9
  801d94:	898d803a 	cmpltu	r6,r17,r6
  801d98:	3251883a 	add	r8,r6,r9
  801d9c:	1021883a 	mov	r16,r2
  801da0:	003f0806 	br	8019c4 <__alt_data_end+0xff8019c4>
  801da4:	1000301e 	bne	r2,zero,801e68 <__adddf3+0x720>
  801da8:	4984b03a 	or	r2,r9,r6
  801dac:	10007126 	beq	r2,zero,801f74 <__adddf3+0x82c>
  801db0:	4811883a 	mov	r8,r9
  801db4:	3023883a 	mov	r17,r6
  801db8:	3825883a 	mov	r18,r7
  801dbc:	0401ffc4 	movi	r16,2047
  801dc0:	003e8006 	br	8017c4 <__alt_data_end+0xff8017c4>
  801dc4:	4462b03a 	or	r17,r8,r17
  801dc8:	8822c03a 	cmpne	r17,r17,zero
  801dcc:	0007883a 	mov	r3,zero
  801dd0:	003f8b06 	br	801c00 <__alt_data_end+0xff801c00>
  801dd4:	0141ffc4 	movi	r5,2047
  801dd8:	11403b26 	beq	r2,r5,801ec8 <__adddf3+0x780>
  801ddc:	0109c83a 	sub	r4,zero,r4
  801de0:	42002034 	orhi	r8,r8,128
  801de4:	01400e04 	movi	r5,56
  801de8:	29006716 	blt	r5,r4,801f88 <__adddf3+0x840>
  801dec:	014007c4 	movi	r5,31
  801df0:	29007016 	blt	r5,r4,801fb4 <__adddf3+0x86c>
  801df4:	01400804 	movi	r5,32
  801df8:	290bc83a 	sub	r5,r5,r4
  801dfc:	4154983a 	sll	r10,r8,r5
  801e00:	890ed83a 	srl	r7,r17,r4
  801e04:	894a983a 	sll	r5,r17,r5
  801e08:	4108d83a 	srl	r4,r8,r4
  801e0c:	51e2b03a 	or	r17,r10,r7
  801e10:	280ac03a 	cmpne	r5,r5,zero
  801e14:	8962b03a 	or	r17,r17,r5
  801e18:	89a3883a 	add	r17,r17,r6
  801e1c:	2253883a 	add	r9,r4,r9
  801e20:	898d803a 	cmpltu	r6,r17,r6
  801e24:	3251883a 	add	r8,r6,r9
  801e28:	1021883a 	mov	r16,r2
  801e2c:	003ee506 	br	8019c4 <__alt_data_end+0xff8019c4>
  801e30:	4984b03a 	or	r2,r9,r6
  801e34:	103e6326 	beq	r2,zero,8017c4 <__alt_data_end+0xff8017c4>
  801e38:	8987c83a 	sub	r3,r17,r6
  801e3c:	88c9803a 	cmpltu	r4,r17,r3
  801e40:	4245c83a 	sub	r2,r8,r9
  801e44:	1105c83a 	sub	r2,r2,r4
  801e48:	1100202c 	andhi	r4,r2,128
  801e4c:	203ebb26 	beq	r4,zero,80193c <__alt_data_end+0xff80193c>
  801e50:	3463c83a 	sub	r17,r6,r17
  801e54:	4a07c83a 	sub	r3,r9,r8
  801e58:	344d803a 	cmpltu	r6,r6,r17
  801e5c:	1991c83a 	sub	r8,r3,r6
  801e60:	3825883a 	mov	r18,r7
  801e64:	003e5706 	br	8017c4 <__alt_data_end+0xff8017c4>
  801e68:	4984b03a 	or	r2,r9,r6
  801e6c:	10002e26 	beq	r2,zero,801f28 <__adddf3+0x7e0>
  801e70:	4004d0fa 	srli	r2,r8,3
  801e74:	8822d0fa 	srli	r17,r17,3
  801e78:	4010977a 	slli	r8,r8,29
  801e7c:	10c0022c 	andhi	r3,r2,8
  801e80:	4462b03a 	or	r17,r8,r17
  801e84:	18000826 	beq	r3,zero,801ea8 <__adddf3+0x760>
  801e88:	4808d0fa 	srli	r4,r9,3
  801e8c:	20c0022c 	andhi	r3,r4,8
  801e90:	1800051e 	bne	r3,zero,801ea8 <__adddf3+0x760>
  801e94:	300cd0fa 	srli	r6,r6,3
  801e98:	4806977a 	slli	r3,r9,29
  801e9c:	2005883a 	mov	r2,r4
  801ea0:	3825883a 	mov	r18,r7
  801ea4:	19a2b03a 	or	r17,r3,r6
  801ea8:	8810d77a 	srli	r8,r17,29
  801eac:	100490fa 	slli	r2,r2,3
  801eb0:	882290fa 	slli	r17,r17,3
  801eb4:	0401ffc4 	movi	r16,2047
  801eb8:	4090b03a 	or	r8,r8,r2
  801ebc:	003e4106 	br	8017c4 <__alt_data_end+0xff8017c4>
  801ec0:	0141ffc4 	movi	r5,2047
  801ec4:	117fc71e 	bne	r2,r5,801de4 <__alt_data_end+0xff801de4>
  801ec8:	4811883a 	mov	r8,r9
  801ecc:	3023883a 	mov	r17,r6
  801ed0:	1021883a 	mov	r16,r2
  801ed4:	003e3b06 	br	8017c4 <__alt_data_end+0xff8017c4>
  801ed8:	10002f26 	beq	r2,zero,801f98 <__adddf3+0x850>
  801edc:	4984b03a 	or	r2,r9,r6
  801ee0:	10001126 	beq	r2,zero,801f28 <__adddf3+0x7e0>
  801ee4:	4004d0fa 	srli	r2,r8,3
  801ee8:	8822d0fa 	srli	r17,r17,3
  801eec:	4010977a 	slli	r8,r8,29
  801ef0:	10c0022c 	andhi	r3,r2,8
  801ef4:	4462b03a 	or	r17,r8,r17
  801ef8:	183feb26 	beq	r3,zero,801ea8 <__alt_data_end+0xff801ea8>
  801efc:	4808d0fa 	srli	r4,r9,3
  801f00:	20c0022c 	andhi	r3,r4,8
  801f04:	183fe81e 	bne	r3,zero,801ea8 <__alt_data_end+0xff801ea8>
  801f08:	300cd0fa 	srli	r6,r6,3
  801f0c:	4806977a 	slli	r3,r9,29
  801f10:	2005883a 	mov	r2,r4
  801f14:	19a2b03a 	or	r17,r3,r6
  801f18:	003fe306 	br	801ea8 <__alt_data_end+0xff801ea8>
  801f1c:	0011883a 	mov	r8,zero
  801f20:	0005883a 	mov	r2,zero
  801f24:	003e3f06 	br	801824 <__alt_data_end+0xff801824>
  801f28:	0401ffc4 	movi	r16,2047
  801f2c:	003e2506 	br	8017c4 <__alt_data_end+0xff8017c4>
  801f30:	0013883a 	mov	r9,zero
  801f34:	003f8406 	br	801d48 <__alt_data_end+0xff801d48>
  801f38:	0005883a 	mov	r2,zero
  801f3c:	0007883a 	mov	r3,zero
  801f40:	003e8906 	br	801968 <__alt_data_end+0xff801968>
  801f44:	197ff804 	addi	r5,r3,-32
  801f48:	01000804 	movi	r4,32
  801f4c:	414ad83a 	srl	r5,r8,r5
  801f50:	19002426 	beq	r3,r4,801fe4 <__adddf3+0x89c>
  801f54:	01001004 	movi	r4,64
  801f58:	20c7c83a 	sub	r3,r4,r3
  801f5c:	40c6983a 	sll	r3,r8,r3
  801f60:	1c46b03a 	or	r3,r3,r17
  801f64:	1806c03a 	cmpne	r3,r3,zero
  801f68:	28e2b03a 	or	r17,r5,r3
  801f6c:	0007883a 	mov	r3,zero
  801f70:	003f2306 	br	801c00 <__alt_data_end+0xff801c00>
  801f74:	0007883a 	mov	r3,zero
  801f78:	5811883a 	mov	r8,r11
  801f7c:	00bfffc4 	movi	r2,-1
  801f80:	0401ffc4 	movi	r16,2047
  801f84:	003e7806 	br	801968 <__alt_data_end+0xff801968>
  801f88:	4462b03a 	or	r17,r8,r17
  801f8c:	8822c03a 	cmpne	r17,r17,zero
  801f90:	0009883a 	mov	r4,zero
  801f94:	003fa006 	br	801e18 <__alt_data_end+0xff801e18>
  801f98:	4811883a 	mov	r8,r9
  801f9c:	3023883a 	mov	r17,r6
  801fa0:	0401ffc4 	movi	r16,2047
  801fa4:	003e0706 	br	8017c4 <__alt_data_end+0xff8017c4>
  801fa8:	4811883a 	mov	r8,r9
  801fac:	3023883a 	mov	r17,r6
  801fb0:	003e0406 	br	8017c4 <__alt_data_end+0xff8017c4>
  801fb4:	21fff804 	addi	r7,r4,-32
  801fb8:	01400804 	movi	r5,32
  801fbc:	41ced83a 	srl	r7,r8,r7
  801fc0:	21400a26 	beq	r4,r5,801fec <__adddf3+0x8a4>
  801fc4:	01401004 	movi	r5,64
  801fc8:	2909c83a 	sub	r4,r5,r4
  801fcc:	4108983a 	sll	r4,r8,r4
  801fd0:	2448b03a 	or	r4,r4,r17
  801fd4:	2008c03a 	cmpne	r4,r4,zero
  801fd8:	3922b03a 	or	r17,r7,r4
  801fdc:	0009883a 	mov	r4,zero
  801fe0:	003f8d06 	br	801e18 <__alt_data_end+0xff801e18>
  801fe4:	0007883a 	mov	r3,zero
  801fe8:	003fdd06 	br	801f60 <__alt_data_end+0xff801f60>
  801fec:	0009883a 	mov	r4,zero
  801ff0:	003ff706 	br	801fd0 <__alt_data_end+0xff801fd0>

00801ff4 <__muldf3>:
  801ff4:	deffee04 	addi	sp,sp,-72
  801ff8:	dd000c15 	stw	r20,48(sp)
  801ffc:	2828d53a 	srli	r20,r5,20
  802000:	ddc00f15 	stw	r23,60(sp)
  802004:	282ed7fa 	srli	r23,r5,31
  802008:	dc000815 	stw	r16,32(sp)
  80200c:	04000434 	movhi	r16,16
  802010:	dcc00b15 	stw	r19,44(sp)
  802014:	843fffc4 	addi	r16,r16,-1
  802018:	dfc01115 	stw	ra,68(sp)
  80201c:	df001015 	stw	fp,64(sp)
  802020:	dd800e15 	stw	r22,56(sp)
  802024:	dd400d15 	stw	r21,52(sp)
  802028:	dc800a15 	stw	r18,40(sp)
  80202c:	dc400915 	stw	r17,36(sp)
  802030:	a501ffcc 	andi	r20,r20,2047
  802034:	2c20703a 	and	r16,r5,r16
  802038:	b827883a 	mov	r19,r23
  80203c:	ba403fcc 	andi	r9,r23,255
  802040:	a0006026 	beq	r20,zero,8021c4 <__muldf3+0x1d0>
  802044:	0081ffc4 	movi	r2,2047
  802048:	202d883a 	mov	r22,r4
  80204c:	a0803626 	beq	r20,r2,802128 <__muldf3+0x134>
  802050:	84000434 	orhi	r16,r16,16
  802054:	200ad77a 	srli	r5,r4,29
  802058:	800490fa 	slli	r2,r16,3
  80205c:	202c90fa 	slli	r22,r4,3
  802060:	a53f0044 	addi	r20,r20,-1023
  802064:	28a0b03a 	or	r16,r5,r2
  802068:	002b883a 	mov	r21,zero
  80206c:	000b883a 	mov	r5,zero
  802070:	3804d53a 	srli	r2,r7,20
  802074:	3838d7fa 	srli	fp,r7,31
  802078:	04400434 	movhi	r17,16
  80207c:	8c7fffc4 	addi	r17,r17,-1
  802080:	1081ffcc 	andi	r2,r2,2047
  802084:	3025883a 	mov	r18,r6
  802088:	3c62703a 	and	r17,r7,r17
  80208c:	e2803fcc 	andi	r10,fp,255
  802090:	10006d26 	beq	r2,zero,802248 <__muldf3+0x254>
  802094:	00c1ffc4 	movi	r3,2047
  802098:	10c06526 	beq	r2,r3,802230 <__muldf3+0x23c>
  80209c:	8c400434 	orhi	r17,r17,16
  8020a0:	300ed77a 	srli	r7,r6,29
  8020a4:	880690fa 	slli	r3,r17,3
  8020a8:	302490fa 	slli	r18,r6,3
  8020ac:	10bf0044 	addi	r2,r2,-1023
  8020b0:	38e2b03a 	or	r17,r7,r3
  8020b4:	000f883a 	mov	r7,zero
  8020b8:	a087883a 	add	r3,r20,r2
  8020bc:	010003c4 	movi	r4,15
  8020c0:	3d44b03a 	or	r2,r7,r21
  8020c4:	e5ccf03a 	xor	r6,fp,r23
  8020c8:	1a000044 	addi	r8,r3,1
  8020cc:	20809b36 	bltu	r4,r2,80233c <__muldf3+0x348>
  8020d0:	100490ba 	slli	r2,r2,2
  8020d4:	01002034 	movhi	r4,128
  8020d8:	21083a04 	addi	r4,r4,8424
  8020dc:	1105883a 	add	r2,r2,r4
  8020e0:	10800017 	ldw	r2,0(r2)
  8020e4:	1000683a 	jmp	r2
  8020e8:	0080233c 	xorhi	r2,zero,140
  8020ec:	00802148 	cmpgei	r2,zero,133
  8020f0:	00802148 	cmpgei	r2,zero,133
  8020f4:	00802144 	movi	r2,133
  8020f8:	00802318 	cmpnei	r2,zero,140
  8020fc:	00802318 	cmpnei	r2,zero,140
  802100:	00802300 	call	80230 <__alt_mem_sdram-0x77fdd0>
  802104:	00802144 	movi	r2,133
  802108:	00802318 	cmpnei	r2,zero,140
  80210c:	00802300 	call	80230 <__alt_mem_sdram-0x77fdd0>
  802110:	00802318 	cmpnei	r2,zero,140
  802114:	00802144 	movi	r2,133
  802118:	00802328 	cmpgeui	r2,zero,140
  80211c:	00802328 	cmpgeui	r2,zero,140
  802120:	00802328 	cmpgeui	r2,zero,140
  802124:	00802688 	cmpgei	r2,zero,154
  802128:	2404b03a 	or	r2,r4,r16
  80212c:	1000711e 	bne	r2,zero,8022f4 <__muldf3+0x300>
  802130:	05400204 	movi	r21,8
  802134:	0021883a 	mov	r16,zero
  802138:	002d883a 	mov	r22,zero
  80213c:	01400084 	movi	r5,2
  802140:	003fcb06 	br	802070 <__alt_data_end+0xff802070>
  802144:	500d883a 	mov	r6,r10
  802148:	00800084 	movi	r2,2
  80214c:	38805926 	beq	r7,r2,8022b4 <__muldf3+0x2c0>
  802150:	008000c4 	movi	r2,3
  802154:	3881bb26 	beq	r7,r2,802844 <__muldf3+0x850>
  802158:	00800044 	movi	r2,1
  80215c:	3881961e 	bne	r7,r2,8027b8 <__muldf3+0x7c4>
  802160:	3027883a 	mov	r19,r6
  802164:	0005883a 	mov	r2,zero
  802168:	0021883a 	mov	r16,zero
  80216c:	002d883a 	mov	r22,zero
  802170:	1004953a 	slli	r2,r2,20
  802174:	98c03fcc 	andi	r3,r19,255
  802178:	04400434 	movhi	r17,16
  80217c:	8c7fffc4 	addi	r17,r17,-1
  802180:	180697fa 	slli	r3,r3,31
  802184:	8460703a 	and	r16,r16,r17
  802188:	80a0b03a 	or	r16,r16,r2
  80218c:	80c6b03a 	or	r3,r16,r3
  802190:	b005883a 	mov	r2,r22
  802194:	dfc01117 	ldw	ra,68(sp)
  802198:	df001017 	ldw	fp,64(sp)
  80219c:	ddc00f17 	ldw	r23,60(sp)
  8021a0:	dd800e17 	ldw	r22,56(sp)
  8021a4:	dd400d17 	ldw	r21,52(sp)
  8021a8:	dd000c17 	ldw	r20,48(sp)
  8021ac:	dcc00b17 	ldw	r19,44(sp)
  8021b0:	dc800a17 	ldw	r18,40(sp)
  8021b4:	dc400917 	ldw	r17,36(sp)
  8021b8:	dc000817 	ldw	r16,32(sp)
  8021bc:	dec01204 	addi	sp,sp,72
  8021c0:	f800283a 	ret
  8021c4:	2404b03a 	or	r2,r4,r16
  8021c8:	202b883a 	mov	r21,r4
  8021cc:	10004426 	beq	r2,zero,8022e0 <__muldf3+0x2ec>
  8021d0:	80015126 	beq	r16,zero,802718 <__muldf3+0x724>
  8021d4:	8009883a 	mov	r4,r16
  8021d8:	d9800715 	stw	r6,28(sp)
  8021dc:	d9c00215 	stw	r7,8(sp)
  8021e0:	da400415 	stw	r9,16(sp)
  8021e4:	08029bc0 	call	8029bc <__clzsi2>
  8021e8:	d9800717 	ldw	r6,28(sp)
  8021ec:	d9c00217 	ldw	r7,8(sp)
  8021f0:	da400417 	ldw	r9,16(sp)
  8021f4:	113ffd44 	addi	r4,r2,-11
  8021f8:	00c00704 	movi	r3,28
  8021fc:	19014216 	blt	r3,r4,802708 <__muldf3+0x714>
  802200:	00c00744 	movi	r3,29
  802204:	15bffe04 	addi	r22,r2,-8
  802208:	1907c83a 	sub	r3,r3,r4
  80220c:	85a0983a 	sll	r16,r16,r22
  802210:	a8c6d83a 	srl	r3,r21,r3
  802214:	adac983a 	sll	r22,r21,r22
  802218:	1c20b03a 	or	r16,r3,r16
  80221c:	1080fcc4 	addi	r2,r2,1011
  802220:	00a9c83a 	sub	r20,zero,r2
  802224:	002b883a 	mov	r21,zero
  802228:	000b883a 	mov	r5,zero
  80222c:	003f9006 	br	802070 <__alt_data_end+0xff802070>
  802230:	3446b03a 	or	r3,r6,r17
  802234:	1800281e 	bne	r3,zero,8022d8 <__muldf3+0x2e4>
  802238:	0023883a 	mov	r17,zero
  80223c:	0025883a 	mov	r18,zero
  802240:	01c00084 	movi	r7,2
  802244:	003f9c06 	br	8020b8 <__alt_data_end+0xff8020b8>
  802248:	3446b03a 	or	r3,r6,r17
  80224c:	18001e26 	beq	r3,zero,8022c8 <__muldf3+0x2d4>
  802250:	88012126 	beq	r17,zero,8026d8 <__muldf3+0x6e4>
  802254:	8809883a 	mov	r4,r17
  802258:	d9400215 	stw	r5,8(sp)
  80225c:	d9800715 	stw	r6,28(sp)
  802260:	da400415 	stw	r9,16(sp)
  802264:	da800315 	stw	r10,12(sp)
  802268:	08029bc0 	call	8029bc <__clzsi2>
  80226c:	d9400217 	ldw	r5,8(sp)
  802270:	d9800717 	ldw	r6,28(sp)
  802274:	da400417 	ldw	r9,16(sp)
  802278:	da800317 	ldw	r10,12(sp)
  80227c:	113ffd44 	addi	r4,r2,-11
  802280:	00c00704 	movi	r3,28
  802284:	19011016 	blt	r3,r4,8026c8 <__muldf3+0x6d4>
  802288:	00c00744 	movi	r3,29
  80228c:	14bffe04 	addi	r18,r2,-8
  802290:	1907c83a 	sub	r3,r3,r4
  802294:	8ca2983a 	sll	r17,r17,r18
  802298:	30c6d83a 	srl	r3,r6,r3
  80229c:	34a4983a 	sll	r18,r6,r18
  8022a0:	1c62b03a 	or	r17,r3,r17
  8022a4:	1080fcc4 	addi	r2,r2,1011
  8022a8:	0085c83a 	sub	r2,zero,r2
  8022ac:	000f883a 	mov	r7,zero
  8022b0:	003f8106 	br	8020b8 <__alt_data_end+0xff8020b8>
  8022b4:	3027883a 	mov	r19,r6
  8022b8:	0081ffc4 	movi	r2,2047
  8022bc:	0021883a 	mov	r16,zero
  8022c0:	002d883a 	mov	r22,zero
  8022c4:	003faa06 	br	802170 <__alt_data_end+0xff802170>
  8022c8:	0023883a 	mov	r17,zero
  8022cc:	0025883a 	mov	r18,zero
  8022d0:	01c00044 	movi	r7,1
  8022d4:	003f7806 	br	8020b8 <__alt_data_end+0xff8020b8>
  8022d8:	01c000c4 	movi	r7,3
  8022dc:	003f7606 	br	8020b8 <__alt_data_end+0xff8020b8>
  8022e0:	05400104 	movi	r21,4
  8022e4:	0021883a 	mov	r16,zero
  8022e8:	002d883a 	mov	r22,zero
  8022ec:	01400044 	movi	r5,1
  8022f0:	003f5f06 	br	802070 <__alt_data_end+0xff802070>
  8022f4:	05400304 	movi	r21,12
  8022f8:	014000c4 	movi	r5,3
  8022fc:	003f5c06 	br	802070 <__alt_data_end+0xff802070>
  802300:	04000434 	movhi	r16,16
  802304:	0027883a 	mov	r19,zero
  802308:	843fffc4 	addi	r16,r16,-1
  80230c:	05bfffc4 	movi	r22,-1
  802310:	0081ffc4 	movi	r2,2047
  802314:	003f9606 	br	802170 <__alt_data_end+0xff802170>
  802318:	8023883a 	mov	r17,r16
  80231c:	b025883a 	mov	r18,r22
  802320:	280f883a 	mov	r7,r5
  802324:	003f8806 	br	802148 <__alt_data_end+0xff802148>
  802328:	8023883a 	mov	r17,r16
  80232c:	b025883a 	mov	r18,r22
  802330:	480d883a 	mov	r6,r9
  802334:	280f883a 	mov	r7,r5
  802338:	003f8306 	br	802148 <__alt_data_end+0xff802148>
  80233c:	b026d43a 	srli	r19,r22,16
  802340:	902ed43a 	srli	r23,r18,16
  802344:	b5bfffcc 	andi	r22,r22,65535
  802348:	94bfffcc 	andi	r18,r18,65535
  80234c:	b00b883a 	mov	r5,r22
  802350:	9009883a 	mov	r4,r18
  802354:	d8c00515 	stw	r3,20(sp)
  802358:	d9800715 	stw	r6,28(sp)
  80235c:	da000615 	stw	r8,24(sp)
  802360:	08017200 	call	801720 <__mulsi3>
  802364:	980b883a 	mov	r5,r19
  802368:	9009883a 	mov	r4,r18
  80236c:	1029883a 	mov	r20,r2
  802370:	08017200 	call	801720 <__mulsi3>
  802374:	b80b883a 	mov	r5,r23
  802378:	9809883a 	mov	r4,r19
  80237c:	102b883a 	mov	r21,r2
  802380:	08017200 	call	801720 <__mulsi3>
  802384:	b809883a 	mov	r4,r23
  802388:	b00b883a 	mov	r5,r22
  80238c:	1039883a 	mov	fp,r2
  802390:	08017200 	call	801720 <__mulsi3>
  802394:	a008d43a 	srli	r4,r20,16
  802398:	1545883a 	add	r2,r2,r21
  80239c:	d8c00517 	ldw	r3,20(sp)
  8023a0:	2085883a 	add	r2,r4,r2
  8023a4:	d9800717 	ldw	r6,28(sp)
  8023a8:	da000617 	ldw	r8,24(sp)
  8023ac:	1540022e 	bgeu	r2,r21,8023b8 <__muldf3+0x3c4>
  8023b0:	01000074 	movhi	r4,1
  8023b4:	e139883a 	add	fp,fp,r4
  8023b8:	100e943a 	slli	r7,r2,16
  8023bc:	1004d43a 	srli	r2,r2,16
  8023c0:	882ad43a 	srli	r21,r17,16
  8023c4:	a53fffcc 	andi	r20,r20,65535
  8023c8:	8c7fffcc 	andi	r17,r17,65535
  8023cc:	3d29883a 	add	r20,r7,r20
  8023d0:	b00b883a 	mov	r5,r22
  8023d4:	8809883a 	mov	r4,r17
  8023d8:	d8c00515 	stw	r3,20(sp)
  8023dc:	d9800715 	stw	r6,28(sp)
  8023e0:	da000615 	stw	r8,24(sp)
  8023e4:	dd000115 	stw	r20,4(sp)
  8023e8:	d8800015 	stw	r2,0(sp)
  8023ec:	08017200 	call	801720 <__mulsi3>
  8023f0:	980b883a 	mov	r5,r19
  8023f4:	8809883a 	mov	r4,r17
  8023f8:	d8800215 	stw	r2,8(sp)
  8023fc:	08017200 	call	801720 <__mulsi3>
  802400:	9809883a 	mov	r4,r19
  802404:	a80b883a 	mov	r5,r21
  802408:	1029883a 	mov	r20,r2
  80240c:	08017200 	call	801720 <__mulsi3>
  802410:	b00b883a 	mov	r5,r22
  802414:	a809883a 	mov	r4,r21
  802418:	d8800415 	stw	r2,16(sp)
  80241c:	08017200 	call	801720 <__mulsi3>
  802420:	d9c00217 	ldw	r7,8(sp)
  802424:	1505883a 	add	r2,r2,r20
  802428:	d8c00517 	ldw	r3,20(sp)
  80242c:	3826d43a 	srli	r19,r7,16
  802430:	d9800717 	ldw	r6,28(sp)
  802434:	da000617 	ldw	r8,24(sp)
  802438:	9885883a 	add	r2,r19,r2
  80243c:	da400417 	ldw	r9,16(sp)
  802440:	1500022e 	bgeu	r2,r20,80244c <__muldf3+0x458>
  802444:	01000074 	movhi	r4,1
  802448:	4913883a 	add	r9,r9,r4
  80244c:	1028d43a 	srli	r20,r2,16
  802450:	1004943a 	slli	r2,r2,16
  802454:	802cd43a 	srli	r22,r16,16
  802458:	843fffcc 	andi	r16,r16,65535
  80245c:	3cffffcc 	andi	r19,r7,65535
  802460:	9009883a 	mov	r4,r18
  802464:	800b883a 	mov	r5,r16
  802468:	a269883a 	add	r20,r20,r9
  80246c:	d8c00515 	stw	r3,20(sp)
  802470:	d9800715 	stw	r6,28(sp)
  802474:	da000615 	stw	r8,24(sp)
  802478:	14e7883a 	add	r19,r2,r19
  80247c:	08017200 	call	801720 <__mulsi3>
  802480:	9009883a 	mov	r4,r18
  802484:	b00b883a 	mov	r5,r22
  802488:	d8800315 	stw	r2,12(sp)
  80248c:	08017200 	call	801720 <__mulsi3>
  802490:	b809883a 	mov	r4,r23
  802494:	b00b883a 	mov	r5,r22
  802498:	d8800215 	stw	r2,8(sp)
  80249c:	08017200 	call	801720 <__mulsi3>
  8024a0:	b80b883a 	mov	r5,r23
  8024a4:	8009883a 	mov	r4,r16
  8024a8:	d8800415 	stw	r2,16(sp)
  8024ac:	08017200 	call	801720 <__mulsi3>
  8024b0:	da800317 	ldw	r10,12(sp)
  8024b4:	d9c00217 	ldw	r7,8(sp)
  8024b8:	d9000017 	ldw	r4,0(sp)
  8024bc:	502ed43a 	srli	r23,r10,16
  8024c0:	11c5883a 	add	r2,r2,r7
  8024c4:	24e5883a 	add	r18,r4,r19
  8024c8:	b885883a 	add	r2,r23,r2
  8024cc:	d8c00517 	ldw	r3,20(sp)
  8024d0:	d9800717 	ldw	r6,28(sp)
  8024d4:	da000617 	ldw	r8,24(sp)
  8024d8:	da400417 	ldw	r9,16(sp)
  8024dc:	11c0022e 	bgeu	r2,r7,8024e8 <__muldf3+0x4f4>
  8024e0:	01000074 	movhi	r4,1
  8024e4:	4913883a 	add	r9,r9,r4
  8024e8:	100ed43a 	srli	r7,r2,16
  8024ec:	1004943a 	slli	r2,r2,16
  8024f0:	55ffffcc 	andi	r23,r10,65535
  8024f4:	3a53883a 	add	r9,r7,r9
  8024f8:	8809883a 	mov	r4,r17
  8024fc:	800b883a 	mov	r5,r16
  802500:	d8c00515 	stw	r3,20(sp)
  802504:	d9800715 	stw	r6,28(sp)
  802508:	da000615 	stw	r8,24(sp)
  80250c:	da400415 	stw	r9,16(sp)
  802510:	15ef883a 	add	r23,r2,r23
  802514:	08017200 	call	801720 <__mulsi3>
  802518:	8809883a 	mov	r4,r17
  80251c:	b00b883a 	mov	r5,r22
  802520:	d8800215 	stw	r2,8(sp)
  802524:	08017200 	call	801720 <__mulsi3>
  802528:	b00b883a 	mov	r5,r22
  80252c:	a809883a 	mov	r4,r21
  802530:	d8800315 	stw	r2,12(sp)
  802534:	08017200 	call	801720 <__mulsi3>
  802538:	8009883a 	mov	r4,r16
  80253c:	a80b883a 	mov	r5,r21
  802540:	1023883a 	mov	r17,r2
  802544:	08017200 	call	801720 <__mulsi3>
  802548:	d9c00217 	ldw	r7,8(sp)
  80254c:	da800317 	ldw	r10,12(sp)
  802550:	d8c00517 	ldw	r3,20(sp)
  802554:	3808d43a 	srli	r4,r7,16
  802558:	1285883a 	add	r2,r2,r10
  80255c:	d9800717 	ldw	r6,28(sp)
  802560:	2085883a 	add	r2,r4,r2
  802564:	da000617 	ldw	r8,24(sp)
  802568:	da400417 	ldw	r9,16(sp)
  80256c:	1280022e 	bgeu	r2,r10,802578 <__muldf3+0x584>
  802570:	01000074 	movhi	r4,1
  802574:	8923883a 	add	r17,r17,r4
  802578:	1008943a 	slli	r4,r2,16
  80257c:	39ffffcc 	andi	r7,r7,65535
  802580:	e4b9883a 	add	fp,fp,r18
  802584:	21cf883a 	add	r7,r4,r7
  802588:	e4e7803a 	cmpltu	r19,fp,r19
  80258c:	3d0f883a 	add	r7,r7,r20
  802590:	bf39883a 	add	fp,r23,fp
  802594:	99c9883a 	add	r4,r19,r7
  802598:	e5ef803a 	cmpltu	r23,fp,r23
  80259c:	490b883a 	add	r5,r9,r4
  8025a0:	1004d43a 	srli	r2,r2,16
  8025a4:	b965883a 	add	r18,r23,r5
  8025a8:	24c9803a 	cmpltu	r4,r4,r19
  8025ac:	3d29803a 	cmpltu	r20,r7,r20
  8025b0:	a128b03a 	or	r20,r20,r4
  8025b4:	95ef803a 	cmpltu	r23,r18,r23
  8025b8:	2a53803a 	cmpltu	r9,r5,r9
  8025bc:	a0a9883a 	add	r20,r20,r2
  8025c0:	4deeb03a 	or	r23,r9,r23
  8025c4:	a5ef883a 	add	r23,r20,r23
  8025c8:	bc63883a 	add	r17,r23,r17
  8025cc:	e004927a 	slli	r2,fp,9
  8025d0:	d9000117 	ldw	r4,4(sp)
  8025d4:	882e927a 	slli	r23,r17,9
  8025d8:	9022d5fa 	srli	r17,r18,23
  8025dc:	e038d5fa 	srli	fp,fp,23
  8025e0:	1104b03a 	or	r2,r2,r4
  8025e4:	9024927a 	slli	r18,r18,9
  8025e8:	1004c03a 	cmpne	r2,r2,zero
  8025ec:	bc62b03a 	or	r17,r23,r17
  8025f0:	1738b03a 	or	fp,r2,fp
  8025f4:	8880402c 	andhi	r2,r17,256
  8025f8:	e4a4b03a 	or	r18,fp,r18
  8025fc:	10000726 	beq	r2,zero,80261c <__muldf3+0x628>
  802600:	9006d07a 	srli	r3,r18,1
  802604:	880497fa 	slli	r2,r17,31
  802608:	9480004c 	andi	r18,r18,1
  80260c:	8822d07a 	srli	r17,r17,1
  802610:	1ca4b03a 	or	r18,r3,r18
  802614:	14a4b03a 	or	r18,r2,r18
  802618:	4007883a 	mov	r3,r8
  80261c:	1880ffc4 	addi	r2,r3,1023
  802620:	0080460e 	bge	zero,r2,80273c <__muldf3+0x748>
  802624:	910001cc 	andi	r4,r18,7
  802628:	20000726 	beq	r4,zero,802648 <__muldf3+0x654>
  80262c:	910003cc 	andi	r4,r18,15
  802630:	01400104 	movi	r5,4
  802634:	21400426 	beq	r4,r5,802648 <__muldf3+0x654>
  802638:	9149883a 	add	r4,r18,r5
  80263c:	24a5803a 	cmpltu	r18,r4,r18
  802640:	8ca3883a 	add	r17,r17,r18
  802644:	2025883a 	mov	r18,r4
  802648:	8900402c 	andhi	r4,r17,256
  80264c:	20000426 	beq	r4,zero,802660 <__muldf3+0x66c>
  802650:	18810004 	addi	r2,r3,1024
  802654:	00ffc034 	movhi	r3,65280
  802658:	18ffffc4 	addi	r3,r3,-1
  80265c:	88e2703a 	and	r17,r17,r3
  802660:	00c1ff84 	movi	r3,2046
  802664:	18bf1316 	blt	r3,r2,8022b4 <__alt_data_end+0xff8022b4>
  802668:	882c977a 	slli	r22,r17,29
  80266c:	9024d0fa 	srli	r18,r18,3
  802670:	8822927a 	slli	r17,r17,9
  802674:	1081ffcc 	andi	r2,r2,2047
  802678:	b4acb03a 	or	r22,r22,r18
  80267c:	8820d33a 	srli	r16,r17,12
  802680:	3027883a 	mov	r19,r6
  802684:	003eba06 	br	802170 <__alt_data_end+0xff802170>
  802688:	8080022c 	andhi	r2,r16,8
  80268c:	10000926 	beq	r2,zero,8026b4 <__muldf3+0x6c0>
  802690:	8880022c 	andhi	r2,r17,8
  802694:	1000071e 	bne	r2,zero,8026b4 <__muldf3+0x6c0>
  802698:	00800434 	movhi	r2,16
  80269c:	8c000234 	orhi	r16,r17,8
  8026a0:	10bfffc4 	addi	r2,r2,-1
  8026a4:	e027883a 	mov	r19,fp
  8026a8:	80a0703a 	and	r16,r16,r2
  8026ac:	902d883a 	mov	r22,r18
  8026b0:	003f1706 	br	802310 <__alt_data_end+0xff802310>
  8026b4:	00800434 	movhi	r2,16
  8026b8:	84000234 	orhi	r16,r16,8
  8026bc:	10bfffc4 	addi	r2,r2,-1
  8026c0:	80a0703a 	and	r16,r16,r2
  8026c4:	003f1206 	br	802310 <__alt_data_end+0xff802310>
  8026c8:	147ff604 	addi	r17,r2,-40
  8026cc:	3462983a 	sll	r17,r6,r17
  8026d0:	0025883a 	mov	r18,zero
  8026d4:	003ef306 	br	8022a4 <__alt_data_end+0xff8022a4>
  8026d8:	3009883a 	mov	r4,r6
  8026dc:	d9400215 	stw	r5,8(sp)
  8026e0:	d9800715 	stw	r6,28(sp)
  8026e4:	da400415 	stw	r9,16(sp)
  8026e8:	da800315 	stw	r10,12(sp)
  8026ec:	08029bc0 	call	8029bc <__clzsi2>
  8026f0:	10800804 	addi	r2,r2,32
  8026f4:	da800317 	ldw	r10,12(sp)
  8026f8:	da400417 	ldw	r9,16(sp)
  8026fc:	d9800717 	ldw	r6,28(sp)
  802700:	d9400217 	ldw	r5,8(sp)
  802704:	003edd06 	br	80227c <__alt_data_end+0xff80227c>
  802708:	143ff604 	addi	r16,r2,-40
  80270c:	ac20983a 	sll	r16,r21,r16
  802710:	002d883a 	mov	r22,zero
  802714:	003ec106 	br	80221c <__alt_data_end+0xff80221c>
  802718:	d9800715 	stw	r6,28(sp)
  80271c:	d9c00215 	stw	r7,8(sp)
  802720:	da400415 	stw	r9,16(sp)
  802724:	08029bc0 	call	8029bc <__clzsi2>
  802728:	10800804 	addi	r2,r2,32
  80272c:	da400417 	ldw	r9,16(sp)
  802730:	d9c00217 	ldw	r7,8(sp)
  802734:	d9800717 	ldw	r6,28(sp)
  802738:	003eae06 	br	8021f4 <__alt_data_end+0xff8021f4>
  80273c:	00c00044 	movi	r3,1
  802740:	1887c83a 	sub	r3,r3,r2
  802744:	01000e04 	movi	r4,56
  802748:	20fe8516 	blt	r4,r3,802160 <__alt_data_end+0xff802160>
  80274c:	010007c4 	movi	r4,31
  802750:	20c01b16 	blt	r4,r3,8027c0 <__muldf3+0x7cc>
  802754:	00800804 	movi	r2,32
  802758:	10c5c83a 	sub	r2,r2,r3
  80275c:	888a983a 	sll	r5,r17,r2
  802760:	90c8d83a 	srl	r4,r18,r3
  802764:	9084983a 	sll	r2,r18,r2
  802768:	88e2d83a 	srl	r17,r17,r3
  80276c:	2906b03a 	or	r3,r5,r4
  802770:	1004c03a 	cmpne	r2,r2,zero
  802774:	1886b03a 	or	r3,r3,r2
  802778:	188001cc 	andi	r2,r3,7
  80277c:	10000726 	beq	r2,zero,80279c <__muldf3+0x7a8>
  802780:	188003cc 	andi	r2,r3,15
  802784:	01000104 	movi	r4,4
  802788:	11000426 	beq	r2,r4,80279c <__muldf3+0x7a8>
  80278c:	1805883a 	mov	r2,r3
  802790:	10c00104 	addi	r3,r2,4
  802794:	1885803a 	cmpltu	r2,r3,r2
  802798:	88a3883a 	add	r17,r17,r2
  80279c:	8880202c 	andhi	r2,r17,128
  8027a0:	10001c26 	beq	r2,zero,802814 <__muldf3+0x820>
  8027a4:	3027883a 	mov	r19,r6
  8027a8:	00800044 	movi	r2,1
  8027ac:	0021883a 	mov	r16,zero
  8027b0:	002d883a 	mov	r22,zero
  8027b4:	003e6e06 	br	802170 <__alt_data_end+0xff802170>
  8027b8:	4007883a 	mov	r3,r8
  8027bc:	003f9706 	br	80261c <__alt_data_end+0xff80261c>
  8027c0:	017ff844 	movi	r5,-31
  8027c4:	2885c83a 	sub	r2,r5,r2
  8027c8:	888ad83a 	srl	r5,r17,r2
  8027cc:	00800804 	movi	r2,32
  8027d0:	18801a26 	beq	r3,r2,80283c <__muldf3+0x848>
  8027d4:	01001004 	movi	r4,64
  8027d8:	20c7c83a 	sub	r3,r4,r3
  8027dc:	88e2983a 	sll	r17,r17,r3
  8027e0:	8ca4b03a 	or	r18,r17,r18
  8027e4:	9004c03a 	cmpne	r2,r18,zero
  8027e8:	2884b03a 	or	r2,r5,r2
  8027ec:	144001cc 	andi	r17,r2,7
  8027f0:	88000d1e 	bne	r17,zero,802828 <__muldf3+0x834>
  8027f4:	0021883a 	mov	r16,zero
  8027f8:	102cd0fa 	srli	r22,r2,3
  8027fc:	3027883a 	mov	r19,r6
  802800:	0005883a 	mov	r2,zero
  802804:	b46cb03a 	or	r22,r22,r17
  802808:	003e5906 	br	802170 <__alt_data_end+0xff802170>
  80280c:	1007883a 	mov	r3,r2
  802810:	0023883a 	mov	r17,zero
  802814:	8820927a 	slli	r16,r17,9
  802818:	1805883a 	mov	r2,r3
  80281c:	8822977a 	slli	r17,r17,29
  802820:	8020d33a 	srli	r16,r16,12
  802824:	003ff406 	br	8027f8 <__alt_data_end+0xff8027f8>
  802828:	10c003cc 	andi	r3,r2,15
  80282c:	01000104 	movi	r4,4
  802830:	193ff626 	beq	r3,r4,80280c <__alt_data_end+0xff80280c>
  802834:	0023883a 	mov	r17,zero
  802838:	003fd506 	br	802790 <__alt_data_end+0xff802790>
  80283c:	0023883a 	mov	r17,zero
  802840:	003fe706 	br	8027e0 <__alt_data_end+0xff8027e0>
  802844:	00800434 	movhi	r2,16
  802848:	8c000234 	orhi	r16,r17,8
  80284c:	10bfffc4 	addi	r2,r2,-1
  802850:	3027883a 	mov	r19,r6
  802854:	80a0703a 	and	r16,r16,r2
  802858:	902d883a 	mov	r22,r18
  80285c:	003eac06 	br	802310 <__alt_data_end+0xff802310>

00802860 <__fixdfsi>:
  802860:	280cd53a 	srli	r6,r5,20
  802864:	00c00434 	movhi	r3,16
  802868:	18ffffc4 	addi	r3,r3,-1
  80286c:	3181ffcc 	andi	r6,r6,2047
  802870:	01c0ff84 	movi	r7,1022
  802874:	28c6703a 	and	r3,r5,r3
  802878:	280ad7fa 	srli	r5,r5,31
  80287c:	3980120e 	bge	r7,r6,8028c8 <__fixdfsi+0x68>
  802880:	00810744 	movi	r2,1053
  802884:	11800c16 	blt	r2,r6,8028b8 <__fixdfsi+0x58>
  802888:	00810cc4 	movi	r2,1075
  80288c:	1185c83a 	sub	r2,r2,r6
  802890:	01c007c4 	movi	r7,31
  802894:	18c00434 	orhi	r3,r3,16
  802898:	38800d16 	blt	r7,r2,8028d0 <__fixdfsi+0x70>
  80289c:	31befb44 	addi	r6,r6,-1043
  8028a0:	2084d83a 	srl	r2,r4,r2
  8028a4:	1986983a 	sll	r3,r3,r6
  8028a8:	1884b03a 	or	r2,r3,r2
  8028ac:	28000726 	beq	r5,zero,8028cc <__fixdfsi+0x6c>
  8028b0:	0085c83a 	sub	r2,zero,r2
  8028b4:	f800283a 	ret
  8028b8:	00a00034 	movhi	r2,32768
  8028bc:	10bfffc4 	addi	r2,r2,-1
  8028c0:	2885883a 	add	r2,r5,r2
  8028c4:	f800283a 	ret
  8028c8:	0005883a 	mov	r2,zero
  8028cc:	f800283a 	ret
  8028d0:	008104c4 	movi	r2,1043
  8028d4:	1185c83a 	sub	r2,r2,r6
  8028d8:	1884d83a 	srl	r2,r3,r2
  8028dc:	003ff306 	br	8028ac <__alt_data_end+0xff8028ac>

008028e0 <__floatsidf>:
  8028e0:	defffd04 	addi	sp,sp,-12
  8028e4:	dfc00215 	stw	ra,8(sp)
  8028e8:	dc400115 	stw	r17,4(sp)
  8028ec:	dc000015 	stw	r16,0(sp)
  8028f0:	20002b26 	beq	r4,zero,8029a0 <__floatsidf+0xc0>
  8028f4:	2023883a 	mov	r17,r4
  8028f8:	2020d7fa 	srli	r16,r4,31
  8028fc:	20002d16 	blt	r4,zero,8029b4 <__floatsidf+0xd4>
  802900:	8809883a 	mov	r4,r17
  802904:	08029bc0 	call	8029bc <__clzsi2>
  802908:	01410784 	movi	r5,1054
  80290c:	288bc83a 	sub	r5,r5,r2
  802910:	01010cc4 	movi	r4,1075
  802914:	2149c83a 	sub	r4,r4,r5
  802918:	00c007c4 	movi	r3,31
  80291c:	1900160e 	bge	r3,r4,802978 <__floatsidf+0x98>
  802920:	00c104c4 	movi	r3,1043
  802924:	1947c83a 	sub	r3,r3,r5
  802928:	88c6983a 	sll	r3,r17,r3
  80292c:	00800434 	movhi	r2,16
  802930:	10bfffc4 	addi	r2,r2,-1
  802934:	1886703a 	and	r3,r3,r2
  802938:	2941ffcc 	andi	r5,r5,2047
  80293c:	800d883a 	mov	r6,r16
  802940:	0005883a 	mov	r2,zero
  802944:	280a953a 	slli	r5,r5,20
  802948:	31803fcc 	andi	r6,r6,255
  80294c:	01000434 	movhi	r4,16
  802950:	300c97fa 	slli	r6,r6,31
  802954:	213fffc4 	addi	r4,r4,-1
  802958:	1906703a 	and	r3,r3,r4
  80295c:	1946b03a 	or	r3,r3,r5
  802960:	1986b03a 	or	r3,r3,r6
  802964:	dfc00217 	ldw	ra,8(sp)
  802968:	dc400117 	ldw	r17,4(sp)
  80296c:	dc000017 	ldw	r16,0(sp)
  802970:	dec00304 	addi	sp,sp,12
  802974:	f800283a 	ret
  802978:	00c002c4 	movi	r3,11
  80297c:	1887c83a 	sub	r3,r3,r2
  802980:	88c6d83a 	srl	r3,r17,r3
  802984:	8904983a 	sll	r2,r17,r4
  802988:	01000434 	movhi	r4,16
  80298c:	213fffc4 	addi	r4,r4,-1
  802990:	2941ffcc 	andi	r5,r5,2047
  802994:	1906703a 	and	r3,r3,r4
  802998:	800d883a 	mov	r6,r16
  80299c:	003fe906 	br	802944 <__alt_data_end+0xff802944>
  8029a0:	000d883a 	mov	r6,zero
  8029a4:	000b883a 	mov	r5,zero
  8029a8:	0007883a 	mov	r3,zero
  8029ac:	0005883a 	mov	r2,zero
  8029b0:	003fe406 	br	802944 <__alt_data_end+0xff802944>
  8029b4:	0123c83a 	sub	r17,zero,r4
  8029b8:	003fd106 	br	802900 <__alt_data_end+0xff802900>

008029bc <__clzsi2>:
  8029bc:	00bfffd4 	movui	r2,65535
  8029c0:	11000536 	bltu	r2,r4,8029d8 <__clzsi2+0x1c>
  8029c4:	00803fc4 	movi	r2,255
  8029c8:	11000f36 	bltu	r2,r4,802a08 <__clzsi2+0x4c>
  8029cc:	00800804 	movi	r2,32
  8029d0:	0007883a 	mov	r3,zero
  8029d4:	00000506 	br	8029ec <__clzsi2+0x30>
  8029d8:	00804034 	movhi	r2,256
  8029dc:	10bfffc4 	addi	r2,r2,-1
  8029e0:	11000c2e 	bgeu	r2,r4,802a14 <__clzsi2+0x58>
  8029e4:	00800204 	movi	r2,8
  8029e8:	00c00604 	movi	r3,24
  8029ec:	20c8d83a 	srl	r4,r4,r3
  8029f0:	00c02034 	movhi	r3,128
  8029f4:	18d2a5c4 	addi	r3,r3,19095
  8029f8:	1909883a 	add	r4,r3,r4
  8029fc:	20c00003 	ldbu	r3,0(r4)
  802a00:	10c5c83a 	sub	r2,r2,r3
  802a04:	f800283a 	ret
  802a08:	00800604 	movi	r2,24
  802a0c:	00c00204 	movi	r3,8
  802a10:	003ff606 	br	8029ec <__alt_data_end+0xff8029ec>
  802a14:	00800404 	movi	r2,16
  802a18:	1007883a 	mov	r3,r2
  802a1c:	003ff306 	br	8029ec <__alt_data_end+0xff8029ec>

00802a20 <malloc>:
  802a20:	00802034 	movhi	r2,128
  802a24:	10941f04 	addi	r2,r2,20604
  802a28:	200b883a 	mov	r5,r4
  802a2c:	11000017 	ldw	r4,0(r2)
  802a30:	0802b4c1 	jmpi	802b4c <_malloc_r>

00802a34 <free>:
  802a34:	00802034 	movhi	r2,128
  802a38:	10941f04 	addi	r2,r2,20604
  802a3c:	200b883a 	mov	r5,r4
  802a40:	11000017 	ldw	r4,0(r2)
  802a44:	0802a681 	jmpi	802a68 <_free_r>

00802a48 <memset>:
  802a48:	2005883a 	mov	r2,r4
  802a4c:	2007883a 	mov	r3,r4
  802a50:	218d883a 	add	r6,r4,r6
  802a54:	19800326 	beq	r3,r6,802a64 <memset+0x1c>
  802a58:	19400005 	stb	r5,0(r3)
  802a5c:	18c00044 	addi	r3,r3,1
  802a60:	003ffc06 	br	802a54 <__alt_data_end+0xff802a54>
  802a64:	f800283a 	ret

00802a68 <_free_r>:
  802a68:	28003726 	beq	r5,zero,802b48 <_free_r+0xe0>
  802a6c:	28ffff17 	ldw	r3,-4(r5)
  802a70:	28bfff04 	addi	r2,r5,-4
  802a74:	1800010e 	bge	r3,zero,802a7c <_free_r+0x14>
  802a78:	10c5883a 	add	r2,r2,r3
  802a7c:	01402034 	movhi	r5,128
  802a80:	2954da04 	addi	r5,r5,21352
  802a84:	28c00017 	ldw	r3,0(r5)
  802a88:	280d883a 	mov	r6,r5
  802a8c:	1800031e 	bne	r3,zero,802a9c <_free_r+0x34>
  802a90:	10000115 	stw	zero,4(r2)
  802a94:	28800015 	stw	r2,0(r5)
  802a98:	f800283a 	ret
  802a9c:	10c00c2e 	bgeu	r2,r3,802ad0 <_free_r+0x68>
  802aa0:	11000017 	ldw	r4,0(r2)
  802aa4:	110b883a 	add	r5,r2,r4
  802aa8:	1940041e 	bne	r3,r5,802abc <_free_r+0x54>
  802aac:	19400017 	ldw	r5,0(r3)
  802ab0:	18c00117 	ldw	r3,4(r3)
  802ab4:	2909883a 	add	r4,r5,r4
  802ab8:	11000015 	stw	r4,0(r2)
  802abc:	10c00115 	stw	r3,4(r2)
  802ac0:	30800015 	stw	r2,0(r6)
  802ac4:	f800283a 	ret
  802ac8:	11400336 	bltu	r2,r5,802ad8 <_free_r+0x70>
  802acc:	2807883a 	mov	r3,r5
  802ad0:	19400117 	ldw	r5,4(r3)
  802ad4:	283ffc1e 	bne	r5,zero,802ac8 <__alt_data_end+0xff802ac8>
  802ad8:	19c00017 	ldw	r7,0(r3)
  802adc:	19cd883a 	add	r6,r3,r7
  802ae0:	30800a1e 	bne	r6,r2,802b0c <_free_r+0xa4>
  802ae4:	10800017 	ldw	r2,0(r2)
  802ae8:	3885883a 	add	r2,r7,r2
  802aec:	18800015 	stw	r2,0(r3)
  802af0:	1889883a 	add	r4,r3,r2
  802af4:	2900141e 	bne	r5,r4,802b48 <_free_r+0xe0>
  802af8:	29000017 	ldw	r4,0(r5)
  802afc:	2085883a 	add	r2,r4,r2
  802b00:	18800015 	stw	r2,0(r3)
  802b04:	28800117 	ldw	r2,4(r5)
  802b08:	00000e06 	br	802b44 <_free_r+0xdc>
  802b0c:	1180032e 	bgeu	r2,r6,802b1c <_free_r+0xb4>
  802b10:	00800304 	movi	r2,12
  802b14:	20800015 	stw	r2,0(r4)
  802b18:	f800283a 	ret
  802b1c:	11000017 	ldw	r4,0(r2)
  802b20:	110d883a 	add	r6,r2,r4
  802b24:	2980061e 	bne	r5,r6,802b40 <_free_r+0xd8>
  802b28:	29800017 	ldw	r6,0(r5)
  802b2c:	3109883a 	add	r4,r6,r4
  802b30:	11000015 	stw	r4,0(r2)
  802b34:	29000117 	ldw	r4,4(r5)
  802b38:	11000115 	stw	r4,4(r2)
  802b3c:	00000106 	br	802b44 <_free_r+0xdc>
  802b40:	11400115 	stw	r5,4(r2)
  802b44:	18800115 	stw	r2,4(r3)
  802b48:	f800283a 	ret

00802b4c <_malloc_r>:
  802b4c:	defffb04 	addi	sp,sp,-20
  802b50:	00bfff04 	movi	r2,-4
  802b54:	dc400115 	stw	r17,4(sp)
  802b58:	2c4000c4 	addi	r17,r5,3
  802b5c:	88a2703a 	and	r17,r17,r2
  802b60:	dc800215 	stw	r18,8(sp)
  802b64:	dfc00415 	stw	ra,16(sp)
  802b68:	dcc00315 	stw	r19,12(sp)
  802b6c:	dc000015 	stw	r16,0(sp)
  802b70:	8c400204 	addi	r17,r17,8
  802b74:	00800304 	movi	r2,12
  802b78:	2025883a 	mov	r18,r4
  802b7c:	8880022e 	bgeu	r17,r2,802b88 <_malloc_r+0x3c>
  802b80:	1023883a 	mov	r17,r2
  802b84:	00000506 	br	802b9c <_malloc_r+0x50>
  802b88:	8800040e 	bge	r17,zero,802b9c <_malloc_r+0x50>
  802b8c:	00800304 	movi	r2,12
  802b90:	90800015 	stw	r2,0(r18)
  802b94:	0005883a 	mov	r2,zero
  802b98:	00003b06 	br	802c88 <_malloc_r+0x13c>
  802b9c:	897ffb36 	bltu	r17,r5,802b8c <__alt_data_end+0xff802b8c>
  802ba0:	00802034 	movhi	r2,128
  802ba4:	1094da04 	addi	r2,r2,21352
  802ba8:	10c00017 	ldw	r3,0(r2)
  802bac:	1009883a 	mov	r4,r2
  802bb0:	1821883a 	mov	r16,r3
  802bb4:	80000926 	beq	r16,zero,802bdc <_malloc_r+0x90>
  802bb8:	80800017 	ldw	r2,0(r16)
  802bbc:	1445c83a 	sub	r2,r2,r17
  802bc0:	10001516 	blt	r2,zero,802c18 <_malloc_r+0xcc>
  802bc4:	014002c4 	movi	r5,11
  802bc8:	28800d2e 	bgeu	r5,r2,802c00 <_malloc_r+0xb4>
  802bcc:	80800015 	stw	r2,0(r16)
  802bd0:	80a1883a 	add	r16,r16,r2
  802bd4:	84400015 	stw	r17,0(r16)
  802bd8:	8000221e 	bne	r16,zero,802c64 <_malloc_r+0x118>
  802bdc:	04002034 	movhi	r16,128
  802be0:	8414d904 	addi	r16,r16,21348
  802be4:	80800017 	ldw	r2,0(r16)
  802be8:	10000e1e 	bne	r2,zero,802c24 <_malloc_r+0xd8>
  802bec:	000b883a 	mov	r5,zero
  802bf0:	9009883a 	mov	r4,r18
  802bf4:	0802d2c0 	call	802d2c <_sbrk_r>
  802bf8:	80800015 	stw	r2,0(r16)
  802bfc:	00000906 	br	802c24 <_malloc_r+0xd8>
  802c00:	80800117 	ldw	r2,4(r16)
  802c04:	1c00021e 	bne	r3,r16,802c10 <_malloc_r+0xc4>
  802c08:	20800015 	stw	r2,0(r4)
  802c0c:	00001506 	br	802c64 <_malloc_r+0x118>
  802c10:	18800115 	stw	r2,4(r3)
  802c14:	00001306 	br	802c64 <_malloc_r+0x118>
  802c18:	8007883a 	mov	r3,r16
  802c1c:	84000117 	ldw	r16,4(r16)
  802c20:	003fe406 	br	802bb4 <__alt_data_end+0xff802bb4>
  802c24:	880b883a 	mov	r5,r17
  802c28:	9009883a 	mov	r4,r18
  802c2c:	0802d2c0 	call	802d2c <_sbrk_r>
  802c30:	04ffffc4 	movi	r19,-1
  802c34:	14ffd526 	beq	r2,r19,802b8c <__alt_data_end+0xff802b8c>
  802c38:	140000c4 	addi	r16,r2,3
  802c3c:	00ffff04 	movi	r3,-4
  802c40:	80e0703a 	and	r16,r16,r3
  802c44:	1400021e 	bne	r2,r16,802c50 <_malloc_r+0x104>
  802c48:	84400015 	stw	r17,0(r16)
  802c4c:	00000506 	br	802c64 <_malloc_r+0x118>
  802c50:	808bc83a 	sub	r5,r16,r2
  802c54:	9009883a 	mov	r4,r18
  802c58:	0802d2c0 	call	802d2c <_sbrk_r>
  802c5c:	14fffa1e 	bne	r2,r19,802c48 <__alt_data_end+0xff802c48>
  802c60:	003fca06 	br	802b8c <__alt_data_end+0xff802b8c>
  802c64:	810002c4 	addi	r4,r16,11
  802c68:	00bffe04 	movi	r2,-8
  802c6c:	80c00104 	addi	r3,r16,4
  802c70:	2084703a 	and	r2,r4,r2
  802c74:	10c7c83a 	sub	r3,r2,r3
  802c78:	18000326 	beq	r3,zero,802c88 <_malloc_r+0x13c>
  802c7c:	80e1883a 	add	r16,r16,r3
  802c80:	00c7c83a 	sub	r3,zero,r3
  802c84:	80c00015 	stw	r3,0(r16)
  802c88:	dfc00417 	ldw	ra,16(sp)
  802c8c:	dcc00317 	ldw	r19,12(sp)
  802c90:	dc800217 	ldw	r18,8(sp)
  802c94:	dc400117 	ldw	r17,4(sp)
  802c98:	dc000017 	ldw	r16,0(sp)
  802c9c:	dec00504 	addi	sp,sp,20
  802ca0:	f800283a 	ret

00802ca4 <_printf_r>:
  802ca4:	defffd04 	addi	sp,sp,-12
  802ca8:	dfc00015 	stw	ra,0(sp)
  802cac:	d9800115 	stw	r6,4(sp)
  802cb0:	d9c00215 	stw	r7,8(sp)
  802cb4:	20c00217 	ldw	r3,8(r4)
  802cb8:	01802034 	movhi	r6,128
  802cbc:	318f9204 	addi	r6,r6,15944
  802cc0:	19800115 	stw	r6,4(r3)
  802cc4:	280d883a 	mov	r6,r5
  802cc8:	21400217 	ldw	r5,8(r4)
  802ccc:	d9c00104 	addi	r7,sp,4
  802cd0:	08039000 	call	803900 <___vfprintf_internal_r>
  802cd4:	dfc00017 	ldw	ra,0(sp)
  802cd8:	dec00304 	addi	sp,sp,12
  802cdc:	f800283a 	ret

00802ce0 <printf>:
  802ce0:	defffc04 	addi	sp,sp,-16
  802ce4:	dfc00015 	stw	ra,0(sp)
  802ce8:	d9400115 	stw	r5,4(sp)
  802cec:	d9800215 	stw	r6,8(sp)
  802cf0:	d9c00315 	stw	r7,12(sp)
  802cf4:	00802034 	movhi	r2,128
  802cf8:	10941f04 	addi	r2,r2,20604
  802cfc:	10800017 	ldw	r2,0(r2)
  802d00:	01402034 	movhi	r5,128
  802d04:	294f9204 	addi	r5,r5,15944
  802d08:	10c00217 	ldw	r3,8(r2)
  802d0c:	d9800104 	addi	r6,sp,4
  802d10:	19400115 	stw	r5,4(r3)
  802d14:	200b883a 	mov	r5,r4
  802d18:	11000217 	ldw	r4,8(r2)
  802d1c:	0803e2c0 	call	803e2c <__vfprintf_internal>
  802d20:	dfc00017 	ldw	ra,0(sp)
  802d24:	dec00404 	addi	sp,sp,16
  802d28:	f800283a 	ret

00802d2c <_sbrk_r>:
  802d2c:	defffd04 	addi	sp,sp,-12
  802d30:	dc000015 	stw	r16,0(sp)
  802d34:	04002034 	movhi	r16,128
  802d38:	dc400115 	stw	r17,4(sp)
  802d3c:	8414db04 	addi	r16,r16,21356
  802d40:	2023883a 	mov	r17,r4
  802d44:	2809883a 	mov	r4,r5
  802d48:	dfc00215 	stw	ra,8(sp)
  802d4c:	80000015 	stw	zero,0(r16)
  802d50:	08043fc0 	call	8043fc <sbrk>
  802d54:	00ffffc4 	movi	r3,-1
  802d58:	10c0031e 	bne	r2,r3,802d68 <_sbrk_r+0x3c>
  802d5c:	80c00017 	ldw	r3,0(r16)
  802d60:	18000126 	beq	r3,zero,802d68 <_sbrk_r+0x3c>
  802d64:	88c00015 	stw	r3,0(r17)
  802d68:	dfc00217 	ldw	ra,8(sp)
  802d6c:	dc400117 	ldw	r17,4(sp)
  802d70:	dc000017 	ldw	r16,0(sp)
  802d74:	dec00304 	addi	sp,sp,12
  802d78:	f800283a 	ret

00802d7c <_sprintf_r>:
  802d7c:	defff704 	addi	sp,sp,-36
  802d80:	dfc00715 	stw	ra,28(sp)
  802d84:	d9c00815 	stw	r7,32(sp)
  802d88:	00808204 	movi	r2,520
  802d8c:	d880000d 	sth	r2,0(sp)
  802d90:	00a00034 	movhi	r2,32768
  802d94:	10bfffc4 	addi	r2,r2,-1
  802d98:	d8800515 	stw	r2,20(sp)
  802d9c:	d8800315 	stw	r2,12(sp)
  802da0:	00bfffc4 	movi	r2,-1
  802da4:	d880008d 	sth	r2,2(sp)
  802da8:	00802034 	movhi	r2,128
  802dac:	d9400415 	stw	r5,16(sp)
  802db0:	d9400215 	stw	r5,8(sp)
  802db4:	108fc004 	addi	r2,r2,16128
  802db8:	d9c00804 	addi	r7,sp,32
  802dbc:	d80b883a 	mov	r5,sp
  802dc0:	d8800115 	stw	r2,4(sp)
  802dc4:	d8000615 	stw	zero,24(sp)
  802dc8:	080334c0 	call	80334c <___svfprintf_internal_r>
  802dcc:	d8c00417 	ldw	r3,16(sp)
  802dd0:	18000005 	stb	zero,0(r3)
  802dd4:	dfc00717 	ldw	ra,28(sp)
  802dd8:	dec00904 	addi	sp,sp,36
  802ddc:	f800283a 	ret

00802de0 <sprintf>:
  802de0:	defff604 	addi	sp,sp,-40
  802de4:	dfc00715 	stw	ra,28(sp)
  802de8:	d9800815 	stw	r6,32(sp)
  802dec:	d9c00915 	stw	r7,36(sp)
  802df0:	00808204 	movi	r2,520
  802df4:	d880000d 	sth	r2,0(sp)
  802df8:	00a00034 	movhi	r2,32768
  802dfc:	10bfffc4 	addi	r2,r2,-1
  802e00:	d8800515 	stw	r2,20(sp)
  802e04:	d8800315 	stw	r2,12(sp)
  802e08:	00bfffc4 	movi	r2,-1
  802e0c:	d880008d 	sth	r2,2(sp)
  802e10:	00802034 	movhi	r2,128
  802e14:	108fc004 	addi	r2,r2,16128
  802e18:	d8800115 	stw	r2,4(sp)
  802e1c:	00802034 	movhi	r2,128
  802e20:	10941f04 	addi	r2,r2,20604
  802e24:	d9000415 	stw	r4,16(sp)
  802e28:	d9000215 	stw	r4,8(sp)
  802e2c:	11000017 	ldw	r4,0(r2)
  802e30:	280d883a 	mov	r6,r5
  802e34:	d9c00804 	addi	r7,sp,32
  802e38:	d80b883a 	mov	r5,sp
  802e3c:	d8000615 	stw	zero,24(sp)
  802e40:	080334c0 	call	80334c <___svfprintf_internal_r>
  802e44:	d8c00417 	ldw	r3,16(sp)
  802e48:	18000005 	stb	zero,0(r3)
  802e4c:	dfc00717 	ldw	ra,28(sp)
  802e50:	dec00a04 	addi	sp,sp,40
  802e54:	f800283a 	ret

00802e58 <strcmp>:
  802e58:	20800003 	ldbu	r2,0(r4)
  802e5c:	10c03fcc 	andi	r3,r2,255
  802e60:	18c0201c 	xori	r3,r3,128
  802e64:	18ffe004 	addi	r3,r3,-128
  802e68:	18000526 	beq	r3,zero,802e80 <strcmp+0x28>
  802e6c:	29800007 	ldb	r6,0(r5)
  802e70:	1980031e 	bne	r3,r6,802e80 <strcmp+0x28>
  802e74:	21000044 	addi	r4,r4,1
  802e78:	29400044 	addi	r5,r5,1
  802e7c:	003ff606 	br	802e58 <__alt_data_end+0xff802e58>
  802e80:	28c00003 	ldbu	r3,0(r5)
  802e84:	10803fcc 	andi	r2,r2,255
  802e88:	10c5c83a 	sub	r2,r2,r3
  802e8c:	f800283a 	ret

00802e90 <strcpy>:
  802e90:	2005883a 	mov	r2,r4
  802e94:	200d883a 	mov	r6,r4
  802e98:	28c00003 	ldbu	r3,0(r5)
  802e9c:	31800044 	addi	r6,r6,1
  802ea0:	29400044 	addi	r5,r5,1
  802ea4:	30ffffc5 	stb	r3,-1(r6)
  802ea8:	18c03fcc 	andi	r3,r3,255
  802eac:	18c0201c 	xori	r3,r3,128
  802eb0:	18ffe004 	addi	r3,r3,-128
  802eb4:	183ff81e 	bne	r3,zero,802e98 <__alt_data_end+0xff802e98>
  802eb8:	f800283a 	ret

00802ebc <strlen>:
  802ebc:	2005883a 	mov	r2,r4
  802ec0:	10c00007 	ldb	r3,0(r2)
  802ec4:	18000226 	beq	r3,zero,802ed0 <strlen+0x14>
  802ec8:	10800044 	addi	r2,r2,1
  802ecc:	003ffc06 	br	802ec0 <__alt_data_end+0xff802ec0>
  802ed0:	1105c83a 	sub	r2,r2,r4
  802ed4:	f800283a 	ret

00802ed8 <strncpy>:
  802ed8:	2005883a 	mov	r2,r4
  802edc:	200f883a 	mov	r7,r4
  802ee0:	30000c26 	beq	r6,zero,802f14 <strncpy+0x3c>
  802ee4:	2a000003 	ldbu	r8,0(r5)
  802ee8:	38c00044 	addi	r3,r7,1
  802eec:	31bfffc4 	addi	r6,r6,-1
  802ef0:	3a000005 	stb	r8,0(r7)
  802ef4:	42003fcc 	andi	r8,r8,255
  802ef8:	4200201c 	xori	r8,r8,128
  802efc:	423fe004 	addi	r8,r8,-128
  802f00:	29400044 	addi	r5,r5,1
  802f04:	180f883a 	mov	r7,r3
  802f08:	403ff51e 	bne	r8,zero,802ee0 <__alt_data_end+0xff802ee0>
  802f0c:	198d883a 	add	r6,r3,r6
  802f10:	00000106 	br	802f18 <strncpy+0x40>
  802f14:	f800283a 	ret
  802f18:	30c00326 	beq	r6,r3,802f28 <strncpy+0x50>
  802f1c:	18000005 	stb	zero,0(r3)
  802f20:	18c00044 	addi	r3,r3,1
  802f24:	003ffc06 	br	802f18 <__alt_data_end+0xff802f18>
  802f28:	f800283a 	ret

00802f2c <strtok>:
  802f2c:	00802034 	movhi	r2,128
  802f30:	defffc04 	addi	sp,sp,-16
  802f34:	10941f04 	addi	r2,r2,20604
  802f38:	dc000115 	stw	r16,4(sp)
  802f3c:	14000017 	ldw	r16,0(r2)
  802f40:	dc400215 	stw	r17,8(sp)
  802f44:	dfc00315 	stw	ra,12(sp)
  802f48:	80803617 	ldw	r2,216(r16)
  802f4c:	2023883a 	mov	r17,r4
  802f50:	1000211e 	bne	r2,zero,802fd8 <strtok+0xac>
  802f54:	01001404 	movi	r4,80
  802f58:	d9400015 	stw	r5,0(sp)
  802f5c:	0802a200 	call	802a20 <malloc>
  802f60:	80803615 	stw	r2,216(r16)
  802f64:	10000215 	stw	zero,8(r2)
  802f68:	10000015 	stw	zero,0(r2)
  802f6c:	10000115 	stw	zero,4(r2)
  802f70:	80803617 	ldw	r2,216(r16)
  802f74:	10000415 	stw	zero,16(r2)
  802f78:	10000315 	stw	zero,12(r2)
  802f7c:	80803617 	ldw	r2,216(r16)
  802f80:	10000615 	stw	zero,24(r2)
  802f84:	10000515 	stw	zero,20(r2)
  802f88:	80803617 	ldw	r2,216(r16)
  802f8c:	10000b15 	stw	zero,44(r2)
  802f90:	10000a15 	stw	zero,40(r2)
  802f94:	80803617 	ldw	r2,216(r16)
  802f98:	10000d15 	stw	zero,52(r2)
  802f9c:	10000c15 	stw	zero,48(r2)
  802fa0:	80803617 	ldw	r2,216(r16)
  802fa4:	10000f15 	stw	zero,60(r2)
  802fa8:	10000e15 	stw	zero,56(r2)
  802fac:	80803617 	ldw	r2,216(r16)
  802fb0:	10001115 	stw	zero,68(r2)
  802fb4:	10001015 	stw	zero,64(r2)
  802fb8:	80803617 	ldw	r2,216(r16)
  802fbc:	10001315 	stw	zero,76(r2)
  802fc0:	10001215 	stw	zero,72(r2)
  802fc4:	80803617 	ldw	r2,216(r16)
  802fc8:	10000705 	stb	zero,28(r2)
  802fcc:	80803617 	ldw	r2,216(r16)
  802fd0:	d9400017 	ldw	r5,0(sp)
  802fd4:	10000915 	stw	zero,36(r2)
  802fd8:	81803617 	ldw	r6,216(r16)
  802fdc:	01c00044 	movi	r7,1
  802fe0:	8809883a 	mov	r4,r17
  802fe4:	dfc00317 	ldw	ra,12(sp)
  802fe8:	dc400217 	ldw	r17,8(sp)
  802fec:	dc000117 	ldw	r16,4(sp)
  802ff0:	dec00404 	addi	sp,sp,16
  802ff4:	0802ff81 	jmpi	802ff8 <__strtok_r>

00802ff8 <__strtok_r>:
  802ff8:	2000021e 	bne	r4,zero,803004 <__strtok_r+0xc>
  802ffc:	31000017 	ldw	r4,0(r6)
  803000:	20001f26 	beq	r4,zero,803080 <__strtok_r+0x88>
  803004:	2005883a 	mov	r2,r4
  803008:	12000007 	ldb	r8,0(r2)
  80300c:	21000044 	addi	r4,r4,1
  803010:	2807883a 	mov	r3,r5
  803014:	1a400007 	ldb	r9,0(r3)
  803018:	48000626 	beq	r9,zero,803034 <__strtok_r+0x3c>
  80301c:	18c00044 	addi	r3,r3,1
  803020:	427ffc1e 	bne	r8,r9,803014 <__alt_data_end+0xff803014>
  803024:	383ff71e 	bne	r7,zero,803004 <__alt_data_end+0xff803004>
  803028:	31000015 	stw	r4,0(r6)
  80302c:	10000005 	stb	zero,0(r2)
  803030:	f800283a 	ret
  803034:	4000061e 	bne	r8,zero,803050 <__strtok_r+0x58>
  803038:	30000015 	stw	zero,0(r6)
  80303c:	00001006 	br	803080 <__strtok_r+0x88>
  803040:	19c00007 	ldb	r7,0(r3)
  803044:	51c00826 	beq	r10,r7,803068 <__strtok_r+0x70>
  803048:	18c00044 	addi	r3,r3,1
  80304c:	383ffc1e 	bne	r7,zero,803040 <__alt_data_end+0xff803040>
  803050:	2011883a 	mov	r8,r4
  803054:	21000044 	addi	r4,r4,1
  803058:	2013883a 	mov	r9,r4
  80305c:	42800007 	ldb	r10,0(r8)
  803060:	2807883a 	mov	r3,r5
  803064:	003ff606 	br	803040 <__alt_data_end+0xff803040>
  803068:	50000226 	beq	r10,zero,803074 <__strtok_r+0x7c>
  80306c:	40000005 	stb	zero,0(r8)
  803070:	00000106 	br	803078 <__strtok_r+0x80>
  803074:	0013883a 	mov	r9,zero
  803078:	32400015 	stw	r9,0(r6)
  80307c:	f800283a 	ret
  803080:	0005883a 	mov	r2,zero
  803084:	f800283a 	ret

00803088 <strtok_r>:
  803088:	01c00044 	movi	r7,1
  80308c:	0802ff81 	jmpi	802ff8 <__strtok_r>

00803090 <_strtol_r>:
  803090:	00802034 	movhi	r2,128
  803094:	defff304 	addi	sp,sp,-52
  803098:	10941d04 	addi	r2,r2,20596
  80309c:	dcc00615 	stw	r19,24(sp)
  8030a0:	14c00017 	ldw	r19,0(r2)
  8030a4:	df000b15 	stw	fp,44(sp)
  8030a8:	dd400815 	stw	r21,32(sp)
  8030ac:	dd000715 	stw	r20,28(sp)
  8030b0:	dc800515 	stw	r18,20(sp)
  8030b4:	202b883a 	mov	r21,r4
  8030b8:	dfc00c15 	stw	ra,48(sp)
  8030bc:	ddc00a15 	stw	r23,40(sp)
  8030c0:	dd800915 	stw	r22,36(sp)
  8030c4:	dc400415 	stw	r17,16(sp)
  8030c8:	dc000315 	stw	r16,12(sp)
  8030cc:	2829883a 	mov	r20,r5
  8030d0:	3039883a 	mov	fp,r6
  8030d4:	3825883a 	mov	r18,r7
  8030d8:	2809883a 	mov	r4,r5
  8030dc:	2005883a 	mov	r2,r4
  8030e0:	14400003 	ldbu	r17,0(r2)
  8030e4:	24000044 	addi	r16,r4,1
  8030e8:	8009883a 	mov	r4,r16
  8030ec:	9c47883a 	add	r3,r19,r17
  8030f0:	18c00043 	ldbu	r3,1(r3)
  8030f4:	18c0020c 	andi	r3,r3,8
  8030f8:	183ff81e 	bne	r3,zero,8030dc <__alt_data_end+0xff8030dc>
  8030fc:	00c00b44 	movi	r3,45
  803100:	88c0041e 	bne	r17,r3,803114 <_strtol_r+0x84>
  803104:	14000084 	addi	r16,r2,2
  803108:	14400043 	ldbu	r17,1(r2)
  80310c:	05c00044 	movi	r23,1
  803110:	00000506 	br	803128 <_strtol_r+0x98>
  803114:	00c00ac4 	movi	r3,43
  803118:	88c0021e 	bne	r17,r3,803124 <_strtol_r+0x94>
  80311c:	14400043 	ldbu	r17,1(r2)
  803120:	14000084 	addi	r16,r2,2
  803124:	002f883a 	mov	r23,zero
  803128:	90000326 	beq	r18,zero,803138 <_strtol_r+0xa8>
  80312c:	00800404 	movi	r2,16
  803130:	90800a1e 	bne	r18,r2,80315c <_strtol_r+0xcc>
  803134:	00005406 	br	803288 <_strtol_r+0x1f8>
  803138:	00800c04 	movi	r2,48
  80313c:	8880501e 	bne	r17,r2,803280 <_strtol_r+0x1f0>
  803140:	80800003 	ldbu	r2,0(r16)
  803144:	00c01604 	movi	r3,88
  803148:	108037cc 	andi	r2,r2,223
  80314c:	10c0481e 	bne	r2,r3,803270 <_strtol_r+0x1e0>
  803150:	84400043 	ldbu	r17,1(r16)
  803154:	04800404 	movi	r18,16
  803158:	84000084 	addi	r16,r16,2
  80315c:	00e00034 	movhi	r3,32768
  803160:	18ffffc4 	addi	r3,r3,-1
  803164:	b8c7883a 	add	r3,r23,r3
  803168:	1809883a 	mov	r4,r3
  80316c:	900b883a 	mov	r5,r18
  803170:	d8c00015 	stw	r3,0(sp)
  803174:	08016c80 	call	8016c8 <__umodsi3>
  803178:	d8c00017 	ldw	r3,0(sp)
  80317c:	900b883a 	mov	r5,r18
  803180:	102d883a 	mov	r22,r2
  803184:	1809883a 	mov	r4,r3
  803188:	08016640 	call	801664 <__udivsi3>
  80318c:	100d883a 	mov	r6,r2
  803190:	0009883a 	mov	r4,zero
  803194:	0005883a 	mov	r2,zero
  803198:	01c00044 	movi	r7,1
  80319c:	023fffc4 	movi	r8,-1
  8031a0:	9c47883a 	add	r3,r19,r17
  8031a4:	18c00043 	ldbu	r3,1(r3)
  8031a8:	1940010c 	andi	r5,r3,4
  8031ac:	28000226 	beq	r5,zero,8031b8 <_strtol_r+0x128>
  8031b0:	8c7ff404 	addi	r17,r17,-48
  8031b4:	00000706 	br	8031d4 <_strtol_r+0x144>
  8031b8:	18c000cc 	andi	r3,r3,3
  8031bc:	18001a26 	beq	r3,zero,803228 <_strtol_r+0x198>
  8031c0:	19c00226 	beq	r3,r7,8031cc <_strtol_r+0x13c>
  8031c4:	00c015c4 	movi	r3,87
  8031c8:	00000106 	br	8031d0 <_strtol_r+0x140>
  8031cc:	00c00dc4 	movi	r3,55
  8031d0:	88e3c83a 	sub	r17,r17,r3
  8031d4:	8c80140e 	bge	r17,r18,803228 <_strtol_r+0x198>
  8031d8:	22001026 	beq	r4,r8,80321c <_strtol_r+0x18c>
  8031dc:	30800e36 	bltu	r6,r2,803218 <_strtol_r+0x188>
  8031e0:	1180011e 	bne	r2,r6,8031e8 <_strtol_r+0x158>
  8031e4:	b4400c16 	blt	r22,r17,803218 <_strtol_r+0x188>
  8031e8:	1009883a 	mov	r4,r2
  8031ec:	900b883a 	mov	r5,r18
  8031f0:	d9800015 	stw	r6,0(sp)
  8031f4:	d9c00115 	stw	r7,4(sp)
  8031f8:	da000215 	stw	r8,8(sp)
  8031fc:	08017200 	call	801720 <__mulsi3>
  803200:	8885883a 	add	r2,r17,r2
  803204:	01000044 	movi	r4,1
  803208:	d9800017 	ldw	r6,0(sp)
  80320c:	d9c00117 	ldw	r7,4(sp)
  803210:	da000217 	ldw	r8,8(sp)
  803214:	00000106 	br	80321c <_strtol_r+0x18c>
  803218:	013fffc4 	movi	r4,-1
  80321c:	84400003 	ldbu	r17,0(r16)
  803220:	84000044 	addi	r16,r16,1
  803224:	003fde06 	br	8031a0 <__alt_data_end+0xff8031a0>
  803228:	00ffffc4 	movi	r3,-1
  80322c:	20c0071e 	bne	r4,r3,80324c <_strtol_r+0x1bc>
  803230:	00a00034 	movhi	r2,32768
  803234:	10c5883a 	add	r2,r2,r3
  803238:	00c00884 	movi	r3,34
  80323c:	a8c00015 	stw	r3,0(r21)
  803240:	b885883a 	add	r2,r23,r2
  803244:	e000051e 	bne	fp,zero,80325c <_strtol_r+0x1cc>
  803248:	00001206 	br	803294 <_strtol_r+0x204>
  80324c:	b8000126 	beq	r23,zero,803254 <_strtol_r+0x1c4>
  803250:	0085c83a 	sub	r2,zero,r2
  803254:	e0000f26 	beq	fp,zero,803294 <_strtol_r+0x204>
  803258:	20000226 	beq	r4,zero,803264 <_strtol_r+0x1d4>
  80325c:	843fffc4 	addi	r16,r16,-1
  803260:	00000106 	br	803268 <_strtol_r+0x1d8>
  803264:	a021883a 	mov	r16,r20
  803268:	e4000015 	stw	r16,0(fp)
  80326c:	00000906 	br	803294 <_strtol_r+0x204>
  803270:	04400c04 	movi	r17,48
  803274:	903fb91e 	bne	r18,zero,80315c <__alt_data_end+0xff80315c>
  803278:	04800204 	movi	r18,8
  80327c:	003fb706 	br	80315c <__alt_data_end+0xff80315c>
  803280:	04800284 	movi	r18,10
  803284:	003fb506 	br	80315c <__alt_data_end+0xff80315c>
  803288:	00800c04 	movi	r2,48
  80328c:	88bfac26 	beq	r17,r2,803140 <__alt_data_end+0xff803140>
  803290:	003fb206 	br	80315c <__alt_data_end+0xff80315c>
  803294:	dfc00c17 	ldw	ra,48(sp)
  803298:	df000b17 	ldw	fp,44(sp)
  80329c:	ddc00a17 	ldw	r23,40(sp)
  8032a0:	dd800917 	ldw	r22,36(sp)
  8032a4:	dd400817 	ldw	r21,32(sp)
  8032a8:	dd000717 	ldw	r20,28(sp)
  8032ac:	dcc00617 	ldw	r19,24(sp)
  8032b0:	dc800517 	ldw	r18,20(sp)
  8032b4:	dc400417 	ldw	r17,16(sp)
  8032b8:	dc000317 	ldw	r16,12(sp)
  8032bc:	dec00d04 	addi	sp,sp,52
  8032c0:	f800283a 	ret

008032c4 <strtol>:
  8032c4:	00802034 	movhi	r2,128
  8032c8:	10941f04 	addi	r2,r2,20604
  8032cc:	300f883a 	mov	r7,r6
  8032d0:	280d883a 	mov	r6,r5
  8032d4:	200b883a 	mov	r5,r4
  8032d8:	11000017 	ldw	r4,0(r2)
  8032dc:	08030901 	jmpi	803090 <_strtol_r>

008032e0 <print_repeat>:
  8032e0:	defffb04 	addi	sp,sp,-20
  8032e4:	dc800315 	stw	r18,12(sp)
  8032e8:	dc400215 	stw	r17,8(sp)
  8032ec:	dc000115 	stw	r16,4(sp)
  8032f0:	dfc00415 	stw	ra,16(sp)
  8032f4:	2025883a 	mov	r18,r4
  8032f8:	2823883a 	mov	r17,r5
  8032fc:	d9800005 	stb	r6,0(sp)
  803300:	3821883a 	mov	r16,r7
  803304:	04000a0e 	bge	zero,r16,803330 <print_repeat+0x50>
  803308:	88800117 	ldw	r2,4(r17)
  80330c:	01c00044 	movi	r7,1
  803310:	d80d883a 	mov	r6,sp
  803314:	880b883a 	mov	r5,r17
  803318:	9009883a 	mov	r4,r18
  80331c:	103ee83a 	callr	r2
  803320:	843fffc4 	addi	r16,r16,-1
  803324:	103ff726 	beq	r2,zero,803304 <__alt_data_end+0xff803304>
  803328:	00bfffc4 	movi	r2,-1
  80332c:	00000106 	br	803334 <print_repeat+0x54>
  803330:	0005883a 	mov	r2,zero
  803334:	dfc00417 	ldw	ra,16(sp)
  803338:	dc800317 	ldw	r18,12(sp)
  80333c:	dc400217 	ldw	r17,8(sp)
  803340:	dc000117 	ldw	r16,4(sp)
  803344:	dec00504 	addi	sp,sp,20
  803348:	f800283a 	ret

0080334c <___svfprintf_internal_r>:
  80334c:	deffe504 	addi	sp,sp,-108
  803350:	d8c00804 	addi	r3,sp,32
  803354:	ddc01815 	stw	r23,96(sp)
  803358:	dd801715 	stw	r22,92(sp)
  80335c:	dd401615 	stw	r21,88(sp)
  803360:	dd001515 	stw	r20,84(sp)
  803364:	dcc01415 	stw	r19,80(sp)
  803368:	dc801315 	stw	r18,76(sp)
  80336c:	dc401215 	stw	r17,72(sp)
  803370:	dc001115 	stw	r16,68(sp)
  803374:	dfc01a15 	stw	ra,104(sp)
  803378:	df001915 	stw	fp,100(sp)
  80337c:	2029883a 	mov	r20,r4
  803380:	2823883a 	mov	r17,r5
  803384:	382d883a 	mov	r22,r7
  803388:	d9800f15 	stw	r6,60(sp)
  80338c:	0021883a 	mov	r16,zero
  803390:	d8000e15 	stw	zero,56(sp)
  803394:	d8000a15 	stw	zero,40(sp)
  803398:	002b883a 	mov	r21,zero
  80339c:	0027883a 	mov	r19,zero
  8033a0:	0025883a 	mov	r18,zero
  8033a4:	d8000c15 	stw	zero,48(sp)
  8033a8:	d8000b15 	stw	zero,44(sp)
  8033ac:	002f883a 	mov	r23,zero
  8033b0:	d8c00915 	stw	r3,36(sp)
  8033b4:	d8c00f17 	ldw	r3,60(sp)
  8033b8:	19000003 	ldbu	r4,0(r3)
  8033bc:	20803fcc 	andi	r2,r4,255
  8033c0:	1080201c 	xori	r2,r2,128
  8033c4:	10bfe004 	addi	r2,r2,-128
  8033c8:	10011e26 	beq	r2,zero,803844 <___svfprintf_internal_r+0x4f8>
  8033cc:	00c00044 	movi	r3,1
  8033d0:	b8c01426 	beq	r23,r3,803424 <___svfprintf_internal_r+0xd8>
  8033d4:	1dc00216 	blt	r3,r23,8033e0 <___svfprintf_internal_r+0x94>
  8033d8:	b8000626 	beq	r23,zero,8033f4 <___svfprintf_internal_r+0xa8>
  8033dc:	00011506 	br	803834 <___svfprintf_internal_r+0x4e8>
  8033e0:	01400084 	movi	r5,2
  8033e4:	b9401d26 	beq	r23,r5,80345c <___svfprintf_internal_r+0x110>
  8033e8:	014000c4 	movi	r5,3
  8033ec:	b9402b26 	beq	r23,r5,80349c <___svfprintf_internal_r+0x150>
  8033f0:	00011006 	br	803834 <___svfprintf_internal_r+0x4e8>
  8033f4:	01400944 	movi	r5,37
  8033f8:	1140fc26 	beq	r2,r5,8037ec <___svfprintf_internal_r+0x4a0>
  8033fc:	88800117 	ldw	r2,4(r17)
  803400:	d9000005 	stb	r4,0(sp)
  803404:	01c00044 	movi	r7,1
  803408:	d80d883a 	mov	r6,sp
  80340c:	880b883a 	mov	r5,r17
  803410:	a009883a 	mov	r4,r20
  803414:	103ee83a 	callr	r2
  803418:	1000d81e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  80341c:	84000044 	addi	r16,r16,1
  803420:	00010406 	br	803834 <___svfprintf_internal_r+0x4e8>
  803424:	01400c04 	movi	r5,48
  803428:	1140fa26 	beq	r2,r5,803814 <___svfprintf_internal_r+0x4c8>
  80342c:	01400944 	movi	r5,37
  803430:	11400a1e 	bne	r2,r5,80345c <___svfprintf_internal_r+0x110>
  803434:	d8800005 	stb	r2,0(sp)
  803438:	88800117 	ldw	r2,4(r17)
  80343c:	b80f883a 	mov	r7,r23
  803440:	d80d883a 	mov	r6,sp
  803444:	880b883a 	mov	r5,r17
  803448:	a009883a 	mov	r4,r20
  80344c:	103ee83a 	callr	r2
  803450:	1000ca1e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  803454:	84000044 	addi	r16,r16,1
  803458:	0000f506 	br	803830 <___svfprintf_internal_r+0x4e4>
  80345c:	25fff404 	addi	r23,r4,-48
  803460:	bdc03fcc 	andi	r23,r23,255
  803464:	00c00244 	movi	r3,9
  803468:	1dc00936 	bltu	r3,r23,803490 <___svfprintf_internal_r+0x144>
  80346c:	00bfffc4 	movi	r2,-1
  803470:	90800426 	beq	r18,r2,803484 <___svfprintf_internal_r+0x138>
  803474:	01400284 	movi	r5,10
  803478:	9009883a 	mov	r4,r18
  80347c:	08017200 	call	801720 <__mulsi3>
  803480:	00000106 	br	803488 <___svfprintf_internal_r+0x13c>
  803484:	0005883a 	mov	r2,zero
  803488:	b8a5883a 	add	r18,r23,r2
  80348c:	0000e206 	br	803818 <___svfprintf_internal_r+0x4cc>
  803490:	01400b84 	movi	r5,46
  803494:	1140e426 	beq	r2,r5,803828 <___svfprintf_internal_r+0x4dc>
  803498:	05c00084 	movi	r23,2
  80349c:	213ff404 	addi	r4,r4,-48
  8034a0:	27003fcc 	andi	fp,r4,255
  8034a4:	00c00244 	movi	r3,9
  8034a8:	1f000936 	bltu	r3,fp,8034d0 <___svfprintf_internal_r+0x184>
  8034ac:	00bfffc4 	movi	r2,-1
  8034b0:	98800426 	beq	r19,r2,8034c4 <___svfprintf_internal_r+0x178>
  8034b4:	01400284 	movi	r5,10
  8034b8:	9809883a 	mov	r4,r19
  8034bc:	08017200 	call	801720 <__mulsi3>
  8034c0:	00000106 	br	8034c8 <___svfprintf_internal_r+0x17c>
  8034c4:	0005883a 	mov	r2,zero
  8034c8:	e0a7883a 	add	r19,fp,r2
  8034cc:	0000d906 	br	803834 <___svfprintf_internal_r+0x4e8>
  8034d0:	00c01b04 	movi	r3,108
  8034d4:	10c0d226 	beq	r2,r3,803820 <___svfprintf_internal_r+0x4d4>
  8034d8:	013fffc4 	movi	r4,-1
  8034dc:	99000226 	beq	r19,r4,8034e8 <___svfprintf_internal_r+0x19c>
  8034e0:	d8000b15 	stw	zero,44(sp)
  8034e4:	00000106 	br	8034ec <___svfprintf_internal_r+0x1a0>
  8034e8:	04c00044 	movi	r19,1
  8034ec:	01001a44 	movi	r4,105
  8034f0:	11001626 	beq	r2,r4,80354c <___svfprintf_internal_r+0x200>
  8034f4:	20800916 	blt	r4,r2,80351c <___svfprintf_internal_r+0x1d0>
  8034f8:	010018c4 	movi	r4,99
  8034fc:	11008826 	beq	r2,r4,803720 <___svfprintf_internal_r+0x3d4>
  803500:	01001904 	movi	r4,100
  803504:	11001126 	beq	r2,r4,80354c <___svfprintf_internal_r+0x200>
  803508:	01001604 	movi	r4,88
  80350c:	1100c81e 	bne	r2,r4,803830 <___svfprintf_internal_r+0x4e4>
  803510:	00c00044 	movi	r3,1
  803514:	d8c00e15 	stw	r3,56(sp)
  803518:	00001506 	br	803570 <___svfprintf_internal_r+0x224>
  80351c:	01001cc4 	movi	r4,115
  803520:	11009826 	beq	r2,r4,803784 <___svfprintf_internal_r+0x438>
  803524:	20800416 	blt	r4,r2,803538 <___svfprintf_internal_r+0x1ec>
  803528:	01001bc4 	movi	r4,111
  80352c:	1100c01e 	bne	r2,r4,803830 <___svfprintf_internal_r+0x4e4>
  803530:	05400204 	movi	r21,8
  803534:	00000f06 	br	803574 <___svfprintf_internal_r+0x228>
  803538:	01001d44 	movi	r4,117
  80353c:	11000d26 	beq	r2,r4,803574 <___svfprintf_internal_r+0x228>
  803540:	01001e04 	movi	r4,120
  803544:	11000a26 	beq	r2,r4,803570 <___svfprintf_internal_r+0x224>
  803548:	0000b906 	br	803830 <___svfprintf_internal_r+0x4e4>
  80354c:	d8c00a17 	ldw	r3,40(sp)
  803550:	b7000104 	addi	fp,r22,4
  803554:	18000726 	beq	r3,zero,803574 <___svfprintf_internal_r+0x228>
  803558:	df000d15 	stw	fp,52(sp)
  80355c:	b5c00017 	ldw	r23,0(r22)
  803560:	b800080e 	bge	r23,zero,803584 <___svfprintf_internal_r+0x238>
  803564:	05efc83a 	sub	r23,zero,r23
  803568:	02400044 	movi	r9,1
  80356c:	00000606 	br	803588 <___svfprintf_internal_r+0x23c>
  803570:	05400404 	movi	r21,16
  803574:	b0c00104 	addi	r3,r22,4
  803578:	d8c00d15 	stw	r3,52(sp)
  80357c:	b5c00017 	ldw	r23,0(r22)
  803580:	d8000a15 	stw	zero,40(sp)
  803584:	0013883a 	mov	r9,zero
  803588:	d839883a 	mov	fp,sp
  80358c:	b8001726 	beq	r23,zero,8035ec <___svfprintf_internal_r+0x2a0>
  803590:	a80b883a 	mov	r5,r21
  803594:	b809883a 	mov	r4,r23
  803598:	da401015 	stw	r9,64(sp)
  80359c:	08016640 	call	801664 <__udivsi3>
  8035a0:	a80b883a 	mov	r5,r21
  8035a4:	1009883a 	mov	r4,r2
  8035a8:	102d883a 	mov	r22,r2
  8035ac:	08017200 	call	801720 <__mulsi3>
  8035b0:	b885c83a 	sub	r2,r23,r2
  8035b4:	00c00244 	movi	r3,9
  8035b8:	da401017 	ldw	r9,64(sp)
  8035bc:	18800216 	blt	r3,r2,8035c8 <___svfprintf_internal_r+0x27c>
  8035c0:	10800c04 	addi	r2,r2,48
  8035c4:	00000506 	br	8035dc <___svfprintf_internal_r+0x290>
  8035c8:	d8c00e17 	ldw	r3,56(sp)
  8035cc:	18000226 	beq	r3,zero,8035d8 <___svfprintf_internal_r+0x28c>
  8035d0:	10800dc4 	addi	r2,r2,55
  8035d4:	00000106 	br	8035dc <___svfprintf_internal_r+0x290>
  8035d8:	108015c4 	addi	r2,r2,87
  8035dc:	e0800005 	stb	r2,0(fp)
  8035e0:	b02f883a 	mov	r23,r22
  8035e4:	e7000044 	addi	fp,fp,1
  8035e8:	003fe806 	br	80358c <__alt_data_end+0xff80358c>
  8035ec:	e6efc83a 	sub	r23,fp,sp
  8035f0:	9dc5c83a 	sub	r2,r19,r23
  8035f4:	0080090e 	bge	zero,r2,80361c <___svfprintf_internal_r+0x2d0>
  8035f8:	e085883a 	add	r2,fp,r2
  8035fc:	01400c04 	movi	r5,48
  803600:	d8c00917 	ldw	r3,36(sp)
  803604:	e009883a 	mov	r4,fp
  803608:	e0c0032e 	bgeu	fp,r3,803618 <___svfprintf_internal_r+0x2cc>
  80360c:	e7000044 	addi	fp,fp,1
  803610:	21400005 	stb	r5,0(r4)
  803614:	e0bffa1e 	bne	fp,r2,803600 <__alt_data_end+0xff803600>
  803618:	e6efc83a 	sub	r23,fp,sp
  80361c:	d8c00b17 	ldw	r3,44(sp)
  803620:	4dd1883a 	add	r8,r9,r23
  803624:	922dc83a 	sub	r22,r18,r8
  803628:	18001626 	beq	r3,zero,803684 <___svfprintf_internal_r+0x338>
  80362c:	48000a26 	beq	r9,zero,803658 <___svfprintf_internal_r+0x30c>
  803630:	00800b44 	movi	r2,45
  803634:	d8800805 	stb	r2,32(sp)
  803638:	88800117 	ldw	r2,4(r17)
  80363c:	01c00044 	movi	r7,1
  803640:	d9800804 	addi	r6,sp,32
  803644:	880b883a 	mov	r5,r17
  803648:	a009883a 	mov	r4,r20
  80364c:	103ee83a 	callr	r2
  803650:	10004a1e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  803654:	84000044 	addi	r16,r16,1
  803658:	0580070e 	bge	zero,r22,803678 <___svfprintf_internal_r+0x32c>
  80365c:	b00f883a 	mov	r7,r22
  803660:	01800c04 	movi	r6,48
  803664:	880b883a 	mov	r5,r17
  803668:	a009883a 	mov	r4,r20
  80366c:	08032e00 	call	8032e0 <print_repeat>
  803670:	1000421e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  803674:	85a1883a 	add	r16,r16,r22
  803678:	e02d883a 	mov	r22,fp
  80367c:	bf2fc83a 	sub	r23,r23,fp
  803680:	00002006 	br	803704 <___svfprintf_internal_r+0x3b8>
  803684:	0580090e 	bge	zero,r22,8036ac <___svfprintf_internal_r+0x360>
  803688:	b00f883a 	mov	r7,r22
  80368c:	01800804 	movi	r6,32
  803690:	880b883a 	mov	r5,r17
  803694:	a009883a 	mov	r4,r20
  803698:	da401015 	stw	r9,64(sp)
  80369c:	08032e00 	call	8032e0 <print_repeat>
  8036a0:	da401017 	ldw	r9,64(sp)
  8036a4:	1000351e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  8036a8:	85a1883a 	add	r16,r16,r22
  8036ac:	483ff226 	beq	r9,zero,803678 <__alt_data_end+0xff803678>
  8036b0:	00800b44 	movi	r2,45
  8036b4:	d8800805 	stb	r2,32(sp)
  8036b8:	88800117 	ldw	r2,4(r17)
  8036bc:	01c00044 	movi	r7,1
  8036c0:	d9800804 	addi	r6,sp,32
  8036c4:	880b883a 	mov	r5,r17
  8036c8:	a009883a 	mov	r4,r20
  8036cc:	103ee83a 	callr	r2
  8036d0:	10002a1e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  8036d4:	84000044 	addi	r16,r16,1
  8036d8:	003fe706 	br	803678 <__alt_data_end+0xff803678>
  8036dc:	b5bfffc4 	addi	r22,r22,-1
  8036e0:	b0800003 	ldbu	r2,0(r22)
  8036e4:	01c00044 	movi	r7,1
  8036e8:	d9800804 	addi	r6,sp,32
  8036ec:	d8800805 	stb	r2,32(sp)
  8036f0:	88800117 	ldw	r2,4(r17)
  8036f4:	880b883a 	mov	r5,r17
  8036f8:	a009883a 	mov	r4,r20
  8036fc:	103ee83a 	callr	r2
  803700:	10001e1e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  803704:	8585c83a 	sub	r2,r16,r22
  803708:	b5c9883a 	add	r4,r22,r23
  80370c:	e085883a 	add	r2,fp,r2
  803710:	013ff216 	blt	zero,r4,8036dc <__alt_data_end+0xff8036dc>
  803714:	1021883a 	mov	r16,r2
  803718:	dd800d17 	ldw	r22,52(sp)
  80371c:	00004406 	br	803830 <___svfprintf_internal_r+0x4e4>
  803720:	00800044 	movi	r2,1
  803724:	1480080e 	bge	r2,r18,803748 <___svfprintf_internal_r+0x3fc>
  803728:	95ffffc4 	addi	r23,r18,-1
  80372c:	b80f883a 	mov	r7,r23
  803730:	01800804 	movi	r6,32
  803734:	880b883a 	mov	r5,r17
  803738:	a009883a 	mov	r4,r20
  80373c:	08032e00 	call	8032e0 <print_repeat>
  803740:	10000e1e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  803744:	85e1883a 	add	r16,r16,r23
  803748:	b0800017 	ldw	r2,0(r22)
  80374c:	01c00044 	movi	r7,1
  803750:	d80d883a 	mov	r6,sp
  803754:	d8800005 	stb	r2,0(sp)
  803758:	88800117 	ldw	r2,4(r17)
  80375c:	880b883a 	mov	r5,r17
  803760:	a009883a 	mov	r4,r20
  803764:	b5c00104 	addi	r23,r22,4
  803768:	103ee83a 	callr	r2
  80376c:	1000031e 	bne	r2,zero,80377c <___svfprintf_internal_r+0x430>
  803770:	84000044 	addi	r16,r16,1
  803774:	b82d883a 	mov	r22,r23
  803778:	00002d06 	br	803830 <___svfprintf_internal_r+0x4e4>
  80377c:	00bfffc4 	movi	r2,-1
  803780:	00003106 	br	803848 <___svfprintf_internal_r+0x4fc>
  803784:	b5c00017 	ldw	r23,0(r22)
  803788:	b7000104 	addi	fp,r22,4
  80378c:	b809883a 	mov	r4,r23
  803790:	0802ebc0 	call	802ebc <strlen>
  803794:	9091c83a 	sub	r8,r18,r2
  803798:	102d883a 	mov	r22,r2
  80379c:	0200090e 	bge	zero,r8,8037c4 <___svfprintf_internal_r+0x478>
  8037a0:	400f883a 	mov	r7,r8
  8037a4:	01800804 	movi	r6,32
  8037a8:	880b883a 	mov	r5,r17
  8037ac:	a009883a 	mov	r4,r20
  8037b0:	da001015 	stw	r8,64(sp)
  8037b4:	08032e00 	call	8032e0 <print_repeat>
  8037b8:	da001017 	ldw	r8,64(sp)
  8037bc:	103fef1e 	bne	r2,zero,80377c <__alt_data_end+0xff80377c>
  8037c0:	8221883a 	add	r16,r16,r8
  8037c4:	88800117 	ldw	r2,4(r17)
  8037c8:	b00f883a 	mov	r7,r22
  8037cc:	b80d883a 	mov	r6,r23
  8037d0:	880b883a 	mov	r5,r17
  8037d4:	a009883a 	mov	r4,r20
  8037d8:	103ee83a 	callr	r2
  8037dc:	103fe71e 	bne	r2,zero,80377c <__alt_data_end+0xff80377c>
  8037e0:	85a1883a 	add	r16,r16,r22
  8037e4:	e02d883a 	mov	r22,fp
  8037e8:	00001106 	br	803830 <___svfprintf_internal_r+0x4e4>
  8037ec:	00c00044 	movi	r3,1
  8037f0:	04ffffc4 	movi	r19,-1
  8037f4:	d8000e15 	stw	zero,56(sp)
  8037f8:	d8c00a15 	stw	r3,40(sp)
  8037fc:	05400284 	movi	r21,10
  803800:	9825883a 	mov	r18,r19
  803804:	d8000c15 	stw	zero,48(sp)
  803808:	d8000b15 	stw	zero,44(sp)
  80380c:	182f883a 	mov	r23,r3
  803810:	00000806 	br	803834 <___svfprintf_internal_r+0x4e8>
  803814:	ddc00b15 	stw	r23,44(sp)
  803818:	05c00084 	movi	r23,2
  80381c:	00000506 	br	803834 <___svfprintf_internal_r+0x4e8>
  803820:	00c00044 	movi	r3,1
  803824:	d8c00c15 	stw	r3,48(sp)
  803828:	05c000c4 	movi	r23,3
  80382c:	00000106 	br	803834 <___svfprintf_internal_r+0x4e8>
  803830:	002f883a 	mov	r23,zero
  803834:	d8c00f17 	ldw	r3,60(sp)
  803838:	18c00044 	addi	r3,r3,1
  80383c:	d8c00f15 	stw	r3,60(sp)
  803840:	003edc06 	br	8033b4 <__alt_data_end+0xff8033b4>
  803844:	8005883a 	mov	r2,r16
  803848:	dfc01a17 	ldw	ra,104(sp)
  80384c:	df001917 	ldw	fp,100(sp)
  803850:	ddc01817 	ldw	r23,96(sp)
  803854:	dd801717 	ldw	r22,92(sp)
  803858:	dd401617 	ldw	r21,88(sp)
  80385c:	dd001517 	ldw	r20,84(sp)
  803860:	dcc01417 	ldw	r19,80(sp)
  803864:	dc801317 	ldw	r18,76(sp)
  803868:	dc401217 	ldw	r17,72(sp)
  80386c:	dc001117 	ldw	r16,68(sp)
  803870:	dec01b04 	addi	sp,sp,108
  803874:	f800283a 	ret

00803878 <__vfprintf_internal_unused>:
  803878:	00802034 	movhi	r2,128
  80387c:	10941f04 	addi	r2,r2,20604
  803880:	300f883a 	mov	r7,r6
  803884:	280d883a 	mov	r6,r5
  803888:	200b883a 	mov	r5,r4
  80388c:	11000017 	ldw	r4,0(r2)
  803890:	080334c1 	jmpi	80334c <___svfprintf_internal_r>

00803894 <print_repeat>:
  803894:	defffb04 	addi	sp,sp,-20
  803898:	dc800315 	stw	r18,12(sp)
  80389c:	dc400215 	stw	r17,8(sp)
  8038a0:	dc000115 	stw	r16,4(sp)
  8038a4:	dfc00415 	stw	ra,16(sp)
  8038a8:	2025883a 	mov	r18,r4
  8038ac:	2823883a 	mov	r17,r5
  8038b0:	d9800005 	stb	r6,0(sp)
  8038b4:	3821883a 	mov	r16,r7
  8038b8:	04000a0e 	bge	zero,r16,8038e4 <print_repeat+0x50>
  8038bc:	88800117 	ldw	r2,4(r17)
  8038c0:	01c00044 	movi	r7,1
  8038c4:	d80d883a 	mov	r6,sp
  8038c8:	880b883a 	mov	r5,r17
  8038cc:	9009883a 	mov	r4,r18
  8038d0:	103ee83a 	callr	r2
  8038d4:	843fffc4 	addi	r16,r16,-1
  8038d8:	103ff726 	beq	r2,zero,8038b8 <__alt_data_end+0xff8038b8>
  8038dc:	00bfffc4 	movi	r2,-1
  8038e0:	00000106 	br	8038e8 <print_repeat+0x54>
  8038e4:	0005883a 	mov	r2,zero
  8038e8:	dfc00417 	ldw	ra,16(sp)
  8038ec:	dc800317 	ldw	r18,12(sp)
  8038f0:	dc400217 	ldw	r17,8(sp)
  8038f4:	dc000117 	ldw	r16,4(sp)
  8038f8:	dec00504 	addi	sp,sp,20
  8038fc:	f800283a 	ret

00803900 <___vfprintf_internal_r>:
  803900:	deffe504 	addi	sp,sp,-108
  803904:	d8c00804 	addi	r3,sp,32
  803908:	ddc01815 	stw	r23,96(sp)
  80390c:	dd801715 	stw	r22,92(sp)
  803910:	dd401615 	stw	r21,88(sp)
  803914:	dd001515 	stw	r20,84(sp)
  803918:	dcc01415 	stw	r19,80(sp)
  80391c:	dc801315 	stw	r18,76(sp)
  803920:	dc401215 	stw	r17,72(sp)
  803924:	dc001115 	stw	r16,68(sp)
  803928:	dfc01a15 	stw	ra,104(sp)
  80392c:	df001915 	stw	fp,100(sp)
  803930:	2029883a 	mov	r20,r4
  803934:	2823883a 	mov	r17,r5
  803938:	382d883a 	mov	r22,r7
  80393c:	d9800f15 	stw	r6,60(sp)
  803940:	0021883a 	mov	r16,zero
  803944:	d8000e15 	stw	zero,56(sp)
  803948:	d8000a15 	stw	zero,40(sp)
  80394c:	002b883a 	mov	r21,zero
  803950:	0027883a 	mov	r19,zero
  803954:	0025883a 	mov	r18,zero
  803958:	d8000c15 	stw	zero,48(sp)
  80395c:	d8000b15 	stw	zero,44(sp)
  803960:	002f883a 	mov	r23,zero
  803964:	d8c00915 	stw	r3,36(sp)
  803968:	d8c00f17 	ldw	r3,60(sp)
  80396c:	19000003 	ldbu	r4,0(r3)
  803970:	20803fcc 	andi	r2,r4,255
  803974:	1080201c 	xori	r2,r2,128
  803978:	10bfe004 	addi	r2,r2,-128
  80397c:	10011e26 	beq	r2,zero,803df8 <___vfprintf_internal_r+0x4f8>
  803980:	00c00044 	movi	r3,1
  803984:	b8c01426 	beq	r23,r3,8039d8 <___vfprintf_internal_r+0xd8>
  803988:	1dc00216 	blt	r3,r23,803994 <___vfprintf_internal_r+0x94>
  80398c:	b8000626 	beq	r23,zero,8039a8 <___vfprintf_internal_r+0xa8>
  803990:	00011506 	br	803de8 <___vfprintf_internal_r+0x4e8>
  803994:	01400084 	movi	r5,2
  803998:	b9401d26 	beq	r23,r5,803a10 <___vfprintf_internal_r+0x110>
  80399c:	014000c4 	movi	r5,3
  8039a0:	b9402b26 	beq	r23,r5,803a50 <___vfprintf_internal_r+0x150>
  8039a4:	00011006 	br	803de8 <___vfprintf_internal_r+0x4e8>
  8039a8:	01400944 	movi	r5,37
  8039ac:	1140fc26 	beq	r2,r5,803da0 <___vfprintf_internal_r+0x4a0>
  8039b0:	88800117 	ldw	r2,4(r17)
  8039b4:	d9000005 	stb	r4,0(sp)
  8039b8:	01c00044 	movi	r7,1
  8039bc:	d80d883a 	mov	r6,sp
  8039c0:	880b883a 	mov	r5,r17
  8039c4:	a009883a 	mov	r4,r20
  8039c8:	103ee83a 	callr	r2
  8039cc:	1000d81e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  8039d0:	84000044 	addi	r16,r16,1
  8039d4:	00010406 	br	803de8 <___vfprintf_internal_r+0x4e8>
  8039d8:	01400c04 	movi	r5,48
  8039dc:	1140fa26 	beq	r2,r5,803dc8 <___vfprintf_internal_r+0x4c8>
  8039e0:	01400944 	movi	r5,37
  8039e4:	11400a1e 	bne	r2,r5,803a10 <___vfprintf_internal_r+0x110>
  8039e8:	d8800005 	stb	r2,0(sp)
  8039ec:	88800117 	ldw	r2,4(r17)
  8039f0:	b80f883a 	mov	r7,r23
  8039f4:	d80d883a 	mov	r6,sp
  8039f8:	880b883a 	mov	r5,r17
  8039fc:	a009883a 	mov	r4,r20
  803a00:	103ee83a 	callr	r2
  803a04:	1000ca1e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  803a08:	84000044 	addi	r16,r16,1
  803a0c:	0000f506 	br	803de4 <___vfprintf_internal_r+0x4e4>
  803a10:	25fff404 	addi	r23,r4,-48
  803a14:	bdc03fcc 	andi	r23,r23,255
  803a18:	00c00244 	movi	r3,9
  803a1c:	1dc00936 	bltu	r3,r23,803a44 <___vfprintf_internal_r+0x144>
  803a20:	00bfffc4 	movi	r2,-1
  803a24:	90800426 	beq	r18,r2,803a38 <___vfprintf_internal_r+0x138>
  803a28:	01400284 	movi	r5,10
  803a2c:	9009883a 	mov	r4,r18
  803a30:	08017200 	call	801720 <__mulsi3>
  803a34:	00000106 	br	803a3c <___vfprintf_internal_r+0x13c>
  803a38:	0005883a 	mov	r2,zero
  803a3c:	b8a5883a 	add	r18,r23,r2
  803a40:	0000e206 	br	803dcc <___vfprintf_internal_r+0x4cc>
  803a44:	01400b84 	movi	r5,46
  803a48:	1140e426 	beq	r2,r5,803ddc <___vfprintf_internal_r+0x4dc>
  803a4c:	05c00084 	movi	r23,2
  803a50:	213ff404 	addi	r4,r4,-48
  803a54:	27003fcc 	andi	fp,r4,255
  803a58:	00c00244 	movi	r3,9
  803a5c:	1f000936 	bltu	r3,fp,803a84 <___vfprintf_internal_r+0x184>
  803a60:	00bfffc4 	movi	r2,-1
  803a64:	98800426 	beq	r19,r2,803a78 <___vfprintf_internal_r+0x178>
  803a68:	01400284 	movi	r5,10
  803a6c:	9809883a 	mov	r4,r19
  803a70:	08017200 	call	801720 <__mulsi3>
  803a74:	00000106 	br	803a7c <___vfprintf_internal_r+0x17c>
  803a78:	0005883a 	mov	r2,zero
  803a7c:	e0a7883a 	add	r19,fp,r2
  803a80:	0000d906 	br	803de8 <___vfprintf_internal_r+0x4e8>
  803a84:	00c01b04 	movi	r3,108
  803a88:	10c0d226 	beq	r2,r3,803dd4 <___vfprintf_internal_r+0x4d4>
  803a8c:	013fffc4 	movi	r4,-1
  803a90:	99000226 	beq	r19,r4,803a9c <___vfprintf_internal_r+0x19c>
  803a94:	d8000b15 	stw	zero,44(sp)
  803a98:	00000106 	br	803aa0 <___vfprintf_internal_r+0x1a0>
  803a9c:	04c00044 	movi	r19,1
  803aa0:	01001a44 	movi	r4,105
  803aa4:	11001626 	beq	r2,r4,803b00 <___vfprintf_internal_r+0x200>
  803aa8:	20800916 	blt	r4,r2,803ad0 <___vfprintf_internal_r+0x1d0>
  803aac:	010018c4 	movi	r4,99
  803ab0:	11008826 	beq	r2,r4,803cd4 <___vfprintf_internal_r+0x3d4>
  803ab4:	01001904 	movi	r4,100
  803ab8:	11001126 	beq	r2,r4,803b00 <___vfprintf_internal_r+0x200>
  803abc:	01001604 	movi	r4,88
  803ac0:	1100c81e 	bne	r2,r4,803de4 <___vfprintf_internal_r+0x4e4>
  803ac4:	00c00044 	movi	r3,1
  803ac8:	d8c00e15 	stw	r3,56(sp)
  803acc:	00001506 	br	803b24 <___vfprintf_internal_r+0x224>
  803ad0:	01001cc4 	movi	r4,115
  803ad4:	11009826 	beq	r2,r4,803d38 <___vfprintf_internal_r+0x438>
  803ad8:	20800416 	blt	r4,r2,803aec <___vfprintf_internal_r+0x1ec>
  803adc:	01001bc4 	movi	r4,111
  803ae0:	1100c01e 	bne	r2,r4,803de4 <___vfprintf_internal_r+0x4e4>
  803ae4:	05400204 	movi	r21,8
  803ae8:	00000f06 	br	803b28 <___vfprintf_internal_r+0x228>
  803aec:	01001d44 	movi	r4,117
  803af0:	11000d26 	beq	r2,r4,803b28 <___vfprintf_internal_r+0x228>
  803af4:	01001e04 	movi	r4,120
  803af8:	11000a26 	beq	r2,r4,803b24 <___vfprintf_internal_r+0x224>
  803afc:	0000b906 	br	803de4 <___vfprintf_internal_r+0x4e4>
  803b00:	d8c00a17 	ldw	r3,40(sp)
  803b04:	b7000104 	addi	fp,r22,4
  803b08:	18000726 	beq	r3,zero,803b28 <___vfprintf_internal_r+0x228>
  803b0c:	df000d15 	stw	fp,52(sp)
  803b10:	b5c00017 	ldw	r23,0(r22)
  803b14:	b800080e 	bge	r23,zero,803b38 <___vfprintf_internal_r+0x238>
  803b18:	05efc83a 	sub	r23,zero,r23
  803b1c:	02400044 	movi	r9,1
  803b20:	00000606 	br	803b3c <___vfprintf_internal_r+0x23c>
  803b24:	05400404 	movi	r21,16
  803b28:	b0c00104 	addi	r3,r22,4
  803b2c:	d8c00d15 	stw	r3,52(sp)
  803b30:	b5c00017 	ldw	r23,0(r22)
  803b34:	d8000a15 	stw	zero,40(sp)
  803b38:	0013883a 	mov	r9,zero
  803b3c:	d839883a 	mov	fp,sp
  803b40:	b8001726 	beq	r23,zero,803ba0 <___vfprintf_internal_r+0x2a0>
  803b44:	a80b883a 	mov	r5,r21
  803b48:	b809883a 	mov	r4,r23
  803b4c:	da401015 	stw	r9,64(sp)
  803b50:	08016640 	call	801664 <__udivsi3>
  803b54:	a80b883a 	mov	r5,r21
  803b58:	1009883a 	mov	r4,r2
  803b5c:	102d883a 	mov	r22,r2
  803b60:	08017200 	call	801720 <__mulsi3>
  803b64:	b885c83a 	sub	r2,r23,r2
  803b68:	00c00244 	movi	r3,9
  803b6c:	da401017 	ldw	r9,64(sp)
  803b70:	18800216 	blt	r3,r2,803b7c <___vfprintf_internal_r+0x27c>
  803b74:	10800c04 	addi	r2,r2,48
  803b78:	00000506 	br	803b90 <___vfprintf_internal_r+0x290>
  803b7c:	d8c00e17 	ldw	r3,56(sp)
  803b80:	18000226 	beq	r3,zero,803b8c <___vfprintf_internal_r+0x28c>
  803b84:	10800dc4 	addi	r2,r2,55
  803b88:	00000106 	br	803b90 <___vfprintf_internal_r+0x290>
  803b8c:	108015c4 	addi	r2,r2,87
  803b90:	e0800005 	stb	r2,0(fp)
  803b94:	b02f883a 	mov	r23,r22
  803b98:	e7000044 	addi	fp,fp,1
  803b9c:	003fe806 	br	803b40 <__alt_data_end+0xff803b40>
  803ba0:	e6efc83a 	sub	r23,fp,sp
  803ba4:	9dc5c83a 	sub	r2,r19,r23
  803ba8:	0080090e 	bge	zero,r2,803bd0 <___vfprintf_internal_r+0x2d0>
  803bac:	e085883a 	add	r2,fp,r2
  803bb0:	01400c04 	movi	r5,48
  803bb4:	d8c00917 	ldw	r3,36(sp)
  803bb8:	e009883a 	mov	r4,fp
  803bbc:	e0c0032e 	bgeu	fp,r3,803bcc <___vfprintf_internal_r+0x2cc>
  803bc0:	e7000044 	addi	fp,fp,1
  803bc4:	21400005 	stb	r5,0(r4)
  803bc8:	e0bffa1e 	bne	fp,r2,803bb4 <__alt_data_end+0xff803bb4>
  803bcc:	e6efc83a 	sub	r23,fp,sp
  803bd0:	d8c00b17 	ldw	r3,44(sp)
  803bd4:	4dd1883a 	add	r8,r9,r23
  803bd8:	922dc83a 	sub	r22,r18,r8
  803bdc:	18001626 	beq	r3,zero,803c38 <___vfprintf_internal_r+0x338>
  803be0:	48000a26 	beq	r9,zero,803c0c <___vfprintf_internal_r+0x30c>
  803be4:	00800b44 	movi	r2,45
  803be8:	d8800805 	stb	r2,32(sp)
  803bec:	88800117 	ldw	r2,4(r17)
  803bf0:	01c00044 	movi	r7,1
  803bf4:	d9800804 	addi	r6,sp,32
  803bf8:	880b883a 	mov	r5,r17
  803bfc:	a009883a 	mov	r4,r20
  803c00:	103ee83a 	callr	r2
  803c04:	10004a1e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  803c08:	84000044 	addi	r16,r16,1
  803c0c:	0580070e 	bge	zero,r22,803c2c <___vfprintf_internal_r+0x32c>
  803c10:	b00f883a 	mov	r7,r22
  803c14:	01800c04 	movi	r6,48
  803c18:	880b883a 	mov	r5,r17
  803c1c:	a009883a 	mov	r4,r20
  803c20:	08038940 	call	803894 <print_repeat>
  803c24:	1000421e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  803c28:	85a1883a 	add	r16,r16,r22
  803c2c:	e02d883a 	mov	r22,fp
  803c30:	bf2fc83a 	sub	r23,r23,fp
  803c34:	00002006 	br	803cb8 <___vfprintf_internal_r+0x3b8>
  803c38:	0580090e 	bge	zero,r22,803c60 <___vfprintf_internal_r+0x360>
  803c3c:	b00f883a 	mov	r7,r22
  803c40:	01800804 	movi	r6,32
  803c44:	880b883a 	mov	r5,r17
  803c48:	a009883a 	mov	r4,r20
  803c4c:	da401015 	stw	r9,64(sp)
  803c50:	08038940 	call	803894 <print_repeat>
  803c54:	da401017 	ldw	r9,64(sp)
  803c58:	1000351e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  803c5c:	85a1883a 	add	r16,r16,r22
  803c60:	483ff226 	beq	r9,zero,803c2c <__alt_data_end+0xff803c2c>
  803c64:	00800b44 	movi	r2,45
  803c68:	d8800805 	stb	r2,32(sp)
  803c6c:	88800117 	ldw	r2,4(r17)
  803c70:	01c00044 	movi	r7,1
  803c74:	d9800804 	addi	r6,sp,32
  803c78:	880b883a 	mov	r5,r17
  803c7c:	a009883a 	mov	r4,r20
  803c80:	103ee83a 	callr	r2
  803c84:	10002a1e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  803c88:	84000044 	addi	r16,r16,1
  803c8c:	003fe706 	br	803c2c <__alt_data_end+0xff803c2c>
  803c90:	b5bfffc4 	addi	r22,r22,-1
  803c94:	b0800003 	ldbu	r2,0(r22)
  803c98:	01c00044 	movi	r7,1
  803c9c:	d9800804 	addi	r6,sp,32
  803ca0:	d8800805 	stb	r2,32(sp)
  803ca4:	88800117 	ldw	r2,4(r17)
  803ca8:	880b883a 	mov	r5,r17
  803cac:	a009883a 	mov	r4,r20
  803cb0:	103ee83a 	callr	r2
  803cb4:	10001e1e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  803cb8:	8585c83a 	sub	r2,r16,r22
  803cbc:	b5c9883a 	add	r4,r22,r23
  803cc0:	e085883a 	add	r2,fp,r2
  803cc4:	013ff216 	blt	zero,r4,803c90 <__alt_data_end+0xff803c90>
  803cc8:	1021883a 	mov	r16,r2
  803ccc:	dd800d17 	ldw	r22,52(sp)
  803cd0:	00004406 	br	803de4 <___vfprintf_internal_r+0x4e4>
  803cd4:	00800044 	movi	r2,1
  803cd8:	1480080e 	bge	r2,r18,803cfc <___vfprintf_internal_r+0x3fc>
  803cdc:	95ffffc4 	addi	r23,r18,-1
  803ce0:	b80f883a 	mov	r7,r23
  803ce4:	01800804 	movi	r6,32
  803ce8:	880b883a 	mov	r5,r17
  803cec:	a009883a 	mov	r4,r20
  803cf0:	08038940 	call	803894 <print_repeat>
  803cf4:	10000e1e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  803cf8:	85e1883a 	add	r16,r16,r23
  803cfc:	b0800017 	ldw	r2,0(r22)
  803d00:	01c00044 	movi	r7,1
  803d04:	d80d883a 	mov	r6,sp
  803d08:	d8800005 	stb	r2,0(sp)
  803d0c:	88800117 	ldw	r2,4(r17)
  803d10:	880b883a 	mov	r5,r17
  803d14:	a009883a 	mov	r4,r20
  803d18:	b5c00104 	addi	r23,r22,4
  803d1c:	103ee83a 	callr	r2
  803d20:	1000031e 	bne	r2,zero,803d30 <___vfprintf_internal_r+0x430>
  803d24:	84000044 	addi	r16,r16,1
  803d28:	b82d883a 	mov	r22,r23
  803d2c:	00002d06 	br	803de4 <___vfprintf_internal_r+0x4e4>
  803d30:	00bfffc4 	movi	r2,-1
  803d34:	00003106 	br	803dfc <___vfprintf_internal_r+0x4fc>
  803d38:	b5c00017 	ldw	r23,0(r22)
  803d3c:	b7000104 	addi	fp,r22,4
  803d40:	b809883a 	mov	r4,r23
  803d44:	0802ebc0 	call	802ebc <strlen>
  803d48:	9091c83a 	sub	r8,r18,r2
  803d4c:	102d883a 	mov	r22,r2
  803d50:	0200090e 	bge	zero,r8,803d78 <___vfprintf_internal_r+0x478>
  803d54:	400f883a 	mov	r7,r8
  803d58:	01800804 	movi	r6,32
  803d5c:	880b883a 	mov	r5,r17
  803d60:	a009883a 	mov	r4,r20
  803d64:	da001015 	stw	r8,64(sp)
  803d68:	08038940 	call	803894 <print_repeat>
  803d6c:	da001017 	ldw	r8,64(sp)
  803d70:	103fef1e 	bne	r2,zero,803d30 <__alt_data_end+0xff803d30>
  803d74:	8221883a 	add	r16,r16,r8
  803d78:	88800117 	ldw	r2,4(r17)
  803d7c:	b00f883a 	mov	r7,r22
  803d80:	b80d883a 	mov	r6,r23
  803d84:	880b883a 	mov	r5,r17
  803d88:	a009883a 	mov	r4,r20
  803d8c:	103ee83a 	callr	r2
  803d90:	103fe71e 	bne	r2,zero,803d30 <__alt_data_end+0xff803d30>
  803d94:	85a1883a 	add	r16,r16,r22
  803d98:	e02d883a 	mov	r22,fp
  803d9c:	00001106 	br	803de4 <___vfprintf_internal_r+0x4e4>
  803da0:	00c00044 	movi	r3,1
  803da4:	04ffffc4 	movi	r19,-1
  803da8:	d8000e15 	stw	zero,56(sp)
  803dac:	d8c00a15 	stw	r3,40(sp)
  803db0:	05400284 	movi	r21,10
  803db4:	9825883a 	mov	r18,r19
  803db8:	d8000c15 	stw	zero,48(sp)
  803dbc:	d8000b15 	stw	zero,44(sp)
  803dc0:	182f883a 	mov	r23,r3
  803dc4:	00000806 	br	803de8 <___vfprintf_internal_r+0x4e8>
  803dc8:	ddc00b15 	stw	r23,44(sp)
  803dcc:	05c00084 	movi	r23,2
  803dd0:	00000506 	br	803de8 <___vfprintf_internal_r+0x4e8>
  803dd4:	00c00044 	movi	r3,1
  803dd8:	d8c00c15 	stw	r3,48(sp)
  803ddc:	05c000c4 	movi	r23,3
  803de0:	00000106 	br	803de8 <___vfprintf_internal_r+0x4e8>
  803de4:	002f883a 	mov	r23,zero
  803de8:	d8c00f17 	ldw	r3,60(sp)
  803dec:	18c00044 	addi	r3,r3,1
  803df0:	d8c00f15 	stw	r3,60(sp)
  803df4:	003edc06 	br	803968 <__alt_data_end+0xff803968>
  803df8:	8005883a 	mov	r2,r16
  803dfc:	dfc01a17 	ldw	ra,104(sp)
  803e00:	df001917 	ldw	fp,100(sp)
  803e04:	ddc01817 	ldw	r23,96(sp)
  803e08:	dd801717 	ldw	r22,92(sp)
  803e0c:	dd401617 	ldw	r21,88(sp)
  803e10:	dd001517 	ldw	r20,84(sp)
  803e14:	dcc01417 	ldw	r19,80(sp)
  803e18:	dc801317 	ldw	r18,76(sp)
  803e1c:	dc401217 	ldw	r17,72(sp)
  803e20:	dc001117 	ldw	r16,68(sp)
  803e24:	dec01b04 	addi	sp,sp,108
  803e28:	f800283a 	ret

00803e2c <__vfprintf_internal>:
  803e2c:	00802034 	movhi	r2,128
  803e30:	10941f04 	addi	r2,r2,20604
  803e34:	300f883a 	mov	r7,r6
  803e38:	280d883a 	mov	r6,r5
  803e3c:	200b883a 	mov	r5,r4
  803e40:	11000017 	ldw	r4,0(r2)
  803e44:	08039001 	jmpi	803900 <___vfprintf_internal_r>

00803e48 <__sfvwrite_small_dev>:
  803e48:	2880000b 	ldhu	r2,0(r5)
  803e4c:	1080020c 	andi	r2,r2,8
  803e50:	10002126 	beq	r2,zero,803ed8 <__sfvwrite_small_dev+0x90>
  803e54:	2880008f 	ldh	r2,2(r5)
  803e58:	defffa04 	addi	sp,sp,-24
  803e5c:	dc000015 	stw	r16,0(sp)
  803e60:	dfc00515 	stw	ra,20(sp)
  803e64:	dd000415 	stw	r20,16(sp)
  803e68:	dcc00315 	stw	r19,12(sp)
  803e6c:	dc800215 	stw	r18,8(sp)
  803e70:	dc400115 	stw	r17,4(sp)
  803e74:	2821883a 	mov	r16,r5
  803e78:	10001216 	blt	r2,zero,803ec4 <__sfvwrite_small_dev+0x7c>
  803e7c:	2027883a 	mov	r19,r4
  803e80:	3025883a 	mov	r18,r6
  803e84:	3823883a 	mov	r17,r7
  803e88:	05010004 	movi	r20,1024
  803e8c:	04400b0e 	bge	zero,r17,803ebc <__sfvwrite_small_dev+0x74>
  803e90:	880f883a 	mov	r7,r17
  803e94:	a440010e 	bge	r20,r17,803e9c <__sfvwrite_small_dev+0x54>
  803e98:	01c10004 	movi	r7,1024
  803e9c:	8140008f 	ldh	r5,2(r16)
  803ea0:	900d883a 	mov	r6,r18
  803ea4:	9809883a 	mov	r4,r19
  803ea8:	08040080 	call	804008 <_write_r>
  803eac:	0080050e 	bge	zero,r2,803ec4 <__sfvwrite_small_dev+0x7c>
  803eb0:	88a3c83a 	sub	r17,r17,r2
  803eb4:	90a5883a 	add	r18,r18,r2
  803eb8:	003ff406 	br	803e8c <__alt_data_end+0xff803e8c>
  803ebc:	0005883a 	mov	r2,zero
  803ec0:	00000706 	br	803ee0 <__sfvwrite_small_dev+0x98>
  803ec4:	8080000b 	ldhu	r2,0(r16)
  803ec8:	10801014 	ori	r2,r2,64
  803ecc:	8080000d 	sth	r2,0(r16)
  803ed0:	00bfffc4 	movi	r2,-1
  803ed4:	00000206 	br	803ee0 <__sfvwrite_small_dev+0x98>
  803ed8:	00bfffc4 	movi	r2,-1
  803edc:	f800283a 	ret
  803ee0:	dfc00517 	ldw	ra,20(sp)
  803ee4:	dd000417 	ldw	r20,16(sp)
  803ee8:	dcc00317 	ldw	r19,12(sp)
  803eec:	dc800217 	ldw	r18,8(sp)
  803ef0:	dc400117 	ldw	r17,4(sp)
  803ef4:	dc000017 	ldw	r16,0(sp)
  803ef8:	dec00604 	addi	sp,sp,24
  803efc:	f800283a 	ret

00803f00 <__sfvwrite_small_str>:
  803f00:	2880000b 	ldhu	r2,0(r5)
  803f04:	10c0020c 	andi	r3,r2,8
  803f08:	18002026 	beq	r3,zero,803f8c <__sfvwrite_small_str+0x8c>
  803f0c:	28c0008f 	ldh	r3,2(r5)
  803f10:	defffd04 	addi	sp,sp,-12
  803f14:	dc000015 	stw	r16,0(sp)
  803f18:	dfc00215 	stw	ra,8(sp)
  803f1c:	dc400115 	stw	r17,4(sp)
  803f20:	2821883a 	mov	r16,r5
  803f24:	1800150e 	bge	r3,zero,803f7c <__sfvwrite_small_str+0x7c>
  803f28:	10c0800c 	andi	r3,r2,512
  803f2c:	18001326 	beq	r3,zero,803f7c <__sfvwrite_small_str+0x7c>
  803f30:	2c400517 	ldw	r17,20(r5)
  803f34:	89c0030e 	bge	r17,r7,803f44 <__sfvwrite_small_str+0x44>
  803f38:	10c0200c 	andi	r3,r2,128
  803f3c:	18000326 	beq	r3,zero,803f4c <__sfvwrite_small_str+0x4c>
  803f40:	00000e06 	br	803f7c <__sfvwrite_small_str+0x7c>
  803f44:	3c40010e 	bge	r7,r17,803f4c <__sfvwrite_small_str+0x4c>
  803f48:	3823883a 	mov	r17,r7
  803f4c:	81000417 	ldw	r4,16(r16)
  803f50:	300b883a 	mov	r5,r6
  803f54:	880d883a 	mov	r6,r17
  803f58:	0803fa80 	call	803fa8 <memmove>
  803f5c:	80800517 	ldw	r2,20(r16)
  803f60:	1445c83a 	sub	r2,r2,r17
  803f64:	80800515 	stw	r2,20(r16)
  803f68:	80800417 	ldw	r2,16(r16)
  803f6c:	1463883a 	add	r17,r2,r17
  803f70:	84400415 	stw	r17,16(r16)
  803f74:	0005883a 	mov	r2,zero
  803f78:	00000606 	br	803f94 <__sfvwrite_small_str+0x94>
  803f7c:	10801014 	ori	r2,r2,64
  803f80:	8080000d 	sth	r2,0(r16)
  803f84:	00bfffc4 	movi	r2,-1
  803f88:	00000206 	br	803f94 <__sfvwrite_small_str+0x94>
  803f8c:	00bfffc4 	movi	r2,-1
  803f90:	f800283a 	ret
  803f94:	dfc00217 	ldw	ra,8(sp)
  803f98:	dc400117 	ldw	r17,4(sp)
  803f9c:	dc000017 	ldw	r16,0(sp)
  803fa0:	dec00304 	addi	sp,sp,12
  803fa4:	f800283a 	ret

00803fa8 <memmove>:
  803fa8:	2005883a 	mov	r2,r4
  803fac:	218f883a 	add	r7,r4,r6
  803fb0:	29000236 	bltu	r5,r4,803fbc <memmove+0x14>
  803fb4:	1007883a 	mov	r3,r2
  803fb8:	00000c06 	br	803fec <memmove+0x44>
  803fbc:	2987883a 	add	r3,r5,r6
  803fc0:	20fffc2e 	bgeu	r4,r3,803fb4 <__alt_data_end+0xff803fb4>
  803fc4:	380b883a 	mov	r5,r7
  803fc8:	30cdc83a 	sub	r6,r6,r3
  803fcc:	1989883a 	add	r4,r3,r6
  803fd0:	20000526 	beq	r4,zero,803fe8 <memmove+0x40>
  803fd4:	18ffffc4 	addi	r3,r3,-1
  803fd8:	19000003 	ldbu	r4,0(r3)
  803fdc:	297fffc4 	addi	r5,r5,-1
  803fe0:	29000005 	stb	r4,0(r5)
  803fe4:	003ff906 	br	803fcc <__alt_data_end+0xff803fcc>
  803fe8:	f800283a 	ret
  803fec:	19c00526 	beq	r3,r7,804004 <memmove+0x5c>
  803ff0:	29000003 	ldbu	r4,0(r5)
  803ff4:	18c00044 	addi	r3,r3,1
  803ff8:	29400044 	addi	r5,r5,1
  803ffc:	193fffc5 	stb	r4,-1(r3)
  804000:	003ffa06 	br	803fec <__alt_data_end+0xff803fec>
  804004:	f800283a 	ret

00804008 <_write_r>:
  804008:	defffd04 	addi	sp,sp,-12
  80400c:	dc000015 	stw	r16,0(sp)
  804010:	04002034 	movhi	r16,128
  804014:	dc400115 	stw	r17,4(sp)
  804018:	8414db04 	addi	r16,r16,21356
  80401c:	2023883a 	mov	r17,r4
  804020:	2809883a 	mov	r4,r5
  804024:	300b883a 	mov	r5,r6
  804028:	380d883a 	mov	r6,r7
  80402c:	dfc00215 	stw	ra,8(sp)
  804030:	80000015 	stw	zero,0(r16)
  804034:	08044480 	call	804448 <write>
  804038:	00ffffc4 	movi	r3,-1
  80403c:	10c0031e 	bne	r2,r3,80404c <_write_r+0x44>
  804040:	80c00017 	ldw	r3,0(r16)
  804044:	18000126 	beq	r3,zero,80404c <_write_r+0x44>
  804048:	88c00015 	stw	r3,0(r17)
  80404c:	dfc00217 	ldw	ra,8(sp)
  804050:	dc400117 	ldw	r17,4(sp)
  804054:	dc000017 	ldw	r16,0(sp)
  804058:	dec00304 	addi	sp,sp,12
  80405c:	f800283a 	ret

00804060 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804060:	00802034 	movhi	r2,128
  804064:	10940604 	addi	r2,r2,20504
  804068:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  80406c:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804070:	01002034 	movhi	r4,128
  804074:	01800044 	movi	r6,1
  804078:	d80b883a 	mov	r5,sp
  80407c:	21142204 	addi	r4,r4,20616
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804080:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804084:	08044f00 	call	8044f0 <altera_avalon_jtag_uart_read>
  804088:	0080020e 	bge	zero,r2,804094 <alt_getchar+0x34>
        return -1;
    }
    return c;
  80408c:	d8800007 	ldb	r2,0(sp)
  804090:	00000106 	br	804098 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  804094:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  804098:	dfc00117 	ldw	ra,4(sp)
  80409c:	dec00204 	addi	sp,sp,8
  8040a0:	f800283a 	ret

008040a4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8040a4:	008007c4 	movi	r2,31
  8040a8:	11002136 	bltu	r2,r4,804130 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8040ac:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8040b0:	00ffff84 	movi	r3,-2
  8040b4:	38c4703a 	and	r2,r7,r3
  8040b8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  8040bc:	200490fa 	slli	r2,r4,3
  8040c0:	02002034 	movhi	r8,128
  8040c4:	4214e604 	addi	r8,r8,21400
  8040c8:	4085883a 	add	r2,r8,r2
  8040cc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
  8040d0:	11400115 	stw	r5,4(r2)
  8040d4:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8040d8:	30000726 	beq	r6,zero,8040f8 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8040dc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8040e0:	28c6703a 	and	r3,r5,r3
  8040e4:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  8040e8:	d0e0c017 	ldw	r3,-32000(gp)
  8040ec:	1104983a 	sll	r2,r2,r4
  8040f0:	10c4b03a 	or	r2,r2,r3
  8040f4:	00000706 	br	804114 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8040f8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8040fc:	28c6703a 	and	r3,r5,r3
  804100:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  804104:	1104983a 	sll	r2,r2,r4
  804108:	d0e0c017 	ldw	r3,-32000(gp)
  80410c:	0084303a 	nor	r2,zero,r2
  804110:	10c4703a 	and	r2,r2,r3
  804114:	d0a0c015 	stw	r2,-32000(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804118:	d0a0c017 	ldw	r2,-32000(gp)
  80411c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804120:	2801703a 	wrctl	status,r5
  804124:	3801703a 	wrctl	status,r7
  804128:	0005883a 	mov	r2,zero
  80412c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  804130:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  804134:	f800283a 	ret

00804138 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  804138:	deffff04 	addi	sp,sp,-4
  80413c:	01002034 	movhi	r4,128
  804140:	01402034 	movhi	r5,128
  804144:	dfc00015 	stw	ra,0(sp)
  804148:	21138904 	addi	r4,r4,20004
  80414c:	29542904 	addi	r5,r5,20644

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804150:	2140061e 	bne	r4,r5,80416c <alt_load+0x34>
  804154:	01002034 	movhi	r4,128
  804158:	01402034 	movhi	r5,128
  80415c:	21000804 	addi	r4,r4,32
  804160:	29400804 	addi	r5,r5,32
  804164:	2140121e 	bne	r4,r5,8041b0 <alt_load+0x78>
  804168:	00000b06 	br	804198 <alt_load+0x60>
  80416c:	00c02034 	movhi	r3,128
  804170:	18d42904 	addi	r3,r3,20644
  804174:	1907c83a 	sub	r3,r3,r4
  804178:	0005883a 	mov	r2,zero
  {
    while( to != end )
  80417c:	10fff526 	beq	r2,r3,804154 <__alt_data_end+0xff804154>
    {
      *to++ = *from++;
  804180:	114f883a 	add	r7,r2,r5
  804184:	39c00017 	ldw	r7,0(r7)
  804188:	110d883a 	add	r6,r2,r4
  80418c:	10800104 	addi	r2,r2,4
  804190:	31c00015 	stw	r7,0(r6)
  804194:	003ff906 	br	80417c <__alt_data_end+0xff80417c>
  804198:	01002034 	movhi	r4,128
  80419c:	01402034 	movhi	r5,128
  8041a0:	21124504 	addi	r4,r4,18708
  8041a4:	29524504 	addi	r5,r5,18708

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8041a8:	2140101e 	bne	r4,r5,8041ec <alt_load+0xb4>
  8041ac:	00000b06 	br	8041dc <alt_load+0xa4>
  8041b0:	00c02034 	movhi	r3,128
  8041b4:	18c06004 	addi	r3,r3,384
  8041b8:	1907c83a 	sub	r3,r3,r4
  8041bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
  8041c0:	10fff526 	beq	r2,r3,804198 <__alt_data_end+0xff804198>
    {
      *to++ = *from++;
  8041c4:	114f883a 	add	r7,r2,r5
  8041c8:	39c00017 	ldw	r7,0(r7)
  8041cc:	110d883a 	add	r6,r2,r4
  8041d0:	10800104 	addi	r2,r2,4
  8041d4:	31c00015 	stw	r7,0(r6)
  8041d8:	003ff906 	br	8041c0 <__alt_data_end+0xff8041c0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8041dc:	08047780 	call	804778 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  8041e0:	dfc00017 	ldw	ra,0(sp)
  8041e4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  8041e8:	08048641 	jmpi	804864 <alt_icache_flush_all>
  8041ec:	00c02034 	movhi	r3,128
  8041f0:	18d38904 	addi	r3,r3,20004
  8041f4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8041f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
  8041fc:	18bff726 	beq	r3,r2,8041dc <__alt_data_end+0xff8041dc>
    {
      *to++ = *from++;
  804200:	114f883a 	add	r7,r2,r5
  804204:	39c00017 	ldw	r7,0(r7)
  804208:	110d883a 	add	r6,r2,r4
  80420c:	10800104 	addi	r2,r2,4
  804210:	31c00015 	stw	r7,0(r6)
  804214:	003ff906 	br	8041fc <__alt_data_end+0xff8041fc>

00804218 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804218:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80421c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804220:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804224:	08044a80 	call	8044a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  804228:	08044c80 	call	8044c8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  80422c:	d1a0c117 	ldw	r6,-31996(gp)
  804230:	d160c217 	ldw	r5,-31992(gp)
  804234:	d120c317 	ldw	r4,-31988(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  804238:	dfc00017 	ldw	ra,0(sp)
  80423c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804240:	0800da01 	jmpi	800da0 <main>

00804244 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  804244:	defff204 	addi	sp,sp,-56
  804248:	2005883a 	mov	r2,r4
  80424c:	dfc00a15 	stw	ra,40(sp)
  804250:	df000915 	stw	fp,36(sp)
  804254:	ddc00815 	stw	r23,32(sp)
  804258:	dd800715 	stw	r22,28(sp)
  80425c:	dd400615 	stw	r21,24(sp)
  804260:	dd000515 	stw	r20,20(sp)
  804264:	dcc00415 	stw	r19,16(sp)
  804268:	dc800315 	stw	r18,12(sp)
  80426c:	dc400215 	stw	r17,8(sp)
  804270:	dc000115 	stw	r16,4(sp)
  804274:	d9400b15 	stw	r5,44(sp)
  804278:	d9800c15 	stw	r6,48(sp)
  80427c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804280:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  804284:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  804288:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  80428c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804290:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804294:	11000007 	ldb	r4,0(r2)
  804298:	20003a26 	beq	r4,zero,804384 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  80429c:	24000226 	beq	r4,r16,8042a8 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8042a0:	14400044 	addi	r17,r2,1
  8042a4:	00001406 	br	8042f8 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  8042a8:	14400084 	addi	r17,r2,2
  8042ac:	10800047 	ldb	r2,1(r2)
  8042b0:	10003426 	beq	r2,zero,804384 <alt_printf+0x140>
            {
                if (c == '%')
  8042b4:	1400021e 	bne	r2,r16,8042c0 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  8042b8:	8009883a 	mov	r4,r16
  8042bc:	00000e06 	br	8042f8 <alt_printf+0xb4>
                } 
                else if (c == 'c')
  8042c0:	1480051e 	bne	r2,r18,8042d8 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  8042c4:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  8042c8:	ad800104 	addi	r22,r21,4
  8042cc:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  8042d0:	08043b40 	call	8043b4 <alt_putchar>
  8042d4:	00002906 	br	80437c <alt_printf+0x138>
                }
                else if (c == 'x')
  8042d8:	14c0201e 	bne	r2,r19,80435c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  8042dc:	adc00017 	ldw	r23,0(r21)
  8042e0:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  8042e4:	b8000326 	beq	r23,zero,8042f4 <alt_printf+0xb0>
  8042e8:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  8042ec:	00c003c4 	movi	r3,15
  8042f0:	00000306 	br	804300 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  8042f4:	01000c04 	movi	r4,48
  8042f8:	08043b40 	call	8043b4 <alt_putchar>
                        continue;
  8042fc:	00001f06 	br	80437c <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804300:	1d84983a 	sll	r2,r3,r22
  804304:	15c4703a 	and	r2,r2,r23
  804308:	1000021e 	bne	r2,zero,804314 <alt_printf+0xd0>
                        digit_shift -= 4;
  80430c:	b5bfff04 	addi	r22,r22,-4
  804310:	003ffb06 	br	804300 <__alt_data_end+0xff804300>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804314:	070003c4 	movi	fp,15
                        if (digit <= 9)
  804318:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80431c:	b0001716 	blt	r22,zero,80437c <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804320:	e588983a 	sll	r4,fp,r22
  804324:	25c8703a 	and	r4,r4,r23
  804328:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  80432c:	19000236 	bltu	r3,r4,804338 <alt_printf+0xf4>
                            c = '0' + digit;
  804330:	21000c04 	addi	r4,r4,48
  804334:	00000106 	br	80433c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  804338:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  80433c:	21003fcc 	andi	r4,r4,255
  804340:	2100201c 	xori	r4,r4,128
  804344:	213fe004 	addi	r4,r4,-128
  804348:	d8c00015 	stw	r3,0(sp)
  80434c:	08043b40 	call	8043b4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804350:	b5bfff04 	addi	r22,r22,-4
  804354:	d8c00017 	ldw	r3,0(sp)
  804358:	003ff006 	br	80431c <__alt_data_end+0xff80431c>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80435c:	1500071e 	bne	r2,r20,80437c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  804360:	ad800017 	ldw	r22,0(r21)
  804364:	ad400104 	addi	r21,r21,4

                    while(*s)
  804368:	b1000007 	ldb	r4,0(r22)
  80436c:	20000326 	beq	r4,zero,80437c <alt_printf+0x138>
                      alt_putchar(*s++);
  804370:	b5800044 	addi	r22,r22,1
  804374:	08043b40 	call	8043b4 <alt_putchar>
  804378:	003ffb06 	br	804368 <__alt_data_end+0xff804368>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  80437c:	8805883a 	mov	r2,r17
  804380:	003fc406 	br	804294 <__alt_data_end+0xff804294>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  804384:	dfc00a17 	ldw	ra,40(sp)
  804388:	df000917 	ldw	fp,36(sp)
  80438c:	ddc00817 	ldw	r23,32(sp)
  804390:	dd800717 	ldw	r22,28(sp)
  804394:	dd400617 	ldw	r21,24(sp)
  804398:	dd000517 	ldw	r20,20(sp)
  80439c:	dcc00417 	ldw	r19,16(sp)
  8043a0:	dc800317 	ldw	r18,12(sp)
  8043a4:	dc400217 	ldw	r17,8(sp)
  8043a8:	dc000117 	ldw	r16,4(sp)
  8043ac:	dec00e04 	addi	sp,sp,56
  8043b0:	f800283a 	ret

008043b4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8043b4:	defffd04 	addi	sp,sp,-12
  8043b8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  8043bc:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8043c0:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  8043c4:	01002034 	movhi	r4,128
  8043c8:	000f883a 	mov	r7,zero
  8043cc:	01800044 	movi	r6,1
  8043d0:	d80b883a 	mov	r5,sp
  8043d4:	21142204 	addi	r4,r4,20616
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8043d8:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  8043dc:	080454c0 	call	80454c <altera_avalon_jtag_uart_write>
  8043e0:	00ffffc4 	movi	r3,-1
  8043e4:	10c00126 	beq	r2,r3,8043ec <alt_putchar+0x38>
        return -1;
    }
    return c;
  8043e8:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
  8043ec:	dfc00217 	ldw	ra,8(sp)
  8043f0:	dc000117 	ldw	r16,4(sp)
  8043f4:	dec00304 	addi	sp,sp,12
  8043f8:	f800283a 	ret

008043fc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8043fc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804400:	00bfff84 	movi	r2,-2
  804404:	2884703a 	and	r2,r5,r2
  804408:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80440c:	d0a00517 	ldw	r2,-32748(gp)
  804410:	00ffff04 	movi	r3,-4
  804414:	108000c4 	addi	r2,r2,3
  804418:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80441c:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804420:	d0a00515 	stw	r2,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804424:	1109883a 	add	r4,r2,r4
  804428:	18c00004 	addi	r3,r3,0
  80442c:	1900032e 	bgeu	r3,r4,80443c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804430:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804434:	00bfffc4 	movi	r2,-1
  804438:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  80443c:	d1200515 	stw	r4,-32748(gp)
  804440:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  804444:	f800283a 	ret

00804448 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
  804448:	00800044 	movi	r2,1
  80444c:	20800226 	beq	r4,r2,804458 <write+0x10>
  804450:	00800084 	movi	r2,2
  804454:	2080041e 	bne	r4,r2,804468 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
  804458:	01002034 	movhi	r4,128
  80445c:	000f883a 	mov	r7,zero
  804460:	21142204 	addi	r4,r4,20616
  804464:	080454c1 	jmpi	80454c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  804468:	d0a00c17 	ldw	r2,-32720(gp)
  80446c:	10000926 	beq	r2,zero,804494 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  804470:	deffff04 	addi	sp,sp,-4
  804474:	dfc00015 	stw	ra,0(sp)
  804478:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  80447c:	00c01444 	movi	r3,81
  804480:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  804484:	00bfffc4 	movi	r2,-1
  804488:	dfc00017 	ldw	ra,0(sp)
  80448c:	dec00104 	addi	sp,sp,4
  804490:	f800283a 	ret
  804494:	d0a0bf04 	addi	r2,gp,-32004
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  804498:	00c01444 	movi	r3,81
  80449c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  8044a0:	00bfffc4 	movi	r2,-1
  8044a4:	f800283a 	ret

008044a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8044a8:	deffff04 	addi	sp,sp,-4
  8044ac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8044b0:	08048680 	call	804868 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8044b4:	00800044 	movi	r2,1
  8044b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8044bc:	dfc00017 	ldw	ra,0(sp)
  8044c0:	dec00104 	addi	sp,sp,4
  8044c4:	f800283a 	ret

008044c8 <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  8044c8:	00804034 	movhi	r2,256
  8044cc:	10840004 	addi	r2,r2,4096
  8044d0:	d0a0c515 	stw	r2,-31980(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8044d4:	01002034 	movhi	r4,128
  8044d8:	0081c9f4 	movhi	r2,1831
  8044dc:	10838004 	addi	r2,r2,3584
  8044e0:	d1600804 	addi	r5,gp,-32736
  8044e4:	2113fb04 	addi	r4,r4,20460
  8044e8:	d0a0c415 	stw	r2,-31984(gp)
  8044ec:	08047841 	jmpi	804784 <alt_dev_llist_insert>

008044f0 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  8044f0:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  8044f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  8044f8:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  8044fc:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  804500:	11800b2e 	bgeu	r2,r6,804530 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804504:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  804508:	1a60000c 	andi	r9,r3,32768
  80450c:	48000326 	beq	r9,zero,80451c <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804510:	10c00005 	stb	r3,0(r2)
  804514:	10800044 	addi	r2,r2,1
  804518:	003ff906 	br	804500 <__alt_data_end+0xff804500>
    else if (ptr != buffer)
  80451c:	11400226 	beq	r2,r5,804528 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  804520:	1145c83a 	sub	r2,r2,r5
  804524:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  804528:	403ff526 	beq	r8,zero,804500 <__alt_data_end+0xff804500>
  80452c:	00000106 	br	804534 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  804530:	117ffb1e 	bne	r2,r5,804520 <__alt_data_end+0xff804520>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  804534:	39d0000c 	andi	r7,r7,16384
  804538:	3800021e 	bne	r7,zero,804544 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  80453c:	00bffec4 	movi	r2,-5
  804540:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  804544:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  804548:	f800283a 	ret

0080454c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  80454c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804550:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  804554:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  804558:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  80455c:	2980072e 	bgeu	r5,r6,80457c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  804560:	38c00037 	ldwio	r3,0(r7)
  804564:	18ffffec 	andhi	r3,r3,65535
  804568:	183ffc26 	beq	r3,zero,80455c <__alt_data_end+0xff80455c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  80456c:	28c00007 	ldb	r3,0(r5)
  804570:	20c00035 	stwio	r3,0(r4)
  804574:	29400044 	addi	r5,r5,1
  804578:	003ff806 	br	80455c <__alt_data_end+0xff80455c>

  return count;
}
  80457c:	f800283a 	ret

00804580 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  804580:	d0e0c417 	ldw	r3,-31984(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  804584:	d0a0c517 	ldw	r2,-31980(gp)

  if (!altera_avalon_timer_ts_freq)
  804588:	18000c26 	beq	r3,zero,8045bc <alt_timestamp_start+0x3c>
    return -1;
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  80458c:	11000104 	addi	r4,r2,4
  804590:	00c00204 	movi	r3,8
  804594:	20c00035 	stwio	r3,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  804598:	00ffffd4 	movui	r3,65535
  80459c:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  8045a0:	10c00335 	stwio	r3,12(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  8045a4:	10c00435 	stwio	r3,16(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  8045a8:	10c00535 	stwio	r3,20(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  8045ac:	00800104 	movi	r2,4
  8045b0:	20800035 	stwio	r2,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  8045b4:	0005883a 	mov	r2,zero
  8045b8:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
  8045bc:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
  8045c0:	f800283a 	ret

008045c4 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  8045c4:	d0a0c417 	ldw	r2,-31984(gp)
  8045c8:	10000e26 	beq	r2,zero,804604 <alt_timestamp+0x40>
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  8045cc:	d120c517 	ldw	r4,-31980(gp)
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  8045d0:	20800604 	addi	r2,r4,24
  8045d4:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  8045d8:	11400037 	ldwio	r5,0(r2)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  8045dc:	20800737 	ldwio	r2,28(r4)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  8045e0:	20c00837 	ldwio	r3,32(r4)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  8045e4:	21000937 	ldwio	r4,36(r4)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  8045e8:	2008943a 	slli	r4,r4,16
  8045ec:	1004943a 	slli	r2,r2,16
  8045f0:	297fffcc 	andi	r5,r5,65535
  8045f4:	18ffffcc 	andi	r3,r3,65535
  8045f8:	2884303a 	nor	r2,r5,r2
  8045fc:	20c6303a 	nor	r3,r4,r3
  804600:	f800283a 	ret
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
  804604:	00bfffc4 	movi	r2,-1
  804608:	1007883a 	mov	r3,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
  80460c:	f800283a 	ret

00804610 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
  804610:	d0a0c417 	ldw	r2,-31984(gp)
  804614:	f800283a 	ret

00804618 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
  804618:	d1600804 	addi	r5,gp,-32736
  80461c:	08047f01 	jmpi	8047f0 <alt_find_dev>

00804620 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
  804620:	20800a17 	ldw	r2,40(r4)
  804624:	10800023 	ldbuio	r2,0(r2)
  804628:	28800005 	stb	r2,0(r5)

	return 0;
}
  80462c:	0005883a 	mov	r2,zero
  804630:	f800283a 	ret

00804634 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804634:	20800a17 	ldw	r2,40(r4)
  804638:	29400fcc 	andi	r5,r5,63
  80463c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  804640:	20800a17 	ldw	r2,40(r4)
  804644:	10800063 	ldbuio	r2,1(r2)
  804648:	30800005 	stb	r2,0(r6)

	return 0;
}
  80464c:	0005883a 	mov	r2,zero
  804650:	f800283a 	ret

00804654 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804654:	20800a17 	ldw	r2,40(r4)
  804658:	29400fcc 	andi	r5,r5,63
  80465c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
  804660:	20800a17 	ldw	r2,40(r4)
  804664:	11800065 	stbio	r6,1(r2)

	return 0;
}
  804668:	0005883a 	mov	r2,zero
  80466c:	f800283a 	ret

00804670 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804670:	20800a17 	ldw	r2,40(r4)
  804674:	00c00c84 	movi	r3,50
  804678:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  80467c:	20800a17 	ldw	r2,40(r4)
  804680:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804684:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  804688:	10803fcc 	andi	r2,r2,255
  80468c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804690:	20800a17 	ldw	r2,40(r4)
  804694:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  804698:	20800a17 	ldw	r2,40(r4)
  80469c:	10800063 	ldbuio	r2,1(r2)
  8046a0:	10803fcc 	andi	r2,r2,255
  8046a4:	1006923a 	slli	r3,r2,8
  8046a8:	28800017 	ldw	r2,0(r5)
  8046ac:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
  8046b0:	10e0000c 	andi	r3,r2,32768
  8046b4:	18000126 	beq	r3,zero,8046bc <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
  8046b8:	10bffff4 	orhi	r2,r2,65535
  8046bc:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  8046c0:	0005883a 	mov	r2,zero
  8046c4:	f800283a 	ret

008046c8 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8046c8:	20800a17 	ldw	r2,40(r4)
  8046cc:	00c00d04 	movi	r3,52
  8046d0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8046d4:	20800a17 	ldw	r2,40(r4)
  8046d8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8046dc:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8046e0:	10803fcc 	andi	r2,r2,255
  8046e4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8046e8:	20800a17 	ldw	r2,40(r4)
  8046ec:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  8046f0:	20800a17 	ldw	r2,40(r4)
  8046f4:	10800063 	ldbuio	r2,1(r2)
  8046f8:	10803fcc 	andi	r2,r2,255
  8046fc:	1006923a 	slli	r3,r2,8
  804700:	28800017 	ldw	r2,0(r5)
  804704:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
  804708:	10e0000c 	andi	r3,r2,32768
  80470c:	18000126 	beq	r3,zero,804714 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
  804710:	10bffff4 	orhi	r2,r2,65535
  804714:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  804718:	0005883a 	mov	r2,zero
  80471c:	f800283a 	ret

00804720 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804720:	20800a17 	ldw	r2,40(r4)
  804724:	00c00d84 	movi	r3,54
  804728:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  80472c:	20800a17 	ldw	r2,40(r4)
  804730:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804734:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  804738:	10803fcc 	andi	r2,r2,255
  80473c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  804740:	20800a17 	ldw	r2,40(r4)
  804744:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  804748:	20800a17 	ldw	r2,40(r4)
  80474c:	10800063 	ldbuio	r2,1(r2)
  804750:	10803fcc 	andi	r2,r2,255
  804754:	1006923a 	slli	r3,r2,8
  804758:	28800017 	ldw	r2,0(r5)
  80475c:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
  804760:	10e0000c 	andi	r3,r2,32768
  804764:	18000126 	beq	r3,zero,80476c <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
  804768:	10bffff4 	orhi	r2,r2,65535
  80476c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  804770:	0005883a 	mov	r2,zero
  804774:	f800283a 	ret

00804778 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  804778:	f800283a 	ret

0080477c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  80477c:	3005883a 	mov	r2,r6
  804780:	f800283a 	ret

00804784 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  804784:	20000226 	beq	r4,zero,804790 <alt_dev_llist_insert+0xc>
  804788:	20800217 	ldw	r2,8(r4)
  80478c:	1000101e 	bne	r2,zero,8047d0 <alt_dev_llist_insert+0x4c>
  804790:	d0a00c17 	ldw	r2,-32720(gp)
  804794:	10000926 	beq	r2,zero,8047bc <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  804798:	deffff04 	addi	sp,sp,-4
  80479c:	dfc00015 	stw	ra,0(sp)
  8047a0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  8047a4:	00c00584 	movi	r3,22
  8047a8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  8047ac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  8047b0:	dfc00017 	ldw	ra,0(sp)
  8047b4:	dec00104 	addi	sp,sp,4
  8047b8:	f800283a 	ret
  8047bc:	d0a0bf04 	addi	r2,gp,-32004
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  8047c0:	00c00584 	movi	r3,22
  8047c4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  8047c8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  8047cc:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  8047d0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8047d4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  8047d8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  8047dc:	28800017 	ldw	r2,0(r5)
  8047e0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  8047e4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  8047e8:	0005883a 	mov	r2,zero
  8047ec:	f800283a 	ret

008047f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8047f0:	defffb04 	addi	sp,sp,-20
  8047f4:	dcc00315 	stw	r19,12(sp)
  8047f8:	dc800215 	stw	r18,8(sp)
  8047fc:	dc400115 	stw	r17,4(sp)
  804800:	dc000015 	stw	r16,0(sp)
  804804:	dfc00415 	stw	ra,16(sp)
  804808:	2027883a 	mov	r19,r4
  80480c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  804810:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  804814:	0802ebc0 	call	802ebc <strlen>
  804818:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80481c:	84400726 	beq	r16,r17,80483c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  804820:	81000217 	ldw	r4,8(r16)
  804824:	900d883a 	mov	r6,r18
  804828:	980b883a 	mov	r5,r19
  80482c:	08048e40 	call	8048e4 <memcmp>
  804830:	10000426 	beq	r2,zero,804844 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  804834:	84000017 	ldw	r16,0(r16)
  804838:	003ff806 	br	80481c <__alt_data_end+0xff80481c>
  }
  
  /* No match found */
  
  return NULL;
  80483c:	0005883a 	mov	r2,zero
  804840:	00000106 	br	804848 <alt_find_dev+0x58>
  804844:	8005883a 	mov	r2,r16
}
  804848:	dfc00417 	ldw	ra,16(sp)
  80484c:	dcc00317 	ldw	r19,12(sp)
  804850:	dc800217 	ldw	r18,8(sp)
  804854:	dc400117 	ldw	r17,4(sp)
  804858:	dc000017 	ldw	r16,0(sp)
  80485c:	dec00504 	addi	sp,sp,20
  804860:	f800283a 	ret

00804864 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  804864:	f800283a 	ret

00804868 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  804868:	000170fa 	wrctl	ienable,zero
  80486c:	f800283a 	ret

00804870 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  804870:	213ffe84 	addi	r4,r4,-6
  804874:	008003c4 	movi	r2,15
  804878:	11001636 	bltu	r2,r4,8048d4 <alt_exception_cause_generated_bad_addr+0x64>
  80487c:	200890ba 	slli	r4,r4,2
  804880:	00802034 	movhi	r2,128
  804884:	10922504 	addi	r2,r2,18580
  804888:	2089883a 	add	r4,r4,r2
  80488c:	20800017 	ldw	r2,0(r4)
  804890:	1000683a 	jmp	r2
  804894:	008048dc 	xori	r2,zero,291
  804898:	008048dc 	xori	r2,zero,291
  80489c:	008048d4 	movui	r2,291
  8048a0:	008048d4 	movui	r2,291
  8048a4:	008048d4 	movui	r2,291
  8048a8:	008048dc 	xori	r2,zero,291
  8048ac:	008048d4 	movui	r2,291
  8048b0:	008048d4 	movui	r2,291
  8048b4:	008048dc 	xori	r2,zero,291
  8048b8:	008048dc 	xori	r2,zero,291
  8048bc:	008048d4 	movui	r2,291
  8048c0:	008048dc 	xori	r2,zero,291
  8048c4:	008048d4 	movui	r2,291
  8048c8:	008048d4 	movui	r2,291
  8048cc:	008048d4 	movui	r2,291
  8048d0:	008048dc 	xori	r2,zero,291
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8048d4:	0005883a 	mov	r2,zero
  8048d8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8048dc:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  8048e0:	f800283a 	ret

008048e4 <memcmp>:
  8048e4:	218d883a 	add	r6,r4,r6
  8048e8:	21800826 	beq	r4,r6,80490c <memcmp+0x28>
  8048ec:	20800003 	ldbu	r2,0(r4)
  8048f0:	28c00003 	ldbu	r3,0(r5)
  8048f4:	10c00226 	beq	r2,r3,804900 <memcmp+0x1c>
  8048f8:	10c5c83a 	sub	r2,r2,r3
  8048fc:	f800283a 	ret
  804900:	21000044 	addi	r4,r4,1
  804904:	29400044 	addi	r5,r5,1
  804908:	003ff706 	br	8048e8 <__alt_data_end+0xff8048e8>
  80490c:	0005883a 	mov	r2,zero
  804910:	f800283a 	ret
