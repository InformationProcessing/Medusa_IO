
snake.elf:     file format elf32-littlenios2
snake.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000427c memsz 0x0000427c flags r-x
    LOAD off    0x0000529c vaddr 0x0080429c paddr 0x00804518 align 2**12
         filesz 0x0000027c memsz 0x0000027c flags rw-
    LOAD off    0x00005794 vaddr 0x00804794 paddr 0x00804794 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003cd4  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000448  00803e54  00803e54  00004e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000027c  0080429c  00804518  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00804794  00804794  00005794  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008048e4  008048e4  00005518  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005518  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000007d8  00000000  00000000  00005540  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c766  00000000  00000000  00005d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000041c3  00000000  00000000  0001247e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004b7c  00000000  00000000  00016641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c0c  00000000  00000000  0001b1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000026b3  00000000  00000000  0001bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006455  00000000  00000000  0001e47f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000248d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a58  00000000  00000000  000248e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00027362  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00027365  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00027368  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00027369  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002736a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002736e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00027372  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00027376  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002737f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00027388  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  00027391  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  00027396  2**0
                  CONTENTS, READONLY
 29 .jdi          0000433a  00000000  00000000  000273c7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000977e4  00000000  00000000  0002b701  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
00803e54 l    d  .rodata	00000000 .rodata
0080429c l    d  .rwdata	00000000 .rwdata
00804794 l    d  .bss	00000000 .bss
008048e4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../snake_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00804794 l     O .bss	00000004 count.3347
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00802820 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00802dd4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00804110 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00804384 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008044f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00804464 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00803cbc l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
008047d4 g     O .bss	00000004 alt_instruction_exception_handler
00803758 g     F .text	0000002c alt_main
008047e4 g     O .bss	00000100 alt_irq
00804518 g       *ABS*	00000000 __flash_rwdata_start
008048e4 g       *ABS*	00000000 __alt_heap_start
008025c8 g     F .text	00000008 strtok_r
0080224c g     F .text	0000004c printf
008047cc g     O .bss	00000004 altera_avalon_timer_ts_freq
008034e8 g     F .text	00000060 memmove
00802538 g     F .text	00000090 __strtok_r
008001f4 g     F .text	00000088 sys_timer_isr
008044fc g     O .rwdata	00000004 jtag_uart
00803da8 g     F .text	00000008 altera_nios2_gen2_irq_init
00803440 g     F .text	000000a8 __sfvwrite_small_str
00800000 g     F .entry	0000000c __reset
00803bb0 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00800020 g       *ABS*	00000000 __flash_exceptions_start
008047b8 g     O .bss	00000004 errno
008047c4 g     O .bss	00000004 alt_argv
0080c4e8 g       *ABS*	00000000 _gp
00804490 g     O .rwdata	00000030 alt_fd_list
00803d30 g     F .text	00000074 alt_find_dev
00804798 g     O .bss	00000004 cmdbuffer
00801e0c g     F .text	000000dc .hidden __floatsidf
00803db0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
008004e8 g     F .text	000000d4 to_hex
00803a30 g     F .text	0000005c altera_avalon_jtag_uart_read
00801f8c g     F .text	00000014 malloc
00802210 g     F .text	0000003c _printf_r
00800bb8 g     F .text	00000064 .hidden __udivsi3
008004d0 g     F .text	00000018 write_to_disp
008001bc g     F .text	00000038 ring_buf_push
00802298 g     F .text	00000050 _sbrk_r
00804500 g     O .rwdata	00000004 alt_max_fd
008035e4 g     F .text	00000094 alt_irq_register
00800c74 g     F .text	000008ac .hidden __adddf3
00800458 g     F .text	00000078 read_request
0080066c g     F .text	00000014 throw_code
008044ec g     O .rwdata	00000004 _global_impure_ptr
008048e4 g       *ABS*	00000000 __bss_end
008035a0 g     F .text	00000044 alt_getchar
0080479c g     O .bss	00000004 x_buf
00802804 g     F .text	0000001c strtol
008047bc g     O .bss	00000004 alt_irq_active
008047a0 g     O .bss	00000004 disp_buf
008000fc g     F .exceptions	00000060 alt_irq_handler
008044c0 g     O .rwdata	00000028 alt_dev_null
00803cb8 g     F .text	00000004 alt_dcache_flush_all
00801d8c g     F .text	00000080 .hidden __fixdfsi
00804518 g       *ABS*	00000000 __ram_rwdata_end
008003bc g     F .text	0000009c timer_init
00804504 g     O .rwdata	00000008 alt_dev_list
00803988 g     F .text	00000060 write
00803b50 g     F .text	00000008 alt_timestamp_freq
0080429c g       *ABS*	00000000 __ram_rodata_end
00800c1c g     F .text	00000058 .hidden __umodsi3
008048e4 g       *ABS*	00000000 end
00801f80 g     F .text	0000000c _atoi_r
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00801ee8 g     F .text	00000064 .hidden __clzsi2
00803a8c g     F .text	00000034 altera_avalon_jtag_uart_write
00802e40 g     F .text	0000052c ___vfprintf_internal_r
008022e8 g     F .text	00000064 _sprintf_r
00801fd4 g     F .text	000000e4 _free_r
00803784 g     F .text	00000170 alt_printf
00800180 g     F .text	0000003c _start
008047a4 g     O .bss	00000004 y_buf
00803a08 g     F .text	00000028 alt_sys_init
00803b60 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
008047d8 g     O .bss	0000000c hexbuffers
00801f4c g     F .text	00000028 .hidden __mulsi3
0080429c g       *ABS*	00000000 __ram_rwdata_start
00803e54 g       *ABS*	00000000 __ram_rodata_start
00802418 g     F .text	00000054 strncpy
00803c08 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
0080246c g     F .text	000000cc strtok
00803e24 g     F .text	00000030 memcmp
008048e4 g       *ABS*	00000000 __alt_stack_base
008002ac g     F .text	00000110 convolve_float
00801520 g     F .text	0000086c .hidden __muldf3
00803cc4 g     F .text	0000006c alt_dev_llist_insert
0080393c g     F .text	0000004c sbrk
0080288c g     F .text	0000052c ___svfprintf_internal_r
00803388 g     F .text	000000b8 __sfvwrite_small_dev
00804794 g       *ABS*	00000000 __bss_start
00801fb4 g     F .text	00000020 memset
008009b4 g     F .text	0000010c main
008047c0 g     O .bss	00000004 alt_envp
01000000 g       *ABS*	00000000 __alt_heap_limit
008025d0 g     F .text	00000234 _strtol_r
00803ac0 g     F .text	00000044 alt_timestamp_start
008020b8 g     F .text	00000158 _malloc_r
00804514 g     O .rwdata	00000004 alt_errno
00800ac0 g     F .text	00000084 .hidden __divsi3
008023c4 g     F .text	00000038 strcmp
00803e54 g       *ABS*	00000000 __flash_rodata_start
0080027c g     F .text	00000030 ring_buf_read
008039e8 g     F .text	00000020 alt_irq_init
00800680 g     F .text	00000334 parse_request
0080234c g     F .text	00000078 sprintf
00803f0f g     O .rodata	00000100 .hidden __clz_tab
00803548 g     F .text	00000058 _write_r
008044f0 g     O .rwdata	00000004 _impure_ptr
008047c8 g     O .bss	00000004 alt_argc
008047d0 g     O .bss	00000004 altera_avalon_timer_ts_base
0080429c g     O .rwdata	000000e8 h
00800020 g       .exceptions	00000000 alt_irq_entry
0080450c g     O .rwdata	00000008 alt_fs_list
00802db8 g     F .text	0000001c __vfprintf_internal_unused
008047a8 g     O .bss	00000004 z_buf
00800020 g       *ABS*	00000000 __ram_exceptions_start
00803b58 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
008005bc g     F .text	000000b0 get_input
00803b04 g     F .text	0000004c alt_timestamp
00804518 g       *ABS*	00000000 _edata
008048e4 g       *ABS*	00000000 _end
00800180 g       *ABS*	00000000 __ram_exceptions_end
00800b44 g     F .text	00000074 .hidden __modsi3
008044e8 g     O .rwdata	00000004 __ctype_ptr__
00803c60 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00801f74 g     F .text	0000000c atoi
0080400f g     O .rodata	00000101 _ctype_
0080000c g       .entry	00000000 _exit
00803b74 g     F .text	00000020 alt_up_accelerometer_spi_read
00803b94 g     F .text	0000001c alt_up_accelerometer_spi_write
008023fc g     F .text	0000001c strlen
008038f4 g     F .text	00000048 alt_putchar
008047b0 g     O .bss	00000004 __malloc_sbrk_start
00803da4 g     F .text	00000004 alt_icache_flush_all
008044f4 g     O .rwdata	00000004 alt_priority_mask
008047b4 g     O .bss	00000004 __malloc_free_list
0080336c g     F .text	0000001c __vfprintf_internal
008047ac g     O .bss	00000004 acc_dev
00803678 g     F .text	000000e0 alt_load
00801fa0 g     F .text	00000014 free



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80010c:	04002034 	movhi	r16,128
  800110:	8411f904 	addi	r16,r16,18404

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	000b883a 	mov	r5,zero
    mask = 1;
  800118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	1888703a 	and	r4,r3,r2
  800120:	20000b26 	beq	r4,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800124:	280490fa 	slli	r2,r5,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	183ff51e 	bne	r3,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	1085883a 	add	r2,r2,r2
      i++;
  800154:	29400044 	addi	r5,r5,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a0bb17 	ldw	r2,-32020(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6b13a14 	ori	gp,gp,50408
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	1091e514 	ori	r2,r2,18324

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d23914 	ori	r3,r3,18660

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	08036780 	call	803678 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	08037580 	call	803758 <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <ring_buf_push>:
	RING_T* values;
};

//Buffer functions
void ring_buf_push(struct ring_buffer* buf, RING_T in){
	if (buf->next_free < 0){
  8001bc:	20800117 	ldw	r2,4(r4)
  8001c0:	1000030e 	bge	r2,zero,8001d0 <ring_buf_push+0x14>
		buf->next_free = buf ->size-1;
  8001c4:	20800017 	ldw	r2,0(r4)
  8001c8:	10bfffc4 	addi	r2,r2,-1
  8001cc:	20800115 	stw	r2,4(r4)
	}
	(buf->values)[buf->next_free] = in;
  8001d0:	20c00117 	ldw	r3,4(r4)
  8001d4:	21800217 	ldw	r6,8(r4)
  8001d8:	18c5883a 	add	r2,r3,r3
  8001dc:	1085883a 	add	r2,r2,r2
  8001e0:	3085883a 	add	r2,r6,r2
  8001e4:	11400015 	stw	r5,0(r2)
	(buf->next_free)--;
  8001e8:	18ffffc4 	addi	r3,r3,-1
  8001ec:	20c00115 	stw	r3,4(r4)
  8001f0:	f800283a 	ret

008001f4 <sys_timer_isr>:
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void sys_timer_isr() {
  8001f4:	defffc04 	addi	sp,sp,-16
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  8001f8:	00804034 	movhi	r2,256
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void sys_timer_isr() {
  8001fc:	dfc00315 	stw	ra,12(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  800200:	10842004 	addi	r2,r2,4224
  800204:	10000035 	stwio	zero,0(r2)


    alt_32 x,y,z;

    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800208:	d120b117 	ldw	r4,-32060(gp)
  80020c:	d9400204 	addi	r5,sp,8
  800210:	0803bb00 	call	803bb0 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800214:	d120b117 	ldw	r4,-32060(gp)
  800218:	d9400104 	addi	r5,sp,4
  80021c:	0803c080 	call	803c08 <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800220:	d120b117 	ldw	r4,-32060(gp)
  800224:	d80b883a 	mov	r5,sp
  800228:	0803c600 	call	803c60 <alt_up_accelerometer_spi_read_z_axis>

	ring_buf_push(x_buf, x);
  80022c:	d9400217 	ldw	r5,8(sp)
  800230:	d120ad17 	ldw	r4,-32076(gp)
  800234:	08001bc0 	call	8001bc <ring_buf_push>
	ring_buf_push(y_buf, y);
  800238:	d9400117 	ldw	r5,4(sp)
  80023c:	d120af17 	ldw	r4,-32068(gp)
  800240:	08001bc0 	call	8001bc <ring_buf_push>
	ring_buf_push(z_buf, z);
  800244:	d9400017 	ldw	r5,0(sp)
  800248:	d120b017 	ldw	r4,-32064(gp)
  80024c:	08001bc0 	call	8001bc <ring_buf_push>

	//iNTERRUPT FREQUENCY MONITORING
	static int count;
	static alt_64 lasttime;

    if(count%1024 == 0){
  800250:	d0a0ab17 	ldw	r2,-32084(gp)
  800254:	1080ffcc 	andi	r2,r2,1023
  800258:	1000021e 	bne	r2,zero,800264 <sys_timer_isr+0x70>
    	//printf("%i\n", (alt_timestamp()-lasttime)/1024);
    	count = 0;
  80025c:	d020ab15 	stw	zero,-32084(gp)
    	lasttime = alt_timestamp();
  800260:	0803b040 	call	803b04 <alt_timestamp>
    }
    count++;
  800264:	d0a0ab17 	ldw	r2,-32084(gp)
  800268:	10800044 	addi	r2,r2,1
  80026c:	d0a0ab15 	stw	r2,-32084(gp)

	//alt_putstr("got here \n");

}
  800270:	dfc00317 	ldw	ra,12(sp)
  800274:	dec00404 	addi	sp,sp,16
  800278:	f800283a 	ret

0080027c <ring_buf_read>:
	(buf->next_free)--;
}

RING_T ring_buf_read(struct ring_buffer* buf, RING_T idx){
	int mapped_idx;
	if (buf->next_free+1+idx >= buf->size){
  80027c:	20800117 	ldw	r2,4(r4)
  800280:	10800044 	addi	r2,r2,1
  800284:	114b883a 	add	r5,r2,r5
  800288:	20800017 	ldw	r2,0(r4)
  80028c:	28800116 	blt	r5,r2,800294 <ring_buf_read+0x18>
		mapped_idx = buf->next_free+1+idx - buf->size;
  800290:	288bc83a 	sub	r5,r5,r2
	}
	else {
		mapped_idx = buf->next_free+1+idx;
	}

	return buf->values[mapped_idx];
  800294:	20800217 	ldw	r2,8(r4)
  800298:	294b883a 	add	r5,r5,r5
  80029c:	294b883a 	add	r5,r5,r5
  8002a0:	114b883a 	add	r5,r2,r5
}
  8002a4:	28800017 	ldw	r2,0(r5)
  8002a8:	f800283a 	ret

008002ac <convolve_float>:

alt_32 convolve_float(struct ring_buffer* buf, double coefficients[]  ){
  8002ac:	defff904 	addi	sp,sp,-28
  8002b0:	dd000415 	stw	r20,16(sp)
  8002b4:	2029883a 	mov	r20,r4
  8002b8:	dfc00615 	stw	ra,24(sp)
  8002bc:	dd400515 	stw	r21,20(sp)
  8002c0:	dcc00315 	stw	r19,12(sp)
  8002c4:	dc800215 	stw	r18,8(sp)
  8002c8:	dc400115 	stw	r17,4(sp)
  8002cc:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8002d0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8002d4:	00bfff84 	movi	r2,-2
  8002d8:	1884703a 	and	r2,r3,r2
  8002dc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  8002e0:	d120b517 	ldw	r4,-32044(gp)
  8002e4:	00bff7c4 	movi	r2,-33
  8002e8:	2084703a 	and	r2,r4,r2
  8002ec:	d0a0b515 	stw	r2,-32044(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8002f0:	d0a0b517 	ldw	r2,-32044(gp)
  8002f4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8002f8:	1801703a 	wrctl	status,r3
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
	for(int i = 0; i < buf->size; i ++){
  8002fc:	a5400017 	ldw	r21,0(r20)
  800300:	2821883a 	mov	r16,r5
  800304:	0023883a 	mov	r17,zero

	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
  800308:	0027883a 	mov	r19,zero
  80030c:	0025883a 	mov	r18,zero
	for(int i = 0; i < buf->size; i ++){
  800310:	8d40140e 	bge	r17,r21,800364 <convolve_float+0xb8>
		sum += ring_buf_read(buf, i)* coefficients[i];
  800314:	880b883a 	mov	r5,r17
  800318:	a009883a 	mov	r4,r20
  80031c:	080027c0 	call	80027c <ring_buf_read>
  800320:	1009883a 	mov	r4,r2
  800324:	0801e0c0 	call	801e0c <__floatsidf>
  800328:	81800017 	ldw	r6,0(r16)
  80032c:	81c00117 	ldw	r7,4(r16)
  800330:	1009883a 	mov	r4,r2
  800334:	180b883a 	mov	r5,r3
  800338:	08015200 	call	801520 <__muldf3>
  80033c:	9809883a 	mov	r4,r19
  800340:	900b883a 	mov	r5,r18
  800344:	100d883a 	mov	r6,r2
  800348:	180f883a 	mov	r7,r3
  80034c:	0800c740 	call	800c74 <__adddf3>
  800350:	1027883a 	mov	r19,r2
  800354:	1825883a 	mov	r18,r3
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	double sum = 0;
	for(int i = 0; i < buf->size; i ++){
  800358:	8c400044 	addi	r17,r17,1
  80035c:	84000204 	addi	r16,r16,8
  800360:	003feb06 	br	800310 <__alt_data_end+0xff800310>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800364:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800368:	00bfff84 	movi	r2,-2
  80036c:	1884703a 	and	r2,r3,r2
  800370:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  800374:	d0a0b517 	ldw	r2,-32044(gp)
  800378:	10800814 	ori	r2,r2,32
  80037c:	d0a0b515 	stw	r2,-32044(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800380:	d0a0b517 	ldw	r2,-32044(gp)
  800384:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800388:	1801703a 	wrctl	status,r3
	}

	//Re-enable interrupts from state
	//alt_irq_enable_all(state);
	alt_irq_enable(TIMER_IRQ);
	return (alt_32)sum;
  80038c:	9809883a 	mov	r4,r19
  800390:	900b883a 	mov	r5,r18
  800394:	0801d8c0 	call	801d8c <__fixdfsi>

}
  800398:	dfc00617 	ldw	ra,24(sp)
  80039c:	dd400517 	ldw	r21,20(sp)
  8003a0:	dd000417 	ldw	r20,16(sp)
  8003a4:	dcc00317 	ldw	r19,12(sp)
  8003a8:	dc800217 	ldw	r18,8(sp)
  8003ac:	dc400117 	ldw	r17,4(sp)
  8003b0:	dc000017 	ldw	r16,0(sp)
  8003b4:	dec00704 	addi	sp,sp,28
  8003b8:	f800283a 	ret

008003bc <timer_init>:
// Timer code
//---------------------------------------------------------------



void timer_init(void * isr) {
  8003bc:	defffd04 	addi	sp,sp,-12
  8003c0:	dc400115 	stw	r17,4(sp)
  8003c4:	dc000015 	stw	r16,0(sp)
  8003c8:	dfc00215 	stw	ra,8(sp)
  8003cc:	2023883a 	mov	r17,r4
	//Calculate necessary cycles for 1 ms period
	alt_32 period = alt_timestamp_freq()/1000;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  8003d0:	04004034 	movhi	r16,256



void timer_init(void * isr) {
	//Calculate necessary cycles for 1 ms period
	alt_32 period = alt_timestamp_freq()/1000;
  8003d4:	0803b500 	call	803b50 <alt_timestamp_freq>


    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  8003d8:	84042104 	addi	r16,r16,4228
  8003dc:	00c000c4 	movi	r3,3
  8003e0:	80c00035 	stwio	r3,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  8003e4:	00c04034 	movhi	r3,256
  8003e8:	18c42004 	addi	r3,r3,4224
  8003ec:	18000035 	stwio	zero,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, (alt_16) period );
  8003f0:	0140fa04 	movi	r5,1000
  8003f4:	1009883a 	mov	r4,r2
  8003f8:	0800bb80 	call	800bb8 <__udivsi3>
  8003fc:	10bfffcc 	andi	r2,r2,65535
  800400:	10a0001c 	xori	r2,r2,32768
  800404:	00c04034 	movhi	r3,256
  800408:	10a00004 	addi	r2,r2,-32768
  80040c:	18c42204 	addi	r3,r3,4232
  800410:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0xfbd0);
  800414:	00bef414 	movui	r2,64464
  800418:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0001);
  80041c:	00804034 	movhi	r2,256
  800420:	10842304 	addi	r2,r2,4236
  800424:	00c00044 	movi	r3,1
  800428:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
  80042c:	880d883a 	mov	r6,r17
  800430:	000b883a 	mov	r5,zero
  800434:	01000144 	movi	r4,5
  800438:	08035e40 	call	8035e4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
  80043c:	008001c4 	movi	r2,7
  800440:	80800035 	stwio	r2,0(r16)

}
  800444:	dfc00217 	ldw	ra,8(sp)
  800448:	dc400117 	ldw	r17,4(sp)
  80044c:	dc000017 	ldw	r16,0(sp)
  800450:	dec00304 	addi	sp,sp,12
  800454:	f800283a 	ret

00800458 <read_request>:
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  800458:	defffc04 	addi	sp,sp,-16
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  80045c:	01801004 	movi	r6,64
  800460:	000b883a 	mov	r5,zero
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  800464:	dfc00315 	stw	ra,12(sp)
  800468:	dc800215 	stw	r18,8(sp)
  80046c:	dc400115 	stw	r17,4(sp)
  800470:	dc000015 	stw	r16,0(sp)
  800474:	2023883a 	mov	r17,r4
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  800478:	0801fb40 	call	801fb4 <memset>

	//Get first character
	c = alt_getchar();
  80047c:	08035a00 	call	8035a0 <alt_getchar>

	while(c != '\n'){
  800480:	8821883a 	mov	r16,r17
  800484:	04800284 	movi	r18,10
  800488:	10c03fcc 	andi	r3,r2,255
  80048c:	18c0201c 	xori	r3,r3,128
  800490:	18ffe004 	addi	r3,r3,-128
  800494:	8449c83a 	sub	r4,r16,r17
  800498:	1c800426 	beq	r3,r18,8004ac <read_request+0x54>
		outbuf[idx] = c;
  80049c:	80800005 	stb	r2,0(r16)
		c = alt_getchar();
  8004a0:	08035a00 	call	8035a0 <alt_getchar>
  8004a4:	84000044 	addi	r16,r16,1
  8004a8:	003ff706 	br	800488 <__alt_data_end+0xff800488>
		idx++;
	}
	outbuf[idx] = ' ';
  8004ac:	8909883a 	add	r4,r17,r4
  8004b0:	00800804 	movi	r2,32
  8004b4:	20800005 	stb	r2,0(r4)

}
  8004b8:	dfc00317 	ldw	ra,12(sp)
  8004bc:	dc800217 	ldw	r18,8(sp)
  8004c0:	dc400117 	ldw	r17,4(sp)
  8004c4:	dc000017 	ldw	r16,0(sp)
  8004c8:	dec00404 	addi	sp,sp,16
  8004cc:	f800283a 	ret

008004d0 <write_to_disp>:

int write_to_disp(char* str, int offset){
	//HEX0 rightmost digit

	 //char_to_hex(str[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
  8004d0:	00c04034 	movhi	r3,256
	}
	outbuf[idx] = ' ';

}

int write_to_disp(char* str, int offset){
  8004d4:	2805883a 	mov	r2,r5
	//HEX0 rightmost digit

	 //char_to_hex(str[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
  8004d8:	18c43804 	addi	r3,r3,4320
  8004dc:	01001fc4 	movi	r4,127
  8004e0:	19000035 	stwio	r4,0(r3)
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return offset;
}
  8004e4:	f800283a 	ret

008004e8 <to_hex>:
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  8004e8:	defffc04 	addi	sp,sp,-16
  8004ec:	dc400115 	stw	r17,4(sp)
  8004f0:	3023883a 	mov	r17,r6
  8004f4:	dc800215 	stw	r18,8(sp)
  8004f8:	dc000015 	stw	r16,0(sp)
  8004fc:	2025883a 	mov	r18,r4
  800500:	2821883a 	mov	r16,r5
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  800504:	01800204 	movi	r6,8
  800508:	000b883a 	mov	r5,zero
  80050c:	8809883a 	mov	r4,r17
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  800510:	dfc00315 	stw	ra,12(sp)
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  800514:	0801fb40 	call	801fb4 <memset>
	sprintf(buf, "%x", val);
  800518:	01402034 	movhi	r5,128
  80051c:	8809883a 	mov	r4,r17
  800520:	900d883a 	mov	r6,r18
  800524:	294f9504 	addi	r5,r5,15956
  800528:	080234c0 	call	80234c <sprintf>
	int hexlen = strlen(buf);
  80052c:	8809883a 	mov	r4,r17
  800530:	08023fc0 	call	8023fc <strlen>

	//Left shift if string is longer than desired length to take least significant
	if (hexlen > length){
  800534:	8080090e 	bge	r16,r2,80055c <to_hex+0x74>
  800538:	8807883a 	mov	r3,r17
		for(int i = 0; i < length; i++){
  80053c:	1c49c83a 	sub	r4,r3,r17
  800540:	24000c0e 	bge	r4,r16,800574 <to_hex+0x8c>
			buf[i] = buf[(i + hexlen - length)];
  800544:	10c9883a 	add	r4,r2,r3
  800548:	2409c83a 	sub	r4,r4,r16
  80054c:	21000003 	ldbu	r4,0(r4)
  800550:	18c00044 	addi	r3,r3,1
  800554:	193fffc5 	stb	r4,-1(r3)
  800558:	003ff806 	br	80053c <__alt_data_end+0xff80053c>
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
  80055c:	1400050e 	bge	r2,r16,800574 <to_hex+0x8c>
  800560:	80ffffc4 	addi	r3,r16,-1
  800564:	88c7883a 	add	r3,r17,r3
  800568:	0009883a 	mov	r4,zero
		for(int i = 0; i < length; i++){
			if(i < hexlen){
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
			}
			else{
				buf[(length - 1 - i)] = '0';
  80056c:	01800c04 	movi	r6,48
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800570:	24000816 	blt	r4,r16,800594 <to_hex+0xac>
			}

		}
	}
	//Add termination
	buf[length] = '\0';
  800574:	8c21883a 	add	r16,r17,r16
  800578:	80000005 	stb	zero,0(r16)

}
  80057c:	dfc00317 	ldw	ra,12(sp)
  800580:	dc800217 	ldw	r18,8(sp)
  800584:	dc400117 	ldw	r17,4(sp)
  800588:	dc000017 	ldw	r16,0(sp)
  80058c:	dec00404 	addi	sp,sp,16
  800590:	f800283a 	ret
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
			if(i < hexlen){
  800594:	2080050e 	bge	r4,r2,8005ac <to_hex+0xc4>
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
  800598:	1c0bc83a 	sub	r5,r3,r16
  80059c:	288b883a 	add	r5,r5,r2
  8005a0:	29400003 	ldbu	r5,0(r5)
  8005a4:	19400005 	stb	r5,0(r3)
  8005a8:	00000106 	br	8005b0 <to_hex+0xc8>
			}
			else{
				buf[(length - 1 - i)] = '0';
  8005ac:	19800005 	stb	r6,0(r3)
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  8005b0:	21000044 	addi	r4,r4,1
  8005b4:	18ffffc4 	addi	r3,r3,-1
  8005b8:	003fed06 	br	800570 <__alt_data_end+0xff800570>

008005bc <get_input>:
alt_32 get_input(char x){

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8005bc:	21003fcc 	andi	r4,r4,255
	buf[length] = '\0';

}


alt_32 get_input(char x){
  8005c0:	defffe04 	addi	sp,sp,-8

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8005c4:	2100201c 	xori	r4,r4,128
	buf[length] = '\0';

}


alt_32 get_input(char x){
  8005c8:	dfc00115 	stw	ra,4(sp)

	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
  8005cc:	213fe004 	addi	r4,r4,-128
  8005d0:	00801e04 	movi	r2,120
  8005d4:	2080081e 	bne	r4,r2,8005f8 <get_input+0x3c>
		alt_32 x = convolve_float(x_buf, h);
  8005d8:	d120ad17 	ldw	r4,-32076(gp)
  8005dc:	01402034 	movhi	r5,128
  8005e0:	2950a704 	addi	r5,r5,17052
  8005e4:	08002ac0 	call	8002ac <convolve_float>
		if(x<-thresh)x = 15;
  8005e8:	00ffda84 	movi	r3,-150
  8005ec:	10c01916 	blt	r2,r3,800654 <get_input+0x98>
		else if(x>thresh) x = 1;
  8005f0:	108025c8 	cmpgei	r2,r2,151
  8005f4:	00001a06 	br	800660 <get_input+0xa4>
		else x = 0;

		return x;

	}
	else if(x == 'y'){
  8005f8:	00801e44 	movi	r2,121
  8005fc:	2080041e 	bne	r4,r2,800610 <get_input+0x54>
		alt_32 y = alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800600:	d120b117 	ldw	r4,-32060(gp)
  800604:	d80b883a 	mov	r5,sp
  800608:	0803c080 	call	803c08 <alt_up_accelerometer_spi_read_y_axis>
  80060c:	00000506 	br	800624 <get_input+0x68>
		else y = 0;

		return y;

	}
	else if(x == 'z'){
  800610:	00801e84 	movi	r2,122
  800614:	2080111e 	bne	r4,r2,80065c <get_input+0xa0>
		alt_32 z = alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800618:	d120b117 	ldw	r4,-32060(gp)
  80061c:	d80b883a 	mov	r5,sp
  800620:	0803c600 	call	803c60 <alt_up_accelerometer_spi_read_z_axis>
		if(z<-thresh)z = 15;
  800624:	00ffda84 	movi	r3,-150
  800628:	10c0020e 	bge	r2,r3,800634 <get_input+0x78>
  80062c:	008003c4 	movi	r2,15
  800630:	00000306 	br	800640 <get_input+0x84>
		else if(z>thresh) z = 1;
  800634:	00c02584 	movi	r3,150
  800638:	1880030e 	bge	r3,r2,800648 <get_input+0x8c>
  80063c:	00800044 	movi	r2,1
  800640:	d8800015 	stw	r2,0(sp)
  800644:	00000106 	br	80064c <get_input+0x90>
		else z = 0;
  800648:	d8000015 	stw	zero,0(sp)

		return z;
  80064c:	d8800017 	ldw	r2,0(sp)
  800650:	00000306 	br	800660 <get_input+0xa4>
	alt_32 thresh = 150;

	//Temp gating code
	if(x == 'x'){
		alt_32 x = convolve_float(x_buf, h);
		if(x<-thresh)x = 15;
  800654:	008003c4 	movi	r2,15
  800658:	00000106 	br	800660 <get_input+0xa4>
		return z;

	}
	else{
		//throw_code(3);
		return 16;
  80065c:	00800404 	movi	r2,16
	}
}
  800660:	dfc00117 	ldw	ra,4(sp)
  800664:	dec00204 	addi	sp,sp,8
  800668:	f800283a 	ret

0080066c <throw_code>:


void throw_code(char* regname, int code){
	printf("K %s %x\n", regname, code);
  80066c:	280d883a 	mov	r6,r5
  800670:	200b883a 	mov	r5,r4
  800674:	01002034 	movhi	r4,128
  800678:	210f9604 	addi	r4,r4,15960
  80067c:	080224c1 	jmpi	80224c <printf>

00800680 <parse_request>:
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return offset;
}

void parse_request(char* request){
  800680:	deffee04 	addi	sp,sp,-72
	int token_number = 0;
	char* tokens[8] = {};
  800684:	01800804 	movi	r6,32
  800688:	000b883a 	mov	r5,zero
  80068c:	d809883a 	mov	r4,sp
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return offset;
}

void parse_request(char* request){
  800690:	dfc01115 	stw	ra,68(sp)
  800694:	dc000b15 	stw	r16,44(sp)
  800698:	dd401015 	stw	r21,64(sp)
  80069c:	dd000f15 	stw	r20,60(sp)
  8006a0:	dcc00e15 	stw	r19,56(sp)
  8006a4:	dc800d15 	stw	r18,52(sp)
  8006a8:	dc400c15 	stw	r17,48(sp)
	int token_number = 0;
	char* tokens[8] = {};
  8006ac:	0801fb40 	call	801fb4 <memset>
	char* token;


	token = strtok(cmdbuffer, " ");
  8006b0:	d120ac17 	ldw	r4,-32080(gp)
  8006b4:	01402034 	movhi	r5,128
  8006b8:	294f9904 	addi	r5,r5,15972
  8006bc:	080246c0 	call	80246c <strtok>
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return offset;
}

void parse_request(char* request){
	int token_number = 0;
  8006c0:	0021883a 	mov	r16,zero


	token = strtok(cmdbuffer, " ");


	while(token != NULL){
  8006c4:	10000a26 	beq	r2,zero,8006f0 <parse_request+0x70>
		tokens[token_number]= token;
  8006c8:	8407883a 	add	r3,r16,r16
  8006cc:	18c7883a 	add	r3,r3,r3
  8006d0:	d8c7883a 	add	r3,sp,r3
		token_number++;
		token = strtok(NULL, " ");
  8006d4:	01402034 	movhi	r5,128

	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
  8006d8:	18800015 	stw	r2,0(r3)
		token_number++;
		token = strtok(NULL, " ");
  8006dc:	294f9904 	addi	r5,r5,15972
  8006e0:	0009883a 	mov	r4,zero
	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
		token_number++;
  8006e4:	84000044 	addi	r16,r16,1
		token = strtok(NULL, " ");
  8006e8:	080246c0 	call	80246c <strtok>
  8006ec:	003ff506 	br	8006c4 <__alt_data_end+0xff8006c4>
	}

	if(token_number == 0 || strcmp(tokens[0], &"R" ) != 0){
  8006f0:	80000526 	beq	r16,zero,800708 <parse_request+0x88>
  8006f4:	d9000017 	ldw	r4,0(sp)
  8006f8:	01402034 	movhi	r5,128
  8006fc:	294f9a04 	addi	r5,r5,15976
  800700:	08023c40 	call	8023c4 <strcmp>
  800704:	10000226 	beq	r2,zero,800710 <parse_request+0x90>
		throw_code(&"ERR", 1);
  800708:	01400044 	movi	r5,1
  80070c:	00009d06 	br	800984 <parse_request+0x304>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
  800710:	dc000117 	ldw	r16,4(sp)
  800714:	01402034 	movhi	r5,128
  800718:	294f9c04 	addi	r5,r5,15984
  80071c:	8009883a 	mov	r4,r16
  800720:	08023c40 	call	8023c4 <strcmp>
  800724:	1025883a 	mov	r18,r2
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
  800728:	10000526 	beq	r2,zero,800740 <parse_request+0xc0>
  80072c:	01402034 	movhi	r5,128
  800730:	294f9d04 	addi	r5,r5,15988
  800734:	8009883a 	mov	r4,r16
  800738:	08023c40 	call	8023c4 <strcmp>
  80073c:	1000441e 	bne	r2,zero,800850 <parse_request+0x1d0>
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
  800740:	d120ad17 	ldw	r4,-32076(gp)
  800744:	01402034 	movhi	r5,128
  800748:	2950a704 	addi	r5,r5,17052
  80074c:	08002ac0 	call	8002ac <convolve_float>
			y = convolve_float(y_buf, h);
  800750:	d120af17 	ldw	r4,-32068(gp)
  800754:	01402034 	movhi	r5,128
  800758:	2950a704 	addi	r5,r5,17052
	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
  80075c:	102b883a 	mov	r21,r2
			y = convolve_float(y_buf, h);
  800760:	08002ac0 	call	8002ac <convolve_float>
			z = convolve_float(z_buf, h);
  800764:	d120b017 	ldw	r4,-32064(gp)
  800768:	01402034 	movhi	r5,128
  80076c:	2950a704 	addi	r5,r5,17052

			to_hex(x, 3, hexbuffers[0]);
  800770:	04402034 	movhi	r17,128
  800774:	8c51f604 	addi	r17,r17,18392
		//alt_printf("Tried to read accproc");
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
			y = convolve_float(y_buf, h);
  800778:	1029883a 	mov	r20,r2
			z = convolve_float(z_buf, h);
  80077c:	08002ac0 	call	8002ac <convolve_float>

			to_hex(x, 3, hexbuffers[0]);
  800780:	89800017 	ldw	r6,0(r17)
  800784:	014000c4 	movi	r5,3
  800788:	a809883a 	mov	r4,r21
		matched = 1;

		alt_32 x,y,z;
			x = convolve_float(x_buf, h);
			y = convolve_float(y_buf, h);
			z = convolve_float(z_buf, h);
  80078c:	1027883a 	mov	r19,r2

			to_hex(x, 3, hexbuffers[0]);
  800790:	08004e80 	call	8004e8 <to_hex>
			to_hex(y, 3, hexbuffers[1]);
  800794:	89800117 	ldw	r6,4(r17)
  800798:	014000c4 	movi	r5,3
  80079c:	a009883a 	mov	r4,r20
  8007a0:	08004e80 	call	8004e8 <to_hex>
			to_hex(z, 3, hexbuffers[2]);
  8007a4:	89800217 	ldw	r6,8(r17)
  8007a8:	014000c4 	movi	r5,3
  8007ac:	9809883a 	mov	r4,r19
  8007b0:	08004e80 	call	8004e8 <to_hex>
			printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  8007b4:	89c00217 	ldw	r7,8(r17)
  8007b8:	89800117 	ldw	r6,4(r17)
  8007bc:	89400017 	ldw	r5,0(r17)
  8007c0:	01002034 	movhi	r4,128
  8007c4:	210f9f04 	addi	r4,r4,15996
  8007c8:	080224c0 	call	80224c <printf>

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  8007cc:	9000221e 	bne	r18,zero,800858 <parse_request+0x1d8>
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  8007d0:	d120b117 	ldw	r4,-32060(gp)
  8007d4:	d9400a04 	addi	r5,sp,40
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  8007d8:	04402034 	movhi	r17,128
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  8007dc:	0803bb00 	call	803bb0 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  8007e0:	d120b117 	ldw	r4,-32060(gp)
  8007e4:	d9400904 	addi	r5,sp,36
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  8007e8:	8c51f604 	addi	r17,r17,18392
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  8007ec:	0803c080 	call	803c08 <alt_up_accelerometer_spi_read_y_axis>
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  8007f0:	d120b117 	ldw	r4,-32060(gp)
  8007f4:	d9400804 	addi	r5,sp,32
  8007f8:	0803c600 	call	803c60 <alt_up_accelerometer_spi_read_z_axis>

		to_hex(x, 3, hexbuffers[0]);
  8007fc:	89800017 	ldw	r6,0(r17)
  800800:	d9000a17 	ldw	r4,40(sp)
  800804:	014000c4 	movi	r5,3
  800808:	08004e80 	call	8004e8 <to_hex>
		to_hex(y, 3, hexbuffers[1]);
  80080c:	89800117 	ldw	r6,4(r17)
  800810:	d9000917 	ldw	r4,36(sp)
  800814:	014000c4 	movi	r5,3
  800818:	08004e80 	call	8004e8 <to_hex>
		to_hex(z, 3, hexbuffers[2]);
  80081c:	89800217 	ldw	r6,8(r17)
  800820:	d9000817 	ldw	r4,32(sp)
  800824:	014000c4 	movi	r5,3
  800828:	08004e80 	call	8004e8 <to_hex>
		printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  80082c:	89c00217 	ldw	r7,8(r17)
  800830:	89800117 	ldw	r6,4(r17)
  800834:	89400017 	ldw	r5,0(r17)
  800838:	01002034 	movhi	r4,128
  80083c:	210fa504 	addi	r4,r4,16020
  800840:	080224c0 	call	80224c <printf>

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800844:	90000f26 	beq	r18,zero,800884 <parse_request+0x204>
			to_hex(z, 3, hexbuffers[2]);
			printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;
  800848:	04400044 	movi	r17,1
  80084c:	00000806 	br	800870 <parse_request+0x1f0>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;
  800850:	0023883a 	mov	r17,zero
  800854:	00000106 	br	80085c <parse_request+0x1dc>

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;
  800858:	04400044 	movi	r17,1
			to_hex(y, 3, hexbuffers[1]);
			to_hex(z, 3, hexbuffers[2]);
			printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  80085c:	01402034 	movhi	r5,128
  800860:	294fab04 	addi	r5,r5,16044
  800864:	8009883a 	mov	r4,r16
  800868:	08023c40 	call	8023c4 <strcmp>
  80086c:	103fd826 	beq	r2,zero,8007d0 <__alt_data_end+0xff8007d0>
		to_hex(y, 3, hexbuffers[1]);
		to_hex(z, 3, hexbuffers[2]);
		printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800870:	01402034 	movhi	r5,128
  800874:	294fb104 	addi	r5,r5,16068
  800878:	8009883a 	mov	r4,r16
  80087c:	08023c40 	call	8023c4 <strcmp>
  800880:	10000a1e 	bne	r2,zero,8008ac <parse_request+0x22c>

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800884:	00804034 	movhi	r2,256
  800888:	10843004 	addi	r2,r2,4288
  80088c:	11400037 	ldwio	r5,0(r2)

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
		alt_printf("K BUTTON %x 0", button);
  800890:	01002034 	movhi	r4,128

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800894:	014a303a 	nor	r5,zero,r5

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
		alt_printf("K BUTTON %x 0", button);
  800898:	294000cc 	andi	r5,r5,3
  80089c:	210fad04 	addi	r4,r4,16052
  8008a0:	08037840 	call	803784 <alt_printf>
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  8008a4:	90000626 	beq	r18,zero,8008c0 <parse_request+0x240>
		printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
  8008a8:	04400044 	movi	r17,1
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
		alt_printf("K BUTTON %x 0", button);
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  8008ac:	01402034 	movhi	r5,128
  8008b0:	294fb704 	addi	r5,r5,16092
  8008b4:	8009883a 	mov	r4,r16
  8008b8:	08023c40 	call	8023c4 <strcmp>
  8008bc:	10000f1e 	bne	r2,zero,8008fc <parse_request+0x27c>
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  8008c0:	00804034 	movhi	r2,256
  8008c4:	10843404 	addi	r2,r2,4304
  8008c8:	11000037 	ldwio	r4,0(r2)
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  8008cc:	04402034 	movhi	r17,128
  8008d0:	8c51f604 	addi	r17,r17,18392
  8008d4:	89800017 	ldw	r6,0(r17)
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  8008d8:	0108303a 	nor	r4,zero,r4
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  8008dc:	014000c4 	movi	r5,3
  8008e0:	2100ffcc 	andi	r4,r4,1023
  8008e4:	08004e80 	call	8004e8 <to_hex>
		alt_printf("K SWITCH %x 0", hexbuffers[0]);
  8008e8:	89400017 	ldw	r5,0(r17)
  8008ec:	01002034 	movhi	r4,128
  8008f0:	210fb304 	addi	r4,r4,16076
  8008f4:	08037840 	call	803784 <alt_printf>
		button = button & mask;
		alt_printf("K BUTTON %x 0", button);
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;
  8008f8:	04400044 	movi	r17,1
	}


	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){
  8008fc:	01402034 	movhi	r5,128
  800900:	294fb904 	addi	r5,r5,16100
  800904:	8009883a 	mov	r4,r16
  800908:	08023c40 	call	8023c4 <strcmp>
  80090c:	10000d1e 	bne	r2,zero,800944 <parse_request+0x2c4>
		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		//Copy first 6 characters
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800910:	d9400217 	ldw	r5,8(sp)
  800914:	d120ae17 	ldw	r4,-32072(gp)
  800918:	01800284 	movi	r6,10
  80091c:	08024180 	call	802418 <strncpy>

int write_to_disp(char* str, int offset){
	//HEX0 rightmost digit

	 //char_to_hex(str[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
  800920:	00804034 	movhi	r2,256
  800924:	10843804 	addi	r2,r2,4320
  800928:	00c01fc4 	movi	r3,127
  80092c:	10c00035 	stwio	r3,0(r2)
		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		//Copy first 6 characters
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		int k = write_to_disp(&" ", 0);
		throw_code("HEXTEXT", k);
  800930:	01002034 	movhi	r4,128
  800934:	000b883a 	mov	r5,zero
  800938:	210fb904 	addi	r4,r4,16100
  80093c:	080066c0 	call	80066c <throw_code>

	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){
		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
  800940:	04400044 	movi	r17,1
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		int k = write_to_disp(&" ", 0);
		throw_code("HEXTEXT", k);
	}

	if (strcmp(tokens[1], &"LEDFLASH") == 0){
  800944:	01402034 	movhi	r5,128
  800948:	294fbb04 	addi	r5,r5,16108
  80094c:	8009883a 	mov	r4,r16
  800950:	08023c40 	call	8023c4 <strcmp>
  800954:	1000091e 	bne	r2,zero,80097c <parse_request+0x2fc>
		//alt_printf("Tried to write LEDFLASH");
		matched = 1;

		int k = atoi(tokens[2]);
  800958:	d9000217 	ldw	r4,8(sp)
  80095c:	0801f740 	call	801f74 <atoi>
		IOWR(LED_BASE, 0, k);
  800960:	00c04034 	movhi	r3,256
  800964:	18c45004 	addi	r3,r3,4416
  800968:	18800035 	stwio	r2,0(r3)
		throw_code(&"LEDFLASH", 0);
  80096c:	01002034 	movhi	r4,128
  800970:	000b883a 	mov	r5,zero
  800974:	210fbb04 	addi	r4,r4,16108
  800978:	00000406 	br	80098c <parse_request+0x30c>
		return;
	}

	if (!matched){
  80097c:	8800041e 	bne	r17,zero,800990 <parse_request+0x310>
		throw_code(&"ERR", 2);
  800980:	01400084 	movi	r5,2
  800984:	01002034 	movhi	r4,128
  800988:	210f9b04 	addi	r4,r4,15980
  80098c:	080066c0 	call	80066c <throw_code>
		return;
	}

}
  800990:	dfc01117 	ldw	ra,68(sp)
  800994:	dd401017 	ldw	r21,64(sp)
  800998:	dd000f17 	ldw	r20,60(sp)
  80099c:	dcc00e17 	ldw	r19,56(sp)
  8009a0:	dc800d17 	ldw	r18,52(sp)
  8009a4:	dc400c17 	ldw	r17,48(sp)
  8009a8:	dc000b17 	ldw	r16,44(sp)
  8009ac:	dec01204 	addi	sp,sp,72
  8009b0:	f800283a 	ret

008009b4 <main>:

//HEX write
//---------------------------------------------------------------


int main() {
  8009b4:	defff504 	addi	sp,sp,-44


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  8009b8:	01001004 	movi	r4,64

//HEX write
//---------------------------------------------------------------


int main() {
  8009bc:	dfc00a15 	stw	ra,40(sp)
  8009c0:	dc000915 	stw	r16,36(sp)


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  8009c4:	0801f8c0 	call	801f8c <malloc>

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  8009c8:	01000204 	movi	r4,8

int main() {


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  8009cc:	d0a0ac15 	stw	r2,-32080(gp)

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  8009d0:	04002034 	movhi	r16,128
  8009d4:	0801f8c0 	call	801f8c <malloc>
  8009d8:	8411f604 	addi	r16,r16,18392
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  8009dc:	01000204 	movi	r4,8

	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  8009e0:	80800015 	stw	r2,0(r16)
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  8009e4:	0801f8c0 	call	801f8c <malloc>
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  8009e8:	01000204 	movi	r4,8
	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  8009ec:	80800115 	stw	r2,4(r16)
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  8009f0:	0801f8c0 	call	801f8c <malloc>
  8009f4:	80800215 	stw	r2,8(r16)

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  8009f8:	00800744 	movi	r2,29
  8009fc:	d8800615 	stw	r2,24(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800a00:	d8800315 	stw	r2,12(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800a04:	d8800015 	stw	r2,0(sp)
	x_buf = &x;
  800a08:	d8800604 	addi	r2,sp,24
  800a0c:	d0a0ad15 	stw	r2,-32076(gp)
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800a10:	01001d04 	movi	r4,116

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
  800a14:	d8800304 	addi	r2,sp,12
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800a18:	d8000715 	stw	zero,28(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800a1c:	d8000415 	stw	zero,16(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800a20:	d8000115 	stw	zero,4(sp)
	x_buf = &x;
	y_buf = &y;
  800a24:	d0a0af15 	stw	r2,-32068(gp)
	z_buf = &z;
  800a28:	d6e0b015 	stw	sp,-32064(gp)

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800a2c:	0801f8c0 	call	801f8c <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800a30:	01001d04 	movi	r4,116
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800a34:	1021883a 	mov	r16,r2
  800a38:	d8800815 	stw	r2,32(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800a3c:	0801f8c0 	call	801f8c <malloc>
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800a40:	01801d04 	movi	r6,116
  800a44:	000b883a 	mov	r5,zero
  800a48:	1009883a 	mov	r4,r2
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800a4c:	d8800515 	stw	r2,20(sp)
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800a50:	0801fb40 	call	801fb4 <memset>
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800a54:	01001d04 	movi	r4,116
  800a58:	0801f8c0 	call	801f8c <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800a5c:	01801d04 	movi	r6,116
  800a60:	000b883a 	mov	r5,zero
  800a64:	8009883a 	mov	r4,r16

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800a68:	d8800215 	stw	r2,8(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  800a6c:	0801fb40 	call	801fb4 <memset>

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  800a70:	01000284 	movi	r4,10
  800a74:	0801f8c0 	call	801f8c <malloc>
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800a78:	01800284 	movi	r6,10
  800a7c:	000b883a 	mov	r5,zero
  800a80:	1009883a 	mov	r4,r2
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  800a84:	d0a0ae15 	stw	r2,-32072(gp)
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800a88:	0801fb40 	call	801fb4 <memset>

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  800a8c:	01002034 	movhi	r4,128
  800a90:	210fbe04 	addi	r4,r4,16120
  800a94:	0803b580 	call	803b58 <alt_up_accelerometer_spi_open_dev>

	//to_hex(16,3,hexbuffers[0]);


	//1kHz routine initialization
	timer_init(sys_timer_isr);
  800a98:	01002034 	movhi	r4,128
  800a9c:	21007d04 	addi	r4,r4,500
	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  800aa0:	d0a0b115 	stw	r2,-32060(gp)

	//to_hex(16,3,hexbuffers[0]);


	//1kHz routine initialization
	timer_init(sys_timer_isr);
  800aa4:	08003bc0 	call	8003bc <timer_init>
	alt_timestamp_start();
  800aa8:	0803ac00 	call	803ac0 <alt_timestamp_start>

	//Command response loop
	while(1){
	read_request(cmdbuffer);
  800aac:	d120ac17 	ldw	r4,-32080(gp)
  800ab0:	08004580 	call	800458 <read_request>
	parse_request(cmdbuffer);
  800ab4:	d120ac17 	ldw	r4,-32080(gp)
  800ab8:	08006800 	call	800680 <parse_request>
  800abc:	003ffb06 	br	800aac <__alt_data_end+0xff800aac>

00800ac0 <__divsi3>:
  800ac0:	20001b16 	blt	r4,zero,800b30 <__divsi3+0x70>
  800ac4:	000f883a 	mov	r7,zero
  800ac8:	28001616 	blt	r5,zero,800b24 <__divsi3+0x64>
  800acc:	200d883a 	mov	r6,r4
  800ad0:	29001a2e 	bgeu	r5,r4,800b3c <__divsi3+0x7c>
  800ad4:	00800804 	movi	r2,32
  800ad8:	00c00044 	movi	r3,1
  800adc:	00000106 	br	800ae4 <__divsi3+0x24>
  800ae0:	10000d26 	beq	r2,zero,800b18 <__divsi3+0x58>
  800ae4:	294b883a 	add	r5,r5,r5
  800ae8:	10bfffc4 	addi	r2,r2,-1
  800aec:	18c7883a 	add	r3,r3,r3
  800af0:	293ffb36 	bltu	r5,r4,800ae0 <__alt_data_end+0xff800ae0>
  800af4:	0005883a 	mov	r2,zero
  800af8:	18000726 	beq	r3,zero,800b18 <__divsi3+0x58>
  800afc:	0005883a 	mov	r2,zero
  800b00:	31400236 	bltu	r6,r5,800b0c <__divsi3+0x4c>
  800b04:	314dc83a 	sub	r6,r6,r5
  800b08:	10c4b03a 	or	r2,r2,r3
  800b0c:	1806d07a 	srli	r3,r3,1
  800b10:	280ad07a 	srli	r5,r5,1
  800b14:	183ffa1e 	bne	r3,zero,800b00 <__alt_data_end+0xff800b00>
  800b18:	38000126 	beq	r7,zero,800b20 <__divsi3+0x60>
  800b1c:	0085c83a 	sub	r2,zero,r2
  800b20:	f800283a 	ret
  800b24:	014bc83a 	sub	r5,zero,r5
  800b28:	39c0005c 	xori	r7,r7,1
  800b2c:	003fe706 	br	800acc <__alt_data_end+0xff800acc>
  800b30:	0109c83a 	sub	r4,zero,r4
  800b34:	01c00044 	movi	r7,1
  800b38:	003fe306 	br	800ac8 <__alt_data_end+0xff800ac8>
  800b3c:	00c00044 	movi	r3,1
  800b40:	003fee06 	br	800afc <__alt_data_end+0xff800afc>

00800b44 <__modsi3>:
  800b44:	20001716 	blt	r4,zero,800ba4 <__modsi3+0x60>
  800b48:	000f883a 	mov	r7,zero
  800b4c:	2005883a 	mov	r2,r4
  800b50:	28001216 	blt	r5,zero,800b9c <__modsi3+0x58>
  800b54:	2900162e 	bgeu	r5,r4,800bb0 <__modsi3+0x6c>
  800b58:	01800804 	movi	r6,32
  800b5c:	00c00044 	movi	r3,1
  800b60:	00000106 	br	800b68 <__modsi3+0x24>
  800b64:	30000a26 	beq	r6,zero,800b90 <__modsi3+0x4c>
  800b68:	294b883a 	add	r5,r5,r5
  800b6c:	31bfffc4 	addi	r6,r6,-1
  800b70:	18c7883a 	add	r3,r3,r3
  800b74:	293ffb36 	bltu	r5,r4,800b64 <__alt_data_end+0xff800b64>
  800b78:	18000526 	beq	r3,zero,800b90 <__modsi3+0x4c>
  800b7c:	1806d07a 	srli	r3,r3,1
  800b80:	11400136 	bltu	r2,r5,800b88 <__modsi3+0x44>
  800b84:	1145c83a 	sub	r2,r2,r5
  800b88:	280ad07a 	srli	r5,r5,1
  800b8c:	183ffb1e 	bne	r3,zero,800b7c <__alt_data_end+0xff800b7c>
  800b90:	38000126 	beq	r7,zero,800b98 <__modsi3+0x54>
  800b94:	0085c83a 	sub	r2,zero,r2
  800b98:	f800283a 	ret
  800b9c:	014bc83a 	sub	r5,zero,r5
  800ba0:	003fec06 	br	800b54 <__alt_data_end+0xff800b54>
  800ba4:	0109c83a 	sub	r4,zero,r4
  800ba8:	01c00044 	movi	r7,1
  800bac:	003fe706 	br	800b4c <__alt_data_end+0xff800b4c>
  800bb0:	00c00044 	movi	r3,1
  800bb4:	003ff106 	br	800b7c <__alt_data_end+0xff800b7c>

00800bb8 <__udivsi3>:
  800bb8:	200d883a 	mov	r6,r4
  800bbc:	2900152e 	bgeu	r5,r4,800c14 <__udivsi3+0x5c>
  800bc0:	28001416 	blt	r5,zero,800c14 <__udivsi3+0x5c>
  800bc4:	00800804 	movi	r2,32
  800bc8:	00c00044 	movi	r3,1
  800bcc:	00000206 	br	800bd8 <__udivsi3+0x20>
  800bd0:	10000e26 	beq	r2,zero,800c0c <__udivsi3+0x54>
  800bd4:	28000516 	blt	r5,zero,800bec <__udivsi3+0x34>
  800bd8:	294b883a 	add	r5,r5,r5
  800bdc:	10bfffc4 	addi	r2,r2,-1
  800be0:	18c7883a 	add	r3,r3,r3
  800be4:	293ffa36 	bltu	r5,r4,800bd0 <__alt_data_end+0xff800bd0>
  800be8:	18000826 	beq	r3,zero,800c0c <__udivsi3+0x54>
  800bec:	0005883a 	mov	r2,zero
  800bf0:	31400236 	bltu	r6,r5,800bfc <__udivsi3+0x44>
  800bf4:	314dc83a 	sub	r6,r6,r5
  800bf8:	10c4b03a 	or	r2,r2,r3
  800bfc:	1806d07a 	srli	r3,r3,1
  800c00:	280ad07a 	srli	r5,r5,1
  800c04:	183ffa1e 	bne	r3,zero,800bf0 <__alt_data_end+0xff800bf0>
  800c08:	f800283a 	ret
  800c0c:	0005883a 	mov	r2,zero
  800c10:	f800283a 	ret
  800c14:	00c00044 	movi	r3,1
  800c18:	003ff406 	br	800bec <__alt_data_end+0xff800bec>

00800c1c <__umodsi3>:
  800c1c:	2005883a 	mov	r2,r4
  800c20:	2900122e 	bgeu	r5,r4,800c6c <__umodsi3+0x50>
  800c24:	28001116 	blt	r5,zero,800c6c <__umodsi3+0x50>
  800c28:	01800804 	movi	r6,32
  800c2c:	00c00044 	movi	r3,1
  800c30:	00000206 	br	800c3c <__umodsi3+0x20>
  800c34:	30000c26 	beq	r6,zero,800c68 <__umodsi3+0x4c>
  800c38:	28000516 	blt	r5,zero,800c50 <__umodsi3+0x34>
  800c3c:	294b883a 	add	r5,r5,r5
  800c40:	31bfffc4 	addi	r6,r6,-1
  800c44:	18c7883a 	add	r3,r3,r3
  800c48:	293ffa36 	bltu	r5,r4,800c34 <__alt_data_end+0xff800c34>
  800c4c:	18000626 	beq	r3,zero,800c68 <__umodsi3+0x4c>
  800c50:	1806d07a 	srli	r3,r3,1
  800c54:	11400136 	bltu	r2,r5,800c5c <__umodsi3+0x40>
  800c58:	1145c83a 	sub	r2,r2,r5
  800c5c:	280ad07a 	srli	r5,r5,1
  800c60:	183ffb1e 	bne	r3,zero,800c50 <__alt_data_end+0xff800c50>
  800c64:	f800283a 	ret
  800c68:	f800283a 	ret
  800c6c:	00c00044 	movi	r3,1
  800c70:	003ff706 	br	800c50 <__alt_data_end+0xff800c50>

00800c74 <__adddf3>:
  800c74:	02c00434 	movhi	r11,16
  800c78:	5affffc4 	addi	r11,r11,-1
  800c7c:	2806d7fa 	srli	r3,r5,31
  800c80:	2ad4703a 	and	r10,r5,r11
  800c84:	3ad2703a 	and	r9,r7,r11
  800c88:	3804d53a 	srli	r2,r7,20
  800c8c:	3018d77a 	srli	r12,r6,29
  800c90:	280ad53a 	srli	r5,r5,20
  800c94:	501490fa 	slli	r10,r10,3
  800c98:	2010d77a 	srli	r8,r4,29
  800c9c:	481290fa 	slli	r9,r9,3
  800ca0:	380ed7fa 	srli	r7,r7,31
  800ca4:	defffb04 	addi	sp,sp,-20
  800ca8:	dc800215 	stw	r18,8(sp)
  800cac:	dc400115 	stw	r17,4(sp)
  800cb0:	dc000015 	stw	r16,0(sp)
  800cb4:	dfc00415 	stw	ra,16(sp)
  800cb8:	dcc00315 	stw	r19,12(sp)
  800cbc:	1c803fcc 	andi	r18,r3,255
  800cc0:	2c01ffcc 	andi	r16,r5,2047
  800cc4:	5210b03a 	or	r8,r10,r8
  800cc8:	202290fa 	slli	r17,r4,3
  800ccc:	1081ffcc 	andi	r2,r2,2047
  800cd0:	4b12b03a 	or	r9,r9,r12
  800cd4:	300c90fa 	slli	r6,r6,3
  800cd8:	91c07526 	beq	r18,r7,800eb0 <__adddf3+0x23c>
  800cdc:	8087c83a 	sub	r3,r16,r2
  800ce0:	00c0ab0e 	bge	zero,r3,800f90 <__adddf3+0x31c>
  800ce4:	10002a1e 	bne	r2,zero,800d90 <__adddf3+0x11c>
  800ce8:	4984b03a 	or	r2,r9,r6
  800cec:	1000961e 	bne	r2,zero,800f48 <__adddf3+0x2d4>
  800cf0:	888001cc 	andi	r2,r17,7
  800cf4:	10000726 	beq	r2,zero,800d14 <__adddf3+0xa0>
  800cf8:	888003cc 	andi	r2,r17,15
  800cfc:	00c00104 	movi	r3,4
  800d00:	10c00426 	beq	r2,r3,800d14 <__adddf3+0xa0>
  800d04:	88c7883a 	add	r3,r17,r3
  800d08:	1c63803a 	cmpltu	r17,r3,r17
  800d0c:	4451883a 	add	r8,r8,r17
  800d10:	1823883a 	mov	r17,r3
  800d14:	4080202c 	andhi	r2,r8,128
  800d18:	10005926 	beq	r2,zero,800e80 <__adddf3+0x20c>
  800d1c:	84000044 	addi	r16,r16,1
  800d20:	0081ffc4 	movi	r2,2047
  800d24:	8080ba26 	beq	r16,r2,801010 <__adddf3+0x39c>
  800d28:	00bfe034 	movhi	r2,65408
  800d2c:	10bfffc4 	addi	r2,r2,-1
  800d30:	4090703a 	and	r8,r8,r2
  800d34:	4004977a 	slli	r2,r8,29
  800d38:	4010927a 	slli	r8,r8,9
  800d3c:	8822d0fa 	srli	r17,r17,3
  800d40:	8401ffcc 	andi	r16,r16,2047
  800d44:	4010d33a 	srli	r8,r8,12
  800d48:	9007883a 	mov	r3,r18
  800d4c:	1444b03a 	or	r2,r2,r17
  800d50:	8401ffcc 	andi	r16,r16,2047
  800d54:	8020953a 	slli	r16,r16,20
  800d58:	18c03fcc 	andi	r3,r3,255
  800d5c:	01000434 	movhi	r4,16
  800d60:	213fffc4 	addi	r4,r4,-1
  800d64:	180697fa 	slli	r3,r3,31
  800d68:	4110703a 	and	r8,r8,r4
  800d6c:	4410b03a 	or	r8,r8,r16
  800d70:	40c6b03a 	or	r3,r8,r3
  800d74:	dfc00417 	ldw	ra,16(sp)
  800d78:	dcc00317 	ldw	r19,12(sp)
  800d7c:	dc800217 	ldw	r18,8(sp)
  800d80:	dc400117 	ldw	r17,4(sp)
  800d84:	dc000017 	ldw	r16,0(sp)
  800d88:	dec00504 	addi	sp,sp,20
  800d8c:	f800283a 	ret
  800d90:	0081ffc4 	movi	r2,2047
  800d94:	80bfd626 	beq	r16,r2,800cf0 <__alt_data_end+0xff800cf0>
  800d98:	4a402034 	orhi	r9,r9,128
  800d9c:	00800e04 	movi	r2,56
  800da0:	10c09f16 	blt	r2,r3,801020 <__adddf3+0x3ac>
  800da4:	008007c4 	movi	r2,31
  800da8:	10c0c216 	blt	r2,r3,8010b4 <__adddf3+0x440>
  800dac:	00800804 	movi	r2,32
  800db0:	10c5c83a 	sub	r2,r2,r3
  800db4:	488a983a 	sll	r5,r9,r2
  800db8:	30c8d83a 	srl	r4,r6,r3
  800dbc:	3084983a 	sll	r2,r6,r2
  800dc0:	48c6d83a 	srl	r3,r9,r3
  800dc4:	290cb03a 	or	r6,r5,r4
  800dc8:	1004c03a 	cmpne	r2,r2,zero
  800dcc:	308cb03a 	or	r6,r6,r2
  800dd0:	898dc83a 	sub	r6,r17,r6
  800dd4:	89a3803a 	cmpltu	r17,r17,r6
  800dd8:	40d1c83a 	sub	r8,r8,r3
  800ddc:	4451c83a 	sub	r8,r8,r17
  800de0:	3023883a 	mov	r17,r6
  800de4:	4080202c 	andhi	r2,r8,128
  800de8:	10002326 	beq	r2,zero,800e78 <__adddf3+0x204>
  800dec:	04c02034 	movhi	r19,128
  800df0:	9cffffc4 	addi	r19,r19,-1
  800df4:	44e6703a 	and	r19,r8,r19
  800df8:	98007626 	beq	r19,zero,800fd4 <__adddf3+0x360>
  800dfc:	9809883a 	mov	r4,r19
  800e00:	0801ee80 	call	801ee8 <__clzsi2>
  800e04:	10fffe04 	addi	r3,r2,-8
  800e08:	010007c4 	movi	r4,31
  800e0c:	20c07716 	blt	r4,r3,800fec <__adddf3+0x378>
  800e10:	00800804 	movi	r2,32
  800e14:	10c5c83a 	sub	r2,r2,r3
  800e18:	8884d83a 	srl	r2,r17,r2
  800e1c:	98d0983a 	sll	r8,r19,r3
  800e20:	88e2983a 	sll	r17,r17,r3
  800e24:	1204b03a 	or	r2,r2,r8
  800e28:	1c007416 	blt	r3,r16,800ffc <__adddf3+0x388>
  800e2c:	1c21c83a 	sub	r16,r3,r16
  800e30:	82000044 	addi	r8,r16,1
  800e34:	00c007c4 	movi	r3,31
  800e38:	1a009116 	blt	r3,r8,801080 <__adddf3+0x40c>
  800e3c:	00c00804 	movi	r3,32
  800e40:	1a07c83a 	sub	r3,r3,r8
  800e44:	8a08d83a 	srl	r4,r17,r8
  800e48:	88e2983a 	sll	r17,r17,r3
  800e4c:	10c6983a 	sll	r3,r2,r3
  800e50:	1210d83a 	srl	r8,r2,r8
  800e54:	8804c03a 	cmpne	r2,r17,zero
  800e58:	1906b03a 	or	r3,r3,r4
  800e5c:	18a2b03a 	or	r17,r3,r2
  800e60:	0021883a 	mov	r16,zero
  800e64:	003fa206 	br	800cf0 <__alt_data_end+0xff800cf0>
  800e68:	1890b03a 	or	r8,r3,r2
  800e6c:	40017d26 	beq	r8,zero,801464 <__adddf3+0x7f0>
  800e70:	1011883a 	mov	r8,r2
  800e74:	1823883a 	mov	r17,r3
  800e78:	888001cc 	andi	r2,r17,7
  800e7c:	103f9e1e 	bne	r2,zero,800cf8 <__alt_data_end+0xff800cf8>
  800e80:	4004977a 	slli	r2,r8,29
  800e84:	8822d0fa 	srli	r17,r17,3
  800e88:	4010d0fa 	srli	r8,r8,3
  800e8c:	9007883a 	mov	r3,r18
  800e90:	1444b03a 	or	r2,r2,r17
  800e94:	0101ffc4 	movi	r4,2047
  800e98:	81002426 	beq	r16,r4,800f2c <__adddf3+0x2b8>
  800e9c:	8120703a 	and	r16,r16,r4
  800ea0:	01000434 	movhi	r4,16
  800ea4:	213fffc4 	addi	r4,r4,-1
  800ea8:	4110703a 	and	r8,r8,r4
  800eac:	003fa806 	br	800d50 <__alt_data_end+0xff800d50>
  800eb0:	8089c83a 	sub	r4,r16,r2
  800eb4:	01005e0e 	bge	zero,r4,801030 <__adddf3+0x3bc>
  800eb8:	10002b26 	beq	r2,zero,800f68 <__adddf3+0x2f4>
  800ebc:	0081ffc4 	movi	r2,2047
  800ec0:	80bf8b26 	beq	r16,r2,800cf0 <__alt_data_end+0xff800cf0>
  800ec4:	4a402034 	orhi	r9,r9,128
  800ec8:	00800e04 	movi	r2,56
  800ecc:	1100a40e 	bge	r2,r4,801160 <__adddf3+0x4ec>
  800ed0:	498cb03a 	or	r6,r9,r6
  800ed4:	300ac03a 	cmpne	r5,r6,zero
  800ed8:	0013883a 	mov	r9,zero
  800edc:	2c4b883a 	add	r5,r5,r17
  800ee0:	2c63803a 	cmpltu	r17,r5,r17
  800ee4:	4a11883a 	add	r8,r9,r8
  800ee8:	8a11883a 	add	r8,r17,r8
  800eec:	2823883a 	mov	r17,r5
  800ef0:	4080202c 	andhi	r2,r8,128
  800ef4:	103fe026 	beq	r2,zero,800e78 <__alt_data_end+0xff800e78>
  800ef8:	84000044 	addi	r16,r16,1
  800efc:	0081ffc4 	movi	r2,2047
  800f00:	8080d226 	beq	r16,r2,80124c <__adddf3+0x5d8>
  800f04:	00bfe034 	movhi	r2,65408
  800f08:	10bfffc4 	addi	r2,r2,-1
  800f0c:	4090703a 	and	r8,r8,r2
  800f10:	880ad07a 	srli	r5,r17,1
  800f14:	400897fa 	slli	r4,r8,31
  800f18:	88c0004c 	andi	r3,r17,1
  800f1c:	28e2b03a 	or	r17,r5,r3
  800f20:	4010d07a 	srli	r8,r8,1
  800f24:	2462b03a 	or	r17,r4,r17
  800f28:	003f7106 	br	800cf0 <__alt_data_end+0xff800cf0>
  800f2c:	4088b03a 	or	r4,r8,r2
  800f30:	20014526 	beq	r4,zero,801448 <__adddf3+0x7d4>
  800f34:	01000434 	movhi	r4,16
  800f38:	42000234 	orhi	r8,r8,8
  800f3c:	213fffc4 	addi	r4,r4,-1
  800f40:	4110703a 	and	r8,r8,r4
  800f44:	003f8206 	br	800d50 <__alt_data_end+0xff800d50>
  800f48:	18ffffc4 	addi	r3,r3,-1
  800f4c:	1800491e 	bne	r3,zero,801074 <__adddf3+0x400>
  800f50:	898bc83a 	sub	r5,r17,r6
  800f54:	8963803a 	cmpltu	r17,r17,r5
  800f58:	4251c83a 	sub	r8,r8,r9
  800f5c:	4451c83a 	sub	r8,r8,r17
  800f60:	2823883a 	mov	r17,r5
  800f64:	003f9f06 	br	800de4 <__alt_data_end+0xff800de4>
  800f68:	4984b03a 	or	r2,r9,r6
  800f6c:	103f6026 	beq	r2,zero,800cf0 <__alt_data_end+0xff800cf0>
  800f70:	213fffc4 	addi	r4,r4,-1
  800f74:	2000931e 	bne	r4,zero,8011c4 <__adddf3+0x550>
  800f78:	898d883a 	add	r6,r17,r6
  800f7c:	3463803a 	cmpltu	r17,r6,r17
  800f80:	4251883a 	add	r8,r8,r9
  800f84:	8a11883a 	add	r8,r17,r8
  800f88:	3023883a 	mov	r17,r6
  800f8c:	003fd806 	br	800ef0 <__alt_data_end+0xff800ef0>
  800f90:	1800541e 	bne	r3,zero,8010e4 <__adddf3+0x470>
  800f94:	80800044 	addi	r2,r16,1
  800f98:	1081ffcc 	andi	r2,r2,2047
  800f9c:	00c00044 	movi	r3,1
  800fa0:	1880a00e 	bge	r3,r2,801224 <__adddf3+0x5b0>
  800fa4:	8989c83a 	sub	r4,r17,r6
  800fa8:	8905803a 	cmpltu	r2,r17,r4
  800fac:	4267c83a 	sub	r19,r8,r9
  800fb0:	98a7c83a 	sub	r19,r19,r2
  800fb4:	9880202c 	andhi	r2,r19,128
  800fb8:	10006326 	beq	r2,zero,801148 <__adddf3+0x4d4>
  800fbc:	3463c83a 	sub	r17,r6,r17
  800fc0:	4a07c83a 	sub	r3,r9,r8
  800fc4:	344d803a 	cmpltu	r6,r6,r17
  800fc8:	19a7c83a 	sub	r19,r3,r6
  800fcc:	3825883a 	mov	r18,r7
  800fd0:	983f8a1e 	bne	r19,zero,800dfc <__alt_data_end+0xff800dfc>
  800fd4:	8809883a 	mov	r4,r17
  800fd8:	0801ee80 	call	801ee8 <__clzsi2>
  800fdc:	10800804 	addi	r2,r2,32
  800fe0:	10fffe04 	addi	r3,r2,-8
  800fe4:	010007c4 	movi	r4,31
  800fe8:	20ff890e 	bge	r4,r3,800e10 <__alt_data_end+0xff800e10>
  800fec:	10bff604 	addi	r2,r2,-40
  800ff0:	8884983a 	sll	r2,r17,r2
  800ff4:	0023883a 	mov	r17,zero
  800ff8:	1c3f8c0e 	bge	r3,r16,800e2c <__alt_data_end+0xff800e2c>
  800ffc:	023fe034 	movhi	r8,65408
  801000:	423fffc4 	addi	r8,r8,-1
  801004:	80e1c83a 	sub	r16,r16,r3
  801008:	1210703a 	and	r8,r2,r8
  80100c:	003f3806 	br	800cf0 <__alt_data_end+0xff800cf0>
  801010:	9007883a 	mov	r3,r18
  801014:	0011883a 	mov	r8,zero
  801018:	0005883a 	mov	r2,zero
  80101c:	003f4c06 	br	800d50 <__alt_data_end+0xff800d50>
  801020:	498cb03a 	or	r6,r9,r6
  801024:	300cc03a 	cmpne	r6,r6,zero
  801028:	0007883a 	mov	r3,zero
  80102c:	003f6806 	br	800dd0 <__alt_data_end+0xff800dd0>
  801030:	20009c1e 	bne	r4,zero,8012a4 <__adddf3+0x630>
  801034:	80800044 	addi	r2,r16,1
  801038:	1141ffcc 	andi	r5,r2,2047
  80103c:	01000044 	movi	r4,1
  801040:	2140670e 	bge	r4,r5,8011e0 <__adddf3+0x56c>
  801044:	0101ffc4 	movi	r4,2047
  801048:	11007f26 	beq	r2,r4,801248 <__adddf3+0x5d4>
  80104c:	898d883a 	add	r6,r17,r6
  801050:	4247883a 	add	r3,r8,r9
  801054:	3451803a 	cmpltu	r8,r6,r17
  801058:	40d1883a 	add	r8,r8,r3
  80105c:	402297fa 	slli	r17,r8,31
  801060:	300cd07a 	srli	r6,r6,1
  801064:	4010d07a 	srli	r8,r8,1
  801068:	1021883a 	mov	r16,r2
  80106c:	89a2b03a 	or	r17,r17,r6
  801070:	003f1f06 	br	800cf0 <__alt_data_end+0xff800cf0>
  801074:	0081ffc4 	movi	r2,2047
  801078:	80bf481e 	bne	r16,r2,800d9c <__alt_data_end+0xff800d9c>
  80107c:	003f1c06 	br	800cf0 <__alt_data_end+0xff800cf0>
  801080:	843ff844 	addi	r16,r16,-31
  801084:	01000804 	movi	r4,32
  801088:	1406d83a 	srl	r3,r2,r16
  80108c:	41005026 	beq	r8,r4,8011d0 <__adddf3+0x55c>
  801090:	01001004 	movi	r4,64
  801094:	2211c83a 	sub	r8,r4,r8
  801098:	1204983a 	sll	r2,r2,r8
  80109c:	88a2b03a 	or	r17,r17,r2
  8010a0:	8822c03a 	cmpne	r17,r17,zero
  8010a4:	1c62b03a 	or	r17,r3,r17
  8010a8:	0011883a 	mov	r8,zero
  8010ac:	0021883a 	mov	r16,zero
  8010b0:	003f7106 	br	800e78 <__alt_data_end+0xff800e78>
  8010b4:	193ff804 	addi	r4,r3,-32
  8010b8:	00800804 	movi	r2,32
  8010bc:	4908d83a 	srl	r4,r9,r4
  8010c0:	18804526 	beq	r3,r2,8011d8 <__adddf3+0x564>
  8010c4:	00801004 	movi	r2,64
  8010c8:	10c5c83a 	sub	r2,r2,r3
  8010cc:	4886983a 	sll	r3,r9,r2
  8010d0:	198cb03a 	or	r6,r3,r6
  8010d4:	300cc03a 	cmpne	r6,r6,zero
  8010d8:	218cb03a 	or	r6,r4,r6
  8010dc:	0007883a 	mov	r3,zero
  8010e0:	003f3b06 	br	800dd0 <__alt_data_end+0xff800dd0>
  8010e4:	80002a26 	beq	r16,zero,801190 <__adddf3+0x51c>
  8010e8:	0101ffc4 	movi	r4,2047
  8010ec:	11006826 	beq	r2,r4,801290 <__adddf3+0x61c>
  8010f0:	00c7c83a 	sub	r3,zero,r3
  8010f4:	42002034 	orhi	r8,r8,128
  8010f8:	01000e04 	movi	r4,56
  8010fc:	20c07c16 	blt	r4,r3,8012f0 <__adddf3+0x67c>
  801100:	010007c4 	movi	r4,31
  801104:	20c0da16 	blt	r4,r3,801470 <__adddf3+0x7fc>
  801108:	01000804 	movi	r4,32
  80110c:	20c9c83a 	sub	r4,r4,r3
  801110:	4114983a 	sll	r10,r8,r4
  801114:	88cad83a 	srl	r5,r17,r3
  801118:	8908983a 	sll	r4,r17,r4
  80111c:	40c6d83a 	srl	r3,r8,r3
  801120:	5162b03a 	or	r17,r10,r5
  801124:	2008c03a 	cmpne	r4,r4,zero
  801128:	8922b03a 	or	r17,r17,r4
  80112c:	3463c83a 	sub	r17,r6,r17
  801130:	48c7c83a 	sub	r3,r9,r3
  801134:	344d803a 	cmpltu	r6,r6,r17
  801138:	1991c83a 	sub	r8,r3,r6
  80113c:	1021883a 	mov	r16,r2
  801140:	3825883a 	mov	r18,r7
  801144:	003f2706 	br	800de4 <__alt_data_end+0xff800de4>
  801148:	24d0b03a 	or	r8,r4,r19
  80114c:	40001b1e 	bne	r8,zero,8011bc <__adddf3+0x548>
  801150:	0005883a 	mov	r2,zero
  801154:	0007883a 	mov	r3,zero
  801158:	0021883a 	mov	r16,zero
  80115c:	003f4d06 	br	800e94 <__alt_data_end+0xff800e94>
  801160:	008007c4 	movi	r2,31
  801164:	11003c16 	blt	r2,r4,801258 <__adddf3+0x5e4>
  801168:	00800804 	movi	r2,32
  80116c:	1105c83a 	sub	r2,r2,r4
  801170:	488e983a 	sll	r7,r9,r2
  801174:	310ad83a 	srl	r5,r6,r4
  801178:	3084983a 	sll	r2,r6,r2
  80117c:	4912d83a 	srl	r9,r9,r4
  801180:	394ab03a 	or	r5,r7,r5
  801184:	1004c03a 	cmpne	r2,r2,zero
  801188:	288ab03a 	or	r5,r5,r2
  80118c:	003f5306 	br	800edc <__alt_data_end+0xff800edc>
  801190:	4448b03a 	or	r4,r8,r17
  801194:	20003e26 	beq	r4,zero,801290 <__adddf3+0x61c>
  801198:	00c6303a 	nor	r3,zero,r3
  80119c:	18003a1e 	bne	r3,zero,801288 <__adddf3+0x614>
  8011a0:	3463c83a 	sub	r17,r6,r17
  8011a4:	4a07c83a 	sub	r3,r9,r8
  8011a8:	344d803a 	cmpltu	r6,r6,r17
  8011ac:	1991c83a 	sub	r8,r3,r6
  8011b0:	1021883a 	mov	r16,r2
  8011b4:	3825883a 	mov	r18,r7
  8011b8:	003f0a06 	br	800de4 <__alt_data_end+0xff800de4>
  8011bc:	2023883a 	mov	r17,r4
  8011c0:	003f0d06 	br	800df8 <__alt_data_end+0xff800df8>
  8011c4:	0081ffc4 	movi	r2,2047
  8011c8:	80bf3f1e 	bne	r16,r2,800ec8 <__alt_data_end+0xff800ec8>
  8011cc:	003ec806 	br	800cf0 <__alt_data_end+0xff800cf0>
  8011d0:	0005883a 	mov	r2,zero
  8011d4:	003fb106 	br	80109c <__alt_data_end+0xff80109c>
  8011d8:	0007883a 	mov	r3,zero
  8011dc:	003fbc06 	br	8010d0 <__alt_data_end+0xff8010d0>
  8011e0:	4444b03a 	or	r2,r8,r17
  8011e4:	8000871e 	bne	r16,zero,801404 <__adddf3+0x790>
  8011e8:	1000ba26 	beq	r2,zero,8014d4 <__adddf3+0x860>
  8011ec:	4984b03a 	or	r2,r9,r6
  8011f0:	103ebf26 	beq	r2,zero,800cf0 <__alt_data_end+0xff800cf0>
  8011f4:	8985883a 	add	r2,r17,r6
  8011f8:	4247883a 	add	r3,r8,r9
  8011fc:	1451803a 	cmpltu	r8,r2,r17
  801200:	40d1883a 	add	r8,r8,r3
  801204:	40c0202c 	andhi	r3,r8,128
  801208:	1023883a 	mov	r17,r2
  80120c:	183f1a26 	beq	r3,zero,800e78 <__alt_data_end+0xff800e78>
  801210:	00bfe034 	movhi	r2,65408
  801214:	10bfffc4 	addi	r2,r2,-1
  801218:	2021883a 	mov	r16,r4
  80121c:	4090703a 	and	r8,r8,r2
  801220:	003eb306 	br	800cf0 <__alt_data_end+0xff800cf0>
  801224:	4444b03a 	or	r2,r8,r17
  801228:	8000291e 	bne	r16,zero,8012d0 <__adddf3+0x65c>
  80122c:	10004b1e 	bne	r2,zero,80135c <__adddf3+0x6e8>
  801230:	4990b03a 	or	r8,r9,r6
  801234:	40008b26 	beq	r8,zero,801464 <__adddf3+0x7f0>
  801238:	4811883a 	mov	r8,r9
  80123c:	3023883a 	mov	r17,r6
  801240:	3825883a 	mov	r18,r7
  801244:	003eaa06 	br	800cf0 <__alt_data_end+0xff800cf0>
  801248:	1021883a 	mov	r16,r2
  80124c:	0011883a 	mov	r8,zero
  801250:	0005883a 	mov	r2,zero
  801254:	003f0f06 	br	800e94 <__alt_data_end+0xff800e94>
  801258:	217ff804 	addi	r5,r4,-32
  80125c:	00800804 	movi	r2,32
  801260:	494ad83a 	srl	r5,r9,r5
  801264:	20807d26 	beq	r4,r2,80145c <__adddf3+0x7e8>
  801268:	00801004 	movi	r2,64
  80126c:	1109c83a 	sub	r4,r2,r4
  801270:	4912983a 	sll	r9,r9,r4
  801274:	498cb03a 	or	r6,r9,r6
  801278:	300cc03a 	cmpne	r6,r6,zero
  80127c:	298ab03a 	or	r5,r5,r6
  801280:	0013883a 	mov	r9,zero
  801284:	003f1506 	br	800edc <__alt_data_end+0xff800edc>
  801288:	0101ffc4 	movi	r4,2047
  80128c:	113f9a1e 	bne	r2,r4,8010f8 <__alt_data_end+0xff8010f8>
  801290:	4811883a 	mov	r8,r9
  801294:	3023883a 	mov	r17,r6
  801298:	1021883a 	mov	r16,r2
  80129c:	3825883a 	mov	r18,r7
  8012a0:	003e9306 	br	800cf0 <__alt_data_end+0xff800cf0>
  8012a4:	8000161e 	bne	r16,zero,801300 <__adddf3+0x68c>
  8012a8:	444ab03a 	or	r5,r8,r17
  8012ac:	28005126 	beq	r5,zero,8013f4 <__adddf3+0x780>
  8012b0:	0108303a 	nor	r4,zero,r4
  8012b4:	20004d1e 	bne	r4,zero,8013ec <__adddf3+0x778>
  8012b8:	89a3883a 	add	r17,r17,r6
  8012bc:	4253883a 	add	r9,r8,r9
  8012c0:	898d803a 	cmpltu	r6,r17,r6
  8012c4:	3251883a 	add	r8,r6,r9
  8012c8:	1021883a 	mov	r16,r2
  8012cc:	003f0806 	br	800ef0 <__alt_data_end+0xff800ef0>
  8012d0:	1000301e 	bne	r2,zero,801394 <__adddf3+0x720>
  8012d4:	4984b03a 	or	r2,r9,r6
  8012d8:	10007126 	beq	r2,zero,8014a0 <__adddf3+0x82c>
  8012dc:	4811883a 	mov	r8,r9
  8012e0:	3023883a 	mov	r17,r6
  8012e4:	3825883a 	mov	r18,r7
  8012e8:	0401ffc4 	movi	r16,2047
  8012ec:	003e8006 	br	800cf0 <__alt_data_end+0xff800cf0>
  8012f0:	4462b03a 	or	r17,r8,r17
  8012f4:	8822c03a 	cmpne	r17,r17,zero
  8012f8:	0007883a 	mov	r3,zero
  8012fc:	003f8b06 	br	80112c <__alt_data_end+0xff80112c>
  801300:	0141ffc4 	movi	r5,2047
  801304:	11403b26 	beq	r2,r5,8013f4 <__adddf3+0x780>
  801308:	0109c83a 	sub	r4,zero,r4
  80130c:	42002034 	orhi	r8,r8,128
  801310:	01400e04 	movi	r5,56
  801314:	29006716 	blt	r5,r4,8014b4 <__adddf3+0x840>
  801318:	014007c4 	movi	r5,31
  80131c:	29007016 	blt	r5,r4,8014e0 <__adddf3+0x86c>
  801320:	01400804 	movi	r5,32
  801324:	290bc83a 	sub	r5,r5,r4
  801328:	4154983a 	sll	r10,r8,r5
  80132c:	890ed83a 	srl	r7,r17,r4
  801330:	894a983a 	sll	r5,r17,r5
  801334:	4108d83a 	srl	r4,r8,r4
  801338:	51e2b03a 	or	r17,r10,r7
  80133c:	280ac03a 	cmpne	r5,r5,zero
  801340:	8962b03a 	or	r17,r17,r5
  801344:	89a3883a 	add	r17,r17,r6
  801348:	2253883a 	add	r9,r4,r9
  80134c:	898d803a 	cmpltu	r6,r17,r6
  801350:	3251883a 	add	r8,r6,r9
  801354:	1021883a 	mov	r16,r2
  801358:	003ee506 	br	800ef0 <__alt_data_end+0xff800ef0>
  80135c:	4984b03a 	or	r2,r9,r6
  801360:	103e6326 	beq	r2,zero,800cf0 <__alt_data_end+0xff800cf0>
  801364:	8987c83a 	sub	r3,r17,r6
  801368:	88c9803a 	cmpltu	r4,r17,r3
  80136c:	4245c83a 	sub	r2,r8,r9
  801370:	1105c83a 	sub	r2,r2,r4
  801374:	1100202c 	andhi	r4,r2,128
  801378:	203ebb26 	beq	r4,zero,800e68 <__alt_data_end+0xff800e68>
  80137c:	3463c83a 	sub	r17,r6,r17
  801380:	4a07c83a 	sub	r3,r9,r8
  801384:	344d803a 	cmpltu	r6,r6,r17
  801388:	1991c83a 	sub	r8,r3,r6
  80138c:	3825883a 	mov	r18,r7
  801390:	003e5706 	br	800cf0 <__alt_data_end+0xff800cf0>
  801394:	4984b03a 	or	r2,r9,r6
  801398:	10002e26 	beq	r2,zero,801454 <__adddf3+0x7e0>
  80139c:	4004d0fa 	srli	r2,r8,3
  8013a0:	8822d0fa 	srli	r17,r17,3
  8013a4:	4010977a 	slli	r8,r8,29
  8013a8:	10c0022c 	andhi	r3,r2,8
  8013ac:	4462b03a 	or	r17,r8,r17
  8013b0:	18000826 	beq	r3,zero,8013d4 <__adddf3+0x760>
  8013b4:	4808d0fa 	srli	r4,r9,3
  8013b8:	20c0022c 	andhi	r3,r4,8
  8013bc:	1800051e 	bne	r3,zero,8013d4 <__adddf3+0x760>
  8013c0:	300cd0fa 	srli	r6,r6,3
  8013c4:	4806977a 	slli	r3,r9,29
  8013c8:	2005883a 	mov	r2,r4
  8013cc:	3825883a 	mov	r18,r7
  8013d0:	19a2b03a 	or	r17,r3,r6
  8013d4:	8810d77a 	srli	r8,r17,29
  8013d8:	100490fa 	slli	r2,r2,3
  8013dc:	882290fa 	slli	r17,r17,3
  8013e0:	0401ffc4 	movi	r16,2047
  8013e4:	4090b03a 	or	r8,r8,r2
  8013e8:	003e4106 	br	800cf0 <__alt_data_end+0xff800cf0>
  8013ec:	0141ffc4 	movi	r5,2047
  8013f0:	117fc71e 	bne	r2,r5,801310 <__alt_data_end+0xff801310>
  8013f4:	4811883a 	mov	r8,r9
  8013f8:	3023883a 	mov	r17,r6
  8013fc:	1021883a 	mov	r16,r2
  801400:	003e3b06 	br	800cf0 <__alt_data_end+0xff800cf0>
  801404:	10002f26 	beq	r2,zero,8014c4 <__adddf3+0x850>
  801408:	4984b03a 	or	r2,r9,r6
  80140c:	10001126 	beq	r2,zero,801454 <__adddf3+0x7e0>
  801410:	4004d0fa 	srli	r2,r8,3
  801414:	8822d0fa 	srli	r17,r17,3
  801418:	4010977a 	slli	r8,r8,29
  80141c:	10c0022c 	andhi	r3,r2,8
  801420:	4462b03a 	or	r17,r8,r17
  801424:	183feb26 	beq	r3,zero,8013d4 <__alt_data_end+0xff8013d4>
  801428:	4808d0fa 	srli	r4,r9,3
  80142c:	20c0022c 	andhi	r3,r4,8
  801430:	183fe81e 	bne	r3,zero,8013d4 <__alt_data_end+0xff8013d4>
  801434:	300cd0fa 	srli	r6,r6,3
  801438:	4806977a 	slli	r3,r9,29
  80143c:	2005883a 	mov	r2,r4
  801440:	19a2b03a 	or	r17,r3,r6
  801444:	003fe306 	br	8013d4 <__alt_data_end+0xff8013d4>
  801448:	0011883a 	mov	r8,zero
  80144c:	0005883a 	mov	r2,zero
  801450:	003e3f06 	br	800d50 <__alt_data_end+0xff800d50>
  801454:	0401ffc4 	movi	r16,2047
  801458:	003e2506 	br	800cf0 <__alt_data_end+0xff800cf0>
  80145c:	0013883a 	mov	r9,zero
  801460:	003f8406 	br	801274 <__alt_data_end+0xff801274>
  801464:	0005883a 	mov	r2,zero
  801468:	0007883a 	mov	r3,zero
  80146c:	003e8906 	br	800e94 <__alt_data_end+0xff800e94>
  801470:	197ff804 	addi	r5,r3,-32
  801474:	01000804 	movi	r4,32
  801478:	414ad83a 	srl	r5,r8,r5
  80147c:	19002426 	beq	r3,r4,801510 <__adddf3+0x89c>
  801480:	01001004 	movi	r4,64
  801484:	20c7c83a 	sub	r3,r4,r3
  801488:	40c6983a 	sll	r3,r8,r3
  80148c:	1c46b03a 	or	r3,r3,r17
  801490:	1806c03a 	cmpne	r3,r3,zero
  801494:	28e2b03a 	or	r17,r5,r3
  801498:	0007883a 	mov	r3,zero
  80149c:	003f2306 	br	80112c <__alt_data_end+0xff80112c>
  8014a0:	0007883a 	mov	r3,zero
  8014a4:	5811883a 	mov	r8,r11
  8014a8:	00bfffc4 	movi	r2,-1
  8014ac:	0401ffc4 	movi	r16,2047
  8014b0:	003e7806 	br	800e94 <__alt_data_end+0xff800e94>
  8014b4:	4462b03a 	or	r17,r8,r17
  8014b8:	8822c03a 	cmpne	r17,r17,zero
  8014bc:	0009883a 	mov	r4,zero
  8014c0:	003fa006 	br	801344 <__alt_data_end+0xff801344>
  8014c4:	4811883a 	mov	r8,r9
  8014c8:	3023883a 	mov	r17,r6
  8014cc:	0401ffc4 	movi	r16,2047
  8014d0:	003e0706 	br	800cf0 <__alt_data_end+0xff800cf0>
  8014d4:	4811883a 	mov	r8,r9
  8014d8:	3023883a 	mov	r17,r6
  8014dc:	003e0406 	br	800cf0 <__alt_data_end+0xff800cf0>
  8014e0:	21fff804 	addi	r7,r4,-32
  8014e4:	01400804 	movi	r5,32
  8014e8:	41ced83a 	srl	r7,r8,r7
  8014ec:	21400a26 	beq	r4,r5,801518 <__adddf3+0x8a4>
  8014f0:	01401004 	movi	r5,64
  8014f4:	2909c83a 	sub	r4,r5,r4
  8014f8:	4108983a 	sll	r4,r8,r4
  8014fc:	2448b03a 	or	r4,r4,r17
  801500:	2008c03a 	cmpne	r4,r4,zero
  801504:	3922b03a 	or	r17,r7,r4
  801508:	0009883a 	mov	r4,zero
  80150c:	003f8d06 	br	801344 <__alt_data_end+0xff801344>
  801510:	0007883a 	mov	r3,zero
  801514:	003fdd06 	br	80148c <__alt_data_end+0xff80148c>
  801518:	0009883a 	mov	r4,zero
  80151c:	003ff706 	br	8014fc <__alt_data_end+0xff8014fc>

00801520 <__muldf3>:
  801520:	deffee04 	addi	sp,sp,-72
  801524:	dd000c15 	stw	r20,48(sp)
  801528:	2828d53a 	srli	r20,r5,20
  80152c:	ddc00f15 	stw	r23,60(sp)
  801530:	282ed7fa 	srli	r23,r5,31
  801534:	dc000815 	stw	r16,32(sp)
  801538:	04000434 	movhi	r16,16
  80153c:	dcc00b15 	stw	r19,44(sp)
  801540:	843fffc4 	addi	r16,r16,-1
  801544:	dfc01115 	stw	ra,68(sp)
  801548:	df001015 	stw	fp,64(sp)
  80154c:	dd800e15 	stw	r22,56(sp)
  801550:	dd400d15 	stw	r21,52(sp)
  801554:	dc800a15 	stw	r18,40(sp)
  801558:	dc400915 	stw	r17,36(sp)
  80155c:	a501ffcc 	andi	r20,r20,2047
  801560:	2c20703a 	and	r16,r5,r16
  801564:	b827883a 	mov	r19,r23
  801568:	ba403fcc 	andi	r9,r23,255
  80156c:	a0006026 	beq	r20,zero,8016f0 <__muldf3+0x1d0>
  801570:	0081ffc4 	movi	r2,2047
  801574:	202d883a 	mov	r22,r4
  801578:	a0803626 	beq	r20,r2,801654 <__muldf3+0x134>
  80157c:	84000434 	orhi	r16,r16,16
  801580:	200ad77a 	srli	r5,r4,29
  801584:	800490fa 	slli	r2,r16,3
  801588:	202c90fa 	slli	r22,r4,3
  80158c:	a53f0044 	addi	r20,r20,-1023
  801590:	28a0b03a 	or	r16,r5,r2
  801594:	002b883a 	mov	r21,zero
  801598:	000b883a 	mov	r5,zero
  80159c:	3804d53a 	srli	r2,r7,20
  8015a0:	3838d7fa 	srli	fp,r7,31
  8015a4:	04400434 	movhi	r17,16
  8015a8:	8c7fffc4 	addi	r17,r17,-1
  8015ac:	1081ffcc 	andi	r2,r2,2047
  8015b0:	3025883a 	mov	r18,r6
  8015b4:	3c62703a 	and	r17,r7,r17
  8015b8:	e2803fcc 	andi	r10,fp,255
  8015bc:	10006d26 	beq	r2,zero,801774 <__muldf3+0x254>
  8015c0:	00c1ffc4 	movi	r3,2047
  8015c4:	10c06526 	beq	r2,r3,80175c <__muldf3+0x23c>
  8015c8:	8c400434 	orhi	r17,r17,16
  8015cc:	300ed77a 	srli	r7,r6,29
  8015d0:	880690fa 	slli	r3,r17,3
  8015d4:	302490fa 	slli	r18,r6,3
  8015d8:	10bf0044 	addi	r2,r2,-1023
  8015dc:	38e2b03a 	or	r17,r7,r3
  8015e0:	000f883a 	mov	r7,zero
  8015e4:	a087883a 	add	r3,r20,r2
  8015e8:	010003c4 	movi	r4,15
  8015ec:	3d44b03a 	or	r2,r7,r21
  8015f0:	e5ccf03a 	xor	r6,fp,r23
  8015f4:	1a000044 	addi	r8,r3,1
  8015f8:	20809b36 	bltu	r4,r2,801868 <__muldf3+0x348>
  8015fc:	100490ba 	slli	r2,r2,2
  801600:	01002034 	movhi	r4,128
  801604:	21058504 	addi	r4,r4,5652
  801608:	1105883a 	add	r2,r2,r4
  80160c:	10800017 	ldw	r2,0(r2)
  801610:	1000683a 	jmp	r2
  801614:	00801868 	cmpgeui	r2,zero,97
  801618:	00801674 	movhi	r2,89
  80161c:	00801674 	movhi	r2,89
  801620:	00801670 	cmpltui	r2,zero,89
  801624:	00801844 	movi	r2,97
  801628:	00801844 	movi	r2,97
  80162c:	0080182c 	andhi	r2,zero,96
  801630:	00801670 	cmpltui	r2,zero,89
  801634:	00801844 	movi	r2,97
  801638:	0080182c 	andhi	r2,zero,96
  80163c:	00801844 	movi	r2,97
  801640:	00801670 	cmpltui	r2,zero,89
  801644:	00801854 	movui	r2,97
  801648:	00801854 	movui	r2,97
  80164c:	00801854 	movui	r2,97
  801650:	00801bb4 	movhi	r2,110
  801654:	2404b03a 	or	r2,r4,r16
  801658:	1000711e 	bne	r2,zero,801820 <__muldf3+0x300>
  80165c:	05400204 	movi	r21,8
  801660:	0021883a 	mov	r16,zero
  801664:	002d883a 	mov	r22,zero
  801668:	01400084 	movi	r5,2
  80166c:	003fcb06 	br	80159c <__alt_data_end+0xff80159c>
  801670:	500d883a 	mov	r6,r10
  801674:	00800084 	movi	r2,2
  801678:	38805926 	beq	r7,r2,8017e0 <__muldf3+0x2c0>
  80167c:	008000c4 	movi	r2,3
  801680:	3881bb26 	beq	r7,r2,801d70 <__muldf3+0x850>
  801684:	00800044 	movi	r2,1
  801688:	3881961e 	bne	r7,r2,801ce4 <__muldf3+0x7c4>
  80168c:	3027883a 	mov	r19,r6
  801690:	0005883a 	mov	r2,zero
  801694:	0021883a 	mov	r16,zero
  801698:	002d883a 	mov	r22,zero
  80169c:	1004953a 	slli	r2,r2,20
  8016a0:	98c03fcc 	andi	r3,r19,255
  8016a4:	04400434 	movhi	r17,16
  8016a8:	8c7fffc4 	addi	r17,r17,-1
  8016ac:	180697fa 	slli	r3,r3,31
  8016b0:	8460703a 	and	r16,r16,r17
  8016b4:	80a0b03a 	or	r16,r16,r2
  8016b8:	80c6b03a 	or	r3,r16,r3
  8016bc:	b005883a 	mov	r2,r22
  8016c0:	dfc01117 	ldw	ra,68(sp)
  8016c4:	df001017 	ldw	fp,64(sp)
  8016c8:	ddc00f17 	ldw	r23,60(sp)
  8016cc:	dd800e17 	ldw	r22,56(sp)
  8016d0:	dd400d17 	ldw	r21,52(sp)
  8016d4:	dd000c17 	ldw	r20,48(sp)
  8016d8:	dcc00b17 	ldw	r19,44(sp)
  8016dc:	dc800a17 	ldw	r18,40(sp)
  8016e0:	dc400917 	ldw	r17,36(sp)
  8016e4:	dc000817 	ldw	r16,32(sp)
  8016e8:	dec01204 	addi	sp,sp,72
  8016ec:	f800283a 	ret
  8016f0:	2404b03a 	or	r2,r4,r16
  8016f4:	202b883a 	mov	r21,r4
  8016f8:	10004426 	beq	r2,zero,80180c <__muldf3+0x2ec>
  8016fc:	80015126 	beq	r16,zero,801c44 <__muldf3+0x724>
  801700:	8009883a 	mov	r4,r16
  801704:	d9800715 	stw	r6,28(sp)
  801708:	d9c00215 	stw	r7,8(sp)
  80170c:	da400415 	stw	r9,16(sp)
  801710:	0801ee80 	call	801ee8 <__clzsi2>
  801714:	d9800717 	ldw	r6,28(sp)
  801718:	d9c00217 	ldw	r7,8(sp)
  80171c:	da400417 	ldw	r9,16(sp)
  801720:	113ffd44 	addi	r4,r2,-11
  801724:	00c00704 	movi	r3,28
  801728:	19014216 	blt	r3,r4,801c34 <__muldf3+0x714>
  80172c:	00c00744 	movi	r3,29
  801730:	15bffe04 	addi	r22,r2,-8
  801734:	1907c83a 	sub	r3,r3,r4
  801738:	85a0983a 	sll	r16,r16,r22
  80173c:	a8c6d83a 	srl	r3,r21,r3
  801740:	adac983a 	sll	r22,r21,r22
  801744:	1c20b03a 	or	r16,r3,r16
  801748:	1080fcc4 	addi	r2,r2,1011
  80174c:	00a9c83a 	sub	r20,zero,r2
  801750:	002b883a 	mov	r21,zero
  801754:	000b883a 	mov	r5,zero
  801758:	003f9006 	br	80159c <__alt_data_end+0xff80159c>
  80175c:	3446b03a 	or	r3,r6,r17
  801760:	1800281e 	bne	r3,zero,801804 <__muldf3+0x2e4>
  801764:	0023883a 	mov	r17,zero
  801768:	0025883a 	mov	r18,zero
  80176c:	01c00084 	movi	r7,2
  801770:	003f9c06 	br	8015e4 <__alt_data_end+0xff8015e4>
  801774:	3446b03a 	or	r3,r6,r17
  801778:	18001e26 	beq	r3,zero,8017f4 <__muldf3+0x2d4>
  80177c:	88012126 	beq	r17,zero,801c04 <__muldf3+0x6e4>
  801780:	8809883a 	mov	r4,r17
  801784:	d9400215 	stw	r5,8(sp)
  801788:	d9800715 	stw	r6,28(sp)
  80178c:	da400415 	stw	r9,16(sp)
  801790:	da800315 	stw	r10,12(sp)
  801794:	0801ee80 	call	801ee8 <__clzsi2>
  801798:	d9400217 	ldw	r5,8(sp)
  80179c:	d9800717 	ldw	r6,28(sp)
  8017a0:	da400417 	ldw	r9,16(sp)
  8017a4:	da800317 	ldw	r10,12(sp)
  8017a8:	113ffd44 	addi	r4,r2,-11
  8017ac:	00c00704 	movi	r3,28
  8017b0:	19011016 	blt	r3,r4,801bf4 <__muldf3+0x6d4>
  8017b4:	00c00744 	movi	r3,29
  8017b8:	14bffe04 	addi	r18,r2,-8
  8017bc:	1907c83a 	sub	r3,r3,r4
  8017c0:	8ca2983a 	sll	r17,r17,r18
  8017c4:	30c6d83a 	srl	r3,r6,r3
  8017c8:	34a4983a 	sll	r18,r6,r18
  8017cc:	1c62b03a 	or	r17,r3,r17
  8017d0:	1080fcc4 	addi	r2,r2,1011
  8017d4:	0085c83a 	sub	r2,zero,r2
  8017d8:	000f883a 	mov	r7,zero
  8017dc:	003f8106 	br	8015e4 <__alt_data_end+0xff8015e4>
  8017e0:	3027883a 	mov	r19,r6
  8017e4:	0081ffc4 	movi	r2,2047
  8017e8:	0021883a 	mov	r16,zero
  8017ec:	002d883a 	mov	r22,zero
  8017f0:	003faa06 	br	80169c <__alt_data_end+0xff80169c>
  8017f4:	0023883a 	mov	r17,zero
  8017f8:	0025883a 	mov	r18,zero
  8017fc:	01c00044 	movi	r7,1
  801800:	003f7806 	br	8015e4 <__alt_data_end+0xff8015e4>
  801804:	01c000c4 	movi	r7,3
  801808:	003f7606 	br	8015e4 <__alt_data_end+0xff8015e4>
  80180c:	05400104 	movi	r21,4
  801810:	0021883a 	mov	r16,zero
  801814:	002d883a 	mov	r22,zero
  801818:	01400044 	movi	r5,1
  80181c:	003f5f06 	br	80159c <__alt_data_end+0xff80159c>
  801820:	05400304 	movi	r21,12
  801824:	014000c4 	movi	r5,3
  801828:	003f5c06 	br	80159c <__alt_data_end+0xff80159c>
  80182c:	04000434 	movhi	r16,16
  801830:	0027883a 	mov	r19,zero
  801834:	843fffc4 	addi	r16,r16,-1
  801838:	05bfffc4 	movi	r22,-1
  80183c:	0081ffc4 	movi	r2,2047
  801840:	003f9606 	br	80169c <__alt_data_end+0xff80169c>
  801844:	8023883a 	mov	r17,r16
  801848:	b025883a 	mov	r18,r22
  80184c:	280f883a 	mov	r7,r5
  801850:	003f8806 	br	801674 <__alt_data_end+0xff801674>
  801854:	8023883a 	mov	r17,r16
  801858:	b025883a 	mov	r18,r22
  80185c:	480d883a 	mov	r6,r9
  801860:	280f883a 	mov	r7,r5
  801864:	003f8306 	br	801674 <__alt_data_end+0xff801674>
  801868:	b026d43a 	srli	r19,r22,16
  80186c:	902ed43a 	srli	r23,r18,16
  801870:	b5bfffcc 	andi	r22,r22,65535
  801874:	94bfffcc 	andi	r18,r18,65535
  801878:	b00b883a 	mov	r5,r22
  80187c:	9009883a 	mov	r4,r18
  801880:	d8c00515 	stw	r3,20(sp)
  801884:	d9800715 	stw	r6,28(sp)
  801888:	da000615 	stw	r8,24(sp)
  80188c:	0801f4c0 	call	801f4c <__mulsi3>
  801890:	980b883a 	mov	r5,r19
  801894:	9009883a 	mov	r4,r18
  801898:	1029883a 	mov	r20,r2
  80189c:	0801f4c0 	call	801f4c <__mulsi3>
  8018a0:	b80b883a 	mov	r5,r23
  8018a4:	9809883a 	mov	r4,r19
  8018a8:	102b883a 	mov	r21,r2
  8018ac:	0801f4c0 	call	801f4c <__mulsi3>
  8018b0:	b809883a 	mov	r4,r23
  8018b4:	b00b883a 	mov	r5,r22
  8018b8:	1039883a 	mov	fp,r2
  8018bc:	0801f4c0 	call	801f4c <__mulsi3>
  8018c0:	a008d43a 	srli	r4,r20,16
  8018c4:	1545883a 	add	r2,r2,r21
  8018c8:	d8c00517 	ldw	r3,20(sp)
  8018cc:	2085883a 	add	r2,r4,r2
  8018d0:	d9800717 	ldw	r6,28(sp)
  8018d4:	da000617 	ldw	r8,24(sp)
  8018d8:	1540022e 	bgeu	r2,r21,8018e4 <__muldf3+0x3c4>
  8018dc:	01000074 	movhi	r4,1
  8018e0:	e139883a 	add	fp,fp,r4
  8018e4:	100e943a 	slli	r7,r2,16
  8018e8:	1004d43a 	srli	r2,r2,16
  8018ec:	882ad43a 	srli	r21,r17,16
  8018f0:	a53fffcc 	andi	r20,r20,65535
  8018f4:	8c7fffcc 	andi	r17,r17,65535
  8018f8:	3d29883a 	add	r20,r7,r20
  8018fc:	b00b883a 	mov	r5,r22
  801900:	8809883a 	mov	r4,r17
  801904:	d8c00515 	stw	r3,20(sp)
  801908:	d9800715 	stw	r6,28(sp)
  80190c:	da000615 	stw	r8,24(sp)
  801910:	dd000115 	stw	r20,4(sp)
  801914:	d8800015 	stw	r2,0(sp)
  801918:	0801f4c0 	call	801f4c <__mulsi3>
  80191c:	980b883a 	mov	r5,r19
  801920:	8809883a 	mov	r4,r17
  801924:	d8800215 	stw	r2,8(sp)
  801928:	0801f4c0 	call	801f4c <__mulsi3>
  80192c:	9809883a 	mov	r4,r19
  801930:	a80b883a 	mov	r5,r21
  801934:	1029883a 	mov	r20,r2
  801938:	0801f4c0 	call	801f4c <__mulsi3>
  80193c:	b00b883a 	mov	r5,r22
  801940:	a809883a 	mov	r4,r21
  801944:	d8800415 	stw	r2,16(sp)
  801948:	0801f4c0 	call	801f4c <__mulsi3>
  80194c:	d9c00217 	ldw	r7,8(sp)
  801950:	1505883a 	add	r2,r2,r20
  801954:	d8c00517 	ldw	r3,20(sp)
  801958:	3826d43a 	srli	r19,r7,16
  80195c:	d9800717 	ldw	r6,28(sp)
  801960:	da000617 	ldw	r8,24(sp)
  801964:	9885883a 	add	r2,r19,r2
  801968:	da400417 	ldw	r9,16(sp)
  80196c:	1500022e 	bgeu	r2,r20,801978 <__muldf3+0x458>
  801970:	01000074 	movhi	r4,1
  801974:	4913883a 	add	r9,r9,r4
  801978:	1028d43a 	srli	r20,r2,16
  80197c:	1004943a 	slli	r2,r2,16
  801980:	802cd43a 	srli	r22,r16,16
  801984:	843fffcc 	andi	r16,r16,65535
  801988:	3cffffcc 	andi	r19,r7,65535
  80198c:	9009883a 	mov	r4,r18
  801990:	800b883a 	mov	r5,r16
  801994:	a269883a 	add	r20,r20,r9
  801998:	d8c00515 	stw	r3,20(sp)
  80199c:	d9800715 	stw	r6,28(sp)
  8019a0:	da000615 	stw	r8,24(sp)
  8019a4:	14e7883a 	add	r19,r2,r19
  8019a8:	0801f4c0 	call	801f4c <__mulsi3>
  8019ac:	9009883a 	mov	r4,r18
  8019b0:	b00b883a 	mov	r5,r22
  8019b4:	d8800315 	stw	r2,12(sp)
  8019b8:	0801f4c0 	call	801f4c <__mulsi3>
  8019bc:	b809883a 	mov	r4,r23
  8019c0:	b00b883a 	mov	r5,r22
  8019c4:	d8800215 	stw	r2,8(sp)
  8019c8:	0801f4c0 	call	801f4c <__mulsi3>
  8019cc:	b80b883a 	mov	r5,r23
  8019d0:	8009883a 	mov	r4,r16
  8019d4:	d8800415 	stw	r2,16(sp)
  8019d8:	0801f4c0 	call	801f4c <__mulsi3>
  8019dc:	da800317 	ldw	r10,12(sp)
  8019e0:	d9c00217 	ldw	r7,8(sp)
  8019e4:	d9000017 	ldw	r4,0(sp)
  8019e8:	502ed43a 	srli	r23,r10,16
  8019ec:	11c5883a 	add	r2,r2,r7
  8019f0:	24e5883a 	add	r18,r4,r19
  8019f4:	b885883a 	add	r2,r23,r2
  8019f8:	d8c00517 	ldw	r3,20(sp)
  8019fc:	d9800717 	ldw	r6,28(sp)
  801a00:	da000617 	ldw	r8,24(sp)
  801a04:	da400417 	ldw	r9,16(sp)
  801a08:	11c0022e 	bgeu	r2,r7,801a14 <__muldf3+0x4f4>
  801a0c:	01000074 	movhi	r4,1
  801a10:	4913883a 	add	r9,r9,r4
  801a14:	100ed43a 	srli	r7,r2,16
  801a18:	1004943a 	slli	r2,r2,16
  801a1c:	55ffffcc 	andi	r23,r10,65535
  801a20:	3a53883a 	add	r9,r7,r9
  801a24:	8809883a 	mov	r4,r17
  801a28:	800b883a 	mov	r5,r16
  801a2c:	d8c00515 	stw	r3,20(sp)
  801a30:	d9800715 	stw	r6,28(sp)
  801a34:	da000615 	stw	r8,24(sp)
  801a38:	da400415 	stw	r9,16(sp)
  801a3c:	15ef883a 	add	r23,r2,r23
  801a40:	0801f4c0 	call	801f4c <__mulsi3>
  801a44:	8809883a 	mov	r4,r17
  801a48:	b00b883a 	mov	r5,r22
  801a4c:	d8800215 	stw	r2,8(sp)
  801a50:	0801f4c0 	call	801f4c <__mulsi3>
  801a54:	b00b883a 	mov	r5,r22
  801a58:	a809883a 	mov	r4,r21
  801a5c:	d8800315 	stw	r2,12(sp)
  801a60:	0801f4c0 	call	801f4c <__mulsi3>
  801a64:	8009883a 	mov	r4,r16
  801a68:	a80b883a 	mov	r5,r21
  801a6c:	1023883a 	mov	r17,r2
  801a70:	0801f4c0 	call	801f4c <__mulsi3>
  801a74:	d9c00217 	ldw	r7,8(sp)
  801a78:	da800317 	ldw	r10,12(sp)
  801a7c:	d8c00517 	ldw	r3,20(sp)
  801a80:	3808d43a 	srli	r4,r7,16
  801a84:	1285883a 	add	r2,r2,r10
  801a88:	d9800717 	ldw	r6,28(sp)
  801a8c:	2085883a 	add	r2,r4,r2
  801a90:	da000617 	ldw	r8,24(sp)
  801a94:	da400417 	ldw	r9,16(sp)
  801a98:	1280022e 	bgeu	r2,r10,801aa4 <__muldf3+0x584>
  801a9c:	01000074 	movhi	r4,1
  801aa0:	8923883a 	add	r17,r17,r4
  801aa4:	1008943a 	slli	r4,r2,16
  801aa8:	39ffffcc 	andi	r7,r7,65535
  801aac:	e4b9883a 	add	fp,fp,r18
  801ab0:	21cf883a 	add	r7,r4,r7
  801ab4:	e4e7803a 	cmpltu	r19,fp,r19
  801ab8:	3d0f883a 	add	r7,r7,r20
  801abc:	bf39883a 	add	fp,r23,fp
  801ac0:	99c9883a 	add	r4,r19,r7
  801ac4:	e5ef803a 	cmpltu	r23,fp,r23
  801ac8:	490b883a 	add	r5,r9,r4
  801acc:	1004d43a 	srli	r2,r2,16
  801ad0:	b965883a 	add	r18,r23,r5
  801ad4:	24c9803a 	cmpltu	r4,r4,r19
  801ad8:	3d29803a 	cmpltu	r20,r7,r20
  801adc:	a128b03a 	or	r20,r20,r4
  801ae0:	95ef803a 	cmpltu	r23,r18,r23
  801ae4:	2a53803a 	cmpltu	r9,r5,r9
  801ae8:	a0a9883a 	add	r20,r20,r2
  801aec:	4deeb03a 	or	r23,r9,r23
  801af0:	a5ef883a 	add	r23,r20,r23
  801af4:	bc63883a 	add	r17,r23,r17
  801af8:	e004927a 	slli	r2,fp,9
  801afc:	d9000117 	ldw	r4,4(sp)
  801b00:	882e927a 	slli	r23,r17,9
  801b04:	9022d5fa 	srli	r17,r18,23
  801b08:	e038d5fa 	srli	fp,fp,23
  801b0c:	1104b03a 	or	r2,r2,r4
  801b10:	9024927a 	slli	r18,r18,9
  801b14:	1004c03a 	cmpne	r2,r2,zero
  801b18:	bc62b03a 	or	r17,r23,r17
  801b1c:	1738b03a 	or	fp,r2,fp
  801b20:	8880402c 	andhi	r2,r17,256
  801b24:	e4a4b03a 	or	r18,fp,r18
  801b28:	10000726 	beq	r2,zero,801b48 <__muldf3+0x628>
  801b2c:	9006d07a 	srli	r3,r18,1
  801b30:	880497fa 	slli	r2,r17,31
  801b34:	9480004c 	andi	r18,r18,1
  801b38:	8822d07a 	srli	r17,r17,1
  801b3c:	1ca4b03a 	or	r18,r3,r18
  801b40:	14a4b03a 	or	r18,r2,r18
  801b44:	4007883a 	mov	r3,r8
  801b48:	1880ffc4 	addi	r2,r3,1023
  801b4c:	0080460e 	bge	zero,r2,801c68 <__muldf3+0x748>
  801b50:	910001cc 	andi	r4,r18,7
  801b54:	20000726 	beq	r4,zero,801b74 <__muldf3+0x654>
  801b58:	910003cc 	andi	r4,r18,15
  801b5c:	01400104 	movi	r5,4
  801b60:	21400426 	beq	r4,r5,801b74 <__muldf3+0x654>
  801b64:	9149883a 	add	r4,r18,r5
  801b68:	24a5803a 	cmpltu	r18,r4,r18
  801b6c:	8ca3883a 	add	r17,r17,r18
  801b70:	2025883a 	mov	r18,r4
  801b74:	8900402c 	andhi	r4,r17,256
  801b78:	20000426 	beq	r4,zero,801b8c <__muldf3+0x66c>
  801b7c:	18810004 	addi	r2,r3,1024
  801b80:	00ffc034 	movhi	r3,65280
  801b84:	18ffffc4 	addi	r3,r3,-1
  801b88:	88e2703a 	and	r17,r17,r3
  801b8c:	00c1ff84 	movi	r3,2046
  801b90:	18bf1316 	blt	r3,r2,8017e0 <__alt_data_end+0xff8017e0>
  801b94:	882c977a 	slli	r22,r17,29
  801b98:	9024d0fa 	srli	r18,r18,3
  801b9c:	8822927a 	slli	r17,r17,9
  801ba0:	1081ffcc 	andi	r2,r2,2047
  801ba4:	b4acb03a 	or	r22,r22,r18
  801ba8:	8820d33a 	srli	r16,r17,12
  801bac:	3027883a 	mov	r19,r6
  801bb0:	003eba06 	br	80169c <__alt_data_end+0xff80169c>
  801bb4:	8080022c 	andhi	r2,r16,8
  801bb8:	10000926 	beq	r2,zero,801be0 <__muldf3+0x6c0>
  801bbc:	8880022c 	andhi	r2,r17,8
  801bc0:	1000071e 	bne	r2,zero,801be0 <__muldf3+0x6c0>
  801bc4:	00800434 	movhi	r2,16
  801bc8:	8c000234 	orhi	r16,r17,8
  801bcc:	10bfffc4 	addi	r2,r2,-1
  801bd0:	e027883a 	mov	r19,fp
  801bd4:	80a0703a 	and	r16,r16,r2
  801bd8:	902d883a 	mov	r22,r18
  801bdc:	003f1706 	br	80183c <__alt_data_end+0xff80183c>
  801be0:	00800434 	movhi	r2,16
  801be4:	84000234 	orhi	r16,r16,8
  801be8:	10bfffc4 	addi	r2,r2,-1
  801bec:	80a0703a 	and	r16,r16,r2
  801bf0:	003f1206 	br	80183c <__alt_data_end+0xff80183c>
  801bf4:	147ff604 	addi	r17,r2,-40
  801bf8:	3462983a 	sll	r17,r6,r17
  801bfc:	0025883a 	mov	r18,zero
  801c00:	003ef306 	br	8017d0 <__alt_data_end+0xff8017d0>
  801c04:	3009883a 	mov	r4,r6
  801c08:	d9400215 	stw	r5,8(sp)
  801c0c:	d9800715 	stw	r6,28(sp)
  801c10:	da400415 	stw	r9,16(sp)
  801c14:	da800315 	stw	r10,12(sp)
  801c18:	0801ee80 	call	801ee8 <__clzsi2>
  801c1c:	10800804 	addi	r2,r2,32
  801c20:	da800317 	ldw	r10,12(sp)
  801c24:	da400417 	ldw	r9,16(sp)
  801c28:	d9800717 	ldw	r6,28(sp)
  801c2c:	d9400217 	ldw	r5,8(sp)
  801c30:	003edd06 	br	8017a8 <__alt_data_end+0xff8017a8>
  801c34:	143ff604 	addi	r16,r2,-40
  801c38:	ac20983a 	sll	r16,r21,r16
  801c3c:	002d883a 	mov	r22,zero
  801c40:	003ec106 	br	801748 <__alt_data_end+0xff801748>
  801c44:	d9800715 	stw	r6,28(sp)
  801c48:	d9c00215 	stw	r7,8(sp)
  801c4c:	da400415 	stw	r9,16(sp)
  801c50:	0801ee80 	call	801ee8 <__clzsi2>
  801c54:	10800804 	addi	r2,r2,32
  801c58:	da400417 	ldw	r9,16(sp)
  801c5c:	d9c00217 	ldw	r7,8(sp)
  801c60:	d9800717 	ldw	r6,28(sp)
  801c64:	003eae06 	br	801720 <__alt_data_end+0xff801720>
  801c68:	00c00044 	movi	r3,1
  801c6c:	1887c83a 	sub	r3,r3,r2
  801c70:	01000e04 	movi	r4,56
  801c74:	20fe8516 	blt	r4,r3,80168c <__alt_data_end+0xff80168c>
  801c78:	010007c4 	movi	r4,31
  801c7c:	20c01b16 	blt	r4,r3,801cec <__muldf3+0x7cc>
  801c80:	00800804 	movi	r2,32
  801c84:	10c5c83a 	sub	r2,r2,r3
  801c88:	888a983a 	sll	r5,r17,r2
  801c8c:	90c8d83a 	srl	r4,r18,r3
  801c90:	9084983a 	sll	r2,r18,r2
  801c94:	88e2d83a 	srl	r17,r17,r3
  801c98:	2906b03a 	or	r3,r5,r4
  801c9c:	1004c03a 	cmpne	r2,r2,zero
  801ca0:	1886b03a 	or	r3,r3,r2
  801ca4:	188001cc 	andi	r2,r3,7
  801ca8:	10000726 	beq	r2,zero,801cc8 <__muldf3+0x7a8>
  801cac:	188003cc 	andi	r2,r3,15
  801cb0:	01000104 	movi	r4,4
  801cb4:	11000426 	beq	r2,r4,801cc8 <__muldf3+0x7a8>
  801cb8:	1805883a 	mov	r2,r3
  801cbc:	10c00104 	addi	r3,r2,4
  801cc0:	1885803a 	cmpltu	r2,r3,r2
  801cc4:	88a3883a 	add	r17,r17,r2
  801cc8:	8880202c 	andhi	r2,r17,128
  801ccc:	10001c26 	beq	r2,zero,801d40 <__muldf3+0x820>
  801cd0:	3027883a 	mov	r19,r6
  801cd4:	00800044 	movi	r2,1
  801cd8:	0021883a 	mov	r16,zero
  801cdc:	002d883a 	mov	r22,zero
  801ce0:	003e6e06 	br	80169c <__alt_data_end+0xff80169c>
  801ce4:	4007883a 	mov	r3,r8
  801ce8:	003f9706 	br	801b48 <__alt_data_end+0xff801b48>
  801cec:	017ff844 	movi	r5,-31
  801cf0:	2885c83a 	sub	r2,r5,r2
  801cf4:	888ad83a 	srl	r5,r17,r2
  801cf8:	00800804 	movi	r2,32
  801cfc:	18801a26 	beq	r3,r2,801d68 <__muldf3+0x848>
  801d00:	01001004 	movi	r4,64
  801d04:	20c7c83a 	sub	r3,r4,r3
  801d08:	88e2983a 	sll	r17,r17,r3
  801d0c:	8ca4b03a 	or	r18,r17,r18
  801d10:	9004c03a 	cmpne	r2,r18,zero
  801d14:	2884b03a 	or	r2,r5,r2
  801d18:	144001cc 	andi	r17,r2,7
  801d1c:	88000d1e 	bne	r17,zero,801d54 <__muldf3+0x834>
  801d20:	0021883a 	mov	r16,zero
  801d24:	102cd0fa 	srli	r22,r2,3
  801d28:	3027883a 	mov	r19,r6
  801d2c:	0005883a 	mov	r2,zero
  801d30:	b46cb03a 	or	r22,r22,r17
  801d34:	003e5906 	br	80169c <__alt_data_end+0xff80169c>
  801d38:	1007883a 	mov	r3,r2
  801d3c:	0023883a 	mov	r17,zero
  801d40:	8820927a 	slli	r16,r17,9
  801d44:	1805883a 	mov	r2,r3
  801d48:	8822977a 	slli	r17,r17,29
  801d4c:	8020d33a 	srli	r16,r16,12
  801d50:	003ff406 	br	801d24 <__alt_data_end+0xff801d24>
  801d54:	10c003cc 	andi	r3,r2,15
  801d58:	01000104 	movi	r4,4
  801d5c:	193ff626 	beq	r3,r4,801d38 <__alt_data_end+0xff801d38>
  801d60:	0023883a 	mov	r17,zero
  801d64:	003fd506 	br	801cbc <__alt_data_end+0xff801cbc>
  801d68:	0023883a 	mov	r17,zero
  801d6c:	003fe706 	br	801d0c <__alt_data_end+0xff801d0c>
  801d70:	00800434 	movhi	r2,16
  801d74:	8c000234 	orhi	r16,r17,8
  801d78:	10bfffc4 	addi	r2,r2,-1
  801d7c:	3027883a 	mov	r19,r6
  801d80:	80a0703a 	and	r16,r16,r2
  801d84:	902d883a 	mov	r22,r18
  801d88:	003eac06 	br	80183c <__alt_data_end+0xff80183c>

00801d8c <__fixdfsi>:
  801d8c:	280cd53a 	srli	r6,r5,20
  801d90:	00c00434 	movhi	r3,16
  801d94:	18ffffc4 	addi	r3,r3,-1
  801d98:	3181ffcc 	andi	r6,r6,2047
  801d9c:	01c0ff84 	movi	r7,1022
  801da0:	28c6703a 	and	r3,r5,r3
  801da4:	280ad7fa 	srli	r5,r5,31
  801da8:	3980120e 	bge	r7,r6,801df4 <__fixdfsi+0x68>
  801dac:	00810744 	movi	r2,1053
  801db0:	11800c16 	blt	r2,r6,801de4 <__fixdfsi+0x58>
  801db4:	00810cc4 	movi	r2,1075
  801db8:	1185c83a 	sub	r2,r2,r6
  801dbc:	01c007c4 	movi	r7,31
  801dc0:	18c00434 	orhi	r3,r3,16
  801dc4:	38800d16 	blt	r7,r2,801dfc <__fixdfsi+0x70>
  801dc8:	31befb44 	addi	r6,r6,-1043
  801dcc:	2084d83a 	srl	r2,r4,r2
  801dd0:	1986983a 	sll	r3,r3,r6
  801dd4:	1884b03a 	or	r2,r3,r2
  801dd8:	28000726 	beq	r5,zero,801df8 <__fixdfsi+0x6c>
  801ddc:	0085c83a 	sub	r2,zero,r2
  801de0:	f800283a 	ret
  801de4:	00a00034 	movhi	r2,32768
  801de8:	10bfffc4 	addi	r2,r2,-1
  801dec:	2885883a 	add	r2,r5,r2
  801df0:	f800283a 	ret
  801df4:	0005883a 	mov	r2,zero
  801df8:	f800283a 	ret
  801dfc:	008104c4 	movi	r2,1043
  801e00:	1185c83a 	sub	r2,r2,r6
  801e04:	1884d83a 	srl	r2,r3,r2
  801e08:	003ff306 	br	801dd8 <__alt_data_end+0xff801dd8>

00801e0c <__floatsidf>:
  801e0c:	defffd04 	addi	sp,sp,-12
  801e10:	dfc00215 	stw	ra,8(sp)
  801e14:	dc400115 	stw	r17,4(sp)
  801e18:	dc000015 	stw	r16,0(sp)
  801e1c:	20002b26 	beq	r4,zero,801ecc <__floatsidf+0xc0>
  801e20:	2023883a 	mov	r17,r4
  801e24:	2020d7fa 	srli	r16,r4,31
  801e28:	20002d16 	blt	r4,zero,801ee0 <__floatsidf+0xd4>
  801e2c:	8809883a 	mov	r4,r17
  801e30:	0801ee80 	call	801ee8 <__clzsi2>
  801e34:	01410784 	movi	r5,1054
  801e38:	288bc83a 	sub	r5,r5,r2
  801e3c:	01010cc4 	movi	r4,1075
  801e40:	2149c83a 	sub	r4,r4,r5
  801e44:	00c007c4 	movi	r3,31
  801e48:	1900160e 	bge	r3,r4,801ea4 <__floatsidf+0x98>
  801e4c:	00c104c4 	movi	r3,1043
  801e50:	1947c83a 	sub	r3,r3,r5
  801e54:	88c6983a 	sll	r3,r17,r3
  801e58:	00800434 	movhi	r2,16
  801e5c:	10bfffc4 	addi	r2,r2,-1
  801e60:	1886703a 	and	r3,r3,r2
  801e64:	2941ffcc 	andi	r5,r5,2047
  801e68:	800d883a 	mov	r6,r16
  801e6c:	0005883a 	mov	r2,zero
  801e70:	280a953a 	slli	r5,r5,20
  801e74:	31803fcc 	andi	r6,r6,255
  801e78:	01000434 	movhi	r4,16
  801e7c:	300c97fa 	slli	r6,r6,31
  801e80:	213fffc4 	addi	r4,r4,-1
  801e84:	1906703a 	and	r3,r3,r4
  801e88:	1946b03a 	or	r3,r3,r5
  801e8c:	1986b03a 	or	r3,r3,r6
  801e90:	dfc00217 	ldw	ra,8(sp)
  801e94:	dc400117 	ldw	r17,4(sp)
  801e98:	dc000017 	ldw	r16,0(sp)
  801e9c:	dec00304 	addi	sp,sp,12
  801ea0:	f800283a 	ret
  801ea4:	00c002c4 	movi	r3,11
  801ea8:	1887c83a 	sub	r3,r3,r2
  801eac:	88c6d83a 	srl	r3,r17,r3
  801eb0:	8904983a 	sll	r2,r17,r4
  801eb4:	01000434 	movhi	r4,16
  801eb8:	213fffc4 	addi	r4,r4,-1
  801ebc:	2941ffcc 	andi	r5,r5,2047
  801ec0:	1906703a 	and	r3,r3,r4
  801ec4:	800d883a 	mov	r6,r16
  801ec8:	003fe906 	br	801e70 <__alt_data_end+0xff801e70>
  801ecc:	000d883a 	mov	r6,zero
  801ed0:	000b883a 	mov	r5,zero
  801ed4:	0007883a 	mov	r3,zero
  801ed8:	0005883a 	mov	r2,zero
  801edc:	003fe406 	br	801e70 <__alt_data_end+0xff801e70>
  801ee0:	0123c83a 	sub	r17,zero,r4
  801ee4:	003fd106 	br	801e2c <__alt_data_end+0xff801e2c>

00801ee8 <__clzsi2>:
  801ee8:	00bfffd4 	movui	r2,65535
  801eec:	11000536 	bltu	r2,r4,801f04 <__clzsi2+0x1c>
  801ef0:	00803fc4 	movi	r2,255
  801ef4:	11000f36 	bltu	r2,r4,801f34 <__clzsi2+0x4c>
  801ef8:	00800804 	movi	r2,32
  801efc:	0007883a 	mov	r3,zero
  801f00:	00000506 	br	801f18 <__clzsi2+0x30>
  801f04:	00804034 	movhi	r2,256
  801f08:	10bfffc4 	addi	r2,r2,-1
  801f0c:	11000c2e 	bgeu	r2,r4,801f40 <__clzsi2+0x58>
  801f10:	00800204 	movi	r2,8
  801f14:	00c00604 	movi	r3,24
  801f18:	20c8d83a 	srl	r4,r4,r3
  801f1c:	00c02034 	movhi	r3,128
  801f20:	18cfc3c4 	addi	r3,r3,16143
  801f24:	1909883a 	add	r4,r3,r4
  801f28:	20c00003 	ldbu	r3,0(r4)
  801f2c:	10c5c83a 	sub	r2,r2,r3
  801f30:	f800283a 	ret
  801f34:	00800604 	movi	r2,24
  801f38:	00c00204 	movi	r3,8
  801f3c:	003ff606 	br	801f18 <__alt_data_end+0xff801f18>
  801f40:	00800404 	movi	r2,16
  801f44:	1007883a 	mov	r3,r2
  801f48:	003ff306 	br	801f18 <__alt_data_end+0xff801f18>

00801f4c <__mulsi3>:
  801f4c:	0005883a 	mov	r2,zero
  801f50:	20000726 	beq	r4,zero,801f70 <__mulsi3+0x24>
  801f54:	20c0004c 	andi	r3,r4,1
  801f58:	2008d07a 	srli	r4,r4,1
  801f5c:	18000126 	beq	r3,zero,801f64 <__mulsi3+0x18>
  801f60:	1145883a 	add	r2,r2,r5
  801f64:	294b883a 	add	r5,r5,r5
  801f68:	203ffa1e 	bne	r4,zero,801f54 <__alt_data_end+0xff801f54>
  801f6c:	f800283a 	ret
  801f70:	f800283a 	ret

00801f74 <atoi>:
  801f74:	01800284 	movi	r6,10
  801f78:	000b883a 	mov	r5,zero
  801f7c:	08028041 	jmpi	802804 <strtol>

00801f80 <_atoi_r>:
  801f80:	01c00284 	movi	r7,10
  801f84:	000d883a 	mov	r6,zero
  801f88:	08025d01 	jmpi	8025d0 <_strtol_r>

00801f8c <malloc>:
  801f8c:	00802034 	movhi	r2,128
  801f90:	10913c04 	addi	r2,r2,17648
  801f94:	200b883a 	mov	r5,r4
  801f98:	11000017 	ldw	r4,0(r2)
  801f9c:	08020b81 	jmpi	8020b8 <_malloc_r>

00801fa0 <free>:
  801fa0:	00802034 	movhi	r2,128
  801fa4:	10913c04 	addi	r2,r2,17648
  801fa8:	200b883a 	mov	r5,r4
  801fac:	11000017 	ldw	r4,0(r2)
  801fb0:	0801fd41 	jmpi	801fd4 <_free_r>

00801fb4 <memset>:
  801fb4:	2005883a 	mov	r2,r4
  801fb8:	2007883a 	mov	r3,r4
  801fbc:	218d883a 	add	r6,r4,r6
  801fc0:	19800326 	beq	r3,r6,801fd0 <memset+0x1c>
  801fc4:	19400005 	stb	r5,0(r3)
  801fc8:	18c00044 	addi	r3,r3,1
  801fcc:	003ffc06 	br	801fc0 <__alt_data_end+0xff801fc0>
  801fd0:	f800283a 	ret

00801fd4 <_free_r>:
  801fd4:	28003726 	beq	r5,zero,8020b4 <_free_r+0xe0>
  801fd8:	28ffff17 	ldw	r3,-4(r5)
  801fdc:	28bfff04 	addi	r2,r5,-4
  801fe0:	1800010e 	bge	r3,zero,801fe8 <_free_r+0x14>
  801fe4:	10c5883a 	add	r2,r2,r3
  801fe8:	01402034 	movhi	r5,128
  801fec:	2951ed04 	addi	r5,r5,18356
  801ff0:	28c00017 	ldw	r3,0(r5)
  801ff4:	280d883a 	mov	r6,r5
  801ff8:	1800031e 	bne	r3,zero,802008 <_free_r+0x34>
  801ffc:	10000115 	stw	zero,4(r2)
  802000:	28800015 	stw	r2,0(r5)
  802004:	f800283a 	ret
  802008:	10c00c2e 	bgeu	r2,r3,80203c <_free_r+0x68>
  80200c:	11000017 	ldw	r4,0(r2)
  802010:	110b883a 	add	r5,r2,r4
  802014:	1940041e 	bne	r3,r5,802028 <_free_r+0x54>
  802018:	19400017 	ldw	r5,0(r3)
  80201c:	18c00117 	ldw	r3,4(r3)
  802020:	2909883a 	add	r4,r5,r4
  802024:	11000015 	stw	r4,0(r2)
  802028:	10c00115 	stw	r3,4(r2)
  80202c:	30800015 	stw	r2,0(r6)
  802030:	f800283a 	ret
  802034:	11400336 	bltu	r2,r5,802044 <_free_r+0x70>
  802038:	2807883a 	mov	r3,r5
  80203c:	19400117 	ldw	r5,4(r3)
  802040:	283ffc1e 	bne	r5,zero,802034 <__alt_data_end+0xff802034>
  802044:	19c00017 	ldw	r7,0(r3)
  802048:	19cd883a 	add	r6,r3,r7
  80204c:	30800a1e 	bne	r6,r2,802078 <_free_r+0xa4>
  802050:	10800017 	ldw	r2,0(r2)
  802054:	3885883a 	add	r2,r7,r2
  802058:	18800015 	stw	r2,0(r3)
  80205c:	1889883a 	add	r4,r3,r2
  802060:	2900141e 	bne	r5,r4,8020b4 <_free_r+0xe0>
  802064:	29000017 	ldw	r4,0(r5)
  802068:	2085883a 	add	r2,r4,r2
  80206c:	18800015 	stw	r2,0(r3)
  802070:	28800117 	ldw	r2,4(r5)
  802074:	00000e06 	br	8020b0 <_free_r+0xdc>
  802078:	1180032e 	bgeu	r2,r6,802088 <_free_r+0xb4>
  80207c:	00800304 	movi	r2,12
  802080:	20800015 	stw	r2,0(r4)
  802084:	f800283a 	ret
  802088:	11000017 	ldw	r4,0(r2)
  80208c:	110d883a 	add	r6,r2,r4
  802090:	2980061e 	bne	r5,r6,8020ac <_free_r+0xd8>
  802094:	29800017 	ldw	r6,0(r5)
  802098:	3109883a 	add	r4,r6,r4
  80209c:	11000015 	stw	r4,0(r2)
  8020a0:	29000117 	ldw	r4,4(r5)
  8020a4:	11000115 	stw	r4,4(r2)
  8020a8:	00000106 	br	8020b0 <_free_r+0xdc>
  8020ac:	11400115 	stw	r5,4(r2)
  8020b0:	18800115 	stw	r2,4(r3)
  8020b4:	f800283a 	ret

008020b8 <_malloc_r>:
  8020b8:	defffb04 	addi	sp,sp,-20
  8020bc:	00bfff04 	movi	r2,-4
  8020c0:	dc400115 	stw	r17,4(sp)
  8020c4:	2c4000c4 	addi	r17,r5,3
  8020c8:	88a2703a 	and	r17,r17,r2
  8020cc:	dc800215 	stw	r18,8(sp)
  8020d0:	dfc00415 	stw	ra,16(sp)
  8020d4:	dcc00315 	stw	r19,12(sp)
  8020d8:	dc000015 	stw	r16,0(sp)
  8020dc:	8c400204 	addi	r17,r17,8
  8020e0:	00800304 	movi	r2,12
  8020e4:	2025883a 	mov	r18,r4
  8020e8:	8880022e 	bgeu	r17,r2,8020f4 <_malloc_r+0x3c>
  8020ec:	1023883a 	mov	r17,r2
  8020f0:	00000506 	br	802108 <_malloc_r+0x50>
  8020f4:	8800040e 	bge	r17,zero,802108 <_malloc_r+0x50>
  8020f8:	00800304 	movi	r2,12
  8020fc:	90800015 	stw	r2,0(r18)
  802100:	0005883a 	mov	r2,zero
  802104:	00003b06 	br	8021f4 <_malloc_r+0x13c>
  802108:	897ffb36 	bltu	r17,r5,8020f8 <__alt_data_end+0xff8020f8>
  80210c:	00802034 	movhi	r2,128
  802110:	1091ed04 	addi	r2,r2,18356
  802114:	10c00017 	ldw	r3,0(r2)
  802118:	1009883a 	mov	r4,r2
  80211c:	1821883a 	mov	r16,r3
  802120:	80000926 	beq	r16,zero,802148 <_malloc_r+0x90>
  802124:	80800017 	ldw	r2,0(r16)
  802128:	1445c83a 	sub	r2,r2,r17
  80212c:	10001516 	blt	r2,zero,802184 <_malloc_r+0xcc>
  802130:	014002c4 	movi	r5,11
  802134:	28800d2e 	bgeu	r5,r2,80216c <_malloc_r+0xb4>
  802138:	80800015 	stw	r2,0(r16)
  80213c:	80a1883a 	add	r16,r16,r2
  802140:	84400015 	stw	r17,0(r16)
  802144:	8000221e 	bne	r16,zero,8021d0 <_malloc_r+0x118>
  802148:	04002034 	movhi	r16,128
  80214c:	8411ec04 	addi	r16,r16,18352
  802150:	80800017 	ldw	r2,0(r16)
  802154:	10000e1e 	bne	r2,zero,802190 <_malloc_r+0xd8>
  802158:	000b883a 	mov	r5,zero
  80215c:	9009883a 	mov	r4,r18
  802160:	08022980 	call	802298 <_sbrk_r>
  802164:	80800015 	stw	r2,0(r16)
  802168:	00000906 	br	802190 <_malloc_r+0xd8>
  80216c:	80800117 	ldw	r2,4(r16)
  802170:	1c00021e 	bne	r3,r16,80217c <_malloc_r+0xc4>
  802174:	20800015 	stw	r2,0(r4)
  802178:	00001506 	br	8021d0 <_malloc_r+0x118>
  80217c:	18800115 	stw	r2,4(r3)
  802180:	00001306 	br	8021d0 <_malloc_r+0x118>
  802184:	8007883a 	mov	r3,r16
  802188:	84000117 	ldw	r16,4(r16)
  80218c:	003fe406 	br	802120 <__alt_data_end+0xff802120>
  802190:	880b883a 	mov	r5,r17
  802194:	9009883a 	mov	r4,r18
  802198:	08022980 	call	802298 <_sbrk_r>
  80219c:	04ffffc4 	movi	r19,-1
  8021a0:	14ffd526 	beq	r2,r19,8020f8 <__alt_data_end+0xff8020f8>
  8021a4:	140000c4 	addi	r16,r2,3
  8021a8:	00ffff04 	movi	r3,-4
  8021ac:	80e0703a 	and	r16,r16,r3
  8021b0:	1400021e 	bne	r2,r16,8021bc <_malloc_r+0x104>
  8021b4:	84400015 	stw	r17,0(r16)
  8021b8:	00000506 	br	8021d0 <_malloc_r+0x118>
  8021bc:	808bc83a 	sub	r5,r16,r2
  8021c0:	9009883a 	mov	r4,r18
  8021c4:	08022980 	call	802298 <_sbrk_r>
  8021c8:	14fffa1e 	bne	r2,r19,8021b4 <__alt_data_end+0xff8021b4>
  8021cc:	003fca06 	br	8020f8 <__alt_data_end+0xff8020f8>
  8021d0:	810002c4 	addi	r4,r16,11
  8021d4:	00bffe04 	movi	r2,-8
  8021d8:	80c00104 	addi	r3,r16,4
  8021dc:	2084703a 	and	r2,r4,r2
  8021e0:	10c7c83a 	sub	r3,r2,r3
  8021e4:	18000326 	beq	r3,zero,8021f4 <_malloc_r+0x13c>
  8021e8:	80e1883a 	add	r16,r16,r3
  8021ec:	00c7c83a 	sub	r3,zero,r3
  8021f0:	80c00015 	stw	r3,0(r16)
  8021f4:	dfc00417 	ldw	ra,16(sp)
  8021f8:	dcc00317 	ldw	r19,12(sp)
  8021fc:	dc800217 	ldw	r18,8(sp)
  802200:	dc400117 	ldw	r17,4(sp)
  802204:	dc000017 	ldw	r16,0(sp)
  802208:	dec00504 	addi	sp,sp,20
  80220c:	f800283a 	ret

00802210 <_printf_r>:
  802210:	defffd04 	addi	sp,sp,-12
  802214:	dfc00015 	stw	ra,0(sp)
  802218:	d9800115 	stw	r6,4(sp)
  80221c:	d9c00215 	stw	r7,8(sp)
  802220:	20c00217 	ldw	r3,8(r4)
  802224:	01802034 	movhi	r6,128
  802228:	318ce204 	addi	r6,r6,13192
  80222c:	19800115 	stw	r6,4(r3)
  802230:	280d883a 	mov	r6,r5
  802234:	21400217 	ldw	r5,8(r4)
  802238:	d9c00104 	addi	r7,sp,4
  80223c:	0802e400 	call	802e40 <___vfprintf_internal_r>
  802240:	dfc00017 	ldw	ra,0(sp)
  802244:	dec00304 	addi	sp,sp,12
  802248:	f800283a 	ret

0080224c <printf>:
  80224c:	defffc04 	addi	sp,sp,-16
  802250:	dfc00015 	stw	ra,0(sp)
  802254:	d9400115 	stw	r5,4(sp)
  802258:	d9800215 	stw	r6,8(sp)
  80225c:	d9c00315 	stw	r7,12(sp)
  802260:	00802034 	movhi	r2,128
  802264:	10913c04 	addi	r2,r2,17648
  802268:	10800017 	ldw	r2,0(r2)
  80226c:	01402034 	movhi	r5,128
  802270:	294ce204 	addi	r5,r5,13192
  802274:	10c00217 	ldw	r3,8(r2)
  802278:	d9800104 	addi	r6,sp,4
  80227c:	19400115 	stw	r5,4(r3)
  802280:	200b883a 	mov	r5,r4
  802284:	11000217 	ldw	r4,8(r2)
  802288:	080336c0 	call	80336c <__vfprintf_internal>
  80228c:	dfc00017 	ldw	ra,0(sp)
  802290:	dec00404 	addi	sp,sp,16
  802294:	f800283a 	ret

00802298 <_sbrk_r>:
  802298:	defffd04 	addi	sp,sp,-12
  80229c:	dc000015 	stw	r16,0(sp)
  8022a0:	04002034 	movhi	r16,128
  8022a4:	dc400115 	stw	r17,4(sp)
  8022a8:	8411ee04 	addi	r16,r16,18360
  8022ac:	2023883a 	mov	r17,r4
  8022b0:	2809883a 	mov	r4,r5
  8022b4:	dfc00215 	stw	ra,8(sp)
  8022b8:	80000015 	stw	zero,0(r16)
  8022bc:	080393c0 	call	80393c <sbrk>
  8022c0:	00ffffc4 	movi	r3,-1
  8022c4:	10c0031e 	bne	r2,r3,8022d4 <_sbrk_r+0x3c>
  8022c8:	80c00017 	ldw	r3,0(r16)
  8022cc:	18000126 	beq	r3,zero,8022d4 <_sbrk_r+0x3c>
  8022d0:	88c00015 	stw	r3,0(r17)
  8022d4:	dfc00217 	ldw	ra,8(sp)
  8022d8:	dc400117 	ldw	r17,4(sp)
  8022dc:	dc000017 	ldw	r16,0(sp)
  8022e0:	dec00304 	addi	sp,sp,12
  8022e4:	f800283a 	ret

008022e8 <_sprintf_r>:
  8022e8:	defff704 	addi	sp,sp,-36
  8022ec:	dfc00715 	stw	ra,28(sp)
  8022f0:	d9c00815 	stw	r7,32(sp)
  8022f4:	00808204 	movi	r2,520
  8022f8:	d880000d 	sth	r2,0(sp)
  8022fc:	00a00034 	movhi	r2,32768
  802300:	10bfffc4 	addi	r2,r2,-1
  802304:	d8800515 	stw	r2,20(sp)
  802308:	d8800315 	stw	r2,12(sp)
  80230c:	00bfffc4 	movi	r2,-1
  802310:	d880008d 	sth	r2,2(sp)
  802314:	00802034 	movhi	r2,128
  802318:	d9400415 	stw	r5,16(sp)
  80231c:	d9400215 	stw	r5,8(sp)
  802320:	108d1004 	addi	r2,r2,13376
  802324:	d9c00804 	addi	r7,sp,32
  802328:	d80b883a 	mov	r5,sp
  80232c:	d8800115 	stw	r2,4(sp)
  802330:	d8000615 	stw	zero,24(sp)
  802334:	080288c0 	call	80288c <___svfprintf_internal_r>
  802338:	d8c00417 	ldw	r3,16(sp)
  80233c:	18000005 	stb	zero,0(r3)
  802340:	dfc00717 	ldw	ra,28(sp)
  802344:	dec00904 	addi	sp,sp,36
  802348:	f800283a 	ret

0080234c <sprintf>:
  80234c:	defff604 	addi	sp,sp,-40
  802350:	dfc00715 	stw	ra,28(sp)
  802354:	d9800815 	stw	r6,32(sp)
  802358:	d9c00915 	stw	r7,36(sp)
  80235c:	00808204 	movi	r2,520
  802360:	d880000d 	sth	r2,0(sp)
  802364:	00a00034 	movhi	r2,32768
  802368:	10bfffc4 	addi	r2,r2,-1
  80236c:	d8800515 	stw	r2,20(sp)
  802370:	d8800315 	stw	r2,12(sp)
  802374:	00bfffc4 	movi	r2,-1
  802378:	d880008d 	sth	r2,2(sp)
  80237c:	00802034 	movhi	r2,128
  802380:	108d1004 	addi	r2,r2,13376
  802384:	d8800115 	stw	r2,4(sp)
  802388:	00802034 	movhi	r2,128
  80238c:	10913c04 	addi	r2,r2,17648
  802390:	d9000415 	stw	r4,16(sp)
  802394:	d9000215 	stw	r4,8(sp)
  802398:	11000017 	ldw	r4,0(r2)
  80239c:	280d883a 	mov	r6,r5
  8023a0:	d9c00804 	addi	r7,sp,32
  8023a4:	d80b883a 	mov	r5,sp
  8023a8:	d8000615 	stw	zero,24(sp)
  8023ac:	080288c0 	call	80288c <___svfprintf_internal_r>
  8023b0:	d8c00417 	ldw	r3,16(sp)
  8023b4:	18000005 	stb	zero,0(r3)
  8023b8:	dfc00717 	ldw	ra,28(sp)
  8023bc:	dec00a04 	addi	sp,sp,40
  8023c0:	f800283a 	ret

008023c4 <strcmp>:
  8023c4:	20800003 	ldbu	r2,0(r4)
  8023c8:	10c03fcc 	andi	r3,r2,255
  8023cc:	18c0201c 	xori	r3,r3,128
  8023d0:	18ffe004 	addi	r3,r3,-128
  8023d4:	18000526 	beq	r3,zero,8023ec <strcmp+0x28>
  8023d8:	29800007 	ldb	r6,0(r5)
  8023dc:	1980031e 	bne	r3,r6,8023ec <strcmp+0x28>
  8023e0:	21000044 	addi	r4,r4,1
  8023e4:	29400044 	addi	r5,r5,1
  8023e8:	003ff606 	br	8023c4 <__alt_data_end+0xff8023c4>
  8023ec:	28c00003 	ldbu	r3,0(r5)
  8023f0:	10803fcc 	andi	r2,r2,255
  8023f4:	10c5c83a 	sub	r2,r2,r3
  8023f8:	f800283a 	ret

008023fc <strlen>:
  8023fc:	2005883a 	mov	r2,r4
  802400:	10c00007 	ldb	r3,0(r2)
  802404:	18000226 	beq	r3,zero,802410 <strlen+0x14>
  802408:	10800044 	addi	r2,r2,1
  80240c:	003ffc06 	br	802400 <__alt_data_end+0xff802400>
  802410:	1105c83a 	sub	r2,r2,r4
  802414:	f800283a 	ret

00802418 <strncpy>:
  802418:	2005883a 	mov	r2,r4
  80241c:	200f883a 	mov	r7,r4
  802420:	30000c26 	beq	r6,zero,802454 <strncpy+0x3c>
  802424:	2a000003 	ldbu	r8,0(r5)
  802428:	38c00044 	addi	r3,r7,1
  80242c:	31bfffc4 	addi	r6,r6,-1
  802430:	3a000005 	stb	r8,0(r7)
  802434:	42003fcc 	andi	r8,r8,255
  802438:	4200201c 	xori	r8,r8,128
  80243c:	423fe004 	addi	r8,r8,-128
  802440:	29400044 	addi	r5,r5,1
  802444:	180f883a 	mov	r7,r3
  802448:	403ff51e 	bne	r8,zero,802420 <__alt_data_end+0xff802420>
  80244c:	198d883a 	add	r6,r3,r6
  802450:	00000106 	br	802458 <strncpy+0x40>
  802454:	f800283a 	ret
  802458:	30c00326 	beq	r6,r3,802468 <strncpy+0x50>
  80245c:	18000005 	stb	zero,0(r3)
  802460:	18c00044 	addi	r3,r3,1
  802464:	003ffc06 	br	802458 <__alt_data_end+0xff802458>
  802468:	f800283a 	ret

0080246c <strtok>:
  80246c:	00802034 	movhi	r2,128
  802470:	defffc04 	addi	sp,sp,-16
  802474:	10913c04 	addi	r2,r2,17648
  802478:	dc000115 	stw	r16,4(sp)
  80247c:	14000017 	ldw	r16,0(r2)
  802480:	dc400215 	stw	r17,8(sp)
  802484:	dfc00315 	stw	ra,12(sp)
  802488:	80803617 	ldw	r2,216(r16)
  80248c:	2023883a 	mov	r17,r4
  802490:	1000211e 	bne	r2,zero,802518 <strtok+0xac>
  802494:	01001404 	movi	r4,80
  802498:	d9400015 	stw	r5,0(sp)
  80249c:	0801f8c0 	call	801f8c <malloc>
  8024a0:	80803615 	stw	r2,216(r16)
  8024a4:	10000215 	stw	zero,8(r2)
  8024a8:	10000015 	stw	zero,0(r2)
  8024ac:	10000115 	stw	zero,4(r2)
  8024b0:	80803617 	ldw	r2,216(r16)
  8024b4:	10000415 	stw	zero,16(r2)
  8024b8:	10000315 	stw	zero,12(r2)
  8024bc:	80803617 	ldw	r2,216(r16)
  8024c0:	10000615 	stw	zero,24(r2)
  8024c4:	10000515 	stw	zero,20(r2)
  8024c8:	80803617 	ldw	r2,216(r16)
  8024cc:	10000b15 	stw	zero,44(r2)
  8024d0:	10000a15 	stw	zero,40(r2)
  8024d4:	80803617 	ldw	r2,216(r16)
  8024d8:	10000d15 	stw	zero,52(r2)
  8024dc:	10000c15 	stw	zero,48(r2)
  8024e0:	80803617 	ldw	r2,216(r16)
  8024e4:	10000f15 	stw	zero,60(r2)
  8024e8:	10000e15 	stw	zero,56(r2)
  8024ec:	80803617 	ldw	r2,216(r16)
  8024f0:	10001115 	stw	zero,68(r2)
  8024f4:	10001015 	stw	zero,64(r2)
  8024f8:	80803617 	ldw	r2,216(r16)
  8024fc:	10001315 	stw	zero,76(r2)
  802500:	10001215 	stw	zero,72(r2)
  802504:	80803617 	ldw	r2,216(r16)
  802508:	10000705 	stb	zero,28(r2)
  80250c:	80803617 	ldw	r2,216(r16)
  802510:	d9400017 	ldw	r5,0(sp)
  802514:	10000915 	stw	zero,36(r2)
  802518:	81803617 	ldw	r6,216(r16)
  80251c:	01c00044 	movi	r7,1
  802520:	8809883a 	mov	r4,r17
  802524:	dfc00317 	ldw	ra,12(sp)
  802528:	dc400217 	ldw	r17,8(sp)
  80252c:	dc000117 	ldw	r16,4(sp)
  802530:	dec00404 	addi	sp,sp,16
  802534:	08025381 	jmpi	802538 <__strtok_r>

00802538 <__strtok_r>:
  802538:	2000021e 	bne	r4,zero,802544 <__strtok_r+0xc>
  80253c:	31000017 	ldw	r4,0(r6)
  802540:	20001f26 	beq	r4,zero,8025c0 <__strtok_r+0x88>
  802544:	2005883a 	mov	r2,r4
  802548:	12000007 	ldb	r8,0(r2)
  80254c:	21000044 	addi	r4,r4,1
  802550:	2807883a 	mov	r3,r5
  802554:	1a400007 	ldb	r9,0(r3)
  802558:	48000626 	beq	r9,zero,802574 <__strtok_r+0x3c>
  80255c:	18c00044 	addi	r3,r3,1
  802560:	427ffc1e 	bne	r8,r9,802554 <__alt_data_end+0xff802554>
  802564:	383ff71e 	bne	r7,zero,802544 <__alt_data_end+0xff802544>
  802568:	31000015 	stw	r4,0(r6)
  80256c:	10000005 	stb	zero,0(r2)
  802570:	f800283a 	ret
  802574:	4000061e 	bne	r8,zero,802590 <__strtok_r+0x58>
  802578:	30000015 	stw	zero,0(r6)
  80257c:	00001006 	br	8025c0 <__strtok_r+0x88>
  802580:	19c00007 	ldb	r7,0(r3)
  802584:	51c00826 	beq	r10,r7,8025a8 <__strtok_r+0x70>
  802588:	18c00044 	addi	r3,r3,1
  80258c:	383ffc1e 	bne	r7,zero,802580 <__alt_data_end+0xff802580>
  802590:	2011883a 	mov	r8,r4
  802594:	21000044 	addi	r4,r4,1
  802598:	2013883a 	mov	r9,r4
  80259c:	42800007 	ldb	r10,0(r8)
  8025a0:	2807883a 	mov	r3,r5
  8025a4:	003ff606 	br	802580 <__alt_data_end+0xff802580>
  8025a8:	50000226 	beq	r10,zero,8025b4 <__strtok_r+0x7c>
  8025ac:	40000005 	stb	zero,0(r8)
  8025b0:	00000106 	br	8025b8 <__strtok_r+0x80>
  8025b4:	0013883a 	mov	r9,zero
  8025b8:	32400015 	stw	r9,0(r6)
  8025bc:	f800283a 	ret
  8025c0:	0005883a 	mov	r2,zero
  8025c4:	f800283a 	ret

008025c8 <strtok_r>:
  8025c8:	01c00044 	movi	r7,1
  8025cc:	08025381 	jmpi	802538 <__strtok_r>

008025d0 <_strtol_r>:
  8025d0:	00802034 	movhi	r2,128
  8025d4:	defff304 	addi	sp,sp,-52
  8025d8:	10913a04 	addi	r2,r2,17640
  8025dc:	dcc00615 	stw	r19,24(sp)
  8025e0:	14c00017 	ldw	r19,0(r2)
  8025e4:	df000b15 	stw	fp,44(sp)
  8025e8:	dd400815 	stw	r21,32(sp)
  8025ec:	dd000715 	stw	r20,28(sp)
  8025f0:	dc800515 	stw	r18,20(sp)
  8025f4:	202b883a 	mov	r21,r4
  8025f8:	dfc00c15 	stw	ra,48(sp)
  8025fc:	ddc00a15 	stw	r23,40(sp)
  802600:	dd800915 	stw	r22,36(sp)
  802604:	dc400415 	stw	r17,16(sp)
  802608:	dc000315 	stw	r16,12(sp)
  80260c:	2829883a 	mov	r20,r5
  802610:	3039883a 	mov	fp,r6
  802614:	3825883a 	mov	r18,r7
  802618:	2809883a 	mov	r4,r5
  80261c:	2005883a 	mov	r2,r4
  802620:	14400003 	ldbu	r17,0(r2)
  802624:	24000044 	addi	r16,r4,1
  802628:	8009883a 	mov	r4,r16
  80262c:	9c47883a 	add	r3,r19,r17
  802630:	18c00043 	ldbu	r3,1(r3)
  802634:	18c0020c 	andi	r3,r3,8
  802638:	183ff81e 	bne	r3,zero,80261c <__alt_data_end+0xff80261c>
  80263c:	00c00b44 	movi	r3,45
  802640:	88c0041e 	bne	r17,r3,802654 <_strtol_r+0x84>
  802644:	14000084 	addi	r16,r2,2
  802648:	14400043 	ldbu	r17,1(r2)
  80264c:	05c00044 	movi	r23,1
  802650:	00000506 	br	802668 <_strtol_r+0x98>
  802654:	00c00ac4 	movi	r3,43
  802658:	88c0021e 	bne	r17,r3,802664 <_strtol_r+0x94>
  80265c:	14400043 	ldbu	r17,1(r2)
  802660:	14000084 	addi	r16,r2,2
  802664:	002f883a 	mov	r23,zero
  802668:	90000326 	beq	r18,zero,802678 <_strtol_r+0xa8>
  80266c:	00800404 	movi	r2,16
  802670:	90800a1e 	bne	r18,r2,80269c <_strtol_r+0xcc>
  802674:	00005406 	br	8027c8 <_strtol_r+0x1f8>
  802678:	00800c04 	movi	r2,48
  80267c:	8880501e 	bne	r17,r2,8027c0 <_strtol_r+0x1f0>
  802680:	80800003 	ldbu	r2,0(r16)
  802684:	00c01604 	movi	r3,88
  802688:	108037cc 	andi	r2,r2,223
  80268c:	10c0481e 	bne	r2,r3,8027b0 <_strtol_r+0x1e0>
  802690:	84400043 	ldbu	r17,1(r16)
  802694:	04800404 	movi	r18,16
  802698:	84000084 	addi	r16,r16,2
  80269c:	00e00034 	movhi	r3,32768
  8026a0:	18ffffc4 	addi	r3,r3,-1
  8026a4:	b8c7883a 	add	r3,r23,r3
  8026a8:	1809883a 	mov	r4,r3
  8026ac:	900b883a 	mov	r5,r18
  8026b0:	d8c00015 	stw	r3,0(sp)
  8026b4:	0800c1c0 	call	800c1c <__umodsi3>
  8026b8:	d8c00017 	ldw	r3,0(sp)
  8026bc:	900b883a 	mov	r5,r18
  8026c0:	102d883a 	mov	r22,r2
  8026c4:	1809883a 	mov	r4,r3
  8026c8:	0800bb80 	call	800bb8 <__udivsi3>
  8026cc:	100d883a 	mov	r6,r2
  8026d0:	0009883a 	mov	r4,zero
  8026d4:	0005883a 	mov	r2,zero
  8026d8:	01c00044 	movi	r7,1
  8026dc:	023fffc4 	movi	r8,-1
  8026e0:	9c47883a 	add	r3,r19,r17
  8026e4:	18c00043 	ldbu	r3,1(r3)
  8026e8:	1940010c 	andi	r5,r3,4
  8026ec:	28000226 	beq	r5,zero,8026f8 <_strtol_r+0x128>
  8026f0:	8c7ff404 	addi	r17,r17,-48
  8026f4:	00000706 	br	802714 <_strtol_r+0x144>
  8026f8:	18c000cc 	andi	r3,r3,3
  8026fc:	18001a26 	beq	r3,zero,802768 <_strtol_r+0x198>
  802700:	19c00226 	beq	r3,r7,80270c <_strtol_r+0x13c>
  802704:	00c015c4 	movi	r3,87
  802708:	00000106 	br	802710 <_strtol_r+0x140>
  80270c:	00c00dc4 	movi	r3,55
  802710:	88e3c83a 	sub	r17,r17,r3
  802714:	8c80140e 	bge	r17,r18,802768 <_strtol_r+0x198>
  802718:	22001026 	beq	r4,r8,80275c <_strtol_r+0x18c>
  80271c:	30800e36 	bltu	r6,r2,802758 <_strtol_r+0x188>
  802720:	1180011e 	bne	r2,r6,802728 <_strtol_r+0x158>
  802724:	b4400c16 	blt	r22,r17,802758 <_strtol_r+0x188>
  802728:	1009883a 	mov	r4,r2
  80272c:	900b883a 	mov	r5,r18
  802730:	d9800015 	stw	r6,0(sp)
  802734:	d9c00115 	stw	r7,4(sp)
  802738:	da000215 	stw	r8,8(sp)
  80273c:	0801f4c0 	call	801f4c <__mulsi3>
  802740:	8885883a 	add	r2,r17,r2
  802744:	01000044 	movi	r4,1
  802748:	d9800017 	ldw	r6,0(sp)
  80274c:	d9c00117 	ldw	r7,4(sp)
  802750:	da000217 	ldw	r8,8(sp)
  802754:	00000106 	br	80275c <_strtol_r+0x18c>
  802758:	013fffc4 	movi	r4,-1
  80275c:	84400003 	ldbu	r17,0(r16)
  802760:	84000044 	addi	r16,r16,1
  802764:	003fde06 	br	8026e0 <__alt_data_end+0xff8026e0>
  802768:	00ffffc4 	movi	r3,-1
  80276c:	20c0071e 	bne	r4,r3,80278c <_strtol_r+0x1bc>
  802770:	00a00034 	movhi	r2,32768
  802774:	10c5883a 	add	r2,r2,r3
  802778:	00c00884 	movi	r3,34
  80277c:	a8c00015 	stw	r3,0(r21)
  802780:	b885883a 	add	r2,r23,r2
  802784:	e000051e 	bne	fp,zero,80279c <_strtol_r+0x1cc>
  802788:	00001206 	br	8027d4 <_strtol_r+0x204>
  80278c:	b8000126 	beq	r23,zero,802794 <_strtol_r+0x1c4>
  802790:	0085c83a 	sub	r2,zero,r2
  802794:	e0000f26 	beq	fp,zero,8027d4 <_strtol_r+0x204>
  802798:	20000226 	beq	r4,zero,8027a4 <_strtol_r+0x1d4>
  80279c:	843fffc4 	addi	r16,r16,-1
  8027a0:	00000106 	br	8027a8 <_strtol_r+0x1d8>
  8027a4:	a021883a 	mov	r16,r20
  8027a8:	e4000015 	stw	r16,0(fp)
  8027ac:	00000906 	br	8027d4 <_strtol_r+0x204>
  8027b0:	04400c04 	movi	r17,48
  8027b4:	903fb91e 	bne	r18,zero,80269c <__alt_data_end+0xff80269c>
  8027b8:	04800204 	movi	r18,8
  8027bc:	003fb706 	br	80269c <__alt_data_end+0xff80269c>
  8027c0:	04800284 	movi	r18,10
  8027c4:	003fb506 	br	80269c <__alt_data_end+0xff80269c>
  8027c8:	00800c04 	movi	r2,48
  8027cc:	88bfac26 	beq	r17,r2,802680 <__alt_data_end+0xff802680>
  8027d0:	003fb206 	br	80269c <__alt_data_end+0xff80269c>
  8027d4:	dfc00c17 	ldw	ra,48(sp)
  8027d8:	df000b17 	ldw	fp,44(sp)
  8027dc:	ddc00a17 	ldw	r23,40(sp)
  8027e0:	dd800917 	ldw	r22,36(sp)
  8027e4:	dd400817 	ldw	r21,32(sp)
  8027e8:	dd000717 	ldw	r20,28(sp)
  8027ec:	dcc00617 	ldw	r19,24(sp)
  8027f0:	dc800517 	ldw	r18,20(sp)
  8027f4:	dc400417 	ldw	r17,16(sp)
  8027f8:	dc000317 	ldw	r16,12(sp)
  8027fc:	dec00d04 	addi	sp,sp,52
  802800:	f800283a 	ret

00802804 <strtol>:
  802804:	00802034 	movhi	r2,128
  802808:	10913c04 	addi	r2,r2,17648
  80280c:	300f883a 	mov	r7,r6
  802810:	280d883a 	mov	r6,r5
  802814:	200b883a 	mov	r5,r4
  802818:	11000017 	ldw	r4,0(r2)
  80281c:	08025d01 	jmpi	8025d0 <_strtol_r>

00802820 <print_repeat>:
  802820:	defffb04 	addi	sp,sp,-20
  802824:	dc800315 	stw	r18,12(sp)
  802828:	dc400215 	stw	r17,8(sp)
  80282c:	dc000115 	stw	r16,4(sp)
  802830:	dfc00415 	stw	ra,16(sp)
  802834:	2025883a 	mov	r18,r4
  802838:	2823883a 	mov	r17,r5
  80283c:	d9800005 	stb	r6,0(sp)
  802840:	3821883a 	mov	r16,r7
  802844:	04000a0e 	bge	zero,r16,802870 <print_repeat+0x50>
  802848:	88800117 	ldw	r2,4(r17)
  80284c:	01c00044 	movi	r7,1
  802850:	d80d883a 	mov	r6,sp
  802854:	880b883a 	mov	r5,r17
  802858:	9009883a 	mov	r4,r18
  80285c:	103ee83a 	callr	r2
  802860:	843fffc4 	addi	r16,r16,-1
  802864:	103ff726 	beq	r2,zero,802844 <__alt_data_end+0xff802844>
  802868:	00bfffc4 	movi	r2,-1
  80286c:	00000106 	br	802874 <print_repeat+0x54>
  802870:	0005883a 	mov	r2,zero
  802874:	dfc00417 	ldw	ra,16(sp)
  802878:	dc800317 	ldw	r18,12(sp)
  80287c:	dc400217 	ldw	r17,8(sp)
  802880:	dc000117 	ldw	r16,4(sp)
  802884:	dec00504 	addi	sp,sp,20
  802888:	f800283a 	ret

0080288c <___svfprintf_internal_r>:
  80288c:	deffe504 	addi	sp,sp,-108
  802890:	d8c00804 	addi	r3,sp,32
  802894:	ddc01815 	stw	r23,96(sp)
  802898:	dd801715 	stw	r22,92(sp)
  80289c:	dd401615 	stw	r21,88(sp)
  8028a0:	dd001515 	stw	r20,84(sp)
  8028a4:	dcc01415 	stw	r19,80(sp)
  8028a8:	dc801315 	stw	r18,76(sp)
  8028ac:	dc401215 	stw	r17,72(sp)
  8028b0:	dc001115 	stw	r16,68(sp)
  8028b4:	dfc01a15 	stw	ra,104(sp)
  8028b8:	df001915 	stw	fp,100(sp)
  8028bc:	2029883a 	mov	r20,r4
  8028c0:	2823883a 	mov	r17,r5
  8028c4:	382d883a 	mov	r22,r7
  8028c8:	d9800f15 	stw	r6,60(sp)
  8028cc:	0021883a 	mov	r16,zero
  8028d0:	d8000e15 	stw	zero,56(sp)
  8028d4:	d8000a15 	stw	zero,40(sp)
  8028d8:	002b883a 	mov	r21,zero
  8028dc:	0027883a 	mov	r19,zero
  8028e0:	0025883a 	mov	r18,zero
  8028e4:	d8000c15 	stw	zero,48(sp)
  8028e8:	d8000b15 	stw	zero,44(sp)
  8028ec:	002f883a 	mov	r23,zero
  8028f0:	d8c00915 	stw	r3,36(sp)
  8028f4:	d8c00f17 	ldw	r3,60(sp)
  8028f8:	19000003 	ldbu	r4,0(r3)
  8028fc:	20803fcc 	andi	r2,r4,255
  802900:	1080201c 	xori	r2,r2,128
  802904:	10bfe004 	addi	r2,r2,-128
  802908:	10011e26 	beq	r2,zero,802d84 <___svfprintf_internal_r+0x4f8>
  80290c:	00c00044 	movi	r3,1
  802910:	b8c01426 	beq	r23,r3,802964 <___svfprintf_internal_r+0xd8>
  802914:	1dc00216 	blt	r3,r23,802920 <___svfprintf_internal_r+0x94>
  802918:	b8000626 	beq	r23,zero,802934 <___svfprintf_internal_r+0xa8>
  80291c:	00011506 	br	802d74 <___svfprintf_internal_r+0x4e8>
  802920:	01400084 	movi	r5,2
  802924:	b9401d26 	beq	r23,r5,80299c <___svfprintf_internal_r+0x110>
  802928:	014000c4 	movi	r5,3
  80292c:	b9402b26 	beq	r23,r5,8029dc <___svfprintf_internal_r+0x150>
  802930:	00011006 	br	802d74 <___svfprintf_internal_r+0x4e8>
  802934:	01400944 	movi	r5,37
  802938:	1140fc26 	beq	r2,r5,802d2c <___svfprintf_internal_r+0x4a0>
  80293c:	88800117 	ldw	r2,4(r17)
  802940:	d9000005 	stb	r4,0(sp)
  802944:	01c00044 	movi	r7,1
  802948:	d80d883a 	mov	r6,sp
  80294c:	880b883a 	mov	r5,r17
  802950:	a009883a 	mov	r4,r20
  802954:	103ee83a 	callr	r2
  802958:	1000d81e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  80295c:	84000044 	addi	r16,r16,1
  802960:	00010406 	br	802d74 <___svfprintf_internal_r+0x4e8>
  802964:	01400c04 	movi	r5,48
  802968:	1140fa26 	beq	r2,r5,802d54 <___svfprintf_internal_r+0x4c8>
  80296c:	01400944 	movi	r5,37
  802970:	11400a1e 	bne	r2,r5,80299c <___svfprintf_internal_r+0x110>
  802974:	d8800005 	stb	r2,0(sp)
  802978:	88800117 	ldw	r2,4(r17)
  80297c:	b80f883a 	mov	r7,r23
  802980:	d80d883a 	mov	r6,sp
  802984:	880b883a 	mov	r5,r17
  802988:	a009883a 	mov	r4,r20
  80298c:	103ee83a 	callr	r2
  802990:	1000ca1e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  802994:	84000044 	addi	r16,r16,1
  802998:	0000f506 	br	802d70 <___svfprintf_internal_r+0x4e4>
  80299c:	25fff404 	addi	r23,r4,-48
  8029a0:	bdc03fcc 	andi	r23,r23,255
  8029a4:	00c00244 	movi	r3,9
  8029a8:	1dc00936 	bltu	r3,r23,8029d0 <___svfprintf_internal_r+0x144>
  8029ac:	00bfffc4 	movi	r2,-1
  8029b0:	90800426 	beq	r18,r2,8029c4 <___svfprintf_internal_r+0x138>
  8029b4:	01400284 	movi	r5,10
  8029b8:	9009883a 	mov	r4,r18
  8029bc:	0801f4c0 	call	801f4c <__mulsi3>
  8029c0:	00000106 	br	8029c8 <___svfprintf_internal_r+0x13c>
  8029c4:	0005883a 	mov	r2,zero
  8029c8:	b8a5883a 	add	r18,r23,r2
  8029cc:	0000e206 	br	802d58 <___svfprintf_internal_r+0x4cc>
  8029d0:	01400b84 	movi	r5,46
  8029d4:	1140e426 	beq	r2,r5,802d68 <___svfprintf_internal_r+0x4dc>
  8029d8:	05c00084 	movi	r23,2
  8029dc:	213ff404 	addi	r4,r4,-48
  8029e0:	27003fcc 	andi	fp,r4,255
  8029e4:	00c00244 	movi	r3,9
  8029e8:	1f000936 	bltu	r3,fp,802a10 <___svfprintf_internal_r+0x184>
  8029ec:	00bfffc4 	movi	r2,-1
  8029f0:	98800426 	beq	r19,r2,802a04 <___svfprintf_internal_r+0x178>
  8029f4:	01400284 	movi	r5,10
  8029f8:	9809883a 	mov	r4,r19
  8029fc:	0801f4c0 	call	801f4c <__mulsi3>
  802a00:	00000106 	br	802a08 <___svfprintf_internal_r+0x17c>
  802a04:	0005883a 	mov	r2,zero
  802a08:	e0a7883a 	add	r19,fp,r2
  802a0c:	0000d906 	br	802d74 <___svfprintf_internal_r+0x4e8>
  802a10:	00c01b04 	movi	r3,108
  802a14:	10c0d226 	beq	r2,r3,802d60 <___svfprintf_internal_r+0x4d4>
  802a18:	013fffc4 	movi	r4,-1
  802a1c:	99000226 	beq	r19,r4,802a28 <___svfprintf_internal_r+0x19c>
  802a20:	d8000b15 	stw	zero,44(sp)
  802a24:	00000106 	br	802a2c <___svfprintf_internal_r+0x1a0>
  802a28:	04c00044 	movi	r19,1
  802a2c:	01001a44 	movi	r4,105
  802a30:	11001626 	beq	r2,r4,802a8c <___svfprintf_internal_r+0x200>
  802a34:	20800916 	blt	r4,r2,802a5c <___svfprintf_internal_r+0x1d0>
  802a38:	010018c4 	movi	r4,99
  802a3c:	11008826 	beq	r2,r4,802c60 <___svfprintf_internal_r+0x3d4>
  802a40:	01001904 	movi	r4,100
  802a44:	11001126 	beq	r2,r4,802a8c <___svfprintf_internal_r+0x200>
  802a48:	01001604 	movi	r4,88
  802a4c:	1100c81e 	bne	r2,r4,802d70 <___svfprintf_internal_r+0x4e4>
  802a50:	00c00044 	movi	r3,1
  802a54:	d8c00e15 	stw	r3,56(sp)
  802a58:	00001506 	br	802ab0 <___svfprintf_internal_r+0x224>
  802a5c:	01001cc4 	movi	r4,115
  802a60:	11009826 	beq	r2,r4,802cc4 <___svfprintf_internal_r+0x438>
  802a64:	20800416 	blt	r4,r2,802a78 <___svfprintf_internal_r+0x1ec>
  802a68:	01001bc4 	movi	r4,111
  802a6c:	1100c01e 	bne	r2,r4,802d70 <___svfprintf_internal_r+0x4e4>
  802a70:	05400204 	movi	r21,8
  802a74:	00000f06 	br	802ab4 <___svfprintf_internal_r+0x228>
  802a78:	01001d44 	movi	r4,117
  802a7c:	11000d26 	beq	r2,r4,802ab4 <___svfprintf_internal_r+0x228>
  802a80:	01001e04 	movi	r4,120
  802a84:	11000a26 	beq	r2,r4,802ab0 <___svfprintf_internal_r+0x224>
  802a88:	0000b906 	br	802d70 <___svfprintf_internal_r+0x4e4>
  802a8c:	d8c00a17 	ldw	r3,40(sp)
  802a90:	b7000104 	addi	fp,r22,4
  802a94:	18000726 	beq	r3,zero,802ab4 <___svfprintf_internal_r+0x228>
  802a98:	df000d15 	stw	fp,52(sp)
  802a9c:	b5c00017 	ldw	r23,0(r22)
  802aa0:	b800080e 	bge	r23,zero,802ac4 <___svfprintf_internal_r+0x238>
  802aa4:	05efc83a 	sub	r23,zero,r23
  802aa8:	02400044 	movi	r9,1
  802aac:	00000606 	br	802ac8 <___svfprintf_internal_r+0x23c>
  802ab0:	05400404 	movi	r21,16
  802ab4:	b0c00104 	addi	r3,r22,4
  802ab8:	d8c00d15 	stw	r3,52(sp)
  802abc:	b5c00017 	ldw	r23,0(r22)
  802ac0:	d8000a15 	stw	zero,40(sp)
  802ac4:	0013883a 	mov	r9,zero
  802ac8:	d839883a 	mov	fp,sp
  802acc:	b8001726 	beq	r23,zero,802b2c <___svfprintf_internal_r+0x2a0>
  802ad0:	a80b883a 	mov	r5,r21
  802ad4:	b809883a 	mov	r4,r23
  802ad8:	da401015 	stw	r9,64(sp)
  802adc:	0800bb80 	call	800bb8 <__udivsi3>
  802ae0:	a80b883a 	mov	r5,r21
  802ae4:	1009883a 	mov	r4,r2
  802ae8:	102d883a 	mov	r22,r2
  802aec:	0801f4c0 	call	801f4c <__mulsi3>
  802af0:	b885c83a 	sub	r2,r23,r2
  802af4:	00c00244 	movi	r3,9
  802af8:	da401017 	ldw	r9,64(sp)
  802afc:	18800216 	blt	r3,r2,802b08 <___svfprintf_internal_r+0x27c>
  802b00:	10800c04 	addi	r2,r2,48
  802b04:	00000506 	br	802b1c <___svfprintf_internal_r+0x290>
  802b08:	d8c00e17 	ldw	r3,56(sp)
  802b0c:	18000226 	beq	r3,zero,802b18 <___svfprintf_internal_r+0x28c>
  802b10:	10800dc4 	addi	r2,r2,55
  802b14:	00000106 	br	802b1c <___svfprintf_internal_r+0x290>
  802b18:	108015c4 	addi	r2,r2,87
  802b1c:	e0800005 	stb	r2,0(fp)
  802b20:	b02f883a 	mov	r23,r22
  802b24:	e7000044 	addi	fp,fp,1
  802b28:	003fe806 	br	802acc <__alt_data_end+0xff802acc>
  802b2c:	e6efc83a 	sub	r23,fp,sp
  802b30:	9dc5c83a 	sub	r2,r19,r23
  802b34:	0080090e 	bge	zero,r2,802b5c <___svfprintf_internal_r+0x2d0>
  802b38:	e085883a 	add	r2,fp,r2
  802b3c:	01400c04 	movi	r5,48
  802b40:	d8c00917 	ldw	r3,36(sp)
  802b44:	e009883a 	mov	r4,fp
  802b48:	e0c0032e 	bgeu	fp,r3,802b58 <___svfprintf_internal_r+0x2cc>
  802b4c:	e7000044 	addi	fp,fp,1
  802b50:	21400005 	stb	r5,0(r4)
  802b54:	e0bffa1e 	bne	fp,r2,802b40 <__alt_data_end+0xff802b40>
  802b58:	e6efc83a 	sub	r23,fp,sp
  802b5c:	d8c00b17 	ldw	r3,44(sp)
  802b60:	4dd1883a 	add	r8,r9,r23
  802b64:	922dc83a 	sub	r22,r18,r8
  802b68:	18001626 	beq	r3,zero,802bc4 <___svfprintf_internal_r+0x338>
  802b6c:	48000a26 	beq	r9,zero,802b98 <___svfprintf_internal_r+0x30c>
  802b70:	00800b44 	movi	r2,45
  802b74:	d8800805 	stb	r2,32(sp)
  802b78:	88800117 	ldw	r2,4(r17)
  802b7c:	01c00044 	movi	r7,1
  802b80:	d9800804 	addi	r6,sp,32
  802b84:	880b883a 	mov	r5,r17
  802b88:	a009883a 	mov	r4,r20
  802b8c:	103ee83a 	callr	r2
  802b90:	10004a1e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  802b94:	84000044 	addi	r16,r16,1
  802b98:	0580070e 	bge	zero,r22,802bb8 <___svfprintf_internal_r+0x32c>
  802b9c:	b00f883a 	mov	r7,r22
  802ba0:	01800c04 	movi	r6,48
  802ba4:	880b883a 	mov	r5,r17
  802ba8:	a009883a 	mov	r4,r20
  802bac:	08028200 	call	802820 <print_repeat>
  802bb0:	1000421e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  802bb4:	85a1883a 	add	r16,r16,r22
  802bb8:	e02d883a 	mov	r22,fp
  802bbc:	bf2fc83a 	sub	r23,r23,fp
  802bc0:	00002006 	br	802c44 <___svfprintf_internal_r+0x3b8>
  802bc4:	0580090e 	bge	zero,r22,802bec <___svfprintf_internal_r+0x360>
  802bc8:	b00f883a 	mov	r7,r22
  802bcc:	01800804 	movi	r6,32
  802bd0:	880b883a 	mov	r5,r17
  802bd4:	a009883a 	mov	r4,r20
  802bd8:	da401015 	stw	r9,64(sp)
  802bdc:	08028200 	call	802820 <print_repeat>
  802be0:	da401017 	ldw	r9,64(sp)
  802be4:	1000351e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  802be8:	85a1883a 	add	r16,r16,r22
  802bec:	483ff226 	beq	r9,zero,802bb8 <__alt_data_end+0xff802bb8>
  802bf0:	00800b44 	movi	r2,45
  802bf4:	d8800805 	stb	r2,32(sp)
  802bf8:	88800117 	ldw	r2,4(r17)
  802bfc:	01c00044 	movi	r7,1
  802c00:	d9800804 	addi	r6,sp,32
  802c04:	880b883a 	mov	r5,r17
  802c08:	a009883a 	mov	r4,r20
  802c0c:	103ee83a 	callr	r2
  802c10:	10002a1e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  802c14:	84000044 	addi	r16,r16,1
  802c18:	003fe706 	br	802bb8 <__alt_data_end+0xff802bb8>
  802c1c:	b5bfffc4 	addi	r22,r22,-1
  802c20:	b0800003 	ldbu	r2,0(r22)
  802c24:	01c00044 	movi	r7,1
  802c28:	d9800804 	addi	r6,sp,32
  802c2c:	d8800805 	stb	r2,32(sp)
  802c30:	88800117 	ldw	r2,4(r17)
  802c34:	880b883a 	mov	r5,r17
  802c38:	a009883a 	mov	r4,r20
  802c3c:	103ee83a 	callr	r2
  802c40:	10001e1e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  802c44:	8585c83a 	sub	r2,r16,r22
  802c48:	b5c9883a 	add	r4,r22,r23
  802c4c:	e085883a 	add	r2,fp,r2
  802c50:	013ff216 	blt	zero,r4,802c1c <__alt_data_end+0xff802c1c>
  802c54:	1021883a 	mov	r16,r2
  802c58:	dd800d17 	ldw	r22,52(sp)
  802c5c:	00004406 	br	802d70 <___svfprintf_internal_r+0x4e4>
  802c60:	00800044 	movi	r2,1
  802c64:	1480080e 	bge	r2,r18,802c88 <___svfprintf_internal_r+0x3fc>
  802c68:	95ffffc4 	addi	r23,r18,-1
  802c6c:	b80f883a 	mov	r7,r23
  802c70:	01800804 	movi	r6,32
  802c74:	880b883a 	mov	r5,r17
  802c78:	a009883a 	mov	r4,r20
  802c7c:	08028200 	call	802820 <print_repeat>
  802c80:	10000e1e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  802c84:	85e1883a 	add	r16,r16,r23
  802c88:	b0800017 	ldw	r2,0(r22)
  802c8c:	01c00044 	movi	r7,1
  802c90:	d80d883a 	mov	r6,sp
  802c94:	d8800005 	stb	r2,0(sp)
  802c98:	88800117 	ldw	r2,4(r17)
  802c9c:	880b883a 	mov	r5,r17
  802ca0:	a009883a 	mov	r4,r20
  802ca4:	b5c00104 	addi	r23,r22,4
  802ca8:	103ee83a 	callr	r2
  802cac:	1000031e 	bne	r2,zero,802cbc <___svfprintf_internal_r+0x430>
  802cb0:	84000044 	addi	r16,r16,1
  802cb4:	b82d883a 	mov	r22,r23
  802cb8:	00002d06 	br	802d70 <___svfprintf_internal_r+0x4e4>
  802cbc:	00bfffc4 	movi	r2,-1
  802cc0:	00003106 	br	802d88 <___svfprintf_internal_r+0x4fc>
  802cc4:	b5c00017 	ldw	r23,0(r22)
  802cc8:	b7000104 	addi	fp,r22,4
  802ccc:	b809883a 	mov	r4,r23
  802cd0:	08023fc0 	call	8023fc <strlen>
  802cd4:	9091c83a 	sub	r8,r18,r2
  802cd8:	102d883a 	mov	r22,r2
  802cdc:	0200090e 	bge	zero,r8,802d04 <___svfprintf_internal_r+0x478>
  802ce0:	400f883a 	mov	r7,r8
  802ce4:	01800804 	movi	r6,32
  802ce8:	880b883a 	mov	r5,r17
  802cec:	a009883a 	mov	r4,r20
  802cf0:	da001015 	stw	r8,64(sp)
  802cf4:	08028200 	call	802820 <print_repeat>
  802cf8:	da001017 	ldw	r8,64(sp)
  802cfc:	103fef1e 	bne	r2,zero,802cbc <__alt_data_end+0xff802cbc>
  802d00:	8221883a 	add	r16,r16,r8
  802d04:	88800117 	ldw	r2,4(r17)
  802d08:	b00f883a 	mov	r7,r22
  802d0c:	b80d883a 	mov	r6,r23
  802d10:	880b883a 	mov	r5,r17
  802d14:	a009883a 	mov	r4,r20
  802d18:	103ee83a 	callr	r2
  802d1c:	103fe71e 	bne	r2,zero,802cbc <__alt_data_end+0xff802cbc>
  802d20:	85a1883a 	add	r16,r16,r22
  802d24:	e02d883a 	mov	r22,fp
  802d28:	00001106 	br	802d70 <___svfprintf_internal_r+0x4e4>
  802d2c:	00c00044 	movi	r3,1
  802d30:	04ffffc4 	movi	r19,-1
  802d34:	d8000e15 	stw	zero,56(sp)
  802d38:	d8c00a15 	stw	r3,40(sp)
  802d3c:	05400284 	movi	r21,10
  802d40:	9825883a 	mov	r18,r19
  802d44:	d8000c15 	stw	zero,48(sp)
  802d48:	d8000b15 	stw	zero,44(sp)
  802d4c:	182f883a 	mov	r23,r3
  802d50:	00000806 	br	802d74 <___svfprintf_internal_r+0x4e8>
  802d54:	ddc00b15 	stw	r23,44(sp)
  802d58:	05c00084 	movi	r23,2
  802d5c:	00000506 	br	802d74 <___svfprintf_internal_r+0x4e8>
  802d60:	00c00044 	movi	r3,1
  802d64:	d8c00c15 	stw	r3,48(sp)
  802d68:	05c000c4 	movi	r23,3
  802d6c:	00000106 	br	802d74 <___svfprintf_internal_r+0x4e8>
  802d70:	002f883a 	mov	r23,zero
  802d74:	d8c00f17 	ldw	r3,60(sp)
  802d78:	18c00044 	addi	r3,r3,1
  802d7c:	d8c00f15 	stw	r3,60(sp)
  802d80:	003edc06 	br	8028f4 <__alt_data_end+0xff8028f4>
  802d84:	8005883a 	mov	r2,r16
  802d88:	dfc01a17 	ldw	ra,104(sp)
  802d8c:	df001917 	ldw	fp,100(sp)
  802d90:	ddc01817 	ldw	r23,96(sp)
  802d94:	dd801717 	ldw	r22,92(sp)
  802d98:	dd401617 	ldw	r21,88(sp)
  802d9c:	dd001517 	ldw	r20,84(sp)
  802da0:	dcc01417 	ldw	r19,80(sp)
  802da4:	dc801317 	ldw	r18,76(sp)
  802da8:	dc401217 	ldw	r17,72(sp)
  802dac:	dc001117 	ldw	r16,68(sp)
  802db0:	dec01b04 	addi	sp,sp,108
  802db4:	f800283a 	ret

00802db8 <__vfprintf_internal_unused>:
  802db8:	00802034 	movhi	r2,128
  802dbc:	10913c04 	addi	r2,r2,17648
  802dc0:	300f883a 	mov	r7,r6
  802dc4:	280d883a 	mov	r6,r5
  802dc8:	200b883a 	mov	r5,r4
  802dcc:	11000017 	ldw	r4,0(r2)
  802dd0:	080288c1 	jmpi	80288c <___svfprintf_internal_r>

00802dd4 <print_repeat>:
  802dd4:	defffb04 	addi	sp,sp,-20
  802dd8:	dc800315 	stw	r18,12(sp)
  802ddc:	dc400215 	stw	r17,8(sp)
  802de0:	dc000115 	stw	r16,4(sp)
  802de4:	dfc00415 	stw	ra,16(sp)
  802de8:	2025883a 	mov	r18,r4
  802dec:	2823883a 	mov	r17,r5
  802df0:	d9800005 	stb	r6,0(sp)
  802df4:	3821883a 	mov	r16,r7
  802df8:	04000a0e 	bge	zero,r16,802e24 <print_repeat+0x50>
  802dfc:	88800117 	ldw	r2,4(r17)
  802e00:	01c00044 	movi	r7,1
  802e04:	d80d883a 	mov	r6,sp
  802e08:	880b883a 	mov	r5,r17
  802e0c:	9009883a 	mov	r4,r18
  802e10:	103ee83a 	callr	r2
  802e14:	843fffc4 	addi	r16,r16,-1
  802e18:	103ff726 	beq	r2,zero,802df8 <__alt_data_end+0xff802df8>
  802e1c:	00bfffc4 	movi	r2,-1
  802e20:	00000106 	br	802e28 <print_repeat+0x54>
  802e24:	0005883a 	mov	r2,zero
  802e28:	dfc00417 	ldw	ra,16(sp)
  802e2c:	dc800317 	ldw	r18,12(sp)
  802e30:	dc400217 	ldw	r17,8(sp)
  802e34:	dc000117 	ldw	r16,4(sp)
  802e38:	dec00504 	addi	sp,sp,20
  802e3c:	f800283a 	ret

00802e40 <___vfprintf_internal_r>:
  802e40:	deffe504 	addi	sp,sp,-108
  802e44:	d8c00804 	addi	r3,sp,32
  802e48:	ddc01815 	stw	r23,96(sp)
  802e4c:	dd801715 	stw	r22,92(sp)
  802e50:	dd401615 	stw	r21,88(sp)
  802e54:	dd001515 	stw	r20,84(sp)
  802e58:	dcc01415 	stw	r19,80(sp)
  802e5c:	dc801315 	stw	r18,76(sp)
  802e60:	dc401215 	stw	r17,72(sp)
  802e64:	dc001115 	stw	r16,68(sp)
  802e68:	dfc01a15 	stw	ra,104(sp)
  802e6c:	df001915 	stw	fp,100(sp)
  802e70:	2029883a 	mov	r20,r4
  802e74:	2823883a 	mov	r17,r5
  802e78:	382d883a 	mov	r22,r7
  802e7c:	d9800f15 	stw	r6,60(sp)
  802e80:	0021883a 	mov	r16,zero
  802e84:	d8000e15 	stw	zero,56(sp)
  802e88:	d8000a15 	stw	zero,40(sp)
  802e8c:	002b883a 	mov	r21,zero
  802e90:	0027883a 	mov	r19,zero
  802e94:	0025883a 	mov	r18,zero
  802e98:	d8000c15 	stw	zero,48(sp)
  802e9c:	d8000b15 	stw	zero,44(sp)
  802ea0:	002f883a 	mov	r23,zero
  802ea4:	d8c00915 	stw	r3,36(sp)
  802ea8:	d8c00f17 	ldw	r3,60(sp)
  802eac:	19000003 	ldbu	r4,0(r3)
  802eb0:	20803fcc 	andi	r2,r4,255
  802eb4:	1080201c 	xori	r2,r2,128
  802eb8:	10bfe004 	addi	r2,r2,-128
  802ebc:	10011e26 	beq	r2,zero,803338 <___vfprintf_internal_r+0x4f8>
  802ec0:	00c00044 	movi	r3,1
  802ec4:	b8c01426 	beq	r23,r3,802f18 <___vfprintf_internal_r+0xd8>
  802ec8:	1dc00216 	blt	r3,r23,802ed4 <___vfprintf_internal_r+0x94>
  802ecc:	b8000626 	beq	r23,zero,802ee8 <___vfprintf_internal_r+0xa8>
  802ed0:	00011506 	br	803328 <___vfprintf_internal_r+0x4e8>
  802ed4:	01400084 	movi	r5,2
  802ed8:	b9401d26 	beq	r23,r5,802f50 <___vfprintf_internal_r+0x110>
  802edc:	014000c4 	movi	r5,3
  802ee0:	b9402b26 	beq	r23,r5,802f90 <___vfprintf_internal_r+0x150>
  802ee4:	00011006 	br	803328 <___vfprintf_internal_r+0x4e8>
  802ee8:	01400944 	movi	r5,37
  802eec:	1140fc26 	beq	r2,r5,8032e0 <___vfprintf_internal_r+0x4a0>
  802ef0:	88800117 	ldw	r2,4(r17)
  802ef4:	d9000005 	stb	r4,0(sp)
  802ef8:	01c00044 	movi	r7,1
  802efc:	d80d883a 	mov	r6,sp
  802f00:	880b883a 	mov	r5,r17
  802f04:	a009883a 	mov	r4,r20
  802f08:	103ee83a 	callr	r2
  802f0c:	1000d81e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  802f10:	84000044 	addi	r16,r16,1
  802f14:	00010406 	br	803328 <___vfprintf_internal_r+0x4e8>
  802f18:	01400c04 	movi	r5,48
  802f1c:	1140fa26 	beq	r2,r5,803308 <___vfprintf_internal_r+0x4c8>
  802f20:	01400944 	movi	r5,37
  802f24:	11400a1e 	bne	r2,r5,802f50 <___vfprintf_internal_r+0x110>
  802f28:	d8800005 	stb	r2,0(sp)
  802f2c:	88800117 	ldw	r2,4(r17)
  802f30:	b80f883a 	mov	r7,r23
  802f34:	d80d883a 	mov	r6,sp
  802f38:	880b883a 	mov	r5,r17
  802f3c:	a009883a 	mov	r4,r20
  802f40:	103ee83a 	callr	r2
  802f44:	1000ca1e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  802f48:	84000044 	addi	r16,r16,1
  802f4c:	0000f506 	br	803324 <___vfprintf_internal_r+0x4e4>
  802f50:	25fff404 	addi	r23,r4,-48
  802f54:	bdc03fcc 	andi	r23,r23,255
  802f58:	00c00244 	movi	r3,9
  802f5c:	1dc00936 	bltu	r3,r23,802f84 <___vfprintf_internal_r+0x144>
  802f60:	00bfffc4 	movi	r2,-1
  802f64:	90800426 	beq	r18,r2,802f78 <___vfprintf_internal_r+0x138>
  802f68:	01400284 	movi	r5,10
  802f6c:	9009883a 	mov	r4,r18
  802f70:	0801f4c0 	call	801f4c <__mulsi3>
  802f74:	00000106 	br	802f7c <___vfprintf_internal_r+0x13c>
  802f78:	0005883a 	mov	r2,zero
  802f7c:	b8a5883a 	add	r18,r23,r2
  802f80:	0000e206 	br	80330c <___vfprintf_internal_r+0x4cc>
  802f84:	01400b84 	movi	r5,46
  802f88:	1140e426 	beq	r2,r5,80331c <___vfprintf_internal_r+0x4dc>
  802f8c:	05c00084 	movi	r23,2
  802f90:	213ff404 	addi	r4,r4,-48
  802f94:	27003fcc 	andi	fp,r4,255
  802f98:	00c00244 	movi	r3,9
  802f9c:	1f000936 	bltu	r3,fp,802fc4 <___vfprintf_internal_r+0x184>
  802fa0:	00bfffc4 	movi	r2,-1
  802fa4:	98800426 	beq	r19,r2,802fb8 <___vfprintf_internal_r+0x178>
  802fa8:	01400284 	movi	r5,10
  802fac:	9809883a 	mov	r4,r19
  802fb0:	0801f4c0 	call	801f4c <__mulsi3>
  802fb4:	00000106 	br	802fbc <___vfprintf_internal_r+0x17c>
  802fb8:	0005883a 	mov	r2,zero
  802fbc:	e0a7883a 	add	r19,fp,r2
  802fc0:	0000d906 	br	803328 <___vfprintf_internal_r+0x4e8>
  802fc4:	00c01b04 	movi	r3,108
  802fc8:	10c0d226 	beq	r2,r3,803314 <___vfprintf_internal_r+0x4d4>
  802fcc:	013fffc4 	movi	r4,-1
  802fd0:	99000226 	beq	r19,r4,802fdc <___vfprintf_internal_r+0x19c>
  802fd4:	d8000b15 	stw	zero,44(sp)
  802fd8:	00000106 	br	802fe0 <___vfprintf_internal_r+0x1a0>
  802fdc:	04c00044 	movi	r19,1
  802fe0:	01001a44 	movi	r4,105
  802fe4:	11001626 	beq	r2,r4,803040 <___vfprintf_internal_r+0x200>
  802fe8:	20800916 	blt	r4,r2,803010 <___vfprintf_internal_r+0x1d0>
  802fec:	010018c4 	movi	r4,99
  802ff0:	11008826 	beq	r2,r4,803214 <___vfprintf_internal_r+0x3d4>
  802ff4:	01001904 	movi	r4,100
  802ff8:	11001126 	beq	r2,r4,803040 <___vfprintf_internal_r+0x200>
  802ffc:	01001604 	movi	r4,88
  803000:	1100c81e 	bne	r2,r4,803324 <___vfprintf_internal_r+0x4e4>
  803004:	00c00044 	movi	r3,1
  803008:	d8c00e15 	stw	r3,56(sp)
  80300c:	00001506 	br	803064 <___vfprintf_internal_r+0x224>
  803010:	01001cc4 	movi	r4,115
  803014:	11009826 	beq	r2,r4,803278 <___vfprintf_internal_r+0x438>
  803018:	20800416 	blt	r4,r2,80302c <___vfprintf_internal_r+0x1ec>
  80301c:	01001bc4 	movi	r4,111
  803020:	1100c01e 	bne	r2,r4,803324 <___vfprintf_internal_r+0x4e4>
  803024:	05400204 	movi	r21,8
  803028:	00000f06 	br	803068 <___vfprintf_internal_r+0x228>
  80302c:	01001d44 	movi	r4,117
  803030:	11000d26 	beq	r2,r4,803068 <___vfprintf_internal_r+0x228>
  803034:	01001e04 	movi	r4,120
  803038:	11000a26 	beq	r2,r4,803064 <___vfprintf_internal_r+0x224>
  80303c:	0000b906 	br	803324 <___vfprintf_internal_r+0x4e4>
  803040:	d8c00a17 	ldw	r3,40(sp)
  803044:	b7000104 	addi	fp,r22,4
  803048:	18000726 	beq	r3,zero,803068 <___vfprintf_internal_r+0x228>
  80304c:	df000d15 	stw	fp,52(sp)
  803050:	b5c00017 	ldw	r23,0(r22)
  803054:	b800080e 	bge	r23,zero,803078 <___vfprintf_internal_r+0x238>
  803058:	05efc83a 	sub	r23,zero,r23
  80305c:	02400044 	movi	r9,1
  803060:	00000606 	br	80307c <___vfprintf_internal_r+0x23c>
  803064:	05400404 	movi	r21,16
  803068:	b0c00104 	addi	r3,r22,4
  80306c:	d8c00d15 	stw	r3,52(sp)
  803070:	b5c00017 	ldw	r23,0(r22)
  803074:	d8000a15 	stw	zero,40(sp)
  803078:	0013883a 	mov	r9,zero
  80307c:	d839883a 	mov	fp,sp
  803080:	b8001726 	beq	r23,zero,8030e0 <___vfprintf_internal_r+0x2a0>
  803084:	a80b883a 	mov	r5,r21
  803088:	b809883a 	mov	r4,r23
  80308c:	da401015 	stw	r9,64(sp)
  803090:	0800bb80 	call	800bb8 <__udivsi3>
  803094:	a80b883a 	mov	r5,r21
  803098:	1009883a 	mov	r4,r2
  80309c:	102d883a 	mov	r22,r2
  8030a0:	0801f4c0 	call	801f4c <__mulsi3>
  8030a4:	b885c83a 	sub	r2,r23,r2
  8030a8:	00c00244 	movi	r3,9
  8030ac:	da401017 	ldw	r9,64(sp)
  8030b0:	18800216 	blt	r3,r2,8030bc <___vfprintf_internal_r+0x27c>
  8030b4:	10800c04 	addi	r2,r2,48
  8030b8:	00000506 	br	8030d0 <___vfprintf_internal_r+0x290>
  8030bc:	d8c00e17 	ldw	r3,56(sp)
  8030c0:	18000226 	beq	r3,zero,8030cc <___vfprintf_internal_r+0x28c>
  8030c4:	10800dc4 	addi	r2,r2,55
  8030c8:	00000106 	br	8030d0 <___vfprintf_internal_r+0x290>
  8030cc:	108015c4 	addi	r2,r2,87
  8030d0:	e0800005 	stb	r2,0(fp)
  8030d4:	b02f883a 	mov	r23,r22
  8030d8:	e7000044 	addi	fp,fp,1
  8030dc:	003fe806 	br	803080 <__alt_data_end+0xff803080>
  8030e0:	e6efc83a 	sub	r23,fp,sp
  8030e4:	9dc5c83a 	sub	r2,r19,r23
  8030e8:	0080090e 	bge	zero,r2,803110 <___vfprintf_internal_r+0x2d0>
  8030ec:	e085883a 	add	r2,fp,r2
  8030f0:	01400c04 	movi	r5,48
  8030f4:	d8c00917 	ldw	r3,36(sp)
  8030f8:	e009883a 	mov	r4,fp
  8030fc:	e0c0032e 	bgeu	fp,r3,80310c <___vfprintf_internal_r+0x2cc>
  803100:	e7000044 	addi	fp,fp,1
  803104:	21400005 	stb	r5,0(r4)
  803108:	e0bffa1e 	bne	fp,r2,8030f4 <__alt_data_end+0xff8030f4>
  80310c:	e6efc83a 	sub	r23,fp,sp
  803110:	d8c00b17 	ldw	r3,44(sp)
  803114:	4dd1883a 	add	r8,r9,r23
  803118:	922dc83a 	sub	r22,r18,r8
  80311c:	18001626 	beq	r3,zero,803178 <___vfprintf_internal_r+0x338>
  803120:	48000a26 	beq	r9,zero,80314c <___vfprintf_internal_r+0x30c>
  803124:	00800b44 	movi	r2,45
  803128:	d8800805 	stb	r2,32(sp)
  80312c:	88800117 	ldw	r2,4(r17)
  803130:	01c00044 	movi	r7,1
  803134:	d9800804 	addi	r6,sp,32
  803138:	880b883a 	mov	r5,r17
  80313c:	a009883a 	mov	r4,r20
  803140:	103ee83a 	callr	r2
  803144:	10004a1e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  803148:	84000044 	addi	r16,r16,1
  80314c:	0580070e 	bge	zero,r22,80316c <___vfprintf_internal_r+0x32c>
  803150:	b00f883a 	mov	r7,r22
  803154:	01800c04 	movi	r6,48
  803158:	880b883a 	mov	r5,r17
  80315c:	a009883a 	mov	r4,r20
  803160:	0802dd40 	call	802dd4 <print_repeat>
  803164:	1000421e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  803168:	85a1883a 	add	r16,r16,r22
  80316c:	e02d883a 	mov	r22,fp
  803170:	bf2fc83a 	sub	r23,r23,fp
  803174:	00002006 	br	8031f8 <___vfprintf_internal_r+0x3b8>
  803178:	0580090e 	bge	zero,r22,8031a0 <___vfprintf_internal_r+0x360>
  80317c:	b00f883a 	mov	r7,r22
  803180:	01800804 	movi	r6,32
  803184:	880b883a 	mov	r5,r17
  803188:	a009883a 	mov	r4,r20
  80318c:	da401015 	stw	r9,64(sp)
  803190:	0802dd40 	call	802dd4 <print_repeat>
  803194:	da401017 	ldw	r9,64(sp)
  803198:	1000351e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  80319c:	85a1883a 	add	r16,r16,r22
  8031a0:	483ff226 	beq	r9,zero,80316c <__alt_data_end+0xff80316c>
  8031a4:	00800b44 	movi	r2,45
  8031a8:	d8800805 	stb	r2,32(sp)
  8031ac:	88800117 	ldw	r2,4(r17)
  8031b0:	01c00044 	movi	r7,1
  8031b4:	d9800804 	addi	r6,sp,32
  8031b8:	880b883a 	mov	r5,r17
  8031bc:	a009883a 	mov	r4,r20
  8031c0:	103ee83a 	callr	r2
  8031c4:	10002a1e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  8031c8:	84000044 	addi	r16,r16,1
  8031cc:	003fe706 	br	80316c <__alt_data_end+0xff80316c>
  8031d0:	b5bfffc4 	addi	r22,r22,-1
  8031d4:	b0800003 	ldbu	r2,0(r22)
  8031d8:	01c00044 	movi	r7,1
  8031dc:	d9800804 	addi	r6,sp,32
  8031e0:	d8800805 	stb	r2,32(sp)
  8031e4:	88800117 	ldw	r2,4(r17)
  8031e8:	880b883a 	mov	r5,r17
  8031ec:	a009883a 	mov	r4,r20
  8031f0:	103ee83a 	callr	r2
  8031f4:	10001e1e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  8031f8:	8585c83a 	sub	r2,r16,r22
  8031fc:	b5c9883a 	add	r4,r22,r23
  803200:	e085883a 	add	r2,fp,r2
  803204:	013ff216 	blt	zero,r4,8031d0 <__alt_data_end+0xff8031d0>
  803208:	1021883a 	mov	r16,r2
  80320c:	dd800d17 	ldw	r22,52(sp)
  803210:	00004406 	br	803324 <___vfprintf_internal_r+0x4e4>
  803214:	00800044 	movi	r2,1
  803218:	1480080e 	bge	r2,r18,80323c <___vfprintf_internal_r+0x3fc>
  80321c:	95ffffc4 	addi	r23,r18,-1
  803220:	b80f883a 	mov	r7,r23
  803224:	01800804 	movi	r6,32
  803228:	880b883a 	mov	r5,r17
  80322c:	a009883a 	mov	r4,r20
  803230:	0802dd40 	call	802dd4 <print_repeat>
  803234:	10000e1e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  803238:	85e1883a 	add	r16,r16,r23
  80323c:	b0800017 	ldw	r2,0(r22)
  803240:	01c00044 	movi	r7,1
  803244:	d80d883a 	mov	r6,sp
  803248:	d8800005 	stb	r2,0(sp)
  80324c:	88800117 	ldw	r2,4(r17)
  803250:	880b883a 	mov	r5,r17
  803254:	a009883a 	mov	r4,r20
  803258:	b5c00104 	addi	r23,r22,4
  80325c:	103ee83a 	callr	r2
  803260:	1000031e 	bne	r2,zero,803270 <___vfprintf_internal_r+0x430>
  803264:	84000044 	addi	r16,r16,1
  803268:	b82d883a 	mov	r22,r23
  80326c:	00002d06 	br	803324 <___vfprintf_internal_r+0x4e4>
  803270:	00bfffc4 	movi	r2,-1
  803274:	00003106 	br	80333c <___vfprintf_internal_r+0x4fc>
  803278:	b5c00017 	ldw	r23,0(r22)
  80327c:	b7000104 	addi	fp,r22,4
  803280:	b809883a 	mov	r4,r23
  803284:	08023fc0 	call	8023fc <strlen>
  803288:	9091c83a 	sub	r8,r18,r2
  80328c:	102d883a 	mov	r22,r2
  803290:	0200090e 	bge	zero,r8,8032b8 <___vfprintf_internal_r+0x478>
  803294:	400f883a 	mov	r7,r8
  803298:	01800804 	movi	r6,32
  80329c:	880b883a 	mov	r5,r17
  8032a0:	a009883a 	mov	r4,r20
  8032a4:	da001015 	stw	r8,64(sp)
  8032a8:	0802dd40 	call	802dd4 <print_repeat>
  8032ac:	da001017 	ldw	r8,64(sp)
  8032b0:	103fef1e 	bne	r2,zero,803270 <__alt_data_end+0xff803270>
  8032b4:	8221883a 	add	r16,r16,r8
  8032b8:	88800117 	ldw	r2,4(r17)
  8032bc:	b00f883a 	mov	r7,r22
  8032c0:	b80d883a 	mov	r6,r23
  8032c4:	880b883a 	mov	r5,r17
  8032c8:	a009883a 	mov	r4,r20
  8032cc:	103ee83a 	callr	r2
  8032d0:	103fe71e 	bne	r2,zero,803270 <__alt_data_end+0xff803270>
  8032d4:	85a1883a 	add	r16,r16,r22
  8032d8:	e02d883a 	mov	r22,fp
  8032dc:	00001106 	br	803324 <___vfprintf_internal_r+0x4e4>
  8032e0:	00c00044 	movi	r3,1
  8032e4:	04ffffc4 	movi	r19,-1
  8032e8:	d8000e15 	stw	zero,56(sp)
  8032ec:	d8c00a15 	stw	r3,40(sp)
  8032f0:	05400284 	movi	r21,10
  8032f4:	9825883a 	mov	r18,r19
  8032f8:	d8000c15 	stw	zero,48(sp)
  8032fc:	d8000b15 	stw	zero,44(sp)
  803300:	182f883a 	mov	r23,r3
  803304:	00000806 	br	803328 <___vfprintf_internal_r+0x4e8>
  803308:	ddc00b15 	stw	r23,44(sp)
  80330c:	05c00084 	movi	r23,2
  803310:	00000506 	br	803328 <___vfprintf_internal_r+0x4e8>
  803314:	00c00044 	movi	r3,1
  803318:	d8c00c15 	stw	r3,48(sp)
  80331c:	05c000c4 	movi	r23,3
  803320:	00000106 	br	803328 <___vfprintf_internal_r+0x4e8>
  803324:	002f883a 	mov	r23,zero
  803328:	d8c00f17 	ldw	r3,60(sp)
  80332c:	18c00044 	addi	r3,r3,1
  803330:	d8c00f15 	stw	r3,60(sp)
  803334:	003edc06 	br	802ea8 <__alt_data_end+0xff802ea8>
  803338:	8005883a 	mov	r2,r16
  80333c:	dfc01a17 	ldw	ra,104(sp)
  803340:	df001917 	ldw	fp,100(sp)
  803344:	ddc01817 	ldw	r23,96(sp)
  803348:	dd801717 	ldw	r22,92(sp)
  80334c:	dd401617 	ldw	r21,88(sp)
  803350:	dd001517 	ldw	r20,84(sp)
  803354:	dcc01417 	ldw	r19,80(sp)
  803358:	dc801317 	ldw	r18,76(sp)
  80335c:	dc401217 	ldw	r17,72(sp)
  803360:	dc001117 	ldw	r16,68(sp)
  803364:	dec01b04 	addi	sp,sp,108
  803368:	f800283a 	ret

0080336c <__vfprintf_internal>:
  80336c:	00802034 	movhi	r2,128
  803370:	10913c04 	addi	r2,r2,17648
  803374:	300f883a 	mov	r7,r6
  803378:	280d883a 	mov	r6,r5
  80337c:	200b883a 	mov	r5,r4
  803380:	11000017 	ldw	r4,0(r2)
  803384:	0802e401 	jmpi	802e40 <___vfprintf_internal_r>

00803388 <__sfvwrite_small_dev>:
  803388:	2880000b 	ldhu	r2,0(r5)
  80338c:	1080020c 	andi	r2,r2,8
  803390:	10002126 	beq	r2,zero,803418 <__sfvwrite_small_dev+0x90>
  803394:	2880008f 	ldh	r2,2(r5)
  803398:	defffa04 	addi	sp,sp,-24
  80339c:	dc000015 	stw	r16,0(sp)
  8033a0:	dfc00515 	stw	ra,20(sp)
  8033a4:	dd000415 	stw	r20,16(sp)
  8033a8:	dcc00315 	stw	r19,12(sp)
  8033ac:	dc800215 	stw	r18,8(sp)
  8033b0:	dc400115 	stw	r17,4(sp)
  8033b4:	2821883a 	mov	r16,r5
  8033b8:	10001216 	blt	r2,zero,803404 <__sfvwrite_small_dev+0x7c>
  8033bc:	2027883a 	mov	r19,r4
  8033c0:	3025883a 	mov	r18,r6
  8033c4:	3823883a 	mov	r17,r7
  8033c8:	05010004 	movi	r20,1024
  8033cc:	04400b0e 	bge	zero,r17,8033fc <__sfvwrite_small_dev+0x74>
  8033d0:	880f883a 	mov	r7,r17
  8033d4:	a440010e 	bge	r20,r17,8033dc <__sfvwrite_small_dev+0x54>
  8033d8:	01c10004 	movi	r7,1024
  8033dc:	8140008f 	ldh	r5,2(r16)
  8033e0:	900d883a 	mov	r6,r18
  8033e4:	9809883a 	mov	r4,r19
  8033e8:	08035480 	call	803548 <_write_r>
  8033ec:	0080050e 	bge	zero,r2,803404 <__sfvwrite_small_dev+0x7c>
  8033f0:	88a3c83a 	sub	r17,r17,r2
  8033f4:	90a5883a 	add	r18,r18,r2
  8033f8:	003ff406 	br	8033cc <__alt_data_end+0xff8033cc>
  8033fc:	0005883a 	mov	r2,zero
  803400:	00000706 	br	803420 <__sfvwrite_small_dev+0x98>
  803404:	8080000b 	ldhu	r2,0(r16)
  803408:	10801014 	ori	r2,r2,64
  80340c:	8080000d 	sth	r2,0(r16)
  803410:	00bfffc4 	movi	r2,-1
  803414:	00000206 	br	803420 <__sfvwrite_small_dev+0x98>
  803418:	00bfffc4 	movi	r2,-1
  80341c:	f800283a 	ret
  803420:	dfc00517 	ldw	ra,20(sp)
  803424:	dd000417 	ldw	r20,16(sp)
  803428:	dcc00317 	ldw	r19,12(sp)
  80342c:	dc800217 	ldw	r18,8(sp)
  803430:	dc400117 	ldw	r17,4(sp)
  803434:	dc000017 	ldw	r16,0(sp)
  803438:	dec00604 	addi	sp,sp,24
  80343c:	f800283a 	ret

00803440 <__sfvwrite_small_str>:
  803440:	2880000b 	ldhu	r2,0(r5)
  803444:	10c0020c 	andi	r3,r2,8
  803448:	18002026 	beq	r3,zero,8034cc <__sfvwrite_small_str+0x8c>
  80344c:	28c0008f 	ldh	r3,2(r5)
  803450:	defffd04 	addi	sp,sp,-12
  803454:	dc000015 	stw	r16,0(sp)
  803458:	dfc00215 	stw	ra,8(sp)
  80345c:	dc400115 	stw	r17,4(sp)
  803460:	2821883a 	mov	r16,r5
  803464:	1800150e 	bge	r3,zero,8034bc <__sfvwrite_small_str+0x7c>
  803468:	10c0800c 	andi	r3,r2,512
  80346c:	18001326 	beq	r3,zero,8034bc <__sfvwrite_small_str+0x7c>
  803470:	2c400517 	ldw	r17,20(r5)
  803474:	89c0030e 	bge	r17,r7,803484 <__sfvwrite_small_str+0x44>
  803478:	10c0200c 	andi	r3,r2,128
  80347c:	18000326 	beq	r3,zero,80348c <__sfvwrite_small_str+0x4c>
  803480:	00000e06 	br	8034bc <__sfvwrite_small_str+0x7c>
  803484:	3c40010e 	bge	r7,r17,80348c <__sfvwrite_small_str+0x4c>
  803488:	3823883a 	mov	r17,r7
  80348c:	81000417 	ldw	r4,16(r16)
  803490:	300b883a 	mov	r5,r6
  803494:	880d883a 	mov	r6,r17
  803498:	08034e80 	call	8034e8 <memmove>
  80349c:	80800517 	ldw	r2,20(r16)
  8034a0:	1445c83a 	sub	r2,r2,r17
  8034a4:	80800515 	stw	r2,20(r16)
  8034a8:	80800417 	ldw	r2,16(r16)
  8034ac:	1463883a 	add	r17,r2,r17
  8034b0:	84400415 	stw	r17,16(r16)
  8034b4:	0005883a 	mov	r2,zero
  8034b8:	00000606 	br	8034d4 <__sfvwrite_small_str+0x94>
  8034bc:	10801014 	ori	r2,r2,64
  8034c0:	8080000d 	sth	r2,0(r16)
  8034c4:	00bfffc4 	movi	r2,-1
  8034c8:	00000206 	br	8034d4 <__sfvwrite_small_str+0x94>
  8034cc:	00bfffc4 	movi	r2,-1
  8034d0:	f800283a 	ret
  8034d4:	dfc00217 	ldw	ra,8(sp)
  8034d8:	dc400117 	ldw	r17,4(sp)
  8034dc:	dc000017 	ldw	r16,0(sp)
  8034e0:	dec00304 	addi	sp,sp,12
  8034e4:	f800283a 	ret

008034e8 <memmove>:
  8034e8:	2005883a 	mov	r2,r4
  8034ec:	218f883a 	add	r7,r4,r6
  8034f0:	29000236 	bltu	r5,r4,8034fc <memmove+0x14>
  8034f4:	1007883a 	mov	r3,r2
  8034f8:	00000c06 	br	80352c <memmove+0x44>
  8034fc:	2987883a 	add	r3,r5,r6
  803500:	20fffc2e 	bgeu	r4,r3,8034f4 <__alt_data_end+0xff8034f4>
  803504:	380b883a 	mov	r5,r7
  803508:	30cdc83a 	sub	r6,r6,r3
  80350c:	1989883a 	add	r4,r3,r6
  803510:	20000526 	beq	r4,zero,803528 <memmove+0x40>
  803514:	18ffffc4 	addi	r3,r3,-1
  803518:	19000003 	ldbu	r4,0(r3)
  80351c:	297fffc4 	addi	r5,r5,-1
  803520:	29000005 	stb	r4,0(r5)
  803524:	003ff906 	br	80350c <__alt_data_end+0xff80350c>
  803528:	f800283a 	ret
  80352c:	19c00526 	beq	r3,r7,803544 <memmove+0x5c>
  803530:	29000003 	ldbu	r4,0(r5)
  803534:	18c00044 	addi	r3,r3,1
  803538:	29400044 	addi	r5,r5,1
  80353c:	193fffc5 	stb	r4,-1(r3)
  803540:	003ffa06 	br	80352c <__alt_data_end+0xff80352c>
  803544:	f800283a 	ret

00803548 <_write_r>:
  803548:	defffd04 	addi	sp,sp,-12
  80354c:	dc000015 	stw	r16,0(sp)
  803550:	04002034 	movhi	r16,128
  803554:	dc400115 	stw	r17,4(sp)
  803558:	8411ee04 	addi	r16,r16,18360
  80355c:	2023883a 	mov	r17,r4
  803560:	2809883a 	mov	r4,r5
  803564:	300b883a 	mov	r5,r6
  803568:	380d883a 	mov	r6,r7
  80356c:	dfc00215 	stw	ra,8(sp)
  803570:	80000015 	stw	zero,0(r16)
  803574:	08039880 	call	803988 <write>
  803578:	00ffffc4 	movi	r3,-1
  80357c:	10c0031e 	bne	r2,r3,80358c <_write_r+0x44>
  803580:	80c00017 	ldw	r3,0(r16)
  803584:	18000126 	beq	r3,zero,80358c <_write_r+0x44>
  803588:	88c00015 	stw	r3,0(r17)
  80358c:	dfc00217 	ldw	ra,8(sp)
  803590:	dc400117 	ldw	r17,4(sp)
  803594:	dc000017 	ldw	r16,0(sp)
  803598:	dec00304 	addi	sp,sp,12
  80359c:	f800283a 	ret

008035a0 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  8035a0:	00802034 	movhi	r2,128
  8035a4:	10912404 	addi	r2,r2,17552
  8035a8:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  8035ac:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  8035b0:	01002034 	movhi	r4,128
  8035b4:	01800044 	movi	r6,1
  8035b8:	d80b883a 	mov	r5,sp
  8035bc:	21113f04 	addi	r4,r4,17660
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  8035c0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  8035c4:	0803a300 	call	803a30 <altera_avalon_jtag_uart_read>
  8035c8:	0080020e 	bge	zero,r2,8035d4 <alt_getchar+0x34>
        return -1;
    }
    return c;
  8035cc:	d8800007 	ldb	r2,0(sp)
  8035d0:	00000106 	br	8035d8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  8035d4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  8035d8:	dfc00117 	ldw	ra,4(sp)
  8035dc:	dec00204 	addi	sp,sp,8
  8035e0:	f800283a 	ret

008035e4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8035e4:	008007c4 	movi	r2,31
  8035e8:	11002136 	bltu	r2,r4,803670 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8035ec:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8035f0:	00ffff84 	movi	r3,-2
  8035f4:	38c4703a 	and	r2,r7,r3
  8035f8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  8035fc:	200490fa 	slli	r2,r4,3
  803600:	02002034 	movhi	r8,128
  803604:	4211f904 	addi	r8,r8,18404
  803608:	4085883a 	add	r2,r8,r2
  80360c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
  803610:	11400115 	stw	r5,4(r2)
  803614:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  803618:	30000726 	beq	r6,zero,803638 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80361c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803620:	28c6703a 	and	r3,r5,r3
  803624:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  803628:	d0e0b517 	ldw	r3,-32044(gp)
  80362c:	1104983a 	sll	r2,r2,r4
  803630:	10c4b03a 	or	r2,r2,r3
  803634:	00000706 	br	803654 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803638:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80363c:	28c6703a 	and	r3,r5,r3
  803640:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  803644:	1104983a 	sll	r2,r2,r4
  803648:	d0e0b517 	ldw	r3,-32044(gp)
  80364c:	0084303a 	nor	r2,zero,r2
  803650:	10c4703a 	and	r2,r2,r3
  803654:	d0a0b515 	stw	r2,-32044(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803658:	d0a0b517 	ldw	r2,-32044(gp)
  80365c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803660:	2801703a 	wrctl	status,r5
  803664:	3801703a 	wrctl	status,r7
  803668:	0005883a 	mov	r2,zero
  80366c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  803670:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  803674:	f800283a 	ret

00803678 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803678:	deffff04 	addi	sp,sp,-4
  80367c:	01002034 	movhi	r4,128
  803680:	01402034 	movhi	r5,128
  803684:	dfc00015 	stw	ra,0(sp)
  803688:	2110a704 	addi	r4,r4,17052
  80368c:	29514604 	addi	r5,r5,17688

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  803690:	2140061e 	bne	r4,r5,8036ac <alt_load+0x34>
  803694:	01002034 	movhi	r4,128
  803698:	01402034 	movhi	r5,128
  80369c:	21000804 	addi	r4,r4,32
  8036a0:	29400804 	addi	r5,r5,32
  8036a4:	2140121e 	bne	r4,r5,8036f0 <alt_load+0x78>
  8036a8:	00000b06 	br	8036d8 <alt_load+0x60>
  8036ac:	00c02034 	movhi	r3,128
  8036b0:	18d14604 	addi	r3,r3,17688
  8036b4:	1907c83a 	sub	r3,r3,r4
  8036b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
  8036bc:	10fff526 	beq	r2,r3,803694 <__alt_data_end+0xff803694>
    {
      *to++ = *from++;
  8036c0:	114f883a 	add	r7,r2,r5
  8036c4:	39c00017 	ldw	r7,0(r7)
  8036c8:	110d883a 	add	r6,r2,r4
  8036cc:	10800104 	addi	r2,r2,4
  8036d0:	31c00015 	stw	r7,0(r6)
  8036d4:	003ff906 	br	8036bc <__alt_data_end+0xff8036bc>
  8036d8:	01002034 	movhi	r4,128
  8036dc:	01402034 	movhi	r5,128
  8036e0:	210f9504 	addi	r4,r4,15956
  8036e4:	294f9504 	addi	r5,r5,15956

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8036e8:	2140101e 	bne	r4,r5,80372c <alt_load+0xb4>
  8036ec:	00000b06 	br	80371c <alt_load+0xa4>
  8036f0:	00c02034 	movhi	r3,128
  8036f4:	18c06004 	addi	r3,r3,384
  8036f8:	1907c83a 	sub	r3,r3,r4
  8036fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
  803700:	10fff526 	beq	r2,r3,8036d8 <__alt_data_end+0xff8036d8>
    {
      *to++ = *from++;
  803704:	114f883a 	add	r7,r2,r5
  803708:	39c00017 	ldw	r7,0(r7)
  80370c:	110d883a 	add	r6,r2,r4
  803710:	10800104 	addi	r2,r2,4
  803714:	31c00015 	stw	r7,0(r6)
  803718:	003ff906 	br	803700 <__alt_data_end+0xff803700>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80371c:	0803cb80 	call	803cb8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  803720:	dfc00017 	ldw	ra,0(sp)
  803724:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  803728:	0803da41 	jmpi	803da4 <alt_icache_flush_all>
  80372c:	00c02034 	movhi	r3,128
  803730:	18d0a704 	addi	r3,r3,17052
  803734:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  803738:	0005883a 	mov	r2,zero
  {
    while( to != end )
  80373c:	18bff726 	beq	r3,r2,80371c <__alt_data_end+0xff80371c>
    {
      *to++ = *from++;
  803740:	114f883a 	add	r7,r2,r5
  803744:	39c00017 	ldw	r7,0(r7)
  803748:	110d883a 	add	r6,r2,r4
  80374c:	10800104 	addi	r2,r2,4
  803750:	31c00015 	stw	r7,0(r6)
  803754:	003ff906 	br	80373c <__alt_data_end+0xff80373c>

00803758 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803758:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80375c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803760:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803764:	08039e80 	call	8039e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803768:	0803a080 	call	803a08 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  80376c:	d1a0b617 	ldw	r6,-32040(gp)
  803770:	d160b717 	ldw	r5,-32036(gp)
  803774:	d120b817 	ldw	r4,-32032(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  803778:	dfc00017 	ldw	ra,0(sp)
  80377c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  803780:	08009b41 	jmpi	8009b4 <main>

00803784 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  803784:	defff204 	addi	sp,sp,-56
  803788:	2005883a 	mov	r2,r4
  80378c:	dfc00a15 	stw	ra,40(sp)
  803790:	df000915 	stw	fp,36(sp)
  803794:	ddc00815 	stw	r23,32(sp)
  803798:	dd800715 	stw	r22,28(sp)
  80379c:	dd400615 	stw	r21,24(sp)
  8037a0:	dd000515 	stw	r20,20(sp)
  8037a4:	dcc00415 	stw	r19,16(sp)
  8037a8:	dc800315 	stw	r18,12(sp)
  8037ac:	dc400215 	stw	r17,8(sp)
  8037b0:	dc000115 	stw	r16,4(sp)
  8037b4:	d9400b15 	stw	r5,44(sp)
  8037b8:	d9800c15 	stw	r6,48(sp)
  8037bc:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8037c0:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  8037c4:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  8037c8:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  8037cc:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  8037d0:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8037d4:	11000007 	ldb	r4,0(r2)
  8037d8:	20003a26 	beq	r4,zero,8038c4 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8037dc:	24000226 	beq	r4,r16,8037e8 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8037e0:	14400044 	addi	r17,r2,1
  8037e4:	00001406 	br	803838 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  8037e8:	14400084 	addi	r17,r2,2
  8037ec:	10800047 	ldb	r2,1(r2)
  8037f0:	10003426 	beq	r2,zero,8038c4 <alt_printf+0x140>
            {
                if (c == '%')
  8037f4:	1400021e 	bne	r2,r16,803800 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  8037f8:	8009883a 	mov	r4,r16
  8037fc:	00000e06 	br	803838 <alt_printf+0xb4>
                } 
                else if (c == 'c')
  803800:	1480051e 	bne	r2,r18,803818 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  803804:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  803808:	ad800104 	addi	r22,r21,4
  80380c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  803810:	08038f40 	call	8038f4 <alt_putchar>
  803814:	00002906 	br	8038bc <alt_printf+0x138>
                }
                else if (c == 'x')
  803818:	14c0201e 	bne	r2,r19,80389c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  80381c:	adc00017 	ldw	r23,0(r21)
  803820:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  803824:	b8000326 	beq	r23,zero,803834 <alt_printf+0xb0>
  803828:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  80382c:	00c003c4 	movi	r3,15
  803830:	00000306 	br	803840 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  803834:	01000c04 	movi	r4,48
  803838:	08038f40 	call	8038f4 <alt_putchar>
                        continue;
  80383c:	00001f06 	br	8038bc <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  803840:	1d84983a 	sll	r2,r3,r22
  803844:	15c4703a 	and	r2,r2,r23
  803848:	1000021e 	bne	r2,zero,803854 <alt_printf+0xd0>
                        digit_shift -= 4;
  80384c:	b5bfff04 	addi	r22,r22,-4
  803850:	003ffb06 	br	803840 <__alt_data_end+0xff803840>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  803854:	070003c4 	movi	fp,15
                        if (digit <= 9)
  803858:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80385c:	b0001716 	blt	r22,zero,8038bc <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  803860:	e588983a 	sll	r4,fp,r22
  803864:	25c8703a 	and	r4,r4,r23
  803868:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  80386c:	19000236 	bltu	r3,r4,803878 <alt_printf+0xf4>
                            c = '0' + digit;
  803870:	21000c04 	addi	r4,r4,48
  803874:	00000106 	br	80387c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  803878:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  80387c:	21003fcc 	andi	r4,r4,255
  803880:	2100201c 	xori	r4,r4,128
  803884:	213fe004 	addi	r4,r4,-128
  803888:	d8c00015 	stw	r3,0(sp)
  80388c:	08038f40 	call	8038f4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  803890:	b5bfff04 	addi	r22,r22,-4
  803894:	d8c00017 	ldw	r3,0(sp)
  803898:	003ff006 	br	80385c <__alt_data_end+0xff80385c>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80389c:	1500071e 	bne	r2,r20,8038bc <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  8038a0:	ad800017 	ldw	r22,0(r21)
  8038a4:	ad400104 	addi	r21,r21,4

                    while(*s)
  8038a8:	b1000007 	ldb	r4,0(r22)
  8038ac:	20000326 	beq	r4,zero,8038bc <alt_printf+0x138>
                      alt_putchar(*s++);
  8038b0:	b5800044 	addi	r22,r22,1
  8038b4:	08038f40 	call	8038f4 <alt_putchar>
  8038b8:	003ffb06 	br	8038a8 <__alt_data_end+0xff8038a8>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  8038bc:	8805883a 	mov	r2,r17
  8038c0:	003fc406 	br	8037d4 <__alt_data_end+0xff8037d4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  8038c4:	dfc00a17 	ldw	ra,40(sp)
  8038c8:	df000917 	ldw	fp,36(sp)
  8038cc:	ddc00817 	ldw	r23,32(sp)
  8038d0:	dd800717 	ldw	r22,28(sp)
  8038d4:	dd400617 	ldw	r21,24(sp)
  8038d8:	dd000517 	ldw	r20,20(sp)
  8038dc:	dcc00417 	ldw	r19,16(sp)
  8038e0:	dc800317 	ldw	r18,12(sp)
  8038e4:	dc400217 	ldw	r17,8(sp)
  8038e8:	dc000117 	ldw	r16,4(sp)
  8038ec:	dec00e04 	addi	sp,sp,56
  8038f0:	f800283a 	ret

008038f4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8038f4:	defffd04 	addi	sp,sp,-12
  8038f8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  8038fc:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  803900:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  803904:	01002034 	movhi	r4,128
  803908:	000f883a 	mov	r7,zero
  80390c:	01800044 	movi	r6,1
  803910:	d80b883a 	mov	r5,sp
  803914:	21113f04 	addi	r4,r4,17660
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  803918:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  80391c:	0803a8c0 	call	803a8c <altera_avalon_jtag_uart_write>
  803920:	00ffffc4 	movi	r3,-1
  803924:	10c00126 	beq	r2,r3,80392c <alt_putchar+0x38>
        return -1;
    }
    return c;
  803928:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
  80392c:	dfc00217 	ldw	ra,8(sp)
  803930:	dc000117 	ldw	r16,4(sp)
  803934:	dec00304 	addi	sp,sp,12
  803938:	f800283a 	ret

0080393c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80393c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803940:	00bfff84 	movi	r2,-2
  803944:	2884703a 	and	r2,r5,r2
  803948:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80394c:	d0a00417 	ldw	r2,-32752(gp)
  803950:	00ffff04 	movi	r3,-4
  803954:	108000c4 	addi	r2,r2,3
  803958:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80395c:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803960:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  803964:	1109883a 	add	r4,r2,r4
  803968:	18c00004 	addi	r3,r3,0
  80396c:	1900032e 	bgeu	r3,r4,80397c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803970:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  803974:	00bfffc4 	movi	r2,-1
  803978:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  80397c:	d1200415 	stw	r4,-32752(gp)
  803980:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  803984:	f800283a 	ret

00803988 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
  803988:	00800044 	movi	r2,1
  80398c:	20800226 	beq	r4,r2,803998 <write+0x10>
  803990:	00800084 	movi	r2,2
  803994:	2080041e 	bne	r4,r2,8039a8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
  803998:	01002034 	movhi	r4,128
  80399c:	000f883a 	mov	r7,zero
  8039a0:	21113f04 	addi	r4,r4,17660
  8039a4:	0803a8c1 	jmpi	803a8c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8039a8:	d0a00b17 	ldw	r2,-32724(gp)
  8039ac:	10000926 	beq	r2,zero,8039d4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8039b0:	deffff04 	addi	sp,sp,-4
  8039b4:	dfc00015 	stw	ra,0(sp)
  8039b8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  8039bc:	00c01444 	movi	r3,81
  8039c0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  8039c4:	00bfffc4 	movi	r2,-1
  8039c8:	dfc00017 	ldw	ra,0(sp)
  8039cc:	dec00104 	addi	sp,sp,4
  8039d0:	f800283a 	ret
  8039d4:	d0a0b404 	addi	r2,gp,-32048
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  8039d8:	00c01444 	movi	r3,81
  8039dc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  8039e0:	00bfffc4 	movi	r2,-1
  8039e4:	f800283a 	ret

008039e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8039e8:	deffff04 	addi	sp,sp,-4
  8039ec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8039f0:	0803da80 	call	803da8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8039f4:	00800044 	movi	r2,1
  8039f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8039fc:	dfc00017 	ldw	ra,0(sp)
  803a00:	dec00104 	addi	sp,sp,4
  803a04:	f800283a 	ret

00803a08 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
  803a08:	00804034 	movhi	r2,256
  803a0c:	10841004 	addi	r2,r2,4160
  803a10:	d0a0ba15 	stw	r2,-32024(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803a14:	01002034 	movhi	r4,128
  803a18:	0081c9f4 	movhi	r2,1831
  803a1c:	10838004 	addi	r2,r2,3584
  803a20:	d1600704 	addi	r5,gp,-32740
  803a24:	21111904 	addi	r4,r4,17508
  803a28:	d0a0b915 	stw	r2,-32028(gp)
  803a2c:	0803cc41 	jmpi	803cc4 <alt_dev_llist_insert>

00803a30 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  803a30:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  803a34:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  803a38:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  803a3c:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  803a40:	11800b2e 	bgeu	r2,r6,803a70 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  803a44:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  803a48:	1a60000c 	andi	r9,r3,32768
  803a4c:	48000326 	beq	r9,zero,803a5c <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  803a50:	10c00005 	stb	r3,0(r2)
  803a54:	10800044 	addi	r2,r2,1
  803a58:	003ff906 	br	803a40 <__alt_data_end+0xff803a40>
    else if (ptr != buffer)
  803a5c:	11400226 	beq	r2,r5,803a68 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  803a60:	1145c83a 	sub	r2,r2,r5
  803a64:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  803a68:	403ff526 	beq	r8,zero,803a40 <__alt_data_end+0xff803a40>
  803a6c:	00000106 	br	803a74 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  803a70:	117ffb1e 	bne	r2,r5,803a60 <__alt_data_end+0xff803a60>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  803a74:	39d0000c 	andi	r7,r7,16384
  803a78:	3800021e 	bne	r7,zero,803a84 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  803a7c:	00bffec4 	movi	r2,-5
  803a80:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  803a84:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  803a88:	f800283a 	ret

00803a8c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  803a8c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  803a90:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  803a94:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  803a98:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  803a9c:	2980072e 	bgeu	r5,r6,803abc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  803aa0:	38c00037 	ldwio	r3,0(r7)
  803aa4:	18ffffec 	andhi	r3,r3,65535
  803aa8:	183ffc26 	beq	r3,zero,803a9c <__alt_data_end+0xff803a9c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  803aac:	28c00007 	ldb	r3,0(r5)
  803ab0:	20c00035 	stwio	r3,0(r4)
  803ab4:	29400044 	addi	r5,r5,1
  803ab8:	003ff806 	br	803a9c <__alt_data_end+0xff803a9c>

  return count;
}
  803abc:	f800283a 	ret

00803ac0 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  803ac0:	d0e0b917 	ldw	r3,-32028(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  803ac4:	d0a0ba17 	ldw	r2,-32024(gp)

  if (!altera_avalon_timer_ts_freq)
  803ac8:	18000c26 	beq	r3,zero,803afc <alt_timestamp_start+0x3c>
    return -1;
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  803acc:	11000104 	addi	r4,r2,4
  803ad0:	00c00204 	movi	r3,8
  803ad4:	20c00035 	stwio	r3,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  803ad8:	00ffffd4 	movui	r3,65535
  803adc:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  803ae0:	10c00335 	stwio	r3,12(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  803ae4:	10c00435 	stwio	r3,16(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  803ae8:	10c00535 	stwio	r3,20(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  803aec:	00800104 	movi	r2,4
  803af0:	20800035 	stwio	r2,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  803af4:	0005883a 	mov	r2,zero
  803af8:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
  803afc:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
  803b00:	f800283a 	ret

00803b04 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  803b04:	d0a0b917 	ldw	r2,-32028(gp)
  803b08:	10000e26 	beq	r2,zero,803b44 <alt_timestamp+0x40>
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  803b0c:	d120ba17 	ldw	r4,-32024(gp)
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  803b10:	20800604 	addi	r2,r4,24
  803b14:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  803b18:	11400037 	ldwio	r5,0(r2)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  803b1c:	20800737 	ldwio	r2,28(r4)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  803b20:	20c00837 	ldwio	r3,32(r4)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  803b24:	21000937 	ldwio	r4,36(r4)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  803b28:	2008943a 	slli	r4,r4,16
  803b2c:	1004943a 	slli	r2,r2,16
  803b30:	297fffcc 	andi	r5,r5,65535
  803b34:	18ffffcc 	andi	r3,r3,65535
  803b38:	2884303a 	nor	r2,r5,r2
  803b3c:	20c6303a 	nor	r3,r4,r3
  803b40:	f800283a 	ret
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
  803b44:	00bfffc4 	movi	r2,-1
  803b48:	1007883a 	mov	r3,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
  803b4c:	f800283a 	ret

00803b50 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
  803b50:	d0a0b917 	ldw	r2,-32028(gp)
  803b54:	f800283a 	ret

00803b58 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
  803b58:	d1600704 	addi	r5,gp,-32740
  803b5c:	0803d301 	jmpi	803d30 <alt_find_dev>

00803b60 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
  803b60:	20800a17 	ldw	r2,40(r4)
  803b64:	10800023 	ldbuio	r2,0(r2)
  803b68:	28800005 	stb	r2,0(r5)

	return 0;
}
  803b6c:	0005883a 	mov	r2,zero
  803b70:	f800283a 	ret

00803b74 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803b74:	20800a17 	ldw	r2,40(r4)
  803b78:	29400fcc 	andi	r5,r5,63
  803b7c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  803b80:	20800a17 	ldw	r2,40(r4)
  803b84:	10800063 	ldbuio	r2,1(r2)
  803b88:	30800005 	stb	r2,0(r6)

	return 0;
}
  803b8c:	0005883a 	mov	r2,zero
  803b90:	f800283a 	ret

00803b94 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803b94:	20800a17 	ldw	r2,40(r4)
  803b98:	29400fcc 	andi	r5,r5,63
  803b9c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
  803ba0:	20800a17 	ldw	r2,40(r4)
  803ba4:	11800065 	stbio	r6,1(r2)

	return 0;
}
  803ba8:	0005883a 	mov	r2,zero
  803bac:	f800283a 	ret

00803bb0 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803bb0:	20800a17 	ldw	r2,40(r4)
  803bb4:	00c00c84 	movi	r3,50
  803bb8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  803bbc:	20800a17 	ldw	r2,40(r4)
  803bc0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803bc4:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  803bc8:	10803fcc 	andi	r2,r2,255
  803bcc:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803bd0:	20800a17 	ldw	r2,40(r4)
  803bd4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  803bd8:	20800a17 	ldw	r2,40(r4)
  803bdc:	10800063 	ldbuio	r2,1(r2)
  803be0:	10803fcc 	andi	r2,r2,255
  803be4:	1006923a 	slli	r3,r2,8
  803be8:	28800017 	ldw	r2,0(r5)
  803bec:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
  803bf0:	10e0000c 	andi	r3,r2,32768
  803bf4:	18000126 	beq	r3,zero,803bfc <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
  803bf8:	10bffff4 	orhi	r2,r2,65535
  803bfc:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  803c00:	0005883a 	mov	r2,zero
  803c04:	f800283a 	ret

00803c08 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803c08:	20800a17 	ldw	r2,40(r4)
  803c0c:	00c00d04 	movi	r3,52
  803c10:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  803c14:	20800a17 	ldw	r2,40(r4)
  803c18:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803c1c:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  803c20:	10803fcc 	andi	r2,r2,255
  803c24:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803c28:	20800a17 	ldw	r2,40(r4)
  803c2c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  803c30:	20800a17 	ldw	r2,40(r4)
  803c34:	10800063 	ldbuio	r2,1(r2)
  803c38:	10803fcc 	andi	r2,r2,255
  803c3c:	1006923a 	slli	r3,r2,8
  803c40:	28800017 	ldw	r2,0(r5)
  803c44:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
  803c48:	10e0000c 	andi	r3,r2,32768
  803c4c:	18000126 	beq	r3,zero,803c54 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
  803c50:	10bffff4 	orhi	r2,r2,65535
  803c54:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  803c58:	0005883a 	mov	r2,zero
  803c5c:	f800283a 	ret

00803c60 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803c60:	20800a17 	ldw	r2,40(r4)
  803c64:	00c00d84 	movi	r3,54
  803c68:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  803c6c:	20800a17 	ldw	r2,40(r4)
  803c70:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803c74:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  803c78:	10803fcc 	andi	r2,r2,255
  803c7c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  803c80:	20800a17 	ldw	r2,40(r4)
  803c84:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  803c88:	20800a17 	ldw	r2,40(r4)
  803c8c:	10800063 	ldbuio	r2,1(r2)
  803c90:	10803fcc 	andi	r2,r2,255
  803c94:	1006923a 	slli	r3,r2,8
  803c98:	28800017 	ldw	r2,0(r5)
  803c9c:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
  803ca0:	10e0000c 	andi	r3,r2,32768
  803ca4:	18000126 	beq	r3,zero,803cac <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
  803ca8:	10bffff4 	orhi	r2,r2,65535
  803cac:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  803cb0:	0005883a 	mov	r2,zero
  803cb4:	f800283a 	ret

00803cb8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  803cb8:	f800283a 	ret

00803cbc <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  803cbc:	3005883a 	mov	r2,r6
  803cc0:	f800283a 	ret

00803cc4 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  803cc4:	20000226 	beq	r4,zero,803cd0 <alt_dev_llist_insert+0xc>
  803cc8:	20800217 	ldw	r2,8(r4)
  803ccc:	1000101e 	bne	r2,zero,803d10 <alt_dev_llist_insert+0x4c>
  803cd0:	d0a00b17 	ldw	r2,-32724(gp)
  803cd4:	10000926 	beq	r2,zero,803cfc <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  803cd8:	deffff04 	addi	sp,sp,-4
  803cdc:	dfc00015 	stw	ra,0(sp)
  803ce0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  803ce4:	00c00584 	movi	r3,22
  803ce8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  803cec:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  803cf0:	dfc00017 	ldw	ra,0(sp)
  803cf4:	dec00104 	addi	sp,sp,4
  803cf8:	f800283a 	ret
  803cfc:	d0a0b404 	addi	r2,gp,-32048
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  803d00:	00c00584 	movi	r3,22
  803d04:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  803d08:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  803d0c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  803d10:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803d14:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  803d18:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  803d1c:	28800017 	ldw	r2,0(r5)
  803d20:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  803d24:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  803d28:	0005883a 	mov	r2,zero
  803d2c:	f800283a 	ret

00803d30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  803d30:	defffb04 	addi	sp,sp,-20
  803d34:	dcc00315 	stw	r19,12(sp)
  803d38:	dc800215 	stw	r18,8(sp)
  803d3c:	dc400115 	stw	r17,4(sp)
  803d40:	dc000015 	stw	r16,0(sp)
  803d44:	dfc00415 	stw	ra,16(sp)
  803d48:	2027883a 	mov	r19,r4
  803d4c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  803d50:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  803d54:	08023fc0 	call	8023fc <strlen>
  803d58:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803d5c:	84400726 	beq	r16,r17,803d7c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803d60:	81000217 	ldw	r4,8(r16)
  803d64:	900d883a 	mov	r6,r18
  803d68:	980b883a 	mov	r5,r19
  803d6c:	0803e240 	call	803e24 <memcmp>
  803d70:	10000426 	beq	r2,zero,803d84 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  803d74:	84000017 	ldw	r16,0(r16)
  803d78:	003ff806 	br	803d5c <__alt_data_end+0xff803d5c>
  }
  
  /* No match found */
  
  return NULL;
  803d7c:	0005883a 	mov	r2,zero
  803d80:	00000106 	br	803d88 <alt_find_dev+0x58>
  803d84:	8005883a 	mov	r2,r16
}
  803d88:	dfc00417 	ldw	ra,16(sp)
  803d8c:	dcc00317 	ldw	r19,12(sp)
  803d90:	dc800217 	ldw	r18,8(sp)
  803d94:	dc400117 	ldw	r17,4(sp)
  803d98:	dc000017 	ldw	r16,0(sp)
  803d9c:	dec00504 	addi	sp,sp,20
  803da0:	f800283a 	ret

00803da4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  803da4:	f800283a 	ret

00803da8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  803da8:	000170fa 	wrctl	ienable,zero
  803dac:	f800283a 	ret

00803db0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  803db0:	213ffe84 	addi	r4,r4,-6
  803db4:	008003c4 	movi	r2,15
  803db8:	11001636 	bltu	r2,r4,803e14 <alt_exception_cause_generated_bad_addr+0x64>
  803dbc:	200890ba 	slli	r4,r4,2
  803dc0:	00802034 	movhi	r2,128
  803dc4:	108f7504 	addi	r2,r2,15828
  803dc8:	2089883a 	add	r4,r4,r2
  803dcc:	20800017 	ldw	r2,0(r4)
  803dd0:	1000683a 	jmp	r2
  803dd4:	00803e1c 	xori	r2,zero,248
  803dd8:	00803e1c 	xori	r2,zero,248
  803ddc:	00803e14 	movui	r2,248
  803de0:	00803e14 	movui	r2,248
  803de4:	00803e14 	movui	r2,248
  803de8:	00803e1c 	xori	r2,zero,248
  803dec:	00803e14 	movui	r2,248
  803df0:	00803e14 	movui	r2,248
  803df4:	00803e1c 	xori	r2,zero,248
  803df8:	00803e1c 	xori	r2,zero,248
  803dfc:	00803e14 	movui	r2,248
  803e00:	00803e1c 	xori	r2,zero,248
  803e04:	00803e14 	movui	r2,248
  803e08:	00803e14 	movui	r2,248
  803e0c:	00803e14 	movui	r2,248
  803e10:	00803e1c 	xori	r2,zero,248
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  803e14:	0005883a 	mov	r2,zero
  803e18:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  803e1c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  803e20:	f800283a 	ret

00803e24 <memcmp>:
  803e24:	218d883a 	add	r6,r4,r6
  803e28:	21800826 	beq	r4,r6,803e4c <memcmp+0x28>
  803e2c:	20800003 	ldbu	r2,0(r4)
  803e30:	28c00003 	ldbu	r3,0(r5)
  803e34:	10c00226 	beq	r2,r3,803e40 <memcmp+0x1c>
  803e38:	10c5c83a 	sub	r2,r2,r3
  803e3c:	f800283a 	ret
  803e40:	21000044 	addi	r4,r4,1
  803e44:	29400044 	addi	r5,r5,1
  803e48:	003ff706 	br	803e28 <__alt_data_end+0xff803e28>
  803e4c:	0005883a 	mov	r2,zero
  803e50:	f800283a 	ret
