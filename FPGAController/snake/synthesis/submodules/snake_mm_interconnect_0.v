// snake_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module snake_mm_interconnect_0 (
		input  wire        altpll_c0_clk,                                                     //                                             altpll_c0.clk
		input  wire        clk_clk_clk,                                                       //                                               clk_clk.clk
		input  wire        altpll_inclk_interface_reset_reset_bridge_in_reset_reset,          //    altpll_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        cpu_reset_reset_bridge_in_reset_reset,                             //                       cpu_reset_reset_bridge_in_reset.reset
		input  wire [24:0] cpu_data_master_address,                                           //                                       cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                                       //                                                      .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                                        //                                                      .byteenable
		input  wire        cpu_data_master_read,                                              //                                                      .read
		output wire [31:0] cpu_data_master_readdata,                                          //                                                      .readdata
		input  wire        cpu_data_master_write,                                             //                                                      .write
		input  wire [31:0] cpu_data_master_writedata,                                         //                                                      .writedata
		input  wire        cpu_data_master_debugaccess,                                       //                                                      .debugaccess
		input  wire [24:0] cpu_instruction_master_address,                                    //                                cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,                                //                                                      .waitrequest
		input  wire        cpu_instruction_master_read,                                       //                                                      .read
		output wire [31:0] cpu_instruction_master_readdata,                                   //                                                      .readdata
		output wire [2:0]  acc_timer_s1_address,                                              //                                          acc_timer_s1.address
		output wire        acc_timer_s1_write,                                                //                                                      .write
		input  wire [15:0] acc_timer_s1_readdata,                                             //                                                      .readdata
		output wire [15:0] acc_timer_s1_writedata,                                            //                                                      .writedata
		output wire        acc_timer_s1_chipselect,                                           //                                                      .chipselect
		output wire [0:0]  accelerometer_spi_avalon_accelerometer_spi_mode_slave_address,     // accelerometer_spi_avalon_accelerometer_spi_mode_slave.address
		output wire        accelerometer_spi_avalon_accelerometer_spi_mode_slave_write,       //                                                      .write
		output wire        accelerometer_spi_avalon_accelerometer_spi_mode_slave_read,        //                                                      .read
		input  wire [7:0]  accelerometer_spi_avalon_accelerometer_spi_mode_slave_readdata,    //                                                      .readdata
		output wire [7:0]  accelerometer_spi_avalon_accelerometer_spi_mode_slave_writedata,   //                                                      .writedata
		output wire [0:0]  accelerometer_spi_avalon_accelerometer_spi_mode_slave_byteenable,  //                                                      .byteenable
		input  wire        accelerometer_spi_avalon_accelerometer_spi_mode_slave_waitrequest, //                                                      .waitrequest
		output wire [1:0]  altpll_pll_slave_address,                                          //                                      altpll_pll_slave.address
		output wire        altpll_pll_slave_write,                                            //                                                      .write
		output wire        altpll_pll_slave_read,                                             //                                                      .read
		input  wire [31:0] altpll_pll_slave_readdata,                                         //                                                      .readdata
		output wire [31:0] altpll_pll_slave_writedata,                                        //                                                      .writedata
		output wire [1:0]  button_s1_address,                                                 //                                             button_s1.address
		input  wire [31:0] button_s1_readdata,                                                //                                                      .readdata
		output wire [8:0]  cpu_debug_mem_slave_address,                                       //                                   cpu_debug_mem_slave.address
		output wire        cpu_debug_mem_slave_write,                                         //                                                      .write
		output wire        cpu_debug_mem_slave_read,                                          //                                                      .read
		input  wire [31:0] cpu_debug_mem_slave_readdata,                                      //                                                      .readdata
		output wire [31:0] cpu_debug_mem_slave_writedata,                                     //                                                      .writedata
		output wire [3:0]  cpu_debug_mem_slave_byteenable,                                    //                                                      .byteenable
		input  wire        cpu_debug_mem_slave_waitrequest,                                   //                                                      .waitrequest
		output wire        cpu_debug_mem_slave_debugaccess,                                   //                                                      .debugaccess
		output wire [1:0]  hardware_clocks_s1_address,                                        //                                    hardware_clocks_s1.address
		output wire        hardware_clocks_s1_write,                                          //                                                      .write
		input  wire [31:0] hardware_clocks_s1_readdata,                                       //                                                      .readdata
		output wire [31:0] hardware_clocks_s1_writedata,                                      //                                                      .writedata
		output wire        hardware_clocks_s1_chipselect,                                     //                                                      .chipselect
		output wire [1:0]  hardware_in_x_s1_address,                                          //                                      hardware_in_x_s1.address
		input  wire [31:0] hardware_in_x_s1_readdata,                                         //                                                      .readdata
		output wire [1:0]  hardware_in_y_s1_address,                                          //                                      hardware_in_y_s1.address
		input  wire [31:0] hardware_in_y_s1_readdata,                                         //                                                      .readdata
		output wire [1:0]  hardware_in_z_s1_address,                                          //                                      hardware_in_z_s1.address
		input  wire [31:0] hardware_in_z_s1_readdata,                                         //                                                      .readdata
		output wire [1:0]  hardware_out_x_s1_address,                                         //                                     hardware_out_x_s1.address
		output wire        hardware_out_x_s1_write,                                           //                                                      .write
		input  wire [31:0] hardware_out_x_s1_readdata,                                        //                                                      .readdata
		output wire [31:0] hardware_out_x_s1_writedata,                                       //                                                      .writedata
		output wire        hardware_out_x_s1_chipselect,                                      //                                                      .chipselect
		output wire [1:0]  hardware_out_y_s1_address,                                         //                                     hardware_out_y_s1.address
		output wire        hardware_out_y_s1_write,                                           //                                                      .write
		input  wire [31:0] hardware_out_y_s1_readdata,                                        //                                                      .readdata
		output wire [31:0] hardware_out_y_s1_writedata,                                       //                                                      .writedata
		output wire        hardware_out_y_s1_chipselect,                                      //                                                      .chipselect
		output wire [1:0]  hardware_out_z_s1_address,                                         //                                     hardware_out_z_s1.address
		output wire        hardware_out_z_s1_write,                                           //                                                      .write
		input  wire [31:0] hardware_out_z_s1_readdata,                                        //                                                      .readdata
		output wire [31:0] hardware_out_z_s1_writedata,                                       //                                                      .writedata
		output wire        hardware_out_z_s1_chipselect,                                      //                                                      .chipselect
		output wire [1:0]  hex0_s1_address,                                                   //                                               hex0_s1.address
		output wire        hex0_s1_write,                                                     //                                                      .write
		input  wire [31:0] hex0_s1_readdata,                                                  //                                                      .readdata
		output wire [31:0] hex0_s1_writedata,                                                 //                                                      .writedata
		output wire        hex0_s1_chipselect,                                                //                                                      .chipselect
		output wire [1:0]  hex1_s1_address,                                                   //                                               hex1_s1.address
		output wire        hex1_s1_write,                                                     //                                                      .write
		input  wire [31:0] hex1_s1_readdata,                                                  //                                                      .readdata
		output wire [31:0] hex1_s1_writedata,                                                 //                                                      .writedata
		output wire        hex1_s1_chipselect,                                                //                                                      .chipselect
		output wire [1:0]  hex2_s1_address,                                                   //                                               hex2_s1.address
		output wire        hex2_s1_write,                                                     //                                                      .write
		input  wire [31:0] hex2_s1_readdata,                                                  //                                                      .readdata
		output wire [31:0] hex2_s1_writedata,                                                 //                                                      .writedata
		output wire        hex2_s1_chipselect,                                                //                                                      .chipselect
		output wire [1:0]  hex3_s1_address,                                                   //                                               hex3_s1.address
		output wire        hex3_s1_write,                                                     //                                                      .write
		input  wire [31:0] hex3_s1_readdata,                                                  //                                                      .readdata
		output wire [31:0] hex3_s1_writedata,                                                 //                                                      .writedata
		output wire        hex3_s1_chipselect,                                                //                                                      .chipselect
		output wire [1:0]  hex4_s1_address,                                                   //                                               hex4_s1.address
		output wire        hex4_s1_write,                                                     //                                                      .write
		input  wire [31:0] hex4_s1_readdata,                                                  //                                                      .readdata
		output wire [31:0] hex4_s1_writedata,                                                 //                                                      .writedata
		output wire        hex4_s1_chipselect,                                                //                                                      .chipselect
		output wire [1:0]  hex5_s1_address,                                                   //                                               hex5_s1.address
		output wire        hex5_s1_write,                                                     //                                                      .write
		input  wire [31:0] hex5_s1_readdata,                                                  //                                                      .readdata
		output wire [31:0] hex5_s1_writedata,                                                 //                                                      .writedata
		output wire        hex5_s1_chipselect,                                                //                                                      .chipselect
		output wire [2:0]  hex_timer_s1_address,                                              //                                          hex_timer_s1.address
		output wire        hex_timer_s1_write,                                                //                                                      .write
		input  wire [15:0] hex_timer_s1_readdata,                                             //                                                      .readdata
		output wire [15:0] hex_timer_s1_writedata,                                            //                                                      .writedata
		output wire        hex_timer_s1_chipselect,                                           //                                                      .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                               //                           jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                 //                                                      .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                  //                                                      .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                              //                                                      .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                             //                                                      .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                           //                                                      .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                            //                                                      .chipselect
		output wire [1:0]  led_s1_address,                                                    //                                                led_s1.address
		output wire        led_s1_write,                                                      //                                                      .write
		input  wire [31:0] led_s1_readdata,                                                   //                                                      .readdata
		output wire [31:0] led_s1_writedata,                                                  //                                                      .writedata
		output wire        led_s1_chipselect,                                                 //                                                      .chipselect
		output wire [21:0] sdram_s1_address,                                                  //                                              sdram_s1.address
		output wire        sdram_s1_write,                                                    //                                                      .write
		output wire        sdram_s1_read,                                                     //                                                      .read
		input  wire [15:0] sdram_s1_readdata,                                                 //                                                      .readdata
		output wire [15:0] sdram_s1_writedata,                                                //                                                      .writedata
		output wire [1:0]  sdram_s1_byteenable,                                               //                                                      .byteenable
		input  wire        sdram_s1_readdatavalid,                                            //                                                      .readdatavalid
		input  wire        sdram_s1_waitrequest,                                              //                                                      .waitrequest
		output wire        sdram_s1_chipselect,                                               //                                                      .chipselect
		output wire [1:0]  switch_s1_address,                                                 //                                             switch_s1.address
		input  wire [31:0] switch_s1_readdata,                                                //                                                      .readdata
		output wire [0:0]  sysid_control_slave_address,                                       //                                   sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                                      //                                                      .readdata
		output wire [2:0]  timer_s1_address,                                                  //                                              timer_s1.address
		output wire        timer_s1_write,                                                    //                                                      .write
		input  wire [15:0] timer_s1_readdata,                                                 //                                                      .readdata
		output wire [15:0] timer_s1_writedata,                                                //                                                      .writedata
		output wire        timer_s1_chipselect,                                               //                                                      .chipselect
		output wire [2:0]  timer0_s1_address,                                                 //                                             timer0_s1.address
		output wire        timer0_s1_write,                                                   //                                                      .write
		input  wire [15:0] timer0_s1_readdata,                                                //                                                      .readdata
		output wire [15:0] timer0_s1_writedata,                                               //                                                      .writedata
		output wire        timer0_s1_chipselect,                                              //                                                      .chipselect
		output wire [2:0]  timer1_s1_address,                                                 //                                             timer1_s1.address
		output wire        timer1_s1_write,                                                   //                                                      .write
		input  wire [15:0] timer1_s1_readdata,                                                //                                                      .readdata
		output wire [15:0] timer1_s1_writedata,                                               //                                                      .writedata
		output wire        timer1_s1_chipselect,                                              //                                                      .chipselect
		output wire [3:0]  timer3_s1_address,                                                 //                                             timer3_s1.address
		output wire        timer3_s1_write,                                                   //                                                      .write
		input  wire [15:0] timer3_s1_readdata,                                                //                                                      .readdata
		output wire [15:0] timer3_s1_writedata,                                               //                                                      .writedata
		output wire        timer3_s1_chipselect,                                              //                                                      .chipselect
		output wire [3:0]  timer4_s1_address,                                                 //                                             timer4_s1.address
		output wire        timer4_s1_write,                                                   //                                                      .write
		input  wire [15:0] timer4_s1_readdata,                                                //                                                      .readdata
		output wire [15:0] timer4_s1_writedata,                                               //                                                      .writedata
		output wire        timer4_s1_chipselect,                                              //                                                      .chipselect
		output wire [3:0]  timestamp_timer_s1_address,                                        //                                    timestamp_timer_s1.address
		output wire        timestamp_timer_s1_write,                                          //                                                      .write
		input  wire [15:0] timestamp_timer_s1_readdata,                                       //                                                      .readdata
		output wire [15:0] timestamp_timer_s1_writedata,                                      //                                                      .writedata
		output wire        timestamp_timer_s1_chipselect                                      //                                                      .chipselect
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;                          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;                          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [24:0] cpu_data_master_translator_avalon_universal_master_0_address;                              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                         // rsp_mux:src_valid -> cpu_data_master_agent:rp_valid
	wire  [104:0] rsp_mux_src_data;                                                                          // rsp_mux:src_data -> cpu_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                         // cpu_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [29:0] rsp_mux_src_channel;                                                                       // rsp_mux:src_channel -> cpu_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                 // rsp_mux:src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                   // rsp_mux:src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;                      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [24:0] cpu_instruction_master_translator_avalon_universal_master_0_address;                       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;                          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                 // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;                          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;                         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;                     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                     // rsp_mux_001:src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [104:0] rsp_mux_001_src_data;                                                                      // rsp_mux_001:src_data -> cpu_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                     // cpu_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [29:0] rsp_mux_001_src_channel;                                                                   // rsp_mux_001:src_channel -> cpu_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                             // rsp_mux_001:src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                               // rsp_mux_001:src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire    [7:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdata;                   // accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_readdata -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_readdata
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_waitrequest;                // accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_waitrequest -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_waitrequest
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_debugaccess;                // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_debugaccess -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_debugaccess
	wire   [24:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_address;                    // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_address -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_address
	wire    [0:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_byteenable;                 // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_byteenable -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_byteenable
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_read;                       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_read -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_read
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdatavalid;              // accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_readdatavalid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_readdatavalid
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_lock;                       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_lock -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_lock
	wire    [7:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_writedata;                  // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_writedata -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_writedata
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_write;                      // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_write -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_write
	wire    [0:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_burstcount;                 // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:m0_burstcount -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator:uav_burstcount
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_valid;               // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_valid
	wire   [78:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_data;                // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_data
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_ready;               // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_ready
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_startofpacket;       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_startofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_endofpacket;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_source_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:in_endofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_valid;            // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_valid
	wire   [78:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_data;             // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_data
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_ready;            // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_ready
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_startofpacket;    // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_startofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_endofpacket;      // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo:out_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rf_sink_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                             // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                          // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                          // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [24:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                              // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                           // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                 // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                        // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                 // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                            // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                           // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                         // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [105:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                          // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                   // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                      // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [105:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                      // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                     // cmd_mux_001:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [104:0] cmd_mux_001_src_data;                                                                      // cmd_mux_001:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                     // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [29:0] cmd_mux_001_src_channel;                                                                   // cmd_mux_001:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                             // cmd_mux_001:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                               // cmd_mux_001:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                     // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                                  // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                                  // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [24:0] sysid_control_slave_agent_m0_address;                                                      // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                                   // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                         // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                                // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                         // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                                    // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                        // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                                   // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                                 // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [105:0] sysid_control_slave_agent_rf_source_data;                                                  // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                                 // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                         // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                           // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                              // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [105:0] sysid_control_slave_agent_rsp_fifo_out_data;                                               // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                              // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                      // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                        // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                     // cmd_mux_002:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [104:0] cmd_mux_002_src_data;                                                                      // cmd_mux_002:src_data -> sysid_control_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                     // sysid_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [29:0] cmd_mux_002_src_channel;                                                                   // cmd_mux_002:src_channel -> sysid_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                             // cmd_mux_002:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                               // cmd_mux_002:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire   [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                                     // cpu_debug_mem_slave_translator:uav_readdata -> cpu_debug_mem_slave_agent:m0_readdata
	wire          cpu_debug_mem_slave_agent_m0_waitrequest;                                                  // cpu_debug_mem_slave_translator:uav_waitrequest -> cpu_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_debug_mem_slave_agent_m0_debugaccess;                                                  // cpu_debug_mem_slave_agent:m0_debugaccess -> cpu_debug_mem_slave_translator:uav_debugaccess
	wire   [24:0] cpu_debug_mem_slave_agent_m0_address;                                                      // cpu_debug_mem_slave_agent:m0_address -> cpu_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                                   // cpu_debug_mem_slave_agent:m0_byteenable -> cpu_debug_mem_slave_translator:uav_byteenable
	wire          cpu_debug_mem_slave_agent_m0_read;                                                         // cpu_debug_mem_slave_agent:m0_read -> cpu_debug_mem_slave_translator:uav_read
	wire          cpu_debug_mem_slave_agent_m0_readdatavalid;                                                // cpu_debug_mem_slave_translator:uav_readdatavalid -> cpu_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_debug_mem_slave_agent_m0_lock;                                                         // cpu_debug_mem_slave_agent:m0_lock -> cpu_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                                    // cpu_debug_mem_slave_agent:m0_writedata -> cpu_debug_mem_slave_translator:uav_writedata
	wire          cpu_debug_mem_slave_agent_m0_write;                                                        // cpu_debug_mem_slave_agent:m0_write -> cpu_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                                   // cpu_debug_mem_slave_agent:m0_burstcount -> cpu_debug_mem_slave_translator:uav_burstcount
	wire          cpu_debug_mem_slave_agent_rf_source_valid;                                                 // cpu_debug_mem_slave_agent:rf_source_valid -> cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [105:0] cpu_debug_mem_slave_agent_rf_source_data;                                                  // cpu_debug_mem_slave_agent:rf_source_data -> cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rf_source_ready;                                                 // cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_debug_mem_slave_agent:rf_source_ready
	wire          cpu_debug_mem_slave_agent_rf_source_startofpacket;                                         // cpu_debug_mem_slave_agent:rf_source_startofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rf_source_endofpacket;                                           // cpu_debug_mem_slave_agent:rf_source_endofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                              // cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [105:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                               // cpu_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_debug_mem_slave_agent:rf_sink_data
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                              // cpu_debug_mem_slave_agent:rf_sink_ready -> cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                      // cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                        // cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                     // cmd_mux_003:src_valid -> cpu_debug_mem_slave_agent:cp_valid
	wire  [104:0] cmd_mux_003_src_data;                                                                      // cmd_mux_003:src_data -> cpu_debug_mem_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                     // cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [29:0] cmd_mux_003_src_channel;                                                                   // cmd_mux_003:src_channel -> cpu_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                             // cmd_mux_003:src_startofpacket -> cpu_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                               // cmd_mux_003:src_endofpacket -> cpu_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] altpll_pll_slave_agent_m0_readdata;                                                        // altpll_pll_slave_translator:uav_readdata -> altpll_pll_slave_agent:m0_readdata
	wire          altpll_pll_slave_agent_m0_waitrequest;                                                     // altpll_pll_slave_translator:uav_waitrequest -> altpll_pll_slave_agent:m0_waitrequest
	wire          altpll_pll_slave_agent_m0_debugaccess;                                                     // altpll_pll_slave_agent:m0_debugaccess -> altpll_pll_slave_translator:uav_debugaccess
	wire   [24:0] altpll_pll_slave_agent_m0_address;                                                         // altpll_pll_slave_agent:m0_address -> altpll_pll_slave_translator:uav_address
	wire    [3:0] altpll_pll_slave_agent_m0_byteenable;                                                      // altpll_pll_slave_agent:m0_byteenable -> altpll_pll_slave_translator:uav_byteenable
	wire          altpll_pll_slave_agent_m0_read;                                                            // altpll_pll_slave_agent:m0_read -> altpll_pll_slave_translator:uav_read
	wire          altpll_pll_slave_agent_m0_readdatavalid;                                                   // altpll_pll_slave_translator:uav_readdatavalid -> altpll_pll_slave_agent:m0_readdatavalid
	wire          altpll_pll_slave_agent_m0_lock;                                                            // altpll_pll_slave_agent:m0_lock -> altpll_pll_slave_translator:uav_lock
	wire   [31:0] altpll_pll_slave_agent_m0_writedata;                                                       // altpll_pll_slave_agent:m0_writedata -> altpll_pll_slave_translator:uav_writedata
	wire          altpll_pll_slave_agent_m0_write;                                                           // altpll_pll_slave_agent:m0_write -> altpll_pll_slave_translator:uav_write
	wire    [2:0] altpll_pll_slave_agent_m0_burstcount;                                                      // altpll_pll_slave_agent:m0_burstcount -> altpll_pll_slave_translator:uav_burstcount
	wire          altpll_pll_slave_agent_rf_source_valid;                                                    // altpll_pll_slave_agent:rf_source_valid -> altpll_pll_slave_agent_rsp_fifo:in_valid
	wire  [105:0] altpll_pll_slave_agent_rf_source_data;                                                     // altpll_pll_slave_agent:rf_source_data -> altpll_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_pll_slave_agent_rf_source_ready;                                                    // altpll_pll_slave_agent_rsp_fifo:in_ready -> altpll_pll_slave_agent:rf_source_ready
	wire          altpll_pll_slave_agent_rf_source_startofpacket;                                            // altpll_pll_slave_agent:rf_source_startofpacket -> altpll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_pll_slave_agent_rf_source_endofpacket;                                              // altpll_pll_slave_agent:rf_source_endofpacket -> altpll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_pll_slave_agent_rsp_fifo_out_valid;                                                 // altpll_pll_slave_agent_rsp_fifo:out_valid -> altpll_pll_slave_agent:rf_sink_valid
	wire  [105:0] altpll_pll_slave_agent_rsp_fifo_out_data;                                                  // altpll_pll_slave_agent_rsp_fifo:out_data -> altpll_pll_slave_agent:rf_sink_data
	wire          altpll_pll_slave_agent_rsp_fifo_out_ready;                                                 // altpll_pll_slave_agent:rf_sink_ready -> altpll_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_pll_slave_agent_rsp_fifo_out_startofpacket;                                         // altpll_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_pll_slave_agent_rsp_fifo_out_endofpacket;                                           // altpll_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_pll_slave_agent_rdata_fifo_src_valid;                                               // altpll_pll_slave_agent:rdata_fifo_src_valid -> altpll_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_pll_slave_agent_rdata_fifo_src_data;                                                // altpll_pll_slave_agent:rdata_fifo_src_data -> altpll_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_pll_slave_agent_rdata_fifo_src_ready;                                               // altpll_pll_slave_agent_rdata_fifo:in_ready -> altpll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                                     // cmd_mux_004:src_valid -> altpll_pll_slave_agent:cp_valid
	wire  [104:0] cmd_mux_004_src_data;                                                                      // cmd_mux_004:src_data -> altpll_pll_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                     // altpll_pll_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [29:0] cmd_mux_004_src_channel;                                                                   // cmd_mux_004:src_channel -> altpll_pll_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                             // cmd_mux_004:src_startofpacket -> altpll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                               // cmd_mux_004:src_endofpacket -> altpll_pll_slave_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                                // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                             // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                             // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [24:0] sdram_s1_agent_m0_address;                                                                 // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                              // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                    // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                           // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                    // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                               // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                   // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                              // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                            // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire   [87:0] sdram_s1_agent_rf_source_data;                                                             // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                            // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                    // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                      // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                         // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire   [87:0] sdram_s1_agent_rsp_fifo_out_data;                                                          // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                         // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                 // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                   // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                       // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                        // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                       // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] led_s1_agent_m0_readdata;                                                                  // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                                               // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                                               // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [24:0] led_s1_agent_m0_address;                                                                   // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                                                // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                                                      // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                                             // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                                                      // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                                                 // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                                                     // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                                                // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                                              // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [105:0] led_s1_agent_rf_source_data;                                                               // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                                              // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                                                      // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                                                        // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                                           // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [105:0] led_s1_agent_rsp_fifo_out_data;                                                            // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                                           // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                                                   // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                                                     // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                     // cmd_mux_006:src_valid -> led_s1_agent:cp_valid
	wire  [104:0] cmd_mux_006_src_data;                                                                      // cmd_mux_006:src_data -> led_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                     // led_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [29:0] cmd_mux_006_src_channel;                                                                   // cmd_mux_006:src_channel -> led_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                             // cmd_mux_006:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                               // cmd_mux_006:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire   [31:0] hex5_s1_agent_m0_readdata;                                                                 // hex5_s1_translator:uav_readdata -> hex5_s1_agent:m0_readdata
	wire          hex5_s1_agent_m0_waitrequest;                                                              // hex5_s1_translator:uav_waitrequest -> hex5_s1_agent:m0_waitrequest
	wire          hex5_s1_agent_m0_debugaccess;                                                              // hex5_s1_agent:m0_debugaccess -> hex5_s1_translator:uav_debugaccess
	wire   [24:0] hex5_s1_agent_m0_address;                                                                  // hex5_s1_agent:m0_address -> hex5_s1_translator:uav_address
	wire    [3:0] hex5_s1_agent_m0_byteenable;                                                               // hex5_s1_agent:m0_byteenable -> hex5_s1_translator:uav_byteenable
	wire          hex5_s1_agent_m0_read;                                                                     // hex5_s1_agent:m0_read -> hex5_s1_translator:uav_read
	wire          hex5_s1_agent_m0_readdatavalid;                                                            // hex5_s1_translator:uav_readdatavalid -> hex5_s1_agent:m0_readdatavalid
	wire          hex5_s1_agent_m0_lock;                                                                     // hex5_s1_agent:m0_lock -> hex5_s1_translator:uav_lock
	wire   [31:0] hex5_s1_agent_m0_writedata;                                                                // hex5_s1_agent:m0_writedata -> hex5_s1_translator:uav_writedata
	wire          hex5_s1_agent_m0_write;                                                                    // hex5_s1_agent:m0_write -> hex5_s1_translator:uav_write
	wire    [2:0] hex5_s1_agent_m0_burstcount;                                                               // hex5_s1_agent:m0_burstcount -> hex5_s1_translator:uav_burstcount
	wire          hex5_s1_agent_rf_source_valid;                                                             // hex5_s1_agent:rf_source_valid -> hex5_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hex5_s1_agent_rf_source_data;                                                              // hex5_s1_agent:rf_source_data -> hex5_s1_agent_rsp_fifo:in_data
	wire          hex5_s1_agent_rf_source_ready;                                                             // hex5_s1_agent_rsp_fifo:in_ready -> hex5_s1_agent:rf_source_ready
	wire          hex5_s1_agent_rf_source_startofpacket;                                                     // hex5_s1_agent:rf_source_startofpacket -> hex5_s1_agent_rsp_fifo:in_startofpacket
	wire          hex5_s1_agent_rf_source_endofpacket;                                                       // hex5_s1_agent:rf_source_endofpacket -> hex5_s1_agent_rsp_fifo:in_endofpacket
	wire          hex5_s1_agent_rsp_fifo_out_valid;                                                          // hex5_s1_agent_rsp_fifo:out_valid -> hex5_s1_agent:rf_sink_valid
	wire  [105:0] hex5_s1_agent_rsp_fifo_out_data;                                                           // hex5_s1_agent_rsp_fifo:out_data -> hex5_s1_agent:rf_sink_data
	wire          hex5_s1_agent_rsp_fifo_out_ready;                                                          // hex5_s1_agent:rf_sink_ready -> hex5_s1_agent_rsp_fifo:out_ready
	wire          hex5_s1_agent_rsp_fifo_out_startofpacket;                                                  // hex5_s1_agent_rsp_fifo:out_startofpacket -> hex5_s1_agent:rf_sink_startofpacket
	wire          hex5_s1_agent_rsp_fifo_out_endofpacket;                                                    // hex5_s1_agent_rsp_fifo:out_endofpacket -> hex5_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                     // cmd_mux_007:src_valid -> hex5_s1_agent:cp_valid
	wire  [104:0] cmd_mux_007_src_data;                                                                      // cmd_mux_007:src_data -> hex5_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                     // hex5_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [29:0] cmd_mux_007_src_channel;                                                                   // cmd_mux_007:src_channel -> hex5_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                             // cmd_mux_007:src_startofpacket -> hex5_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                               // cmd_mux_007:src_endofpacket -> hex5_s1_agent:cp_endofpacket
	wire   [31:0] hex4_s1_agent_m0_readdata;                                                                 // hex4_s1_translator:uav_readdata -> hex4_s1_agent:m0_readdata
	wire          hex4_s1_agent_m0_waitrequest;                                                              // hex4_s1_translator:uav_waitrequest -> hex4_s1_agent:m0_waitrequest
	wire          hex4_s1_agent_m0_debugaccess;                                                              // hex4_s1_agent:m0_debugaccess -> hex4_s1_translator:uav_debugaccess
	wire   [24:0] hex4_s1_agent_m0_address;                                                                  // hex4_s1_agent:m0_address -> hex4_s1_translator:uav_address
	wire    [3:0] hex4_s1_agent_m0_byteenable;                                                               // hex4_s1_agent:m0_byteenable -> hex4_s1_translator:uav_byteenable
	wire          hex4_s1_agent_m0_read;                                                                     // hex4_s1_agent:m0_read -> hex4_s1_translator:uav_read
	wire          hex4_s1_agent_m0_readdatavalid;                                                            // hex4_s1_translator:uav_readdatavalid -> hex4_s1_agent:m0_readdatavalid
	wire          hex4_s1_agent_m0_lock;                                                                     // hex4_s1_agent:m0_lock -> hex4_s1_translator:uav_lock
	wire   [31:0] hex4_s1_agent_m0_writedata;                                                                // hex4_s1_agent:m0_writedata -> hex4_s1_translator:uav_writedata
	wire          hex4_s1_agent_m0_write;                                                                    // hex4_s1_agent:m0_write -> hex4_s1_translator:uav_write
	wire    [2:0] hex4_s1_agent_m0_burstcount;                                                               // hex4_s1_agent:m0_burstcount -> hex4_s1_translator:uav_burstcount
	wire          hex4_s1_agent_rf_source_valid;                                                             // hex4_s1_agent:rf_source_valid -> hex4_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hex4_s1_agent_rf_source_data;                                                              // hex4_s1_agent:rf_source_data -> hex4_s1_agent_rsp_fifo:in_data
	wire          hex4_s1_agent_rf_source_ready;                                                             // hex4_s1_agent_rsp_fifo:in_ready -> hex4_s1_agent:rf_source_ready
	wire          hex4_s1_agent_rf_source_startofpacket;                                                     // hex4_s1_agent:rf_source_startofpacket -> hex4_s1_agent_rsp_fifo:in_startofpacket
	wire          hex4_s1_agent_rf_source_endofpacket;                                                       // hex4_s1_agent:rf_source_endofpacket -> hex4_s1_agent_rsp_fifo:in_endofpacket
	wire          hex4_s1_agent_rsp_fifo_out_valid;                                                          // hex4_s1_agent_rsp_fifo:out_valid -> hex4_s1_agent:rf_sink_valid
	wire  [105:0] hex4_s1_agent_rsp_fifo_out_data;                                                           // hex4_s1_agent_rsp_fifo:out_data -> hex4_s1_agent:rf_sink_data
	wire          hex4_s1_agent_rsp_fifo_out_ready;                                                          // hex4_s1_agent:rf_sink_ready -> hex4_s1_agent_rsp_fifo:out_ready
	wire          hex4_s1_agent_rsp_fifo_out_startofpacket;                                                  // hex4_s1_agent_rsp_fifo:out_startofpacket -> hex4_s1_agent:rf_sink_startofpacket
	wire          hex4_s1_agent_rsp_fifo_out_endofpacket;                                                    // hex4_s1_agent_rsp_fifo:out_endofpacket -> hex4_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                     // cmd_mux_008:src_valid -> hex4_s1_agent:cp_valid
	wire  [104:0] cmd_mux_008_src_data;                                                                      // cmd_mux_008:src_data -> hex4_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                     // hex4_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [29:0] cmd_mux_008_src_channel;                                                                   // cmd_mux_008:src_channel -> hex4_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                             // cmd_mux_008:src_startofpacket -> hex4_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                               // cmd_mux_008:src_endofpacket -> hex4_s1_agent:cp_endofpacket
	wire   [31:0] hex3_s1_agent_m0_readdata;                                                                 // hex3_s1_translator:uav_readdata -> hex3_s1_agent:m0_readdata
	wire          hex3_s1_agent_m0_waitrequest;                                                              // hex3_s1_translator:uav_waitrequest -> hex3_s1_agent:m0_waitrequest
	wire          hex3_s1_agent_m0_debugaccess;                                                              // hex3_s1_agent:m0_debugaccess -> hex3_s1_translator:uav_debugaccess
	wire   [24:0] hex3_s1_agent_m0_address;                                                                  // hex3_s1_agent:m0_address -> hex3_s1_translator:uav_address
	wire    [3:0] hex3_s1_agent_m0_byteenable;                                                               // hex3_s1_agent:m0_byteenable -> hex3_s1_translator:uav_byteenable
	wire          hex3_s1_agent_m0_read;                                                                     // hex3_s1_agent:m0_read -> hex3_s1_translator:uav_read
	wire          hex3_s1_agent_m0_readdatavalid;                                                            // hex3_s1_translator:uav_readdatavalid -> hex3_s1_agent:m0_readdatavalid
	wire          hex3_s1_agent_m0_lock;                                                                     // hex3_s1_agent:m0_lock -> hex3_s1_translator:uav_lock
	wire   [31:0] hex3_s1_agent_m0_writedata;                                                                // hex3_s1_agent:m0_writedata -> hex3_s1_translator:uav_writedata
	wire          hex3_s1_agent_m0_write;                                                                    // hex3_s1_agent:m0_write -> hex3_s1_translator:uav_write
	wire    [2:0] hex3_s1_agent_m0_burstcount;                                                               // hex3_s1_agent:m0_burstcount -> hex3_s1_translator:uav_burstcount
	wire          hex3_s1_agent_rf_source_valid;                                                             // hex3_s1_agent:rf_source_valid -> hex3_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hex3_s1_agent_rf_source_data;                                                              // hex3_s1_agent:rf_source_data -> hex3_s1_agent_rsp_fifo:in_data
	wire          hex3_s1_agent_rf_source_ready;                                                             // hex3_s1_agent_rsp_fifo:in_ready -> hex3_s1_agent:rf_source_ready
	wire          hex3_s1_agent_rf_source_startofpacket;                                                     // hex3_s1_agent:rf_source_startofpacket -> hex3_s1_agent_rsp_fifo:in_startofpacket
	wire          hex3_s1_agent_rf_source_endofpacket;                                                       // hex3_s1_agent:rf_source_endofpacket -> hex3_s1_agent_rsp_fifo:in_endofpacket
	wire          hex3_s1_agent_rsp_fifo_out_valid;                                                          // hex3_s1_agent_rsp_fifo:out_valid -> hex3_s1_agent:rf_sink_valid
	wire  [105:0] hex3_s1_agent_rsp_fifo_out_data;                                                           // hex3_s1_agent_rsp_fifo:out_data -> hex3_s1_agent:rf_sink_data
	wire          hex3_s1_agent_rsp_fifo_out_ready;                                                          // hex3_s1_agent:rf_sink_ready -> hex3_s1_agent_rsp_fifo:out_ready
	wire          hex3_s1_agent_rsp_fifo_out_startofpacket;                                                  // hex3_s1_agent_rsp_fifo:out_startofpacket -> hex3_s1_agent:rf_sink_startofpacket
	wire          hex3_s1_agent_rsp_fifo_out_endofpacket;                                                    // hex3_s1_agent_rsp_fifo:out_endofpacket -> hex3_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                     // cmd_mux_009:src_valid -> hex3_s1_agent:cp_valid
	wire  [104:0] cmd_mux_009_src_data;                                                                      // cmd_mux_009:src_data -> hex3_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                     // hex3_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [29:0] cmd_mux_009_src_channel;                                                                   // cmd_mux_009:src_channel -> hex3_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                             // cmd_mux_009:src_startofpacket -> hex3_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                               // cmd_mux_009:src_endofpacket -> hex3_s1_agent:cp_endofpacket
	wire   [31:0] hex2_s1_agent_m0_readdata;                                                                 // hex2_s1_translator:uav_readdata -> hex2_s1_agent:m0_readdata
	wire          hex2_s1_agent_m0_waitrequest;                                                              // hex2_s1_translator:uav_waitrequest -> hex2_s1_agent:m0_waitrequest
	wire          hex2_s1_agent_m0_debugaccess;                                                              // hex2_s1_agent:m0_debugaccess -> hex2_s1_translator:uav_debugaccess
	wire   [24:0] hex2_s1_agent_m0_address;                                                                  // hex2_s1_agent:m0_address -> hex2_s1_translator:uav_address
	wire    [3:0] hex2_s1_agent_m0_byteenable;                                                               // hex2_s1_agent:m0_byteenable -> hex2_s1_translator:uav_byteenable
	wire          hex2_s1_agent_m0_read;                                                                     // hex2_s1_agent:m0_read -> hex2_s1_translator:uav_read
	wire          hex2_s1_agent_m0_readdatavalid;                                                            // hex2_s1_translator:uav_readdatavalid -> hex2_s1_agent:m0_readdatavalid
	wire          hex2_s1_agent_m0_lock;                                                                     // hex2_s1_agent:m0_lock -> hex2_s1_translator:uav_lock
	wire   [31:0] hex2_s1_agent_m0_writedata;                                                                // hex2_s1_agent:m0_writedata -> hex2_s1_translator:uav_writedata
	wire          hex2_s1_agent_m0_write;                                                                    // hex2_s1_agent:m0_write -> hex2_s1_translator:uav_write
	wire    [2:0] hex2_s1_agent_m0_burstcount;                                                               // hex2_s1_agent:m0_burstcount -> hex2_s1_translator:uav_burstcount
	wire          hex2_s1_agent_rf_source_valid;                                                             // hex2_s1_agent:rf_source_valid -> hex2_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hex2_s1_agent_rf_source_data;                                                              // hex2_s1_agent:rf_source_data -> hex2_s1_agent_rsp_fifo:in_data
	wire          hex2_s1_agent_rf_source_ready;                                                             // hex2_s1_agent_rsp_fifo:in_ready -> hex2_s1_agent:rf_source_ready
	wire          hex2_s1_agent_rf_source_startofpacket;                                                     // hex2_s1_agent:rf_source_startofpacket -> hex2_s1_agent_rsp_fifo:in_startofpacket
	wire          hex2_s1_agent_rf_source_endofpacket;                                                       // hex2_s1_agent:rf_source_endofpacket -> hex2_s1_agent_rsp_fifo:in_endofpacket
	wire          hex2_s1_agent_rsp_fifo_out_valid;                                                          // hex2_s1_agent_rsp_fifo:out_valid -> hex2_s1_agent:rf_sink_valid
	wire  [105:0] hex2_s1_agent_rsp_fifo_out_data;                                                           // hex2_s1_agent_rsp_fifo:out_data -> hex2_s1_agent:rf_sink_data
	wire          hex2_s1_agent_rsp_fifo_out_ready;                                                          // hex2_s1_agent:rf_sink_ready -> hex2_s1_agent_rsp_fifo:out_ready
	wire          hex2_s1_agent_rsp_fifo_out_startofpacket;                                                  // hex2_s1_agent_rsp_fifo:out_startofpacket -> hex2_s1_agent:rf_sink_startofpacket
	wire          hex2_s1_agent_rsp_fifo_out_endofpacket;                                                    // hex2_s1_agent_rsp_fifo:out_endofpacket -> hex2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                     // cmd_mux_010:src_valid -> hex2_s1_agent:cp_valid
	wire  [104:0] cmd_mux_010_src_data;                                                                      // cmd_mux_010:src_data -> hex2_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                     // hex2_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [29:0] cmd_mux_010_src_channel;                                                                   // cmd_mux_010:src_channel -> hex2_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                             // cmd_mux_010:src_startofpacket -> hex2_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                               // cmd_mux_010:src_endofpacket -> hex2_s1_agent:cp_endofpacket
	wire   [31:0] hex1_s1_agent_m0_readdata;                                                                 // hex1_s1_translator:uav_readdata -> hex1_s1_agent:m0_readdata
	wire          hex1_s1_agent_m0_waitrequest;                                                              // hex1_s1_translator:uav_waitrequest -> hex1_s1_agent:m0_waitrequest
	wire          hex1_s1_agent_m0_debugaccess;                                                              // hex1_s1_agent:m0_debugaccess -> hex1_s1_translator:uav_debugaccess
	wire   [24:0] hex1_s1_agent_m0_address;                                                                  // hex1_s1_agent:m0_address -> hex1_s1_translator:uav_address
	wire    [3:0] hex1_s1_agent_m0_byteenable;                                                               // hex1_s1_agent:m0_byteenable -> hex1_s1_translator:uav_byteenable
	wire          hex1_s1_agent_m0_read;                                                                     // hex1_s1_agent:m0_read -> hex1_s1_translator:uav_read
	wire          hex1_s1_agent_m0_readdatavalid;                                                            // hex1_s1_translator:uav_readdatavalid -> hex1_s1_agent:m0_readdatavalid
	wire          hex1_s1_agent_m0_lock;                                                                     // hex1_s1_agent:m0_lock -> hex1_s1_translator:uav_lock
	wire   [31:0] hex1_s1_agent_m0_writedata;                                                                // hex1_s1_agent:m0_writedata -> hex1_s1_translator:uav_writedata
	wire          hex1_s1_agent_m0_write;                                                                    // hex1_s1_agent:m0_write -> hex1_s1_translator:uav_write
	wire    [2:0] hex1_s1_agent_m0_burstcount;                                                               // hex1_s1_agent:m0_burstcount -> hex1_s1_translator:uav_burstcount
	wire          hex1_s1_agent_rf_source_valid;                                                             // hex1_s1_agent:rf_source_valid -> hex1_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hex1_s1_agent_rf_source_data;                                                              // hex1_s1_agent:rf_source_data -> hex1_s1_agent_rsp_fifo:in_data
	wire          hex1_s1_agent_rf_source_ready;                                                             // hex1_s1_agent_rsp_fifo:in_ready -> hex1_s1_agent:rf_source_ready
	wire          hex1_s1_agent_rf_source_startofpacket;                                                     // hex1_s1_agent:rf_source_startofpacket -> hex1_s1_agent_rsp_fifo:in_startofpacket
	wire          hex1_s1_agent_rf_source_endofpacket;                                                       // hex1_s1_agent:rf_source_endofpacket -> hex1_s1_agent_rsp_fifo:in_endofpacket
	wire          hex1_s1_agent_rsp_fifo_out_valid;                                                          // hex1_s1_agent_rsp_fifo:out_valid -> hex1_s1_agent:rf_sink_valid
	wire  [105:0] hex1_s1_agent_rsp_fifo_out_data;                                                           // hex1_s1_agent_rsp_fifo:out_data -> hex1_s1_agent:rf_sink_data
	wire          hex1_s1_agent_rsp_fifo_out_ready;                                                          // hex1_s1_agent:rf_sink_ready -> hex1_s1_agent_rsp_fifo:out_ready
	wire          hex1_s1_agent_rsp_fifo_out_startofpacket;                                                  // hex1_s1_agent_rsp_fifo:out_startofpacket -> hex1_s1_agent:rf_sink_startofpacket
	wire          hex1_s1_agent_rsp_fifo_out_endofpacket;                                                    // hex1_s1_agent_rsp_fifo:out_endofpacket -> hex1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                     // cmd_mux_011:src_valid -> hex1_s1_agent:cp_valid
	wire  [104:0] cmd_mux_011_src_data;                                                                      // cmd_mux_011:src_data -> hex1_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                     // hex1_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [29:0] cmd_mux_011_src_channel;                                                                   // cmd_mux_011:src_channel -> hex1_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                             // cmd_mux_011:src_startofpacket -> hex1_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                               // cmd_mux_011:src_endofpacket -> hex1_s1_agent:cp_endofpacket
	wire   [31:0] hex0_s1_agent_m0_readdata;                                                                 // hex0_s1_translator:uav_readdata -> hex0_s1_agent:m0_readdata
	wire          hex0_s1_agent_m0_waitrequest;                                                              // hex0_s1_translator:uav_waitrequest -> hex0_s1_agent:m0_waitrequest
	wire          hex0_s1_agent_m0_debugaccess;                                                              // hex0_s1_agent:m0_debugaccess -> hex0_s1_translator:uav_debugaccess
	wire   [24:0] hex0_s1_agent_m0_address;                                                                  // hex0_s1_agent:m0_address -> hex0_s1_translator:uav_address
	wire    [3:0] hex0_s1_agent_m0_byteenable;                                                               // hex0_s1_agent:m0_byteenable -> hex0_s1_translator:uav_byteenable
	wire          hex0_s1_agent_m0_read;                                                                     // hex0_s1_agent:m0_read -> hex0_s1_translator:uav_read
	wire          hex0_s1_agent_m0_readdatavalid;                                                            // hex0_s1_translator:uav_readdatavalid -> hex0_s1_agent:m0_readdatavalid
	wire          hex0_s1_agent_m0_lock;                                                                     // hex0_s1_agent:m0_lock -> hex0_s1_translator:uav_lock
	wire   [31:0] hex0_s1_agent_m0_writedata;                                                                // hex0_s1_agent:m0_writedata -> hex0_s1_translator:uav_writedata
	wire          hex0_s1_agent_m0_write;                                                                    // hex0_s1_agent:m0_write -> hex0_s1_translator:uav_write
	wire    [2:0] hex0_s1_agent_m0_burstcount;                                                               // hex0_s1_agent:m0_burstcount -> hex0_s1_translator:uav_burstcount
	wire          hex0_s1_agent_rf_source_valid;                                                             // hex0_s1_agent:rf_source_valid -> hex0_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hex0_s1_agent_rf_source_data;                                                              // hex0_s1_agent:rf_source_data -> hex0_s1_agent_rsp_fifo:in_data
	wire          hex0_s1_agent_rf_source_ready;                                                             // hex0_s1_agent_rsp_fifo:in_ready -> hex0_s1_agent:rf_source_ready
	wire          hex0_s1_agent_rf_source_startofpacket;                                                     // hex0_s1_agent:rf_source_startofpacket -> hex0_s1_agent_rsp_fifo:in_startofpacket
	wire          hex0_s1_agent_rf_source_endofpacket;                                                       // hex0_s1_agent:rf_source_endofpacket -> hex0_s1_agent_rsp_fifo:in_endofpacket
	wire          hex0_s1_agent_rsp_fifo_out_valid;                                                          // hex0_s1_agent_rsp_fifo:out_valid -> hex0_s1_agent:rf_sink_valid
	wire  [105:0] hex0_s1_agent_rsp_fifo_out_data;                                                           // hex0_s1_agent_rsp_fifo:out_data -> hex0_s1_agent:rf_sink_data
	wire          hex0_s1_agent_rsp_fifo_out_ready;                                                          // hex0_s1_agent:rf_sink_ready -> hex0_s1_agent_rsp_fifo:out_ready
	wire          hex0_s1_agent_rsp_fifo_out_startofpacket;                                                  // hex0_s1_agent_rsp_fifo:out_startofpacket -> hex0_s1_agent:rf_sink_startofpacket
	wire          hex0_s1_agent_rsp_fifo_out_endofpacket;                                                    // hex0_s1_agent_rsp_fifo:out_endofpacket -> hex0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                     // cmd_mux_012:src_valid -> hex0_s1_agent:cp_valid
	wire  [104:0] cmd_mux_012_src_data;                                                                      // cmd_mux_012:src_data -> hex0_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                     // hex0_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [29:0] cmd_mux_012_src_channel;                                                                   // cmd_mux_012:src_channel -> hex0_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                             // cmd_mux_012:src_startofpacket -> hex0_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                               // cmd_mux_012:src_endofpacket -> hex0_s1_agent:cp_endofpacket
	wire   [31:0] switch_s1_agent_m0_readdata;                                                               // switch_s1_translator:uav_readdata -> switch_s1_agent:m0_readdata
	wire          switch_s1_agent_m0_waitrequest;                                                            // switch_s1_translator:uav_waitrequest -> switch_s1_agent:m0_waitrequest
	wire          switch_s1_agent_m0_debugaccess;                                                            // switch_s1_agent:m0_debugaccess -> switch_s1_translator:uav_debugaccess
	wire   [24:0] switch_s1_agent_m0_address;                                                                // switch_s1_agent:m0_address -> switch_s1_translator:uav_address
	wire    [3:0] switch_s1_agent_m0_byteenable;                                                             // switch_s1_agent:m0_byteenable -> switch_s1_translator:uav_byteenable
	wire          switch_s1_agent_m0_read;                                                                   // switch_s1_agent:m0_read -> switch_s1_translator:uav_read
	wire          switch_s1_agent_m0_readdatavalid;                                                          // switch_s1_translator:uav_readdatavalid -> switch_s1_agent:m0_readdatavalid
	wire          switch_s1_agent_m0_lock;                                                                   // switch_s1_agent:m0_lock -> switch_s1_translator:uav_lock
	wire   [31:0] switch_s1_agent_m0_writedata;                                                              // switch_s1_agent:m0_writedata -> switch_s1_translator:uav_writedata
	wire          switch_s1_agent_m0_write;                                                                  // switch_s1_agent:m0_write -> switch_s1_translator:uav_write
	wire    [2:0] switch_s1_agent_m0_burstcount;                                                             // switch_s1_agent:m0_burstcount -> switch_s1_translator:uav_burstcount
	wire          switch_s1_agent_rf_source_valid;                                                           // switch_s1_agent:rf_source_valid -> switch_s1_agent_rsp_fifo:in_valid
	wire  [105:0] switch_s1_agent_rf_source_data;                                                            // switch_s1_agent:rf_source_data -> switch_s1_agent_rsp_fifo:in_data
	wire          switch_s1_agent_rf_source_ready;                                                           // switch_s1_agent_rsp_fifo:in_ready -> switch_s1_agent:rf_source_ready
	wire          switch_s1_agent_rf_source_startofpacket;                                                   // switch_s1_agent:rf_source_startofpacket -> switch_s1_agent_rsp_fifo:in_startofpacket
	wire          switch_s1_agent_rf_source_endofpacket;                                                     // switch_s1_agent:rf_source_endofpacket -> switch_s1_agent_rsp_fifo:in_endofpacket
	wire          switch_s1_agent_rsp_fifo_out_valid;                                                        // switch_s1_agent_rsp_fifo:out_valid -> switch_s1_agent:rf_sink_valid
	wire  [105:0] switch_s1_agent_rsp_fifo_out_data;                                                         // switch_s1_agent_rsp_fifo:out_data -> switch_s1_agent:rf_sink_data
	wire          switch_s1_agent_rsp_fifo_out_ready;                                                        // switch_s1_agent:rf_sink_ready -> switch_s1_agent_rsp_fifo:out_ready
	wire          switch_s1_agent_rsp_fifo_out_startofpacket;                                                // switch_s1_agent_rsp_fifo:out_startofpacket -> switch_s1_agent:rf_sink_startofpacket
	wire          switch_s1_agent_rsp_fifo_out_endofpacket;                                                  // switch_s1_agent_rsp_fifo:out_endofpacket -> switch_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                     // cmd_mux_013:src_valid -> switch_s1_agent:cp_valid
	wire  [104:0] cmd_mux_013_src_data;                                                                      // cmd_mux_013:src_data -> switch_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                     // switch_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [29:0] cmd_mux_013_src_channel;                                                                   // cmd_mux_013:src_channel -> switch_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                             // cmd_mux_013:src_startofpacket -> switch_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                               // cmd_mux_013:src_endofpacket -> switch_s1_agent:cp_endofpacket
	wire   [31:0] button_s1_agent_m0_readdata;                                                               // button_s1_translator:uav_readdata -> button_s1_agent:m0_readdata
	wire          button_s1_agent_m0_waitrequest;                                                            // button_s1_translator:uav_waitrequest -> button_s1_agent:m0_waitrequest
	wire          button_s1_agent_m0_debugaccess;                                                            // button_s1_agent:m0_debugaccess -> button_s1_translator:uav_debugaccess
	wire   [24:0] button_s1_agent_m0_address;                                                                // button_s1_agent:m0_address -> button_s1_translator:uav_address
	wire    [3:0] button_s1_agent_m0_byteenable;                                                             // button_s1_agent:m0_byteenable -> button_s1_translator:uav_byteenable
	wire          button_s1_agent_m0_read;                                                                   // button_s1_agent:m0_read -> button_s1_translator:uav_read
	wire          button_s1_agent_m0_readdatavalid;                                                          // button_s1_translator:uav_readdatavalid -> button_s1_agent:m0_readdatavalid
	wire          button_s1_agent_m0_lock;                                                                   // button_s1_agent:m0_lock -> button_s1_translator:uav_lock
	wire   [31:0] button_s1_agent_m0_writedata;                                                              // button_s1_agent:m0_writedata -> button_s1_translator:uav_writedata
	wire          button_s1_agent_m0_write;                                                                  // button_s1_agent:m0_write -> button_s1_translator:uav_write
	wire    [2:0] button_s1_agent_m0_burstcount;                                                             // button_s1_agent:m0_burstcount -> button_s1_translator:uav_burstcount
	wire          button_s1_agent_rf_source_valid;                                                           // button_s1_agent:rf_source_valid -> button_s1_agent_rsp_fifo:in_valid
	wire  [105:0] button_s1_agent_rf_source_data;                                                            // button_s1_agent:rf_source_data -> button_s1_agent_rsp_fifo:in_data
	wire          button_s1_agent_rf_source_ready;                                                           // button_s1_agent_rsp_fifo:in_ready -> button_s1_agent:rf_source_ready
	wire          button_s1_agent_rf_source_startofpacket;                                                   // button_s1_agent:rf_source_startofpacket -> button_s1_agent_rsp_fifo:in_startofpacket
	wire          button_s1_agent_rf_source_endofpacket;                                                     // button_s1_agent:rf_source_endofpacket -> button_s1_agent_rsp_fifo:in_endofpacket
	wire          button_s1_agent_rsp_fifo_out_valid;                                                        // button_s1_agent_rsp_fifo:out_valid -> button_s1_agent:rf_sink_valid
	wire  [105:0] button_s1_agent_rsp_fifo_out_data;                                                         // button_s1_agent_rsp_fifo:out_data -> button_s1_agent:rf_sink_data
	wire          button_s1_agent_rsp_fifo_out_ready;                                                        // button_s1_agent:rf_sink_ready -> button_s1_agent_rsp_fifo:out_ready
	wire          button_s1_agent_rsp_fifo_out_startofpacket;                                                // button_s1_agent_rsp_fifo:out_startofpacket -> button_s1_agent:rf_sink_startofpacket
	wire          button_s1_agent_rsp_fifo_out_endofpacket;                                                  // button_s1_agent_rsp_fifo:out_endofpacket -> button_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                     // cmd_mux_014:src_valid -> button_s1_agent:cp_valid
	wire  [104:0] cmd_mux_014_src_data;                                                                      // cmd_mux_014:src_data -> button_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                     // button_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [29:0] cmd_mux_014_src_channel;                                                                   // cmd_mux_014:src_channel -> button_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                             // cmd_mux_014:src_startofpacket -> button_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                               // cmd_mux_014:src_endofpacket -> button_s1_agent:cp_endofpacket
	wire   [31:0] timer4_s1_agent_m0_readdata;                                                               // timer4_s1_translator:uav_readdata -> timer4_s1_agent:m0_readdata
	wire          timer4_s1_agent_m0_waitrequest;                                                            // timer4_s1_translator:uav_waitrequest -> timer4_s1_agent:m0_waitrequest
	wire          timer4_s1_agent_m0_debugaccess;                                                            // timer4_s1_agent:m0_debugaccess -> timer4_s1_translator:uav_debugaccess
	wire   [24:0] timer4_s1_agent_m0_address;                                                                // timer4_s1_agent:m0_address -> timer4_s1_translator:uav_address
	wire    [3:0] timer4_s1_agent_m0_byteenable;                                                             // timer4_s1_agent:m0_byteenable -> timer4_s1_translator:uav_byteenable
	wire          timer4_s1_agent_m0_read;                                                                   // timer4_s1_agent:m0_read -> timer4_s1_translator:uav_read
	wire          timer4_s1_agent_m0_readdatavalid;                                                          // timer4_s1_translator:uav_readdatavalid -> timer4_s1_agent:m0_readdatavalid
	wire          timer4_s1_agent_m0_lock;                                                                   // timer4_s1_agent:m0_lock -> timer4_s1_translator:uav_lock
	wire   [31:0] timer4_s1_agent_m0_writedata;                                                              // timer4_s1_agent:m0_writedata -> timer4_s1_translator:uav_writedata
	wire          timer4_s1_agent_m0_write;                                                                  // timer4_s1_agent:m0_write -> timer4_s1_translator:uav_write
	wire    [2:0] timer4_s1_agent_m0_burstcount;                                                             // timer4_s1_agent:m0_burstcount -> timer4_s1_translator:uav_burstcount
	wire          timer4_s1_agent_rf_source_valid;                                                           // timer4_s1_agent:rf_source_valid -> timer4_s1_agent_rsp_fifo:in_valid
	wire  [105:0] timer4_s1_agent_rf_source_data;                                                            // timer4_s1_agent:rf_source_data -> timer4_s1_agent_rsp_fifo:in_data
	wire          timer4_s1_agent_rf_source_ready;                                                           // timer4_s1_agent_rsp_fifo:in_ready -> timer4_s1_agent:rf_source_ready
	wire          timer4_s1_agent_rf_source_startofpacket;                                                   // timer4_s1_agent:rf_source_startofpacket -> timer4_s1_agent_rsp_fifo:in_startofpacket
	wire          timer4_s1_agent_rf_source_endofpacket;                                                     // timer4_s1_agent:rf_source_endofpacket -> timer4_s1_agent_rsp_fifo:in_endofpacket
	wire          timer4_s1_agent_rsp_fifo_out_valid;                                                        // timer4_s1_agent_rsp_fifo:out_valid -> timer4_s1_agent:rf_sink_valid
	wire  [105:0] timer4_s1_agent_rsp_fifo_out_data;                                                         // timer4_s1_agent_rsp_fifo:out_data -> timer4_s1_agent:rf_sink_data
	wire          timer4_s1_agent_rsp_fifo_out_ready;                                                        // timer4_s1_agent:rf_sink_ready -> timer4_s1_agent_rsp_fifo:out_ready
	wire          timer4_s1_agent_rsp_fifo_out_startofpacket;                                                // timer4_s1_agent_rsp_fifo:out_startofpacket -> timer4_s1_agent:rf_sink_startofpacket
	wire          timer4_s1_agent_rsp_fifo_out_endofpacket;                                                  // timer4_s1_agent_rsp_fifo:out_endofpacket -> timer4_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                     // cmd_mux_015:src_valid -> timer4_s1_agent:cp_valid
	wire  [104:0] cmd_mux_015_src_data;                                                                      // cmd_mux_015:src_data -> timer4_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                     // timer4_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [29:0] cmd_mux_015_src_channel;                                                                   // cmd_mux_015:src_channel -> timer4_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                             // cmd_mux_015:src_startofpacket -> timer4_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                               // cmd_mux_015:src_endofpacket -> timer4_s1_agent:cp_endofpacket
	wire   [31:0] timer3_s1_agent_m0_readdata;                                                               // timer3_s1_translator:uav_readdata -> timer3_s1_agent:m0_readdata
	wire          timer3_s1_agent_m0_waitrequest;                                                            // timer3_s1_translator:uav_waitrequest -> timer3_s1_agent:m0_waitrequest
	wire          timer3_s1_agent_m0_debugaccess;                                                            // timer3_s1_agent:m0_debugaccess -> timer3_s1_translator:uav_debugaccess
	wire   [24:0] timer3_s1_agent_m0_address;                                                                // timer3_s1_agent:m0_address -> timer3_s1_translator:uav_address
	wire    [3:0] timer3_s1_agent_m0_byteenable;                                                             // timer3_s1_agent:m0_byteenable -> timer3_s1_translator:uav_byteenable
	wire          timer3_s1_agent_m0_read;                                                                   // timer3_s1_agent:m0_read -> timer3_s1_translator:uav_read
	wire          timer3_s1_agent_m0_readdatavalid;                                                          // timer3_s1_translator:uav_readdatavalid -> timer3_s1_agent:m0_readdatavalid
	wire          timer3_s1_agent_m0_lock;                                                                   // timer3_s1_agent:m0_lock -> timer3_s1_translator:uav_lock
	wire   [31:0] timer3_s1_agent_m0_writedata;                                                              // timer3_s1_agent:m0_writedata -> timer3_s1_translator:uav_writedata
	wire          timer3_s1_agent_m0_write;                                                                  // timer3_s1_agent:m0_write -> timer3_s1_translator:uav_write
	wire    [2:0] timer3_s1_agent_m0_burstcount;                                                             // timer3_s1_agent:m0_burstcount -> timer3_s1_translator:uav_burstcount
	wire          timer3_s1_agent_rf_source_valid;                                                           // timer3_s1_agent:rf_source_valid -> timer3_s1_agent_rsp_fifo:in_valid
	wire  [105:0] timer3_s1_agent_rf_source_data;                                                            // timer3_s1_agent:rf_source_data -> timer3_s1_agent_rsp_fifo:in_data
	wire          timer3_s1_agent_rf_source_ready;                                                           // timer3_s1_agent_rsp_fifo:in_ready -> timer3_s1_agent:rf_source_ready
	wire          timer3_s1_agent_rf_source_startofpacket;                                                   // timer3_s1_agent:rf_source_startofpacket -> timer3_s1_agent_rsp_fifo:in_startofpacket
	wire          timer3_s1_agent_rf_source_endofpacket;                                                     // timer3_s1_agent:rf_source_endofpacket -> timer3_s1_agent_rsp_fifo:in_endofpacket
	wire          timer3_s1_agent_rsp_fifo_out_valid;                                                        // timer3_s1_agent_rsp_fifo:out_valid -> timer3_s1_agent:rf_sink_valid
	wire  [105:0] timer3_s1_agent_rsp_fifo_out_data;                                                         // timer3_s1_agent_rsp_fifo:out_data -> timer3_s1_agent:rf_sink_data
	wire          timer3_s1_agent_rsp_fifo_out_ready;                                                        // timer3_s1_agent:rf_sink_ready -> timer3_s1_agent_rsp_fifo:out_ready
	wire          timer3_s1_agent_rsp_fifo_out_startofpacket;                                                // timer3_s1_agent_rsp_fifo:out_startofpacket -> timer3_s1_agent:rf_sink_startofpacket
	wire          timer3_s1_agent_rsp_fifo_out_endofpacket;                                                  // timer3_s1_agent_rsp_fifo:out_endofpacket -> timer3_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                     // cmd_mux_016:src_valid -> timer3_s1_agent:cp_valid
	wire  [104:0] cmd_mux_016_src_data;                                                                      // cmd_mux_016:src_data -> timer3_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                     // timer3_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [29:0] cmd_mux_016_src_channel;                                                                   // cmd_mux_016:src_channel -> timer3_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                             // cmd_mux_016:src_startofpacket -> timer3_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                               // cmd_mux_016:src_endofpacket -> timer3_s1_agent:cp_endofpacket
	wire   [31:0] timer1_s1_agent_m0_readdata;                                                               // timer1_s1_translator:uav_readdata -> timer1_s1_agent:m0_readdata
	wire          timer1_s1_agent_m0_waitrequest;                                                            // timer1_s1_translator:uav_waitrequest -> timer1_s1_agent:m0_waitrequest
	wire          timer1_s1_agent_m0_debugaccess;                                                            // timer1_s1_agent:m0_debugaccess -> timer1_s1_translator:uav_debugaccess
	wire   [24:0] timer1_s1_agent_m0_address;                                                                // timer1_s1_agent:m0_address -> timer1_s1_translator:uav_address
	wire    [3:0] timer1_s1_agent_m0_byteenable;                                                             // timer1_s1_agent:m0_byteenable -> timer1_s1_translator:uav_byteenable
	wire          timer1_s1_agent_m0_read;                                                                   // timer1_s1_agent:m0_read -> timer1_s1_translator:uav_read
	wire          timer1_s1_agent_m0_readdatavalid;                                                          // timer1_s1_translator:uav_readdatavalid -> timer1_s1_agent:m0_readdatavalid
	wire          timer1_s1_agent_m0_lock;                                                                   // timer1_s1_agent:m0_lock -> timer1_s1_translator:uav_lock
	wire   [31:0] timer1_s1_agent_m0_writedata;                                                              // timer1_s1_agent:m0_writedata -> timer1_s1_translator:uav_writedata
	wire          timer1_s1_agent_m0_write;                                                                  // timer1_s1_agent:m0_write -> timer1_s1_translator:uav_write
	wire    [2:0] timer1_s1_agent_m0_burstcount;                                                             // timer1_s1_agent:m0_burstcount -> timer1_s1_translator:uav_burstcount
	wire          timer1_s1_agent_rf_source_valid;                                                           // timer1_s1_agent:rf_source_valid -> timer1_s1_agent_rsp_fifo:in_valid
	wire  [105:0] timer1_s1_agent_rf_source_data;                                                            // timer1_s1_agent:rf_source_data -> timer1_s1_agent_rsp_fifo:in_data
	wire          timer1_s1_agent_rf_source_ready;                                                           // timer1_s1_agent_rsp_fifo:in_ready -> timer1_s1_agent:rf_source_ready
	wire          timer1_s1_agent_rf_source_startofpacket;                                                   // timer1_s1_agent:rf_source_startofpacket -> timer1_s1_agent_rsp_fifo:in_startofpacket
	wire          timer1_s1_agent_rf_source_endofpacket;                                                     // timer1_s1_agent:rf_source_endofpacket -> timer1_s1_agent_rsp_fifo:in_endofpacket
	wire          timer1_s1_agent_rsp_fifo_out_valid;                                                        // timer1_s1_agent_rsp_fifo:out_valid -> timer1_s1_agent:rf_sink_valid
	wire  [105:0] timer1_s1_agent_rsp_fifo_out_data;                                                         // timer1_s1_agent_rsp_fifo:out_data -> timer1_s1_agent:rf_sink_data
	wire          timer1_s1_agent_rsp_fifo_out_ready;                                                        // timer1_s1_agent:rf_sink_ready -> timer1_s1_agent_rsp_fifo:out_ready
	wire          timer1_s1_agent_rsp_fifo_out_startofpacket;                                                // timer1_s1_agent_rsp_fifo:out_startofpacket -> timer1_s1_agent:rf_sink_startofpacket
	wire          timer1_s1_agent_rsp_fifo_out_endofpacket;                                                  // timer1_s1_agent_rsp_fifo:out_endofpacket -> timer1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                                     // cmd_mux_017:src_valid -> timer1_s1_agent:cp_valid
	wire  [104:0] cmd_mux_017_src_data;                                                                      // cmd_mux_017:src_data -> timer1_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                     // timer1_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [29:0] cmd_mux_017_src_channel;                                                                   // cmd_mux_017:src_channel -> timer1_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                             // cmd_mux_017:src_startofpacket -> timer1_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                               // cmd_mux_017:src_endofpacket -> timer1_s1_agent:cp_endofpacket
	wire   [31:0] timer_s1_agent_m0_readdata;                                                                // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                                             // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                                             // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire   [24:0] timer_s1_agent_m0_address;                                                                 // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                                              // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                                    // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                                           // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                                    // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                                               // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                                   // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                                              // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                                            // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [105:0] timer_s1_agent_rf_source_data;                                                             // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                                            // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                                    // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                                      // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                                         // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [105:0] timer_s1_agent_rsp_fifo_out_data;                                                          // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                                         // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                                 // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                                   // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                                     // cmd_mux_018:src_valid -> timer_s1_agent:cp_valid
	wire  [104:0] cmd_mux_018_src_data;                                                                      // cmd_mux_018:src_data -> timer_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                     // timer_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [29:0] cmd_mux_018_src_channel;                                                                   // cmd_mux_018:src_channel -> timer_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                             // cmd_mux_018:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                               // cmd_mux_018:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire   [31:0] timestamp_timer_s1_agent_m0_readdata;                                                      // timestamp_timer_s1_translator:uav_readdata -> timestamp_timer_s1_agent:m0_readdata
	wire          timestamp_timer_s1_agent_m0_waitrequest;                                                   // timestamp_timer_s1_translator:uav_waitrequest -> timestamp_timer_s1_agent:m0_waitrequest
	wire          timestamp_timer_s1_agent_m0_debugaccess;                                                   // timestamp_timer_s1_agent:m0_debugaccess -> timestamp_timer_s1_translator:uav_debugaccess
	wire   [24:0] timestamp_timer_s1_agent_m0_address;                                                       // timestamp_timer_s1_agent:m0_address -> timestamp_timer_s1_translator:uav_address
	wire    [3:0] timestamp_timer_s1_agent_m0_byteenable;                                                    // timestamp_timer_s1_agent:m0_byteenable -> timestamp_timer_s1_translator:uav_byteenable
	wire          timestamp_timer_s1_agent_m0_read;                                                          // timestamp_timer_s1_agent:m0_read -> timestamp_timer_s1_translator:uav_read
	wire          timestamp_timer_s1_agent_m0_readdatavalid;                                                 // timestamp_timer_s1_translator:uav_readdatavalid -> timestamp_timer_s1_agent:m0_readdatavalid
	wire          timestamp_timer_s1_agent_m0_lock;                                                          // timestamp_timer_s1_agent:m0_lock -> timestamp_timer_s1_translator:uav_lock
	wire   [31:0] timestamp_timer_s1_agent_m0_writedata;                                                     // timestamp_timer_s1_agent:m0_writedata -> timestamp_timer_s1_translator:uav_writedata
	wire          timestamp_timer_s1_agent_m0_write;                                                         // timestamp_timer_s1_agent:m0_write -> timestamp_timer_s1_translator:uav_write
	wire    [2:0] timestamp_timer_s1_agent_m0_burstcount;                                                    // timestamp_timer_s1_agent:m0_burstcount -> timestamp_timer_s1_translator:uav_burstcount
	wire          timestamp_timer_s1_agent_rf_source_valid;                                                  // timestamp_timer_s1_agent:rf_source_valid -> timestamp_timer_s1_agent_rsp_fifo:in_valid
	wire  [105:0] timestamp_timer_s1_agent_rf_source_data;                                                   // timestamp_timer_s1_agent:rf_source_data -> timestamp_timer_s1_agent_rsp_fifo:in_data
	wire          timestamp_timer_s1_agent_rf_source_ready;                                                  // timestamp_timer_s1_agent_rsp_fifo:in_ready -> timestamp_timer_s1_agent:rf_source_ready
	wire          timestamp_timer_s1_agent_rf_source_startofpacket;                                          // timestamp_timer_s1_agent:rf_source_startofpacket -> timestamp_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          timestamp_timer_s1_agent_rf_source_endofpacket;                                            // timestamp_timer_s1_agent:rf_source_endofpacket -> timestamp_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          timestamp_timer_s1_agent_rsp_fifo_out_valid;                                               // timestamp_timer_s1_agent_rsp_fifo:out_valid -> timestamp_timer_s1_agent:rf_sink_valid
	wire  [105:0] timestamp_timer_s1_agent_rsp_fifo_out_data;                                                // timestamp_timer_s1_agent_rsp_fifo:out_data -> timestamp_timer_s1_agent:rf_sink_data
	wire          timestamp_timer_s1_agent_rsp_fifo_out_ready;                                               // timestamp_timer_s1_agent:rf_sink_ready -> timestamp_timer_s1_agent_rsp_fifo:out_ready
	wire          timestamp_timer_s1_agent_rsp_fifo_out_startofpacket;                                       // timestamp_timer_s1_agent_rsp_fifo:out_startofpacket -> timestamp_timer_s1_agent:rf_sink_startofpacket
	wire          timestamp_timer_s1_agent_rsp_fifo_out_endofpacket;                                         // timestamp_timer_s1_agent_rsp_fifo:out_endofpacket -> timestamp_timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                                     // cmd_mux_019:src_valid -> timestamp_timer_s1_agent:cp_valid
	wire  [104:0] cmd_mux_019_src_data;                                                                      // cmd_mux_019:src_data -> timestamp_timer_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                     // timestamp_timer_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [29:0] cmd_mux_019_src_channel;                                                                   // cmd_mux_019:src_channel -> timestamp_timer_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                             // cmd_mux_019:src_startofpacket -> timestamp_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                               // cmd_mux_019:src_endofpacket -> timestamp_timer_s1_agent:cp_endofpacket
	wire   [31:0] timer0_s1_agent_m0_readdata;                                                               // timer0_s1_translator:uav_readdata -> timer0_s1_agent:m0_readdata
	wire          timer0_s1_agent_m0_waitrequest;                                                            // timer0_s1_translator:uav_waitrequest -> timer0_s1_agent:m0_waitrequest
	wire          timer0_s1_agent_m0_debugaccess;                                                            // timer0_s1_agent:m0_debugaccess -> timer0_s1_translator:uav_debugaccess
	wire   [24:0] timer0_s1_agent_m0_address;                                                                // timer0_s1_agent:m0_address -> timer0_s1_translator:uav_address
	wire    [3:0] timer0_s1_agent_m0_byteenable;                                                             // timer0_s1_agent:m0_byteenable -> timer0_s1_translator:uav_byteenable
	wire          timer0_s1_agent_m0_read;                                                                   // timer0_s1_agent:m0_read -> timer0_s1_translator:uav_read
	wire          timer0_s1_agent_m0_readdatavalid;                                                          // timer0_s1_translator:uav_readdatavalid -> timer0_s1_agent:m0_readdatavalid
	wire          timer0_s1_agent_m0_lock;                                                                   // timer0_s1_agent:m0_lock -> timer0_s1_translator:uav_lock
	wire   [31:0] timer0_s1_agent_m0_writedata;                                                              // timer0_s1_agent:m0_writedata -> timer0_s1_translator:uav_writedata
	wire          timer0_s1_agent_m0_write;                                                                  // timer0_s1_agent:m0_write -> timer0_s1_translator:uav_write
	wire    [2:0] timer0_s1_agent_m0_burstcount;                                                             // timer0_s1_agent:m0_burstcount -> timer0_s1_translator:uav_burstcount
	wire          timer0_s1_agent_rf_source_valid;                                                           // timer0_s1_agent:rf_source_valid -> timer0_s1_agent_rsp_fifo:in_valid
	wire  [105:0] timer0_s1_agent_rf_source_data;                                                            // timer0_s1_agent:rf_source_data -> timer0_s1_agent_rsp_fifo:in_data
	wire          timer0_s1_agent_rf_source_ready;                                                           // timer0_s1_agent_rsp_fifo:in_ready -> timer0_s1_agent:rf_source_ready
	wire          timer0_s1_agent_rf_source_startofpacket;                                                   // timer0_s1_agent:rf_source_startofpacket -> timer0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer0_s1_agent_rf_source_endofpacket;                                                     // timer0_s1_agent:rf_source_endofpacket -> timer0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer0_s1_agent_rsp_fifo_out_valid;                                                        // timer0_s1_agent_rsp_fifo:out_valid -> timer0_s1_agent:rf_sink_valid
	wire  [105:0] timer0_s1_agent_rsp_fifo_out_data;                                                         // timer0_s1_agent_rsp_fifo:out_data -> timer0_s1_agent:rf_sink_data
	wire          timer0_s1_agent_rsp_fifo_out_ready;                                                        // timer0_s1_agent:rf_sink_ready -> timer0_s1_agent_rsp_fifo:out_ready
	wire          timer0_s1_agent_rsp_fifo_out_startofpacket;                                                // timer0_s1_agent_rsp_fifo:out_startofpacket -> timer0_s1_agent:rf_sink_startofpacket
	wire          timer0_s1_agent_rsp_fifo_out_endofpacket;                                                  // timer0_s1_agent_rsp_fifo:out_endofpacket -> timer0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                                     // cmd_mux_020:src_valid -> timer0_s1_agent:cp_valid
	wire  [104:0] cmd_mux_020_src_data;                                                                      // cmd_mux_020:src_data -> timer0_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                     // timer0_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [29:0] cmd_mux_020_src_channel;                                                                   // cmd_mux_020:src_channel -> timer0_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                             // cmd_mux_020:src_startofpacket -> timer0_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                               // cmd_mux_020:src_endofpacket -> timer0_s1_agent:cp_endofpacket
	wire   [31:0] hex_timer_s1_agent_m0_readdata;                                                            // hex_timer_s1_translator:uav_readdata -> hex_timer_s1_agent:m0_readdata
	wire          hex_timer_s1_agent_m0_waitrequest;                                                         // hex_timer_s1_translator:uav_waitrequest -> hex_timer_s1_agent:m0_waitrequest
	wire          hex_timer_s1_agent_m0_debugaccess;                                                         // hex_timer_s1_agent:m0_debugaccess -> hex_timer_s1_translator:uav_debugaccess
	wire   [24:0] hex_timer_s1_agent_m0_address;                                                             // hex_timer_s1_agent:m0_address -> hex_timer_s1_translator:uav_address
	wire    [3:0] hex_timer_s1_agent_m0_byteenable;                                                          // hex_timer_s1_agent:m0_byteenable -> hex_timer_s1_translator:uav_byteenable
	wire          hex_timer_s1_agent_m0_read;                                                                // hex_timer_s1_agent:m0_read -> hex_timer_s1_translator:uav_read
	wire          hex_timer_s1_agent_m0_readdatavalid;                                                       // hex_timer_s1_translator:uav_readdatavalid -> hex_timer_s1_agent:m0_readdatavalid
	wire          hex_timer_s1_agent_m0_lock;                                                                // hex_timer_s1_agent:m0_lock -> hex_timer_s1_translator:uav_lock
	wire   [31:0] hex_timer_s1_agent_m0_writedata;                                                           // hex_timer_s1_agent:m0_writedata -> hex_timer_s1_translator:uav_writedata
	wire          hex_timer_s1_agent_m0_write;                                                               // hex_timer_s1_agent:m0_write -> hex_timer_s1_translator:uav_write
	wire    [2:0] hex_timer_s1_agent_m0_burstcount;                                                          // hex_timer_s1_agent:m0_burstcount -> hex_timer_s1_translator:uav_burstcount
	wire          hex_timer_s1_agent_rf_source_valid;                                                        // hex_timer_s1_agent:rf_source_valid -> hex_timer_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hex_timer_s1_agent_rf_source_data;                                                         // hex_timer_s1_agent:rf_source_data -> hex_timer_s1_agent_rsp_fifo:in_data
	wire          hex_timer_s1_agent_rf_source_ready;                                                        // hex_timer_s1_agent_rsp_fifo:in_ready -> hex_timer_s1_agent:rf_source_ready
	wire          hex_timer_s1_agent_rf_source_startofpacket;                                                // hex_timer_s1_agent:rf_source_startofpacket -> hex_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          hex_timer_s1_agent_rf_source_endofpacket;                                                  // hex_timer_s1_agent:rf_source_endofpacket -> hex_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          hex_timer_s1_agent_rsp_fifo_out_valid;                                                     // hex_timer_s1_agent_rsp_fifo:out_valid -> hex_timer_s1_agent:rf_sink_valid
	wire  [105:0] hex_timer_s1_agent_rsp_fifo_out_data;                                                      // hex_timer_s1_agent_rsp_fifo:out_data -> hex_timer_s1_agent:rf_sink_data
	wire          hex_timer_s1_agent_rsp_fifo_out_ready;                                                     // hex_timer_s1_agent:rf_sink_ready -> hex_timer_s1_agent_rsp_fifo:out_ready
	wire          hex_timer_s1_agent_rsp_fifo_out_startofpacket;                                             // hex_timer_s1_agent_rsp_fifo:out_startofpacket -> hex_timer_s1_agent:rf_sink_startofpacket
	wire          hex_timer_s1_agent_rsp_fifo_out_endofpacket;                                               // hex_timer_s1_agent_rsp_fifo:out_endofpacket -> hex_timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                                     // cmd_mux_021:src_valid -> hex_timer_s1_agent:cp_valid
	wire  [104:0] cmd_mux_021_src_data;                                                                      // cmd_mux_021:src_data -> hex_timer_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                                     // hex_timer_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [29:0] cmd_mux_021_src_channel;                                                                   // cmd_mux_021:src_channel -> hex_timer_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                             // cmd_mux_021:src_startofpacket -> hex_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                               // cmd_mux_021:src_endofpacket -> hex_timer_s1_agent:cp_endofpacket
	wire   [31:0] acc_timer_s1_agent_m0_readdata;                                                            // acc_timer_s1_translator:uav_readdata -> acc_timer_s1_agent:m0_readdata
	wire          acc_timer_s1_agent_m0_waitrequest;                                                         // acc_timer_s1_translator:uav_waitrequest -> acc_timer_s1_agent:m0_waitrequest
	wire          acc_timer_s1_agent_m0_debugaccess;                                                         // acc_timer_s1_agent:m0_debugaccess -> acc_timer_s1_translator:uav_debugaccess
	wire   [24:0] acc_timer_s1_agent_m0_address;                                                             // acc_timer_s1_agent:m0_address -> acc_timer_s1_translator:uav_address
	wire    [3:0] acc_timer_s1_agent_m0_byteenable;                                                          // acc_timer_s1_agent:m0_byteenable -> acc_timer_s1_translator:uav_byteenable
	wire          acc_timer_s1_agent_m0_read;                                                                // acc_timer_s1_agent:m0_read -> acc_timer_s1_translator:uav_read
	wire          acc_timer_s1_agent_m0_readdatavalid;                                                       // acc_timer_s1_translator:uav_readdatavalid -> acc_timer_s1_agent:m0_readdatavalid
	wire          acc_timer_s1_agent_m0_lock;                                                                // acc_timer_s1_agent:m0_lock -> acc_timer_s1_translator:uav_lock
	wire   [31:0] acc_timer_s1_agent_m0_writedata;                                                           // acc_timer_s1_agent:m0_writedata -> acc_timer_s1_translator:uav_writedata
	wire          acc_timer_s1_agent_m0_write;                                                               // acc_timer_s1_agent:m0_write -> acc_timer_s1_translator:uav_write
	wire    [2:0] acc_timer_s1_agent_m0_burstcount;                                                          // acc_timer_s1_agent:m0_burstcount -> acc_timer_s1_translator:uav_burstcount
	wire          acc_timer_s1_agent_rf_source_valid;                                                        // acc_timer_s1_agent:rf_source_valid -> acc_timer_s1_agent_rsp_fifo:in_valid
	wire  [105:0] acc_timer_s1_agent_rf_source_data;                                                         // acc_timer_s1_agent:rf_source_data -> acc_timer_s1_agent_rsp_fifo:in_data
	wire          acc_timer_s1_agent_rf_source_ready;                                                        // acc_timer_s1_agent_rsp_fifo:in_ready -> acc_timer_s1_agent:rf_source_ready
	wire          acc_timer_s1_agent_rf_source_startofpacket;                                                // acc_timer_s1_agent:rf_source_startofpacket -> acc_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          acc_timer_s1_agent_rf_source_endofpacket;                                                  // acc_timer_s1_agent:rf_source_endofpacket -> acc_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          acc_timer_s1_agent_rsp_fifo_out_valid;                                                     // acc_timer_s1_agent_rsp_fifo:out_valid -> acc_timer_s1_agent:rf_sink_valid
	wire  [105:0] acc_timer_s1_agent_rsp_fifo_out_data;                                                      // acc_timer_s1_agent_rsp_fifo:out_data -> acc_timer_s1_agent:rf_sink_data
	wire          acc_timer_s1_agent_rsp_fifo_out_ready;                                                     // acc_timer_s1_agent:rf_sink_ready -> acc_timer_s1_agent_rsp_fifo:out_ready
	wire          acc_timer_s1_agent_rsp_fifo_out_startofpacket;                                             // acc_timer_s1_agent_rsp_fifo:out_startofpacket -> acc_timer_s1_agent:rf_sink_startofpacket
	wire          acc_timer_s1_agent_rsp_fifo_out_endofpacket;                                               // acc_timer_s1_agent_rsp_fifo:out_endofpacket -> acc_timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                                     // cmd_mux_022:src_valid -> acc_timer_s1_agent:cp_valid
	wire  [104:0] cmd_mux_022_src_data;                                                                      // cmd_mux_022:src_data -> acc_timer_s1_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                                     // acc_timer_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [29:0] cmd_mux_022_src_channel;                                                                   // cmd_mux_022:src_channel -> acc_timer_s1_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                             // cmd_mux_022:src_startofpacket -> acc_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                               // cmd_mux_022:src_endofpacket -> acc_timer_s1_agent:cp_endofpacket
	wire   [31:0] hardware_out_x_s1_agent_m0_readdata;                                                       // hardware_out_x_s1_translator:uav_readdata -> hardware_out_x_s1_agent:m0_readdata
	wire          hardware_out_x_s1_agent_m0_waitrequest;                                                    // hardware_out_x_s1_translator:uav_waitrequest -> hardware_out_x_s1_agent:m0_waitrequest
	wire          hardware_out_x_s1_agent_m0_debugaccess;                                                    // hardware_out_x_s1_agent:m0_debugaccess -> hardware_out_x_s1_translator:uav_debugaccess
	wire   [24:0] hardware_out_x_s1_agent_m0_address;                                                        // hardware_out_x_s1_agent:m0_address -> hardware_out_x_s1_translator:uav_address
	wire    [3:0] hardware_out_x_s1_agent_m0_byteenable;                                                     // hardware_out_x_s1_agent:m0_byteenable -> hardware_out_x_s1_translator:uav_byteenable
	wire          hardware_out_x_s1_agent_m0_read;                                                           // hardware_out_x_s1_agent:m0_read -> hardware_out_x_s1_translator:uav_read
	wire          hardware_out_x_s1_agent_m0_readdatavalid;                                                  // hardware_out_x_s1_translator:uav_readdatavalid -> hardware_out_x_s1_agent:m0_readdatavalid
	wire          hardware_out_x_s1_agent_m0_lock;                                                           // hardware_out_x_s1_agent:m0_lock -> hardware_out_x_s1_translator:uav_lock
	wire   [31:0] hardware_out_x_s1_agent_m0_writedata;                                                      // hardware_out_x_s1_agent:m0_writedata -> hardware_out_x_s1_translator:uav_writedata
	wire          hardware_out_x_s1_agent_m0_write;                                                          // hardware_out_x_s1_agent:m0_write -> hardware_out_x_s1_translator:uav_write
	wire    [2:0] hardware_out_x_s1_agent_m0_burstcount;                                                     // hardware_out_x_s1_agent:m0_burstcount -> hardware_out_x_s1_translator:uav_burstcount
	wire          hardware_out_x_s1_agent_rf_source_valid;                                                   // hardware_out_x_s1_agent:rf_source_valid -> hardware_out_x_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hardware_out_x_s1_agent_rf_source_data;                                                    // hardware_out_x_s1_agent:rf_source_data -> hardware_out_x_s1_agent_rsp_fifo:in_data
	wire          hardware_out_x_s1_agent_rf_source_ready;                                                   // hardware_out_x_s1_agent_rsp_fifo:in_ready -> hardware_out_x_s1_agent:rf_source_ready
	wire          hardware_out_x_s1_agent_rf_source_startofpacket;                                           // hardware_out_x_s1_agent:rf_source_startofpacket -> hardware_out_x_s1_agent_rsp_fifo:in_startofpacket
	wire          hardware_out_x_s1_agent_rf_source_endofpacket;                                             // hardware_out_x_s1_agent:rf_source_endofpacket -> hardware_out_x_s1_agent_rsp_fifo:in_endofpacket
	wire          hardware_out_x_s1_agent_rsp_fifo_out_valid;                                                // hardware_out_x_s1_agent_rsp_fifo:out_valid -> hardware_out_x_s1_agent:rf_sink_valid
	wire  [105:0] hardware_out_x_s1_agent_rsp_fifo_out_data;                                                 // hardware_out_x_s1_agent_rsp_fifo:out_data -> hardware_out_x_s1_agent:rf_sink_data
	wire          hardware_out_x_s1_agent_rsp_fifo_out_ready;                                                // hardware_out_x_s1_agent:rf_sink_ready -> hardware_out_x_s1_agent_rsp_fifo:out_ready
	wire          hardware_out_x_s1_agent_rsp_fifo_out_startofpacket;                                        // hardware_out_x_s1_agent_rsp_fifo:out_startofpacket -> hardware_out_x_s1_agent:rf_sink_startofpacket
	wire          hardware_out_x_s1_agent_rsp_fifo_out_endofpacket;                                          // hardware_out_x_s1_agent_rsp_fifo:out_endofpacket -> hardware_out_x_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                                     // cmd_mux_023:src_valid -> hardware_out_x_s1_agent:cp_valid
	wire  [104:0] cmd_mux_023_src_data;                                                                      // cmd_mux_023:src_data -> hardware_out_x_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                                     // hardware_out_x_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [29:0] cmd_mux_023_src_channel;                                                                   // cmd_mux_023:src_channel -> hardware_out_x_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                             // cmd_mux_023:src_startofpacket -> hardware_out_x_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                               // cmd_mux_023:src_endofpacket -> hardware_out_x_s1_agent:cp_endofpacket
	wire   [31:0] hardware_in_x_s1_agent_m0_readdata;                                                        // hardware_in_x_s1_translator:uav_readdata -> hardware_in_x_s1_agent:m0_readdata
	wire          hardware_in_x_s1_agent_m0_waitrequest;                                                     // hardware_in_x_s1_translator:uav_waitrequest -> hardware_in_x_s1_agent:m0_waitrequest
	wire          hardware_in_x_s1_agent_m0_debugaccess;                                                     // hardware_in_x_s1_agent:m0_debugaccess -> hardware_in_x_s1_translator:uav_debugaccess
	wire   [24:0] hardware_in_x_s1_agent_m0_address;                                                         // hardware_in_x_s1_agent:m0_address -> hardware_in_x_s1_translator:uav_address
	wire    [3:0] hardware_in_x_s1_agent_m0_byteenable;                                                      // hardware_in_x_s1_agent:m0_byteenable -> hardware_in_x_s1_translator:uav_byteenable
	wire          hardware_in_x_s1_agent_m0_read;                                                            // hardware_in_x_s1_agent:m0_read -> hardware_in_x_s1_translator:uav_read
	wire          hardware_in_x_s1_agent_m0_readdatavalid;                                                   // hardware_in_x_s1_translator:uav_readdatavalid -> hardware_in_x_s1_agent:m0_readdatavalid
	wire          hardware_in_x_s1_agent_m0_lock;                                                            // hardware_in_x_s1_agent:m0_lock -> hardware_in_x_s1_translator:uav_lock
	wire   [31:0] hardware_in_x_s1_agent_m0_writedata;                                                       // hardware_in_x_s1_agent:m0_writedata -> hardware_in_x_s1_translator:uav_writedata
	wire          hardware_in_x_s1_agent_m0_write;                                                           // hardware_in_x_s1_agent:m0_write -> hardware_in_x_s1_translator:uav_write
	wire    [2:0] hardware_in_x_s1_agent_m0_burstcount;                                                      // hardware_in_x_s1_agent:m0_burstcount -> hardware_in_x_s1_translator:uav_burstcount
	wire          hardware_in_x_s1_agent_rf_source_valid;                                                    // hardware_in_x_s1_agent:rf_source_valid -> hardware_in_x_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hardware_in_x_s1_agent_rf_source_data;                                                     // hardware_in_x_s1_agent:rf_source_data -> hardware_in_x_s1_agent_rsp_fifo:in_data
	wire          hardware_in_x_s1_agent_rf_source_ready;                                                    // hardware_in_x_s1_agent_rsp_fifo:in_ready -> hardware_in_x_s1_agent:rf_source_ready
	wire          hardware_in_x_s1_agent_rf_source_startofpacket;                                            // hardware_in_x_s1_agent:rf_source_startofpacket -> hardware_in_x_s1_agent_rsp_fifo:in_startofpacket
	wire          hardware_in_x_s1_agent_rf_source_endofpacket;                                              // hardware_in_x_s1_agent:rf_source_endofpacket -> hardware_in_x_s1_agent_rsp_fifo:in_endofpacket
	wire          hardware_in_x_s1_agent_rsp_fifo_out_valid;                                                 // hardware_in_x_s1_agent_rsp_fifo:out_valid -> hardware_in_x_s1_agent:rf_sink_valid
	wire  [105:0] hardware_in_x_s1_agent_rsp_fifo_out_data;                                                  // hardware_in_x_s1_agent_rsp_fifo:out_data -> hardware_in_x_s1_agent:rf_sink_data
	wire          hardware_in_x_s1_agent_rsp_fifo_out_ready;                                                 // hardware_in_x_s1_agent:rf_sink_ready -> hardware_in_x_s1_agent_rsp_fifo:out_ready
	wire          hardware_in_x_s1_agent_rsp_fifo_out_startofpacket;                                         // hardware_in_x_s1_agent_rsp_fifo:out_startofpacket -> hardware_in_x_s1_agent:rf_sink_startofpacket
	wire          hardware_in_x_s1_agent_rsp_fifo_out_endofpacket;                                           // hardware_in_x_s1_agent_rsp_fifo:out_endofpacket -> hardware_in_x_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                                     // cmd_mux_024:src_valid -> hardware_in_x_s1_agent:cp_valid
	wire  [104:0] cmd_mux_024_src_data;                                                                      // cmd_mux_024:src_data -> hardware_in_x_s1_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                                     // hardware_in_x_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [29:0] cmd_mux_024_src_channel;                                                                   // cmd_mux_024:src_channel -> hardware_in_x_s1_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                             // cmd_mux_024:src_startofpacket -> hardware_in_x_s1_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                               // cmd_mux_024:src_endofpacket -> hardware_in_x_s1_agent:cp_endofpacket
	wire   [31:0] hardware_clocks_s1_agent_m0_readdata;                                                      // hardware_clocks_s1_translator:uav_readdata -> hardware_clocks_s1_agent:m0_readdata
	wire          hardware_clocks_s1_agent_m0_waitrequest;                                                   // hardware_clocks_s1_translator:uav_waitrequest -> hardware_clocks_s1_agent:m0_waitrequest
	wire          hardware_clocks_s1_agent_m0_debugaccess;                                                   // hardware_clocks_s1_agent:m0_debugaccess -> hardware_clocks_s1_translator:uav_debugaccess
	wire   [24:0] hardware_clocks_s1_agent_m0_address;                                                       // hardware_clocks_s1_agent:m0_address -> hardware_clocks_s1_translator:uav_address
	wire    [3:0] hardware_clocks_s1_agent_m0_byteenable;                                                    // hardware_clocks_s1_agent:m0_byteenable -> hardware_clocks_s1_translator:uav_byteenable
	wire          hardware_clocks_s1_agent_m0_read;                                                          // hardware_clocks_s1_agent:m0_read -> hardware_clocks_s1_translator:uav_read
	wire          hardware_clocks_s1_agent_m0_readdatavalid;                                                 // hardware_clocks_s1_translator:uav_readdatavalid -> hardware_clocks_s1_agent:m0_readdatavalid
	wire          hardware_clocks_s1_agent_m0_lock;                                                          // hardware_clocks_s1_agent:m0_lock -> hardware_clocks_s1_translator:uav_lock
	wire   [31:0] hardware_clocks_s1_agent_m0_writedata;                                                     // hardware_clocks_s1_agent:m0_writedata -> hardware_clocks_s1_translator:uav_writedata
	wire          hardware_clocks_s1_agent_m0_write;                                                         // hardware_clocks_s1_agent:m0_write -> hardware_clocks_s1_translator:uav_write
	wire    [2:0] hardware_clocks_s1_agent_m0_burstcount;                                                    // hardware_clocks_s1_agent:m0_burstcount -> hardware_clocks_s1_translator:uav_burstcount
	wire          hardware_clocks_s1_agent_rf_source_valid;                                                  // hardware_clocks_s1_agent:rf_source_valid -> hardware_clocks_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hardware_clocks_s1_agent_rf_source_data;                                                   // hardware_clocks_s1_agent:rf_source_data -> hardware_clocks_s1_agent_rsp_fifo:in_data
	wire          hardware_clocks_s1_agent_rf_source_ready;                                                  // hardware_clocks_s1_agent_rsp_fifo:in_ready -> hardware_clocks_s1_agent:rf_source_ready
	wire          hardware_clocks_s1_agent_rf_source_startofpacket;                                          // hardware_clocks_s1_agent:rf_source_startofpacket -> hardware_clocks_s1_agent_rsp_fifo:in_startofpacket
	wire          hardware_clocks_s1_agent_rf_source_endofpacket;                                            // hardware_clocks_s1_agent:rf_source_endofpacket -> hardware_clocks_s1_agent_rsp_fifo:in_endofpacket
	wire          hardware_clocks_s1_agent_rsp_fifo_out_valid;                                               // hardware_clocks_s1_agent_rsp_fifo:out_valid -> hardware_clocks_s1_agent:rf_sink_valid
	wire  [105:0] hardware_clocks_s1_agent_rsp_fifo_out_data;                                                // hardware_clocks_s1_agent_rsp_fifo:out_data -> hardware_clocks_s1_agent:rf_sink_data
	wire          hardware_clocks_s1_agent_rsp_fifo_out_ready;                                               // hardware_clocks_s1_agent:rf_sink_ready -> hardware_clocks_s1_agent_rsp_fifo:out_ready
	wire          hardware_clocks_s1_agent_rsp_fifo_out_startofpacket;                                       // hardware_clocks_s1_agent_rsp_fifo:out_startofpacket -> hardware_clocks_s1_agent:rf_sink_startofpacket
	wire          hardware_clocks_s1_agent_rsp_fifo_out_endofpacket;                                         // hardware_clocks_s1_agent_rsp_fifo:out_endofpacket -> hardware_clocks_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                                     // cmd_mux_025:src_valid -> hardware_clocks_s1_agent:cp_valid
	wire  [104:0] cmd_mux_025_src_data;                                                                      // cmd_mux_025:src_data -> hardware_clocks_s1_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                                     // hardware_clocks_s1_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [29:0] cmd_mux_025_src_channel;                                                                   // cmd_mux_025:src_channel -> hardware_clocks_s1_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                             // cmd_mux_025:src_startofpacket -> hardware_clocks_s1_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                               // cmd_mux_025:src_endofpacket -> hardware_clocks_s1_agent:cp_endofpacket
	wire   [31:0] hardware_in_y_s1_agent_m0_readdata;                                                        // hardware_in_y_s1_translator:uav_readdata -> hardware_in_y_s1_agent:m0_readdata
	wire          hardware_in_y_s1_agent_m0_waitrequest;                                                     // hardware_in_y_s1_translator:uav_waitrequest -> hardware_in_y_s1_agent:m0_waitrequest
	wire          hardware_in_y_s1_agent_m0_debugaccess;                                                     // hardware_in_y_s1_agent:m0_debugaccess -> hardware_in_y_s1_translator:uav_debugaccess
	wire   [24:0] hardware_in_y_s1_agent_m0_address;                                                         // hardware_in_y_s1_agent:m0_address -> hardware_in_y_s1_translator:uav_address
	wire    [3:0] hardware_in_y_s1_agent_m0_byteenable;                                                      // hardware_in_y_s1_agent:m0_byteenable -> hardware_in_y_s1_translator:uav_byteenable
	wire          hardware_in_y_s1_agent_m0_read;                                                            // hardware_in_y_s1_agent:m0_read -> hardware_in_y_s1_translator:uav_read
	wire          hardware_in_y_s1_agent_m0_readdatavalid;                                                   // hardware_in_y_s1_translator:uav_readdatavalid -> hardware_in_y_s1_agent:m0_readdatavalid
	wire          hardware_in_y_s1_agent_m0_lock;                                                            // hardware_in_y_s1_agent:m0_lock -> hardware_in_y_s1_translator:uav_lock
	wire   [31:0] hardware_in_y_s1_agent_m0_writedata;                                                       // hardware_in_y_s1_agent:m0_writedata -> hardware_in_y_s1_translator:uav_writedata
	wire          hardware_in_y_s1_agent_m0_write;                                                           // hardware_in_y_s1_agent:m0_write -> hardware_in_y_s1_translator:uav_write
	wire    [2:0] hardware_in_y_s1_agent_m0_burstcount;                                                      // hardware_in_y_s1_agent:m0_burstcount -> hardware_in_y_s1_translator:uav_burstcount
	wire          hardware_in_y_s1_agent_rf_source_valid;                                                    // hardware_in_y_s1_agent:rf_source_valid -> hardware_in_y_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hardware_in_y_s1_agent_rf_source_data;                                                     // hardware_in_y_s1_agent:rf_source_data -> hardware_in_y_s1_agent_rsp_fifo:in_data
	wire          hardware_in_y_s1_agent_rf_source_ready;                                                    // hardware_in_y_s1_agent_rsp_fifo:in_ready -> hardware_in_y_s1_agent:rf_source_ready
	wire          hardware_in_y_s1_agent_rf_source_startofpacket;                                            // hardware_in_y_s1_agent:rf_source_startofpacket -> hardware_in_y_s1_agent_rsp_fifo:in_startofpacket
	wire          hardware_in_y_s1_agent_rf_source_endofpacket;                                              // hardware_in_y_s1_agent:rf_source_endofpacket -> hardware_in_y_s1_agent_rsp_fifo:in_endofpacket
	wire          hardware_in_y_s1_agent_rsp_fifo_out_valid;                                                 // hardware_in_y_s1_agent_rsp_fifo:out_valid -> hardware_in_y_s1_agent:rf_sink_valid
	wire  [105:0] hardware_in_y_s1_agent_rsp_fifo_out_data;                                                  // hardware_in_y_s1_agent_rsp_fifo:out_data -> hardware_in_y_s1_agent:rf_sink_data
	wire          hardware_in_y_s1_agent_rsp_fifo_out_ready;                                                 // hardware_in_y_s1_agent:rf_sink_ready -> hardware_in_y_s1_agent_rsp_fifo:out_ready
	wire          hardware_in_y_s1_agent_rsp_fifo_out_startofpacket;                                         // hardware_in_y_s1_agent_rsp_fifo:out_startofpacket -> hardware_in_y_s1_agent:rf_sink_startofpacket
	wire          hardware_in_y_s1_agent_rsp_fifo_out_endofpacket;                                           // hardware_in_y_s1_agent_rsp_fifo:out_endofpacket -> hardware_in_y_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_026_src_valid;                                                                     // cmd_mux_026:src_valid -> hardware_in_y_s1_agent:cp_valid
	wire  [104:0] cmd_mux_026_src_data;                                                                      // cmd_mux_026:src_data -> hardware_in_y_s1_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                                     // hardware_in_y_s1_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [29:0] cmd_mux_026_src_channel;                                                                   // cmd_mux_026:src_channel -> hardware_in_y_s1_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                             // cmd_mux_026:src_startofpacket -> hardware_in_y_s1_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                               // cmd_mux_026:src_endofpacket -> hardware_in_y_s1_agent:cp_endofpacket
	wire   [31:0] hardware_out_y_s1_agent_m0_readdata;                                                       // hardware_out_y_s1_translator:uav_readdata -> hardware_out_y_s1_agent:m0_readdata
	wire          hardware_out_y_s1_agent_m0_waitrequest;                                                    // hardware_out_y_s1_translator:uav_waitrequest -> hardware_out_y_s1_agent:m0_waitrequest
	wire          hardware_out_y_s1_agent_m0_debugaccess;                                                    // hardware_out_y_s1_agent:m0_debugaccess -> hardware_out_y_s1_translator:uav_debugaccess
	wire   [24:0] hardware_out_y_s1_agent_m0_address;                                                        // hardware_out_y_s1_agent:m0_address -> hardware_out_y_s1_translator:uav_address
	wire    [3:0] hardware_out_y_s1_agent_m0_byteenable;                                                     // hardware_out_y_s1_agent:m0_byteenable -> hardware_out_y_s1_translator:uav_byteenable
	wire          hardware_out_y_s1_agent_m0_read;                                                           // hardware_out_y_s1_agent:m0_read -> hardware_out_y_s1_translator:uav_read
	wire          hardware_out_y_s1_agent_m0_readdatavalid;                                                  // hardware_out_y_s1_translator:uav_readdatavalid -> hardware_out_y_s1_agent:m0_readdatavalid
	wire          hardware_out_y_s1_agent_m0_lock;                                                           // hardware_out_y_s1_agent:m0_lock -> hardware_out_y_s1_translator:uav_lock
	wire   [31:0] hardware_out_y_s1_agent_m0_writedata;                                                      // hardware_out_y_s1_agent:m0_writedata -> hardware_out_y_s1_translator:uav_writedata
	wire          hardware_out_y_s1_agent_m0_write;                                                          // hardware_out_y_s1_agent:m0_write -> hardware_out_y_s1_translator:uav_write
	wire    [2:0] hardware_out_y_s1_agent_m0_burstcount;                                                     // hardware_out_y_s1_agent:m0_burstcount -> hardware_out_y_s1_translator:uav_burstcount
	wire          hardware_out_y_s1_agent_rf_source_valid;                                                   // hardware_out_y_s1_agent:rf_source_valid -> hardware_out_y_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hardware_out_y_s1_agent_rf_source_data;                                                    // hardware_out_y_s1_agent:rf_source_data -> hardware_out_y_s1_agent_rsp_fifo:in_data
	wire          hardware_out_y_s1_agent_rf_source_ready;                                                   // hardware_out_y_s1_agent_rsp_fifo:in_ready -> hardware_out_y_s1_agent:rf_source_ready
	wire          hardware_out_y_s1_agent_rf_source_startofpacket;                                           // hardware_out_y_s1_agent:rf_source_startofpacket -> hardware_out_y_s1_agent_rsp_fifo:in_startofpacket
	wire          hardware_out_y_s1_agent_rf_source_endofpacket;                                             // hardware_out_y_s1_agent:rf_source_endofpacket -> hardware_out_y_s1_agent_rsp_fifo:in_endofpacket
	wire          hardware_out_y_s1_agent_rsp_fifo_out_valid;                                                // hardware_out_y_s1_agent_rsp_fifo:out_valid -> hardware_out_y_s1_agent:rf_sink_valid
	wire  [105:0] hardware_out_y_s1_agent_rsp_fifo_out_data;                                                 // hardware_out_y_s1_agent_rsp_fifo:out_data -> hardware_out_y_s1_agent:rf_sink_data
	wire          hardware_out_y_s1_agent_rsp_fifo_out_ready;                                                // hardware_out_y_s1_agent:rf_sink_ready -> hardware_out_y_s1_agent_rsp_fifo:out_ready
	wire          hardware_out_y_s1_agent_rsp_fifo_out_startofpacket;                                        // hardware_out_y_s1_agent_rsp_fifo:out_startofpacket -> hardware_out_y_s1_agent:rf_sink_startofpacket
	wire          hardware_out_y_s1_agent_rsp_fifo_out_endofpacket;                                          // hardware_out_y_s1_agent_rsp_fifo:out_endofpacket -> hardware_out_y_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_027_src_valid;                                                                     // cmd_mux_027:src_valid -> hardware_out_y_s1_agent:cp_valid
	wire  [104:0] cmd_mux_027_src_data;                                                                      // cmd_mux_027:src_data -> hardware_out_y_s1_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                                     // hardware_out_y_s1_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [29:0] cmd_mux_027_src_channel;                                                                   // cmd_mux_027:src_channel -> hardware_out_y_s1_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                             // cmd_mux_027:src_startofpacket -> hardware_out_y_s1_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                               // cmd_mux_027:src_endofpacket -> hardware_out_y_s1_agent:cp_endofpacket
	wire   [31:0] hardware_out_z_s1_agent_m0_readdata;                                                       // hardware_out_z_s1_translator:uav_readdata -> hardware_out_z_s1_agent:m0_readdata
	wire          hardware_out_z_s1_agent_m0_waitrequest;                                                    // hardware_out_z_s1_translator:uav_waitrequest -> hardware_out_z_s1_agent:m0_waitrequest
	wire          hardware_out_z_s1_agent_m0_debugaccess;                                                    // hardware_out_z_s1_agent:m0_debugaccess -> hardware_out_z_s1_translator:uav_debugaccess
	wire   [24:0] hardware_out_z_s1_agent_m0_address;                                                        // hardware_out_z_s1_agent:m0_address -> hardware_out_z_s1_translator:uav_address
	wire    [3:0] hardware_out_z_s1_agent_m0_byteenable;                                                     // hardware_out_z_s1_agent:m0_byteenable -> hardware_out_z_s1_translator:uav_byteenable
	wire          hardware_out_z_s1_agent_m0_read;                                                           // hardware_out_z_s1_agent:m0_read -> hardware_out_z_s1_translator:uav_read
	wire          hardware_out_z_s1_agent_m0_readdatavalid;                                                  // hardware_out_z_s1_translator:uav_readdatavalid -> hardware_out_z_s1_agent:m0_readdatavalid
	wire          hardware_out_z_s1_agent_m0_lock;                                                           // hardware_out_z_s1_agent:m0_lock -> hardware_out_z_s1_translator:uav_lock
	wire   [31:0] hardware_out_z_s1_agent_m0_writedata;                                                      // hardware_out_z_s1_agent:m0_writedata -> hardware_out_z_s1_translator:uav_writedata
	wire          hardware_out_z_s1_agent_m0_write;                                                          // hardware_out_z_s1_agent:m0_write -> hardware_out_z_s1_translator:uav_write
	wire    [2:0] hardware_out_z_s1_agent_m0_burstcount;                                                     // hardware_out_z_s1_agent:m0_burstcount -> hardware_out_z_s1_translator:uav_burstcount
	wire          hardware_out_z_s1_agent_rf_source_valid;                                                   // hardware_out_z_s1_agent:rf_source_valid -> hardware_out_z_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hardware_out_z_s1_agent_rf_source_data;                                                    // hardware_out_z_s1_agent:rf_source_data -> hardware_out_z_s1_agent_rsp_fifo:in_data
	wire          hardware_out_z_s1_agent_rf_source_ready;                                                   // hardware_out_z_s1_agent_rsp_fifo:in_ready -> hardware_out_z_s1_agent:rf_source_ready
	wire          hardware_out_z_s1_agent_rf_source_startofpacket;                                           // hardware_out_z_s1_agent:rf_source_startofpacket -> hardware_out_z_s1_agent_rsp_fifo:in_startofpacket
	wire          hardware_out_z_s1_agent_rf_source_endofpacket;                                             // hardware_out_z_s1_agent:rf_source_endofpacket -> hardware_out_z_s1_agent_rsp_fifo:in_endofpacket
	wire          hardware_out_z_s1_agent_rsp_fifo_out_valid;                                                // hardware_out_z_s1_agent_rsp_fifo:out_valid -> hardware_out_z_s1_agent:rf_sink_valid
	wire  [105:0] hardware_out_z_s1_agent_rsp_fifo_out_data;                                                 // hardware_out_z_s1_agent_rsp_fifo:out_data -> hardware_out_z_s1_agent:rf_sink_data
	wire          hardware_out_z_s1_agent_rsp_fifo_out_ready;                                                // hardware_out_z_s1_agent:rf_sink_ready -> hardware_out_z_s1_agent_rsp_fifo:out_ready
	wire          hardware_out_z_s1_agent_rsp_fifo_out_startofpacket;                                        // hardware_out_z_s1_agent_rsp_fifo:out_startofpacket -> hardware_out_z_s1_agent:rf_sink_startofpacket
	wire          hardware_out_z_s1_agent_rsp_fifo_out_endofpacket;                                          // hardware_out_z_s1_agent_rsp_fifo:out_endofpacket -> hardware_out_z_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_028_src_valid;                                                                     // cmd_mux_028:src_valid -> hardware_out_z_s1_agent:cp_valid
	wire  [104:0] cmd_mux_028_src_data;                                                                      // cmd_mux_028:src_data -> hardware_out_z_s1_agent:cp_data
	wire          cmd_mux_028_src_ready;                                                                     // hardware_out_z_s1_agent:cp_ready -> cmd_mux_028:src_ready
	wire   [29:0] cmd_mux_028_src_channel;                                                                   // cmd_mux_028:src_channel -> hardware_out_z_s1_agent:cp_channel
	wire          cmd_mux_028_src_startofpacket;                                                             // cmd_mux_028:src_startofpacket -> hardware_out_z_s1_agent:cp_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                               // cmd_mux_028:src_endofpacket -> hardware_out_z_s1_agent:cp_endofpacket
	wire   [31:0] hardware_in_z_s1_agent_m0_readdata;                                                        // hardware_in_z_s1_translator:uav_readdata -> hardware_in_z_s1_agent:m0_readdata
	wire          hardware_in_z_s1_agent_m0_waitrequest;                                                     // hardware_in_z_s1_translator:uav_waitrequest -> hardware_in_z_s1_agent:m0_waitrequest
	wire          hardware_in_z_s1_agent_m0_debugaccess;                                                     // hardware_in_z_s1_agent:m0_debugaccess -> hardware_in_z_s1_translator:uav_debugaccess
	wire   [24:0] hardware_in_z_s1_agent_m0_address;                                                         // hardware_in_z_s1_agent:m0_address -> hardware_in_z_s1_translator:uav_address
	wire    [3:0] hardware_in_z_s1_agent_m0_byteenable;                                                      // hardware_in_z_s1_agent:m0_byteenable -> hardware_in_z_s1_translator:uav_byteenable
	wire          hardware_in_z_s1_agent_m0_read;                                                            // hardware_in_z_s1_agent:m0_read -> hardware_in_z_s1_translator:uav_read
	wire          hardware_in_z_s1_agent_m0_readdatavalid;                                                   // hardware_in_z_s1_translator:uav_readdatavalid -> hardware_in_z_s1_agent:m0_readdatavalid
	wire          hardware_in_z_s1_agent_m0_lock;                                                            // hardware_in_z_s1_agent:m0_lock -> hardware_in_z_s1_translator:uav_lock
	wire   [31:0] hardware_in_z_s1_agent_m0_writedata;                                                       // hardware_in_z_s1_agent:m0_writedata -> hardware_in_z_s1_translator:uav_writedata
	wire          hardware_in_z_s1_agent_m0_write;                                                           // hardware_in_z_s1_agent:m0_write -> hardware_in_z_s1_translator:uav_write
	wire    [2:0] hardware_in_z_s1_agent_m0_burstcount;                                                      // hardware_in_z_s1_agent:m0_burstcount -> hardware_in_z_s1_translator:uav_burstcount
	wire          hardware_in_z_s1_agent_rf_source_valid;                                                    // hardware_in_z_s1_agent:rf_source_valid -> hardware_in_z_s1_agent_rsp_fifo:in_valid
	wire  [105:0] hardware_in_z_s1_agent_rf_source_data;                                                     // hardware_in_z_s1_agent:rf_source_data -> hardware_in_z_s1_agent_rsp_fifo:in_data
	wire          hardware_in_z_s1_agent_rf_source_ready;                                                    // hardware_in_z_s1_agent_rsp_fifo:in_ready -> hardware_in_z_s1_agent:rf_source_ready
	wire          hardware_in_z_s1_agent_rf_source_startofpacket;                                            // hardware_in_z_s1_agent:rf_source_startofpacket -> hardware_in_z_s1_agent_rsp_fifo:in_startofpacket
	wire          hardware_in_z_s1_agent_rf_source_endofpacket;                                              // hardware_in_z_s1_agent:rf_source_endofpacket -> hardware_in_z_s1_agent_rsp_fifo:in_endofpacket
	wire          hardware_in_z_s1_agent_rsp_fifo_out_valid;                                                 // hardware_in_z_s1_agent_rsp_fifo:out_valid -> hardware_in_z_s1_agent:rf_sink_valid
	wire  [105:0] hardware_in_z_s1_agent_rsp_fifo_out_data;                                                  // hardware_in_z_s1_agent_rsp_fifo:out_data -> hardware_in_z_s1_agent:rf_sink_data
	wire          hardware_in_z_s1_agent_rsp_fifo_out_ready;                                                 // hardware_in_z_s1_agent:rf_sink_ready -> hardware_in_z_s1_agent_rsp_fifo:out_ready
	wire          hardware_in_z_s1_agent_rsp_fifo_out_startofpacket;                                         // hardware_in_z_s1_agent_rsp_fifo:out_startofpacket -> hardware_in_z_s1_agent:rf_sink_startofpacket
	wire          hardware_in_z_s1_agent_rsp_fifo_out_endofpacket;                                           // hardware_in_z_s1_agent_rsp_fifo:out_endofpacket -> hardware_in_z_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_029_src_valid;                                                                     // cmd_mux_029:src_valid -> hardware_in_z_s1_agent:cp_valid
	wire  [104:0] cmd_mux_029_src_data;                                                                      // cmd_mux_029:src_data -> hardware_in_z_s1_agent:cp_data
	wire          cmd_mux_029_src_ready;                                                                     // hardware_in_z_s1_agent:cp_ready -> cmd_mux_029:src_ready
	wire   [29:0] cmd_mux_029_src_channel;                                                                   // cmd_mux_029:src_channel -> hardware_in_z_s1_agent:cp_channel
	wire          cmd_mux_029_src_startofpacket;                                                             // cmd_mux_029:src_startofpacket -> hardware_in_z_s1_agent:cp_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                               // cmd_mux_029:src_endofpacket -> hardware_in_z_s1_agent:cp_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                                            // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [104:0] cpu_data_master_agent_cp_data;                                                             // cpu_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                                            // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                                    // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                                      // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                          // router:src_valid -> cmd_demux:sink_valid
	wire  [104:0] router_src_data;                                                                           // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                          // cmd_demux:sink_ready -> router:src_ready
	wire   [29:0] router_src_channel;                                                                        // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                                     // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [104:0] cpu_instruction_master_agent_cp_data;                                                      // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                                     // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                                             // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                               // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                      // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [104:0] router_001_src_data;                                                                       // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                      // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [29:0] router_001_src_channel;                                                                    // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                              // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_valid;                      // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_valid -> router_002:sink_valid
	wire   [77:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_data;                       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_data -> router_002:sink_data
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_ready;                      // router_002:sink_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_ready
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_startofpacket;              // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_endofpacket;                // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_003:sink_valid
	wire  [104:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                 // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_003:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                // router_003:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                        // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                          // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                      // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [104:0] router_003_src_data;                                                                       // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                                      // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [29:0] router_003_src_channel;                                                                    // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                              // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                        // sysid_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [104:0] sysid_control_slave_agent_rp_data;                                                         // sysid_control_slave_agent:rp_data -> router_004:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                        // router_004:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                                // sysid_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                                  // sysid_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                      // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [104:0] router_004_src_data;                                                                       // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                      // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [29:0] router_004_src_channel;                                                                    // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                              // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rp_valid;                                                        // cpu_debug_mem_slave_agent:rp_valid -> router_005:sink_valid
	wire  [104:0] cpu_debug_mem_slave_agent_rp_data;                                                         // cpu_debug_mem_slave_agent:rp_data -> router_005:sink_data
	wire          cpu_debug_mem_slave_agent_rp_ready;                                                        // router_005:sink_ready -> cpu_debug_mem_slave_agent:rp_ready
	wire          cpu_debug_mem_slave_agent_rp_startofpacket;                                                // cpu_debug_mem_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rp_endofpacket;                                                  // cpu_debug_mem_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                      // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [104:0] router_005_src_data;                                                                       // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                                      // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [29:0] router_005_src_channel;                                                                    // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                              // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          altpll_pll_slave_agent_rp_valid;                                                           // altpll_pll_slave_agent:rp_valid -> router_006:sink_valid
	wire  [104:0] altpll_pll_slave_agent_rp_data;                                                            // altpll_pll_slave_agent:rp_data -> router_006:sink_data
	wire          altpll_pll_slave_agent_rp_ready;                                                           // router_006:sink_ready -> altpll_pll_slave_agent:rp_ready
	wire          altpll_pll_slave_agent_rp_startofpacket;                                                   // altpll_pll_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          altpll_pll_slave_agent_rp_endofpacket;                                                     // altpll_pll_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                      // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [104:0] router_006_src_data;                                                                       // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                                      // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [29:0] router_006_src_channel;                                                                    // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                              // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                   // sdram_s1_agent:rp_valid -> router_007:sink_valid
	wire   [86:0] sdram_s1_agent_rp_data;                                                                    // sdram_s1_agent:rp_data -> router_007:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                   // router_007:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                           // sdram_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                             // sdram_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                                                     // led_s1_agent:rp_valid -> router_008:sink_valid
	wire  [104:0] led_s1_agent_rp_data;                                                                      // led_s1_agent:rp_data -> router_008:sink_data
	wire          led_s1_agent_rp_ready;                                                                     // router_008:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                                             // led_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                                               // led_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                      // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [104:0] router_008_src_data;                                                                       // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                                      // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [29:0] router_008_src_channel;                                                                    // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                              // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          hex5_s1_agent_rp_valid;                                                                    // hex5_s1_agent:rp_valid -> router_009:sink_valid
	wire  [104:0] hex5_s1_agent_rp_data;                                                                     // hex5_s1_agent:rp_data -> router_009:sink_data
	wire          hex5_s1_agent_rp_ready;                                                                    // router_009:sink_ready -> hex5_s1_agent:rp_ready
	wire          hex5_s1_agent_rp_startofpacket;                                                            // hex5_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          hex5_s1_agent_rp_endofpacket;                                                              // hex5_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                      // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [104:0] router_009_src_data;                                                                       // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                                      // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [29:0] router_009_src_channel;                                                                    // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                              // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          hex4_s1_agent_rp_valid;                                                                    // hex4_s1_agent:rp_valid -> router_010:sink_valid
	wire  [104:0] hex4_s1_agent_rp_data;                                                                     // hex4_s1_agent:rp_data -> router_010:sink_data
	wire          hex4_s1_agent_rp_ready;                                                                    // router_010:sink_ready -> hex4_s1_agent:rp_ready
	wire          hex4_s1_agent_rp_startofpacket;                                                            // hex4_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          hex4_s1_agent_rp_endofpacket;                                                              // hex4_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                      // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [104:0] router_010_src_data;                                                                       // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                                      // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [29:0] router_010_src_channel;                                                                    // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                              // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          hex3_s1_agent_rp_valid;                                                                    // hex3_s1_agent:rp_valid -> router_011:sink_valid
	wire  [104:0] hex3_s1_agent_rp_data;                                                                     // hex3_s1_agent:rp_data -> router_011:sink_data
	wire          hex3_s1_agent_rp_ready;                                                                    // router_011:sink_ready -> hex3_s1_agent:rp_ready
	wire          hex3_s1_agent_rp_startofpacket;                                                            // hex3_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          hex3_s1_agent_rp_endofpacket;                                                              // hex3_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                      // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [104:0] router_011_src_data;                                                                       // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                                      // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [29:0] router_011_src_channel;                                                                    // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                              // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          hex2_s1_agent_rp_valid;                                                                    // hex2_s1_agent:rp_valid -> router_012:sink_valid
	wire  [104:0] hex2_s1_agent_rp_data;                                                                     // hex2_s1_agent:rp_data -> router_012:sink_data
	wire          hex2_s1_agent_rp_ready;                                                                    // router_012:sink_ready -> hex2_s1_agent:rp_ready
	wire          hex2_s1_agent_rp_startofpacket;                                                            // hex2_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          hex2_s1_agent_rp_endofpacket;                                                              // hex2_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                      // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [104:0] router_012_src_data;                                                                       // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                                      // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [29:0] router_012_src_channel;                                                                    // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                              // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          hex1_s1_agent_rp_valid;                                                                    // hex1_s1_agent:rp_valid -> router_013:sink_valid
	wire  [104:0] hex1_s1_agent_rp_data;                                                                     // hex1_s1_agent:rp_data -> router_013:sink_data
	wire          hex1_s1_agent_rp_ready;                                                                    // router_013:sink_ready -> hex1_s1_agent:rp_ready
	wire          hex1_s1_agent_rp_startofpacket;                                                            // hex1_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          hex1_s1_agent_rp_endofpacket;                                                              // hex1_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                      // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [104:0] router_013_src_data;                                                                       // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                                      // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [29:0] router_013_src_channel;                                                                    // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                              // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          hex0_s1_agent_rp_valid;                                                                    // hex0_s1_agent:rp_valid -> router_014:sink_valid
	wire  [104:0] hex0_s1_agent_rp_data;                                                                     // hex0_s1_agent:rp_data -> router_014:sink_data
	wire          hex0_s1_agent_rp_ready;                                                                    // router_014:sink_ready -> hex0_s1_agent:rp_ready
	wire          hex0_s1_agent_rp_startofpacket;                                                            // hex0_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          hex0_s1_agent_rp_endofpacket;                                                              // hex0_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                      // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [104:0] router_014_src_data;                                                                       // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                                      // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [29:0] router_014_src_channel;                                                                    // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                              // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          switch_s1_agent_rp_valid;                                                                  // switch_s1_agent:rp_valid -> router_015:sink_valid
	wire  [104:0] switch_s1_agent_rp_data;                                                                   // switch_s1_agent:rp_data -> router_015:sink_data
	wire          switch_s1_agent_rp_ready;                                                                  // router_015:sink_ready -> switch_s1_agent:rp_ready
	wire          switch_s1_agent_rp_startofpacket;                                                          // switch_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          switch_s1_agent_rp_endofpacket;                                                            // switch_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                      // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [104:0] router_015_src_data;                                                                       // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                                      // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [29:0] router_015_src_channel;                                                                    // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                              // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          button_s1_agent_rp_valid;                                                                  // button_s1_agent:rp_valid -> router_016:sink_valid
	wire  [104:0] button_s1_agent_rp_data;                                                                   // button_s1_agent:rp_data -> router_016:sink_data
	wire          button_s1_agent_rp_ready;                                                                  // router_016:sink_ready -> button_s1_agent:rp_ready
	wire          button_s1_agent_rp_startofpacket;                                                          // button_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          button_s1_agent_rp_endofpacket;                                                            // button_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                      // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [104:0] router_016_src_data;                                                                       // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                                      // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [29:0] router_016_src_channel;                                                                    // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                              // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          timer4_s1_agent_rp_valid;                                                                  // timer4_s1_agent:rp_valid -> router_017:sink_valid
	wire  [104:0] timer4_s1_agent_rp_data;                                                                   // timer4_s1_agent:rp_data -> router_017:sink_data
	wire          timer4_s1_agent_rp_ready;                                                                  // router_017:sink_ready -> timer4_s1_agent:rp_ready
	wire          timer4_s1_agent_rp_startofpacket;                                                          // timer4_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          timer4_s1_agent_rp_endofpacket;                                                            // timer4_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                      // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [104:0] router_017_src_data;                                                                       // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                                      // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [29:0] router_017_src_channel;                                                                    // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                              // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          timer3_s1_agent_rp_valid;                                                                  // timer3_s1_agent:rp_valid -> router_018:sink_valid
	wire  [104:0] timer3_s1_agent_rp_data;                                                                   // timer3_s1_agent:rp_data -> router_018:sink_data
	wire          timer3_s1_agent_rp_ready;                                                                  // router_018:sink_ready -> timer3_s1_agent:rp_ready
	wire          timer3_s1_agent_rp_startofpacket;                                                          // timer3_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          timer3_s1_agent_rp_endofpacket;                                                            // timer3_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                      // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [104:0] router_018_src_data;                                                                       // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                                      // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [29:0] router_018_src_channel;                                                                    // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                              // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          timer1_s1_agent_rp_valid;                                                                  // timer1_s1_agent:rp_valid -> router_019:sink_valid
	wire  [104:0] timer1_s1_agent_rp_data;                                                                   // timer1_s1_agent:rp_data -> router_019:sink_data
	wire          timer1_s1_agent_rp_ready;                                                                  // router_019:sink_ready -> timer1_s1_agent:rp_ready
	wire          timer1_s1_agent_rp_startofpacket;                                                          // timer1_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          timer1_s1_agent_rp_endofpacket;                                                            // timer1_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                      // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [104:0] router_019_src_data;                                                                       // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                                      // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [29:0] router_019_src_channel;                                                                    // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                              // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                                   // timer_s1_agent:rp_valid -> router_020:sink_valid
	wire  [104:0] timer_s1_agent_rp_data;                                                                    // timer_s1_agent:rp_data -> router_020:sink_data
	wire          timer_s1_agent_rp_ready;                                                                   // router_020:sink_ready -> timer_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                                           // timer_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                                             // timer_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                      // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [104:0] router_020_src_data;                                                                       // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                                      // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [29:0] router_020_src_channel;                                                                    // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                              // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          timestamp_timer_s1_agent_rp_valid;                                                         // timestamp_timer_s1_agent:rp_valid -> router_021:sink_valid
	wire  [104:0] timestamp_timer_s1_agent_rp_data;                                                          // timestamp_timer_s1_agent:rp_data -> router_021:sink_data
	wire          timestamp_timer_s1_agent_rp_ready;                                                         // router_021:sink_ready -> timestamp_timer_s1_agent:rp_ready
	wire          timestamp_timer_s1_agent_rp_startofpacket;                                                 // timestamp_timer_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          timestamp_timer_s1_agent_rp_endofpacket;                                                   // timestamp_timer_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                      // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [104:0] router_021_src_data;                                                                       // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                                      // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [29:0] router_021_src_channel;                                                                    // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                                              // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          timer0_s1_agent_rp_valid;                                                                  // timer0_s1_agent:rp_valid -> router_022:sink_valid
	wire  [104:0] timer0_s1_agent_rp_data;                                                                   // timer0_s1_agent:rp_data -> router_022:sink_data
	wire          timer0_s1_agent_rp_ready;                                                                  // router_022:sink_ready -> timer0_s1_agent:rp_ready
	wire          timer0_s1_agent_rp_startofpacket;                                                          // timer0_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          timer0_s1_agent_rp_endofpacket;                                                            // timer0_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                      // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [104:0] router_022_src_data;                                                                       // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                                      // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [29:0] router_022_src_channel;                                                                    // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                                              // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          hex_timer_s1_agent_rp_valid;                                                               // hex_timer_s1_agent:rp_valid -> router_023:sink_valid
	wire  [104:0] hex_timer_s1_agent_rp_data;                                                                // hex_timer_s1_agent:rp_data -> router_023:sink_data
	wire          hex_timer_s1_agent_rp_ready;                                                               // router_023:sink_ready -> hex_timer_s1_agent:rp_ready
	wire          hex_timer_s1_agent_rp_startofpacket;                                                       // hex_timer_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          hex_timer_s1_agent_rp_endofpacket;                                                         // hex_timer_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                      // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [104:0] router_023_src_data;                                                                       // router_023:src_data -> rsp_demux_021:sink_data
	wire          router_023_src_ready;                                                                      // rsp_demux_021:sink_ready -> router_023:src_ready
	wire   [29:0] router_023_src_channel;                                                                    // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_startofpacket;                                                              // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          acc_timer_s1_agent_rp_valid;                                                               // acc_timer_s1_agent:rp_valid -> router_024:sink_valid
	wire  [104:0] acc_timer_s1_agent_rp_data;                                                                // acc_timer_s1_agent:rp_data -> router_024:sink_data
	wire          acc_timer_s1_agent_rp_ready;                                                               // router_024:sink_ready -> acc_timer_s1_agent:rp_ready
	wire          acc_timer_s1_agent_rp_startofpacket;                                                       // acc_timer_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          acc_timer_s1_agent_rp_endofpacket;                                                         // acc_timer_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                      // router_024:src_valid -> rsp_demux_022:sink_valid
	wire  [104:0] router_024_src_data;                                                                       // router_024:src_data -> rsp_demux_022:sink_data
	wire          router_024_src_ready;                                                                      // rsp_demux_022:sink_ready -> router_024:src_ready
	wire   [29:0] router_024_src_channel;                                                                    // router_024:src_channel -> rsp_demux_022:sink_channel
	wire          router_024_src_startofpacket;                                                              // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          hardware_out_x_s1_agent_rp_valid;                                                          // hardware_out_x_s1_agent:rp_valid -> router_025:sink_valid
	wire  [104:0] hardware_out_x_s1_agent_rp_data;                                                           // hardware_out_x_s1_agent:rp_data -> router_025:sink_data
	wire          hardware_out_x_s1_agent_rp_ready;                                                          // router_025:sink_ready -> hardware_out_x_s1_agent:rp_ready
	wire          hardware_out_x_s1_agent_rp_startofpacket;                                                  // hardware_out_x_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          hardware_out_x_s1_agent_rp_endofpacket;                                                    // hardware_out_x_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                      // router_025:src_valid -> rsp_demux_023:sink_valid
	wire  [104:0] router_025_src_data;                                                                       // router_025:src_data -> rsp_demux_023:sink_data
	wire          router_025_src_ready;                                                                      // rsp_demux_023:sink_ready -> router_025:src_ready
	wire   [29:0] router_025_src_channel;                                                                    // router_025:src_channel -> rsp_demux_023:sink_channel
	wire          router_025_src_startofpacket;                                                              // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          hardware_in_x_s1_agent_rp_valid;                                                           // hardware_in_x_s1_agent:rp_valid -> router_026:sink_valid
	wire  [104:0] hardware_in_x_s1_agent_rp_data;                                                            // hardware_in_x_s1_agent:rp_data -> router_026:sink_data
	wire          hardware_in_x_s1_agent_rp_ready;                                                           // router_026:sink_ready -> hardware_in_x_s1_agent:rp_ready
	wire          hardware_in_x_s1_agent_rp_startofpacket;                                                   // hardware_in_x_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          hardware_in_x_s1_agent_rp_endofpacket;                                                     // hardware_in_x_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                      // router_026:src_valid -> rsp_demux_024:sink_valid
	wire  [104:0] router_026_src_data;                                                                       // router_026:src_data -> rsp_demux_024:sink_data
	wire          router_026_src_ready;                                                                      // rsp_demux_024:sink_ready -> router_026:src_ready
	wire   [29:0] router_026_src_channel;                                                                    // router_026:src_channel -> rsp_demux_024:sink_channel
	wire          router_026_src_startofpacket;                                                              // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          hardware_clocks_s1_agent_rp_valid;                                                         // hardware_clocks_s1_agent:rp_valid -> router_027:sink_valid
	wire  [104:0] hardware_clocks_s1_agent_rp_data;                                                          // hardware_clocks_s1_agent:rp_data -> router_027:sink_data
	wire          hardware_clocks_s1_agent_rp_ready;                                                         // router_027:sink_ready -> hardware_clocks_s1_agent:rp_ready
	wire          hardware_clocks_s1_agent_rp_startofpacket;                                                 // hardware_clocks_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          hardware_clocks_s1_agent_rp_endofpacket;                                                   // hardware_clocks_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                      // router_027:src_valid -> rsp_demux_025:sink_valid
	wire  [104:0] router_027_src_data;                                                                       // router_027:src_data -> rsp_demux_025:sink_data
	wire          router_027_src_ready;                                                                      // rsp_demux_025:sink_ready -> router_027:src_ready
	wire   [29:0] router_027_src_channel;                                                                    // router_027:src_channel -> rsp_demux_025:sink_channel
	wire          router_027_src_startofpacket;                                                              // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          hardware_in_y_s1_agent_rp_valid;                                                           // hardware_in_y_s1_agent:rp_valid -> router_028:sink_valid
	wire  [104:0] hardware_in_y_s1_agent_rp_data;                                                            // hardware_in_y_s1_agent:rp_data -> router_028:sink_data
	wire          hardware_in_y_s1_agent_rp_ready;                                                           // router_028:sink_ready -> hardware_in_y_s1_agent:rp_ready
	wire          hardware_in_y_s1_agent_rp_startofpacket;                                                   // hardware_in_y_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          hardware_in_y_s1_agent_rp_endofpacket;                                                     // hardware_in_y_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                      // router_028:src_valid -> rsp_demux_026:sink_valid
	wire  [104:0] router_028_src_data;                                                                       // router_028:src_data -> rsp_demux_026:sink_data
	wire          router_028_src_ready;                                                                      // rsp_demux_026:sink_ready -> router_028:src_ready
	wire   [29:0] router_028_src_channel;                                                                    // router_028:src_channel -> rsp_demux_026:sink_channel
	wire          router_028_src_startofpacket;                                                              // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_028_src_endofpacket;                                                                // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          hardware_out_y_s1_agent_rp_valid;                                                          // hardware_out_y_s1_agent:rp_valid -> router_029:sink_valid
	wire  [104:0] hardware_out_y_s1_agent_rp_data;                                                           // hardware_out_y_s1_agent:rp_data -> router_029:sink_data
	wire          hardware_out_y_s1_agent_rp_ready;                                                          // router_029:sink_ready -> hardware_out_y_s1_agent:rp_ready
	wire          hardware_out_y_s1_agent_rp_startofpacket;                                                  // hardware_out_y_s1_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          hardware_out_y_s1_agent_rp_endofpacket;                                                    // hardware_out_y_s1_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                      // router_029:src_valid -> rsp_demux_027:sink_valid
	wire  [104:0] router_029_src_data;                                                                       // router_029:src_data -> rsp_demux_027:sink_data
	wire          router_029_src_ready;                                                                      // rsp_demux_027:sink_ready -> router_029:src_ready
	wire   [29:0] router_029_src_channel;                                                                    // router_029:src_channel -> rsp_demux_027:sink_channel
	wire          router_029_src_startofpacket;                                                              // router_029:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_029_src_endofpacket;                                                                // router_029:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          hardware_out_z_s1_agent_rp_valid;                                                          // hardware_out_z_s1_agent:rp_valid -> router_030:sink_valid
	wire  [104:0] hardware_out_z_s1_agent_rp_data;                                                           // hardware_out_z_s1_agent:rp_data -> router_030:sink_data
	wire          hardware_out_z_s1_agent_rp_ready;                                                          // router_030:sink_ready -> hardware_out_z_s1_agent:rp_ready
	wire          hardware_out_z_s1_agent_rp_startofpacket;                                                  // hardware_out_z_s1_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          hardware_out_z_s1_agent_rp_endofpacket;                                                    // hardware_out_z_s1_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                                      // router_030:src_valid -> rsp_demux_028:sink_valid
	wire  [104:0] router_030_src_data;                                                                       // router_030:src_data -> rsp_demux_028:sink_data
	wire          router_030_src_ready;                                                                      // rsp_demux_028:sink_ready -> router_030:src_ready
	wire   [29:0] router_030_src_channel;                                                                    // router_030:src_channel -> rsp_demux_028:sink_channel
	wire          router_030_src_startofpacket;                                                              // router_030:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_030_src_endofpacket;                                                                // router_030:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          hardware_in_z_s1_agent_rp_valid;                                                           // hardware_in_z_s1_agent:rp_valid -> router_031:sink_valid
	wire  [104:0] hardware_in_z_s1_agent_rp_data;                                                            // hardware_in_z_s1_agent:rp_data -> router_031:sink_data
	wire          hardware_in_z_s1_agent_rp_ready;                                                           // router_031:sink_ready -> hardware_in_z_s1_agent:rp_ready
	wire          hardware_in_z_s1_agent_rp_startofpacket;                                                   // hardware_in_z_s1_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          hardware_in_z_s1_agent_rp_endofpacket;                                                     // hardware_in_z_s1_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                                      // router_031:src_valid -> rsp_demux_029:sink_valid
	wire  [104:0] router_031_src_data;                                                                       // router_031:src_data -> rsp_demux_029:sink_data
	wire          router_031_src_ready;                                                                      // rsp_demux_029:sink_ready -> router_031:src_ready
	wire   [29:0] router_031_src_channel;                                                                    // router_031:src_channel -> rsp_demux_029:sink_channel
	wire          router_031_src_startofpacket;                                                              // router_031:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_031_src_endofpacket;                                                                // router_031:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_valid;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_valid
	wire   [77:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_data;          // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_data
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_ready;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_ready
	wire   [29:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_channel;       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_channel -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_channel
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_startofpacket; // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_startofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_endofpacket;   // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:source0_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:cp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                      // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire   [86:0] sdram_s1_burst_adapter_source0_data;                                                       // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                      // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire   [29:0] sdram_s1_burst_adapter_source0_channel;                                                    // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                              // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                                // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [104:0] cmd_demux_src0_data;                                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [29:0] cmd_demux_src0_channel;                                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [104:0] cmd_demux_src1_data;                                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [29:0] cmd_demux_src1_channel;                                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                      // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [104:0] cmd_demux_src2_data;                                                                       // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                      // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [29:0] cmd_demux_src2_channel;                                                                    // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                              // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                      // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [104:0] cmd_demux_src3_data;                                                                       // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                      // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [29:0] cmd_demux_src3_channel;                                                                    // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                              // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                      // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [104:0] cmd_demux_src5_data;                                                                       // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                      // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [29:0] cmd_demux_src5_channel;                                                                    // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                              // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                      // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [104:0] cmd_demux_src6_data;                                                                       // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                      // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [29:0] cmd_demux_src6_channel;                                                                    // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                              // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                      // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [104:0] cmd_demux_src7_data;                                                                       // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                      // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [29:0] cmd_demux_src7_channel;                                                                    // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                              // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                      // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [104:0] cmd_demux_src8_data;                                                                       // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                      // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [29:0] cmd_demux_src8_channel;                                                                    // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                              // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                      // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [104:0] cmd_demux_src9_data;                                                                       // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                      // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [29:0] cmd_demux_src9_channel;                                                                    // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                              // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                     // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [104:0] cmd_demux_src10_data;                                                                      // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                     // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [29:0] cmd_demux_src10_channel;                                                                   // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                             // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                               // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                     // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [104:0] cmd_demux_src11_data;                                                                      // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                     // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [29:0] cmd_demux_src11_channel;                                                                   // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                             // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                               // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                     // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [104:0] cmd_demux_src12_data;                                                                      // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                     // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [29:0] cmd_demux_src12_channel;                                                                   // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                             // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                               // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                     // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [104:0] cmd_demux_src13_data;                                                                      // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                     // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [29:0] cmd_demux_src13_channel;                                                                   // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                             // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                               // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                     // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [104:0] cmd_demux_src14_data;                                                                      // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                     // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [29:0] cmd_demux_src14_channel;                                                                   // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                             // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                               // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                     // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [104:0] cmd_demux_src15_data;                                                                      // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                     // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [29:0] cmd_demux_src15_channel;                                                                   // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                             // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                               // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                     // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [104:0] cmd_demux_src16_data;                                                                      // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                     // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [29:0] cmd_demux_src16_channel;                                                                   // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                             // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                               // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                     // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [104:0] cmd_demux_src17_data;                                                                      // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                                     // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [29:0] cmd_demux_src17_channel;                                                                   // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                             // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                               // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                                     // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [104:0] cmd_demux_src18_data;                                                                      // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                                     // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [29:0] cmd_demux_src18_channel;                                                                   // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                             // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                               // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                                     // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [104:0] cmd_demux_src19_data;                                                                      // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                                     // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [29:0] cmd_demux_src19_channel;                                                                   // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                             // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                               // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                                     // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [104:0] cmd_demux_src20_data;                                                                      // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                                     // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [29:0] cmd_demux_src20_channel;                                                                   // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                             // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                               // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                                     // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [104:0] cmd_demux_src21_data;                                                                      // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                                     // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [29:0] cmd_demux_src21_channel;                                                                   // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                             // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                               // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                                     // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [104:0] cmd_demux_src22_data;                                                                      // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                                     // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [29:0] cmd_demux_src22_channel;                                                                   // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                             // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                               // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                                     // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [104:0] cmd_demux_src23_data;                                                                      // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                                     // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [29:0] cmd_demux_src23_channel;                                                                   // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                             // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                               // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                                     // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [104:0] cmd_demux_src24_data;                                                                      // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                                     // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [29:0] cmd_demux_src24_channel;                                                                   // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                                             // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                               // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                                     // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [104:0] cmd_demux_src25_data;                                                                      // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_src25_ready;                                                                     // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire   [29:0] cmd_demux_src25_channel;                                                                   // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_startofpacket;                                                             // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                               // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                                     // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [104:0] cmd_demux_src26_data;                                                                      // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_src26_ready;                                                                     // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire   [29:0] cmd_demux_src26_channel;                                                                   // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_startofpacket;                                                             // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                               // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_src27_valid;                                                                     // cmd_demux:src27_valid -> cmd_mux_027:sink0_valid
	wire  [104:0] cmd_demux_src27_data;                                                                      // cmd_demux:src27_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_src27_ready;                                                                     // cmd_mux_027:sink0_ready -> cmd_demux:src27_ready
	wire   [29:0] cmd_demux_src27_channel;                                                                   // cmd_demux:src27_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_src27_startofpacket;                                                             // cmd_demux:src27_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_src27_endofpacket;                                                               // cmd_demux:src27_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_src28_valid;                                                                     // cmd_demux:src28_valid -> cmd_mux_028:sink0_valid
	wire  [104:0] cmd_demux_src28_data;                                                                      // cmd_demux:src28_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_src28_ready;                                                                     // cmd_mux_028:sink0_ready -> cmd_demux:src28_ready
	wire   [29:0] cmd_demux_src28_channel;                                                                   // cmd_demux:src28_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_src28_startofpacket;                                                             // cmd_demux:src28_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_src28_endofpacket;                                                               // cmd_demux:src28_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_src29_valid;                                                                     // cmd_demux:src29_valid -> cmd_mux_029:sink0_valid
	wire  [104:0] cmd_demux_src29_data;                                                                      // cmd_demux:src29_data -> cmd_mux_029:sink0_data
	wire          cmd_demux_src29_ready;                                                                     // cmd_mux_029:sink0_ready -> cmd_demux:src29_ready
	wire   [29:0] cmd_demux_src29_channel;                                                                   // cmd_demux:src29_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_src29_startofpacket;                                                             // cmd_demux:src29_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          cmd_demux_src29_endofpacket;                                                               // cmd_demux:src29_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                  // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [104:0] cmd_demux_001_src0_data;                                                                   // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                  // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire   [29:0] cmd_demux_001_src0_channel;                                                                // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                          // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                            // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                  // cmd_demux_001:src1_valid -> cmd_mux_005:sink1_valid
	wire  [104:0] cmd_demux_001_src1_data;                                                                   // cmd_demux_001:src1_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                  // cmd_mux_005:sink1_ready -> cmd_demux_001:src1_ready
	wire   [29:0] cmd_demux_001_src1_channel;                                                                // cmd_demux_001:src1_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [104:0] rsp_demux_src0_data;                                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [29:0] rsp_demux_src0_channel;                                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [104:0] rsp_demux_001_src0_data;                                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [29:0] rsp_demux_001_src0_channel;                                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                  // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [104:0] rsp_demux_002_src0_data;                                                                   // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                  // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [29:0] rsp_demux_002_src0_channel;                                                                // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                          // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                            // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                  // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [104:0] rsp_demux_003_src0_data;                                                                   // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                  // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [29:0] rsp_demux_003_src0_channel;                                                                // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                          // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                            // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                  // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [104:0] rsp_demux_003_src1_data;                                                                   // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                                  // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire   [29:0] rsp_demux_003_src1_channel;                                                                // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                                          // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                            // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                  // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [104:0] rsp_demux_005_src0_data;                                                                   // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                  // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [29:0] rsp_demux_005_src0_channel;                                                                // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                          // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                            // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                  // rsp_demux_005:src1_valid -> rsp_mux_001:sink1_valid
	wire  [104:0] rsp_demux_005_src1_data;                                                                   // rsp_demux_005:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_005_src1_ready;                                                                  // rsp_mux_001:sink1_ready -> rsp_demux_005:src1_ready
	wire   [29:0] rsp_demux_005_src1_channel;                                                                // rsp_demux_005:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_005_src1_startofpacket;                                                          // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                            // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                  // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [104:0] rsp_demux_006_src0_data;                                                                   // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                  // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [29:0] rsp_demux_006_src0_channel;                                                                // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                          // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                            // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                  // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [104:0] rsp_demux_007_src0_data;                                                                   // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                  // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [29:0] rsp_demux_007_src0_channel;                                                                // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                          // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                            // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                  // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [104:0] rsp_demux_008_src0_data;                                                                   // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                  // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [29:0] rsp_demux_008_src0_channel;                                                                // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                          // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                            // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                  // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [104:0] rsp_demux_009_src0_data;                                                                   // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                  // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [29:0] rsp_demux_009_src0_channel;                                                                // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                          // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                            // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                  // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [104:0] rsp_demux_010_src0_data;                                                                   // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                  // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [29:0] rsp_demux_010_src0_channel;                                                                // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                          // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                            // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                  // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [104:0] rsp_demux_011_src0_data;                                                                   // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                  // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [29:0] rsp_demux_011_src0_channel;                                                                // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                          // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                            // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                  // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [104:0] rsp_demux_012_src0_data;                                                                   // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                  // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [29:0] rsp_demux_012_src0_channel;                                                                // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                          // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                            // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                  // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [104:0] rsp_demux_013_src0_data;                                                                   // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                  // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [29:0] rsp_demux_013_src0_channel;                                                                // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                          // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                            // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                  // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [104:0] rsp_demux_014_src0_data;                                                                   // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                  // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [29:0] rsp_demux_014_src0_channel;                                                                // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                          // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                            // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                  // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [104:0] rsp_demux_015_src0_data;                                                                   // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                  // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [29:0] rsp_demux_015_src0_channel;                                                                // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                          // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                            // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                  // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [104:0] rsp_demux_016_src0_data;                                                                   // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                  // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [29:0] rsp_demux_016_src0_channel;                                                                // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                          // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                            // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                  // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [104:0] rsp_demux_017_src0_data;                                                                   // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                  // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [29:0] rsp_demux_017_src0_channel;                                                                // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                          // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                            // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                  // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [104:0] rsp_demux_018_src0_data;                                                                   // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                  // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [29:0] rsp_demux_018_src0_channel;                                                                // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                          // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                            // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                  // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [104:0] rsp_demux_019_src0_data;                                                                   // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                  // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [29:0] rsp_demux_019_src0_channel;                                                                // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                          // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                            // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                  // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [104:0] rsp_demux_020_src0_data;                                                                   // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                  // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [29:0] rsp_demux_020_src0_channel;                                                                // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                          // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                            // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                  // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [104:0] rsp_demux_021_src0_data;                                                                   // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                                  // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [29:0] rsp_demux_021_src0_channel;                                                                // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                          // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                            // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                                  // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [104:0] rsp_demux_022_src0_data;                                                                   // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                                  // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [29:0] rsp_demux_022_src0_channel;                                                                // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                          // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                            // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                                  // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [104:0] rsp_demux_023_src0_data;                                                                   // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                                  // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [29:0] rsp_demux_023_src0_channel;                                                                // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                          // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                            // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                                  // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [104:0] rsp_demux_024_src0_data;                                                                   // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                                  // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [29:0] rsp_demux_024_src0_channel;                                                                // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                          // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                            // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_025_src0_valid;                                                                  // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [104:0] rsp_demux_025_src0_data;                                                                   // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire          rsp_demux_025_src0_ready;                                                                  // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire   [29:0] rsp_demux_025_src0_channel;                                                                // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                          // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                            // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                                  // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [104:0] rsp_demux_026_src0_data;                                                                   // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire          rsp_demux_026_src0_ready;                                                                  // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire   [29:0] rsp_demux_026_src0_channel;                                                                // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                          // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                            // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_027_src0_valid;                                                                  // rsp_demux_027:src0_valid -> rsp_mux:sink27_valid
	wire  [104:0] rsp_demux_027_src0_data;                                                                   // rsp_demux_027:src0_data -> rsp_mux:sink27_data
	wire          rsp_demux_027_src0_ready;                                                                  // rsp_mux:sink27_ready -> rsp_demux_027:src0_ready
	wire   [29:0] rsp_demux_027_src0_channel;                                                                // rsp_demux_027:src0_channel -> rsp_mux:sink27_channel
	wire          rsp_demux_027_src0_startofpacket;                                                          // rsp_demux_027:src0_startofpacket -> rsp_mux:sink27_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                            // rsp_demux_027:src0_endofpacket -> rsp_mux:sink27_endofpacket
	wire          rsp_demux_028_src0_valid;                                                                  // rsp_demux_028:src0_valid -> rsp_mux:sink28_valid
	wire  [104:0] rsp_demux_028_src0_data;                                                                   // rsp_demux_028:src0_data -> rsp_mux:sink28_data
	wire          rsp_demux_028_src0_ready;                                                                  // rsp_mux:sink28_ready -> rsp_demux_028:src0_ready
	wire   [29:0] rsp_demux_028_src0_channel;                                                                // rsp_demux_028:src0_channel -> rsp_mux:sink28_channel
	wire          rsp_demux_028_src0_startofpacket;                                                          // rsp_demux_028:src0_startofpacket -> rsp_mux:sink28_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                            // rsp_demux_028:src0_endofpacket -> rsp_mux:sink28_endofpacket
	wire          rsp_demux_029_src0_valid;                                                                  // rsp_demux_029:src0_valid -> rsp_mux:sink29_valid
	wire  [104:0] rsp_demux_029_src0_data;                                                                   // rsp_demux_029:src0_data -> rsp_mux:sink29_data
	wire          rsp_demux_029_src0_ready;                                                                  // rsp_mux:sink29_ready -> rsp_demux_029:src0_ready
	wire   [29:0] rsp_demux_029_src0_channel;                                                                // rsp_demux_029:src0_channel -> rsp_mux:sink29_channel
	wire          rsp_demux_029_src0_startofpacket;                                                          // rsp_demux_029:src0_startofpacket -> rsp_mux:sink29_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                            // rsp_demux_029:src0_endofpacket -> rsp_mux:sink29_endofpacket
	wire          router_002_src_valid;                                                                      // router_002:src_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_valid
	wire   [77:0] router_002_src_data;                                                                       // router_002:src_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                                      // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [29:0] router_002_src_channel;                                                                    // router_002:src_channel -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                              // router_002:src_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                                // router_002:src_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:in_endofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_valid;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [104:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_data;          // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_ready
	wire   [29:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_channel;       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_startofpacket; // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_endofpacket;   // accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_007_src_valid;                                                                      // router_007:src_valid -> sdram_s1_rsp_width_adapter:in_valid
	wire   [86:0] router_007_src_data;                                                                       // router_007:src_data -> sdram_s1_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                                                      // sdram_s1_rsp_width_adapter:in_ready -> router_007:src_ready
	wire   [29:0] router_007_src_channel;                                                                    // router_007:src_channel -> sdram_s1_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                                              // router_007:src_startofpacket -> sdram_s1_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                                                // router_007:src_endofpacket -> sdram_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                                      // sdram_s1_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [104:0] sdram_s1_rsp_width_adapter_src_data;                                                       // sdram_s1_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                                      // rsp_demux_005:sink_ready -> sdram_s1_rsp_width_adapter:out_ready
	wire   [29:0] sdram_s1_rsp_width_adapter_src_channel;                                                    // sdram_s1_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                                              // sdram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                                // sdram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                         // cmd_mux:src_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_valid
	wire  [104:0] cmd_mux_src_data;                                                                          // cmd_mux:src_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [29:0] cmd_mux_src_channel;                                                                       // cmd_mux:src_channel -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                                 // cmd_mux:src_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                   // cmd_mux:src_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:in_endofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_valid;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_valid
	wire   [77:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_data;          // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_data
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_ready;         // accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_ready
	wire   [29:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_channel;       // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_channel -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_channel
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_startofpacket; // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_startofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_startofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_endofpacket;   // accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter:out_endofpacket -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                                                     // cmd_mux_005:src_valid -> sdram_s1_cmd_width_adapter:in_valid
	wire  [104:0] cmd_mux_005_src_data;                                                                      // cmd_mux_005:src_data -> sdram_s1_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                                                     // sdram_s1_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire   [29:0] cmd_mux_005_src_channel;                                                                   // cmd_mux_005:src_channel -> sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                                                             // cmd_mux_005:src_startofpacket -> sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                               // cmd_mux_005:src_endofpacket -> sdram_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                                      // sdram_s1_cmd_width_adapter:out_valid -> sdram_s1_burst_adapter:sink0_valid
	wire   [86:0] sdram_s1_cmd_width_adapter_src_data;                                                       // sdram_s1_cmd_width_adapter:out_data -> sdram_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                                      // sdram_s1_burst_adapter:sink0_ready -> sdram_s1_cmd_width_adapter:out_ready
	wire   [29:0] sdram_s1_cmd_width_adapter_src_channel;                                                    // sdram_s1_cmd_width_adapter:out_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                                              // sdram_s1_cmd_width_adapter:out_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                                // sdram_s1_cmd_width_adapter:out_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                      // cmd_demux:src4_valid -> crosser:in_valid
	wire  [104:0] cmd_demux_src4_data;                                                                       // cmd_demux:src4_data -> crosser:in_data
	wire          cmd_demux_src4_ready;                                                                      // crosser:in_ready -> cmd_demux:src4_ready
	wire   [29:0] cmd_demux_src4_channel;                                                                    // cmd_demux:src4_channel -> crosser:in_channel
	wire          cmd_demux_src4_startofpacket;                                                              // cmd_demux:src4_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                // cmd_demux:src4_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                         // crosser:out_valid -> cmd_mux_004:sink0_valid
	wire  [104:0] crosser_out_data;                                                                          // crosser:out_data -> cmd_mux_004:sink0_data
	wire          crosser_out_ready;                                                                         // cmd_mux_004:sink0_ready -> crosser:out_ready
	wire   [29:0] crosser_out_channel;                                                                       // crosser:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_out_startofpacket;                                                                 // crosser:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                   // crosser:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                  // rsp_demux_004:src0_valid -> crosser_001:in_valid
	wire  [104:0] rsp_demux_004_src0_data;                                                                   // rsp_demux_004:src0_data -> crosser_001:in_data
	wire          rsp_demux_004_src0_ready;                                                                  // crosser_001:in_ready -> rsp_demux_004:src0_ready
	wire   [29:0] rsp_demux_004_src0_channel;                                                                // rsp_demux_004:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                          // rsp_demux_004:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                            // rsp_demux_004:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                     // crosser_001:out_valid -> rsp_mux:sink4_valid
	wire  [104:0] crosser_001_out_data;                                                                      // crosser_001:out_data -> rsp_mux:sink4_data
	wire          crosser_001_out_ready;                                                                     // rsp_mux:sink4_ready -> crosser_001:out_ready
	wire   [29:0] crosser_001_out_channel;                                                                   // crosser_001:out_channel -> rsp_mux:sink4_channel
	wire          crosser_001_out_startofpacket;                                                             // crosser_001:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_001_out_endofpacket;                                                               // crosser_001:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_valid;          // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire    [9:0] accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_data;           // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_ready;          // avalon_st_adapter:in_0_ready -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                             // avalon_st_adapter:out_0_valid -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_out_0_data;                                                              // avalon_st_adapter:out_0_data -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                             // accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                             // avalon_st_adapter:out_0_error -> accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                     // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_001:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                         // avalon_st_adapter_001:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                          // avalon_st_adapter_001:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                         // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                         // avalon_st_adapter_001:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                            // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                             // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_002:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                         // avalon_st_adapter_002:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                          // avalon_st_adapter_002:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                         // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                         // avalon_st_adapter_002:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                            // cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                             // cpu_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_003:in_0_ready -> cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                         // avalon_st_adapter_003:out_0_valid -> cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                          // avalon_st_adapter_003:out_0_data -> cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                         // cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                         // avalon_st_adapter_003:out_0_error -> cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          altpll_pll_slave_agent_rdata_fifo_out_valid;                                               // altpll_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] altpll_pll_slave_agent_rdata_fifo_out_data;                                                // altpll_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          altpll_pll_slave_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_004:in_0_ready -> altpll_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                         // avalon_st_adapter_004:out_0_valid -> altpll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                          // avalon_st_adapter_004:out_0_data -> altpll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                         // altpll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                         // avalon_st_adapter_004:out_0_error -> altpll_pll_slave_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                       // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                        // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                       // avalon_st_adapter_005:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                         // avalon_st_adapter_005:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_005_out_0_data;                                                          // avalon_st_adapter_005:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                         // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                         // avalon_st_adapter_005:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          led_s1_agent_rdata_fifo_src_valid;                                                         // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                                          // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                                         // avalon_st_adapter_006:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                         // avalon_st_adapter_006:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                          // avalon_st_adapter_006:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                         // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                         // avalon_st_adapter_006:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire          hex5_s1_agent_rdata_fifo_src_valid;                                                        // hex5_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] hex5_s1_agent_rdata_fifo_src_data;                                                         // hex5_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          hex5_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_007:in_0_ready -> hex5_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                         // avalon_st_adapter_007:out_0_valid -> hex5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                          // avalon_st_adapter_007:out_0_data -> hex5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                         // hex5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                         // avalon_st_adapter_007:out_0_error -> hex5_s1_agent:rdata_fifo_sink_error
	wire          hex4_s1_agent_rdata_fifo_src_valid;                                                        // hex4_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] hex4_s1_agent_rdata_fifo_src_data;                                                         // hex4_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          hex4_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_008:in_0_ready -> hex4_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                         // avalon_st_adapter_008:out_0_valid -> hex4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                          // avalon_st_adapter_008:out_0_data -> hex4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                         // hex4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                         // avalon_st_adapter_008:out_0_error -> hex4_s1_agent:rdata_fifo_sink_error
	wire          hex3_s1_agent_rdata_fifo_src_valid;                                                        // hex3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] hex3_s1_agent_rdata_fifo_src_data;                                                         // hex3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          hex3_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_009:in_0_ready -> hex3_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                         // avalon_st_adapter_009:out_0_valid -> hex3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                          // avalon_st_adapter_009:out_0_data -> hex3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                         // hex3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                         // avalon_st_adapter_009:out_0_error -> hex3_s1_agent:rdata_fifo_sink_error
	wire          hex2_s1_agent_rdata_fifo_src_valid;                                                        // hex2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] hex2_s1_agent_rdata_fifo_src_data;                                                         // hex2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          hex2_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_010:in_0_ready -> hex2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                         // avalon_st_adapter_010:out_0_valid -> hex2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                          // avalon_st_adapter_010:out_0_data -> hex2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                         // hex2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                         // avalon_st_adapter_010:out_0_error -> hex2_s1_agent:rdata_fifo_sink_error
	wire          hex1_s1_agent_rdata_fifo_src_valid;                                                        // hex1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] hex1_s1_agent_rdata_fifo_src_data;                                                         // hex1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          hex1_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_011:in_0_ready -> hex1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                         // avalon_st_adapter_011:out_0_valid -> hex1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                          // avalon_st_adapter_011:out_0_data -> hex1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                         // hex1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                         // avalon_st_adapter_011:out_0_error -> hex1_s1_agent:rdata_fifo_sink_error
	wire          hex0_s1_agent_rdata_fifo_src_valid;                                                        // hex0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] hex0_s1_agent_rdata_fifo_src_data;                                                         // hex0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          hex0_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_012:in_0_ready -> hex0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                         // avalon_st_adapter_012:out_0_valid -> hex0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                          // avalon_st_adapter_012:out_0_data -> hex0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                         // hex0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                         // avalon_st_adapter_012:out_0_error -> hex0_s1_agent:rdata_fifo_sink_error
	wire          switch_s1_agent_rdata_fifo_src_valid;                                                      // switch_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] switch_s1_agent_rdata_fifo_src_data;                                                       // switch_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          switch_s1_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_013:in_0_ready -> switch_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                         // avalon_st_adapter_013:out_0_valid -> switch_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                          // avalon_st_adapter_013:out_0_data -> switch_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                         // switch_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                         // avalon_st_adapter_013:out_0_error -> switch_s1_agent:rdata_fifo_sink_error
	wire          button_s1_agent_rdata_fifo_src_valid;                                                      // button_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] button_s1_agent_rdata_fifo_src_data;                                                       // button_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          button_s1_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_014:in_0_ready -> button_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                         // avalon_st_adapter_014:out_0_valid -> button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                          // avalon_st_adapter_014:out_0_data -> button_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                         // button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                         // avalon_st_adapter_014:out_0_error -> button_s1_agent:rdata_fifo_sink_error
	wire          timer4_s1_agent_rdata_fifo_src_valid;                                                      // timer4_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] timer4_s1_agent_rdata_fifo_src_data;                                                       // timer4_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          timer4_s1_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_015:in_0_ready -> timer4_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                         // avalon_st_adapter_015:out_0_valid -> timer4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                          // avalon_st_adapter_015:out_0_data -> timer4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                         // timer4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                         // avalon_st_adapter_015:out_0_error -> timer4_s1_agent:rdata_fifo_sink_error
	wire          timer3_s1_agent_rdata_fifo_src_valid;                                                      // timer3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] timer3_s1_agent_rdata_fifo_src_data;                                                       // timer3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          timer3_s1_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_016:in_0_ready -> timer3_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                         // avalon_st_adapter_016:out_0_valid -> timer3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                          // avalon_st_adapter_016:out_0_data -> timer3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                         // timer3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                         // avalon_st_adapter_016:out_0_error -> timer3_s1_agent:rdata_fifo_sink_error
	wire          timer1_s1_agent_rdata_fifo_src_valid;                                                      // timer1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] timer1_s1_agent_rdata_fifo_src_data;                                                       // timer1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          timer1_s1_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_017:in_0_ready -> timer1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                         // avalon_st_adapter_017:out_0_valid -> timer1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                          // avalon_st_adapter_017:out_0_data -> timer1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                         // timer1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                         // avalon_st_adapter_017:out_0_error -> timer1_s1_agent:rdata_fifo_sink_error
	wire          timer_s1_agent_rdata_fifo_src_valid;                                                       // timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                                        // timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_018:in_0_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                         // avalon_st_adapter_018:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                          // avalon_st_adapter_018:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                         // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                         // avalon_st_adapter_018:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire          timestamp_timer_s1_agent_rdata_fifo_src_valid;                                             // timestamp_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] timestamp_timer_s1_agent_rdata_fifo_src_data;                                              // timestamp_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          timestamp_timer_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_019:in_0_ready -> timestamp_timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                         // avalon_st_adapter_019:out_0_valid -> timestamp_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                          // avalon_st_adapter_019:out_0_data -> timestamp_timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                         // timestamp_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                         // avalon_st_adapter_019:out_0_error -> timestamp_timer_s1_agent:rdata_fifo_sink_error
	wire          timer0_s1_agent_rdata_fifo_src_valid;                                                      // timer0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] timer0_s1_agent_rdata_fifo_src_data;                                                       // timer0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          timer0_s1_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_020:in_0_ready -> timer0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                         // avalon_st_adapter_020:out_0_valid -> timer0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                          // avalon_st_adapter_020:out_0_data -> timer0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                         // timer0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                         // avalon_st_adapter_020:out_0_error -> timer0_s1_agent:rdata_fifo_sink_error
	wire          hex_timer_s1_agent_rdata_fifo_src_valid;                                                   // hex_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] hex_timer_s1_agent_rdata_fifo_src_data;                                                    // hex_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          hex_timer_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_021:in_0_ready -> hex_timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                         // avalon_st_adapter_021:out_0_valid -> hex_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                          // avalon_st_adapter_021:out_0_data -> hex_timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                         // hex_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                         // avalon_st_adapter_021:out_0_error -> hex_timer_s1_agent:rdata_fifo_sink_error
	wire          acc_timer_s1_agent_rdata_fifo_src_valid;                                                   // acc_timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] acc_timer_s1_agent_rdata_fifo_src_data;                                                    // acc_timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          acc_timer_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_022:in_0_ready -> acc_timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                         // avalon_st_adapter_022:out_0_valid -> acc_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                          // avalon_st_adapter_022:out_0_data -> acc_timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                         // acc_timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                         // avalon_st_adapter_022:out_0_error -> acc_timer_s1_agent:rdata_fifo_sink_error
	wire          hardware_out_x_s1_agent_rdata_fifo_src_valid;                                              // hardware_out_x_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] hardware_out_x_s1_agent_rdata_fifo_src_data;                                               // hardware_out_x_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          hardware_out_x_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_023:in_0_ready -> hardware_out_x_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                         // avalon_st_adapter_023:out_0_valid -> hardware_out_x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                          // avalon_st_adapter_023:out_0_data -> hardware_out_x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                         // hardware_out_x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                         // avalon_st_adapter_023:out_0_error -> hardware_out_x_s1_agent:rdata_fifo_sink_error
	wire          hardware_in_x_s1_agent_rdata_fifo_src_valid;                                               // hardware_in_x_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] hardware_in_x_s1_agent_rdata_fifo_src_data;                                                // hardware_in_x_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          hardware_in_x_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_024:in_0_ready -> hardware_in_x_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                         // avalon_st_adapter_024:out_0_valid -> hardware_in_x_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                          // avalon_st_adapter_024:out_0_data -> hardware_in_x_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                         // hardware_in_x_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                         // avalon_st_adapter_024:out_0_error -> hardware_in_x_s1_agent:rdata_fifo_sink_error
	wire          hardware_clocks_s1_agent_rdata_fifo_src_valid;                                             // hardware_clocks_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] hardware_clocks_s1_agent_rdata_fifo_src_data;                                              // hardware_clocks_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          hardware_clocks_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_025:in_0_ready -> hardware_clocks_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                         // avalon_st_adapter_025:out_0_valid -> hardware_clocks_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                          // avalon_st_adapter_025:out_0_data -> hardware_clocks_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                         // hardware_clocks_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                         // avalon_st_adapter_025:out_0_error -> hardware_clocks_s1_agent:rdata_fifo_sink_error
	wire          hardware_in_y_s1_agent_rdata_fifo_src_valid;                                               // hardware_in_y_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] hardware_in_y_s1_agent_rdata_fifo_src_data;                                                // hardware_in_y_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          hardware_in_y_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_026:in_0_ready -> hardware_in_y_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                         // avalon_st_adapter_026:out_0_valid -> hardware_in_y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                          // avalon_st_adapter_026:out_0_data -> hardware_in_y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                         // hardware_in_y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                         // avalon_st_adapter_026:out_0_error -> hardware_in_y_s1_agent:rdata_fifo_sink_error
	wire          hardware_out_y_s1_agent_rdata_fifo_src_valid;                                              // hardware_out_y_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] hardware_out_y_s1_agent_rdata_fifo_src_data;                                               // hardware_out_y_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_027:in_0_data
	wire          hardware_out_y_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_027:in_0_ready -> hardware_out_y_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                         // avalon_st_adapter_027:out_0_valid -> hardware_out_y_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                          // avalon_st_adapter_027:out_0_data -> hardware_out_y_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                         // hardware_out_y_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                         // avalon_st_adapter_027:out_0_error -> hardware_out_y_s1_agent:rdata_fifo_sink_error
	wire          hardware_out_z_s1_agent_rdata_fifo_src_valid;                                              // hardware_out_z_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_028:in_0_valid
	wire   [33:0] hardware_out_z_s1_agent_rdata_fifo_src_data;                                               // hardware_out_z_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_028:in_0_data
	wire          hardware_out_z_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_028:in_0_ready -> hardware_out_z_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_028_out_0_valid;                                                         // avalon_st_adapter_028:out_0_valid -> hardware_out_z_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_028_out_0_data;                                                          // avalon_st_adapter_028:out_0_data -> hardware_out_z_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_028_out_0_ready;                                                         // hardware_out_z_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_028:out_0_ready
	wire    [0:0] avalon_st_adapter_028_out_0_error;                                                         // avalon_st_adapter_028:out_0_error -> hardware_out_z_s1_agent:rdata_fifo_sink_error
	wire          hardware_in_z_s1_agent_rdata_fifo_src_valid;                                               // hardware_in_z_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_029:in_0_valid
	wire   [33:0] hardware_in_z_s1_agent_rdata_fifo_src_data;                                                // hardware_in_z_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_029:in_0_data
	wire          hardware_in_z_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_029:in_0_ready -> hardware_in_z_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_029_out_0_valid;                                                         // avalon_st_adapter_029:out_0_valid -> hardware_in_z_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_029_out_0_data;                                                          // avalon_st_adapter_029:out_0_data -> hardware_in_z_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_029_out_0_ready;                                                         // hardware_in_z_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_029:out_0_ready
	wire    [0:0] avalon_st_adapter_029_out_0_error;                                                         // avalon_st_adapter_029:out_0_error -> hardware_in_z_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (25),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (25),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_data_master_translator (
		.clk                    (altpll_c0_clk),                                                      //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_readdatavalid       (),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (25),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (25),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (altpll_c0_clk),                                                             //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_translator (
		.clk                    (altpll_c0_clk),                                                                //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                        //                    reset.reset
		.uav_address            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_read),          //                         .read
		.uav_write              (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (accelerometer_spi_avalon_accelerometer_spi_mode_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (accelerometer_spi_avalon_accelerometer_spi_mode_slave_write),                  //                         .write
		.av_read                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_read),                   //                         .read
		.av_readdata            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_readdata),               //                         .readdata
		.av_writedata           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_writedata),              //                         .writedata
		.av_byteenable          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                                             //              (terminated)
		.av_burstcount          (),                                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                                         //              (terminated)
		.av_writebyteenable     (),                                                                             //              (terminated)
		.av_lock                (),                                                                             //              (terminated)
		.av_chipselect          (),                                                                             //              (terminated)
		.av_clken               (),                                                                             //              (terminated)
		.uav_clken              (1'b0),                                                                         //              (terminated)
		.av_debugaccess         (),                                                                             //              (terminated)
		.av_outputenable        (),                                                                             //              (terminated)
		.uav_response           (),                                                                             //              (terminated)
		.av_response            (2'b00),                                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (altpll_c0_clk),                              //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (altpll_c0_clk),                              //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_pll_slave_translator (
		.clk                    (clk_clk_clk),                                              //                      clk.clk
		.reset                  (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_pll_slave_write),                                   //                         .write
		.av_read                (altpll_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (22),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                //                         .read
		.uav_write              (sdram_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (sdram_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                        //                         .write
		.av_read                (sdram_s1_read),                         //                         .read
		.av_readdata            (sdram_s1_readdata),                     //                         .readdata
		.av_writedata           (sdram_s1_writedata),                    //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                   //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                  //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                   //                         .chipselect
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                  //                         .read
		.uav_write              (led_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (led_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                          //                         .write
		.av_readdata            (led_s1_readdata),                       //                         .readdata
		.av_writedata           (led_s1_writedata),                      //                         .writedata
		.av_chipselect          (led_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex5_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex5_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (hex5_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (hex5_s1_agent_m0_read),                 //                         .read
		.uav_write              (hex5_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (hex5_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (hex5_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (hex5_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (hex5_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (hex5_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (hex5_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (hex5_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (hex5_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (hex5_s1_write),                         //                         .write
		.av_readdata            (hex5_s1_readdata),                      //                         .readdata
		.av_writedata           (hex5_s1_writedata),                     //                         .writedata
		.av_chipselect          (hex5_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex4_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex4_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (hex4_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (hex4_s1_agent_m0_read),                 //                         .read
		.uav_write              (hex4_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (hex4_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (hex4_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (hex4_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (hex4_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (hex4_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (hex4_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (hex4_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (hex4_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (hex4_s1_write),                         //                         .write
		.av_readdata            (hex4_s1_readdata),                      //                         .readdata
		.av_writedata           (hex4_s1_writedata),                     //                         .writedata
		.av_chipselect          (hex4_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex3_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex3_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (hex3_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (hex3_s1_agent_m0_read),                 //                         .read
		.uav_write              (hex3_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (hex3_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (hex3_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (hex3_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (hex3_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (hex3_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (hex3_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (hex3_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (hex3_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (hex3_s1_write),                         //                         .write
		.av_readdata            (hex3_s1_readdata),                      //                         .readdata
		.av_writedata           (hex3_s1_writedata),                     //                         .writedata
		.av_chipselect          (hex3_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex2_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex2_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (hex2_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (hex2_s1_agent_m0_read),                 //                         .read
		.uav_write              (hex2_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (hex2_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (hex2_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (hex2_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (hex2_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (hex2_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (hex2_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (hex2_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (hex2_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (hex2_s1_write),                         //                         .write
		.av_readdata            (hex2_s1_readdata),                      //                         .readdata
		.av_writedata           (hex2_s1_writedata),                     //                         .writedata
		.av_chipselect          (hex2_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex1_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex1_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (hex1_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (hex1_s1_agent_m0_read),                 //                         .read
		.uav_write              (hex1_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (hex1_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (hex1_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (hex1_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (hex1_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (hex1_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (hex1_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (hex1_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (hex1_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (hex1_s1_write),                         //                         .write
		.av_readdata            (hex1_s1_readdata),                      //                         .readdata
		.av_writedata           (hex1_s1_writedata),                     //                         .writedata
		.av_chipselect          (hex1_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex0_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex0_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (hex0_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (hex0_s1_agent_m0_read),                 //                         .read
		.uav_write              (hex0_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (hex0_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (hex0_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (hex0_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (hex0_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (hex0_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (hex0_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (hex0_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (hex0_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (hex0_s1_write),                         //                         .write
		.av_readdata            (hex0_s1_readdata),                      //                         .readdata
		.av_writedata           (hex0_s1_writedata),                     //                         .writedata
		.av_chipselect          (hex0_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switch_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switch_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (switch_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (switch_s1_agent_m0_read),               //                         .read
		.uav_write              (switch_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (switch_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (switch_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (switch_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (switch_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (switch_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (switch_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (switch_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (switch_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (switch_s1_readdata),                    //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (button_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (button_s1_agent_m0_read),               //                         .read
		.uav_write              (button_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (button_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (button_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (button_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (button_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (button_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (button_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (button_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (button_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (button_s1_readdata),                    //                         .readdata
		.av_write               (),                                      //              (terminated)
		.av_read                (),                                      //              (terminated)
		.av_writedata           (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer4_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer4_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (timer4_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (timer4_s1_agent_m0_read),               //                         .read
		.uav_write              (timer4_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (timer4_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (timer4_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (timer4_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (timer4_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (timer4_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (timer4_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (timer4_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (timer4_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (timer4_s1_write),                       //                         .write
		.av_readdata            (timer4_s1_readdata),                    //                         .readdata
		.av_writedata           (timer4_s1_writedata),                   //                         .writedata
		.av_chipselect          (timer4_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer3_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer3_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (timer3_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (timer3_s1_agent_m0_read),               //                         .read
		.uav_write              (timer3_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (timer3_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (timer3_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (timer3_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (timer3_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (timer3_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (timer3_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (timer3_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (timer3_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (timer3_s1_write),                       //                         .write
		.av_readdata            (timer3_s1_readdata),                    //                         .readdata
		.av_writedata           (timer3_s1_writedata),                   //                         .writedata
		.av_chipselect          (timer3_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer1_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer1_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (timer1_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (timer1_s1_agent_m0_read),               //                         .read
		.uav_write              (timer1_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (timer1_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (timer1_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (timer1_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (timer1_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (timer1_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (timer1_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (timer1_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (timer1_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (timer1_s1_write),                       //                         .write
		.av_readdata            (timer1_s1_readdata),                    //                         .readdata
		.av_writedata           (timer1_s1_writedata),                   //                         .writedata
		.av_chipselect          (timer1_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                //                         .read
		.uav_write              (timer_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (timer_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                        //                         .write
		.av_readdata            (timer_s1_readdata),                     //                         .readdata
		.av_writedata           (timer_s1_writedata),                    //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timestamp_timer_s1_translator (
		.clk                    (altpll_c0_clk),                             //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (timestamp_timer_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (timestamp_timer_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (timestamp_timer_s1_agent_m0_read),          //                         .read
		.uav_write              (timestamp_timer_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (timestamp_timer_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (timestamp_timer_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (timestamp_timer_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (timestamp_timer_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (timestamp_timer_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (timestamp_timer_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (timestamp_timer_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (timestamp_timer_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (timestamp_timer_s1_write),                  //                         .write
		.av_readdata            (timestamp_timer_s1_readdata),               //                         .readdata
		.av_writedata           (timestamp_timer_s1_writedata),              //                         .writedata
		.av_chipselect          (timestamp_timer_s1_chipselect),             //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer0_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer0_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (timer0_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (timer0_s1_agent_m0_read),               //                         .read
		.uav_write              (timer0_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (timer0_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (timer0_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (timer0_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (timer0_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (timer0_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (timer0_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (timer0_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (timer0_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (timer0_s1_write),                       //                         .write
		.av_readdata            (timer0_s1_readdata),                    //                         .readdata
		.av_writedata           (timer0_s1_writedata),                   //                         .writedata
		.av_chipselect          (timer0_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_timer_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_timer_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (hex_timer_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (hex_timer_s1_agent_m0_read),            //                         .read
		.uav_write              (hex_timer_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (hex_timer_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (hex_timer_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (hex_timer_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (hex_timer_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (hex_timer_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (hex_timer_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (hex_timer_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (hex_timer_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (hex_timer_s1_write),                    //                         .write
		.av_readdata            (hex_timer_s1_readdata),                 //                         .readdata
		.av_writedata           (hex_timer_s1_writedata),                //                         .writedata
		.av_chipselect          (hex_timer_s1_chipselect),               //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) acc_timer_s1_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (acc_timer_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (acc_timer_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (acc_timer_s1_agent_m0_read),            //                         .read
		.uav_write              (acc_timer_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (acc_timer_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (acc_timer_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (acc_timer_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (acc_timer_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (acc_timer_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (acc_timer_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (acc_timer_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (acc_timer_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (acc_timer_s1_write),                    //                         .write
		.av_readdata            (acc_timer_s1_readdata),                 //                         .readdata
		.av_writedata           (acc_timer_s1_writedata),                //                         .writedata
		.av_chipselect          (acc_timer_s1_chipselect),               //                         .chipselect
		.av_read                (),                                      //              (terminated)
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_burstcount          (),                                      //              (terminated)
		.av_byteenable          (),                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                  //              (terminated)
		.av_waitrequest         (1'b0),                                  //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_lock                (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_debugaccess         (),                                      //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hardware_out_x_s1_translator (
		.clk                    (altpll_c0_clk),                            //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (hardware_out_x_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hardware_out_x_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hardware_out_x_s1_agent_m0_read),          //                         .read
		.uav_write              (hardware_out_x_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (hardware_out_x_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hardware_out_x_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hardware_out_x_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hardware_out_x_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hardware_out_x_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hardware_out_x_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hardware_out_x_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hardware_out_x_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (hardware_out_x_s1_write),                  //                         .write
		.av_readdata            (hardware_out_x_s1_readdata),               //                         .readdata
		.av_writedata           (hardware_out_x_s1_writedata),              //                         .writedata
		.av_chipselect          (hardware_out_x_s1_chipselect),             //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hardware_in_x_s1_translator (
		.clk                    (altpll_c0_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (hardware_in_x_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hardware_in_x_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hardware_in_x_s1_agent_m0_read),          //                         .read
		.uav_write              (hardware_in_x_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (hardware_in_x_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hardware_in_x_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hardware_in_x_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hardware_in_x_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hardware_in_x_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hardware_in_x_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hardware_in_x_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hardware_in_x_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (hardware_in_x_s1_readdata),               //                         .readdata
		.av_write               (),                                        //              (terminated)
		.av_read                (),                                        //              (terminated)
		.av_writedata           (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hardware_clocks_s1_translator (
		.clk                    (altpll_c0_clk),                             //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (hardware_clocks_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hardware_clocks_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hardware_clocks_s1_agent_m0_read),          //                         .read
		.uav_write              (hardware_clocks_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (hardware_clocks_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hardware_clocks_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hardware_clocks_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hardware_clocks_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hardware_clocks_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hardware_clocks_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hardware_clocks_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hardware_clocks_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (hardware_clocks_s1_write),                  //                         .write
		.av_readdata            (hardware_clocks_s1_readdata),               //                         .readdata
		.av_writedata           (hardware_clocks_s1_writedata),              //                         .writedata
		.av_chipselect          (hardware_clocks_s1_chipselect),             //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hardware_in_y_s1_translator (
		.clk                    (altpll_c0_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (hardware_in_y_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hardware_in_y_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hardware_in_y_s1_agent_m0_read),          //                         .read
		.uav_write              (hardware_in_y_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (hardware_in_y_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hardware_in_y_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hardware_in_y_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hardware_in_y_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hardware_in_y_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hardware_in_y_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hardware_in_y_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hardware_in_y_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (hardware_in_y_s1_readdata),               //                         .readdata
		.av_write               (),                                        //              (terminated)
		.av_read                (),                                        //              (terminated)
		.av_writedata           (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hardware_out_y_s1_translator (
		.clk                    (altpll_c0_clk),                            //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (hardware_out_y_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hardware_out_y_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hardware_out_y_s1_agent_m0_read),          //                         .read
		.uav_write              (hardware_out_y_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (hardware_out_y_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hardware_out_y_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hardware_out_y_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hardware_out_y_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hardware_out_y_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hardware_out_y_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hardware_out_y_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hardware_out_y_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (hardware_out_y_s1_write),                  //                         .write
		.av_readdata            (hardware_out_y_s1_readdata),               //                         .readdata
		.av_writedata           (hardware_out_y_s1_writedata),              //                         .writedata
		.av_chipselect          (hardware_out_y_s1_chipselect),             //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hardware_out_z_s1_translator (
		.clk                    (altpll_c0_clk),                            //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (hardware_out_z_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hardware_out_z_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hardware_out_z_s1_agent_m0_read),          //                         .read
		.uav_write              (hardware_out_z_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (hardware_out_z_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hardware_out_z_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hardware_out_z_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hardware_out_z_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hardware_out_z_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hardware_out_z_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hardware_out_z_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hardware_out_z_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (hardware_out_z_s1_write),                  //                         .write
		.av_readdata            (hardware_out_z_s1_readdata),               //                         .readdata
		.av_writedata           (hardware_out_z_s1_writedata),              //                         .writedata
		.av_chipselect          (hardware_out_z_s1_chipselect),             //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (25),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hardware_in_z_s1_translator (
		.clk                    (altpll_c0_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (hardware_in_z_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hardware_in_z_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hardware_in_z_s1_agent_m0_read),          //                         .read
		.uav_write              (hardware_in_z_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (hardware_in_z_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hardware_in_z_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hardware_in_z_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hardware_in_z_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hardware_in_z_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hardware_in_z_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hardware_in_z_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hardware_in_z_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (hardware_in_z_s1_readdata),               //                         .readdata
		.av_write               (),                                        //              (terminated)
		.av_read                (),                                        //              (terminated)
		.av_writedata           (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (92),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_EXCLUSIVE       (66),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (30),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (altpll_c0_clk),                                                      //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                  //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                   //          .data
		.rp_channel            (rsp_mux_src_channel),                                                //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                          //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                            //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                  //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (92),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_EXCLUSIVE       (66),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (30),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (altpll_c0_clk),                                                             //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (77),
		.PKT_ORI_BURST_SIZE_L      (75),
		.PKT_RESPONSE_STATUS_H     (74),
		.PKT_RESPONSE_STATUS_L     (73),
		.PKT_BURST_SIZE_H          (48),
		.PKT_BURST_SIZE_L          (46),
		.PKT_TRANS_LOCK            (38),
		.PKT_BEGIN_BURST           (53),
		.PKT_PROTECTION_H          (68),
		.PKT_PROTECTION_L          (66),
		.PKT_BURSTWRAP_H           (45),
		.PKT_BURSTWRAP_L           (43),
		.PKT_BYTE_CNT_H            (42),
		.PKT_BYTE_CNT_L            (40),
		.PKT_ADDR_H                (33),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (34),
		.PKT_TRANS_POSTED          (35),
		.PKT_TRANS_WRITE           (36),
		.PKT_TRANS_READ            (37),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (59),
		.PKT_SRC_ID_L              (55),
		.PKT_DEST_ID_H             (64),
		.PKT_DEST_ID_L             (60),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (78),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent (
		.clk                     (altpll_c0_clk),                                                                             //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                                                     //       clk_reset.reset
		.m0_address              (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                             //                .error
		.rdata_fifo_src_ready    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (79),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                                                          //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_data           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_data),             //        in.data
		.in_valid          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                  // (terminated)
		.csr_read          (1'b0),                                                                                   // (terminated)
		.csr_write         (1'b0),                                                                                   // (terminated)
		.csr_readdata      (),                                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                   // (terminated)
		.almost_full_data  (),                                                                                       // (terminated)
		.almost_empty_data (),                                                                                       // (terminated)
		.in_empty          (1'b0),                                                                                   // (terminated)
		.out_empty         (),                                                                                       // (terminated)
		.in_error          (1'b0),                                                                                   // (terminated)
		.out_error         (),                                                                                       // (terminated)
		.in_channel        (1'b0),                                                                                   // (terminated)
		.out_channel       ()                                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (altpll_c0_clk),                                                //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                                //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (altpll_c0_clk),                                        //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                        //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (altpll_c0_clk),                                        //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                              //                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                        //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_pll_slave_agent (
		.clk                     (clk_clk_clk),                                              //             clk.clk
		.reset                   (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                  //                .channel
		.rf_sink_ready           (altpll_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (altpll_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_pll_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                              //       clk.clk
		.reset             (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_pll_slave_agent_rdata_fifo (
		.clk               (clk_clk_clk),                                              //       clk.clk
		.reset             (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (68),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (69),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (altpll_c0_clk),                                //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),            //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                             //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                         //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_startofpacket  (1'b0),                                  // (terminated)
		.in_endofpacket    (1'b0),                                  // (terminated)
		.out_startofpacket (),                                      // (terminated)
		.out_endofpacket   (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (altpll_c0_clk),                           //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (led_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (led_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                   //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                   //                .valid
		.cp_data                 (cmd_mux_006_src_data),                    //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),           //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),             //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                 //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),       //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                           //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex5_s1_agent (
		.clk                     (altpll_c0_clk),                            //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (hex5_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex5_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex5_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex5_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex5_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex5_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex5_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex5_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex5_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex5_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex5_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex5_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex5_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex5_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex5_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex5_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_007_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                  //                .channel
		.rf_sink_ready           (hex5_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex5_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex5_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex5_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex5_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex5_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex5_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex5_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex5_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex5_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),        //                .error
		.rdata_fifo_src_ready    (hex5_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex5_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex5_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex5_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (hex5_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex5_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex5_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex5_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex5_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex5_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex5_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex5_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex5_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex5_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex4_s1_agent (
		.clk                     (altpll_c0_clk),                            //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (hex4_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex4_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex4_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex4_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex4_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex4_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex4_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex4_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex4_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex4_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex4_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex4_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex4_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex4_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex4_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex4_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_008_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                  //                .channel
		.rf_sink_ready           (hex4_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex4_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex4_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex4_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex4_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex4_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex4_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex4_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex4_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex4_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),        //                .error
		.rdata_fifo_src_ready    (hex4_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex4_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex4_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex4_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (hex4_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex4_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex4_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex4_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex4_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex4_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex4_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex4_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex4_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex4_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex3_s1_agent (
		.clk                     (altpll_c0_clk),                            //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (hex3_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex3_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex3_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex3_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex3_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex3_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex3_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex3_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex3_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex3_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex3_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex3_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex3_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex3_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex3_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex3_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_009_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                  //                .channel
		.rf_sink_ready           (hex3_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex3_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex3_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex3_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex3_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex3_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex3_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex3_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex3_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex3_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),        //                .error
		.rdata_fifo_src_ready    (hex3_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex3_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex3_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex3_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (hex3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex2_s1_agent (
		.clk                     (altpll_c0_clk),                            //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (hex2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_010_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                  //                .channel
		.rf_sink_ready           (hex2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),        //                .error
		.rdata_fifo_src_ready    (hex2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex2_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (hex2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex1_s1_agent (
		.clk                     (altpll_c0_clk),                            //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (hex1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_011_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                  //                .channel
		.rf_sink_ready           (hex1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),        //                .error
		.rdata_fifo_src_ready    (hex1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex1_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (hex1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex0_s1_agent (
		.clk                     (altpll_c0_clk),                            //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (hex0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_012_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                  //                .channel
		.rf_sink_ready           (hex0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),        //                .error
		.rdata_fifo_src_ready    (hex0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex0_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (hex0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switch_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (switch_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (switch_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (switch_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (switch_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (switch_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (switch_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (switch_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (switch_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (switch_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (switch_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (switch_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (switch_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (switch_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (switch_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (switch_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (switch_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_013_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                    //                .channel
		.rf_sink_ready           (switch_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (switch_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (switch_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (switch_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (switch_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (switch_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (switch_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (switch_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (switch_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (switch_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),          //                .error
		.rdata_fifo_src_ready    (switch_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switch_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (switch_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switch_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (switch_s1_agent_rf_source_data),             //        in.data
		.in_valid          (switch_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (switch_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (switch_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (switch_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (switch_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (switch_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (switch_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (switch_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (switch_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (button_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (button_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (button_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (button_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (button_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (button_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (button_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (button_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (button_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (button_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (button_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (button_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (button_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (button_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (button_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (button_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_014_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                    //                .channel
		.rf_sink_ready           (button_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (button_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (button_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (button_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (button_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (button_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (button_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (button_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (button_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (button_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),          //                .error
		.rdata_fifo_src_ready    (button_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (button_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer4_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (timer4_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer4_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer4_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer4_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer4_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer4_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer4_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer4_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer4_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer4_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer4_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer4_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer4_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer4_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer4_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer4_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_015_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                    //                .channel
		.rf_sink_ready           (timer4_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer4_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer4_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer4_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer4_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer4_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer4_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer4_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer4_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer4_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),          //                .error
		.rdata_fifo_src_ready    (timer4_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer4_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer4_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer4_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (timer4_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer4_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer4_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer4_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer4_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer4_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer4_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer4_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer4_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer4_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer3_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (timer3_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer3_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer3_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer3_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer3_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer3_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer3_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer3_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer3_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer3_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer3_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer3_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer3_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer3_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer3_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer3_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_016_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                    //                .channel
		.rf_sink_ready           (timer3_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer3_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer3_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer3_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer3_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer3_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer3_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer3_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer3_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer3_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),          //                .error
		.rdata_fifo_src_ready    (timer3_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer3_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer3_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer3_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (timer3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer1_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (timer1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_017_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                    //                .channel
		.rf_sink_ready           (timer1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),          //                .error
		.rdata_fifo_src_ready    (timer1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer1_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (timer1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (altpll_c0_clk),                             //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_018_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                   //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),         //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                             //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timestamp_timer_s1_agent (
		.clk                     (altpll_c0_clk),                                       //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (timestamp_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timestamp_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timestamp_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timestamp_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timestamp_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timestamp_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timestamp_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timestamp_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timestamp_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timestamp_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timestamp_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timestamp_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timestamp_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timestamp_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timestamp_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timestamp_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                             //                .channel
		.rf_sink_ready           (timestamp_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timestamp_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timestamp_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timestamp_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timestamp_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timestamp_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timestamp_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timestamp_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timestamp_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timestamp_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (timestamp_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timestamp_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timestamp_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timestamp_timer_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                       //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (timestamp_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timestamp_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timestamp_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timestamp_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timestamp_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timestamp_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timestamp_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timestamp_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timestamp_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timestamp_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer0_s1_agent (
		.clk                     (altpll_c0_clk),                              //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (timer0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_020_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                    //                .channel
		.rf_sink_ready           (timer0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),          //                .error
		.rdata_fifo_src_ready    (timer0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer0_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                              //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (timer0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex_timer_s1_agent (
		.clk                     (altpll_c0_clk),                                 //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (hex_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_021_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                       //                .channel
		.rf_sink_ready           (hex_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),             //                .error
		.rdata_fifo_src_ready    (hex_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_timer_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                 //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (hex_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) acc_timer_s1_agent (
		.clk                     (altpll_c0_clk),                                 //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (acc_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (acc_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (acc_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (acc_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (acc_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (acc_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (acc_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (acc_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (acc_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (acc_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (acc_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (acc_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (acc_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (acc_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (acc_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (acc_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_022_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                       //                .channel
		.rf_sink_ready           (acc_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (acc_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (acc_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (acc_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (acc_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (acc_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (acc_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (acc_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (acc_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (acc_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),             //                .error
		.rdata_fifo_src_ready    (acc_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (acc_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (acc_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) acc_timer_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                 //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (acc_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (acc_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (acc_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (acc_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (acc_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (acc_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (acc_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (acc_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (acc_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (acc_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hardware_out_x_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (hardware_out_x_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hardware_out_x_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hardware_out_x_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hardware_out_x_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hardware_out_x_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hardware_out_x_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hardware_out_x_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hardware_out_x_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hardware_out_x_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hardware_out_x_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hardware_out_x_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hardware_out_x_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hardware_out_x_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hardware_out_x_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hardware_out_x_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hardware_out_x_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_023_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                            //                .channel
		.rf_sink_ready           (hardware_out_x_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hardware_out_x_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hardware_out_x_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hardware_out_x_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hardware_out_x_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hardware_out_x_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hardware_out_x_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hardware_out_x_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hardware_out_x_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hardware_out_x_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (hardware_out_x_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hardware_out_x_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hardware_out_x_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hardware_out_x_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (hardware_out_x_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hardware_out_x_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hardware_out_x_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hardware_out_x_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hardware_out_x_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hardware_out_x_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hardware_out_x_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hardware_out_x_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hardware_out_x_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hardware_out_x_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hardware_in_x_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (hardware_in_x_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hardware_in_x_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hardware_in_x_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hardware_in_x_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hardware_in_x_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hardware_in_x_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hardware_in_x_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hardware_in_x_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hardware_in_x_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hardware_in_x_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hardware_in_x_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hardware_in_x_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hardware_in_x_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hardware_in_x_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hardware_in_x_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hardware_in_x_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_024_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                           //                .channel
		.rf_sink_ready           (hardware_in_x_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hardware_in_x_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hardware_in_x_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hardware_in_x_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hardware_in_x_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hardware_in_x_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hardware_in_x_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hardware_in_x_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hardware_in_x_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hardware_in_x_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (hardware_in_x_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hardware_in_x_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hardware_in_x_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hardware_in_x_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (hardware_in_x_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hardware_in_x_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hardware_in_x_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hardware_in_x_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hardware_in_x_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hardware_in_x_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hardware_in_x_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hardware_in_x_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hardware_in_x_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hardware_in_x_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hardware_clocks_s1_agent (
		.clk                     (altpll_c0_clk),                                       //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (hardware_clocks_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hardware_clocks_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hardware_clocks_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hardware_clocks_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hardware_clocks_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hardware_clocks_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hardware_clocks_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hardware_clocks_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hardware_clocks_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hardware_clocks_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hardware_clocks_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hardware_clocks_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hardware_clocks_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hardware_clocks_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hardware_clocks_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hardware_clocks_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_025_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                             //                .channel
		.rf_sink_ready           (hardware_clocks_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hardware_clocks_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hardware_clocks_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hardware_clocks_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hardware_clocks_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hardware_clocks_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hardware_clocks_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hardware_clocks_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hardware_clocks_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hardware_clocks_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (hardware_clocks_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hardware_clocks_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hardware_clocks_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hardware_clocks_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                       //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (hardware_clocks_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hardware_clocks_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hardware_clocks_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hardware_clocks_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hardware_clocks_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hardware_clocks_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hardware_clocks_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hardware_clocks_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hardware_clocks_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hardware_clocks_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hardware_in_y_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (hardware_in_y_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hardware_in_y_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hardware_in_y_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hardware_in_y_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hardware_in_y_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hardware_in_y_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hardware_in_y_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hardware_in_y_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hardware_in_y_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hardware_in_y_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hardware_in_y_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hardware_in_y_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hardware_in_y_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hardware_in_y_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hardware_in_y_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hardware_in_y_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_026_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                           //                .channel
		.rf_sink_ready           (hardware_in_y_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hardware_in_y_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hardware_in_y_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hardware_in_y_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hardware_in_y_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hardware_in_y_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hardware_in_y_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hardware_in_y_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hardware_in_y_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hardware_in_y_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (hardware_in_y_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hardware_in_y_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hardware_in_y_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hardware_in_y_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (hardware_in_y_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hardware_in_y_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hardware_in_y_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hardware_in_y_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hardware_in_y_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hardware_in_y_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hardware_in_y_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hardware_in_y_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hardware_in_y_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hardware_in_y_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hardware_out_y_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (hardware_out_y_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hardware_out_y_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hardware_out_y_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hardware_out_y_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hardware_out_y_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hardware_out_y_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hardware_out_y_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hardware_out_y_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hardware_out_y_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hardware_out_y_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hardware_out_y_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hardware_out_y_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hardware_out_y_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hardware_out_y_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hardware_out_y_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hardware_out_y_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_027_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                            //                .channel
		.rf_sink_ready           (hardware_out_y_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hardware_out_y_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hardware_out_y_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hardware_out_y_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hardware_out_y_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hardware_out_y_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hardware_out_y_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hardware_out_y_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hardware_out_y_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hardware_out_y_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (hardware_out_y_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hardware_out_y_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hardware_out_y_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hardware_out_y_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (hardware_out_y_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hardware_out_y_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hardware_out_y_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hardware_out_y_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hardware_out_y_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hardware_out_y_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hardware_out_y_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hardware_out_y_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hardware_out_y_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hardware_out_y_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hardware_out_z_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (hardware_out_z_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hardware_out_z_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hardware_out_z_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hardware_out_z_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hardware_out_z_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hardware_out_z_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hardware_out_z_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hardware_out_z_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hardware_out_z_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hardware_out_z_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hardware_out_z_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hardware_out_z_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hardware_out_z_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hardware_out_z_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hardware_out_z_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hardware_out_z_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_028_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                            //                .channel
		.rf_sink_ready           (hardware_out_z_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hardware_out_z_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hardware_out_z_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hardware_out_z_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hardware_out_z_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hardware_out_z_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hardware_out_z_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hardware_out_z_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hardware_out_z_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hardware_out_z_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_028_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_028_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_028_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_028_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (hardware_out_z_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hardware_out_z_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hardware_out_z_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hardware_out_z_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (hardware_out_z_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hardware_out_z_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hardware_out_z_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hardware_out_z_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hardware_out_z_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hardware_out_z_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hardware_out_z_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hardware_out_z_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hardware_out_z_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hardware_out_z_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_TRANS_LOCK            (65),
		.PKT_BEGIN_BURST           (80),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (67),
		.PKT_ADDR_H                (60),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (61),
		.PKT_TRANS_POSTED          (62),
		.PKT_TRANS_WRITE           (63),
		.PKT_TRANS_READ            (64),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (86),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (87),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hardware_in_z_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (hardware_in_z_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hardware_in_z_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hardware_in_z_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hardware_in_z_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hardware_in_z_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hardware_in_z_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hardware_in_z_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hardware_in_z_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hardware_in_z_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hardware_in_z_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hardware_in_z_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hardware_in_z_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hardware_in_z_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hardware_in_z_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hardware_in_z_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hardware_in_z_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_029_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_029_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_029_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_029_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_029_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_029_src_channel),                           //                .channel
		.rf_sink_ready           (hardware_in_z_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hardware_in_z_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hardware_in_z_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hardware_in_z_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hardware_in_z_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hardware_in_z_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hardware_in_z_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hardware_in_z_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hardware_in_z_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hardware_in_z_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_029_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_029_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_029_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_029_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (hardware_in_z_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hardware_in_z_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hardware_in_z_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hardware_in_z_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (hardware_in_z_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hardware_in_z_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hardware_in_z_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hardware_in_z_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hardware_in_z_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hardware_in_z_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hardware_in_z_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hardware_in_z_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hardware_in_z_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hardware_in_z_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	snake_mm_interconnect_0_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                       //       src.ready
		.src_valid          (router_src_valid),                       //          .valid
		.src_data           (router_src_data),                        //          .data
		.src_channel        (router_src_channel),                     //          .channel
		.src_startofpacket  (router_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //          .endofpacket
	);

	snake_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                 //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	snake_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_valid),         //          .valid
		.sink_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_data),          //          .data
		.sink_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                                                //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                         //       src.ready
		.src_valid          (router_002_src_valid),                                                         //          .valid
		.src_data           (router_002_src_data),                                                          //          .data
		.src_channel        (router_002_src_channel),                                                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                    //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                       //       src.ready
		.src_valid          (router_004_src_valid),                       //          .valid
		.src_data           (router_004_src_data),                        //          .data
		.src_channel        (router_004_src_channel),                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                  //          .endofpacket
	);

	snake_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_005_src_ready),                       //       src.ready
		.src_valid          (router_005_src_valid),                       //          .valid
		.src_data           (router_005_src_data),                        //          .data
		.src_channel        (router_005_src_channel),                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                  //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (altpll_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_clk_clk),                                              //       clk.clk
		.reset              (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                     //       src.ready
		.src_valid          (router_006_src_valid),                                     //          .valid
		.src_data           (router_006_src_data),                                      //          .data
		.src_channel        (router_006_src_channel),                                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                //          .endofpacket
	);

	snake_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (sdram_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),               //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                  //       src.ready
		.src_valid          (router_007_src_valid),                  //          .valid
		.src_data           (router_007_src_data),                   //          .data
		.src_channel        (router_007_src_channel),                //          .channel
		.src_startofpacket  (router_007_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_008 (
		.sink_ready         (led_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                 //          .valid
		.sink_data          (led_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                  //       src.ready
		.src_valid          (router_008_src_valid),                  //          .valid
		.src_data           (router_008_src_data),                   //          .data
		.src_channel        (router_008_src_channel),                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_009 (
		.sink_ready         (hex5_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (hex5_s1_agent_rp_valid),                //          .valid
		.sink_data          (hex5_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (hex5_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (hex5_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                  //       src.ready
		.src_valid          (router_009_src_valid),                  //          .valid
		.src_data           (router_009_src_data),                   //          .data
		.src_channel        (router_009_src_channel),                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_010 (
		.sink_ready         (hex4_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (hex4_s1_agent_rp_valid),                //          .valid
		.sink_data          (hex4_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (hex4_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (hex4_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                  //       src.ready
		.src_valid          (router_010_src_valid),                  //          .valid
		.src_data           (router_010_src_data),                   //          .data
		.src_channel        (router_010_src_channel),                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_011 (
		.sink_ready         (hex3_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (hex3_s1_agent_rp_valid),                //          .valid
		.sink_data          (hex3_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (hex3_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (hex3_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                  //       src.ready
		.src_valid          (router_011_src_valid),                  //          .valid
		.src_data           (router_011_src_data),                   //          .data
		.src_channel        (router_011_src_channel),                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_012 (
		.sink_ready         (hex2_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (hex2_s1_agent_rp_valid),                //          .valid
		.sink_data          (hex2_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (hex2_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (hex2_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                  //       src.ready
		.src_valid          (router_012_src_valid),                  //          .valid
		.src_data           (router_012_src_data),                   //          .data
		.src_channel        (router_012_src_channel),                //          .channel
		.src_startofpacket  (router_012_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_013 (
		.sink_ready         (hex1_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (hex1_s1_agent_rp_valid),                //          .valid
		.sink_data          (hex1_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (hex1_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (hex1_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                  //       src.ready
		.src_valid          (router_013_src_valid),                  //          .valid
		.src_data           (router_013_src_data),                   //          .data
		.src_channel        (router_013_src_channel),                //          .channel
		.src_startofpacket  (router_013_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_014 (
		.sink_ready         (hex0_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (hex0_s1_agent_rp_valid),                //          .valid
		.sink_data          (hex0_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (hex0_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (hex0_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                  //       src.ready
		.src_valid          (router_014_src_valid),                  //          .valid
		.src_data           (router_014_src_data),                   //          .data
		.src_channel        (router_014_src_channel),                //          .channel
		.src_startofpacket  (router_014_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_015 (
		.sink_ready         (switch_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (switch_s1_agent_rp_valid),              //          .valid
		.sink_data          (switch_s1_agent_rp_data),               //          .data
		.sink_startofpacket (switch_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (switch_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                  //       src.ready
		.src_valid          (router_015_src_valid),                  //          .valid
		.src_data           (router_015_src_data),                   //          .data
		.src_channel        (router_015_src_channel),                //          .channel
		.src_startofpacket  (router_015_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_016 (
		.sink_ready         (button_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (button_s1_agent_rp_valid),              //          .valid
		.sink_data          (button_s1_agent_rp_data),               //          .data
		.sink_startofpacket (button_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (button_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                  //       src.ready
		.src_valid          (router_016_src_valid),                  //          .valid
		.src_data           (router_016_src_data),                   //          .data
		.src_channel        (router_016_src_channel),                //          .channel
		.src_startofpacket  (router_016_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_017 (
		.sink_ready         (timer4_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (timer4_s1_agent_rp_valid),              //          .valid
		.sink_data          (timer4_s1_agent_rp_data),               //          .data
		.sink_startofpacket (timer4_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (timer4_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                  //       src.ready
		.src_valid          (router_017_src_valid),                  //          .valid
		.src_data           (router_017_src_data),                   //          .data
		.src_channel        (router_017_src_channel),                //          .channel
		.src_startofpacket  (router_017_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_018 (
		.sink_ready         (timer3_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (timer3_s1_agent_rp_valid),              //          .valid
		.sink_data          (timer3_s1_agent_rp_data),               //          .data
		.sink_startofpacket (timer3_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (timer3_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                  //       src.ready
		.src_valid          (router_018_src_valid),                  //          .valid
		.src_data           (router_018_src_data),                   //          .data
		.src_channel        (router_018_src_channel),                //          .channel
		.src_startofpacket  (router_018_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_019 (
		.sink_ready         (timer1_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (timer1_s1_agent_rp_valid),              //          .valid
		.sink_data          (timer1_s1_agent_rp_data),               //          .data
		.sink_startofpacket (timer1_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (timer1_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                  //       src.ready
		.src_valid          (router_019_src_valid),                  //          .valid
		.src_data           (router_019_src_data),                   //          .data
		.src_channel        (router_019_src_channel),                //          .channel
		.src_startofpacket  (router_019_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_020 (
		.sink_ready         (timer_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),               //          .valid
		.sink_data          (timer_s1_agent_rp_data),                //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                  //       src.ready
		.src_valid          (router_020_src_valid),                  //          .valid
		.src_data           (router_020_src_data),                   //          .data
		.src_channel        (router_020_src_channel),                //          .channel
		.src_startofpacket  (router_020_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_021 (
		.sink_ready         (timestamp_timer_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (timestamp_timer_s1_agent_rp_valid),         //          .valid
		.sink_data          (timestamp_timer_s1_agent_rp_data),          //          .data
		.sink_startofpacket (timestamp_timer_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (timestamp_timer_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                             //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_021_src_ready),                      //       src.ready
		.src_valid          (router_021_src_valid),                      //          .valid
		.src_data           (router_021_src_data),                       //          .data
		.src_channel        (router_021_src_channel),                    //          .channel
		.src_startofpacket  (router_021_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                 //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_022 (
		.sink_ready         (timer0_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (timer0_s1_agent_rp_valid),              //          .valid
		.sink_data          (timer0_s1_agent_rp_data),               //          .data
		.sink_startofpacket (timer0_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (timer0_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                  //       src.ready
		.src_valid          (router_022_src_valid),                  //          .valid
		.src_data           (router_022_src_data),                   //          .data
		.src_channel        (router_022_src_channel),                //          .channel
		.src_startofpacket  (router_022_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_023 (
		.sink_ready         (hex_timer_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (hex_timer_s1_agent_rp_valid),           //          .valid
		.sink_data          (hex_timer_s1_agent_rp_data),            //          .data
		.sink_startofpacket (hex_timer_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (hex_timer_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                  //       src.ready
		.src_valid          (router_023_src_valid),                  //          .valid
		.src_data           (router_023_src_data),                   //          .data
		.src_channel        (router_023_src_channel),                //          .channel
		.src_startofpacket  (router_023_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_024 (
		.sink_ready         (acc_timer_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (acc_timer_s1_agent_rp_valid),           //          .valid
		.sink_data          (acc_timer_s1_agent_rp_data),            //          .data
		.sink_startofpacket (acc_timer_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (acc_timer_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                  //       src.ready
		.src_valid          (router_024_src_valid),                  //          .valid
		.src_data           (router_024_src_data),                   //          .data
		.src_channel        (router_024_src_channel),                //          .channel
		.src_startofpacket  (router_024_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_025 (
		.sink_ready         (hardware_out_x_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (hardware_out_x_s1_agent_rp_valid),         //          .valid
		.sink_data          (hardware_out_x_s1_agent_rp_data),          //          .data
		.sink_startofpacket (hardware_out_x_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hardware_out_x_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                            //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_025_src_ready),                     //       src.ready
		.src_valid          (router_025_src_valid),                     //          .valid
		.src_data           (router_025_src_data),                      //          .data
		.src_channel        (router_025_src_channel),                   //          .channel
		.src_startofpacket  (router_025_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_026 (
		.sink_ready         (hardware_in_x_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (hardware_in_x_s1_agent_rp_valid),         //          .valid
		.sink_data          (hardware_in_x_s1_agent_rp_data),          //          .data
		.sink_startofpacket (hardware_in_x_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hardware_in_x_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_026_src_ready),                    //       src.ready
		.src_valid          (router_026_src_valid),                    //          .valid
		.src_data           (router_026_src_data),                     //          .data
		.src_channel        (router_026_src_channel),                  //          .channel
		.src_startofpacket  (router_026_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)               //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_027 (
		.sink_ready         (hardware_clocks_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (hardware_clocks_s1_agent_rp_valid),         //          .valid
		.sink_data          (hardware_clocks_s1_agent_rp_data),          //          .data
		.sink_startofpacket (hardware_clocks_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hardware_clocks_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                             //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_027_src_ready),                      //       src.ready
		.src_valid          (router_027_src_valid),                      //          .valid
		.src_data           (router_027_src_data),                       //          .data
		.src_channel        (router_027_src_channel),                    //          .channel
		.src_startofpacket  (router_027_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                 //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_028 (
		.sink_ready         (hardware_in_y_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (hardware_in_y_s1_agent_rp_valid),         //          .valid
		.sink_data          (hardware_in_y_s1_agent_rp_data),          //          .data
		.sink_startofpacket (hardware_in_y_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hardware_in_y_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_028_src_ready),                    //       src.ready
		.src_valid          (router_028_src_valid),                    //          .valid
		.src_data           (router_028_src_data),                     //          .data
		.src_channel        (router_028_src_channel),                  //          .channel
		.src_startofpacket  (router_028_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)               //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_029 (
		.sink_ready         (hardware_out_y_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (hardware_out_y_s1_agent_rp_valid),         //          .valid
		.sink_data          (hardware_out_y_s1_agent_rp_data),          //          .data
		.sink_startofpacket (hardware_out_y_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hardware_out_y_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                            //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_029_src_ready),                     //       src.ready
		.src_valid          (router_029_src_valid),                     //          .valid
		.src_data           (router_029_src_data),                      //          .data
		.src_channel        (router_029_src_channel),                   //          .channel
		.src_startofpacket  (router_029_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_030 (
		.sink_ready         (hardware_out_z_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (hardware_out_z_s1_agent_rp_valid),         //          .valid
		.sink_data          (hardware_out_z_s1_agent_rp_data),          //          .data
		.sink_startofpacket (hardware_out_z_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hardware_out_z_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                            //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_030_src_ready),                     //       src.ready
		.src_valid          (router_030_src_valid),                     //          .valid
		.src_data           (router_030_src_data),                      //          .data
		.src_channel        (router_030_src_channel),                   //          .channel
		.src_startofpacket  (router_030_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                //          .endofpacket
	);

	snake_mm_interconnect_0_router_003 router_031 (
		.sink_ready         (hardware_in_z_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (hardware_in_z_s1_agent_rp_valid),         //          .valid
		.sink_data          (hardware_in_z_s1_agent_rp_data),          //          .data
		.sink_startofpacket (hardware_in_z_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hardware_in_z_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_031_src_ready),                    //       src.ready
		.src_valid          (router_031_src_valid),                    //          .valid
		.src_data           (router_031_src_data),                     //          .data
		.src_channel        (router_031_src_channel),                  //          .channel
		.src_startofpacket  (router_031_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (33),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (53),
		.PKT_BYTE_CNT_H            (42),
		.PKT_BYTE_CNT_L            (40),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (48),
		.PKT_BURST_SIZE_L          (46),
		.PKT_BURST_TYPE_H          (50),
		.PKT_BURST_TYPE_L          (49),
		.PKT_BURSTWRAP_H           (45),
		.PKT_BURSTWRAP_L           (43),
		.PKT_TRANS_COMPRESSED_READ (34),
		.PKT_TRANS_WRITE           (36),
		.PKT_TRANS_READ            (37),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (78),
		.ST_CHANNEL_W              (30),
		.OUT_BYTE_CNT_H            (40),
		.OUT_BURSTWRAP_H           (45),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter (
		.clk                   (altpll_c0_clk),                                                                             //       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                                     // cr0_reset.reset
		.sink0_valid           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (30),
		.OUT_BYTE_CNT_H            (50),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (altpll_c0_clk),                                //       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	snake_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                      //      sink.ready
		.sink_channel        (router_src_channel),                    //          .channel
		.sink_data           (router_src_data),                       //          .data
		.sink_startofpacket  (router_src_startofpacket),              //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                //          .endofpacket
		.sink_valid          (router_src_valid),                      //          .valid
		.src0_ready          (cmd_demux_src0_ready),                  //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                  //          .valid
		.src0_data           (cmd_demux_src0_data),                   //          .data
		.src0_channel        (cmd_demux_src0_channel),                //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),            //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                  //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                  //          .valid
		.src1_data           (cmd_demux_src1_data),                   //          .data
		.src1_channel        (cmd_demux_src1_channel),                //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),            //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                  //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                  //          .valid
		.src2_data           (cmd_demux_src2_data),                   //          .data
		.src2_channel        (cmd_demux_src2_channel),                //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),            //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                  //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                  //          .valid
		.src3_data           (cmd_demux_src3_data),                   //          .data
		.src3_channel        (cmd_demux_src3_channel),                //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),          //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),            //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                  //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                  //          .valid
		.src4_data           (cmd_demux_src4_data),                   //          .data
		.src4_channel        (cmd_demux_src4_channel),                //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),          //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),            //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                  //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                  //          .valid
		.src5_data           (cmd_demux_src5_data),                   //          .data
		.src5_channel        (cmd_demux_src5_channel),                //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),          //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),            //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                  //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                  //          .valid
		.src6_data           (cmd_demux_src6_data),                   //          .data
		.src6_channel        (cmd_demux_src6_channel),                //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),          //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),            //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                  //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                  //          .valid
		.src7_data           (cmd_demux_src7_data),                   //          .data
		.src7_channel        (cmd_demux_src7_channel),                //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),          //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),            //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                  //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                  //          .valid
		.src8_data           (cmd_demux_src8_data),                   //          .data
		.src8_channel        (cmd_demux_src8_channel),                //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),          //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),            //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                  //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                  //          .valid
		.src9_data           (cmd_demux_src9_data),                   //          .data
		.src9_channel        (cmd_demux_src9_channel),                //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),          //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),            //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                 //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                 //          .valid
		.src10_data          (cmd_demux_src10_data),                  //          .data
		.src10_channel       (cmd_demux_src10_channel),               //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),         //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),           //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                 //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                 //          .valid
		.src11_data          (cmd_demux_src11_data),                  //          .data
		.src11_channel       (cmd_demux_src11_channel),               //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),         //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),           //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                 //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                 //          .valid
		.src12_data          (cmd_demux_src12_data),                  //          .data
		.src12_channel       (cmd_demux_src12_channel),               //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),         //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),           //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                 //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                 //          .valid
		.src13_data          (cmd_demux_src13_data),                  //          .data
		.src13_channel       (cmd_demux_src13_channel),               //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),         //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),           //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                 //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                 //          .valid
		.src14_data          (cmd_demux_src14_data),                  //          .data
		.src14_channel       (cmd_demux_src14_channel),               //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),         //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),           //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                 //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                 //          .valid
		.src15_data          (cmd_demux_src15_data),                  //          .data
		.src15_channel       (cmd_demux_src15_channel),               //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),         //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),           //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                 //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                 //          .valid
		.src16_data          (cmd_demux_src16_data),                  //          .data
		.src16_channel       (cmd_demux_src16_channel),               //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),         //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),           //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                 //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                 //          .valid
		.src17_data          (cmd_demux_src17_data),                  //          .data
		.src17_channel       (cmd_demux_src17_channel),               //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),         //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),           //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                 //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                 //          .valid
		.src18_data          (cmd_demux_src18_data),                  //          .data
		.src18_channel       (cmd_demux_src18_channel),               //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),         //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),           //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                 //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                 //          .valid
		.src19_data          (cmd_demux_src19_data),                  //          .data
		.src19_channel       (cmd_demux_src19_channel),               //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),         //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),           //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                 //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                 //          .valid
		.src20_data          (cmd_demux_src20_data),                  //          .data
		.src20_channel       (cmd_demux_src20_channel),               //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),         //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),           //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                 //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                 //          .valid
		.src21_data          (cmd_demux_src21_data),                  //          .data
		.src21_channel       (cmd_demux_src21_channel),               //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),         //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),           //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                 //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                 //          .valid
		.src22_data          (cmd_demux_src22_data),                  //          .data
		.src22_channel       (cmd_demux_src22_channel),               //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),         //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),           //          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                 //     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                 //          .valid
		.src23_data          (cmd_demux_src23_data),                  //          .data
		.src23_channel       (cmd_demux_src23_channel),               //          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),         //          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),           //          .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                 //     src24.ready
		.src24_valid         (cmd_demux_src24_valid),                 //          .valid
		.src24_data          (cmd_demux_src24_data),                  //          .data
		.src24_channel       (cmd_demux_src24_channel),               //          .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),         //          .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),           //          .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                 //     src25.ready
		.src25_valid         (cmd_demux_src25_valid),                 //          .valid
		.src25_data          (cmd_demux_src25_data),                  //          .data
		.src25_channel       (cmd_demux_src25_channel),               //          .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),         //          .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),           //          .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                 //     src26.ready
		.src26_valid         (cmd_demux_src26_valid),                 //          .valid
		.src26_data          (cmd_demux_src26_data),                  //          .data
		.src26_channel       (cmd_demux_src26_channel),               //          .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),         //          .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket),           //          .endofpacket
		.src27_ready         (cmd_demux_src27_ready),                 //     src27.ready
		.src27_valid         (cmd_demux_src27_valid),                 //          .valid
		.src27_data          (cmd_demux_src27_data),                  //          .data
		.src27_channel       (cmd_demux_src27_channel),               //          .channel
		.src27_startofpacket (cmd_demux_src27_startofpacket),         //          .startofpacket
		.src27_endofpacket   (cmd_demux_src27_endofpacket),           //          .endofpacket
		.src28_ready         (cmd_demux_src28_ready),                 //     src28.ready
		.src28_valid         (cmd_demux_src28_valid),                 //          .valid
		.src28_data          (cmd_demux_src28_data),                  //          .data
		.src28_channel       (cmd_demux_src28_channel),               //          .channel
		.src28_startofpacket (cmd_demux_src28_startofpacket),         //          .startofpacket
		.src28_endofpacket   (cmd_demux_src28_endofpacket),           //          .endofpacket
		.src29_ready         (cmd_demux_src29_ready),                 //     src29.ready
		.src29_valid         (cmd_demux_src29_valid),                 //          .valid
		.src29_data          (cmd_demux_src29_data),                  //          .data
		.src29_channel       (cmd_demux_src29_channel),               //          .channel
		.src29_startofpacket (cmd_demux_src29_startofpacket),         //          .startofpacket
		.src29_endofpacket   (cmd_demux_src29_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                  //      sink.ready
		.sink_channel       (router_001_src_channel),                //          .channel
		.sink_data          (router_001_src_data),                   //          .data
		.sink_startofpacket (router_001_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_001_src_valid),                  //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),              //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),              //          .valid
		.src0_data          (cmd_demux_001_src0_data),               //          .data
		.src0_channel       (cmd_demux_001_src0_channel),            //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),        //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),              //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),              //          .valid
		.src1_data          (cmd_demux_001_src1_data),               //          .data
		.src1_channel       (cmd_demux_001_src1_channel),            //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                     //          .valid
		.src_data            (cmd_mux_src_data),                      //          .data
		.src_channel         (cmd_mux_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //          .channel
		.sink0_data          (cmd_demux_src0_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //          .valid
		.src_data            (cmd_mux_001_src_data),                  //          .data
		.src_channel         (cmd_mux_001_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                //          .channel
		.sink0_data          (cmd_demux_src1_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //          .valid
		.src_data            (cmd_mux_002_src_data),                  //          .data
		.src_channel         (cmd_mux_002_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                 //          .valid
		.src_data            (cmd_mux_003_src_data),                  //          .data
		.src_channel         (cmd_mux_003_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_clk_clk),                                              //       clk.clk
		.reset               (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                    //          .valid
		.src_data            (cmd_mux_004_src_data),                                     //          .data
		.src_channel         (cmd_mux_004_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                        //          .valid
		.sink0_channel       (crosser_out_channel),                                      //          .channel
		.sink0_data          (crosser_out_data),                                         //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                   //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux_003 cmd_mux_005 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                 //          .valid
		.src_data            (cmd_mux_005_src_data),                  //          .data
		.src_channel         (cmd_mux_005_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                //          .channel
		.sink0_data          (cmd_demux_src5_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src1_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                 //          .valid
		.src_data            (cmd_mux_006_src_data),                  //          .data
		.src_channel         (cmd_mux_006_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                //          .channel
		.sink0_data          (cmd_demux_src6_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                 //          .valid
		.src_data            (cmd_mux_007_src_data),                  //          .data
		.src_channel         (cmd_mux_007_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                //          .channel
		.sink0_data          (cmd_demux_src7_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                 //          .valid
		.src_data            (cmd_mux_008_src_data),                  //          .data
		.src_channel         (cmd_mux_008_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                //          .channel
		.sink0_data          (cmd_demux_src8_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                 //          .valid
		.src_data            (cmd_mux_009_src_data),                  //          .data
		.src_channel         (cmd_mux_009_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                //          .channel
		.sink0_data          (cmd_demux_src9_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)             //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                 //          .valid
		.src_data            (cmd_mux_010_src_data),                  //          .data
		.src_channel         (cmd_mux_010_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src10_channel),               //          .channel
		.sink0_data          (cmd_demux_src10_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                 //          .valid
		.src_data            (cmd_mux_011_src_data),                  //          .data
		.src_channel         (cmd_mux_011_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src11_channel),               //          .channel
		.sink0_data          (cmd_demux_src11_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                 //          .valid
		.src_data            (cmd_mux_012_src_data),                  //          .data
		.src_channel         (cmd_mux_012_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src12_channel),               //          .channel
		.sink0_data          (cmd_demux_src12_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                 //          .valid
		.src_data            (cmd_mux_013_src_data),                  //          .data
		.src_channel         (cmd_mux_013_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src13_channel),               //          .channel
		.sink0_data          (cmd_demux_src13_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                 //          .valid
		.src_data            (cmd_mux_014_src_data),                  //          .data
		.src_channel         (cmd_mux_014_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src14_channel),               //          .channel
		.sink0_data          (cmd_demux_src14_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                 //          .valid
		.src_data            (cmd_mux_015_src_data),                  //          .data
		.src_channel         (cmd_mux_015_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src15_channel),               //          .channel
		.sink0_data          (cmd_demux_src15_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                 //          .valid
		.src_data            (cmd_mux_016_src_data),                  //          .data
		.src_channel         (cmd_mux_016_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src16_channel),               //          .channel
		.sink0_data          (cmd_demux_src16_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                 //          .valid
		.src_data            (cmd_mux_017_src_data),                  //          .data
		.src_channel         (cmd_mux_017_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src17_channel),               //          .channel
		.sink0_data          (cmd_demux_src17_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                 //          .valid
		.src_data            (cmd_mux_018_src_data),                  //          .data
		.src_channel         (cmd_mux_018_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src18_channel),               //          .channel
		.sink0_data          (cmd_demux_src18_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                 //          .valid
		.src_data            (cmd_mux_019_src_data),                  //          .data
		.src_channel         (cmd_mux_019_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src19_channel),               //          .channel
		.sink0_data          (cmd_demux_src19_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                 //          .valid
		.src_data            (cmd_mux_020_src_data),                  //          .data
		.src_channel         (cmd_mux_020_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src20_channel),               //          .channel
		.sink0_data          (cmd_demux_src20_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                 //          .valid
		.src_data            (cmd_mux_021_src_data),                  //          .data
		.src_channel         (cmd_mux_021_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src21_channel),               //          .channel
		.sink0_data          (cmd_demux_src21_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_022 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                 //          .valid
		.src_data            (cmd_mux_022_src_data),                  //          .data
		.src_channel         (cmd_mux_022_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src22_channel),               //          .channel
		.sink0_data          (cmd_demux_src22_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_023 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                 //          .valid
		.src_data            (cmd_mux_023_src_data),                  //          .data
		.src_channel         (cmd_mux_023_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src23_channel),               //          .channel
		.sink0_data          (cmd_demux_src23_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_024 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                 //          .valid
		.src_data            (cmd_mux_024_src_data),                  //          .data
		.src_channel         (cmd_mux_024_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src24_channel),               //          .channel
		.sink0_data          (cmd_demux_src24_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_025 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                 //          .valid
		.src_data            (cmd_mux_025_src_data),                  //          .data
		.src_channel         (cmd_mux_025_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src25_channel),               //          .channel
		.sink0_data          (cmd_demux_src25_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_026 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                 //          .valid
		.src_data            (cmd_mux_026_src_data),                  //          .data
		.src_channel         (cmd_mux_026_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src26_channel),               //          .channel
		.sink0_data          (cmd_demux_src26_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_027 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                 //          .valid
		.src_data            (cmd_mux_027_src_data),                  //          .data
		.src_channel         (cmd_mux_027_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src27_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src27_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src27_channel),               //          .channel
		.sink0_data          (cmd_demux_src27_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src27_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src27_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_028 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                 //          .valid
		.src_data            (cmd_mux_028_src_data),                  //          .data
		.src_channel         (cmd_mux_028_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src28_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src28_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src28_channel),               //          .channel
		.sink0_data          (cmd_demux_src28_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src28_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src28_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_mux cmd_mux_029 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                 //          .valid
		.src_data            (cmd_mux_029_src_data),                  //          .data
		.src_channel         (cmd_mux_029_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src29_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src29_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src29_channel),               //          .channel
		.sink0_data          (cmd_demux_src29_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src29_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src29_endofpacket)            //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_c0_clk),                                                                             //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.sink_ready         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                                 //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                  //      sink.ready
		.sink_channel       (router_003_src_channel),                //          .channel
		.sink_data          (router_003_src_data),                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_003_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),              //          .valid
		.src0_data          (rsp_demux_001_src0_data),               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                  //      sink.ready
		.sink_channel       (router_004_src_channel),                //          .channel
		.sink_data          (router_004_src_data),                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_004_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //          .valid
		.src0_data          (rsp_demux_002_src0_data),               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_demux_001 rsp_demux_003 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                  //      sink.ready
		.sink_channel       (router_005_src_channel),                //          .channel
		.sink_data          (router_005_src_data),                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_005_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),              //          .valid
		.src0_data          (rsp_demux_003_src0_data),               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),              //          .valid
		.src1_data          (rsp_demux_003_src1_data),               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (clk_clk_clk),                                              //       clk.clk
		.reset              (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                     //      sink.ready
		.sink_channel       (router_006_src_channel),                                   //          .channel
		.sink_data          (router_006_src_data),                                      //          .data
		.sink_startofpacket (router_006_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_006_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                            //          .endofpacket
	);

	snake_mm_interconnect_0_cmd_demux_001 rsp_demux_005 (
		.clk                (altpll_c0_clk),                                //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_005_src1_data),                      //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                  //      sink.ready
		.sink_channel       (router_008_src_channel),                //          .channel
		.sink_data          (router_008_src_data),                   //          .data
		.sink_startofpacket (router_008_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_008_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),              //          .valid
		.src0_data          (rsp_demux_006_src0_data),               //          .data
		.src0_channel       (rsp_demux_006_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                  //      sink.ready
		.sink_channel       (router_009_src_channel),                //          .channel
		.sink_data          (router_009_src_data),                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_009_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),              //          .valid
		.src0_data          (rsp_demux_007_src0_data),               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                  //      sink.ready
		.sink_channel       (router_010_src_channel),                //          .channel
		.sink_data          (router_010_src_data),                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_010_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),              //          .valid
		.src0_data          (rsp_demux_008_src0_data),               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                  //      sink.ready
		.sink_channel       (router_011_src_channel),                //          .channel
		.sink_data          (router_011_src_data),                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_011_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),              //          .valid
		.src0_data          (rsp_demux_009_src0_data),               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                  //      sink.ready
		.sink_channel       (router_012_src_channel),                //          .channel
		.sink_data          (router_012_src_data),                   //          .data
		.sink_startofpacket (router_012_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_012_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),              //          .valid
		.src0_data          (rsp_demux_010_src0_data),               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                  //      sink.ready
		.sink_channel       (router_013_src_channel),                //          .channel
		.sink_data          (router_013_src_data),                   //          .data
		.sink_startofpacket (router_013_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_013_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),              //          .valid
		.src0_data          (rsp_demux_011_src0_data),               //          .data
		.src0_channel       (rsp_demux_011_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                  //      sink.ready
		.sink_channel       (router_014_src_channel),                //          .channel
		.sink_data          (router_014_src_data),                   //          .data
		.sink_startofpacket (router_014_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_014_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),              //          .valid
		.src0_data          (rsp_demux_012_src0_data),               //          .data
		.src0_channel       (rsp_demux_012_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                  //      sink.ready
		.sink_channel       (router_015_src_channel),                //          .channel
		.sink_data          (router_015_src_data),                   //          .data
		.sink_startofpacket (router_015_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_015_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),              //          .valid
		.src0_data          (rsp_demux_013_src0_data),               //          .data
		.src0_channel       (rsp_demux_013_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                  //      sink.ready
		.sink_channel       (router_016_src_channel),                //          .channel
		.sink_data          (router_016_src_data),                   //          .data
		.sink_startofpacket (router_016_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_016_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),              //          .valid
		.src0_data          (rsp_demux_014_src0_data),               //          .data
		.src0_channel       (rsp_demux_014_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                  //      sink.ready
		.sink_channel       (router_017_src_channel),                //          .channel
		.sink_data          (router_017_src_data),                   //          .data
		.sink_startofpacket (router_017_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_017_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),              //          .valid
		.src0_data          (rsp_demux_015_src0_data),               //          .data
		.src0_channel       (rsp_demux_015_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                  //      sink.ready
		.sink_channel       (router_018_src_channel),                //          .channel
		.sink_data          (router_018_src_data),                   //          .data
		.sink_startofpacket (router_018_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_018_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),              //          .valid
		.src0_data          (rsp_demux_016_src0_data),               //          .data
		.src0_channel       (rsp_demux_016_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                  //      sink.ready
		.sink_channel       (router_019_src_channel),                //          .channel
		.sink_data          (router_019_src_data),                   //          .data
		.sink_startofpacket (router_019_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_019_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),              //          .valid
		.src0_data          (rsp_demux_017_src0_data),               //          .data
		.src0_channel       (rsp_demux_017_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                  //      sink.ready
		.sink_channel       (router_020_src_channel),                //          .channel
		.sink_data          (router_020_src_data),                   //          .data
		.sink_startofpacket (router_020_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_020_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),              //          .valid
		.src0_data          (rsp_demux_018_src0_data),               //          .data
		.src0_channel       (rsp_demux_018_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                  //      sink.ready
		.sink_channel       (router_021_src_channel),                //          .channel
		.sink_data          (router_021_src_data),                   //          .data
		.sink_startofpacket (router_021_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_021_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),              //          .valid
		.src0_data          (rsp_demux_019_src0_data),               //          .data
		.src0_channel       (rsp_demux_019_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                  //      sink.ready
		.sink_channel       (router_022_src_channel),                //          .channel
		.sink_data          (router_022_src_data),                   //          .data
		.sink_startofpacket (router_022_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_022_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),              //          .valid
		.src0_data          (rsp_demux_020_src0_data),               //          .data
		.src0_channel       (rsp_demux_020_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                  //      sink.ready
		.sink_channel       (router_023_src_channel),                //          .channel
		.sink_data          (router_023_src_data),                   //          .data
		.sink_startofpacket (router_023_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_023_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),              //          .valid
		.src0_data          (rsp_demux_021_src0_data),               //          .data
		.src0_channel       (rsp_demux_021_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_022 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                  //      sink.ready
		.sink_channel       (router_024_src_channel),                //          .channel
		.sink_data          (router_024_src_data),                   //          .data
		.sink_startofpacket (router_024_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_024_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),              //          .valid
		.src0_data          (rsp_demux_022_src0_data),               //          .data
		.src0_channel       (rsp_demux_022_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_023 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                  //      sink.ready
		.sink_channel       (router_025_src_channel),                //          .channel
		.sink_data          (router_025_src_data),                   //          .data
		.sink_startofpacket (router_025_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_025_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),              //          .valid
		.src0_data          (rsp_demux_023_src0_data),               //          .data
		.src0_channel       (rsp_demux_023_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_024 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                  //      sink.ready
		.sink_channel       (router_026_src_channel),                //          .channel
		.sink_data          (router_026_src_data),                   //          .data
		.sink_startofpacket (router_026_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_026_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),              //          .valid
		.src0_data          (rsp_demux_024_src0_data),               //          .data
		.src0_channel       (rsp_demux_024_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_025 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                  //      sink.ready
		.sink_channel       (router_027_src_channel),                //          .channel
		.sink_data          (router_027_src_data),                   //          .data
		.sink_startofpacket (router_027_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_027_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),              //          .valid
		.src0_data          (rsp_demux_025_src0_data),               //          .data
		.src0_channel       (rsp_demux_025_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_026 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                  //      sink.ready
		.sink_channel       (router_028_src_channel),                //          .channel
		.sink_data          (router_028_src_data),                   //          .data
		.sink_startofpacket (router_028_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_028_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),              //          .valid
		.src0_data          (rsp_demux_026_src0_data),               //          .data
		.src0_channel       (rsp_demux_026_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_027 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                  //      sink.ready
		.sink_channel       (router_029_src_channel),                //          .channel
		.sink_data          (router_029_src_data),                   //          .data
		.sink_startofpacket (router_029_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_029_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),              //          .valid
		.src0_data          (rsp_demux_027_src0_data),               //          .data
		.src0_channel       (rsp_demux_027_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_028 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                  //      sink.ready
		.sink_channel       (router_030_src_channel),                //          .channel
		.sink_data          (router_030_src_data),                   //          .data
		.sink_startofpacket (router_030_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_030_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),              //          .valid
		.src0_data          (rsp_demux_028_src0_data),               //          .data
		.src0_channel       (rsp_demux_028_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_demux rsp_demux_029 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                  //      sink.ready
		.sink_channel       (router_031_src_channel),                //          .channel
		.sink_data          (router_031_src_data),                   //          .data
		.sink_startofpacket (router_031_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_031_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),              //          .valid
		.src0_data          (rsp_demux_029_src0_data),               //          .data
		.src0_channel       (rsp_demux_029_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (altpll_c0_clk),                         //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                     //       src.ready
		.src_valid            (rsp_mux_src_valid),                     //          .valid
		.src_data             (rsp_mux_src_data),                      //          .data
		.src_channel          (rsp_mux_src_channel),                   //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                  //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                  //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                //          .channel
		.sink0_data           (rsp_demux_src0_data),                   //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),            //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),              //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),            //          .channel
		.sink1_data           (rsp_demux_001_src0_data),               //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),        //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),              //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),            //          .channel
		.sink2_data           (rsp_demux_002_src0_data),               //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),        //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),              //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),            //          .channel
		.sink3_data           (rsp_demux_003_src0_data),               //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.sink4_ready          (crosser_001_out_ready),                 //     sink4.ready
		.sink4_valid          (crosser_001_out_valid),                 //          .valid
		.sink4_channel        (crosser_001_out_channel),               //          .channel
		.sink4_data           (crosser_001_out_data),                  //          .data
		.sink4_startofpacket  (crosser_001_out_startofpacket),         //          .startofpacket
		.sink4_endofpacket    (crosser_001_out_endofpacket),           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),              //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),            //          .channel
		.sink5_data           (rsp_demux_005_src0_data),               //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),              //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),            //          .channel
		.sink6_data           (rsp_demux_006_src0_data),               //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),              //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),            //          .channel
		.sink7_data           (rsp_demux_007_src0_data),               //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),              //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),            //          .channel
		.sink8_data           (rsp_demux_008_src0_data),               //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),              //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),            //          .channel
		.sink9_data           (rsp_demux_009_src0_data),               //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),              //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),            //          .channel
		.sink10_data          (rsp_demux_010_src0_data),               //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),        //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),              //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),              //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),            //          .channel
		.sink11_data          (rsp_demux_011_src0_data),               //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),      //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),        //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),              //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),              //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),            //          .channel
		.sink12_data          (rsp_demux_012_src0_data),               //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),      //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),        //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),              //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),              //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),            //          .channel
		.sink13_data          (rsp_demux_013_src0_data),               //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),      //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),        //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),              //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),              //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),            //          .channel
		.sink14_data          (rsp_demux_014_src0_data),               //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),        //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),              //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),              //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),            //          .channel
		.sink15_data          (rsp_demux_015_src0_data),               //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),        //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),              //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),              //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),            //          .channel
		.sink16_data          (rsp_demux_016_src0_data),               //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),        //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),              //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),              //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),            //          .channel
		.sink17_data          (rsp_demux_017_src0_data),               //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),      //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),        //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),              //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),              //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),            //          .channel
		.sink18_data          (rsp_demux_018_src0_data),               //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),      //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),        //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),              //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),              //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),            //          .channel
		.sink19_data          (rsp_demux_019_src0_data),               //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),      //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),        //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),              //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),              //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),            //          .channel
		.sink20_data          (rsp_demux_020_src0_data),               //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),      //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),        //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),              //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),              //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),            //          .channel
		.sink21_data          (rsp_demux_021_src0_data),               //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),      //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),        //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),              //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),              //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),            //          .channel
		.sink22_data          (rsp_demux_022_src0_data),               //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),      //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),        //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),              //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),              //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),            //          .channel
		.sink23_data          (rsp_demux_023_src0_data),               //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),      //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),        //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),              //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),              //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),            //          .channel
		.sink24_data          (rsp_demux_024_src0_data),               //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),      //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),        //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),              //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),              //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),            //          .channel
		.sink25_data          (rsp_demux_025_src0_data),               //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),      //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),        //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),              //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),              //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),            //          .channel
		.sink26_data          (rsp_demux_026_src0_data),               //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),      //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket),        //          .endofpacket
		.sink27_ready         (rsp_demux_027_src0_ready),              //    sink27.ready
		.sink27_valid         (rsp_demux_027_src0_valid),              //          .valid
		.sink27_channel       (rsp_demux_027_src0_channel),            //          .channel
		.sink27_data          (rsp_demux_027_src0_data),               //          .data
		.sink27_startofpacket (rsp_demux_027_src0_startofpacket),      //          .startofpacket
		.sink27_endofpacket   (rsp_demux_027_src0_endofpacket),        //          .endofpacket
		.sink28_ready         (rsp_demux_028_src0_ready),              //    sink28.ready
		.sink28_valid         (rsp_demux_028_src0_valid),              //          .valid
		.sink28_channel       (rsp_demux_028_src0_channel),            //          .channel
		.sink28_data          (rsp_demux_028_src0_data),               //          .data
		.sink28_startofpacket (rsp_demux_028_src0_startofpacket),      //          .startofpacket
		.sink28_endofpacket   (rsp_demux_028_src0_endofpacket),        //          .endofpacket
		.sink29_ready         (rsp_demux_029_src0_ready),              //    sink29.ready
		.sink29_valid         (rsp_demux_029_src0_valid),              //          .valid
		.sink29_channel       (rsp_demux_029_src0_channel),            //          .channel
		.sink29_data          (rsp_demux_029_src0_data),               //          .data
		.sink29_startofpacket (rsp_demux_029_src0_startofpacket),      //          .startofpacket
		.sink29_endofpacket   (rsp_demux_029_src0_endofpacket)         //          .endofpacket
	);

	snake_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //          .valid
		.src_data            (rsp_mux_001_src_data),                  //          .data
		.src_channel         (rsp_mux_001_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),              //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),            //          .channel
		.sink0_data          (rsp_demux_003_src1_data),               //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),        //          .endofpacket
		.sink1_ready         (rsp_demux_005_src1_ready),              //     sink1.ready
		.sink1_valid         (rsp_demux_005_src1_valid),              //          .valid
		.sink1_channel       (rsp_demux_005_src1_channel),            //          .channel
		.sink1_data          (rsp_demux_005_src1_data),               //          .data
		.sink1_startofpacket (rsp_demux_005_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src1_endofpacket)         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (33),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (42),
		.IN_PKT_BYTE_CNT_L             (40),
		.IN_PKT_TRANS_COMPRESSED_READ  (34),
		.IN_PKT_TRANS_WRITE            (36),
		.IN_PKT_BURSTWRAP_H            (45),
		.IN_PKT_BURSTWRAP_L            (43),
		.IN_PKT_BURST_SIZE_H           (48),
		.IN_PKT_BURST_SIZE_L           (46),
		.IN_PKT_RESPONSE_STATUS_H      (74),
		.IN_PKT_RESPONSE_STATUS_L      (73),
		.IN_PKT_TRANS_EXCLUSIVE        (39),
		.IN_PKT_BURST_TYPE_H           (50),
		.IN_PKT_BURST_TYPE_L           (49),
		.IN_PKT_ORI_BURST_SIZE_L       (75),
		.IN_PKT_ORI_BURST_SIZE_H       (77),
		.IN_ST_DATA_W                  (78),
		.OUT_PKT_ADDR_H                (60),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (69),
		.OUT_PKT_BYTE_CNT_L            (67),
		.OUT_PKT_TRANS_COMPRESSED_READ (61),
		.OUT_PKT_BURST_SIZE_H          (75),
		.OUT_PKT_BURST_SIZE_L          (73),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (66),
		.OUT_PKT_BURST_TYPE_H          (77),
		.OUT_PKT_BURST_TYPE_L          (76),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (30),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter (
		.clk                  (altpll_c0_clk),                                                                             //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                                      //      sink.valid
		.in_channel           (router_002_src_channel),                                                                    //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                              //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                                //          .endofpacket
		.in_ready             (router_002_src_ready),                                                                      //          .ready
		.in_data              (router_002_src_data),                                                                       //          .data
		.out_endofpacket      (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (42),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (49),
		.IN_PKT_TRANS_COMPRESSED_READ  (43),
		.IN_PKT_TRANS_WRITE            (45),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (48),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (60),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (69),
		.OUT_PKT_BYTE_CNT_L            (67),
		.OUT_PKT_TRANS_COMPRESSED_READ (61),
		.OUT_PKT_BURST_SIZE_H          (75),
		.OUT_PKT_BURST_SIZE_L          (73),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (66),
		.OUT_PKT_BURST_TYPE_H          (77),
		.OUT_PKT_BURST_TYPE_L          (76),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (30),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (altpll_c0_clk),                                //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_007_src_valid),                         //      sink.valid
		.in_channel           (router_007_src_channel),                       //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_007_src_ready),                         //          .ready
		.in_data              (router_007_src_data),                          //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (60),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (69),
		.IN_PKT_BYTE_CNT_L             (67),
		.IN_PKT_TRANS_COMPRESSED_READ  (61),
		.IN_PKT_TRANS_WRITE            (63),
		.IN_PKT_BURSTWRAP_H            (72),
		.IN_PKT_BURSTWRAP_L            (70),
		.IN_PKT_BURST_SIZE_H           (75),
		.IN_PKT_BURST_SIZE_L           (73),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (66),
		.IN_PKT_BURST_TYPE_H           (77),
		.IN_PKT_BURST_TYPE_L           (76),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (33),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (42),
		.OUT_PKT_BYTE_CNT_L            (40),
		.OUT_PKT_TRANS_COMPRESSED_READ (34),
		.OUT_PKT_BURST_SIZE_H          (48),
		.OUT_PKT_BURST_SIZE_L          (46),
		.OUT_PKT_RESPONSE_STATUS_H     (74),
		.OUT_PKT_RESPONSE_STATUS_L     (73),
		.OUT_PKT_TRANS_EXCLUSIVE       (39),
		.OUT_PKT_BURST_TYPE_H          (50),
		.OUT_PKT_BURST_TYPE_L          (49),
		.OUT_PKT_ORI_BURST_SIZE_L      (75),
		.OUT_PKT_ORI_BURST_SIZE_H      (77),
		.OUT_ST_DATA_W                 (78),
		.ST_CHANNEL_W                  (30),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter (
		.clk                  (altpll_c0_clk),                                                                             //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                                         //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                                       //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                                   //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                                         //          .ready
		.in_data              (cmd_mux_src_data),                                                                          //          .data
		.out_endofpacket      (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (accelerometer_spi_avalon_accelerometer_spi_mode_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (60),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (69),
		.IN_PKT_BYTE_CNT_L             (67),
		.IN_PKT_TRANS_COMPRESSED_READ  (61),
		.IN_PKT_TRANS_WRITE            (63),
		.IN_PKT_BURSTWRAP_H            (72),
		.IN_PKT_BURSTWRAP_L            (70),
		.IN_PKT_BURST_SIZE_H           (75),
		.IN_PKT_BURST_SIZE_L           (73),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (66),
		.IN_PKT_BURST_TYPE_H           (77),
		.IN_PKT_BURST_TYPE_L           (76),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (42),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (49),
		.OUT_PKT_TRANS_COMPRESSED_READ (43),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (48),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (30),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (altpll_c0_clk),                                //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                        //          .ready
		.in_data              (cmd_mux_005_src_data),                         //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_c0_clk),                                            //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (clk_clk_clk),                                              //       out_clk.clk
		.out_reset         (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                     //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                     //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                             //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                               //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                   //              .channel
		.in_data           (cmd_demux_src4_data),                                      //              .data
		.out_ready         (crosser_out_ready),                                        //           out.ready
		.out_valid         (crosser_out_valid),                                        //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_out_channel),                                      //              .channel
		.out_data          (crosser_out_data),                                         //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_clk_clk),                                              //        in_clk.clk
		.in_reset          (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                            //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                 //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                 //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                         //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                           //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                               //              .channel
		.in_data           (rsp_demux_004_src0_data),                                  //              .data
		.out_ready         (crosser_001_out_ready),                                    //           out.ready
		.out_valid         (crosser_001_out_valid),                                    //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                  //              .channel
		.out_data          (crosser_001_out_data),                                     //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	snake_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_c0_clk),                                                                    // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),                                            // in_rst_0.reset
		.in_0_data      (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (accelerometer_spi_avalon_accelerometer_spi_mode_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                                    //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                                    //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                                     //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_c0_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                       //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                         //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex5_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (hex5_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (hex5_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex4_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (hex4_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (hex4_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex3_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (hex3_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (hex3_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex2_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (hex2_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (hex2_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex1_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (hex1_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (hex1_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex0_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (hex0_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (hex0_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switch_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (switch_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (switch_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (button_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (button_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer4_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (timer4_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (timer4_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer3_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (timer3_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (timer3_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer1_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (timer1_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (timer1_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (altpll_c0_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (timestamp_timer_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (timestamp_timer_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (timestamp_timer_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)              //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (altpll_c0_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer0_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (timer0_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (timer0_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),      //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),     //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),     //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)      //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (altpll_c0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (hex_timer_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hex_timer_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hex_timer_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)        //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (altpll_c0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (acc_timer_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (acc_timer_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (acc_timer_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)        //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (altpll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (hardware_out_x_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hardware_out_x_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hardware_out_x_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)             //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (altpll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (hardware_in_x_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hardware_in_x_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hardware_in_x_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)            //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (altpll_c0_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (hardware_clocks_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hardware_clocks_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hardware_clocks_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)              //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (altpll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (hardware_in_y_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hardware_in_y_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hardware_in_y_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)            //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (altpll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (hardware_out_y_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hardware_out_y_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hardware_out_y_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)             //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_028 (
		.in_clk_0_clk   (altpll_c0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (hardware_out_z_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hardware_out_z_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hardware_out_z_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_028_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_028_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_028_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_028_out_0_error)             //         .error
	);

	snake_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_029 (
		.in_clk_0_clk   (altpll_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (hardware_in_z_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (hardware_in_z_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (hardware_in_z_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_029_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_029_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_029_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_029_out_0_error)            //         .error
	);

endmodule
