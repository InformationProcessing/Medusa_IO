
snake.elf:     file format elf32-littlenios2
snake.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000059cc memsz 0x000059cc flags r-x
    LOAD off    0x000069ec vaddr 0x008059ec paddr 0x00805d10 align 2**12
         filesz 0x00000324 memsz 0x00000324 flags rw-
    LOAD off    0x00007034 vaddr 0x00806034 paddr 0x00806034 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005378  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004f4  008054f8  008054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000324  008059ec  00805d10  000069ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  00806034  00806034  00007034  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008061a0  008061a0  00006d10  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006d10  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000810  00000000  00000000  00006d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d0a6  00000000  00000000  00007548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004269  00000000  00000000  000145ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004f5b  00000000  00000000  00018857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d7c  00000000  00000000  0001d7b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002922  00000000  00000000  0001e530  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009172  00000000  00000000  00020e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00029fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ca0  00000000  00000000  00029fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002ceba  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002cebd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002cec0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002cec1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002cec2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002cec6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002ceca  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002cece  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002ced7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002cee0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  0002cee9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0002ceee  2**0
                  CONTENTS, READONLY
 29 .jdi          0000433a  00000000  00000000  0002cf1d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000d4d6a  00000000  00000000  00031257  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
008054f8 l    d  .rodata	00000000 .rodata
008059ec l    d  .rwdata	00000000 .rwdata
00806034 l    d  .bss	00000000 .bss
008061a0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../snake_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0080603c l     O .bss	00000004 count.3438
00806034 l     O .bss	00000008 lasttime.3439
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803f24 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
008044d8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
0080585f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00805b74 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00805cf0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00805c54 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00805360 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00806090 g     O .bss	00000004 alt_instruction_exception_handler
00804dfc g     F .text	0000002c alt_main
00803ad4 g     F .text	0000002c strcpy
008060a0 g     O .bss	00000100 alt_irq
00800760 g     F .text	00000070 disp_timer_init
00806050 g     O .bss	00000004 norm_const
00805d10 g       *ABS*	00000000 __flash_rwdata_start
008061a0 g       *ABS*	00000000 __alt_heap_start
00803ccc g     F .text	00000008 strtok_r
00806048 g     O .bss	00000004 disp_length
008038e8 g     F .text	0000004c printf
00806088 g     O .bss	00000004 altera_avalon_timer_ts_freq
00800a78 g     F .text	00000038 hw_push_coefficients
008035f0 g     F .text	00000060 memmove
00803c3c g     F .text	00000090 __strtok_r
00805cf4 g     O .rwdata	00000004 jtag_uart
0080544c g     F .text	00000008 altera_nios2_gen2_irq_init
00804b44 g     F .text	000000a8 __sfvwrite_small_str
00800000 g     F .entry	0000000c __reset
00805254 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00806044 g     O .bss	00000004 led_val
00800020 g       *ABS*	00000000 __flash_exceptions_start
00806074 g     O .bss	00000004 errno
00806080 g     O .bss	00000004 alt_argv
0080dcd8 g       *ABS*	00000000 _gp
00800ab0 g     F .text	00000110 coeffs_to_fixed
00805c80 g     O .rwdata	00000030 alt_fd_list
008053d4 g     F .text	00000074 alt_find_dev
00806054 g     O .bss	00000004 cmdbuffer
0080604c g     O .bss	00000004 disp_offset
00805454 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00800840 g     F .text	000000d4 to_hex
008050d4 g     F .text	0000005c altera_avalon_jtag_uart_read
008035c8 g     F .text	00000014 malloc
008038ac g     F .text	0000003c _printf_r
00801918 g     F .text	00000064 .hidden __udivsi3
008010b8 g     F .text	00000010 hw_y_read
00800494 g     F .text	00000140 write_to_disp
00803934 g     F .text	00000050 _sbrk_r
00805cf8 g     O .rwdata	00000004 alt_max_fd
008010a8 g     F .text	00000010 hw_x_read
00804c88 g     F .text	00000094 alt_irq_register
00806040 g     O .bss	00000004 debug
008019fc g     F .text	000008ac .hidden __adddf3
0080065c g     F .text	00000094 read_request
00800914 g     F .text	00000014 throw_code
00805ce4 g     O .rwdata	00000004 _global_impure_ptr
008061a0 g       *ABS*	00000000 __bss_end
00804c44 g     F .text	00000044 alt_getchar
00801224 g     F .text	000005fc .hidden __udivdi3
008001bc g     F .text	00000060 led_timer_isr
008006f0 g     F .text	00000070 acc_timer_init
00803f08 g     F .text	0000001c strtol
00806078 g     O .bss	00000004 alt_irq_active
00806058 g     O .bss	00000004 disp_buf
008000fc g     F .exceptions	00000060 alt_irq_handler
00805cb0 g     O .rwdata	00000028 alt_dev_null
0080535c g     F .text	00000004 alt_dcache_flush_all
008034e4 g     F .text	00000080 .hidden __fixdfsi
00800988 g     F .text	000000f0 acc_timer_isr
00800240 g     F .text	000001dc letter_to_hex
00805d10 g       *ABS*	00000000 __ram_rwdata_end
00805cfc g     O .rwdata	00000008 alt_dev_list
0080502c g     F .text	00000060 write
008051f4 g     F .text	00000008 alt_timestamp_freq
008059ec g       *ABS*	00000000 __ram_rodata_end
00803a60 g     F .text	0000003c strcat
0080197c g     F .text	00000058 .hidden __umodsi3
008061a0 g       *ABS*	00000000 end
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00803564 g     F .text	00000064 .hidden __clzsi2
00805130 g     F .text	00000034 altera_avalon_jtag_uart_write
00804544 g     F .text	0000052c ___vfprintf_internal_r
00803984 g     F .text	00000064 _sprintf_r
00803670 g     F .text	000000e4 _free_r
00804e28 g     F .text	00000170 alt_printf
00805cd8 g     O .rwdata	00000004 quality
00800180 g     F .text	0000003c _start
0080060c g     F .text	00000050 clr_disp
008050ac g     F .text	00000028 alt_sys_init
00805204 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00806094 g     O .bss	0000000c hexbuffers
008019d4 g     F .text	00000028 .hidden __mulsi3
008059ec g       *ABS*	00000000 __ram_rwdata_start
008054f8 g       *ABS*	00000000 __ram_rodata_start
00803b1c g     F .text	00000054 strncpy
008052ac g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00803b70 g     F .text	000000cc strtok
008054c8 g     F .text	00000030 memcmp
008061a0 g       *ABS*	00000000 __alt_stack_base
008022a8 g     F .text	000009d0 .hidden __divdf3
00802c78 g     F .text	0000086c .hidden __muldf3
00805368 g     F .text	0000006c alt_dev_llist_insert
00804fe0 g     F .text	0000004c sbrk
00803f90 g     F .text	0000052c ___svfprintf_internal_r
00804a8c g     F .text	000000b8 __sfvwrite_small_dev
00806034 g       *ABS*	00000000 __bss_start
00803650 g     F .text	00000020 memset
008010c8 g     F .text	0000015c main
0080607c g     O .bss	00000004 alt_envp
01000000 g       *ABS*	00000000 __alt_heap_limit
00803cd4 g     F .text	00000234 _strtol_r
00805164 g     F .text	00000044 alt_timestamp_start
00803754 g     F .text	00000158 _malloc_r
00805d0c g     O .rwdata	00000004 alt_errno
0080021c g     F .text	00000024 second_letter_to_hex
00805cdc g     O .rwdata	00000004 led_offset
00801820 g     F .text	00000084 .hidden __divsi3
00803a9c g     F .text	00000038 strcmp
008054f8 g       *ABS*	00000000 __flash_rodata_start
0080508c g     F .text	00000020 alt_irq_init
00800bc0 g     F .text	000004e8 parse_request
008039e8 g     F .text	00000078 sprintf
0080565e g     O .rodata	00000100 .hidden __clz_tab
00804bec g     F .text	00000058 _write_r
00805ce8 g     O .rwdata	00000004 _impure_ptr
00806084 g     O .bss	00000004 alt_argc
0080608c g     O .bss	00000004 altera_avalon_timer_ts_base
008059ec g     O .rwdata	00000188 h
00800020 g       .exceptions	00000000 alt_irq_entry
00805d04 g     O .rwdata	00000008 alt_fs_list
008044bc g     F .text	0000001c __vfprintf_internal_unused
00800020 g       *ABS*	00000000 __ram_exceptions_start
008051fc g     F .text	00000008 alt_up_accelerometer_spi_open_dev
008051a8 g     F .text	0000004c alt_timestamp
00800928 g     F .text	00000028 hw_reset
00805d10 g       *ABS*	00000000 _edata
008061a0 g       *ABS*	00000000 _end
008005d4 g     F .text	00000038 disp_timer_isr
00800180 g       *ABS*	00000000 __ram_exceptions_end
0080605c g     O .bss	00000008 latency
008018a4 g     F .text	00000074 .hidden __modsi3
00805ce0 g     O .rwdata	00000004 __ctype_ptr__
00805304 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080575e g     O .rodata	00000101 _ctype_
0080000c g       .entry	00000000 _exit
00805218 g     F .text	00000020 alt_up_accelerometer_spi_read
00805238 g     F .text	0000001c alt_up_accelerometer_spi_write
00803b00 g     F .text	0000001c strlen
00804f98 g     F .text	00000048 alt_putchar
0080606c g     O .bss	00000004 __malloc_sbrk_start
00805448 g     F .text	00000004 alt_icache_flush_all
0080041c g     F .text	00000078 write_char
00805cec g     O .rwdata	00000004 alt_priority_mask
00806070 g     O .bss	00000004 __malloc_free_list
00804a70 g     F .text	0000001c __vfprintf_internal
00806064 g     O .bss	00000004 acc_dev
008007d0 g     F .text	00000070 led_timer_init
00800950 g     F .text	00000038 hw_push_value
00804d1c g     F .text	000000e0 alt_load
008035dc g     F .text	00000014 free
00806068 g     O .bss	00000004 led_buf



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80010c:	04002034 	movhi	r16,128
  800110:	84182804 	addi	r16,r16,24736

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	000b883a 	mov	r5,zero
    mask = 1;
  800118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	1888703a 	and	r4,r3,r2
  800120:	20000b26 	beq	r4,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800124:	280490fa 	slli	r2,r5,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	183ff51e 	bne	r3,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	1085883a 	add	r2,r2,r2
      i++;
  800154:	29400044 	addi	r5,r5,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a0ee17 	ldw	r2,-31816(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6b73614 	ori	gp,gp,56536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	10980d14 	ori	r2,r2,24628

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d86814 	ori	r3,r3,24992

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	0804d1c0 	call	804d1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	0804dfc0 	call	804dfc <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <led_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void led_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  8001bc:	00804034 	movhi	r2,256
  8001c0:	10844804 	addi	r2,r2,4384
  8001c4:	10000035 	stwio	zero,0(r2)

	if (led_offset != -1){
  8001c8:	d0a00117 	ldw	r2,-32764(gp)
  8001cc:	017fffc4 	movi	r5,-1
  8001d0:	11401126 	beq	r2,r5,800218 <led_timer_isr+0x5c>


		if (led_buf[led_offset] == '\0'){
  8001d4:	d0e0e417 	ldw	r3,-31856(gp)
  8001d8:	1887883a 	add	r3,r3,r2
  8001dc:	19000007 	ldb	r4,0(r3)
  8001e0:	00c04034 	movhi	r3,256
  8001e4:	18c49404 	addi	r3,r3,4688
  8001e8:	2000031e 	bne	r4,zero,8001f8 <led_timer_isr+0x3c>
			led_offset = -1;
  8001ec:	d1600115 	stw	r5,-32764(gp)
			IOWR(LED_BASE, 0, led_val);
  8001f0:	d0a0db17 	ldw	r2,-31892(gp)
  8001f4:	00000506 	br	80020c <led_timer_isr+0x50>
  8001f8:	10800044 	addi	r2,r2,1

		}
		else if (led_buf[led_offset] == '1'){
  8001fc:	01400c44 	movi	r5,49
			led_offset++;
  800200:	d0a00115 	stw	r2,-32764(gp)
		if (led_buf[led_offset] == '\0'){
			led_offset = -1;
			IOWR(LED_BASE, 0, led_val);

		}
		else if (led_buf[led_offset] == '1'){
  800204:	2140031e 	bne	r4,r5,800214 <led_timer_isr+0x58>
			led_offset++;
			IOWR(LED_BASE, 0, 1023);
  800208:	0080ffc4 	movi	r2,1023
  80020c:	18800035 	stwio	r2,0(r3)
  800210:	f800283a 	ret
		}
		else{
			led_offset++;
			IOWR(LED_BASE, 0, 0);
  800214:	18000035 	stwio	zero,0(r3)
  800218:	f800283a 	ret

0080021c <second_letter_to_hex>:
	 norm_const = (FIXED)((int)(sum*scalefactor));
	 hw_push_coefficients(norm_const, norm_const);
}

int second_letter_to_hex(char in){
	switch(in){
  80021c:	21003fcc 	andi	r4,r4,255
  800220:	2100201c 	xori	r4,r4,128
  800224:	213fe004 	addi	r4,r4,-128
  800228:	00801344 	movi	r2,77
  80022c:	20800226 	beq	r4,r2,800238 <second_letter_to_hex+0x1c>
		case 'M':
			return 0b10101011;
	};
	return 0b11111111;
  800230:	00803fc4 	movi	r2,255
  800234:	f800283a 	ret
}

int second_letter_to_hex(char in){
	switch(in){
		case 'M':
			return 0b10101011;
  800238:	00802ac4 	movi	r2,171
	};
	return 0b11111111;
}
  80023c:	f800283a 	ret

00800240 <letter_to_hex>:


int letter_to_hex(char in, int* second){

	switch(in){
  800240:	213ff484 	addi	r4,r4,-46
  800244:	21003fcc 	andi	r4,r4,255
  800248:	00800b04 	movi	r2,44
  80024c:	11006f36 	bltu	r2,r4,80040c <letter_to_hex+0x1cc>
  800250:	200890ba 	slli	r4,r4,2
  800254:	00802034 	movhi	r2,128
  800258:	10809a04 	addi	r2,r2,616
  80025c:	2089883a 	add	r4,r4,r2
  800260:	20800017 	ldw	r2,0(r4)
  800264:	1000683a 	jmp	r2
  800268:	00800404 	movi	r2,16
  80026c:	0080040c 	andi	r2,zero,16
  800270:	00800414 	movui	r2,16
  800274:	0080031c 	xori	r2,zero,12
  800278:	008003fc 	xorhi	r2,zero,15
  80027c:	00800324 	muli	r2,zero,12
  800280:	0080032c 	andhi	r2,zero,12
  800284:	0080032c 	andhi	r2,zero,12
  800288:	00800334 	movhi	r2,12
  80028c:	0080033c 	xorhi	r2,zero,12
  800290:	00800344 	movi	r2,13
  800294:	0080037c 	xorhi	r2,zero,13
  800298:	0080040c 	andi	r2,zero,16
  80029c:	0080040c 	andi	r2,zero,16
  8002a0:	0080040c 	andi	r2,zero,16
  8002a4:	0080040c 	andi	r2,zero,16
  8002a8:	0080040c 	andi	r2,zero,16
  8002ac:	0080040c 	andi	r2,zero,16
  8002b0:	0080040c 	andi	r2,zero,16
  8002b4:	0080034c 	andi	r2,zero,13
  8002b8:	00800354 	movui	r2,13
  8002bc:	0080035c 	xori	r2,zero,13
  8002c0:	00800364 	muli	r2,zero,13
  8002c4:	0080036c 	andhi	r2,zero,13
  8002c8:	00800374 	movhi	r2,13
  8002cc:	0080037c 	xorhi	r2,zero,13
  8002d0:	00800384 	movi	r2,14
  8002d4:	0080031c 	xori	r2,zero,12
  8002d8:	0080038c 	andi	r2,zero,14
  8002dc:	00800394 	movui	r2,14
  8002e0:	0080039c 	xori	r2,zero,14
  8002e4:	008003a4 	muli	r2,zero,14
  8002e8:	008003ac 	andhi	r2,zero,14
  8002ec:	00800414 	movui	r2,16
  8002f0:	008003b4 	movhi	r2,14
  8002f4:	008003bc 	xorhi	r2,zero,14
  8002f8:	008003c4 	movi	r2,15
  8002fc:	008003cc 	andi	r2,zero,15
  800300:	008003d4 	movui	r2,15
  800304:	008003dc 	xori	r2,zero,15
  800308:	008003e4 	muli	r2,zero,15
  80030c:	0080040c 	andi	r2,zero,16
  800310:	008003ec 	andhi	r2,zero,15
  800314:	008003f4 	movhi	r2,15
  800318:	008003fc 	xorhi	r2,zero,15
		case '0':
			return 0b11000000;
		case '1':
			return 0b11111001;
  80031c:	00803e44 	movi	r2,249
  800320:	f800283a 	ret
		case '2':
			return 0b10100100;
		case '3':
			return 0b10110000;
  800324:	00802c04 	movi	r2,176
  800328:	f800283a 	ret
		case '4':
			return 0b10011001;
		case '5':
			return 0b10011001;
  80032c:	00802644 	movi	r2,153
  800330:	f800283a 	ret
		case '6':
			return 0b10000010;
  800334:	00802084 	movi	r2,130
  800338:	f800283a 	ret
		case '7':
			return 0b11111000;
  80033c:	00803e04 	movi	r2,248
  800340:	f800283a 	ret
		case '8':
			return 0b10000000;
  800344:	00802004 	movi	r2,128
  800348:	f800283a 	ret
		case '9':
			return 0b10010000;
		case 'A':
			return 0b10001000;
  80034c:	00802204 	movi	r2,136
  800350:	f800283a 	ret
		case 'B'://Lowercase
			return 0b10000011;
  800354:	008020c4 	movi	r2,131
  800358:	f800283a 	ret
		case 'C':
			return 0b11000110;
  80035c:	00803184 	movi	r2,198
  800360:	f800283a 	ret
		case 'D'://Lowercase
			return 0b10100001;
  800364:	00802844 	movi	r2,161
  800368:	f800283a 	ret
		case 'E':
			return 0b10000110;
  80036c:	00802184 	movi	r2,134
  800370:	f800283a 	ret
		case 'F':
			return 0b10001110;
  800374:	00802384 	movi	r2,142
  800378:	f800283a 	ret
		case 'G':
			return 0b10010000;
  80037c:	00802404 	movi	r2,144
  800380:	f800283a 	ret
		case 'H':
			return 0b10001001;
  800384:	00802244 	movi	r2,137
  800388:	f800283a 	ret
		case 'I':
			return 0b11111001;
		case 'J':
			return 0b11110001;
  80038c:	00803c44 	movi	r2,241
  800390:	f800283a 	ret
		case 'K':
			return 0b10001010;
  800394:	00802284 	movi	r2,138
  800398:	f800283a 	ret
		case 'L':
			return 0b11000111;
  80039c:	008031c4 	movi	r2,199
  8003a0:	f800283a 	ret
		case 'M':
			*second = 1;
  8003a4:	00800044 	movi	r2,1
  8003a8:	28800015 	stw	r2,0(r5)
			return 0b10101011;
		case 'N':
			return 0b10101011;
  8003ac:	00802ac4 	movi	r2,171
  8003b0:	f800283a 	ret
		case 'O':
			return 0b11000000;
		case 'P':
			return 0b10001100;
  8003b4:	00802304 	movi	r2,140
  8003b8:	f800283a 	ret
		case 'Q':
			return 0b10011000;
  8003bc:	00802604 	movi	r2,152
  8003c0:	f800283a 	ret
		case 'R'://Lowercase
			return 0b10101111;
  8003c4:	00802bc4 	movi	r2,175
  8003c8:	f800283a 	ret
		case 'S':
			return 0b10010010;
  8003cc:	00802484 	movi	r2,146
  8003d0:	f800283a 	ret
		case 'T':
			return 0b10000111;
  8003d4:	008021c4 	movi	r2,135
  8003d8:	f800283a 	ret
		case 'U':
			return 0b11000001;
  8003dc:	00803044 	movi	r2,193
  8003e0:	f800283a 	ret
		case 'V':
			return 0b11100011;
  8003e4:	008038c4 	movi	r2,227
  8003e8:	f800283a 	ret
		case 'X':
			return 0b10011011;
  8003ec:	008026c4 	movi	r2,155
  8003f0:	f800283a 	ret
		case 'Y':
			return 0b10010001;
  8003f4:	00802444 	movi	r2,145
  8003f8:	f800283a 	ret
		case 'Z':
			return 0b10100100;
  8003fc:	00802904 	movi	r2,164
  800400:	f800283a 	ret
		case '.':
			return 0b00000000;
  800404:	0005883a 	mov	r2,zero
  800408:	f800283a 	ret
		default:
			return 0b11111111;
  80040c:	00803fc4 	movi	r2,255
  800410:	f800283a 	ret

int letter_to_hex(char in, int* second){

	switch(in){
		case '0':
			return 0b11000000;
  800414:	00803004 	movi	r2,192
		default:
			return 0b11111111;
	};

	return 0;
}
  800418:	f800283a 	ret

0080041c <write_char>:

void write_char(alt_32 code, int index){
	if (index == 5){
  80041c:	00800144 	movi	r2,5
  800420:	2880031e 	bne	r5,r2,800430 <write_char+0x14>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, code);
  800424:	00804034 	movhi	r2,256
  800428:	10849004 	addi	r2,r2,4672
  80042c:	00001706 	br	80048c <write_char+0x70>
	} else if (index == 4){
  800430:	00800104 	movi	r2,4
  800434:	2880031e 	bne	r5,r2,800444 <write_char+0x28>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, code);
  800438:	00804034 	movhi	r2,256
  80043c:	10848c04 	addi	r2,r2,4656
  800440:	00001206 	br	80048c <write_char+0x70>
	}else if (index == 3){
  800444:	008000c4 	movi	r2,3
  800448:	2880031e 	bne	r5,r2,800458 <write_char+0x3c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, code);
  80044c:	00804034 	movhi	r2,256
  800450:	10848804 	addi	r2,r2,4640
  800454:	00000d06 	br	80048c <write_char+0x70>
	}else if (index == 2){
  800458:	00800084 	movi	r2,2
  80045c:	2880031e 	bne	r5,r2,80046c <write_char+0x50>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, code);
  800460:	00804034 	movhi	r2,256
  800464:	10848404 	addi	r2,r2,4624
  800468:	00000806 	br	80048c <write_char+0x70>
	}else if (index == 1){
  80046c:	00800044 	movi	r2,1
  800470:	2880031e 	bne	r5,r2,800480 <write_char+0x64>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, code);
  800474:	00804034 	movhi	r2,256
  800478:	10848004 	addi	r2,r2,4608
  80047c:	00000306 	br	80048c <write_char+0x70>
	}else if (index == 0){
  800480:	2800031e 	bne	r5,zero,800490 <write_char+0x74>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, code);
  800484:	00804034 	movhi	r2,256
  800488:	10847c04 	addi	r2,r2,4592
  80048c:	11000035 	stwio	r4,0(r2)
  800490:	f800283a 	ret

00800494 <write_to_disp>:
	}
}
//Display processing
void write_to_disp(char* str, int offset){
  800494:	defff704 	addi	sp,sp,-36
  800498:	dd400615 	stw	r21,24(sp)
			second = 0;
			char_offset++;
		}else{
			second = 0;
			if(offset !=0 && char_offset == 0 && !flag){
				letter_to_hex(str[offset-1], &second);
  80049c:	2d7fffc4 	addi	r21,r5,-1
	}else if (index == 0){
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, code);
	}
}
//Display processing
void write_to_disp(char* str, int offset){
  8004a0:	dd800715 	stw	r22,28(sp)
  8004a4:	dd000515 	stw	r20,20(sp)
  8004a8:	dcc00415 	stw	r19,16(sp)
  8004ac:	dc800315 	stw	r18,12(sp)
  8004b0:	dc400215 	stw	r17,8(sp)
  8004b4:	dc000115 	stw	r16,4(sp)
  8004b8:	dfc00815 	stw	ra,32(sp)
  8004bc:	2029883a 	mov	r20,r4
  8004c0:	2825883a 	mov	r18,r5
	int second = 0;
  8004c4:	d8000015 	stw	zero,0(sp)
	int code;
	int char_offset = 0;
	int flag = 0;

	for(int i = 5; i>=0; i--){
  8004c8:	04400144 	movi	r17,5
//Display processing
void write_to_disp(char* str, int offset){
	int second = 0;
	int code;
	int char_offset = 0;
	int flag = 0;
  8004cc:	0027883a 	mov	r19,zero
}
//Display processing
void write_to_disp(char* str, int offset){
	int second = 0;
	int code;
	int char_offset = 0;
  8004d0:	0021883a 	mov	r16,zero
			second = 0;
			char_offset++;
		}else{
			second = 0;
			if(offset !=0 && char_offset == 0 && !flag){
				letter_to_hex(str[offset-1], &second);
  8004d4:	256b883a 	add	r21,r4,r21
	int second = 0;
	int code;
	int char_offset = 0;
	int flag = 0;

	for(int i = 5; i>=0; i--){
  8004d8:	05bfffc4 	movi	r22,-1
		if (second){
  8004dc:	d8800017 	ldw	r2,0(sp)
  8004e0:	10000a26 	beq	r2,zero,80050c <write_to_disp+0x78>
			code = second_letter_to_hex(str[offset+char_offset]);
  8004e4:	a405883a 	add	r2,r20,r16
  8004e8:	1485883a 	add	r2,r2,r18
  8004ec:	11000007 	ldb	r4,0(r2)
			write_char(code, i);
			second = 0;
			char_offset++;
  8004f0:	84000044 	addi	r16,r16,1
	int char_offset = 0;
	int flag = 0;

	for(int i = 5; i>=0; i--){
		if (second){
			code = second_letter_to_hex(str[offset+char_offset]);
  8004f4:	080021c0 	call	80021c <second_letter_to_hex>
			write_char(code, i);
  8004f8:	880b883a 	mov	r5,r17
  8004fc:	1009883a 	mov	r4,r2
  800500:	080041c0 	call	80041c <write_char>
			second = 0;
  800504:	d8000015 	stw	zero,0(sp)
  800508:	00002606 	br	8005a4 <write_to_disp+0x110>
			char_offset++;
		}else{
			second = 0;
			if(offset !=0 && char_offset == 0 && !flag){
  80050c:	90001926 	beq	r18,zero,800574 <write_to_disp+0xe0>
  800510:	8000181e 	bne	r16,zero,800574 <write_to_disp+0xe0>
  800514:	9800171e 	bne	r19,zero,800574 <write_to_disp+0xe0>
				letter_to_hex(str[offset-1], &second);
  800518:	a9000007 	ldb	r4,0(r21)
  80051c:	d80b883a 	mov	r5,sp
  800520:	08002400 	call	800240 <letter_to_hex>
				if(second){
  800524:	d8800017 	ldw	r2,0(sp)
  800528:	10000826 	beq	r2,zero,80054c <write_to_disp+0xb8>
					code = second_letter_to_hex(str[offset-1]);
  80052c:	a9000007 	ldb	r4,0(r21)
					write_char(code, i);
					second = 0;
					flag = 1;
  800530:	04c00044 	movi	r19,1
		}else{
			second = 0;
			if(offset !=0 && char_offset == 0 && !flag){
				letter_to_hex(str[offset-1], &second);
				if(second){
					code = second_letter_to_hex(str[offset-1]);
  800534:	080021c0 	call	80021c <second_letter_to_hex>
					write_char(code, i);
  800538:	880b883a 	mov	r5,r17
  80053c:	1009883a 	mov	r4,r2
  800540:	080041c0 	call	80041c <write_char>
					second = 0;
  800544:	d8000015 	stw	zero,0(sp)
  800548:	00001606 	br	8005a4 <write_to_disp+0x110>
					flag = 1;
				}else{
					second = 0;
					code = letter_to_hex(str[offset+char_offset], &second);
  80054c:	a485883a 	add	r2,r20,r18
  800550:	11000007 	ldb	r4,0(r2)
  800554:	d80b883a 	mov	r5,sp
  800558:	08002400 	call	800240 <letter_to_hex>
					write_char(code, i);
  80055c:	880b883a 	mov	r5,r17
  800560:	1009883a 	mov	r4,r2
  800564:	080041c0 	call	80041c <write_char>
	for(int i = 5; i>=0; i--){
		if (second){
			code = second_letter_to_hex(str[offset+char_offset]);
			write_char(code, i);
			second = 0;
			char_offset++;
  800568:	dc000017 	ldw	r16,0(sp)
  80056c:	8021003a 	cmpeq	r16,r16,zero
  800570:	00000c06 	br	8005a4 <write_to_disp+0x110>
					if(second == 0){char_offset++;}
				}
			}else{
				second = 0;
				flag = 0;
				code = letter_to_hex(str[offset+char_offset], &second);
  800574:	a405883a 	add	r2,r20,r16
  800578:	1485883a 	add	r2,r2,r18
  80057c:	11000007 	ldb	r4,0(r2)
  800580:	d80b883a 	mov	r5,sp
  800584:	08002400 	call	800240 <letter_to_hex>
				write_char(code, i);
  800588:	1009883a 	mov	r4,r2
  80058c:	880b883a 	mov	r5,r17
  800590:	080041c0 	call	80041c <write_char>

				if(second == 0){char_offset++;}
  800594:	d8800017 	ldw	r2,0(sp)
  800598:	1000011e 	bne	r2,zero,8005a0 <write_to_disp+0x10c>
  80059c:	84000044 	addi	r16,r16,1

					if(second == 0){char_offset++;}
				}
			}else{
				second = 0;
				flag = 0;
  8005a0:	0027883a 	mov	r19,zero
	int second = 0;
	int code;
	int char_offset = 0;
	int flag = 0;

	for(int i = 5; i>=0; i--){
  8005a4:	8c7fffc4 	addi	r17,r17,-1
  8005a8:	8dbfcc1e 	bne	r17,r22,8004dc <__alt_data_end+0xff8004dc>

				if(second == 0){char_offset++;}
			}
		}
	}
}
  8005ac:	dfc00817 	ldw	ra,32(sp)
  8005b0:	dd800717 	ldw	r22,28(sp)
  8005b4:	dd400617 	ldw	r21,24(sp)
  8005b8:	dd000517 	ldw	r20,20(sp)
  8005bc:	dcc00417 	ldw	r19,16(sp)
  8005c0:	dc800317 	ldw	r18,12(sp)
  8005c4:	dc400217 	ldw	r17,8(sp)
  8005c8:	dc000117 	ldw	r16,4(sp)
  8005cc:	dec00904 	addi	sp,sp,36
  8005d0:	f800283a 	ret

008005d4 <disp_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);

}

void disp_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  8005d4:	00804034 	movhi	r2,256
  8005d8:	10843804 	addi	r2,r2,4320
  8005dc:	10000035 	stwio	zero,0(r2)

    if(disp_buf[disp_offset+5] == '\0'){
  8005e0:	d120e017 	ldw	r4,-31872(gp)
  8005e4:	d0a0dd17 	ldw	r2,-31884(gp)
  8005e8:	2087883a 	add	r3,r4,r2
  8005ec:	18c00147 	ldb	r3,5(r3)
  8005f0:	1800021e 	bne	r3,zero,8005fc <disp_timer_isr+0x28>
    	disp_offset = 0;
  8005f4:	d020dd15 	stw	zero,-31884(gp)
  8005f8:	00000206 	br	800604 <disp_timer_isr+0x30>
    }
    else{
    	disp_offset++;
  8005fc:	10800044 	addi	r2,r2,1
  800600:	d0a0dd15 	stw	r2,-31884(gp)
    }
    write_to_disp(disp_buf,disp_offset);
  800604:	d160dd17 	ldw	r5,-31884(gp)
  800608:	08004941 	jmpi	800494 <write_to_disp>

0080060c <clr_disp>:
	}
}


void clr_disp(){
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 255);
  80060c:	00c04034 	movhi	r3,256
  800610:	00803fc4 	movi	r2,255
  800614:	18c47c04 	addi	r3,r3,4592
  800618:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 255);
  80061c:	00c04034 	movhi	r3,256
  800620:	18c48004 	addi	r3,r3,4608
  800624:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 255);
  800628:	00c04034 	movhi	r3,256
  80062c:	18c48404 	addi	r3,r3,4624
  800630:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 255);
  800634:	00c04034 	movhi	r3,256
  800638:	18c48804 	addi	r3,r3,4640
  80063c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 255);
  800640:	00c04034 	movhi	r3,256
  800644:	18c48c04 	addi	r3,r3,4656
  800648:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 255);
  80064c:	00c04034 	movhi	r3,256
  800650:	18c49004 	addi	r3,r3,4672
  800654:	18800035 	stwio	r2,0(r3)
  800658:	f800283a 	ret

0080065c <read_request>:
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  80065c:	defffb04 	addi	sp,sp,-20
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  800660:	01801004 	movi	r6,64
  800664:	000b883a 	mov	r5,zero
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  800668:	dfc00415 	stw	ra,16(sp)
  80066c:	dcc00315 	stw	r19,12(sp)
  800670:	dc800215 	stw	r18,8(sp)
  800674:	dc400115 	stw	r17,4(sp)
  800678:	dc000015 	stw	r16,0(sp)
  80067c:	2023883a 	mov	r17,r4
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  800680:	08036500 	call	803650 <memset>

	//Get first character
	c = alt_getchar();
  800684:	0804c440 	call	804c44 <alt_getchar>
  800688:	1025883a 	mov	r18,r2

	//Start timer after first char received
	latency = alt_timestamp();
  80068c:	08051a80 	call	8051a8 <alt_timestamp>
  800690:	d0a0e115 	stw	r2,-31868(gp)
  800694:	d0e0e215 	stw	r3,-31864(gp)

	while(c != '\n'){
  800698:	8821883a 	mov	r16,r17
  80069c:	04c00284 	movi	r19,10
  8006a0:	90803fcc 	andi	r2,r18,255
  8006a4:	1080201c 	xori	r2,r2,128
  8006a8:	10bfe004 	addi	r2,r2,-128
  8006ac:	8449c83a 	sub	r4,r16,r17
  8006b0:	14c00526 	beq	r2,r19,8006c8 <read_request+0x6c>
		outbuf[idx] = c;
  8006b4:	84800005 	stb	r18,0(r16)
		c = alt_getchar();
  8006b8:	0804c440 	call	804c44 <alt_getchar>
  8006bc:	1025883a 	mov	r18,r2
  8006c0:	84000044 	addi	r16,r16,1
  8006c4:	003ff606 	br	8006a0 <__alt_data_end+0xff8006a0>
		idx++;
	}
	outbuf[idx] = ' ';
  8006c8:	8909883a 	add	r4,r17,r4
  8006cc:	00800804 	movi	r2,32
  8006d0:	20800005 	stb	r2,0(r4)

}
  8006d4:	dfc00417 	ldw	ra,16(sp)
  8006d8:	dcc00317 	ldw	r19,12(sp)
  8006dc:	dc800217 	ldw	r18,8(sp)
  8006e0:	dc400117 	ldw	r17,4(sp)
  8006e4:	dc000017 	ldw	r16,0(sp)
  8006e8:	dec00504 	addi	sp,sp,20
  8006ec:	f800283a 	ret

008006f0 <acc_timer_init>:

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  8006f0:	defffe04 	addi	sp,sp,-8
  8006f4:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  8006f8:	04004034 	movhi	r16,256

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  8006fc:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  800700:	84043104 	addi	r16,r16,4292
  800704:	008000c4 	movi	r2,3
  800708:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  80070c:	00804034 	movhi	r2,256
  800710:	10843004 	addi	r2,r2,4288
  800714:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(ACC_TIMER_BASE, 0xfbd0);
  800718:	00804034 	movhi	r2,256
  80071c:	10843204 	addi	r2,r2,4296
  800720:	00fef414 	movui	r3,64464
  800724:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(ACC_TIMER_BASE, 0x0001);
  800728:	00804034 	movhi	r2,256
  80072c:	10843304 	addi	r2,r2,4300
  800730:	00c00044 	movi	r3,1
  800734:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
  800738:	200d883a 	mov	r6,r4
  80073c:	000b883a 	mov	r5,zero
  800740:	01000244 	movi	r4,9
  800744:	0804c880 	call	804c88 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);
  800748:	008001c4 	movi	r2,7
  80074c:	80800035 	stwio	r2,0(r16)

}
  800750:	dfc00117 	ldw	ra,4(sp)
  800754:	dc000017 	ldw	r16,0(sp)
  800758:	dec00204 	addi	sp,sp,8
  80075c:	f800283a 	ret

00800760 <disp_timer_init>:
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  800760:	defffe04 	addi	sp,sp,-8
  800764:	dc000015 	stw	r16,0(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  800768:	04004034 	movhi	r16,256
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  80076c:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  800770:	84043904 	addi	r16,r16,4324
  800774:	008000c4 	movi	r2,3
  800778:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  80077c:	00804034 	movhi	r2,256
  800780:	10843804 	addi	r2,r2,4320
  800784:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(HEX_TIMER_BASE, 0x5a00);
  800788:	00804034 	movhi	r2,256
  80078c:	10843a04 	addi	r2,r2,4328
  800790:	00d68004 	movi	r3,23040
  800794:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(HEX_TIMER_BASE, 0x0262);
  800798:	00804034 	movhi	r2,256
  80079c:	10843b04 	addi	r2,r2,4332
  8007a0:	00c09884 	movi	r3,610
  8007a4:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(HEX_TIMER_IRQ, 0, isr);
  8007a8:	200d883a 	mov	r6,r4
  8007ac:	000b883a 	mov	r5,zero
  8007b0:	01000204 	movi	r4,8
  8007b4:	0804c880 	call	804c88 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);
  8007b8:	008001c4 	movi	r2,7
  8007bc:	80800035 	stwio	r2,0(r16)

}
  8007c0:	dfc00117 	ldw	ra,4(sp)
  8007c4:	dc000017 	ldw	r16,0(sp)
  8007c8:	dec00204 	addi	sp,sp,8
  8007cc:	f800283a 	ret

008007d0 <led_timer_init>:



}

void led_timer_init(void * isr) {
  8007d0:	defffe04 	addi	sp,sp,-8
  8007d4:	dc000015 	stw	r16,0(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  8007d8:	04004034 	movhi	r16,256



}

void led_timer_init(void * isr) {
  8007dc:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  8007e0:	84044904 	addi	r16,r16,4388
  8007e4:	008000c4 	movi	r2,3
  8007e8:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  8007ec:	00804034 	movhi	r2,256
  8007f0:	10844804 	addi	r2,r2,4384
  8007f4:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x5d40);
  8007f8:	00804034 	movhi	r2,256
  8007fc:	10844a04 	addi	r2,r2,4392
  800800:	00d75004 	movi	r3,23872
  800804:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x00c6);
  800808:	00804034 	movhi	r2,256
  80080c:	10844b04 	addi	r2,r2,4396
  800810:	00c03184 	movi	r3,198
  800814:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
  800818:	200d883a 	mov	r6,r4
  80081c:	000b883a 	mov	r5,zero
  800820:	01000144 	movi	r4,5
  800824:	0804c880 	call	804c88 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
  800828:	008001c4 	movi	r2,7
  80082c:	80800035 	stwio	r2,0(r16)

}
  800830:	dfc00117 	ldw	ra,4(sp)
  800834:	dc000017 	ldw	r16,0(sp)
  800838:	dec00204 	addi	sp,sp,8
  80083c:	f800283a 	ret

00800840 <to_hex>:
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  800840:	defffc04 	addi	sp,sp,-16
  800844:	dc400115 	stw	r17,4(sp)
  800848:	3023883a 	mov	r17,r6
  80084c:	dc800215 	stw	r18,8(sp)
  800850:	dc000015 	stw	r16,0(sp)
  800854:	2025883a 	mov	r18,r4
  800858:	2821883a 	mov	r16,r5
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  80085c:	01800204 	movi	r6,8
  800860:	000b883a 	mov	r5,zero
  800864:	8809883a 	mov	r4,r17
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  800868:	dfc00315 	stw	ra,12(sp)
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  80086c:	08036500 	call	803650 <memset>
	sprintf(buf, "%x", val);
  800870:	01402034 	movhi	r5,128
  800874:	8809883a 	mov	r4,r17
  800878:	900d883a 	mov	r6,r18
  80087c:	29553e04 	addi	r5,r5,21752
  800880:	08039e80 	call	8039e8 <sprintf>
	int hexlen = strlen(buf);
  800884:	8809883a 	mov	r4,r17
  800888:	0803b000 	call	803b00 <strlen>

	//Left shift if string is longer than desired length to take least significant
	if (hexlen > length){
  80088c:	8080090e 	bge	r16,r2,8008b4 <to_hex+0x74>
  800890:	8807883a 	mov	r3,r17
		for(int i = 0; i < length; i++){
  800894:	1c49c83a 	sub	r4,r3,r17
  800898:	24000c0e 	bge	r4,r16,8008cc <to_hex+0x8c>
			buf[i] = buf[(i + hexlen - length)];
  80089c:	10c9883a 	add	r4,r2,r3
  8008a0:	2409c83a 	sub	r4,r4,r16
  8008a4:	21000003 	ldbu	r4,0(r4)
  8008a8:	18c00044 	addi	r3,r3,1
  8008ac:	193fffc5 	stb	r4,-1(r3)
  8008b0:	003ff806 	br	800894 <__alt_data_end+0xff800894>
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
  8008b4:	1400050e 	bge	r2,r16,8008cc <to_hex+0x8c>
  8008b8:	80ffffc4 	addi	r3,r16,-1
  8008bc:	88c7883a 	add	r3,r17,r3
  8008c0:	0009883a 	mov	r4,zero
		for(int i = 0; i < length; i++){
			if(i < hexlen){
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
			}
			else{
				buf[(length - 1 - i)] = '0';
  8008c4:	01800c04 	movi	r6,48
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  8008c8:	24000816 	blt	r4,r16,8008ec <to_hex+0xac>
			}

		}
	}
	//Add termination
	buf[length] = '\0';
  8008cc:	8c21883a 	add	r16,r17,r16
  8008d0:	80000005 	stb	zero,0(r16)

}
  8008d4:	dfc00317 	ldw	ra,12(sp)
  8008d8:	dc800217 	ldw	r18,8(sp)
  8008dc:	dc400117 	ldw	r17,4(sp)
  8008e0:	dc000017 	ldw	r16,0(sp)
  8008e4:	dec00404 	addi	sp,sp,16
  8008e8:	f800283a 	ret
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
			if(i < hexlen){
  8008ec:	2080050e 	bge	r4,r2,800904 <to_hex+0xc4>
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
  8008f0:	1c0bc83a 	sub	r5,r3,r16
  8008f4:	288b883a 	add	r5,r5,r2
  8008f8:	29400003 	ldbu	r5,0(r5)
  8008fc:	19400005 	stb	r5,0(r3)
  800900:	00000106 	br	800908 <to_hex+0xc8>
			}
			else{
				buf[(length - 1 - i)] = '0';
  800904:	19800005 	stb	r6,0(r3)
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800908:	21000044 	addi	r4,r4,1
  80090c:	18ffffc4 	addi	r3,r3,-1
  800910:	003fed06 	br	8008c8 <__alt_data_end+0xff8008c8>

00800914 <throw_code>:

}


void throw_code(char* regname, int code){
	printf("K %s %x\n", regname, code);
  800914:	280d883a 	mov	r6,r5
  800918:	200b883a 	mov	r5,r4
  80091c:	01002034 	movhi	r4,128
  800920:	21153f04 	addi	r4,r4,21756
  800924:	08038e81 	jmpi	8038e8 <printf>

00800928 <hw_reset>:
}

//Hardware helper functions
void hw_reset(){
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800928:	00804034 	movhi	r2,256
  80092c:	0007883a 	mov	r3,zero
  800930:	10846804 	addi	r2,r2,4512
  800934:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 4);
  800938:	01000104 	movi	r4,4
  80093c:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 7);
  800940:	010001c4 	movi	r4,7
  800944:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800948:	10c00035 	stwio	r3,0(r2)
  80094c:	f800283a 	ret

00800950 <hw_push_value>:
};

void hw_push_value(alt_32 xvalue, alt_32 yvalue){
	IOWR(HARDWARE_OUT_X_BASE,0, xvalue);
  800950:	00804034 	movhi	r2,256
  800954:	10847004 	addi	r2,r2,4544
  800958:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_OUT_Y_BASE,0, yvalue);
  80095c:	00804034 	movhi	r2,256
  800960:	10846004 	addi	r2,r2,4480
  800964:	11400035 	stwio	r5,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800968:	00804034 	movhi	r2,256
  80096c:	0007883a 	mov	r3,zero
  800970:	10846804 	addi	r2,r2,4512
  800974:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 1);
  800978:	01000044 	movi	r4,1
  80097c:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800980:	10c00035 	stwio	r3,0(r2)
  800984:	f800283a 	ret

00800988 <acc_timer_isr>:
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  800988:	defffb04 	addi	sp,sp,-20
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  80098c:	00804034 	movhi	r2,256
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  800990:	dfc00415 	stw	ra,16(sp)
  800994:	dc400315 	stw	r17,12(sp)
  800998:	dc000215 	stw	r16,8(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  80099c:	10843004 	addi	r2,r2,4288
  8009a0:	10000035 	stwio	zero,0(r2)


    alt_32 x,y;

    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  8009a4:	d120e317 	ldw	r4,-31860(gp)
  8009a8:	d9400104 	addi	r5,sp,4
  8009ac:	08052540 	call	805254 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  8009b0:	d120e317 	ldw	r4,-31860(gp)
  8009b4:	d80b883a 	mov	r5,sp
  8009b8:	08052ac0 	call	8052ac <alt_up_accelerometer_spi_read_y_axis>

	hw_push_value(x,y);
  8009bc:	d9400017 	ldw	r5,0(sp)
  8009c0:	d9000117 	ldw	r4,4(sp)
  8009c4:	08009500 	call	800950 <hw_push_value>

	//iNTERRUPT FREQUENCY MONITORING
	static int count;
	static alt_64 lasttime;

    if(debug && ((count & 4095) == 0) ){
  8009c8:	d0a0da17 	ldw	r2,-31896(gp)
  8009cc:	10002226 	beq	r2,zero,800a58 <acc_timer_isr+0xd0>
  8009d0:	d0a0d917 	ldw	r2,-31900(gp)
  8009d4:	1083ffcc 	andi	r2,r2,4095
  8009d8:	10001f1e 	bne	r2,zero,800a58 <acc_timer_isr+0xd0>
    	printf("Avg sampling period (us): %i\n", (alt_timestamp()-lasttime)/4096 /(alt_timestamp_freq()/1000000) );
  8009dc:	08051a80 	call	8051a8 <alt_timestamp>
  8009e0:	d460d717 	ldw	r17,-31908(gp)
  8009e4:	d160d817 	ldw	r5,-31904(gp)
  8009e8:	1463c83a 	sub	r17,r2,r17
  8009ec:	1445803a 	cmpltu	r2,r2,r17
  8009f0:	1947c83a 	sub	r3,r3,r5
  8009f4:	1887c83a 	sub	r3,r3,r2
  8009f8:	1804953a 	slli	r2,r3,20
  8009fc:	8822d33a 	srli	r17,r17,12
  800a00:	1820d33a 	srli	r16,r3,12
  800a04:	1462b03a 	or	r17,r2,r17
  800a08:	08051f40 	call	8051f4 <alt_timestamp_freq>
  800a0c:	014003f4 	movhi	r5,15
  800a10:	29509004 	addi	r5,r5,16960
  800a14:	1009883a 	mov	r4,r2
  800a18:	08019180 	call	801918 <__udivsi3>
  800a1c:	000f883a 	mov	r7,zero
  800a20:	100d883a 	mov	r6,r2
  800a24:	8809883a 	mov	r4,r17
  800a28:	800b883a 	mov	r5,r16
  800a2c:	08012240 	call	801224 <__udivdi3>
  800a30:	01002034 	movhi	r4,128
  800a34:	100b883a 	mov	r5,r2
  800a38:	180d883a 	mov	r6,r3
  800a3c:	21154204 	addi	r4,r4,21768
  800a40:	08038e80 	call	8038e8 <printf>
		count = 1;
  800a44:	00800044 	movi	r2,1
  800a48:	d0a0d915 	stw	r2,-31900(gp)
		lasttime = alt_timestamp();
  800a4c:	08051a80 	call	8051a8 <alt_timestamp>
  800a50:	d0a0d715 	stw	r2,-31908(gp)
  800a54:	d0e0d815 	stw	r3,-31904(gp)
    }
    count++;
  800a58:	d0a0d917 	ldw	r2,-31900(gp)
  800a5c:	10800044 	addi	r2,r2,1
  800a60:	d0a0d915 	stw	r2,-31900(gp)
}
  800a64:	dfc00417 	ldw	ra,16(sp)
  800a68:	dc400317 	ldw	r17,12(sp)
  800a6c:	dc000217 	ldw	r16,8(sp)
  800a70:	dec00504 	addi	sp,sp,20
  800a74:	f800283a 	ret

00800a78 <hw_push_coefficients>:
	IOWR(HARDWARE_CLOCKS_BASE, 0, 1);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);

}
void hw_push_coefficients(alt_32 xvalue, alt_32 yvalue){
	IOWR(HARDWARE_OUT_X_BASE,0, xvalue);
  800a78:	00804034 	movhi	r2,256
  800a7c:	10847004 	addi	r2,r2,4544
  800a80:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_OUT_Y_BASE,0, yvalue);
  800a84:	00804034 	movhi	r2,256
  800a88:	10846004 	addi	r2,r2,4480
  800a8c:	11400035 	stwio	r5,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800a90:	00804034 	movhi	r2,256
  800a94:	0007883a 	mov	r3,zero
  800a98:	10846804 	addi	r2,r2,4512
  800a9c:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
  800aa0:	01000084 	movi	r4,2
  800aa4:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800aa8:	10c00035 	stwio	r3,0(r2)
  800aac:	f800283a 	ret

00800ab0 <coeffs_to_fixed>:


//Ring buffer
//---------------------------------------------------------------

void coeffs_to_fixed(){
  800ab0:	defffa04 	addi	sp,sp,-24
  800ab4:	dd000415 	stw	r20,16(sp)
  800ab8:	dcc00315 	stw	r19,12(sp)
  800abc:	dc800215 	stw	r18,8(sp)
  800ac0:	dc400115 	stw	r17,4(sp)
  800ac4:	dc000015 	stw	r16,0(sp)
  800ac8:	dfc00515 	stw	ra,20(sp)

	hw_reset();
  800acc:	08009280 	call	800928 <hw_reset>

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800ad0:	d0a00017 	ldw	r2,-32768(gp)

void coeffs_to_fixed(){

	hw_reset();

	double sum = 0;
  800ad4:	0029883a 	mov	r20,zero
  800ad8:	0027883a 	mov	r19,zero

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800adc:	1006d7fa 	srli	r3,r2,31
  800ae0:	1885883a 	add	r2,r3,r2
  800ae4:	1023d07a 	srai	r17,r2,1
	int upper_bound = RING_SIZE/2 + quality/2;
  800ae8:	1005d07a 	srai	r2,r2,1

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800aec:	0463c83a 	sub	r17,zero,r17
  800af0:	8c400744 	addi	r17,r17,29
  800af4:	882490fa 	slli	r18,r17,3
	int upper_bound = RING_SIZE/2 + quality/2;
  800af8:	14000744 	addi	r16,r2,29
  800afc:	00802034 	movhi	r2,128
  800b00:	10967b04 	addi	r2,r2,23020
  800b04:	90a5883a 	add	r18,r18,r2

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){
  800b08:	8c00150e 	bge	r17,r16,800b60 <coeffs_to_fixed+0xb0>

		temp = (FIXED)(h[i]*scalefactor);
  800b0c:	91000017 	ldw	r4,0(r18)
  800b10:	91400117 	ldw	r5,4(r18)
  800b14:	000d883a 	mov	r6,zero
  800b18:	01d02834 	movhi	r7,16544
  800b1c:	0802c780 	call	802c78 <__muldf3>
  800b20:	180b883a 	mov	r5,r3
  800b24:	1009883a 	mov	r4,r2
  800b28:	08034e40 	call	8034e4 <__fixdfsi>
		hw_push_coefficients(temp, temp);
  800b2c:	100b883a 	mov	r5,r2
  800b30:	1009883a 	mov	r4,r2
  800b34:	0800a780 	call	800a78 <hw_push_coefficients>
		sum += h[i];
  800b38:	91800017 	ldw	r6,0(r18)
  800b3c:	91c00117 	ldw	r7,4(r18)
  800b40:	a009883a 	mov	r4,r20
  800b44:	980b883a 	mov	r5,r19
  800b48:	08019fc0 	call	8019fc <__adddf3>
  800b4c:	1029883a 	mov	r20,r2
  800b50:	1827883a 	mov	r19,r3
	int lower_bound = RING_SIZE/2 - quality/2;
	int upper_bound = RING_SIZE/2 + quality/2;

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){
  800b54:	8c400044 	addi	r17,r17,1
  800b58:	94800204 	addi	r18,r18,8
  800b5c:	003fea06 	br	800b08 <__alt_data_end+0xff800b08>

	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
  800b60:	a00d883a 	mov	r6,r20
  800b64:	980f883a 	mov	r7,r19
  800b68:	0009883a 	mov	r4,zero
  800b6c:	014ffc34 	movhi	r5,16368
  800b70:	08022a80 	call	8022a8 <__divdf3>
  800b74:	000d883a 	mov	r6,zero
  800b78:	01d02834 	movhi	r7,16544
  800b7c:	1009883a 	mov	r4,r2
  800b80:	180b883a 	mov	r5,r3
  800b84:	0802c780 	call	802c78 <__muldf3>
  800b88:	180b883a 	mov	r5,r3
  800b8c:	1009883a 	mov	r4,r2
  800b90:	08034e40 	call	8034e4 <__fixdfsi>
	 hw_push_coefficients(norm_const, norm_const);
  800b94:	100b883a 	mov	r5,r2
  800b98:	1009883a 	mov	r4,r2

	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
  800b9c:	d0a0de15 	stw	r2,-31880(gp)
	 hw_push_coefficients(norm_const, norm_const);
}
  800ba0:	dfc00517 	ldw	ra,20(sp)
  800ba4:	dd000417 	ldw	r20,16(sp)
  800ba8:	dcc00317 	ldw	r19,12(sp)
  800bac:	dc800217 	ldw	r18,8(sp)
  800bb0:	dc400117 	ldw	r17,4(sp)
  800bb4:	dc000017 	ldw	r16,0(sp)
  800bb8:	dec00604 	addi	sp,sp,24
	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
	 hw_push_coefficients(norm_const, norm_const);
  800bbc:	0800a781 	jmpi	800a78 <hw_push_coefficients>

00800bc0 <parse_request>:
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  800bc0:	deffef04 	addi	sp,sp,-68
	int token_number = 0;
	char* tokens[8] = {};
  800bc4:	01800804 	movi	r6,32
  800bc8:	000b883a 	mov	r5,zero
  800bcc:	d809883a 	mov	r4,sp
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  800bd0:	dfc01015 	stw	ra,64(sp)
  800bd4:	dc000b15 	stw	r16,44(sp)
  800bd8:	dd000f15 	stw	r20,60(sp)
  800bdc:	dcc00e15 	stw	r19,56(sp)
  800be0:	dc800d15 	stw	r18,52(sp)
  800be4:	dc400c15 	stw	r17,48(sp)
	int token_number = 0;
	char* tokens[8] = {};
  800be8:	08036500 	call	803650 <memset>
	char* token;


	token = strtok(cmdbuffer, " ");
  800bec:	d120df17 	ldw	r4,-31876(gp)
  800bf0:	01402034 	movhi	r5,128
  800bf4:	29556104 	addi	r5,r5,21892
  800bf8:	0803b700 	call	803b70 <strtok>
	outbuf[idx] = ' ';

}

void parse_request(char* request){
	int token_number = 0;
  800bfc:	0021883a 	mov	r16,zero


	token = strtok(cmdbuffer, " ");


	while(token != NULL){
  800c00:	10000a26 	beq	r2,zero,800c2c <parse_request+0x6c>
		tokens[token_number]= token;
  800c04:	8407883a 	add	r3,r16,r16
  800c08:	18c7883a 	add	r3,r3,r3
  800c0c:	d8c7883a 	add	r3,sp,r3
		token_number++;
		token = strtok(NULL, " ");
  800c10:	01402034 	movhi	r5,128

	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
  800c14:	18800015 	stw	r2,0(r3)
		token_number++;
		token = strtok(NULL, " ");
  800c18:	29556104 	addi	r5,r5,21892
  800c1c:	0009883a 	mov	r4,zero
	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
		token_number++;
  800c20:	84000044 	addi	r16,r16,1
		token = strtok(NULL, " ");
  800c24:	0803b700 	call	803b70 <strtok>
  800c28:	003ff506 	br	800c00 <__alt_data_end+0xff800c00>
	}

	if(token_number == 0 || strcmp(tokens[0], &"R" ) != 0){
  800c2c:	80000526 	beq	r16,zero,800c44 <parse_request+0x84>
  800c30:	d9000017 	ldw	r4,0(sp)
  800c34:	01402034 	movhi	r5,128
  800c38:	29554a04 	addi	r5,r5,21800
  800c3c:	0803a9c0 	call	803a9c <strcmp>
  800c40:	10000226 	beq	r2,zero,800c4c <parse_request+0x8c>
		throw_code(&"ERR", 1);
  800c44:	01400044 	movi	r5,1
  800c48:	00008f06 	br	800e88 <parse_request+0x2c8>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
  800c4c:	dc400117 	ldw	r17,4(sp)
  800c50:	01402034 	movhi	r5,128
  800c54:	29554c04 	addi	r5,r5,21808
  800c58:	8809883a 	mov	r4,r17
  800c5c:	0803a9c0 	call	803a9c <strcmp>
  800c60:	1025883a 	mov	r18,r2
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
  800c64:	10000526 	beq	r2,zero,800c7c <parse_request+0xbc>
  800c68:	01402034 	movhi	r5,128
  800c6c:	29554d04 	addi	r5,r5,21812
  800c70:	8809883a 	mov	r4,r17
  800c74:	0803a9c0 	call	803a9c <strcmp>
  800c78:	1000241e 	bne	r2,zero,800d0c <parse_request+0x14c>
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
}
alt_32 hw_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_X_BASE);
  800c7c:	00804034 	movhi	r2,256
  800c80:	10846c04 	addi	r2,r2,4528
  800c84:	15000037 	ldwio	r20,0(r2)
}

alt_32 hw_y_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_Y_BASE);
  800c88:	00804034 	movhi	r2,256
  800c8c:	10846404 	addi	r2,r2,4496
  800c90:	14c00037 	ldwio	r19,0(r2)
		matched = 1;

		alt_32 x,y,z;
			x = hw_x_read();
			y = hw_y_read();
			alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800c94:	d120e317 	ldw	r4,-31860(gp)

			to_hex(x, 3, hexbuffers[0]);
  800c98:	04002034 	movhi	r16,128
		matched = 1;

		alt_32 x,y,z;
			x = hw_x_read();
			y = hw_y_read();
			alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800c9c:	d9400804 	addi	r5,sp,32
  800ca0:	08053040 	call	805304 <alt_up_accelerometer_spi_read_z_axis>

			to_hex(x, 3, hexbuffers[0]);
  800ca4:	84182504 	addi	r16,r16,24724
  800ca8:	81800017 	ldw	r6,0(r16)
  800cac:	014000c4 	movi	r5,3
  800cb0:	a009883a 	mov	r4,r20
  800cb4:	08008400 	call	800840 <to_hex>
			to_hex(y, 3, hexbuffers[1]);
  800cb8:	81800117 	ldw	r6,4(r16)
  800cbc:	014000c4 	movi	r5,3
  800cc0:	9809883a 	mov	r4,r19
  800cc4:	08008400 	call	800840 <to_hex>
			to_hex(z, 3, hexbuffers[2]);
  800cc8:	81800217 	ldw	r6,8(r16)
  800ccc:	d9000817 	ldw	r4,32(sp)
  800cd0:	014000c4 	movi	r5,3
  800cd4:	08008400 	call	800840 <to_hex>

			if (is_all){
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800cd8:	81c00217 	ldw	r7,8(r16)
  800cdc:	81800117 	ldw	r6,4(r16)
  800ce0:	81400017 	ldw	r5,0(r16)

			to_hex(x, 3, hexbuffers[0]);
			to_hex(y, 3, hexbuffers[1]);
			to_hex(z, 3, hexbuffers[2]);

			if (is_all){
  800ce4:	9000041e 	bne	r18,zero,800cf8 <parse_request+0x138>
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800ce8:	01002034 	movhi	r4,128
  800cec:	21154f04 	addi	r4,r4,21820
  800cf0:	0804e280 	call	804e28 <alt_printf>
  800cf4:	00000b06 	br	800d24 <parse_request+0x164>
			}
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800cf8:	01002034 	movhi	r4,128
  800cfc:	21155504 	addi	r4,r4,21844
  800d00:	0804e280 	call	804e28 <alt_printf>
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;
  800d04:	04000044 	movi	r16,1
  800d08:	00000106 	br	800d10 <parse_request+0x150>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;
  800d0c:	0021883a 	mov	r16,zero
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  800d10:	01402034 	movhi	r5,128
  800d14:	29555b04 	addi	r5,r5,21868
  800d18:	8809883a 	mov	r4,r17
  800d1c:	0803a9c0 	call	803a9c <strcmp>
  800d20:	1000261e 	bne	r2,zero,800dbc <parse_request+0x1fc>
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800d24:	d120e317 	ldw	r4,-31860(gp)
  800d28:	d9400a04 	addi	r5,sp,40
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800d2c:	04002034 	movhi	r16,128
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800d30:	08052540 	call	805254 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800d34:	d120e317 	ldw	r4,-31860(gp)
  800d38:	d9400904 	addi	r5,sp,36
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800d3c:	84182504 	addi	r16,r16,24724
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800d40:	08052ac0 	call	8052ac <alt_up_accelerometer_spi_read_y_axis>
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800d44:	d120e317 	ldw	r4,-31860(gp)
  800d48:	d9400804 	addi	r5,sp,32
  800d4c:	08053040 	call	805304 <alt_up_accelerometer_spi_read_z_axis>

		to_hex(x, 3, hexbuffers[0]);
  800d50:	81800017 	ldw	r6,0(r16)
  800d54:	d9000a17 	ldw	r4,40(sp)
  800d58:	014000c4 	movi	r5,3
  800d5c:	08008400 	call	800840 <to_hex>
		to_hex(y, 3, hexbuffers[1]);
  800d60:	81800117 	ldw	r6,4(r16)
  800d64:	d9000917 	ldw	r4,36(sp)
  800d68:	014000c4 	movi	r5,3
  800d6c:	08008400 	call	800840 <to_hex>
		to_hex(z, 3, hexbuffers[2]);
  800d70:	81800217 	ldw	r6,8(r16)
  800d74:	d9000817 	ldw	r4,32(sp)
  800d78:	014000c4 	movi	r5,3
  800d7c:	08008400 	call	800840 <to_hex>

		if (is_all){
  800d80:	9000071e 	bne	r18,zero,800da0 <parse_request+0x1e0>
			printf("ACCRAW X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800d84:	81c00217 	ldw	r7,8(r16)
  800d88:	81800117 	ldw	r6,4(r16)
  800d8c:	81400017 	ldw	r5,0(r16)
  800d90:	01002034 	movhi	r4,128
  800d94:	21155d04 	addi	r4,r4,21876
  800d98:	08038e80 	call	8038e8 <printf>
  800d9c:	00000c06 	br	800dd0 <parse_request+0x210>
		}
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800da0:	81c00217 	ldw	r7,8(r16)
  800da4:	81800117 	ldw	r6,4(r16)
  800da8:	81400017 	ldw	r5,0(r16)
  800dac:	01002034 	movhi	r4,128
  800db0:	21156204 	addi	r4,r4,21896
  800db4:	08038e80 	call	8038e8 <printf>
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;
  800db8:	04000044 	movi	r16,1
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800dbc:	01402034 	movhi	r5,128
  800dc0:	29556804 	addi	r5,r5,21920
  800dc4:	8809883a 	mov	r4,r17
  800dc8:	0803a9c0 	call	803a9c <strcmp>
  800dcc:	10000e1e 	bne	r2,zero,800e08 <parse_request+0x248>

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800dd0:	00804034 	movhi	r2,256
  800dd4:	10847404 	addi	r2,r2,4560
  800dd8:	11400037 	ldwio	r5,0(r2)
  800ddc:	014a303a 	nor	r5,zero,r5

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
  800de0:	294000cc 	andi	r5,r5,3

		if (is_all){
  800de4:	9000041e 	bne	r18,zero,800df8 <parse_request+0x238>
			alt_printf("BUTTON %x ", button);
  800de8:	01002034 	movhi	r4,128
  800dec:	21156a04 	addi	r4,r4,21928
  800df0:	0804e280 	call	804e28 <alt_printf>
  800df4:	00000906 	br	800e1c <parse_request+0x25c>
		}
		else{
			alt_printf("K BUTTON %x 0\n", button);
  800df8:	01002034 	movhi	r4,128
  800dfc:	21156d04 	addi	r4,r4,21940
  800e00:	0804e280 	call	804e28 <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
  800e04:	04000044 	movi	r16,1
		else{
			alt_printf("K BUTTON %x 0\n", button);
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  800e08:	01402034 	movhi	r5,128
  800e0c:	29558704 	addi	r5,r5,22044
  800e10:	8809883a 	mov	r4,r17
  800e14:	0803a9c0 	call	803a9c <strcmp>
  800e18:	10001f1e 	bne	r2,zero,800e98 <parse_request+0x2d8>
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800e1c:	00804034 	movhi	r2,256
  800e20:	10847804 	addi	r2,r2,4576
  800e24:	14000037 	ldwio	r16,0(r2)
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800e28:	00802034 	movhi	r2,128
  800e2c:	10982504 	addi	r2,r2,24724
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800e30:	0420303a 	nor	r16,zero,r16
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800e34:	11800017 	ldw	r6,0(r2)
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
  800e38:	8400ffcc 	andi	r16,r16,1023
		to_hex(switches, 3, hexbuffers[0]);
  800e3c:	014000c4 	movi	r5,3
  800e40:	8009883a 	mov	r4,r16
  800e44:	08008400 	call	800840 <to_hex>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
  800e48:	800b883a 	mov	r5,r16

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);

		if (is_all){
  800e4c:	9000071e 	bne	r18,zero,800e6c <parse_request+0x2ac>
			alt_printf("SWITCH %x ", switches);
  800e50:	01002034 	movhi	r4,128
  800e54:	21157104 	addi	r4,r4,21956
  800e58:	0804e280 	call	804e28 <alt_printf>

	}

	//Saves unnecessary comparisons
	if (is_all){
		alt_printf(" 0\n");
  800e5c:	01002034 	movhi	r4,128
  800e60:	21157404 	addi	r4,r4,21968
  800e64:	0804e280 	call	804e28 <alt_printf>
		return;
  800e68:	00008706 	br	801088 <parse_request+0x4c8>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
		}
		else{
			alt_printf("K SWITCH %x 0\n", switches);
  800e6c:	01002034 	movhi	r4,128
  800e70:	21157504 	addi	r4,r4,21972
  800e74:	0804e280 	call	804e28 <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;
  800e78:	04000044 	movi	r16,1
  800e7c:	00000606 	br	800e98 <parse_request+0x2d8>
			debug = (int) strtol(tokens[2], 0, 16);
			throw_code(&"DEBUG", 0);
			matched = 1;
		}

	if (!matched){
  800e80:	8000811e 	bne	r16,zero,801088 <parse_request+0x4c8>
		throw_code(&"ERR", 2);
  800e84:	01400084 	movi	r5,2
  800e88:	01002034 	movhi	r4,128
  800e8c:	21154b04 	addi	r4,r4,21804
  800e90:	08009140 	call	800914 <throw_code>
  800e94:	00007c06 	br	801088 <parse_request+0x4c8>
	}


	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){
  800e98:	01402034 	movhi	r5,128
  800e9c:	29557b04 	addi	r5,r5,21996
  800ea0:	8809883a 	mov	r4,r17
  800ea4:	0803a9c0 	call	803a9c <strcmp>
  800ea8:	10002b1e 	bne	r2,zero,800f58 <parse_request+0x398>

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800eac:	d120e017 	ldw	r4,-31872(gp)
  800eb0:	01801904 	movi	r6,100
  800eb4:	000b883a 	mov	r5,zero
  800eb8:	08036500 	call	803650 <memset>
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800ebc:	d9400217 	ldw	r5,8(sp)
  800ec0:	d120e017 	ldw	r4,-31872(gp)
  800ec4:	01801904 	movi	r6,100
  800ec8:	0803b1c0 	call	803b1c <strncpy>
		disp_length = strlen(disp_buf);
  800ecc:	d420e017 	ldw	r16,-31872(gp)
  800ed0:	8009883a 	mov	r4,r16
  800ed4:	0803b000 	call	803b00 <strlen>
		if(strlen(disp_buf)>6){
  800ed8:	8009883a 	mov	r4,r16

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_length = strlen(disp_buf);
  800edc:	1025883a 	mov	r18,r2
  800ee0:	d0a0dc15 	stw	r2,-31888(gp)
		if(strlen(disp_buf)>6){
  800ee4:	0803b000 	call	803b00 <strlen>
  800ee8:	00c00184 	movi	r3,6
  800eec:	1880112e 	bgeu	r3,r2,800f34 <parse_request+0x374>

			memmove((disp_buf+5),disp_buf,disp_length);
  800ef0:	800b883a 	mov	r5,r16
  800ef4:	81000144 	addi	r4,r16,5
  800ef8:	900d883a 	mov	r6,r18
  800efc:	08035f00 	call	8035f0 <memmove>
			disp_buf[0] = '_';
  800f00:	008017c4 	movi	r2,95
  800f04:	80800005 	stb	r2,0(r16)
			disp_buf[1] = '_';
  800f08:	d0e0e017 	ldw	r3,-31872(gp)
			disp_buf[2] = '_';
			disp_buf[3] = '_';
			disp_buf[4] = '_';
			strcat(disp_buf, &"_____");
  800f0c:	01402034 	movhi	r5,128
  800f10:	29557904 	addi	r5,r5,21988
		disp_length = strlen(disp_buf);
		if(strlen(disp_buf)>6){

			memmove((disp_buf+5),disp_buf,disp_length);
			disp_buf[0] = '_';
			disp_buf[1] = '_';
  800f14:	18800045 	stb	r2,1(r3)
			disp_buf[2] = '_';
  800f18:	d0e0e017 	ldw	r3,-31872(gp)
  800f1c:	18800085 	stb	r2,2(r3)
			disp_buf[3] = '_';
  800f20:	d0e0e017 	ldw	r3,-31872(gp)
  800f24:	188000c5 	stb	r2,3(r3)
			disp_buf[4] = '_';
  800f28:	d120e017 	ldw	r4,-31872(gp)
  800f2c:	20800105 	stb	r2,4(r4)
			strcat(disp_buf, &"_____");
  800f30:	0803a600 	call	803a60 <strcat>
		}
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800f34:	d120e017 	ldw	r4,-31872(gp)
			disp_buf[2] = '_';
			disp_buf[3] = '_';
			disp_buf[4] = '_';
			strcat(disp_buf, &"_____");
		}
		disp_offset = 0;
  800f38:	d020dd15 	stw	zero,-31884(gp)
	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
  800f3c:	04000044 	movi	r16,1
			disp_buf[3] = '_';
			disp_buf[4] = '_';
			strcat(disp_buf, &"_____");
		}
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800f40:	0803b000 	call	803b00 <strlen>

		throw_code(&"HEXTEXT", 0);
  800f44:	01002034 	movhi	r4,128
  800f48:	000b883a 	mov	r5,zero
  800f4c:	21157b04 	addi	r4,r4,21996
			disp_buf[3] = '_';
			disp_buf[4] = '_';
			strcat(disp_buf, &"_____");
		}
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800f50:	d0a0dc15 	stw	r2,-31888(gp)

		throw_code(&"HEXTEXT", 0);
  800f54:	08009140 	call	800914 <throw_code>
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){
  800f58:	01402034 	movhi	r5,128
  800f5c:	29557d04 	addi	r5,r5,22004
  800f60:	8809883a 	mov	r4,r17
  800f64:	0803a9c0 	call	803a9c <strcmp>
  800f68:	10000d1e 	bne	r2,zero,800fa0 <parse_request+0x3e0>

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800f6c:	d9000217 	ldw	r4,8(sp)
  800f70:	01800404 	movi	r6,16
  800f74:	000b883a 	mov	r5,zero
  800f78:	0803f080 	call	803f08 <strtol>
		IOWR(LED_BASE, 0, led_val);
  800f7c:	00c04034 	movhi	r3,256
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800f80:	d0a0db15 	stw	r2,-31892(gp)
		IOWR(LED_BASE, 0, led_val);
  800f84:	18c49404 	addi	r3,r3,4688
  800f88:	18800035 	stwio	r2,0(r3)
		throw_code(&"LEDWRITE", 0);
  800f8c:	01002034 	movhi	r4,128
  800f90:	000b883a 	mov	r5,zero
  800f94:	21157d04 	addi	r4,r4,22004
  800f98:	08009140 	call	800914 <throw_code>
		matched = 1;
  800f9c:	04000044 	movi	r16,1

	}
	if (strcmp(tokens[1], &"ACCQUAL") == 0){
  800fa0:	01402034 	movhi	r5,128
  800fa4:	29558004 	addi	r5,r5,22016
  800fa8:	8809883a 	mov	r4,r17
  800fac:	0803a9c0 	call	803a9c <strcmp>
  800fb0:	1000131e 	bne	r2,zero,801000 <parse_request+0x440>

			//alt_printf("Tried to write LEDWRITE");
			quality = (int) strtol(tokens[2], 0, 10);
  800fb4:	d9000217 	ldw	r4,8(sp)
  800fb8:	01800284 	movi	r6,10
  800fbc:	000b883a 	mov	r5,zero
  800fc0:	0803f080 	call	803f08 <strtol>
  800fc4:	d0a00015 	stw	r2,-32768(gp)

			if (quality<0) {
  800fc8:	1000020e 	bge	r2,zero,800fd4 <parse_request+0x414>
				quality = 0;
  800fcc:	d0200015 	stw	zero,-32768(gp)
  800fd0:	00000306 	br	800fe0 <parse_request+0x420>
				throw_code(&"ACCQUAL", 1);
			}
			else if (quality > RING_SIZE){
  800fd4:	00c00ec4 	movi	r3,59
  800fd8:	1880030e 	bge	r3,r2,800fe8 <parse_request+0x428>
				quality = RING_SIZE;
  800fdc:	d0e00015 	stw	r3,-32768(gp)
				throw_code(&"ACCQUAL", 1);
  800fe0:	01400044 	movi	r5,1
  800fe4:	00000106 	br	800fec <parse_request+0x42c>
			}
			else {
				throw_code(&"ACCQUAL", 0);
  800fe8:	000b883a 	mov	r5,zero
  800fec:	01002034 	movhi	r4,128
  800ff0:	21158004 	addi	r4,r4,22016
  800ff4:	08009140 	call	800914 <throw_code>
			}

			coeffs_to_fixed();

			matched = 1;
  800ff8:	04000044 	movi	r16,1
			}
			else {
				throw_code(&"ACCQUAL", 0);
			}

			coeffs_to_fixed();
  800ffc:	0800ab00 	call	800ab0 <coeffs_to_fixed>

			matched = 1;

		}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){
  801000:	dc400117 	ldw	r17,4(sp)
  801004:	01402034 	movhi	r5,128
  801008:	29558204 	addi	r5,r5,22024
  80100c:	8809883a 	mov	r4,r17
  801010:	0803a9c0 	call	803a9c <strcmp>
  801014:	10000e1e 	bne	r2,zero,801050 <parse_request+0x490>

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
  801018:	d120e417 	ldw	r4,-31856(gp)
  80101c:	01801904 	movi	r6,100
  801020:	000b883a 	mov	r5,zero
  801024:	08036500 	call	803650 <memset>
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  801028:	d9400217 	ldw	r5,8(sp)
  80102c:	d120e417 	ldw	r4,-31856(gp)
  801030:	01801904 	movi	r6,100
		led_offset = 0;
		throw_code(&"LEDFLASH", 0);
		matched = 1;
  801034:	04000044 	movi	r16,1
		}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  801038:	0803b1c0 	call	803b1c <strncpy>
		led_offset = 0;
		throw_code(&"LEDFLASH", 0);
  80103c:	01002034 	movhi	r4,128
  801040:	000b883a 	mov	r5,zero
  801044:	21158204 	addi	r4,r4,22024
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
		led_offset = 0;
  801048:	d0200115 	stw	zero,-32764(gp)
		throw_code(&"LEDFLASH", 0);
  80104c:	08009140 	call	800914 <throw_code>
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){
  801050:	01402034 	movhi	r5,128
  801054:	29558504 	addi	r5,r5,22036
  801058:	8809883a 	mov	r4,r17
  80105c:	0803a9c0 	call	803a9c <strcmp>
  801060:	103f871e 	bne	r2,zero,800e80 <__alt_data_end+0xff800e80>

			debug = (int) strtol(tokens[2], 0, 16);
  801064:	d9000217 	ldw	r4,8(sp)
  801068:	000b883a 	mov	r5,zero
  80106c:	01800404 	movi	r6,16
  801070:	0803f080 	call	803f08 <strtol>
			throw_code(&"DEBUG", 0);
  801074:	01002034 	movhi	r4,128
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){

			debug = (int) strtol(tokens[2], 0, 16);
  801078:	d0a0da15 	stw	r2,-31896(gp)
			throw_code(&"DEBUG", 0);
  80107c:	000b883a 	mov	r5,zero
  801080:	21158504 	addi	r4,r4,22036
  801084:	003f8206 	br	800e90 <__alt_data_end+0xff800e90>
	if (!matched){
		throw_code(&"ERR", 2);
		matched = 1;
	}

}
  801088:	dfc01017 	ldw	ra,64(sp)
  80108c:	dd000f17 	ldw	r20,60(sp)
  801090:	dcc00e17 	ldw	r19,56(sp)
  801094:	dc800d17 	ldw	r18,52(sp)
  801098:	dc400c17 	ldw	r17,48(sp)
  80109c:	dc000b17 	ldw	r16,44(sp)
  8010a0:	dec01104 	addi	sp,sp,68
  8010a4:	f800283a 	ret

008010a8 <hw_x_read>:
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
}
alt_32 hw_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_X_BASE);
}
  8010a8:	00804034 	movhi	r2,256
  8010ac:	10846c04 	addi	r2,r2,4528
  8010b0:	10800037 	ldwio	r2,0(r2)
  8010b4:	f800283a 	ret

008010b8 <hw_y_read>:

alt_32 hw_y_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_Y_BASE);
}
  8010b8:	00804034 	movhi	r2,256
  8010bc:	10846404 	addi	r2,r2,4496
  8010c0:	10800037 	ldwio	r2,0(r2)
  8010c4:	f800283a 	ret

008010c8 <main>:

//Main function
int main() {
  8010c8:	defffd04 	addi	sp,sp,-12
  8010cc:	dfc00215 	stw	ra,8(sp)
  8010d0:	dc400115 	stw	r17,4(sp)
  8010d4:	dc000015 	stw	r16,0(sp)


	//Initialize fixed point coefficients
	coeffs_to_fixed();
  8010d8:	0800ab00 	call	800ab0 <coeffs_to_fixed>

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  8010dc:	01001904 	movi	r4,100
  8010e0:	08035c80 	call	8035c8 <malloc>
	strcpy(disp_buf, "______");
  8010e4:	01402034 	movhi	r5,128
  8010e8:	29558904 	addi	r5,r5,22052
  8010ec:	1009883a 	mov	r4,r2

	//Initialize fixed point coefficients
	coeffs_to_fixed();

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  8010f0:	d0a0e015 	stw	r2,-31872(gp)
	strcpy(disp_buf, "______");
  8010f4:	0803ad40 	call	803ad4 <strcpy>
	clr_disp();
  8010f8:	080060c0 	call	80060c <clr_disp>
	disp_timer_init(disp_timer_isr);
  8010fc:	01002034 	movhi	r4,128
  801100:	21017504 	addi	r4,r4,1492
  801104:	08007600 	call	800760 <disp_timer_init>
	disp_length = 6;
  801108:	00800184 	movi	r2,6

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  80110c:	01001904 	movi	r4,100
	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
	strcpy(disp_buf, "______");
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;
  801110:	d0a0dc15 	stw	r2,-31888(gp)

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  801114:	08035c80 	call	8035c8 <malloc>
	led_timer_init(led_timer_isr);
  801118:	01002034 	movhi	r4,128
  80111c:	21006f04 	addi	r4,r4,444
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  801120:	d0a0e415 	stw	r2,-31856(gp)
	led_timer_init(led_timer_isr);
  801124:	08007d00 	call	8007d0 <led_timer_init>
	led_offset = -1;
  801128:	00bfffc4 	movi	r2,-1
  80112c:	d0a00115 	stw	r2,-32764(gp)
	IOWR(LED_BASE, 0, 0);
  801130:	00804034 	movhi	r2,256
  801134:	10849404 	addi	r2,r2,4688
  801138:	10000035 	stwio	zero,0(r2)


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  80113c:	01001004 	movi	r4,64
  801140:	08035c80 	call	8035c8 <malloc>

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  801144:	01000204 	movi	r4,8
	led_offset = -1;
	IOWR(LED_BASE, 0, 0);


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  801148:	d0a0df15 	stw	r2,-31876(gp)

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  80114c:	04002034 	movhi	r16,128
  801150:	08035c80 	call	8035c8 <malloc>
  801154:	84182504 	addi	r16,r16,24724
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  801158:	01000204 	movi	r4,8

	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  80115c:	80800015 	stw	r2,0(r16)
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  801160:	08035c80 	call	8035c8 <malloc>
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  801164:	01000204 	movi	r4,8
	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  801168:	80800115 	stw	r2,4(r16)
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  80116c:	08035c80 	call	8035c8 <malloc>


	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  801170:	01001904 	movi	r4,100
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  801174:	80800215 	stw	r2,8(r16)


	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  801178:	08035c80 	call	8035c8 <malloc>
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  80117c:	01801904 	movi	r6,100
  801180:	000b883a 	mov	r5,zero
  801184:	1009883a 	mov	r4,r2
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));


	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  801188:	d0a0e015 	stw	r2,-31872(gp)
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  80118c:	08036500 	call	803650 <memset>

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  801190:	01002034 	movhi	r4,128
  801194:	21158b04 	addi	r4,r4,22060
  801198:	08051fc0 	call	8051fc <alt_up_accelerometer_spi_open_dev>


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  80119c:	01002034 	movhi	r4,128
  8011a0:	21026204 	addi	r4,r4,2440
	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  8011a4:	d0a0e315 	stw	r2,-31860(gp)


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  8011a8:	08006f00 	call	8006f0 <acc_timer_init>
	alt_timestamp_start();
  8011ac:	08051640 	call	805164 <alt_timestamp_start>

	//Command response loop
	while(1){
		read_request(cmdbuffer);
  8011b0:	d120df17 	ldw	r4,-31876(gp)
  8011b4:	080065c0 	call	80065c <read_request>
		parse_request(cmdbuffer);
  8011b8:	d120df17 	ldw	r4,-31876(gp)
  8011bc:	0800bc00 	call	800bc0 <parse_request>

		//Request response timing: first char received to last char sent
		if (debug){
  8011c0:	d0a0da17 	ldw	r2,-31896(gp)
  8011c4:	103ffa26 	beq	r2,zero,8011b0 <__alt_data_end+0xff8011b0>
			printf("Response time (us) : %i \n",(alt_timestamp()-latency)/(alt_timestamp_freq()/1000000));
  8011c8:	08051a80 	call	8051a8 <alt_timestamp>
  8011cc:	d460e117 	ldw	r17,-31868(gp)
  8011d0:	d120e217 	ldw	r4,-31864(gp)
  8011d4:	1463c83a 	sub	r17,r2,r17
  8011d8:	1907c83a 	sub	r3,r3,r4
  8011dc:	1445803a 	cmpltu	r2,r2,r17
  8011e0:	18a1c83a 	sub	r16,r3,r2
  8011e4:	08051f40 	call	8051f4 <alt_timestamp_freq>
  8011e8:	014003f4 	movhi	r5,15
  8011ec:	29509004 	addi	r5,r5,16960
  8011f0:	1009883a 	mov	r4,r2
  8011f4:	08019180 	call	801918 <__udivsi3>
  8011f8:	8809883a 	mov	r4,r17
  8011fc:	800b883a 	mov	r5,r16
  801200:	100d883a 	mov	r6,r2
  801204:	000f883a 	mov	r7,zero
  801208:	08012240 	call	801224 <__udivdi3>
  80120c:	01002034 	movhi	r4,128
  801210:	100b883a 	mov	r5,r2
  801214:	180d883a 	mov	r6,r3
  801218:	21159104 	addi	r4,r4,22084
  80121c:	08038e80 	call	8038e8 <printf>
  801220:	003fe306 	br	8011b0 <__alt_data_end+0xff8011b0>

00801224 <__udivdi3>:
  801224:	defff404 	addi	sp,sp,-48
  801228:	dcc00515 	stw	r19,20(sp)
  80122c:	dc000215 	stw	r16,8(sp)
  801230:	dfc00b15 	stw	ra,44(sp)
  801234:	df000a15 	stw	fp,40(sp)
  801238:	ddc00915 	stw	r23,36(sp)
  80123c:	dd800815 	stw	r22,32(sp)
  801240:	dd400715 	stw	r21,28(sp)
  801244:	dd000615 	stw	r20,24(sp)
  801248:	dc800415 	stw	r18,16(sp)
  80124c:	dc400315 	stw	r17,12(sp)
  801250:	2027883a 	mov	r19,r4
  801254:	2821883a 	mov	r16,r5
  801258:	3800461e 	bne	r7,zero,801374 <__udivdi3+0x150>
  80125c:	3023883a 	mov	r17,r6
  801260:	2025883a 	mov	r18,r4
  801264:	2980572e 	bgeu	r5,r6,8013c4 <__udivdi3+0x1a0>
  801268:	00bfffd4 	movui	r2,65535
  80126c:	282d883a 	mov	r22,r5
  801270:	1180b236 	bltu	r2,r6,80153c <__udivdi3+0x318>
  801274:	00803fc4 	movi	r2,255
  801278:	1185803a 	cmpltu	r2,r2,r6
  80127c:	100490fa 	slli	r2,r2,3
  801280:	3086d83a 	srl	r3,r6,r2
  801284:	01002034 	movhi	r4,128
  801288:	21159784 	addi	r4,r4,22110
  80128c:	20c7883a 	add	r3,r4,r3
  801290:	18c00003 	ldbu	r3,0(r3)
  801294:	1885883a 	add	r2,r3,r2
  801298:	00c00804 	movi	r3,32
  80129c:	1887c83a 	sub	r3,r3,r2
  8012a0:	18000526 	beq	r3,zero,8012b8 <__udivdi3+0x94>
  8012a4:	80e0983a 	sll	r16,r16,r3
  8012a8:	9884d83a 	srl	r2,r19,r2
  8012ac:	30e2983a 	sll	r17,r6,r3
  8012b0:	98e4983a 	sll	r18,r19,r3
  8012b4:	142cb03a 	or	r22,r2,r16
  8012b8:	882ad43a 	srli	r21,r17,16
  8012bc:	b009883a 	mov	r4,r22
  8012c0:	8d3fffcc 	andi	r20,r17,65535
  8012c4:	a80b883a 	mov	r5,r21
  8012c8:	080197c0 	call	80197c <__umodsi3>
  8012cc:	b009883a 	mov	r4,r22
  8012d0:	a80b883a 	mov	r5,r21
  8012d4:	1027883a 	mov	r19,r2
  8012d8:	08019180 	call	801918 <__udivsi3>
  8012dc:	100b883a 	mov	r5,r2
  8012e0:	a009883a 	mov	r4,r20
  8012e4:	102d883a 	mov	r22,r2
  8012e8:	08019d40 	call	8019d4 <__mulsi3>
  8012ec:	9826943a 	slli	r19,r19,16
  8012f0:	9006d43a 	srli	r3,r18,16
  8012f4:	1cc6b03a 	or	r3,r3,r19
  8012f8:	1880052e 	bgeu	r3,r2,801310 <__udivdi3+0xec>
  8012fc:	1c47883a 	add	r3,r3,r17
  801300:	b13fffc4 	addi	r4,r22,-1
  801304:	1c400136 	bltu	r3,r17,80130c <__udivdi3+0xe8>
  801308:	18814236 	bltu	r3,r2,801814 <__udivdi3+0x5f0>
  80130c:	202d883a 	mov	r22,r4
  801310:	18a1c83a 	sub	r16,r3,r2
  801314:	8009883a 	mov	r4,r16
  801318:	a80b883a 	mov	r5,r21
  80131c:	080197c0 	call	80197c <__umodsi3>
  801320:	1027883a 	mov	r19,r2
  801324:	8009883a 	mov	r4,r16
  801328:	a80b883a 	mov	r5,r21
  80132c:	9826943a 	slli	r19,r19,16
  801330:	08019180 	call	801918 <__udivsi3>
  801334:	100b883a 	mov	r5,r2
  801338:	a009883a 	mov	r4,r20
  80133c:	94bfffcc 	andi	r18,r18,65535
  801340:	1021883a 	mov	r16,r2
  801344:	94e4b03a 	or	r18,r18,r19
  801348:	08019d40 	call	8019d4 <__mulsi3>
  80134c:	9080052e 	bgeu	r18,r2,801364 <__udivdi3+0x140>
  801350:	8ca5883a 	add	r18,r17,r18
  801354:	80ffffc4 	addi	r3,r16,-1
  801358:	94410c36 	bltu	r18,r17,80178c <__udivdi3+0x568>
  80135c:	90810b2e 	bgeu	r18,r2,80178c <__udivdi3+0x568>
  801360:	843fff84 	addi	r16,r16,-2
  801364:	b004943a 	slli	r2,r22,16
  801368:	0007883a 	mov	r3,zero
  80136c:	1404b03a 	or	r2,r2,r16
  801370:	00005e06 	br	8014ec <__udivdi3+0x2c8>
  801374:	29c05b36 	bltu	r5,r7,8014e4 <__udivdi3+0x2c0>
  801378:	00bfffd4 	movui	r2,65535
  80137c:	11c0672e 	bgeu	r2,r7,80151c <__udivdi3+0x2f8>
  801380:	00804034 	movhi	r2,256
  801384:	10bfffc4 	addi	r2,r2,-1
  801388:	11c10a36 	bltu	r2,r7,8017b4 <__udivdi3+0x590>
  80138c:	00800404 	movi	r2,16
  801390:	3886d83a 	srl	r3,r7,r2
  801394:	01002034 	movhi	r4,128
  801398:	21159784 	addi	r4,r4,22110
  80139c:	20c7883a 	add	r3,r4,r3
  8013a0:	18c00003 	ldbu	r3,0(r3)
  8013a4:	05c00804 	movi	r23,32
  8013a8:	1885883a 	add	r2,r3,r2
  8013ac:	b8afc83a 	sub	r23,r23,r2
  8013b0:	b800671e 	bne	r23,zero,801550 <__udivdi3+0x32c>
  8013b4:	3c010536 	bltu	r7,r16,8017cc <__udivdi3+0x5a8>
  8013b8:	9985403a 	cmpgeu	r2,r19,r6
  8013bc:	0007883a 	mov	r3,zero
  8013c0:	00004a06 	br	8014ec <__udivdi3+0x2c8>
  8013c4:	3000041e 	bne	r6,zero,8013d8 <__udivdi3+0x1b4>
  8013c8:	000b883a 	mov	r5,zero
  8013cc:	01000044 	movi	r4,1
  8013d0:	08019180 	call	801918 <__udivsi3>
  8013d4:	1023883a 	mov	r17,r2
  8013d8:	00bfffd4 	movui	r2,65535
  8013dc:	1440532e 	bgeu	r2,r17,80152c <__udivdi3+0x308>
  8013e0:	00804034 	movhi	r2,256
  8013e4:	10bfffc4 	addi	r2,r2,-1
  8013e8:	1440f436 	bltu	r2,r17,8017bc <__udivdi3+0x598>
  8013ec:	00800404 	movi	r2,16
  8013f0:	8886d83a 	srl	r3,r17,r2
  8013f4:	01002034 	movhi	r4,128
  8013f8:	21159784 	addi	r4,r4,22110
  8013fc:	20c7883a 	add	r3,r4,r3
  801400:	18c00003 	ldbu	r3,0(r3)
  801404:	1885883a 	add	r2,r3,r2
  801408:	00c00804 	movi	r3,32
  80140c:	1887c83a 	sub	r3,r3,r2
  801410:	1800a51e 	bne	r3,zero,8016a8 <__udivdi3+0x484>
  801414:	882ad43a 	srli	r21,r17,16
  801418:	8461c83a 	sub	r16,r16,r17
  80141c:	8d3fffcc 	andi	r20,r17,65535
  801420:	00c00044 	movi	r3,1
  801424:	a80b883a 	mov	r5,r21
  801428:	8009883a 	mov	r4,r16
  80142c:	d8c00115 	stw	r3,4(sp)
  801430:	080197c0 	call	80197c <__umodsi3>
  801434:	a80b883a 	mov	r5,r21
  801438:	8009883a 	mov	r4,r16
  80143c:	1027883a 	mov	r19,r2
  801440:	08019180 	call	801918 <__udivsi3>
  801444:	a00b883a 	mov	r5,r20
  801448:	1009883a 	mov	r4,r2
  80144c:	102d883a 	mov	r22,r2
  801450:	08019d40 	call	8019d4 <__mulsi3>
  801454:	9826943a 	slli	r19,r19,16
  801458:	900ed43a 	srli	r7,r18,16
  80145c:	d8c00117 	ldw	r3,4(sp)
  801460:	3cceb03a 	or	r7,r7,r19
  801464:	3880052e 	bgeu	r7,r2,80147c <__udivdi3+0x258>
  801468:	3c4f883a 	add	r7,r7,r17
  80146c:	b13fffc4 	addi	r4,r22,-1
  801470:	3c400136 	bltu	r7,r17,801478 <__udivdi3+0x254>
  801474:	3880e436 	bltu	r7,r2,801808 <__udivdi3+0x5e4>
  801478:	202d883a 	mov	r22,r4
  80147c:	38a1c83a 	sub	r16,r7,r2
  801480:	8009883a 	mov	r4,r16
  801484:	a80b883a 	mov	r5,r21
  801488:	d8c00115 	stw	r3,4(sp)
  80148c:	080197c0 	call	80197c <__umodsi3>
  801490:	1027883a 	mov	r19,r2
  801494:	8009883a 	mov	r4,r16
  801498:	a80b883a 	mov	r5,r21
  80149c:	9826943a 	slli	r19,r19,16
  8014a0:	08019180 	call	801918 <__udivsi3>
  8014a4:	a00b883a 	mov	r5,r20
  8014a8:	1009883a 	mov	r4,r2
  8014ac:	94bfffcc 	andi	r18,r18,65535
  8014b0:	1021883a 	mov	r16,r2
  8014b4:	94e4b03a 	or	r18,r18,r19
  8014b8:	08019d40 	call	8019d4 <__mulsi3>
  8014bc:	d8c00117 	ldw	r3,4(sp)
  8014c0:	9080052e 	bgeu	r18,r2,8014d8 <__udivdi3+0x2b4>
  8014c4:	8ca5883a 	add	r18,r17,r18
  8014c8:	813fffc4 	addi	r4,r16,-1
  8014cc:	9440ad36 	bltu	r18,r17,801784 <__udivdi3+0x560>
  8014d0:	9080ac2e 	bgeu	r18,r2,801784 <__udivdi3+0x560>
  8014d4:	843fff84 	addi	r16,r16,-2
  8014d8:	b004943a 	slli	r2,r22,16
  8014dc:	1404b03a 	or	r2,r2,r16
  8014e0:	00000206 	br	8014ec <__udivdi3+0x2c8>
  8014e4:	0007883a 	mov	r3,zero
  8014e8:	0005883a 	mov	r2,zero
  8014ec:	dfc00b17 	ldw	ra,44(sp)
  8014f0:	df000a17 	ldw	fp,40(sp)
  8014f4:	ddc00917 	ldw	r23,36(sp)
  8014f8:	dd800817 	ldw	r22,32(sp)
  8014fc:	dd400717 	ldw	r21,28(sp)
  801500:	dd000617 	ldw	r20,24(sp)
  801504:	dcc00517 	ldw	r19,20(sp)
  801508:	dc800417 	ldw	r18,16(sp)
  80150c:	dc400317 	ldw	r17,12(sp)
  801510:	dc000217 	ldw	r16,8(sp)
  801514:	dec00c04 	addi	sp,sp,48
  801518:	f800283a 	ret
  80151c:	00803fc4 	movi	r2,255
  801520:	11c5803a 	cmpltu	r2,r2,r7
  801524:	100490fa 	slli	r2,r2,3
  801528:	003f9906 	br	801390 <__alt_data_end+0xff801390>
  80152c:	00803fc4 	movi	r2,255
  801530:	1445803a 	cmpltu	r2,r2,r17
  801534:	100490fa 	slli	r2,r2,3
  801538:	003fad06 	br	8013f0 <__alt_data_end+0xff8013f0>
  80153c:	00804034 	movhi	r2,256
  801540:	10bfffc4 	addi	r2,r2,-1
  801544:	11809f36 	bltu	r2,r6,8017c4 <__udivdi3+0x5a0>
  801548:	00800404 	movi	r2,16
  80154c:	003f4c06 	br	801280 <__alt_data_end+0xff801280>
  801550:	3dce983a 	sll	r7,r7,r23
  801554:	30b8d83a 	srl	fp,r6,r2
  801558:	80a2d83a 	srl	r17,r16,r2
  80155c:	35cc983a 	sll	r6,r6,r23
  801560:	3f38b03a 	or	fp,r7,fp
  801564:	e024d43a 	srli	r18,fp,16
  801568:	9884d83a 	srl	r2,r19,r2
  80156c:	85e0983a 	sll	r16,r16,r23
  801570:	8809883a 	mov	r4,r17
  801574:	900b883a 	mov	r5,r18
  801578:	d9800015 	stw	r6,0(sp)
  80157c:	1420b03a 	or	r16,r2,r16
  801580:	080197c0 	call	80197c <__umodsi3>
  801584:	900b883a 	mov	r5,r18
  801588:	8809883a 	mov	r4,r17
  80158c:	1029883a 	mov	r20,r2
  801590:	e5bfffcc 	andi	r22,fp,65535
  801594:	08019180 	call	801918 <__udivsi3>
  801598:	100b883a 	mov	r5,r2
  80159c:	b009883a 	mov	r4,r22
  8015a0:	102b883a 	mov	r21,r2
  8015a4:	08019d40 	call	8019d4 <__mulsi3>
  8015a8:	a028943a 	slli	r20,r20,16
  8015ac:	8006d43a 	srli	r3,r16,16
  8015b0:	1d06b03a 	or	r3,r3,r20
  8015b4:	1880042e 	bgeu	r3,r2,8015c8 <__udivdi3+0x3a4>
  8015b8:	1f07883a 	add	r3,r3,fp
  8015bc:	a93fffc4 	addi	r4,r21,-1
  8015c0:	1f00892e 	bgeu	r3,fp,8017e8 <__udivdi3+0x5c4>
  8015c4:	202b883a 	mov	r21,r4
  8015c8:	18a3c83a 	sub	r17,r3,r2
  8015cc:	8809883a 	mov	r4,r17
  8015d0:	900b883a 	mov	r5,r18
  8015d4:	080197c0 	call	80197c <__umodsi3>
  8015d8:	1029883a 	mov	r20,r2
  8015dc:	8809883a 	mov	r4,r17
  8015e0:	900b883a 	mov	r5,r18
  8015e4:	a028943a 	slli	r20,r20,16
  8015e8:	08019180 	call	801918 <__udivsi3>
  8015ec:	100b883a 	mov	r5,r2
  8015f0:	b009883a 	mov	r4,r22
  8015f4:	843fffcc 	andi	r16,r16,65535
  8015f8:	1023883a 	mov	r17,r2
  8015fc:	8520b03a 	or	r16,r16,r20
  801600:	08019d40 	call	8019d4 <__mulsi3>
  801604:	8080042e 	bgeu	r16,r2,801618 <__udivdi3+0x3f4>
  801608:	8721883a 	add	r16,r16,fp
  80160c:	88ffffc4 	addi	r3,r17,-1
  801610:	8700712e 	bgeu	r16,fp,8017d8 <__udivdi3+0x5b4>
  801614:	1823883a 	mov	r17,r3
  801618:	a80e943a 	slli	r7,r21,16
  80161c:	d8c00017 	ldw	r3,0(sp)
  801620:	80a1c83a 	sub	r16,r16,r2
  801624:	3c64b03a 	or	r18,r7,r17
  801628:	1d3fffcc 	andi	r20,r3,65535
  80162c:	9022d43a 	srli	r17,r18,16
  801630:	95bfffcc 	andi	r22,r18,65535
  801634:	a00b883a 	mov	r5,r20
  801638:	b009883a 	mov	r4,r22
  80163c:	182ad43a 	srli	r21,r3,16
  801640:	08019d40 	call	8019d4 <__mulsi3>
  801644:	a00b883a 	mov	r5,r20
  801648:	8809883a 	mov	r4,r17
  80164c:	1039883a 	mov	fp,r2
  801650:	08019d40 	call	8019d4 <__mulsi3>
  801654:	8809883a 	mov	r4,r17
  801658:	a80b883a 	mov	r5,r21
  80165c:	1029883a 	mov	r20,r2
  801660:	08019d40 	call	8019d4 <__mulsi3>
  801664:	a80b883a 	mov	r5,r21
  801668:	b009883a 	mov	r4,r22
  80166c:	1023883a 	mov	r17,r2
  801670:	08019d40 	call	8019d4 <__mulsi3>
  801674:	e006d43a 	srli	r3,fp,16
  801678:	1505883a 	add	r2,r2,r20
  80167c:	1887883a 	add	r3,r3,r2
  801680:	1d00022e 	bgeu	r3,r20,80168c <__udivdi3+0x468>
  801684:	00800074 	movhi	r2,1
  801688:	88a3883a 	add	r17,r17,r2
  80168c:	1804d43a 	srli	r2,r3,16
  801690:	1463883a 	add	r17,r2,r17
  801694:	84404436 	bltu	r16,r17,8017a8 <__udivdi3+0x584>
  801698:	84403e26 	beq	r16,r17,801794 <__udivdi3+0x570>
  80169c:	9005883a 	mov	r2,r18
  8016a0:	0007883a 	mov	r3,zero
  8016a4:	003f9106 	br	8014ec <__alt_data_end+0xff8014ec>
  8016a8:	88e2983a 	sll	r17,r17,r3
  8016ac:	80aed83a 	srl	r23,r16,r2
  8016b0:	80e0983a 	sll	r16,r16,r3
  8016b4:	882ad43a 	srli	r21,r17,16
  8016b8:	9884d83a 	srl	r2,r19,r2
  8016bc:	b809883a 	mov	r4,r23
  8016c0:	a80b883a 	mov	r5,r21
  8016c4:	98e4983a 	sll	r18,r19,r3
  8016c8:	142cb03a 	or	r22,r2,r16
  8016cc:	080197c0 	call	80197c <__umodsi3>
  8016d0:	b809883a 	mov	r4,r23
  8016d4:	a80b883a 	mov	r5,r21
  8016d8:	1027883a 	mov	r19,r2
  8016dc:	8d3fffcc 	andi	r20,r17,65535
  8016e0:	08019180 	call	801918 <__udivsi3>
  8016e4:	a009883a 	mov	r4,r20
  8016e8:	100b883a 	mov	r5,r2
  8016ec:	102f883a 	mov	r23,r2
  8016f0:	08019d40 	call	8019d4 <__mulsi3>
  8016f4:	9826943a 	slli	r19,r19,16
  8016f8:	b008d43a 	srli	r4,r22,16
  8016fc:	24c8b03a 	or	r4,r4,r19
  801700:	2080062e 	bgeu	r4,r2,80171c <__udivdi3+0x4f8>
  801704:	2449883a 	add	r4,r4,r17
  801708:	b8ffffc4 	addi	r3,r23,-1
  80170c:	24403c36 	bltu	r4,r17,801800 <__udivdi3+0x5dc>
  801710:	20803b2e 	bgeu	r4,r2,801800 <__udivdi3+0x5dc>
  801714:	bdffff84 	addi	r23,r23,-2
  801718:	2449883a 	add	r4,r4,r17
  80171c:	20a1c83a 	sub	r16,r4,r2
  801720:	a80b883a 	mov	r5,r21
  801724:	8009883a 	mov	r4,r16
  801728:	080197c0 	call	80197c <__umodsi3>
  80172c:	a80b883a 	mov	r5,r21
  801730:	8009883a 	mov	r4,r16
  801734:	1027883a 	mov	r19,r2
  801738:	08019180 	call	801918 <__udivsi3>
  80173c:	a009883a 	mov	r4,r20
  801740:	100b883a 	mov	r5,r2
  801744:	9826943a 	slli	r19,r19,16
  801748:	1039883a 	mov	fp,r2
  80174c:	08019d40 	call	8019d4 <__mulsi3>
  801750:	b13fffcc 	andi	r4,r22,65535
  801754:	24c8b03a 	or	r4,r4,r19
  801758:	2080062e 	bgeu	r4,r2,801774 <__udivdi3+0x550>
  80175c:	2449883a 	add	r4,r4,r17
  801760:	e0ffffc4 	addi	r3,fp,-1
  801764:	24402436 	bltu	r4,r17,8017f8 <__udivdi3+0x5d4>
  801768:	2080232e 	bgeu	r4,r2,8017f8 <__udivdi3+0x5d4>
  80176c:	e73fff84 	addi	fp,fp,-2
  801770:	2449883a 	add	r4,r4,r17
  801774:	b82e943a 	slli	r23,r23,16
  801778:	20a1c83a 	sub	r16,r4,r2
  80177c:	bf06b03a 	or	r3,r23,fp
  801780:	003f2806 	br	801424 <__alt_data_end+0xff801424>
  801784:	2021883a 	mov	r16,r4
  801788:	003f5306 	br	8014d8 <__alt_data_end+0xff8014d8>
  80178c:	1821883a 	mov	r16,r3
  801790:	003ef406 	br	801364 <__alt_data_end+0xff801364>
  801794:	1806943a 	slli	r3,r3,16
  801798:	9de6983a 	sll	r19,r19,r23
  80179c:	e73fffcc 	andi	fp,fp,65535
  8017a0:	1f07883a 	add	r3,r3,fp
  8017a4:	98ffbd2e 	bgeu	r19,r3,80169c <__alt_data_end+0xff80169c>
  8017a8:	90bfffc4 	addi	r2,r18,-1
  8017ac:	0007883a 	mov	r3,zero
  8017b0:	003f4e06 	br	8014ec <__alt_data_end+0xff8014ec>
  8017b4:	00800604 	movi	r2,24
  8017b8:	003ef506 	br	801390 <__alt_data_end+0xff801390>
  8017bc:	00800604 	movi	r2,24
  8017c0:	003f0b06 	br	8013f0 <__alt_data_end+0xff8013f0>
  8017c4:	00800604 	movi	r2,24
  8017c8:	003ead06 	br	801280 <__alt_data_end+0xff801280>
  8017cc:	0007883a 	mov	r3,zero
  8017d0:	00800044 	movi	r2,1
  8017d4:	003f4506 	br	8014ec <__alt_data_end+0xff8014ec>
  8017d8:	80bf8e2e 	bgeu	r16,r2,801614 <__alt_data_end+0xff801614>
  8017dc:	8c7fff84 	addi	r17,r17,-2
  8017e0:	8721883a 	add	r16,r16,fp
  8017e4:	003f8c06 	br	801618 <__alt_data_end+0xff801618>
  8017e8:	18bf762e 	bgeu	r3,r2,8015c4 <__alt_data_end+0xff8015c4>
  8017ec:	ad7fff84 	addi	r21,r21,-2
  8017f0:	1f07883a 	add	r3,r3,fp
  8017f4:	003f7406 	br	8015c8 <__alt_data_end+0xff8015c8>
  8017f8:	1839883a 	mov	fp,r3
  8017fc:	003fdd06 	br	801774 <__alt_data_end+0xff801774>
  801800:	182f883a 	mov	r23,r3
  801804:	003fc506 	br	80171c <__alt_data_end+0xff80171c>
  801808:	b5bfff84 	addi	r22,r22,-2
  80180c:	3c4f883a 	add	r7,r7,r17
  801810:	003f1a06 	br	80147c <__alt_data_end+0xff80147c>
  801814:	b5bfff84 	addi	r22,r22,-2
  801818:	1c47883a 	add	r3,r3,r17
  80181c:	003ebc06 	br	801310 <__alt_data_end+0xff801310>

00801820 <__divsi3>:
  801820:	20001b16 	blt	r4,zero,801890 <__divsi3+0x70>
  801824:	000f883a 	mov	r7,zero
  801828:	28001616 	blt	r5,zero,801884 <__divsi3+0x64>
  80182c:	200d883a 	mov	r6,r4
  801830:	29001a2e 	bgeu	r5,r4,80189c <__divsi3+0x7c>
  801834:	00800804 	movi	r2,32
  801838:	00c00044 	movi	r3,1
  80183c:	00000106 	br	801844 <__divsi3+0x24>
  801840:	10000d26 	beq	r2,zero,801878 <__divsi3+0x58>
  801844:	294b883a 	add	r5,r5,r5
  801848:	10bfffc4 	addi	r2,r2,-1
  80184c:	18c7883a 	add	r3,r3,r3
  801850:	293ffb36 	bltu	r5,r4,801840 <__alt_data_end+0xff801840>
  801854:	0005883a 	mov	r2,zero
  801858:	18000726 	beq	r3,zero,801878 <__divsi3+0x58>
  80185c:	0005883a 	mov	r2,zero
  801860:	31400236 	bltu	r6,r5,80186c <__divsi3+0x4c>
  801864:	314dc83a 	sub	r6,r6,r5
  801868:	10c4b03a 	or	r2,r2,r3
  80186c:	1806d07a 	srli	r3,r3,1
  801870:	280ad07a 	srli	r5,r5,1
  801874:	183ffa1e 	bne	r3,zero,801860 <__alt_data_end+0xff801860>
  801878:	38000126 	beq	r7,zero,801880 <__divsi3+0x60>
  80187c:	0085c83a 	sub	r2,zero,r2
  801880:	f800283a 	ret
  801884:	014bc83a 	sub	r5,zero,r5
  801888:	39c0005c 	xori	r7,r7,1
  80188c:	003fe706 	br	80182c <__alt_data_end+0xff80182c>
  801890:	0109c83a 	sub	r4,zero,r4
  801894:	01c00044 	movi	r7,1
  801898:	003fe306 	br	801828 <__alt_data_end+0xff801828>
  80189c:	00c00044 	movi	r3,1
  8018a0:	003fee06 	br	80185c <__alt_data_end+0xff80185c>

008018a4 <__modsi3>:
  8018a4:	20001716 	blt	r4,zero,801904 <__modsi3+0x60>
  8018a8:	000f883a 	mov	r7,zero
  8018ac:	2005883a 	mov	r2,r4
  8018b0:	28001216 	blt	r5,zero,8018fc <__modsi3+0x58>
  8018b4:	2900162e 	bgeu	r5,r4,801910 <__modsi3+0x6c>
  8018b8:	01800804 	movi	r6,32
  8018bc:	00c00044 	movi	r3,1
  8018c0:	00000106 	br	8018c8 <__modsi3+0x24>
  8018c4:	30000a26 	beq	r6,zero,8018f0 <__modsi3+0x4c>
  8018c8:	294b883a 	add	r5,r5,r5
  8018cc:	31bfffc4 	addi	r6,r6,-1
  8018d0:	18c7883a 	add	r3,r3,r3
  8018d4:	293ffb36 	bltu	r5,r4,8018c4 <__alt_data_end+0xff8018c4>
  8018d8:	18000526 	beq	r3,zero,8018f0 <__modsi3+0x4c>
  8018dc:	1806d07a 	srli	r3,r3,1
  8018e0:	11400136 	bltu	r2,r5,8018e8 <__modsi3+0x44>
  8018e4:	1145c83a 	sub	r2,r2,r5
  8018e8:	280ad07a 	srli	r5,r5,1
  8018ec:	183ffb1e 	bne	r3,zero,8018dc <__alt_data_end+0xff8018dc>
  8018f0:	38000126 	beq	r7,zero,8018f8 <__modsi3+0x54>
  8018f4:	0085c83a 	sub	r2,zero,r2
  8018f8:	f800283a 	ret
  8018fc:	014bc83a 	sub	r5,zero,r5
  801900:	003fec06 	br	8018b4 <__alt_data_end+0xff8018b4>
  801904:	0109c83a 	sub	r4,zero,r4
  801908:	01c00044 	movi	r7,1
  80190c:	003fe706 	br	8018ac <__alt_data_end+0xff8018ac>
  801910:	00c00044 	movi	r3,1
  801914:	003ff106 	br	8018dc <__alt_data_end+0xff8018dc>

00801918 <__udivsi3>:
  801918:	200d883a 	mov	r6,r4
  80191c:	2900152e 	bgeu	r5,r4,801974 <__udivsi3+0x5c>
  801920:	28001416 	blt	r5,zero,801974 <__udivsi3+0x5c>
  801924:	00800804 	movi	r2,32
  801928:	00c00044 	movi	r3,1
  80192c:	00000206 	br	801938 <__udivsi3+0x20>
  801930:	10000e26 	beq	r2,zero,80196c <__udivsi3+0x54>
  801934:	28000516 	blt	r5,zero,80194c <__udivsi3+0x34>
  801938:	294b883a 	add	r5,r5,r5
  80193c:	10bfffc4 	addi	r2,r2,-1
  801940:	18c7883a 	add	r3,r3,r3
  801944:	293ffa36 	bltu	r5,r4,801930 <__alt_data_end+0xff801930>
  801948:	18000826 	beq	r3,zero,80196c <__udivsi3+0x54>
  80194c:	0005883a 	mov	r2,zero
  801950:	31400236 	bltu	r6,r5,80195c <__udivsi3+0x44>
  801954:	314dc83a 	sub	r6,r6,r5
  801958:	10c4b03a 	or	r2,r2,r3
  80195c:	1806d07a 	srli	r3,r3,1
  801960:	280ad07a 	srli	r5,r5,1
  801964:	183ffa1e 	bne	r3,zero,801950 <__alt_data_end+0xff801950>
  801968:	f800283a 	ret
  80196c:	0005883a 	mov	r2,zero
  801970:	f800283a 	ret
  801974:	00c00044 	movi	r3,1
  801978:	003ff406 	br	80194c <__alt_data_end+0xff80194c>

0080197c <__umodsi3>:
  80197c:	2005883a 	mov	r2,r4
  801980:	2900122e 	bgeu	r5,r4,8019cc <__umodsi3+0x50>
  801984:	28001116 	blt	r5,zero,8019cc <__umodsi3+0x50>
  801988:	01800804 	movi	r6,32
  80198c:	00c00044 	movi	r3,1
  801990:	00000206 	br	80199c <__umodsi3+0x20>
  801994:	30000c26 	beq	r6,zero,8019c8 <__umodsi3+0x4c>
  801998:	28000516 	blt	r5,zero,8019b0 <__umodsi3+0x34>
  80199c:	294b883a 	add	r5,r5,r5
  8019a0:	31bfffc4 	addi	r6,r6,-1
  8019a4:	18c7883a 	add	r3,r3,r3
  8019a8:	293ffa36 	bltu	r5,r4,801994 <__alt_data_end+0xff801994>
  8019ac:	18000626 	beq	r3,zero,8019c8 <__umodsi3+0x4c>
  8019b0:	1806d07a 	srli	r3,r3,1
  8019b4:	11400136 	bltu	r2,r5,8019bc <__umodsi3+0x40>
  8019b8:	1145c83a 	sub	r2,r2,r5
  8019bc:	280ad07a 	srli	r5,r5,1
  8019c0:	183ffb1e 	bne	r3,zero,8019b0 <__alt_data_end+0xff8019b0>
  8019c4:	f800283a 	ret
  8019c8:	f800283a 	ret
  8019cc:	00c00044 	movi	r3,1
  8019d0:	003ff706 	br	8019b0 <__alt_data_end+0xff8019b0>

008019d4 <__mulsi3>:
  8019d4:	0005883a 	mov	r2,zero
  8019d8:	20000726 	beq	r4,zero,8019f8 <__mulsi3+0x24>
  8019dc:	20c0004c 	andi	r3,r4,1
  8019e0:	2008d07a 	srli	r4,r4,1
  8019e4:	18000126 	beq	r3,zero,8019ec <__mulsi3+0x18>
  8019e8:	1145883a 	add	r2,r2,r5
  8019ec:	294b883a 	add	r5,r5,r5
  8019f0:	203ffa1e 	bne	r4,zero,8019dc <__alt_data_end+0xff8019dc>
  8019f4:	f800283a 	ret
  8019f8:	f800283a 	ret

008019fc <__adddf3>:
  8019fc:	02c00434 	movhi	r11,16
  801a00:	5affffc4 	addi	r11,r11,-1
  801a04:	2806d7fa 	srli	r3,r5,31
  801a08:	2ad4703a 	and	r10,r5,r11
  801a0c:	3ad2703a 	and	r9,r7,r11
  801a10:	3804d53a 	srli	r2,r7,20
  801a14:	3018d77a 	srli	r12,r6,29
  801a18:	280ad53a 	srli	r5,r5,20
  801a1c:	501490fa 	slli	r10,r10,3
  801a20:	2010d77a 	srli	r8,r4,29
  801a24:	481290fa 	slli	r9,r9,3
  801a28:	380ed7fa 	srli	r7,r7,31
  801a2c:	defffb04 	addi	sp,sp,-20
  801a30:	dc800215 	stw	r18,8(sp)
  801a34:	dc400115 	stw	r17,4(sp)
  801a38:	dc000015 	stw	r16,0(sp)
  801a3c:	dfc00415 	stw	ra,16(sp)
  801a40:	dcc00315 	stw	r19,12(sp)
  801a44:	1c803fcc 	andi	r18,r3,255
  801a48:	2c01ffcc 	andi	r16,r5,2047
  801a4c:	5210b03a 	or	r8,r10,r8
  801a50:	202290fa 	slli	r17,r4,3
  801a54:	1081ffcc 	andi	r2,r2,2047
  801a58:	4b12b03a 	or	r9,r9,r12
  801a5c:	300c90fa 	slli	r6,r6,3
  801a60:	91c07526 	beq	r18,r7,801c38 <__adddf3+0x23c>
  801a64:	8087c83a 	sub	r3,r16,r2
  801a68:	00c0ab0e 	bge	zero,r3,801d18 <__adddf3+0x31c>
  801a6c:	10002a1e 	bne	r2,zero,801b18 <__adddf3+0x11c>
  801a70:	4984b03a 	or	r2,r9,r6
  801a74:	1000961e 	bne	r2,zero,801cd0 <__adddf3+0x2d4>
  801a78:	888001cc 	andi	r2,r17,7
  801a7c:	10000726 	beq	r2,zero,801a9c <__adddf3+0xa0>
  801a80:	888003cc 	andi	r2,r17,15
  801a84:	00c00104 	movi	r3,4
  801a88:	10c00426 	beq	r2,r3,801a9c <__adddf3+0xa0>
  801a8c:	88c7883a 	add	r3,r17,r3
  801a90:	1c63803a 	cmpltu	r17,r3,r17
  801a94:	4451883a 	add	r8,r8,r17
  801a98:	1823883a 	mov	r17,r3
  801a9c:	4080202c 	andhi	r2,r8,128
  801aa0:	10005926 	beq	r2,zero,801c08 <__adddf3+0x20c>
  801aa4:	84000044 	addi	r16,r16,1
  801aa8:	0081ffc4 	movi	r2,2047
  801aac:	8080ba26 	beq	r16,r2,801d98 <__adddf3+0x39c>
  801ab0:	00bfe034 	movhi	r2,65408
  801ab4:	10bfffc4 	addi	r2,r2,-1
  801ab8:	4090703a 	and	r8,r8,r2
  801abc:	4004977a 	slli	r2,r8,29
  801ac0:	4010927a 	slli	r8,r8,9
  801ac4:	8822d0fa 	srli	r17,r17,3
  801ac8:	8401ffcc 	andi	r16,r16,2047
  801acc:	4010d33a 	srli	r8,r8,12
  801ad0:	9007883a 	mov	r3,r18
  801ad4:	1444b03a 	or	r2,r2,r17
  801ad8:	8401ffcc 	andi	r16,r16,2047
  801adc:	8020953a 	slli	r16,r16,20
  801ae0:	18c03fcc 	andi	r3,r3,255
  801ae4:	01000434 	movhi	r4,16
  801ae8:	213fffc4 	addi	r4,r4,-1
  801aec:	180697fa 	slli	r3,r3,31
  801af0:	4110703a 	and	r8,r8,r4
  801af4:	4410b03a 	or	r8,r8,r16
  801af8:	40c6b03a 	or	r3,r8,r3
  801afc:	dfc00417 	ldw	ra,16(sp)
  801b00:	dcc00317 	ldw	r19,12(sp)
  801b04:	dc800217 	ldw	r18,8(sp)
  801b08:	dc400117 	ldw	r17,4(sp)
  801b0c:	dc000017 	ldw	r16,0(sp)
  801b10:	dec00504 	addi	sp,sp,20
  801b14:	f800283a 	ret
  801b18:	0081ffc4 	movi	r2,2047
  801b1c:	80bfd626 	beq	r16,r2,801a78 <__alt_data_end+0xff801a78>
  801b20:	4a402034 	orhi	r9,r9,128
  801b24:	00800e04 	movi	r2,56
  801b28:	10c09f16 	blt	r2,r3,801da8 <__adddf3+0x3ac>
  801b2c:	008007c4 	movi	r2,31
  801b30:	10c0c216 	blt	r2,r3,801e3c <__adddf3+0x440>
  801b34:	00800804 	movi	r2,32
  801b38:	10c5c83a 	sub	r2,r2,r3
  801b3c:	488a983a 	sll	r5,r9,r2
  801b40:	30c8d83a 	srl	r4,r6,r3
  801b44:	3084983a 	sll	r2,r6,r2
  801b48:	48c6d83a 	srl	r3,r9,r3
  801b4c:	290cb03a 	or	r6,r5,r4
  801b50:	1004c03a 	cmpne	r2,r2,zero
  801b54:	308cb03a 	or	r6,r6,r2
  801b58:	898dc83a 	sub	r6,r17,r6
  801b5c:	89a3803a 	cmpltu	r17,r17,r6
  801b60:	40d1c83a 	sub	r8,r8,r3
  801b64:	4451c83a 	sub	r8,r8,r17
  801b68:	3023883a 	mov	r17,r6
  801b6c:	4080202c 	andhi	r2,r8,128
  801b70:	10002326 	beq	r2,zero,801c00 <__adddf3+0x204>
  801b74:	04c02034 	movhi	r19,128
  801b78:	9cffffc4 	addi	r19,r19,-1
  801b7c:	44e6703a 	and	r19,r8,r19
  801b80:	98007626 	beq	r19,zero,801d5c <__adddf3+0x360>
  801b84:	9809883a 	mov	r4,r19
  801b88:	08035640 	call	803564 <__clzsi2>
  801b8c:	10fffe04 	addi	r3,r2,-8
  801b90:	010007c4 	movi	r4,31
  801b94:	20c07716 	blt	r4,r3,801d74 <__adddf3+0x378>
  801b98:	00800804 	movi	r2,32
  801b9c:	10c5c83a 	sub	r2,r2,r3
  801ba0:	8884d83a 	srl	r2,r17,r2
  801ba4:	98d0983a 	sll	r8,r19,r3
  801ba8:	88e2983a 	sll	r17,r17,r3
  801bac:	1204b03a 	or	r2,r2,r8
  801bb0:	1c007416 	blt	r3,r16,801d84 <__adddf3+0x388>
  801bb4:	1c21c83a 	sub	r16,r3,r16
  801bb8:	82000044 	addi	r8,r16,1
  801bbc:	00c007c4 	movi	r3,31
  801bc0:	1a009116 	blt	r3,r8,801e08 <__adddf3+0x40c>
  801bc4:	00c00804 	movi	r3,32
  801bc8:	1a07c83a 	sub	r3,r3,r8
  801bcc:	8a08d83a 	srl	r4,r17,r8
  801bd0:	88e2983a 	sll	r17,r17,r3
  801bd4:	10c6983a 	sll	r3,r2,r3
  801bd8:	1210d83a 	srl	r8,r2,r8
  801bdc:	8804c03a 	cmpne	r2,r17,zero
  801be0:	1906b03a 	or	r3,r3,r4
  801be4:	18a2b03a 	or	r17,r3,r2
  801be8:	0021883a 	mov	r16,zero
  801bec:	003fa206 	br	801a78 <__alt_data_end+0xff801a78>
  801bf0:	1890b03a 	or	r8,r3,r2
  801bf4:	40017d26 	beq	r8,zero,8021ec <__adddf3+0x7f0>
  801bf8:	1011883a 	mov	r8,r2
  801bfc:	1823883a 	mov	r17,r3
  801c00:	888001cc 	andi	r2,r17,7
  801c04:	103f9e1e 	bne	r2,zero,801a80 <__alt_data_end+0xff801a80>
  801c08:	4004977a 	slli	r2,r8,29
  801c0c:	8822d0fa 	srli	r17,r17,3
  801c10:	4010d0fa 	srli	r8,r8,3
  801c14:	9007883a 	mov	r3,r18
  801c18:	1444b03a 	or	r2,r2,r17
  801c1c:	0101ffc4 	movi	r4,2047
  801c20:	81002426 	beq	r16,r4,801cb4 <__adddf3+0x2b8>
  801c24:	8120703a 	and	r16,r16,r4
  801c28:	01000434 	movhi	r4,16
  801c2c:	213fffc4 	addi	r4,r4,-1
  801c30:	4110703a 	and	r8,r8,r4
  801c34:	003fa806 	br	801ad8 <__alt_data_end+0xff801ad8>
  801c38:	8089c83a 	sub	r4,r16,r2
  801c3c:	01005e0e 	bge	zero,r4,801db8 <__adddf3+0x3bc>
  801c40:	10002b26 	beq	r2,zero,801cf0 <__adddf3+0x2f4>
  801c44:	0081ffc4 	movi	r2,2047
  801c48:	80bf8b26 	beq	r16,r2,801a78 <__alt_data_end+0xff801a78>
  801c4c:	4a402034 	orhi	r9,r9,128
  801c50:	00800e04 	movi	r2,56
  801c54:	1100a40e 	bge	r2,r4,801ee8 <__adddf3+0x4ec>
  801c58:	498cb03a 	or	r6,r9,r6
  801c5c:	300ac03a 	cmpne	r5,r6,zero
  801c60:	0013883a 	mov	r9,zero
  801c64:	2c4b883a 	add	r5,r5,r17
  801c68:	2c63803a 	cmpltu	r17,r5,r17
  801c6c:	4a11883a 	add	r8,r9,r8
  801c70:	8a11883a 	add	r8,r17,r8
  801c74:	2823883a 	mov	r17,r5
  801c78:	4080202c 	andhi	r2,r8,128
  801c7c:	103fe026 	beq	r2,zero,801c00 <__alt_data_end+0xff801c00>
  801c80:	84000044 	addi	r16,r16,1
  801c84:	0081ffc4 	movi	r2,2047
  801c88:	8080d226 	beq	r16,r2,801fd4 <__adddf3+0x5d8>
  801c8c:	00bfe034 	movhi	r2,65408
  801c90:	10bfffc4 	addi	r2,r2,-1
  801c94:	4090703a 	and	r8,r8,r2
  801c98:	880ad07a 	srli	r5,r17,1
  801c9c:	400897fa 	slli	r4,r8,31
  801ca0:	88c0004c 	andi	r3,r17,1
  801ca4:	28e2b03a 	or	r17,r5,r3
  801ca8:	4010d07a 	srli	r8,r8,1
  801cac:	2462b03a 	or	r17,r4,r17
  801cb0:	003f7106 	br	801a78 <__alt_data_end+0xff801a78>
  801cb4:	4088b03a 	or	r4,r8,r2
  801cb8:	20014526 	beq	r4,zero,8021d0 <__adddf3+0x7d4>
  801cbc:	01000434 	movhi	r4,16
  801cc0:	42000234 	orhi	r8,r8,8
  801cc4:	213fffc4 	addi	r4,r4,-1
  801cc8:	4110703a 	and	r8,r8,r4
  801ccc:	003f8206 	br	801ad8 <__alt_data_end+0xff801ad8>
  801cd0:	18ffffc4 	addi	r3,r3,-1
  801cd4:	1800491e 	bne	r3,zero,801dfc <__adddf3+0x400>
  801cd8:	898bc83a 	sub	r5,r17,r6
  801cdc:	8963803a 	cmpltu	r17,r17,r5
  801ce0:	4251c83a 	sub	r8,r8,r9
  801ce4:	4451c83a 	sub	r8,r8,r17
  801ce8:	2823883a 	mov	r17,r5
  801cec:	003f9f06 	br	801b6c <__alt_data_end+0xff801b6c>
  801cf0:	4984b03a 	or	r2,r9,r6
  801cf4:	103f6026 	beq	r2,zero,801a78 <__alt_data_end+0xff801a78>
  801cf8:	213fffc4 	addi	r4,r4,-1
  801cfc:	2000931e 	bne	r4,zero,801f4c <__adddf3+0x550>
  801d00:	898d883a 	add	r6,r17,r6
  801d04:	3463803a 	cmpltu	r17,r6,r17
  801d08:	4251883a 	add	r8,r8,r9
  801d0c:	8a11883a 	add	r8,r17,r8
  801d10:	3023883a 	mov	r17,r6
  801d14:	003fd806 	br	801c78 <__alt_data_end+0xff801c78>
  801d18:	1800541e 	bne	r3,zero,801e6c <__adddf3+0x470>
  801d1c:	80800044 	addi	r2,r16,1
  801d20:	1081ffcc 	andi	r2,r2,2047
  801d24:	00c00044 	movi	r3,1
  801d28:	1880a00e 	bge	r3,r2,801fac <__adddf3+0x5b0>
  801d2c:	8989c83a 	sub	r4,r17,r6
  801d30:	8905803a 	cmpltu	r2,r17,r4
  801d34:	4267c83a 	sub	r19,r8,r9
  801d38:	98a7c83a 	sub	r19,r19,r2
  801d3c:	9880202c 	andhi	r2,r19,128
  801d40:	10006326 	beq	r2,zero,801ed0 <__adddf3+0x4d4>
  801d44:	3463c83a 	sub	r17,r6,r17
  801d48:	4a07c83a 	sub	r3,r9,r8
  801d4c:	344d803a 	cmpltu	r6,r6,r17
  801d50:	19a7c83a 	sub	r19,r3,r6
  801d54:	3825883a 	mov	r18,r7
  801d58:	983f8a1e 	bne	r19,zero,801b84 <__alt_data_end+0xff801b84>
  801d5c:	8809883a 	mov	r4,r17
  801d60:	08035640 	call	803564 <__clzsi2>
  801d64:	10800804 	addi	r2,r2,32
  801d68:	10fffe04 	addi	r3,r2,-8
  801d6c:	010007c4 	movi	r4,31
  801d70:	20ff890e 	bge	r4,r3,801b98 <__alt_data_end+0xff801b98>
  801d74:	10bff604 	addi	r2,r2,-40
  801d78:	8884983a 	sll	r2,r17,r2
  801d7c:	0023883a 	mov	r17,zero
  801d80:	1c3f8c0e 	bge	r3,r16,801bb4 <__alt_data_end+0xff801bb4>
  801d84:	023fe034 	movhi	r8,65408
  801d88:	423fffc4 	addi	r8,r8,-1
  801d8c:	80e1c83a 	sub	r16,r16,r3
  801d90:	1210703a 	and	r8,r2,r8
  801d94:	003f3806 	br	801a78 <__alt_data_end+0xff801a78>
  801d98:	9007883a 	mov	r3,r18
  801d9c:	0011883a 	mov	r8,zero
  801da0:	0005883a 	mov	r2,zero
  801da4:	003f4c06 	br	801ad8 <__alt_data_end+0xff801ad8>
  801da8:	498cb03a 	or	r6,r9,r6
  801dac:	300cc03a 	cmpne	r6,r6,zero
  801db0:	0007883a 	mov	r3,zero
  801db4:	003f6806 	br	801b58 <__alt_data_end+0xff801b58>
  801db8:	20009c1e 	bne	r4,zero,80202c <__adddf3+0x630>
  801dbc:	80800044 	addi	r2,r16,1
  801dc0:	1141ffcc 	andi	r5,r2,2047
  801dc4:	01000044 	movi	r4,1
  801dc8:	2140670e 	bge	r4,r5,801f68 <__adddf3+0x56c>
  801dcc:	0101ffc4 	movi	r4,2047
  801dd0:	11007f26 	beq	r2,r4,801fd0 <__adddf3+0x5d4>
  801dd4:	898d883a 	add	r6,r17,r6
  801dd8:	4247883a 	add	r3,r8,r9
  801ddc:	3451803a 	cmpltu	r8,r6,r17
  801de0:	40d1883a 	add	r8,r8,r3
  801de4:	402297fa 	slli	r17,r8,31
  801de8:	300cd07a 	srli	r6,r6,1
  801dec:	4010d07a 	srli	r8,r8,1
  801df0:	1021883a 	mov	r16,r2
  801df4:	89a2b03a 	or	r17,r17,r6
  801df8:	003f1f06 	br	801a78 <__alt_data_end+0xff801a78>
  801dfc:	0081ffc4 	movi	r2,2047
  801e00:	80bf481e 	bne	r16,r2,801b24 <__alt_data_end+0xff801b24>
  801e04:	003f1c06 	br	801a78 <__alt_data_end+0xff801a78>
  801e08:	843ff844 	addi	r16,r16,-31
  801e0c:	01000804 	movi	r4,32
  801e10:	1406d83a 	srl	r3,r2,r16
  801e14:	41005026 	beq	r8,r4,801f58 <__adddf3+0x55c>
  801e18:	01001004 	movi	r4,64
  801e1c:	2211c83a 	sub	r8,r4,r8
  801e20:	1204983a 	sll	r2,r2,r8
  801e24:	88a2b03a 	or	r17,r17,r2
  801e28:	8822c03a 	cmpne	r17,r17,zero
  801e2c:	1c62b03a 	or	r17,r3,r17
  801e30:	0011883a 	mov	r8,zero
  801e34:	0021883a 	mov	r16,zero
  801e38:	003f7106 	br	801c00 <__alt_data_end+0xff801c00>
  801e3c:	193ff804 	addi	r4,r3,-32
  801e40:	00800804 	movi	r2,32
  801e44:	4908d83a 	srl	r4,r9,r4
  801e48:	18804526 	beq	r3,r2,801f60 <__adddf3+0x564>
  801e4c:	00801004 	movi	r2,64
  801e50:	10c5c83a 	sub	r2,r2,r3
  801e54:	4886983a 	sll	r3,r9,r2
  801e58:	198cb03a 	or	r6,r3,r6
  801e5c:	300cc03a 	cmpne	r6,r6,zero
  801e60:	218cb03a 	or	r6,r4,r6
  801e64:	0007883a 	mov	r3,zero
  801e68:	003f3b06 	br	801b58 <__alt_data_end+0xff801b58>
  801e6c:	80002a26 	beq	r16,zero,801f18 <__adddf3+0x51c>
  801e70:	0101ffc4 	movi	r4,2047
  801e74:	11006826 	beq	r2,r4,802018 <__adddf3+0x61c>
  801e78:	00c7c83a 	sub	r3,zero,r3
  801e7c:	42002034 	orhi	r8,r8,128
  801e80:	01000e04 	movi	r4,56
  801e84:	20c07c16 	blt	r4,r3,802078 <__adddf3+0x67c>
  801e88:	010007c4 	movi	r4,31
  801e8c:	20c0da16 	blt	r4,r3,8021f8 <__adddf3+0x7fc>
  801e90:	01000804 	movi	r4,32
  801e94:	20c9c83a 	sub	r4,r4,r3
  801e98:	4114983a 	sll	r10,r8,r4
  801e9c:	88cad83a 	srl	r5,r17,r3
  801ea0:	8908983a 	sll	r4,r17,r4
  801ea4:	40c6d83a 	srl	r3,r8,r3
  801ea8:	5162b03a 	or	r17,r10,r5
  801eac:	2008c03a 	cmpne	r4,r4,zero
  801eb0:	8922b03a 	or	r17,r17,r4
  801eb4:	3463c83a 	sub	r17,r6,r17
  801eb8:	48c7c83a 	sub	r3,r9,r3
  801ebc:	344d803a 	cmpltu	r6,r6,r17
  801ec0:	1991c83a 	sub	r8,r3,r6
  801ec4:	1021883a 	mov	r16,r2
  801ec8:	3825883a 	mov	r18,r7
  801ecc:	003f2706 	br	801b6c <__alt_data_end+0xff801b6c>
  801ed0:	24d0b03a 	or	r8,r4,r19
  801ed4:	40001b1e 	bne	r8,zero,801f44 <__adddf3+0x548>
  801ed8:	0005883a 	mov	r2,zero
  801edc:	0007883a 	mov	r3,zero
  801ee0:	0021883a 	mov	r16,zero
  801ee4:	003f4d06 	br	801c1c <__alt_data_end+0xff801c1c>
  801ee8:	008007c4 	movi	r2,31
  801eec:	11003c16 	blt	r2,r4,801fe0 <__adddf3+0x5e4>
  801ef0:	00800804 	movi	r2,32
  801ef4:	1105c83a 	sub	r2,r2,r4
  801ef8:	488e983a 	sll	r7,r9,r2
  801efc:	310ad83a 	srl	r5,r6,r4
  801f00:	3084983a 	sll	r2,r6,r2
  801f04:	4912d83a 	srl	r9,r9,r4
  801f08:	394ab03a 	or	r5,r7,r5
  801f0c:	1004c03a 	cmpne	r2,r2,zero
  801f10:	288ab03a 	or	r5,r5,r2
  801f14:	003f5306 	br	801c64 <__alt_data_end+0xff801c64>
  801f18:	4448b03a 	or	r4,r8,r17
  801f1c:	20003e26 	beq	r4,zero,802018 <__adddf3+0x61c>
  801f20:	00c6303a 	nor	r3,zero,r3
  801f24:	18003a1e 	bne	r3,zero,802010 <__adddf3+0x614>
  801f28:	3463c83a 	sub	r17,r6,r17
  801f2c:	4a07c83a 	sub	r3,r9,r8
  801f30:	344d803a 	cmpltu	r6,r6,r17
  801f34:	1991c83a 	sub	r8,r3,r6
  801f38:	1021883a 	mov	r16,r2
  801f3c:	3825883a 	mov	r18,r7
  801f40:	003f0a06 	br	801b6c <__alt_data_end+0xff801b6c>
  801f44:	2023883a 	mov	r17,r4
  801f48:	003f0d06 	br	801b80 <__alt_data_end+0xff801b80>
  801f4c:	0081ffc4 	movi	r2,2047
  801f50:	80bf3f1e 	bne	r16,r2,801c50 <__alt_data_end+0xff801c50>
  801f54:	003ec806 	br	801a78 <__alt_data_end+0xff801a78>
  801f58:	0005883a 	mov	r2,zero
  801f5c:	003fb106 	br	801e24 <__alt_data_end+0xff801e24>
  801f60:	0007883a 	mov	r3,zero
  801f64:	003fbc06 	br	801e58 <__alt_data_end+0xff801e58>
  801f68:	4444b03a 	or	r2,r8,r17
  801f6c:	8000871e 	bne	r16,zero,80218c <__adddf3+0x790>
  801f70:	1000ba26 	beq	r2,zero,80225c <__adddf3+0x860>
  801f74:	4984b03a 	or	r2,r9,r6
  801f78:	103ebf26 	beq	r2,zero,801a78 <__alt_data_end+0xff801a78>
  801f7c:	8985883a 	add	r2,r17,r6
  801f80:	4247883a 	add	r3,r8,r9
  801f84:	1451803a 	cmpltu	r8,r2,r17
  801f88:	40d1883a 	add	r8,r8,r3
  801f8c:	40c0202c 	andhi	r3,r8,128
  801f90:	1023883a 	mov	r17,r2
  801f94:	183f1a26 	beq	r3,zero,801c00 <__alt_data_end+0xff801c00>
  801f98:	00bfe034 	movhi	r2,65408
  801f9c:	10bfffc4 	addi	r2,r2,-1
  801fa0:	2021883a 	mov	r16,r4
  801fa4:	4090703a 	and	r8,r8,r2
  801fa8:	003eb306 	br	801a78 <__alt_data_end+0xff801a78>
  801fac:	4444b03a 	or	r2,r8,r17
  801fb0:	8000291e 	bne	r16,zero,802058 <__adddf3+0x65c>
  801fb4:	10004b1e 	bne	r2,zero,8020e4 <__adddf3+0x6e8>
  801fb8:	4990b03a 	or	r8,r9,r6
  801fbc:	40008b26 	beq	r8,zero,8021ec <__adddf3+0x7f0>
  801fc0:	4811883a 	mov	r8,r9
  801fc4:	3023883a 	mov	r17,r6
  801fc8:	3825883a 	mov	r18,r7
  801fcc:	003eaa06 	br	801a78 <__alt_data_end+0xff801a78>
  801fd0:	1021883a 	mov	r16,r2
  801fd4:	0011883a 	mov	r8,zero
  801fd8:	0005883a 	mov	r2,zero
  801fdc:	003f0f06 	br	801c1c <__alt_data_end+0xff801c1c>
  801fe0:	217ff804 	addi	r5,r4,-32
  801fe4:	00800804 	movi	r2,32
  801fe8:	494ad83a 	srl	r5,r9,r5
  801fec:	20807d26 	beq	r4,r2,8021e4 <__adddf3+0x7e8>
  801ff0:	00801004 	movi	r2,64
  801ff4:	1109c83a 	sub	r4,r2,r4
  801ff8:	4912983a 	sll	r9,r9,r4
  801ffc:	498cb03a 	or	r6,r9,r6
  802000:	300cc03a 	cmpne	r6,r6,zero
  802004:	298ab03a 	or	r5,r5,r6
  802008:	0013883a 	mov	r9,zero
  80200c:	003f1506 	br	801c64 <__alt_data_end+0xff801c64>
  802010:	0101ffc4 	movi	r4,2047
  802014:	113f9a1e 	bne	r2,r4,801e80 <__alt_data_end+0xff801e80>
  802018:	4811883a 	mov	r8,r9
  80201c:	3023883a 	mov	r17,r6
  802020:	1021883a 	mov	r16,r2
  802024:	3825883a 	mov	r18,r7
  802028:	003e9306 	br	801a78 <__alt_data_end+0xff801a78>
  80202c:	8000161e 	bne	r16,zero,802088 <__adddf3+0x68c>
  802030:	444ab03a 	or	r5,r8,r17
  802034:	28005126 	beq	r5,zero,80217c <__adddf3+0x780>
  802038:	0108303a 	nor	r4,zero,r4
  80203c:	20004d1e 	bne	r4,zero,802174 <__adddf3+0x778>
  802040:	89a3883a 	add	r17,r17,r6
  802044:	4253883a 	add	r9,r8,r9
  802048:	898d803a 	cmpltu	r6,r17,r6
  80204c:	3251883a 	add	r8,r6,r9
  802050:	1021883a 	mov	r16,r2
  802054:	003f0806 	br	801c78 <__alt_data_end+0xff801c78>
  802058:	1000301e 	bne	r2,zero,80211c <__adddf3+0x720>
  80205c:	4984b03a 	or	r2,r9,r6
  802060:	10007126 	beq	r2,zero,802228 <__adddf3+0x82c>
  802064:	4811883a 	mov	r8,r9
  802068:	3023883a 	mov	r17,r6
  80206c:	3825883a 	mov	r18,r7
  802070:	0401ffc4 	movi	r16,2047
  802074:	003e8006 	br	801a78 <__alt_data_end+0xff801a78>
  802078:	4462b03a 	or	r17,r8,r17
  80207c:	8822c03a 	cmpne	r17,r17,zero
  802080:	0007883a 	mov	r3,zero
  802084:	003f8b06 	br	801eb4 <__alt_data_end+0xff801eb4>
  802088:	0141ffc4 	movi	r5,2047
  80208c:	11403b26 	beq	r2,r5,80217c <__adddf3+0x780>
  802090:	0109c83a 	sub	r4,zero,r4
  802094:	42002034 	orhi	r8,r8,128
  802098:	01400e04 	movi	r5,56
  80209c:	29006716 	blt	r5,r4,80223c <__adddf3+0x840>
  8020a0:	014007c4 	movi	r5,31
  8020a4:	29007016 	blt	r5,r4,802268 <__adddf3+0x86c>
  8020a8:	01400804 	movi	r5,32
  8020ac:	290bc83a 	sub	r5,r5,r4
  8020b0:	4154983a 	sll	r10,r8,r5
  8020b4:	890ed83a 	srl	r7,r17,r4
  8020b8:	894a983a 	sll	r5,r17,r5
  8020bc:	4108d83a 	srl	r4,r8,r4
  8020c0:	51e2b03a 	or	r17,r10,r7
  8020c4:	280ac03a 	cmpne	r5,r5,zero
  8020c8:	8962b03a 	or	r17,r17,r5
  8020cc:	89a3883a 	add	r17,r17,r6
  8020d0:	2253883a 	add	r9,r4,r9
  8020d4:	898d803a 	cmpltu	r6,r17,r6
  8020d8:	3251883a 	add	r8,r6,r9
  8020dc:	1021883a 	mov	r16,r2
  8020e0:	003ee506 	br	801c78 <__alt_data_end+0xff801c78>
  8020e4:	4984b03a 	or	r2,r9,r6
  8020e8:	103e6326 	beq	r2,zero,801a78 <__alt_data_end+0xff801a78>
  8020ec:	8987c83a 	sub	r3,r17,r6
  8020f0:	88c9803a 	cmpltu	r4,r17,r3
  8020f4:	4245c83a 	sub	r2,r8,r9
  8020f8:	1105c83a 	sub	r2,r2,r4
  8020fc:	1100202c 	andhi	r4,r2,128
  802100:	203ebb26 	beq	r4,zero,801bf0 <__alt_data_end+0xff801bf0>
  802104:	3463c83a 	sub	r17,r6,r17
  802108:	4a07c83a 	sub	r3,r9,r8
  80210c:	344d803a 	cmpltu	r6,r6,r17
  802110:	1991c83a 	sub	r8,r3,r6
  802114:	3825883a 	mov	r18,r7
  802118:	003e5706 	br	801a78 <__alt_data_end+0xff801a78>
  80211c:	4984b03a 	or	r2,r9,r6
  802120:	10002e26 	beq	r2,zero,8021dc <__adddf3+0x7e0>
  802124:	4004d0fa 	srli	r2,r8,3
  802128:	8822d0fa 	srli	r17,r17,3
  80212c:	4010977a 	slli	r8,r8,29
  802130:	10c0022c 	andhi	r3,r2,8
  802134:	4462b03a 	or	r17,r8,r17
  802138:	18000826 	beq	r3,zero,80215c <__adddf3+0x760>
  80213c:	4808d0fa 	srli	r4,r9,3
  802140:	20c0022c 	andhi	r3,r4,8
  802144:	1800051e 	bne	r3,zero,80215c <__adddf3+0x760>
  802148:	300cd0fa 	srli	r6,r6,3
  80214c:	4806977a 	slli	r3,r9,29
  802150:	2005883a 	mov	r2,r4
  802154:	3825883a 	mov	r18,r7
  802158:	19a2b03a 	or	r17,r3,r6
  80215c:	8810d77a 	srli	r8,r17,29
  802160:	100490fa 	slli	r2,r2,3
  802164:	882290fa 	slli	r17,r17,3
  802168:	0401ffc4 	movi	r16,2047
  80216c:	4090b03a 	or	r8,r8,r2
  802170:	003e4106 	br	801a78 <__alt_data_end+0xff801a78>
  802174:	0141ffc4 	movi	r5,2047
  802178:	117fc71e 	bne	r2,r5,802098 <__alt_data_end+0xff802098>
  80217c:	4811883a 	mov	r8,r9
  802180:	3023883a 	mov	r17,r6
  802184:	1021883a 	mov	r16,r2
  802188:	003e3b06 	br	801a78 <__alt_data_end+0xff801a78>
  80218c:	10002f26 	beq	r2,zero,80224c <__adddf3+0x850>
  802190:	4984b03a 	or	r2,r9,r6
  802194:	10001126 	beq	r2,zero,8021dc <__adddf3+0x7e0>
  802198:	4004d0fa 	srli	r2,r8,3
  80219c:	8822d0fa 	srli	r17,r17,3
  8021a0:	4010977a 	slli	r8,r8,29
  8021a4:	10c0022c 	andhi	r3,r2,8
  8021a8:	4462b03a 	or	r17,r8,r17
  8021ac:	183feb26 	beq	r3,zero,80215c <__alt_data_end+0xff80215c>
  8021b0:	4808d0fa 	srli	r4,r9,3
  8021b4:	20c0022c 	andhi	r3,r4,8
  8021b8:	183fe81e 	bne	r3,zero,80215c <__alt_data_end+0xff80215c>
  8021bc:	300cd0fa 	srli	r6,r6,3
  8021c0:	4806977a 	slli	r3,r9,29
  8021c4:	2005883a 	mov	r2,r4
  8021c8:	19a2b03a 	or	r17,r3,r6
  8021cc:	003fe306 	br	80215c <__alt_data_end+0xff80215c>
  8021d0:	0011883a 	mov	r8,zero
  8021d4:	0005883a 	mov	r2,zero
  8021d8:	003e3f06 	br	801ad8 <__alt_data_end+0xff801ad8>
  8021dc:	0401ffc4 	movi	r16,2047
  8021e0:	003e2506 	br	801a78 <__alt_data_end+0xff801a78>
  8021e4:	0013883a 	mov	r9,zero
  8021e8:	003f8406 	br	801ffc <__alt_data_end+0xff801ffc>
  8021ec:	0005883a 	mov	r2,zero
  8021f0:	0007883a 	mov	r3,zero
  8021f4:	003e8906 	br	801c1c <__alt_data_end+0xff801c1c>
  8021f8:	197ff804 	addi	r5,r3,-32
  8021fc:	01000804 	movi	r4,32
  802200:	414ad83a 	srl	r5,r8,r5
  802204:	19002426 	beq	r3,r4,802298 <__adddf3+0x89c>
  802208:	01001004 	movi	r4,64
  80220c:	20c7c83a 	sub	r3,r4,r3
  802210:	40c6983a 	sll	r3,r8,r3
  802214:	1c46b03a 	or	r3,r3,r17
  802218:	1806c03a 	cmpne	r3,r3,zero
  80221c:	28e2b03a 	or	r17,r5,r3
  802220:	0007883a 	mov	r3,zero
  802224:	003f2306 	br	801eb4 <__alt_data_end+0xff801eb4>
  802228:	0007883a 	mov	r3,zero
  80222c:	5811883a 	mov	r8,r11
  802230:	00bfffc4 	movi	r2,-1
  802234:	0401ffc4 	movi	r16,2047
  802238:	003e7806 	br	801c1c <__alt_data_end+0xff801c1c>
  80223c:	4462b03a 	or	r17,r8,r17
  802240:	8822c03a 	cmpne	r17,r17,zero
  802244:	0009883a 	mov	r4,zero
  802248:	003fa006 	br	8020cc <__alt_data_end+0xff8020cc>
  80224c:	4811883a 	mov	r8,r9
  802250:	3023883a 	mov	r17,r6
  802254:	0401ffc4 	movi	r16,2047
  802258:	003e0706 	br	801a78 <__alt_data_end+0xff801a78>
  80225c:	4811883a 	mov	r8,r9
  802260:	3023883a 	mov	r17,r6
  802264:	003e0406 	br	801a78 <__alt_data_end+0xff801a78>
  802268:	21fff804 	addi	r7,r4,-32
  80226c:	01400804 	movi	r5,32
  802270:	41ced83a 	srl	r7,r8,r7
  802274:	21400a26 	beq	r4,r5,8022a0 <__adddf3+0x8a4>
  802278:	01401004 	movi	r5,64
  80227c:	2909c83a 	sub	r4,r5,r4
  802280:	4108983a 	sll	r4,r8,r4
  802284:	2448b03a 	or	r4,r4,r17
  802288:	2008c03a 	cmpne	r4,r4,zero
  80228c:	3922b03a 	or	r17,r7,r4
  802290:	0009883a 	mov	r4,zero
  802294:	003f8d06 	br	8020cc <__alt_data_end+0xff8020cc>
  802298:	0007883a 	mov	r3,zero
  80229c:	003fdd06 	br	802214 <__alt_data_end+0xff802214>
  8022a0:	0009883a 	mov	r4,zero
  8022a4:	003ff706 	br	802284 <__alt_data_end+0xff802284>

008022a8 <__divdf3>:
  8022a8:	defff004 	addi	sp,sp,-64
  8022ac:	dc800815 	stw	r18,32(sp)
  8022b0:	2824d53a 	srli	r18,r5,20
  8022b4:	dd800c15 	stw	r22,48(sp)
  8022b8:	282cd7fa 	srli	r22,r5,31
  8022bc:	dc000615 	stw	r16,24(sp)
  8022c0:	04000434 	movhi	r16,16
  8022c4:	843fffc4 	addi	r16,r16,-1
  8022c8:	dfc00f15 	stw	ra,60(sp)
  8022cc:	df000e15 	stw	fp,56(sp)
  8022d0:	ddc00d15 	stw	r23,52(sp)
  8022d4:	dd400b15 	stw	r21,44(sp)
  8022d8:	dd000a15 	stw	r20,40(sp)
  8022dc:	dcc00915 	stw	r19,36(sp)
  8022e0:	dc400715 	stw	r17,28(sp)
  8022e4:	9481ffcc 	andi	r18,r18,2047
  8022e8:	2c20703a 	and	r16,r5,r16
  8022ec:	b2003fcc 	andi	r8,r22,255
  8022f0:	90006126 	beq	r18,zero,802478 <__divdf3+0x1d0>
  8022f4:	0081ffc4 	movi	r2,2047
  8022f8:	202b883a 	mov	r21,r4
  8022fc:	90803726 	beq	r18,r2,8023dc <__divdf3+0x134>
  802300:	80800434 	orhi	r2,r16,16
  802304:	100490fa 	slli	r2,r2,3
  802308:	2020d77a 	srli	r16,r4,29
  80230c:	202a90fa 	slli	r21,r4,3
  802310:	94bf0044 	addi	r18,r18,-1023
  802314:	80a0b03a 	or	r16,r16,r2
  802318:	0013883a 	mov	r9,zero
  80231c:	000b883a 	mov	r5,zero
  802320:	3806d53a 	srli	r3,r7,20
  802324:	382ed7fa 	srli	r23,r7,31
  802328:	04400434 	movhi	r17,16
  80232c:	8c7fffc4 	addi	r17,r17,-1
  802330:	18c1ffcc 	andi	r3,r3,2047
  802334:	3029883a 	mov	r20,r6
  802338:	3c62703a 	and	r17,r7,r17
  80233c:	bf003fcc 	andi	fp,r23,255
  802340:	18006e26 	beq	r3,zero,8024fc <__divdf3+0x254>
  802344:	0081ffc4 	movi	r2,2047
  802348:	18806626 	beq	r3,r2,8024e4 <__divdf3+0x23c>
  80234c:	88800434 	orhi	r2,r17,16
  802350:	100490fa 	slli	r2,r2,3
  802354:	3022d77a 	srli	r17,r6,29
  802358:	302890fa 	slli	r20,r6,3
  80235c:	18ff0044 	addi	r3,r3,-1023
  802360:	88a2b03a 	or	r17,r17,r2
  802364:	000f883a 	mov	r7,zero
  802368:	b5e6f03a 	xor	r19,r22,r23
  80236c:	3a4cb03a 	or	r6,r7,r9
  802370:	008003c4 	movi	r2,15
  802374:	9809883a 	mov	r4,r19
  802378:	90c7c83a 	sub	r3,r18,r3
  80237c:	9cc03fcc 	andi	r19,r19,255
  802380:	11809636 	bltu	r2,r6,8025dc <__divdf3+0x334>
  802384:	300c90ba 	slli	r6,r6,2
  802388:	00802034 	movhi	r2,128
  80238c:	1088e704 	addi	r2,r2,9116
  802390:	308d883a 	add	r6,r6,r2
  802394:	30800017 	ldw	r2,0(r6)
  802398:	1000683a 	jmp	r2
  80239c:	008025dc 	xori	r2,zero,151
  8023a0:	00802414 	movui	r2,144
  8023a4:	008025cc 	andi	r2,zero,151
  8023a8:	00802408 	cmpgei	r2,zero,144
  8023ac:	008025cc 	andi	r2,zero,151
  8023b0:	008025a0 	cmpeqi	r2,zero,150
  8023b4:	008025cc 	andi	r2,zero,151
  8023b8:	00802408 	cmpgei	r2,zero,144
  8023bc:	00802414 	movui	r2,144
  8023c0:	00802414 	movui	r2,144
  8023c4:	008025a0 	cmpeqi	r2,zero,150
  8023c8:	00802408 	cmpgei	r2,zero,144
  8023cc:	008023f8 	rdprs	r2,zero,143
  8023d0:	008023f8 	rdprs	r2,zero,143
  8023d4:	008023f8 	rdprs	r2,zero,143
  8023d8:	00802964 	muli	r2,zero,165
  8023dc:	2404b03a 	or	r2,r4,r16
  8023e0:	10006c1e 	bne	r2,zero,802594 <__divdf3+0x2ec>
  8023e4:	02400204 	movi	r9,8
  8023e8:	0021883a 	mov	r16,zero
  8023ec:	002b883a 	mov	r21,zero
  8023f0:	01400084 	movi	r5,2
  8023f4:	003fca06 	br	802320 <__alt_data_end+0xff802320>
  8023f8:	8023883a 	mov	r17,r16
  8023fc:	a829883a 	mov	r20,r21
  802400:	4039883a 	mov	fp,r8
  802404:	280f883a 	mov	r7,r5
  802408:	00800084 	movi	r2,2
  80240c:	3881601e 	bne	r7,r2,802990 <__divdf3+0x6e8>
  802410:	e027883a 	mov	r19,fp
  802414:	9900004c 	andi	r4,r19,1
  802418:	0081ffc4 	movi	r2,2047
  80241c:	0021883a 	mov	r16,zero
  802420:	002b883a 	mov	r21,zero
  802424:	1004953a 	slli	r2,r2,20
  802428:	20c03fcc 	andi	r3,r4,255
  80242c:	01400434 	movhi	r5,16
  802430:	297fffc4 	addi	r5,r5,-1
  802434:	180697fa 	slli	r3,r3,31
  802438:	8160703a 	and	r16,r16,r5
  80243c:	80a0b03a 	or	r16,r16,r2
  802440:	80c6b03a 	or	r3,r16,r3
  802444:	a805883a 	mov	r2,r21
  802448:	dfc00f17 	ldw	ra,60(sp)
  80244c:	df000e17 	ldw	fp,56(sp)
  802450:	ddc00d17 	ldw	r23,52(sp)
  802454:	dd800c17 	ldw	r22,48(sp)
  802458:	dd400b17 	ldw	r21,44(sp)
  80245c:	dd000a17 	ldw	r20,40(sp)
  802460:	dcc00917 	ldw	r19,36(sp)
  802464:	dc800817 	ldw	r18,32(sp)
  802468:	dc400717 	ldw	r17,28(sp)
  80246c:	dc000617 	ldw	r16,24(sp)
  802470:	dec01004 	addi	sp,sp,64
  802474:	f800283a 	ret
  802478:	2404b03a 	or	r2,r4,r16
  80247c:	2023883a 	mov	r17,r4
  802480:	10003f26 	beq	r2,zero,802580 <__divdf3+0x2d8>
  802484:	80015e26 	beq	r16,zero,802a00 <__divdf3+0x758>
  802488:	8009883a 	mov	r4,r16
  80248c:	d9800215 	stw	r6,8(sp)
  802490:	d9c00515 	stw	r7,20(sp)
  802494:	da000415 	stw	r8,16(sp)
  802498:	08035640 	call	803564 <__clzsi2>
  80249c:	d9800217 	ldw	r6,8(sp)
  8024a0:	d9c00517 	ldw	r7,20(sp)
  8024a4:	da000417 	ldw	r8,16(sp)
  8024a8:	113ffd44 	addi	r4,r2,-11
  8024ac:	00c00704 	movi	r3,28
  8024b0:	19014f16 	blt	r3,r4,8029f0 <__divdf3+0x748>
  8024b4:	00c00744 	movi	r3,29
  8024b8:	157ffe04 	addi	r21,r2,-8
  8024bc:	1907c83a 	sub	r3,r3,r4
  8024c0:	8560983a 	sll	r16,r16,r21
  8024c4:	88c6d83a 	srl	r3,r17,r3
  8024c8:	8d6a983a 	sll	r21,r17,r21
  8024cc:	1c20b03a 	or	r16,r3,r16
  8024d0:	1080fcc4 	addi	r2,r2,1011
  8024d4:	00a5c83a 	sub	r18,zero,r2
  8024d8:	0013883a 	mov	r9,zero
  8024dc:	000b883a 	mov	r5,zero
  8024e0:	003f8f06 	br	802320 <__alt_data_end+0xff802320>
  8024e4:	3444b03a 	or	r2,r6,r17
  8024e8:	1000231e 	bne	r2,zero,802578 <__divdf3+0x2d0>
  8024ec:	0023883a 	mov	r17,zero
  8024f0:	0029883a 	mov	r20,zero
  8024f4:	01c00084 	movi	r7,2
  8024f8:	003f9b06 	br	802368 <__alt_data_end+0xff802368>
  8024fc:	3444b03a 	or	r2,r6,r17
  802500:	10001926 	beq	r2,zero,802568 <__divdf3+0x2c0>
  802504:	88014b26 	beq	r17,zero,802a34 <__divdf3+0x78c>
  802508:	8809883a 	mov	r4,r17
  80250c:	d9400115 	stw	r5,4(sp)
  802510:	d9800215 	stw	r6,8(sp)
  802514:	da000415 	stw	r8,16(sp)
  802518:	da400315 	stw	r9,12(sp)
  80251c:	08035640 	call	803564 <__clzsi2>
  802520:	d9400117 	ldw	r5,4(sp)
  802524:	d9800217 	ldw	r6,8(sp)
  802528:	da000417 	ldw	r8,16(sp)
  80252c:	da400317 	ldw	r9,12(sp)
  802530:	113ffd44 	addi	r4,r2,-11
  802534:	00c00704 	movi	r3,28
  802538:	19013a16 	blt	r3,r4,802a24 <__divdf3+0x77c>
  80253c:	00c00744 	movi	r3,29
  802540:	153ffe04 	addi	r20,r2,-8
  802544:	1907c83a 	sub	r3,r3,r4
  802548:	8d22983a 	sll	r17,r17,r20
  80254c:	30c6d83a 	srl	r3,r6,r3
  802550:	3528983a 	sll	r20,r6,r20
  802554:	1c62b03a 	or	r17,r3,r17
  802558:	1080fcc4 	addi	r2,r2,1011
  80255c:	0087c83a 	sub	r3,zero,r2
  802560:	000f883a 	mov	r7,zero
  802564:	003f8006 	br	802368 <__alt_data_end+0xff802368>
  802568:	0023883a 	mov	r17,zero
  80256c:	0029883a 	mov	r20,zero
  802570:	01c00044 	movi	r7,1
  802574:	003f7c06 	br	802368 <__alt_data_end+0xff802368>
  802578:	01c000c4 	movi	r7,3
  80257c:	003f7a06 	br	802368 <__alt_data_end+0xff802368>
  802580:	02400104 	movi	r9,4
  802584:	0021883a 	mov	r16,zero
  802588:	002b883a 	mov	r21,zero
  80258c:	01400044 	movi	r5,1
  802590:	003f6306 	br	802320 <__alt_data_end+0xff802320>
  802594:	02400304 	movi	r9,12
  802598:	014000c4 	movi	r5,3
  80259c:	003f6006 	br	802320 <__alt_data_end+0xff802320>
  8025a0:	04000434 	movhi	r16,16
  8025a4:	0009883a 	mov	r4,zero
  8025a8:	843fffc4 	addi	r16,r16,-1
  8025ac:	057fffc4 	movi	r21,-1
  8025b0:	0081ffc4 	movi	r2,2047
  8025b4:	003f9b06 	br	802424 <__alt_data_end+0xff802424>
  8025b8:	00c00044 	movi	r3,1
  8025bc:	1887c83a 	sub	r3,r3,r2
  8025c0:	01000e04 	movi	r4,56
  8025c4:	20c1530e 	bge	r4,r3,802b14 <__divdf3+0x86c>
  8025c8:	9900004c 	andi	r4,r19,1
  8025cc:	0005883a 	mov	r2,zero
  8025d0:	0021883a 	mov	r16,zero
  8025d4:	002b883a 	mov	r21,zero
  8025d8:	003f9206 	br	802424 <__alt_data_end+0xff802424>
  8025dc:	8c012e36 	bltu	r17,r16,802a98 <__divdf3+0x7f0>
  8025e0:	84412c26 	beq	r16,r17,802a94 <__divdf3+0x7ec>
  8025e4:	a82f883a 	mov	r23,r21
  8025e8:	18ffffc4 	addi	r3,r3,-1
  8025ec:	002b883a 	mov	r21,zero
  8025f0:	a004d63a 	srli	r2,r20,24
  8025f4:	8822923a 	slli	r17,r17,8
  8025f8:	a028923a 	slli	r20,r20,8
  8025fc:	8009883a 	mov	r4,r16
  802600:	88acb03a 	or	r22,r17,r2
  802604:	dd000015 	stw	r20,0(sp)
  802608:	b028d43a 	srli	r20,r22,16
  80260c:	d8c00215 	stw	r3,8(sp)
  802610:	b4bfffcc 	andi	r18,r22,65535
  802614:	a00b883a 	mov	r5,r20
  802618:	08019180 	call	801918 <__udivsi3>
  80261c:	100b883a 	mov	r5,r2
  802620:	9009883a 	mov	r4,r18
  802624:	1023883a 	mov	r17,r2
  802628:	08019d40 	call	8019d4 <__mulsi3>
  80262c:	8009883a 	mov	r4,r16
  802630:	a00b883a 	mov	r5,r20
  802634:	1039883a 	mov	fp,r2
  802638:	080197c0 	call	80197c <__umodsi3>
  80263c:	1004943a 	slli	r2,r2,16
  802640:	b808d43a 	srli	r4,r23,16
  802644:	d8c00217 	ldw	r3,8(sp)
  802648:	2084b03a 	or	r2,r4,r2
  80264c:	1700062e 	bgeu	r2,fp,802668 <__divdf3+0x3c0>
  802650:	1585883a 	add	r2,r2,r22
  802654:	893fffc4 	addi	r4,r17,-1
  802658:	15811d36 	bltu	r2,r22,802ad0 <__divdf3+0x828>
  80265c:	17011c2e 	bgeu	r2,fp,802ad0 <__divdf3+0x828>
  802660:	8c7fff84 	addi	r17,r17,-2
  802664:	1585883a 	add	r2,r2,r22
  802668:	1739c83a 	sub	fp,r2,fp
  80266c:	a00b883a 	mov	r5,r20
  802670:	e009883a 	mov	r4,fp
  802674:	d8c00215 	stw	r3,8(sp)
  802678:	08019180 	call	801918 <__udivsi3>
  80267c:	100b883a 	mov	r5,r2
  802680:	9009883a 	mov	r4,r18
  802684:	1021883a 	mov	r16,r2
  802688:	08019d40 	call	8019d4 <__mulsi3>
  80268c:	a00b883a 	mov	r5,r20
  802690:	e009883a 	mov	r4,fp
  802694:	d8800415 	stw	r2,16(sp)
  802698:	080197c0 	call	80197c <__umodsi3>
  80269c:	1004943a 	slli	r2,r2,16
  8026a0:	da000417 	ldw	r8,16(sp)
  8026a4:	bdffffcc 	andi	r23,r23,65535
  8026a8:	b884b03a 	or	r2,r23,r2
  8026ac:	d8c00217 	ldw	r3,8(sp)
  8026b0:	1200062e 	bgeu	r2,r8,8026cc <__divdf3+0x424>
  8026b4:	1585883a 	add	r2,r2,r22
  8026b8:	813fffc4 	addi	r4,r16,-1
  8026bc:	15810236 	bltu	r2,r22,802ac8 <__divdf3+0x820>
  8026c0:	1201012e 	bgeu	r2,r8,802ac8 <__divdf3+0x820>
  8026c4:	843fff84 	addi	r16,r16,-2
  8026c8:	1585883a 	add	r2,r2,r22
  8026cc:	8822943a 	slli	r17,r17,16
  8026d0:	d9800017 	ldw	r6,0(sp)
  8026d4:	1211c83a 	sub	r8,r2,r8
  8026d8:	8c22b03a 	or	r17,r17,r16
  8026dc:	373fffcc 	andi	fp,r6,65535
  8026e0:	8abfffcc 	andi	r10,r17,65535
  8026e4:	8820d43a 	srli	r16,r17,16
  8026e8:	5009883a 	mov	r4,r10
  8026ec:	e00b883a 	mov	r5,fp
  8026f0:	302ed43a 	srli	r23,r6,16
  8026f4:	d8c00215 	stw	r3,8(sp)
  8026f8:	da000415 	stw	r8,16(sp)
  8026fc:	da800115 	stw	r10,4(sp)
  802700:	08019d40 	call	8019d4 <__mulsi3>
  802704:	800b883a 	mov	r5,r16
  802708:	e009883a 	mov	r4,fp
  80270c:	d8800515 	stw	r2,20(sp)
  802710:	08019d40 	call	8019d4 <__mulsi3>
  802714:	8009883a 	mov	r4,r16
  802718:	b80b883a 	mov	r5,r23
  80271c:	d8800315 	stw	r2,12(sp)
  802720:	08019d40 	call	8019d4 <__mulsi3>
  802724:	da800117 	ldw	r10,4(sp)
  802728:	b80b883a 	mov	r5,r23
  80272c:	1021883a 	mov	r16,r2
  802730:	5009883a 	mov	r4,r10
  802734:	08019d40 	call	8019d4 <__mulsi3>
  802738:	d9c00517 	ldw	r7,20(sp)
  80273c:	da400317 	ldw	r9,12(sp)
  802740:	d8c00217 	ldw	r3,8(sp)
  802744:	3808d43a 	srli	r4,r7,16
  802748:	1245883a 	add	r2,r2,r9
  80274c:	da000417 	ldw	r8,16(sp)
  802750:	2085883a 	add	r2,r4,r2
  802754:	1240022e 	bgeu	r2,r9,802760 <__divdf3+0x4b8>
  802758:	01000074 	movhi	r4,1
  80275c:	8121883a 	add	r16,r16,r4
  802760:	1008d43a 	srli	r4,r2,16
  802764:	1004943a 	slli	r2,r2,16
  802768:	39ffffcc 	andi	r7,r7,65535
  80276c:	2409883a 	add	r4,r4,r16
  802770:	11c5883a 	add	r2,r2,r7
  802774:	4100bb36 	bltu	r8,r4,802a64 <__divdf3+0x7bc>
  802778:	4100d726 	beq	r8,r4,802ad8 <__divdf3+0x830>
  80277c:	4109c83a 	sub	r4,r8,r4
  802780:	a8a1c83a 	sub	r16,r21,r2
  802784:	ac2b803a 	cmpltu	r21,r21,r16
  802788:	256bc83a 	sub	r21,r4,r21
  80278c:	b540d926 	beq	r22,r21,802af4 <__divdf3+0x84c>
  802790:	a00b883a 	mov	r5,r20
  802794:	a809883a 	mov	r4,r21
  802798:	d8c00215 	stw	r3,8(sp)
  80279c:	08019180 	call	801918 <__udivsi3>
  8027a0:	100b883a 	mov	r5,r2
  8027a4:	9009883a 	mov	r4,r18
  8027a8:	d8800515 	stw	r2,20(sp)
  8027ac:	08019d40 	call	8019d4 <__mulsi3>
  8027b0:	a809883a 	mov	r4,r21
  8027b4:	a00b883a 	mov	r5,r20
  8027b8:	d8800415 	stw	r2,16(sp)
  8027bc:	080197c0 	call	80197c <__umodsi3>
  8027c0:	1004943a 	slli	r2,r2,16
  8027c4:	8008d43a 	srli	r4,r16,16
  8027c8:	da000417 	ldw	r8,16(sp)
  8027cc:	d8c00217 	ldw	r3,8(sp)
  8027d0:	2084b03a 	or	r2,r4,r2
  8027d4:	d9c00517 	ldw	r7,20(sp)
  8027d8:	1200062e 	bgeu	r2,r8,8027f4 <__divdf3+0x54c>
  8027dc:	1585883a 	add	r2,r2,r22
  8027e0:	393fffc4 	addi	r4,r7,-1
  8027e4:	1580c536 	bltu	r2,r22,802afc <__divdf3+0x854>
  8027e8:	1200c42e 	bgeu	r2,r8,802afc <__divdf3+0x854>
  8027ec:	39ffff84 	addi	r7,r7,-2
  8027f0:	1585883a 	add	r2,r2,r22
  8027f4:	122bc83a 	sub	r21,r2,r8
  8027f8:	a00b883a 	mov	r5,r20
  8027fc:	a809883a 	mov	r4,r21
  802800:	d8c00215 	stw	r3,8(sp)
  802804:	d9c00515 	stw	r7,20(sp)
  802808:	08019180 	call	801918 <__udivsi3>
  80280c:	9009883a 	mov	r4,r18
  802810:	100b883a 	mov	r5,r2
  802814:	d8800415 	stw	r2,16(sp)
  802818:	08019d40 	call	8019d4 <__mulsi3>
  80281c:	a809883a 	mov	r4,r21
  802820:	a00b883a 	mov	r5,r20
  802824:	1025883a 	mov	r18,r2
  802828:	080197c0 	call	80197c <__umodsi3>
  80282c:	1004943a 	slli	r2,r2,16
  802830:	813fffcc 	andi	r4,r16,65535
  802834:	d8c00217 	ldw	r3,8(sp)
  802838:	20a0b03a 	or	r16,r4,r2
  80283c:	d9c00517 	ldw	r7,20(sp)
  802840:	da000417 	ldw	r8,16(sp)
  802844:	8480062e 	bgeu	r16,r18,802860 <__divdf3+0x5b8>
  802848:	85a1883a 	add	r16,r16,r22
  80284c:	40bfffc4 	addi	r2,r8,-1
  802850:	8580ac36 	bltu	r16,r22,802b04 <__divdf3+0x85c>
  802854:	8480ab2e 	bgeu	r16,r18,802b04 <__divdf3+0x85c>
  802858:	423fff84 	addi	r8,r8,-2
  80285c:	85a1883a 	add	r16,r16,r22
  802860:	3804943a 	slli	r2,r7,16
  802864:	84a1c83a 	sub	r16,r16,r18
  802868:	e009883a 	mov	r4,fp
  80286c:	1228b03a 	or	r20,r2,r8
  802870:	a1ffffcc 	andi	r7,r20,65535
  802874:	a024d43a 	srli	r18,r20,16
  802878:	380b883a 	mov	r5,r7
  80287c:	d8c00215 	stw	r3,8(sp)
  802880:	d9c00515 	stw	r7,20(sp)
  802884:	08019d40 	call	8019d4 <__mulsi3>
  802888:	900b883a 	mov	r5,r18
  80288c:	e009883a 	mov	r4,fp
  802890:	102b883a 	mov	r21,r2
  802894:	08019d40 	call	8019d4 <__mulsi3>
  802898:	900b883a 	mov	r5,r18
  80289c:	b809883a 	mov	r4,r23
  8028a0:	1039883a 	mov	fp,r2
  8028a4:	08019d40 	call	8019d4 <__mulsi3>
  8028a8:	d9c00517 	ldw	r7,20(sp)
  8028ac:	b80b883a 	mov	r5,r23
  8028b0:	1025883a 	mov	r18,r2
  8028b4:	3809883a 	mov	r4,r7
  8028b8:	08019d40 	call	8019d4 <__mulsi3>
  8028bc:	a808d43a 	srli	r4,r21,16
  8028c0:	1705883a 	add	r2,r2,fp
  8028c4:	d8c00217 	ldw	r3,8(sp)
  8028c8:	2085883a 	add	r2,r4,r2
  8028cc:	1700022e 	bgeu	r2,fp,8028d8 <__divdf3+0x630>
  8028d0:	01000074 	movhi	r4,1
  8028d4:	9125883a 	add	r18,r18,r4
  8028d8:	1008d43a 	srli	r4,r2,16
  8028dc:	1004943a 	slli	r2,r2,16
  8028e0:	ad7fffcc 	andi	r21,r21,65535
  8028e4:	2489883a 	add	r4,r4,r18
  8028e8:	1545883a 	add	r2,r2,r21
  8028ec:	81003836 	bltu	r16,r4,8029d0 <__divdf3+0x728>
  8028f0:	81003626 	beq	r16,r4,8029cc <__divdf3+0x724>
  8028f4:	a5000054 	ori	r20,r20,1
  8028f8:	1880ffc4 	addi	r2,r3,1023
  8028fc:	00bf2e0e 	bge	zero,r2,8025b8 <__alt_data_end+0xff8025b8>
  802900:	a10001cc 	andi	r4,r20,7
  802904:	20000726 	beq	r4,zero,802924 <__divdf3+0x67c>
  802908:	a10003cc 	andi	r4,r20,15
  80290c:	01400104 	movi	r5,4
  802910:	21400426 	beq	r4,r5,802924 <__divdf3+0x67c>
  802914:	a149883a 	add	r4,r20,r5
  802918:	2529803a 	cmpltu	r20,r4,r20
  80291c:	8d23883a 	add	r17,r17,r20
  802920:	2029883a 	mov	r20,r4
  802924:	8900402c 	andhi	r4,r17,256
  802928:	20000426 	beq	r4,zero,80293c <__divdf3+0x694>
  80292c:	18810004 	addi	r2,r3,1024
  802930:	00ffc034 	movhi	r3,65280
  802934:	18ffffc4 	addi	r3,r3,-1
  802938:	88e2703a 	and	r17,r17,r3
  80293c:	00c1ff84 	movi	r3,2046
  802940:	18beb416 	blt	r3,r2,802414 <__alt_data_end+0xff802414>
  802944:	a028d0fa 	srli	r20,r20,3
  802948:	882a977a 	slli	r21,r17,29
  80294c:	8820927a 	slli	r16,r17,9
  802950:	1081ffcc 	andi	r2,r2,2047
  802954:	ad2ab03a 	or	r21,r21,r20
  802958:	8020d33a 	srli	r16,r16,12
  80295c:	9900004c 	andi	r4,r19,1
  802960:	003eb006 	br	802424 <__alt_data_end+0xff802424>
  802964:	8080022c 	andhi	r2,r16,8
  802968:	10001226 	beq	r2,zero,8029b4 <__divdf3+0x70c>
  80296c:	8880022c 	andhi	r2,r17,8
  802970:	1000101e 	bne	r2,zero,8029b4 <__divdf3+0x70c>
  802974:	00800434 	movhi	r2,16
  802978:	8c000234 	orhi	r16,r17,8
  80297c:	10bfffc4 	addi	r2,r2,-1
  802980:	b809883a 	mov	r4,r23
  802984:	80a0703a 	and	r16,r16,r2
  802988:	a02b883a 	mov	r21,r20
  80298c:	003f0806 	br	8025b0 <__alt_data_end+0xff8025b0>
  802990:	008000c4 	movi	r2,3
  802994:	3880b126 	beq	r7,r2,802c5c <__divdf3+0x9b4>
  802998:	00800044 	movi	r2,1
  80299c:	38805b1e 	bne	r7,r2,802b0c <__divdf3+0x864>
  8029a0:	e009883a 	mov	r4,fp
  8029a4:	0005883a 	mov	r2,zero
  8029a8:	0021883a 	mov	r16,zero
  8029ac:	002b883a 	mov	r21,zero
  8029b0:	003e9c06 	br	802424 <__alt_data_end+0xff802424>
  8029b4:	00800434 	movhi	r2,16
  8029b8:	84000234 	orhi	r16,r16,8
  8029bc:	10bfffc4 	addi	r2,r2,-1
  8029c0:	b009883a 	mov	r4,r22
  8029c4:	80a0703a 	and	r16,r16,r2
  8029c8:	003ef906 	br	8025b0 <__alt_data_end+0xff8025b0>
  8029cc:	103fca26 	beq	r2,zero,8028f8 <__alt_data_end+0xff8028f8>
  8029d0:	b421883a 	add	r16,r22,r16
  8029d4:	a17fffc4 	addi	r5,r20,-1
  8029d8:	8580422e 	bgeu	r16,r22,802ae4 <__divdf3+0x83c>
  8029dc:	2829883a 	mov	r20,r5
  8029e0:	813fc41e 	bne	r16,r4,8028f4 <__alt_data_end+0xff8028f4>
  8029e4:	d9800017 	ldw	r6,0(sp)
  8029e8:	30bfc21e 	bne	r6,r2,8028f4 <__alt_data_end+0xff8028f4>
  8029ec:	003fc206 	br	8028f8 <__alt_data_end+0xff8028f8>
  8029f0:	143ff604 	addi	r16,r2,-40
  8029f4:	8c20983a 	sll	r16,r17,r16
  8029f8:	002b883a 	mov	r21,zero
  8029fc:	003eb406 	br	8024d0 <__alt_data_end+0xff8024d0>
  802a00:	d9800215 	stw	r6,8(sp)
  802a04:	d9c00515 	stw	r7,20(sp)
  802a08:	da000415 	stw	r8,16(sp)
  802a0c:	08035640 	call	803564 <__clzsi2>
  802a10:	10800804 	addi	r2,r2,32
  802a14:	da000417 	ldw	r8,16(sp)
  802a18:	d9c00517 	ldw	r7,20(sp)
  802a1c:	d9800217 	ldw	r6,8(sp)
  802a20:	003ea106 	br	8024a8 <__alt_data_end+0xff8024a8>
  802a24:	147ff604 	addi	r17,r2,-40
  802a28:	3462983a 	sll	r17,r6,r17
  802a2c:	0029883a 	mov	r20,zero
  802a30:	003ec906 	br	802558 <__alt_data_end+0xff802558>
  802a34:	3009883a 	mov	r4,r6
  802a38:	d9400115 	stw	r5,4(sp)
  802a3c:	d9800215 	stw	r6,8(sp)
  802a40:	da000415 	stw	r8,16(sp)
  802a44:	da400315 	stw	r9,12(sp)
  802a48:	08035640 	call	803564 <__clzsi2>
  802a4c:	10800804 	addi	r2,r2,32
  802a50:	da400317 	ldw	r9,12(sp)
  802a54:	da000417 	ldw	r8,16(sp)
  802a58:	d9800217 	ldw	r6,8(sp)
  802a5c:	d9400117 	ldw	r5,4(sp)
  802a60:	003eb306 	br	802530 <__alt_data_end+0xff802530>
  802a64:	d9800017 	ldw	r6,0(sp)
  802a68:	a9ab883a 	add	r21,r21,r6
  802a6c:	a98b803a 	cmpltu	r5,r21,r6
  802a70:	2d8b883a 	add	r5,r5,r22
  802a74:	2a11883a 	add	r8,r5,r8
  802a78:	897fffc4 	addi	r5,r17,-1
  802a7c:	b2000c2e 	bgeu	r22,r8,802ab0 <__divdf3+0x808>
  802a80:	41003f36 	bltu	r8,r4,802b80 <__divdf3+0x8d8>
  802a84:	22006c26 	beq	r4,r8,802c38 <__divdf3+0x990>
  802a88:	4109c83a 	sub	r4,r8,r4
  802a8c:	2823883a 	mov	r17,r5
  802a90:	003f3b06 	br	802780 <__alt_data_end+0xff802780>
  802a94:	ad3ed336 	bltu	r21,r20,8025e4 <__alt_data_end+0xff8025e4>
  802a98:	a804d07a 	srli	r2,r21,1
  802a9c:	802e97fa 	slli	r23,r16,31
  802aa0:	a82a97fa 	slli	r21,r21,31
  802aa4:	8020d07a 	srli	r16,r16,1
  802aa8:	b8aeb03a 	or	r23,r23,r2
  802aac:	003ed006 	br	8025f0 <__alt_data_end+0xff8025f0>
  802ab0:	b23ff51e 	bne	r22,r8,802a88 <__alt_data_end+0xff802a88>
  802ab4:	d9800017 	ldw	r6,0(sp)
  802ab8:	a9bff12e 	bgeu	r21,r6,802a80 <__alt_data_end+0xff802a80>
  802abc:	b109c83a 	sub	r4,r22,r4
  802ac0:	2823883a 	mov	r17,r5
  802ac4:	003f2e06 	br	802780 <__alt_data_end+0xff802780>
  802ac8:	2021883a 	mov	r16,r4
  802acc:	003eff06 	br	8026cc <__alt_data_end+0xff8026cc>
  802ad0:	2023883a 	mov	r17,r4
  802ad4:	003ee406 	br	802668 <__alt_data_end+0xff802668>
  802ad8:	a8bfe236 	bltu	r21,r2,802a64 <__alt_data_end+0xff802a64>
  802adc:	0009883a 	mov	r4,zero
  802ae0:	003f2706 	br	802780 <__alt_data_end+0xff802780>
  802ae4:	81002d36 	bltu	r16,r4,802b9c <__divdf3+0x8f4>
  802ae8:	24005626 	beq	r4,r16,802c44 <__divdf3+0x99c>
  802aec:	2829883a 	mov	r20,r5
  802af0:	003f8006 	br	8028f4 <__alt_data_end+0xff8028f4>
  802af4:	053fffc4 	movi	r20,-1
  802af8:	003f7f06 	br	8028f8 <__alt_data_end+0xff8028f8>
  802afc:	200f883a 	mov	r7,r4
  802b00:	003f3c06 	br	8027f4 <__alt_data_end+0xff8027f4>
  802b04:	1011883a 	mov	r8,r2
  802b08:	003f5506 	br	802860 <__alt_data_end+0xff802860>
  802b0c:	e027883a 	mov	r19,fp
  802b10:	003f7906 	br	8028f8 <__alt_data_end+0xff8028f8>
  802b14:	010007c4 	movi	r4,31
  802b18:	20c02816 	blt	r4,r3,802bbc <__divdf3+0x914>
  802b1c:	00800804 	movi	r2,32
  802b20:	10c5c83a 	sub	r2,r2,r3
  802b24:	888a983a 	sll	r5,r17,r2
  802b28:	a0c8d83a 	srl	r4,r20,r3
  802b2c:	a084983a 	sll	r2,r20,r2
  802b30:	88e2d83a 	srl	r17,r17,r3
  802b34:	2906b03a 	or	r3,r5,r4
  802b38:	1004c03a 	cmpne	r2,r2,zero
  802b3c:	1886b03a 	or	r3,r3,r2
  802b40:	188001cc 	andi	r2,r3,7
  802b44:	10000726 	beq	r2,zero,802b64 <__divdf3+0x8bc>
  802b48:	188003cc 	andi	r2,r3,15
  802b4c:	01000104 	movi	r4,4
  802b50:	11000426 	beq	r2,r4,802b64 <__divdf3+0x8bc>
  802b54:	1805883a 	mov	r2,r3
  802b58:	10c00104 	addi	r3,r2,4
  802b5c:	1885803a 	cmpltu	r2,r3,r2
  802b60:	88a3883a 	add	r17,r17,r2
  802b64:	8880202c 	andhi	r2,r17,128
  802b68:	10002926 	beq	r2,zero,802c10 <__divdf3+0x968>
  802b6c:	9900004c 	andi	r4,r19,1
  802b70:	00800044 	movi	r2,1
  802b74:	0021883a 	mov	r16,zero
  802b78:	002b883a 	mov	r21,zero
  802b7c:	003e2906 	br	802424 <__alt_data_end+0xff802424>
  802b80:	d9800017 	ldw	r6,0(sp)
  802b84:	8c7fff84 	addi	r17,r17,-2
  802b88:	a9ab883a 	add	r21,r21,r6
  802b8c:	a98b803a 	cmpltu	r5,r21,r6
  802b90:	2d8b883a 	add	r5,r5,r22
  802b94:	2a11883a 	add	r8,r5,r8
  802b98:	003ef806 	br	80277c <__alt_data_end+0xff80277c>
  802b9c:	d9800017 	ldw	r6,0(sp)
  802ba0:	318f883a 	add	r7,r6,r6
  802ba4:	398b803a 	cmpltu	r5,r7,r6
  802ba8:	2d8d883a 	add	r6,r5,r22
  802bac:	81a1883a 	add	r16,r16,r6
  802bb0:	a17fff84 	addi	r5,r20,-2
  802bb4:	d9c00015 	stw	r7,0(sp)
  802bb8:	003f8806 	br	8029dc <__alt_data_end+0xff8029dc>
  802bbc:	013ff844 	movi	r4,-31
  802bc0:	2085c83a 	sub	r2,r4,r2
  802bc4:	8888d83a 	srl	r4,r17,r2
  802bc8:	00800804 	movi	r2,32
  802bcc:	18802126 	beq	r3,r2,802c54 <__divdf3+0x9ac>
  802bd0:	04001004 	movi	r16,64
  802bd4:	80c7c83a 	sub	r3,r16,r3
  802bd8:	88e0983a 	sll	r16,r17,r3
  802bdc:	8504b03a 	or	r2,r16,r20
  802be0:	1004c03a 	cmpne	r2,r2,zero
  802be4:	2084b03a 	or	r2,r4,r2
  802be8:	144001cc 	andi	r17,r2,7
  802bec:	88000d1e 	bne	r17,zero,802c24 <__divdf3+0x97c>
  802bf0:	0021883a 	mov	r16,zero
  802bf4:	102ad0fa 	srli	r21,r2,3
  802bf8:	9900004c 	andi	r4,r19,1
  802bfc:	0005883a 	mov	r2,zero
  802c00:	ac6ab03a 	or	r21,r21,r17
  802c04:	003e0706 	br	802424 <__alt_data_end+0xff802424>
  802c08:	1007883a 	mov	r3,r2
  802c0c:	0023883a 	mov	r17,zero
  802c10:	8820927a 	slli	r16,r17,9
  802c14:	1805883a 	mov	r2,r3
  802c18:	8822977a 	slli	r17,r17,29
  802c1c:	8020d33a 	srli	r16,r16,12
  802c20:	003ff406 	br	802bf4 <__alt_data_end+0xff802bf4>
  802c24:	10c003cc 	andi	r3,r2,15
  802c28:	01000104 	movi	r4,4
  802c2c:	193ff626 	beq	r3,r4,802c08 <__alt_data_end+0xff802c08>
  802c30:	0023883a 	mov	r17,zero
  802c34:	003fc806 	br	802b58 <__alt_data_end+0xff802b58>
  802c38:	a8bfd136 	bltu	r21,r2,802b80 <__alt_data_end+0xff802b80>
  802c3c:	2823883a 	mov	r17,r5
  802c40:	003fa606 	br	802adc <__alt_data_end+0xff802adc>
  802c44:	d9800017 	ldw	r6,0(sp)
  802c48:	30bfd436 	bltu	r6,r2,802b9c <__alt_data_end+0xff802b9c>
  802c4c:	2829883a 	mov	r20,r5
  802c50:	003f6406 	br	8029e4 <__alt_data_end+0xff8029e4>
  802c54:	0021883a 	mov	r16,zero
  802c58:	003fe006 	br	802bdc <__alt_data_end+0xff802bdc>
  802c5c:	00800434 	movhi	r2,16
  802c60:	8c000234 	orhi	r16,r17,8
  802c64:	10bfffc4 	addi	r2,r2,-1
  802c68:	e009883a 	mov	r4,fp
  802c6c:	80a0703a 	and	r16,r16,r2
  802c70:	a02b883a 	mov	r21,r20
  802c74:	003e4e06 	br	8025b0 <__alt_data_end+0xff8025b0>

00802c78 <__muldf3>:
  802c78:	deffee04 	addi	sp,sp,-72
  802c7c:	dd000c15 	stw	r20,48(sp)
  802c80:	2828d53a 	srli	r20,r5,20
  802c84:	ddc00f15 	stw	r23,60(sp)
  802c88:	282ed7fa 	srli	r23,r5,31
  802c8c:	dc000815 	stw	r16,32(sp)
  802c90:	04000434 	movhi	r16,16
  802c94:	dcc00b15 	stw	r19,44(sp)
  802c98:	843fffc4 	addi	r16,r16,-1
  802c9c:	dfc01115 	stw	ra,68(sp)
  802ca0:	df001015 	stw	fp,64(sp)
  802ca4:	dd800e15 	stw	r22,56(sp)
  802ca8:	dd400d15 	stw	r21,52(sp)
  802cac:	dc800a15 	stw	r18,40(sp)
  802cb0:	dc400915 	stw	r17,36(sp)
  802cb4:	a501ffcc 	andi	r20,r20,2047
  802cb8:	2c20703a 	and	r16,r5,r16
  802cbc:	b827883a 	mov	r19,r23
  802cc0:	ba403fcc 	andi	r9,r23,255
  802cc4:	a0006026 	beq	r20,zero,802e48 <__muldf3+0x1d0>
  802cc8:	0081ffc4 	movi	r2,2047
  802ccc:	202d883a 	mov	r22,r4
  802cd0:	a0803626 	beq	r20,r2,802dac <__muldf3+0x134>
  802cd4:	84000434 	orhi	r16,r16,16
  802cd8:	200ad77a 	srli	r5,r4,29
  802cdc:	800490fa 	slli	r2,r16,3
  802ce0:	202c90fa 	slli	r22,r4,3
  802ce4:	a53f0044 	addi	r20,r20,-1023
  802ce8:	28a0b03a 	or	r16,r5,r2
  802cec:	002b883a 	mov	r21,zero
  802cf0:	000b883a 	mov	r5,zero
  802cf4:	3804d53a 	srli	r2,r7,20
  802cf8:	3838d7fa 	srli	fp,r7,31
  802cfc:	04400434 	movhi	r17,16
  802d00:	8c7fffc4 	addi	r17,r17,-1
  802d04:	1081ffcc 	andi	r2,r2,2047
  802d08:	3025883a 	mov	r18,r6
  802d0c:	3c62703a 	and	r17,r7,r17
  802d10:	e2803fcc 	andi	r10,fp,255
  802d14:	10006d26 	beq	r2,zero,802ecc <__muldf3+0x254>
  802d18:	00c1ffc4 	movi	r3,2047
  802d1c:	10c06526 	beq	r2,r3,802eb4 <__muldf3+0x23c>
  802d20:	8c400434 	orhi	r17,r17,16
  802d24:	300ed77a 	srli	r7,r6,29
  802d28:	880690fa 	slli	r3,r17,3
  802d2c:	302490fa 	slli	r18,r6,3
  802d30:	10bf0044 	addi	r2,r2,-1023
  802d34:	38e2b03a 	or	r17,r7,r3
  802d38:	000f883a 	mov	r7,zero
  802d3c:	a087883a 	add	r3,r20,r2
  802d40:	010003c4 	movi	r4,15
  802d44:	3d44b03a 	or	r2,r7,r21
  802d48:	e5ccf03a 	xor	r6,fp,r23
  802d4c:	1a000044 	addi	r8,r3,1
  802d50:	20809b36 	bltu	r4,r2,802fc0 <__muldf3+0x348>
  802d54:	100490ba 	slli	r2,r2,2
  802d58:	01002034 	movhi	r4,128
  802d5c:	210b5b04 	addi	r4,r4,11628
  802d60:	1105883a 	add	r2,r2,r4
  802d64:	10800017 	ldw	r2,0(r2)
  802d68:	1000683a 	jmp	r2
  802d6c:	00802fc0 	call	802fc <__alt_mem_sdram-0x77fd04>
  802d70:	00802dcc 	andi	r2,zero,183
  802d74:	00802dcc 	andi	r2,zero,183
  802d78:	00802dc8 	cmpgei	r2,zero,183
  802d7c:	00802f9c 	xori	r2,zero,190
  802d80:	00802f9c 	xori	r2,zero,190
  802d84:	00802f84 	movi	r2,190
  802d88:	00802dc8 	cmpgei	r2,zero,183
  802d8c:	00802f9c 	xori	r2,zero,190
  802d90:	00802f84 	movi	r2,190
  802d94:	00802f9c 	xori	r2,zero,190
  802d98:	00802dc8 	cmpgei	r2,zero,183
  802d9c:	00802fac 	andhi	r2,zero,190
  802da0:	00802fac 	andhi	r2,zero,190
  802da4:	00802fac 	andhi	r2,zero,190
  802da8:	0080330c 	andi	r2,zero,204
  802dac:	2404b03a 	or	r2,r4,r16
  802db0:	1000711e 	bne	r2,zero,802f78 <__muldf3+0x300>
  802db4:	05400204 	movi	r21,8
  802db8:	0021883a 	mov	r16,zero
  802dbc:	002d883a 	mov	r22,zero
  802dc0:	01400084 	movi	r5,2
  802dc4:	003fcb06 	br	802cf4 <__alt_data_end+0xff802cf4>
  802dc8:	500d883a 	mov	r6,r10
  802dcc:	00800084 	movi	r2,2
  802dd0:	38805926 	beq	r7,r2,802f38 <__muldf3+0x2c0>
  802dd4:	008000c4 	movi	r2,3
  802dd8:	3881bb26 	beq	r7,r2,8034c8 <__muldf3+0x850>
  802ddc:	00800044 	movi	r2,1
  802de0:	3881961e 	bne	r7,r2,80343c <__muldf3+0x7c4>
  802de4:	3027883a 	mov	r19,r6
  802de8:	0005883a 	mov	r2,zero
  802dec:	0021883a 	mov	r16,zero
  802df0:	002d883a 	mov	r22,zero
  802df4:	1004953a 	slli	r2,r2,20
  802df8:	98c03fcc 	andi	r3,r19,255
  802dfc:	04400434 	movhi	r17,16
  802e00:	8c7fffc4 	addi	r17,r17,-1
  802e04:	180697fa 	slli	r3,r3,31
  802e08:	8460703a 	and	r16,r16,r17
  802e0c:	80a0b03a 	or	r16,r16,r2
  802e10:	80c6b03a 	or	r3,r16,r3
  802e14:	b005883a 	mov	r2,r22
  802e18:	dfc01117 	ldw	ra,68(sp)
  802e1c:	df001017 	ldw	fp,64(sp)
  802e20:	ddc00f17 	ldw	r23,60(sp)
  802e24:	dd800e17 	ldw	r22,56(sp)
  802e28:	dd400d17 	ldw	r21,52(sp)
  802e2c:	dd000c17 	ldw	r20,48(sp)
  802e30:	dcc00b17 	ldw	r19,44(sp)
  802e34:	dc800a17 	ldw	r18,40(sp)
  802e38:	dc400917 	ldw	r17,36(sp)
  802e3c:	dc000817 	ldw	r16,32(sp)
  802e40:	dec01204 	addi	sp,sp,72
  802e44:	f800283a 	ret
  802e48:	2404b03a 	or	r2,r4,r16
  802e4c:	202b883a 	mov	r21,r4
  802e50:	10004426 	beq	r2,zero,802f64 <__muldf3+0x2ec>
  802e54:	80015126 	beq	r16,zero,80339c <__muldf3+0x724>
  802e58:	8009883a 	mov	r4,r16
  802e5c:	d9800715 	stw	r6,28(sp)
  802e60:	d9c00215 	stw	r7,8(sp)
  802e64:	da400415 	stw	r9,16(sp)
  802e68:	08035640 	call	803564 <__clzsi2>
  802e6c:	d9800717 	ldw	r6,28(sp)
  802e70:	d9c00217 	ldw	r7,8(sp)
  802e74:	da400417 	ldw	r9,16(sp)
  802e78:	113ffd44 	addi	r4,r2,-11
  802e7c:	00c00704 	movi	r3,28
  802e80:	19014216 	blt	r3,r4,80338c <__muldf3+0x714>
  802e84:	00c00744 	movi	r3,29
  802e88:	15bffe04 	addi	r22,r2,-8
  802e8c:	1907c83a 	sub	r3,r3,r4
  802e90:	85a0983a 	sll	r16,r16,r22
  802e94:	a8c6d83a 	srl	r3,r21,r3
  802e98:	adac983a 	sll	r22,r21,r22
  802e9c:	1c20b03a 	or	r16,r3,r16
  802ea0:	1080fcc4 	addi	r2,r2,1011
  802ea4:	00a9c83a 	sub	r20,zero,r2
  802ea8:	002b883a 	mov	r21,zero
  802eac:	000b883a 	mov	r5,zero
  802eb0:	003f9006 	br	802cf4 <__alt_data_end+0xff802cf4>
  802eb4:	3446b03a 	or	r3,r6,r17
  802eb8:	1800281e 	bne	r3,zero,802f5c <__muldf3+0x2e4>
  802ebc:	0023883a 	mov	r17,zero
  802ec0:	0025883a 	mov	r18,zero
  802ec4:	01c00084 	movi	r7,2
  802ec8:	003f9c06 	br	802d3c <__alt_data_end+0xff802d3c>
  802ecc:	3446b03a 	or	r3,r6,r17
  802ed0:	18001e26 	beq	r3,zero,802f4c <__muldf3+0x2d4>
  802ed4:	88012126 	beq	r17,zero,80335c <__muldf3+0x6e4>
  802ed8:	8809883a 	mov	r4,r17
  802edc:	d9400215 	stw	r5,8(sp)
  802ee0:	d9800715 	stw	r6,28(sp)
  802ee4:	da400415 	stw	r9,16(sp)
  802ee8:	da800315 	stw	r10,12(sp)
  802eec:	08035640 	call	803564 <__clzsi2>
  802ef0:	d9400217 	ldw	r5,8(sp)
  802ef4:	d9800717 	ldw	r6,28(sp)
  802ef8:	da400417 	ldw	r9,16(sp)
  802efc:	da800317 	ldw	r10,12(sp)
  802f00:	113ffd44 	addi	r4,r2,-11
  802f04:	00c00704 	movi	r3,28
  802f08:	19011016 	blt	r3,r4,80334c <__muldf3+0x6d4>
  802f0c:	00c00744 	movi	r3,29
  802f10:	14bffe04 	addi	r18,r2,-8
  802f14:	1907c83a 	sub	r3,r3,r4
  802f18:	8ca2983a 	sll	r17,r17,r18
  802f1c:	30c6d83a 	srl	r3,r6,r3
  802f20:	34a4983a 	sll	r18,r6,r18
  802f24:	1c62b03a 	or	r17,r3,r17
  802f28:	1080fcc4 	addi	r2,r2,1011
  802f2c:	0085c83a 	sub	r2,zero,r2
  802f30:	000f883a 	mov	r7,zero
  802f34:	003f8106 	br	802d3c <__alt_data_end+0xff802d3c>
  802f38:	3027883a 	mov	r19,r6
  802f3c:	0081ffc4 	movi	r2,2047
  802f40:	0021883a 	mov	r16,zero
  802f44:	002d883a 	mov	r22,zero
  802f48:	003faa06 	br	802df4 <__alt_data_end+0xff802df4>
  802f4c:	0023883a 	mov	r17,zero
  802f50:	0025883a 	mov	r18,zero
  802f54:	01c00044 	movi	r7,1
  802f58:	003f7806 	br	802d3c <__alt_data_end+0xff802d3c>
  802f5c:	01c000c4 	movi	r7,3
  802f60:	003f7606 	br	802d3c <__alt_data_end+0xff802d3c>
  802f64:	05400104 	movi	r21,4
  802f68:	0021883a 	mov	r16,zero
  802f6c:	002d883a 	mov	r22,zero
  802f70:	01400044 	movi	r5,1
  802f74:	003f5f06 	br	802cf4 <__alt_data_end+0xff802cf4>
  802f78:	05400304 	movi	r21,12
  802f7c:	014000c4 	movi	r5,3
  802f80:	003f5c06 	br	802cf4 <__alt_data_end+0xff802cf4>
  802f84:	04000434 	movhi	r16,16
  802f88:	0027883a 	mov	r19,zero
  802f8c:	843fffc4 	addi	r16,r16,-1
  802f90:	05bfffc4 	movi	r22,-1
  802f94:	0081ffc4 	movi	r2,2047
  802f98:	003f9606 	br	802df4 <__alt_data_end+0xff802df4>
  802f9c:	8023883a 	mov	r17,r16
  802fa0:	b025883a 	mov	r18,r22
  802fa4:	280f883a 	mov	r7,r5
  802fa8:	003f8806 	br	802dcc <__alt_data_end+0xff802dcc>
  802fac:	8023883a 	mov	r17,r16
  802fb0:	b025883a 	mov	r18,r22
  802fb4:	480d883a 	mov	r6,r9
  802fb8:	280f883a 	mov	r7,r5
  802fbc:	003f8306 	br	802dcc <__alt_data_end+0xff802dcc>
  802fc0:	b026d43a 	srli	r19,r22,16
  802fc4:	902ed43a 	srli	r23,r18,16
  802fc8:	b5bfffcc 	andi	r22,r22,65535
  802fcc:	94bfffcc 	andi	r18,r18,65535
  802fd0:	b00b883a 	mov	r5,r22
  802fd4:	9009883a 	mov	r4,r18
  802fd8:	d8c00515 	stw	r3,20(sp)
  802fdc:	d9800715 	stw	r6,28(sp)
  802fe0:	da000615 	stw	r8,24(sp)
  802fe4:	08019d40 	call	8019d4 <__mulsi3>
  802fe8:	980b883a 	mov	r5,r19
  802fec:	9009883a 	mov	r4,r18
  802ff0:	1029883a 	mov	r20,r2
  802ff4:	08019d40 	call	8019d4 <__mulsi3>
  802ff8:	b80b883a 	mov	r5,r23
  802ffc:	9809883a 	mov	r4,r19
  803000:	102b883a 	mov	r21,r2
  803004:	08019d40 	call	8019d4 <__mulsi3>
  803008:	b809883a 	mov	r4,r23
  80300c:	b00b883a 	mov	r5,r22
  803010:	1039883a 	mov	fp,r2
  803014:	08019d40 	call	8019d4 <__mulsi3>
  803018:	a008d43a 	srli	r4,r20,16
  80301c:	1545883a 	add	r2,r2,r21
  803020:	d8c00517 	ldw	r3,20(sp)
  803024:	2085883a 	add	r2,r4,r2
  803028:	d9800717 	ldw	r6,28(sp)
  80302c:	da000617 	ldw	r8,24(sp)
  803030:	1540022e 	bgeu	r2,r21,80303c <__muldf3+0x3c4>
  803034:	01000074 	movhi	r4,1
  803038:	e139883a 	add	fp,fp,r4
  80303c:	100e943a 	slli	r7,r2,16
  803040:	1004d43a 	srli	r2,r2,16
  803044:	882ad43a 	srli	r21,r17,16
  803048:	a53fffcc 	andi	r20,r20,65535
  80304c:	8c7fffcc 	andi	r17,r17,65535
  803050:	3d29883a 	add	r20,r7,r20
  803054:	b00b883a 	mov	r5,r22
  803058:	8809883a 	mov	r4,r17
  80305c:	d8c00515 	stw	r3,20(sp)
  803060:	d9800715 	stw	r6,28(sp)
  803064:	da000615 	stw	r8,24(sp)
  803068:	dd000115 	stw	r20,4(sp)
  80306c:	d8800015 	stw	r2,0(sp)
  803070:	08019d40 	call	8019d4 <__mulsi3>
  803074:	980b883a 	mov	r5,r19
  803078:	8809883a 	mov	r4,r17
  80307c:	d8800215 	stw	r2,8(sp)
  803080:	08019d40 	call	8019d4 <__mulsi3>
  803084:	9809883a 	mov	r4,r19
  803088:	a80b883a 	mov	r5,r21
  80308c:	1029883a 	mov	r20,r2
  803090:	08019d40 	call	8019d4 <__mulsi3>
  803094:	b00b883a 	mov	r5,r22
  803098:	a809883a 	mov	r4,r21
  80309c:	d8800415 	stw	r2,16(sp)
  8030a0:	08019d40 	call	8019d4 <__mulsi3>
  8030a4:	d9c00217 	ldw	r7,8(sp)
  8030a8:	1505883a 	add	r2,r2,r20
  8030ac:	d8c00517 	ldw	r3,20(sp)
  8030b0:	3826d43a 	srli	r19,r7,16
  8030b4:	d9800717 	ldw	r6,28(sp)
  8030b8:	da000617 	ldw	r8,24(sp)
  8030bc:	9885883a 	add	r2,r19,r2
  8030c0:	da400417 	ldw	r9,16(sp)
  8030c4:	1500022e 	bgeu	r2,r20,8030d0 <__muldf3+0x458>
  8030c8:	01000074 	movhi	r4,1
  8030cc:	4913883a 	add	r9,r9,r4
  8030d0:	1028d43a 	srli	r20,r2,16
  8030d4:	1004943a 	slli	r2,r2,16
  8030d8:	802cd43a 	srli	r22,r16,16
  8030dc:	843fffcc 	andi	r16,r16,65535
  8030e0:	3cffffcc 	andi	r19,r7,65535
  8030e4:	9009883a 	mov	r4,r18
  8030e8:	800b883a 	mov	r5,r16
  8030ec:	a269883a 	add	r20,r20,r9
  8030f0:	d8c00515 	stw	r3,20(sp)
  8030f4:	d9800715 	stw	r6,28(sp)
  8030f8:	da000615 	stw	r8,24(sp)
  8030fc:	14e7883a 	add	r19,r2,r19
  803100:	08019d40 	call	8019d4 <__mulsi3>
  803104:	9009883a 	mov	r4,r18
  803108:	b00b883a 	mov	r5,r22
  80310c:	d8800315 	stw	r2,12(sp)
  803110:	08019d40 	call	8019d4 <__mulsi3>
  803114:	b809883a 	mov	r4,r23
  803118:	b00b883a 	mov	r5,r22
  80311c:	d8800215 	stw	r2,8(sp)
  803120:	08019d40 	call	8019d4 <__mulsi3>
  803124:	b80b883a 	mov	r5,r23
  803128:	8009883a 	mov	r4,r16
  80312c:	d8800415 	stw	r2,16(sp)
  803130:	08019d40 	call	8019d4 <__mulsi3>
  803134:	da800317 	ldw	r10,12(sp)
  803138:	d9c00217 	ldw	r7,8(sp)
  80313c:	d9000017 	ldw	r4,0(sp)
  803140:	502ed43a 	srli	r23,r10,16
  803144:	11c5883a 	add	r2,r2,r7
  803148:	24e5883a 	add	r18,r4,r19
  80314c:	b885883a 	add	r2,r23,r2
  803150:	d8c00517 	ldw	r3,20(sp)
  803154:	d9800717 	ldw	r6,28(sp)
  803158:	da000617 	ldw	r8,24(sp)
  80315c:	da400417 	ldw	r9,16(sp)
  803160:	11c0022e 	bgeu	r2,r7,80316c <__muldf3+0x4f4>
  803164:	01000074 	movhi	r4,1
  803168:	4913883a 	add	r9,r9,r4
  80316c:	100ed43a 	srli	r7,r2,16
  803170:	1004943a 	slli	r2,r2,16
  803174:	55ffffcc 	andi	r23,r10,65535
  803178:	3a53883a 	add	r9,r7,r9
  80317c:	8809883a 	mov	r4,r17
  803180:	800b883a 	mov	r5,r16
  803184:	d8c00515 	stw	r3,20(sp)
  803188:	d9800715 	stw	r6,28(sp)
  80318c:	da000615 	stw	r8,24(sp)
  803190:	da400415 	stw	r9,16(sp)
  803194:	15ef883a 	add	r23,r2,r23
  803198:	08019d40 	call	8019d4 <__mulsi3>
  80319c:	8809883a 	mov	r4,r17
  8031a0:	b00b883a 	mov	r5,r22
  8031a4:	d8800215 	stw	r2,8(sp)
  8031a8:	08019d40 	call	8019d4 <__mulsi3>
  8031ac:	b00b883a 	mov	r5,r22
  8031b0:	a809883a 	mov	r4,r21
  8031b4:	d8800315 	stw	r2,12(sp)
  8031b8:	08019d40 	call	8019d4 <__mulsi3>
  8031bc:	8009883a 	mov	r4,r16
  8031c0:	a80b883a 	mov	r5,r21
  8031c4:	1023883a 	mov	r17,r2
  8031c8:	08019d40 	call	8019d4 <__mulsi3>
  8031cc:	d9c00217 	ldw	r7,8(sp)
  8031d0:	da800317 	ldw	r10,12(sp)
  8031d4:	d8c00517 	ldw	r3,20(sp)
  8031d8:	3808d43a 	srli	r4,r7,16
  8031dc:	1285883a 	add	r2,r2,r10
  8031e0:	d9800717 	ldw	r6,28(sp)
  8031e4:	2085883a 	add	r2,r4,r2
  8031e8:	da000617 	ldw	r8,24(sp)
  8031ec:	da400417 	ldw	r9,16(sp)
  8031f0:	1280022e 	bgeu	r2,r10,8031fc <__muldf3+0x584>
  8031f4:	01000074 	movhi	r4,1
  8031f8:	8923883a 	add	r17,r17,r4
  8031fc:	1008943a 	slli	r4,r2,16
  803200:	39ffffcc 	andi	r7,r7,65535
  803204:	e4b9883a 	add	fp,fp,r18
  803208:	21cf883a 	add	r7,r4,r7
  80320c:	e4e7803a 	cmpltu	r19,fp,r19
  803210:	3d0f883a 	add	r7,r7,r20
  803214:	bf39883a 	add	fp,r23,fp
  803218:	99c9883a 	add	r4,r19,r7
  80321c:	e5ef803a 	cmpltu	r23,fp,r23
  803220:	490b883a 	add	r5,r9,r4
  803224:	1004d43a 	srli	r2,r2,16
  803228:	b965883a 	add	r18,r23,r5
  80322c:	24c9803a 	cmpltu	r4,r4,r19
  803230:	3d29803a 	cmpltu	r20,r7,r20
  803234:	a128b03a 	or	r20,r20,r4
  803238:	95ef803a 	cmpltu	r23,r18,r23
  80323c:	2a53803a 	cmpltu	r9,r5,r9
  803240:	a0a9883a 	add	r20,r20,r2
  803244:	4deeb03a 	or	r23,r9,r23
  803248:	a5ef883a 	add	r23,r20,r23
  80324c:	bc63883a 	add	r17,r23,r17
  803250:	e004927a 	slli	r2,fp,9
  803254:	d9000117 	ldw	r4,4(sp)
  803258:	882e927a 	slli	r23,r17,9
  80325c:	9022d5fa 	srli	r17,r18,23
  803260:	e038d5fa 	srli	fp,fp,23
  803264:	1104b03a 	or	r2,r2,r4
  803268:	9024927a 	slli	r18,r18,9
  80326c:	1004c03a 	cmpne	r2,r2,zero
  803270:	bc62b03a 	or	r17,r23,r17
  803274:	1738b03a 	or	fp,r2,fp
  803278:	8880402c 	andhi	r2,r17,256
  80327c:	e4a4b03a 	or	r18,fp,r18
  803280:	10000726 	beq	r2,zero,8032a0 <__muldf3+0x628>
  803284:	9006d07a 	srli	r3,r18,1
  803288:	880497fa 	slli	r2,r17,31
  80328c:	9480004c 	andi	r18,r18,1
  803290:	8822d07a 	srli	r17,r17,1
  803294:	1ca4b03a 	or	r18,r3,r18
  803298:	14a4b03a 	or	r18,r2,r18
  80329c:	4007883a 	mov	r3,r8
  8032a0:	1880ffc4 	addi	r2,r3,1023
  8032a4:	0080460e 	bge	zero,r2,8033c0 <__muldf3+0x748>
  8032a8:	910001cc 	andi	r4,r18,7
  8032ac:	20000726 	beq	r4,zero,8032cc <__muldf3+0x654>
  8032b0:	910003cc 	andi	r4,r18,15
  8032b4:	01400104 	movi	r5,4
  8032b8:	21400426 	beq	r4,r5,8032cc <__muldf3+0x654>
  8032bc:	9149883a 	add	r4,r18,r5
  8032c0:	24a5803a 	cmpltu	r18,r4,r18
  8032c4:	8ca3883a 	add	r17,r17,r18
  8032c8:	2025883a 	mov	r18,r4
  8032cc:	8900402c 	andhi	r4,r17,256
  8032d0:	20000426 	beq	r4,zero,8032e4 <__muldf3+0x66c>
  8032d4:	18810004 	addi	r2,r3,1024
  8032d8:	00ffc034 	movhi	r3,65280
  8032dc:	18ffffc4 	addi	r3,r3,-1
  8032e0:	88e2703a 	and	r17,r17,r3
  8032e4:	00c1ff84 	movi	r3,2046
  8032e8:	18bf1316 	blt	r3,r2,802f38 <__alt_data_end+0xff802f38>
  8032ec:	882c977a 	slli	r22,r17,29
  8032f0:	9024d0fa 	srli	r18,r18,3
  8032f4:	8822927a 	slli	r17,r17,9
  8032f8:	1081ffcc 	andi	r2,r2,2047
  8032fc:	b4acb03a 	or	r22,r22,r18
  803300:	8820d33a 	srli	r16,r17,12
  803304:	3027883a 	mov	r19,r6
  803308:	003eba06 	br	802df4 <__alt_data_end+0xff802df4>
  80330c:	8080022c 	andhi	r2,r16,8
  803310:	10000926 	beq	r2,zero,803338 <__muldf3+0x6c0>
  803314:	8880022c 	andhi	r2,r17,8
  803318:	1000071e 	bne	r2,zero,803338 <__muldf3+0x6c0>
  80331c:	00800434 	movhi	r2,16
  803320:	8c000234 	orhi	r16,r17,8
  803324:	10bfffc4 	addi	r2,r2,-1
  803328:	e027883a 	mov	r19,fp
  80332c:	80a0703a 	and	r16,r16,r2
  803330:	902d883a 	mov	r22,r18
  803334:	003f1706 	br	802f94 <__alt_data_end+0xff802f94>
  803338:	00800434 	movhi	r2,16
  80333c:	84000234 	orhi	r16,r16,8
  803340:	10bfffc4 	addi	r2,r2,-1
  803344:	80a0703a 	and	r16,r16,r2
  803348:	003f1206 	br	802f94 <__alt_data_end+0xff802f94>
  80334c:	147ff604 	addi	r17,r2,-40
  803350:	3462983a 	sll	r17,r6,r17
  803354:	0025883a 	mov	r18,zero
  803358:	003ef306 	br	802f28 <__alt_data_end+0xff802f28>
  80335c:	3009883a 	mov	r4,r6
  803360:	d9400215 	stw	r5,8(sp)
  803364:	d9800715 	stw	r6,28(sp)
  803368:	da400415 	stw	r9,16(sp)
  80336c:	da800315 	stw	r10,12(sp)
  803370:	08035640 	call	803564 <__clzsi2>
  803374:	10800804 	addi	r2,r2,32
  803378:	da800317 	ldw	r10,12(sp)
  80337c:	da400417 	ldw	r9,16(sp)
  803380:	d9800717 	ldw	r6,28(sp)
  803384:	d9400217 	ldw	r5,8(sp)
  803388:	003edd06 	br	802f00 <__alt_data_end+0xff802f00>
  80338c:	143ff604 	addi	r16,r2,-40
  803390:	ac20983a 	sll	r16,r21,r16
  803394:	002d883a 	mov	r22,zero
  803398:	003ec106 	br	802ea0 <__alt_data_end+0xff802ea0>
  80339c:	d9800715 	stw	r6,28(sp)
  8033a0:	d9c00215 	stw	r7,8(sp)
  8033a4:	da400415 	stw	r9,16(sp)
  8033a8:	08035640 	call	803564 <__clzsi2>
  8033ac:	10800804 	addi	r2,r2,32
  8033b0:	da400417 	ldw	r9,16(sp)
  8033b4:	d9c00217 	ldw	r7,8(sp)
  8033b8:	d9800717 	ldw	r6,28(sp)
  8033bc:	003eae06 	br	802e78 <__alt_data_end+0xff802e78>
  8033c0:	00c00044 	movi	r3,1
  8033c4:	1887c83a 	sub	r3,r3,r2
  8033c8:	01000e04 	movi	r4,56
  8033cc:	20fe8516 	blt	r4,r3,802de4 <__alt_data_end+0xff802de4>
  8033d0:	010007c4 	movi	r4,31
  8033d4:	20c01b16 	blt	r4,r3,803444 <__muldf3+0x7cc>
  8033d8:	00800804 	movi	r2,32
  8033dc:	10c5c83a 	sub	r2,r2,r3
  8033e0:	888a983a 	sll	r5,r17,r2
  8033e4:	90c8d83a 	srl	r4,r18,r3
  8033e8:	9084983a 	sll	r2,r18,r2
  8033ec:	88e2d83a 	srl	r17,r17,r3
  8033f0:	2906b03a 	or	r3,r5,r4
  8033f4:	1004c03a 	cmpne	r2,r2,zero
  8033f8:	1886b03a 	or	r3,r3,r2
  8033fc:	188001cc 	andi	r2,r3,7
  803400:	10000726 	beq	r2,zero,803420 <__muldf3+0x7a8>
  803404:	188003cc 	andi	r2,r3,15
  803408:	01000104 	movi	r4,4
  80340c:	11000426 	beq	r2,r4,803420 <__muldf3+0x7a8>
  803410:	1805883a 	mov	r2,r3
  803414:	10c00104 	addi	r3,r2,4
  803418:	1885803a 	cmpltu	r2,r3,r2
  80341c:	88a3883a 	add	r17,r17,r2
  803420:	8880202c 	andhi	r2,r17,128
  803424:	10001c26 	beq	r2,zero,803498 <__muldf3+0x820>
  803428:	3027883a 	mov	r19,r6
  80342c:	00800044 	movi	r2,1
  803430:	0021883a 	mov	r16,zero
  803434:	002d883a 	mov	r22,zero
  803438:	003e6e06 	br	802df4 <__alt_data_end+0xff802df4>
  80343c:	4007883a 	mov	r3,r8
  803440:	003f9706 	br	8032a0 <__alt_data_end+0xff8032a0>
  803444:	017ff844 	movi	r5,-31
  803448:	2885c83a 	sub	r2,r5,r2
  80344c:	888ad83a 	srl	r5,r17,r2
  803450:	00800804 	movi	r2,32
  803454:	18801a26 	beq	r3,r2,8034c0 <__muldf3+0x848>
  803458:	01001004 	movi	r4,64
  80345c:	20c7c83a 	sub	r3,r4,r3
  803460:	88e2983a 	sll	r17,r17,r3
  803464:	8ca4b03a 	or	r18,r17,r18
  803468:	9004c03a 	cmpne	r2,r18,zero
  80346c:	2884b03a 	or	r2,r5,r2
  803470:	144001cc 	andi	r17,r2,7
  803474:	88000d1e 	bne	r17,zero,8034ac <__muldf3+0x834>
  803478:	0021883a 	mov	r16,zero
  80347c:	102cd0fa 	srli	r22,r2,3
  803480:	3027883a 	mov	r19,r6
  803484:	0005883a 	mov	r2,zero
  803488:	b46cb03a 	or	r22,r22,r17
  80348c:	003e5906 	br	802df4 <__alt_data_end+0xff802df4>
  803490:	1007883a 	mov	r3,r2
  803494:	0023883a 	mov	r17,zero
  803498:	8820927a 	slli	r16,r17,9
  80349c:	1805883a 	mov	r2,r3
  8034a0:	8822977a 	slli	r17,r17,29
  8034a4:	8020d33a 	srli	r16,r16,12
  8034a8:	003ff406 	br	80347c <__alt_data_end+0xff80347c>
  8034ac:	10c003cc 	andi	r3,r2,15
  8034b0:	01000104 	movi	r4,4
  8034b4:	193ff626 	beq	r3,r4,803490 <__alt_data_end+0xff803490>
  8034b8:	0023883a 	mov	r17,zero
  8034bc:	003fd506 	br	803414 <__alt_data_end+0xff803414>
  8034c0:	0023883a 	mov	r17,zero
  8034c4:	003fe706 	br	803464 <__alt_data_end+0xff803464>
  8034c8:	00800434 	movhi	r2,16
  8034cc:	8c000234 	orhi	r16,r17,8
  8034d0:	10bfffc4 	addi	r2,r2,-1
  8034d4:	3027883a 	mov	r19,r6
  8034d8:	80a0703a 	and	r16,r16,r2
  8034dc:	902d883a 	mov	r22,r18
  8034e0:	003eac06 	br	802f94 <__alt_data_end+0xff802f94>

008034e4 <__fixdfsi>:
  8034e4:	280cd53a 	srli	r6,r5,20
  8034e8:	00c00434 	movhi	r3,16
  8034ec:	18ffffc4 	addi	r3,r3,-1
  8034f0:	3181ffcc 	andi	r6,r6,2047
  8034f4:	01c0ff84 	movi	r7,1022
  8034f8:	28c6703a 	and	r3,r5,r3
  8034fc:	280ad7fa 	srli	r5,r5,31
  803500:	3980120e 	bge	r7,r6,80354c <__fixdfsi+0x68>
  803504:	00810744 	movi	r2,1053
  803508:	11800c16 	blt	r2,r6,80353c <__fixdfsi+0x58>
  80350c:	00810cc4 	movi	r2,1075
  803510:	1185c83a 	sub	r2,r2,r6
  803514:	01c007c4 	movi	r7,31
  803518:	18c00434 	orhi	r3,r3,16
  80351c:	38800d16 	blt	r7,r2,803554 <__fixdfsi+0x70>
  803520:	31befb44 	addi	r6,r6,-1043
  803524:	2084d83a 	srl	r2,r4,r2
  803528:	1986983a 	sll	r3,r3,r6
  80352c:	1884b03a 	or	r2,r3,r2
  803530:	28000726 	beq	r5,zero,803550 <__fixdfsi+0x6c>
  803534:	0085c83a 	sub	r2,zero,r2
  803538:	f800283a 	ret
  80353c:	00a00034 	movhi	r2,32768
  803540:	10bfffc4 	addi	r2,r2,-1
  803544:	2885883a 	add	r2,r5,r2
  803548:	f800283a 	ret
  80354c:	0005883a 	mov	r2,zero
  803550:	f800283a 	ret
  803554:	008104c4 	movi	r2,1043
  803558:	1185c83a 	sub	r2,r2,r6
  80355c:	1884d83a 	srl	r2,r3,r2
  803560:	003ff306 	br	803530 <__alt_data_end+0xff803530>

00803564 <__clzsi2>:
  803564:	00bfffd4 	movui	r2,65535
  803568:	11000536 	bltu	r2,r4,803580 <__clzsi2+0x1c>
  80356c:	00803fc4 	movi	r2,255
  803570:	11000f36 	bltu	r2,r4,8035b0 <__clzsi2+0x4c>
  803574:	00800804 	movi	r2,32
  803578:	0007883a 	mov	r3,zero
  80357c:	00000506 	br	803594 <__clzsi2+0x30>
  803580:	00804034 	movhi	r2,256
  803584:	10bfffc4 	addi	r2,r2,-1
  803588:	11000c2e 	bgeu	r2,r4,8035bc <__clzsi2+0x58>
  80358c:	00800204 	movi	r2,8
  803590:	00c00604 	movi	r3,24
  803594:	20c8d83a 	srl	r4,r4,r3
  803598:	00c02034 	movhi	r3,128
  80359c:	18d59784 	addi	r3,r3,22110
  8035a0:	1909883a 	add	r4,r3,r4
  8035a4:	20c00003 	ldbu	r3,0(r4)
  8035a8:	10c5c83a 	sub	r2,r2,r3
  8035ac:	f800283a 	ret
  8035b0:	00800604 	movi	r2,24
  8035b4:	00c00204 	movi	r3,8
  8035b8:	003ff606 	br	803594 <__alt_data_end+0xff803594>
  8035bc:	00800404 	movi	r2,16
  8035c0:	1007883a 	mov	r3,r2
  8035c4:	003ff306 	br	803594 <__alt_data_end+0xff803594>

008035c8 <malloc>:
  8035c8:	00802034 	movhi	r2,128
  8035cc:	10973a04 	addi	r2,r2,23784
  8035d0:	200b883a 	mov	r5,r4
  8035d4:	11000017 	ldw	r4,0(r2)
  8035d8:	08037541 	jmpi	803754 <_malloc_r>

008035dc <free>:
  8035dc:	00802034 	movhi	r2,128
  8035e0:	10973a04 	addi	r2,r2,23784
  8035e4:	200b883a 	mov	r5,r4
  8035e8:	11000017 	ldw	r4,0(r2)
  8035ec:	08036701 	jmpi	803670 <_free_r>

008035f0 <memmove>:
  8035f0:	2005883a 	mov	r2,r4
  8035f4:	218f883a 	add	r7,r4,r6
  8035f8:	29000236 	bltu	r5,r4,803604 <memmove+0x14>
  8035fc:	1007883a 	mov	r3,r2
  803600:	00000c06 	br	803634 <memmove+0x44>
  803604:	2987883a 	add	r3,r5,r6
  803608:	20fffc2e 	bgeu	r4,r3,8035fc <__alt_data_end+0xff8035fc>
  80360c:	380b883a 	mov	r5,r7
  803610:	30cdc83a 	sub	r6,r6,r3
  803614:	1989883a 	add	r4,r3,r6
  803618:	20000526 	beq	r4,zero,803630 <memmove+0x40>
  80361c:	18ffffc4 	addi	r3,r3,-1
  803620:	19000003 	ldbu	r4,0(r3)
  803624:	297fffc4 	addi	r5,r5,-1
  803628:	29000005 	stb	r4,0(r5)
  80362c:	003ff906 	br	803614 <__alt_data_end+0xff803614>
  803630:	f800283a 	ret
  803634:	19c00526 	beq	r3,r7,80364c <memmove+0x5c>
  803638:	29000003 	ldbu	r4,0(r5)
  80363c:	18c00044 	addi	r3,r3,1
  803640:	29400044 	addi	r5,r5,1
  803644:	193fffc5 	stb	r4,-1(r3)
  803648:	003ffa06 	br	803634 <__alt_data_end+0xff803634>
  80364c:	f800283a 	ret

00803650 <memset>:
  803650:	2005883a 	mov	r2,r4
  803654:	2007883a 	mov	r3,r4
  803658:	218d883a 	add	r6,r4,r6
  80365c:	19800326 	beq	r3,r6,80366c <memset+0x1c>
  803660:	19400005 	stb	r5,0(r3)
  803664:	18c00044 	addi	r3,r3,1
  803668:	003ffc06 	br	80365c <__alt_data_end+0xff80365c>
  80366c:	f800283a 	ret

00803670 <_free_r>:
  803670:	28003726 	beq	r5,zero,803750 <_free_r+0xe0>
  803674:	28ffff17 	ldw	r3,-4(r5)
  803678:	28bfff04 	addi	r2,r5,-4
  80367c:	1800010e 	bge	r3,zero,803684 <_free_r+0x14>
  803680:	10c5883a 	add	r2,r2,r3
  803684:	01402034 	movhi	r5,128
  803688:	29581c04 	addi	r5,r5,24688
  80368c:	28c00017 	ldw	r3,0(r5)
  803690:	280d883a 	mov	r6,r5
  803694:	1800031e 	bne	r3,zero,8036a4 <_free_r+0x34>
  803698:	10000115 	stw	zero,4(r2)
  80369c:	28800015 	stw	r2,0(r5)
  8036a0:	f800283a 	ret
  8036a4:	10c00c2e 	bgeu	r2,r3,8036d8 <_free_r+0x68>
  8036a8:	11000017 	ldw	r4,0(r2)
  8036ac:	110b883a 	add	r5,r2,r4
  8036b0:	1940041e 	bne	r3,r5,8036c4 <_free_r+0x54>
  8036b4:	19400017 	ldw	r5,0(r3)
  8036b8:	18c00117 	ldw	r3,4(r3)
  8036bc:	2909883a 	add	r4,r5,r4
  8036c0:	11000015 	stw	r4,0(r2)
  8036c4:	10c00115 	stw	r3,4(r2)
  8036c8:	30800015 	stw	r2,0(r6)
  8036cc:	f800283a 	ret
  8036d0:	11400336 	bltu	r2,r5,8036e0 <_free_r+0x70>
  8036d4:	2807883a 	mov	r3,r5
  8036d8:	19400117 	ldw	r5,4(r3)
  8036dc:	283ffc1e 	bne	r5,zero,8036d0 <__alt_data_end+0xff8036d0>
  8036e0:	19c00017 	ldw	r7,0(r3)
  8036e4:	19cd883a 	add	r6,r3,r7
  8036e8:	30800a1e 	bne	r6,r2,803714 <_free_r+0xa4>
  8036ec:	10800017 	ldw	r2,0(r2)
  8036f0:	3885883a 	add	r2,r7,r2
  8036f4:	18800015 	stw	r2,0(r3)
  8036f8:	1889883a 	add	r4,r3,r2
  8036fc:	2900141e 	bne	r5,r4,803750 <_free_r+0xe0>
  803700:	29000017 	ldw	r4,0(r5)
  803704:	2085883a 	add	r2,r4,r2
  803708:	18800015 	stw	r2,0(r3)
  80370c:	28800117 	ldw	r2,4(r5)
  803710:	00000e06 	br	80374c <_free_r+0xdc>
  803714:	1180032e 	bgeu	r2,r6,803724 <_free_r+0xb4>
  803718:	00800304 	movi	r2,12
  80371c:	20800015 	stw	r2,0(r4)
  803720:	f800283a 	ret
  803724:	11000017 	ldw	r4,0(r2)
  803728:	110d883a 	add	r6,r2,r4
  80372c:	2980061e 	bne	r5,r6,803748 <_free_r+0xd8>
  803730:	29800017 	ldw	r6,0(r5)
  803734:	3109883a 	add	r4,r6,r4
  803738:	11000015 	stw	r4,0(r2)
  80373c:	29000117 	ldw	r4,4(r5)
  803740:	11000115 	stw	r4,4(r2)
  803744:	00000106 	br	80374c <_free_r+0xdc>
  803748:	11400115 	stw	r5,4(r2)
  80374c:	18800115 	stw	r2,4(r3)
  803750:	f800283a 	ret

00803754 <_malloc_r>:
  803754:	defffb04 	addi	sp,sp,-20
  803758:	00bfff04 	movi	r2,-4
  80375c:	dc400115 	stw	r17,4(sp)
  803760:	2c4000c4 	addi	r17,r5,3
  803764:	88a2703a 	and	r17,r17,r2
  803768:	dc800215 	stw	r18,8(sp)
  80376c:	dfc00415 	stw	ra,16(sp)
  803770:	dcc00315 	stw	r19,12(sp)
  803774:	dc000015 	stw	r16,0(sp)
  803778:	8c400204 	addi	r17,r17,8
  80377c:	00800304 	movi	r2,12
  803780:	2025883a 	mov	r18,r4
  803784:	8880022e 	bgeu	r17,r2,803790 <_malloc_r+0x3c>
  803788:	1023883a 	mov	r17,r2
  80378c:	00000506 	br	8037a4 <_malloc_r+0x50>
  803790:	8800040e 	bge	r17,zero,8037a4 <_malloc_r+0x50>
  803794:	00800304 	movi	r2,12
  803798:	90800015 	stw	r2,0(r18)
  80379c:	0005883a 	mov	r2,zero
  8037a0:	00003b06 	br	803890 <_malloc_r+0x13c>
  8037a4:	897ffb36 	bltu	r17,r5,803794 <__alt_data_end+0xff803794>
  8037a8:	00802034 	movhi	r2,128
  8037ac:	10981c04 	addi	r2,r2,24688
  8037b0:	10c00017 	ldw	r3,0(r2)
  8037b4:	1009883a 	mov	r4,r2
  8037b8:	1821883a 	mov	r16,r3
  8037bc:	80000926 	beq	r16,zero,8037e4 <_malloc_r+0x90>
  8037c0:	80800017 	ldw	r2,0(r16)
  8037c4:	1445c83a 	sub	r2,r2,r17
  8037c8:	10001516 	blt	r2,zero,803820 <_malloc_r+0xcc>
  8037cc:	014002c4 	movi	r5,11
  8037d0:	28800d2e 	bgeu	r5,r2,803808 <_malloc_r+0xb4>
  8037d4:	80800015 	stw	r2,0(r16)
  8037d8:	80a1883a 	add	r16,r16,r2
  8037dc:	84400015 	stw	r17,0(r16)
  8037e0:	8000221e 	bne	r16,zero,80386c <_malloc_r+0x118>
  8037e4:	04002034 	movhi	r16,128
  8037e8:	84181b04 	addi	r16,r16,24684
  8037ec:	80800017 	ldw	r2,0(r16)
  8037f0:	10000e1e 	bne	r2,zero,80382c <_malloc_r+0xd8>
  8037f4:	000b883a 	mov	r5,zero
  8037f8:	9009883a 	mov	r4,r18
  8037fc:	08039340 	call	803934 <_sbrk_r>
  803800:	80800015 	stw	r2,0(r16)
  803804:	00000906 	br	80382c <_malloc_r+0xd8>
  803808:	80800117 	ldw	r2,4(r16)
  80380c:	1c00021e 	bne	r3,r16,803818 <_malloc_r+0xc4>
  803810:	20800015 	stw	r2,0(r4)
  803814:	00001506 	br	80386c <_malloc_r+0x118>
  803818:	18800115 	stw	r2,4(r3)
  80381c:	00001306 	br	80386c <_malloc_r+0x118>
  803820:	8007883a 	mov	r3,r16
  803824:	84000117 	ldw	r16,4(r16)
  803828:	003fe406 	br	8037bc <__alt_data_end+0xff8037bc>
  80382c:	880b883a 	mov	r5,r17
  803830:	9009883a 	mov	r4,r18
  803834:	08039340 	call	803934 <_sbrk_r>
  803838:	04ffffc4 	movi	r19,-1
  80383c:	14ffd526 	beq	r2,r19,803794 <__alt_data_end+0xff803794>
  803840:	140000c4 	addi	r16,r2,3
  803844:	00ffff04 	movi	r3,-4
  803848:	80e0703a 	and	r16,r16,r3
  80384c:	1400021e 	bne	r2,r16,803858 <_malloc_r+0x104>
  803850:	84400015 	stw	r17,0(r16)
  803854:	00000506 	br	80386c <_malloc_r+0x118>
  803858:	808bc83a 	sub	r5,r16,r2
  80385c:	9009883a 	mov	r4,r18
  803860:	08039340 	call	803934 <_sbrk_r>
  803864:	14fffa1e 	bne	r2,r19,803850 <__alt_data_end+0xff803850>
  803868:	003fca06 	br	803794 <__alt_data_end+0xff803794>
  80386c:	810002c4 	addi	r4,r16,11
  803870:	00bffe04 	movi	r2,-8
  803874:	80c00104 	addi	r3,r16,4
  803878:	2084703a 	and	r2,r4,r2
  80387c:	10c7c83a 	sub	r3,r2,r3
  803880:	18000326 	beq	r3,zero,803890 <_malloc_r+0x13c>
  803884:	80e1883a 	add	r16,r16,r3
  803888:	00c7c83a 	sub	r3,zero,r3
  80388c:	80c00015 	stw	r3,0(r16)
  803890:	dfc00417 	ldw	ra,16(sp)
  803894:	dcc00317 	ldw	r19,12(sp)
  803898:	dc800217 	ldw	r18,8(sp)
  80389c:	dc400117 	ldw	r17,4(sp)
  8038a0:	dc000017 	ldw	r16,0(sp)
  8038a4:	dec00504 	addi	sp,sp,20
  8038a8:	f800283a 	ret

008038ac <_printf_r>:
  8038ac:	defffd04 	addi	sp,sp,-12
  8038b0:	dfc00015 	stw	ra,0(sp)
  8038b4:	d9800115 	stw	r6,4(sp)
  8038b8:	d9c00215 	stw	r7,8(sp)
  8038bc:	20c00217 	ldw	r3,8(r4)
  8038c0:	01802034 	movhi	r6,128
  8038c4:	3192a304 	addi	r6,r6,19084
  8038c8:	19800115 	stw	r6,4(r3)
  8038cc:	280d883a 	mov	r6,r5
  8038d0:	21400217 	ldw	r5,8(r4)
  8038d4:	d9c00104 	addi	r7,sp,4
  8038d8:	08045440 	call	804544 <___vfprintf_internal_r>
  8038dc:	dfc00017 	ldw	ra,0(sp)
  8038e0:	dec00304 	addi	sp,sp,12
  8038e4:	f800283a 	ret

008038e8 <printf>:
  8038e8:	defffc04 	addi	sp,sp,-16
  8038ec:	dfc00015 	stw	ra,0(sp)
  8038f0:	d9400115 	stw	r5,4(sp)
  8038f4:	d9800215 	stw	r6,8(sp)
  8038f8:	d9c00315 	stw	r7,12(sp)
  8038fc:	00802034 	movhi	r2,128
  803900:	10973a04 	addi	r2,r2,23784
  803904:	10800017 	ldw	r2,0(r2)
  803908:	01402034 	movhi	r5,128
  80390c:	2952a304 	addi	r5,r5,19084
  803910:	10c00217 	ldw	r3,8(r2)
  803914:	d9800104 	addi	r6,sp,4
  803918:	19400115 	stw	r5,4(r3)
  80391c:	200b883a 	mov	r5,r4
  803920:	11000217 	ldw	r4,8(r2)
  803924:	0804a700 	call	804a70 <__vfprintf_internal>
  803928:	dfc00017 	ldw	ra,0(sp)
  80392c:	dec00404 	addi	sp,sp,16
  803930:	f800283a 	ret

00803934 <_sbrk_r>:
  803934:	defffd04 	addi	sp,sp,-12
  803938:	dc000015 	stw	r16,0(sp)
  80393c:	04002034 	movhi	r16,128
  803940:	dc400115 	stw	r17,4(sp)
  803944:	84181d04 	addi	r16,r16,24692
  803948:	2023883a 	mov	r17,r4
  80394c:	2809883a 	mov	r4,r5
  803950:	dfc00215 	stw	ra,8(sp)
  803954:	80000015 	stw	zero,0(r16)
  803958:	0804fe00 	call	804fe0 <sbrk>
  80395c:	00ffffc4 	movi	r3,-1
  803960:	10c0031e 	bne	r2,r3,803970 <_sbrk_r+0x3c>
  803964:	80c00017 	ldw	r3,0(r16)
  803968:	18000126 	beq	r3,zero,803970 <_sbrk_r+0x3c>
  80396c:	88c00015 	stw	r3,0(r17)
  803970:	dfc00217 	ldw	ra,8(sp)
  803974:	dc400117 	ldw	r17,4(sp)
  803978:	dc000017 	ldw	r16,0(sp)
  80397c:	dec00304 	addi	sp,sp,12
  803980:	f800283a 	ret

00803984 <_sprintf_r>:
  803984:	defff704 	addi	sp,sp,-36
  803988:	dfc00715 	stw	ra,28(sp)
  80398c:	d9c00815 	stw	r7,32(sp)
  803990:	00808204 	movi	r2,520
  803994:	d880000d 	sth	r2,0(sp)
  803998:	00a00034 	movhi	r2,32768
  80399c:	10bfffc4 	addi	r2,r2,-1
  8039a0:	d8800515 	stw	r2,20(sp)
  8039a4:	d8800315 	stw	r2,12(sp)
  8039a8:	00bfffc4 	movi	r2,-1
  8039ac:	d880008d 	sth	r2,2(sp)
  8039b0:	00802034 	movhi	r2,128
  8039b4:	d9400415 	stw	r5,16(sp)
  8039b8:	d9400215 	stw	r5,8(sp)
  8039bc:	1092d104 	addi	r2,r2,19268
  8039c0:	d9c00804 	addi	r7,sp,32
  8039c4:	d80b883a 	mov	r5,sp
  8039c8:	d8800115 	stw	r2,4(sp)
  8039cc:	d8000615 	stw	zero,24(sp)
  8039d0:	0803f900 	call	803f90 <___svfprintf_internal_r>
  8039d4:	d8c00417 	ldw	r3,16(sp)
  8039d8:	18000005 	stb	zero,0(r3)
  8039dc:	dfc00717 	ldw	ra,28(sp)
  8039e0:	dec00904 	addi	sp,sp,36
  8039e4:	f800283a 	ret

008039e8 <sprintf>:
  8039e8:	defff604 	addi	sp,sp,-40
  8039ec:	dfc00715 	stw	ra,28(sp)
  8039f0:	d9800815 	stw	r6,32(sp)
  8039f4:	d9c00915 	stw	r7,36(sp)
  8039f8:	00808204 	movi	r2,520
  8039fc:	d880000d 	sth	r2,0(sp)
  803a00:	00a00034 	movhi	r2,32768
  803a04:	10bfffc4 	addi	r2,r2,-1
  803a08:	d8800515 	stw	r2,20(sp)
  803a0c:	d8800315 	stw	r2,12(sp)
  803a10:	00bfffc4 	movi	r2,-1
  803a14:	d880008d 	sth	r2,2(sp)
  803a18:	00802034 	movhi	r2,128
  803a1c:	1092d104 	addi	r2,r2,19268
  803a20:	d8800115 	stw	r2,4(sp)
  803a24:	00802034 	movhi	r2,128
  803a28:	10973a04 	addi	r2,r2,23784
  803a2c:	d9000415 	stw	r4,16(sp)
  803a30:	d9000215 	stw	r4,8(sp)
  803a34:	11000017 	ldw	r4,0(r2)
  803a38:	280d883a 	mov	r6,r5
  803a3c:	d9c00804 	addi	r7,sp,32
  803a40:	d80b883a 	mov	r5,sp
  803a44:	d8000615 	stw	zero,24(sp)
  803a48:	0803f900 	call	803f90 <___svfprintf_internal_r>
  803a4c:	d8c00417 	ldw	r3,16(sp)
  803a50:	18000005 	stb	zero,0(r3)
  803a54:	dfc00717 	ldw	ra,28(sp)
  803a58:	dec00a04 	addi	sp,sp,40
  803a5c:	f800283a 	ret

00803a60 <strcat>:
  803a60:	2005883a 	mov	r2,r4
  803a64:	2007883a 	mov	r3,r4
  803a68:	19000007 	ldb	r4,0(r3)
  803a6c:	20000226 	beq	r4,zero,803a78 <strcat+0x18>
  803a70:	18c00044 	addi	r3,r3,1
  803a74:	003ffc06 	br	803a68 <__alt_data_end+0xff803a68>
  803a78:	29800003 	ldbu	r6,0(r5)
  803a7c:	18c00044 	addi	r3,r3,1
  803a80:	29400044 	addi	r5,r5,1
  803a84:	19bfffc5 	stb	r6,-1(r3)
  803a88:	31803fcc 	andi	r6,r6,255
  803a8c:	3180201c 	xori	r6,r6,128
  803a90:	31bfe004 	addi	r6,r6,-128
  803a94:	303ff81e 	bne	r6,zero,803a78 <__alt_data_end+0xff803a78>
  803a98:	f800283a 	ret

00803a9c <strcmp>:
  803a9c:	20800003 	ldbu	r2,0(r4)
  803aa0:	10c03fcc 	andi	r3,r2,255
  803aa4:	18c0201c 	xori	r3,r3,128
  803aa8:	18ffe004 	addi	r3,r3,-128
  803aac:	18000526 	beq	r3,zero,803ac4 <strcmp+0x28>
  803ab0:	29800007 	ldb	r6,0(r5)
  803ab4:	1980031e 	bne	r3,r6,803ac4 <strcmp+0x28>
  803ab8:	21000044 	addi	r4,r4,1
  803abc:	29400044 	addi	r5,r5,1
  803ac0:	003ff606 	br	803a9c <__alt_data_end+0xff803a9c>
  803ac4:	28c00003 	ldbu	r3,0(r5)
  803ac8:	10803fcc 	andi	r2,r2,255
  803acc:	10c5c83a 	sub	r2,r2,r3
  803ad0:	f800283a 	ret

00803ad4 <strcpy>:
  803ad4:	2005883a 	mov	r2,r4
  803ad8:	200d883a 	mov	r6,r4
  803adc:	28c00003 	ldbu	r3,0(r5)
  803ae0:	31800044 	addi	r6,r6,1
  803ae4:	29400044 	addi	r5,r5,1
  803ae8:	30ffffc5 	stb	r3,-1(r6)
  803aec:	18c03fcc 	andi	r3,r3,255
  803af0:	18c0201c 	xori	r3,r3,128
  803af4:	18ffe004 	addi	r3,r3,-128
  803af8:	183ff81e 	bne	r3,zero,803adc <__alt_data_end+0xff803adc>
  803afc:	f800283a 	ret

00803b00 <strlen>:
  803b00:	2005883a 	mov	r2,r4
  803b04:	10c00007 	ldb	r3,0(r2)
  803b08:	18000226 	beq	r3,zero,803b14 <strlen+0x14>
  803b0c:	10800044 	addi	r2,r2,1
  803b10:	003ffc06 	br	803b04 <__alt_data_end+0xff803b04>
  803b14:	1105c83a 	sub	r2,r2,r4
  803b18:	f800283a 	ret

00803b1c <strncpy>:
  803b1c:	2005883a 	mov	r2,r4
  803b20:	200f883a 	mov	r7,r4
  803b24:	30000c26 	beq	r6,zero,803b58 <strncpy+0x3c>
  803b28:	2a000003 	ldbu	r8,0(r5)
  803b2c:	38c00044 	addi	r3,r7,1
  803b30:	31bfffc4 	addi	r6,r6,-1
  803b34:	3a000005 	stb	r8,0(r7)
  803b38:	42003fcc 	andi	r8,r8,255
  803b3c:	4200201c 	xori	r8,r8,128
  803b40:	423fe004 	addi	r8,r8,-128
  803b44:	29400044 	addi	r5,r5,1
  803b48:	180f883a 	mov	r7,r3
  803b4c:	403ff51e 	bne	r8,zero,803b24 <__alt_data_end+0xff803b24>
  803b50:	198d883a 	add	r6,r3,r6
  803b54:	00000106 	br	803b5c <strncpy+0x40>
  803b58:	f800283a 	ret
  803b5c:	30c00326 	beq	r6,r3,803b6c <strncpy+0x50>
  803b60:	18000005 	stb	zero,0(r3)
  803b64:	18c00044 	addi	r3,r3,1
  803b68:	003ffc06 	br	803b5c <__alt_data_end+0xff803b5c>
  803b6c:	f800283a 	ret

00803b70 <strtok>:
  803b70:	00802034 	movhi	r2,128
  803b74:	defffc04 	addi	sp,sp,-16
  803b78:	10973a04 	addi	r2,r2,23784
  803b7c:	dc000115 	stw	r16,4(sp)
  803b80:	14000017 	ldw	r16,0(r2)
  803b84:	dc400215 	stw	r17,8(sp)
  803b88:	dfc00315 	stw	ra,12(sp)
  803b8c:	80803617 	ldw	r2,216(r16)
  803b90:	2023883a 	mov	r17,r4
  803b94:	1000211e 	bne	r2,zero,803c1c <strtok+0xac>
  803b98:	01001404 	movi	r4,80
  803b9c:	d9400015 	stw	r5,0(sp)
  803ba0:	08035c80 	call	8035c8 <malloc>
  803ba4:	80803615 	stw	r2,216(r16)
  803ba8:	10000215 	stw	zero,8(r2)
  803bac:	10000015 	stw	zero,0(r2)
  803bb0:	10000115 	stw	zero,4(r2)
  803bb4:	80803617 	ldw	r2,216(r16)
  803bb8:	10000415 	stw	zero,16(r2)
  803bbc:	10000315 	stw	zero,12(r2)
  803bc0:	80803617 	ldw	r2,216(r16)
  803bc4:	10000615 	stw	zero,24(r2)
  803bc8:	10000515 	stw	zero,20(r2)
  803bcc:	80803617 	ldw	r2,216(r16)
  803bd0:	10000b15 	stw	zero,44(r2)
  803bd4:	10000a15 	stw	zero,40(r2)
  803bd8:	80803617 	ldw	r2,216(r16)
  803bdc:	10000d15 	stw	zero,52(r2)
  803be0:	10000c15 	stw	zero,48(r2)
  803be4:	80803617 	ldw	r2,216(r16)
  803be8:	10000f15 	stw	zero,60(r2)
  803bec:	10000e15 	stw	zero,56(r2)
  803bf0:	80803617 	ldw	r2,216(r16)
  803bf4:	10001115 	stw	zero,68(r2)
  803bf8:	10001015 	stw	zero,64(r2)
  803bfc:	80803617 	ldw	r2,216(r16)
  803c00:	10001315 	stw	zero,76(r2)
  803c04:	10001215 	stw	zero,72(r2)
  803c08:	80803617 	ldw	r2,216(r16)
  803c0c:	10000705 	stb	zero,28(r2)
  803c10:	80803617 	ldw	r2,216(r16)
  803c14:	d9400017 	ldw	r5,0(sp)
  803c18:	10000915 	stw	zero,36(r2)
  803c1c:	81803617 	ldw	r6,216(r16)
  803c20:	01c00044 	movi	r7,1
  803c24:	8809883a 	mov	r4,r17
  803c28:	dfc00317 	ldw	ra,12(sp)
  803c2c:	dc400217 	ldw	r17,8(sp)
  803c30:	dc000117 	ldw	r16,4(sp)
  803c34:	dec00404 	addi	sp,sp,16
  803c38:	0803c3c1 	jmpi	803c3c <__strtok_r>

00803c3c <__strtok_r>:
  803c3c:	2000021e 	bne	r4,zero,803c48 <__strtok_r+0xc>
  803c40:	31000017 	ldw	r4,0(r6)
  803c44:	20001f26 	beq	r4,zero,803cc4 <__strtok_r+0x88>
  803c48:	2005883a 	mov	r2,r4
  803c4c:	12000007 	ldb	r8,0(r2)
  803c50:	21000044 	addi	r4,r4,1
  803c54:	2807883a 	mov	r3,r5
  803c58:	1a400007 	ldb	r9,0(r3)
  803c5c:	48000626 	beq	r9,zero,803c78 <__strtok_r+0x3c>
  803c60:	18c00044 	addi	r3,r3,1
  803c64:	427ffc1e 	bne	r8,r9,803c58 <__alt_data_end+0xff803c58>
  803c68:	383ff71e 	bne	r7,zero,803c48 <__alt_data_end+0xff803c48>
  803c6c:	31000015 	stw	r4,0(r6)
  803c70:	10000005 	stb	zero,0(r2)
  803c74:	f800283a 	ret
  803c78:	4000061e 	bne	r8,zero,803c94 <__strtok_r+0x58>
  803c7c:	30000015 	stw	zero,0(r6)
  803c80:	00001006 	br	803cc4 <__strtok_r+0x88>
  803c84:	19c00007 	ldb	r7,0(r3)
  803c88:	51c00826 	beq	r10,r7,803cac <__strtok_r+0x70>
  803c8c:	18c00044 	addi	r3,r3,1
  803c90:	383ffc1e 	bne	r7,zero,803c84 <__alt_data_end+0xff803c84>
  803c94:	2011883a 	mov	r8,r4
  803c98:	21000044 	addi	r4,r4,1
  803c9c:	2013883a 	mov	r9,r4
  803ca0:	42800007 	ldb	r10,0(r8)
  803ca4:	2807883a 	mov	r3,r5
  803ca8:	003ff606 	br	803c84 <__alt_data_end+0xff803c84>
  803cac:	50000226 	beq	r10,zero,803cb8 <__strtok_r+0x7c>
  803cb0:	40000005 	stb	zero,0(r8)
  803cb4:	00000106 	br	803cbc <__strtok_r+0x80>
  803cb8:	0013883a 	mov	r9,zero
  803cbc:	32400015 	stw	r9,0(r6)
  803cc0:	f800283a 	ret
  803cc4:	0005883a 	mov	r2,zero
  803cc8:	f800283a 	ret

00803ccc <strtok_r>:
  803ccc:	01c00044 	movi	r7,1
  803cd0:	0803c3c1 	jmpi	803c3c <__strtok_r>

00803cd4 <_strtol_r>:
  803cd4:	00802034 	movhi	r2,128
  803cd8:	defff304 	addi	sp,sp,-52
  803cdc:	10973804 	addi	r2,r2,23776
  803ce0:	dcc00615 	stw	r19,24(sp)
  803ce4:	14c00017 	ldw	r19,0(r2)
  803ce8:	df000b15 	stw	fp,44(sp)
  803cec:	dd400815 	stw	r21,32(sp)
  803cf0:	dd000715 	stw	r20,28(sp)
  803cf4:	dc800515 	stw	r18,20(sp)
  803cf8:	202b883a 	mov	r21,r4
  803cfc:	dfc00c15 	stw	ra,48(sp)
  803d00:	ddc00a15 	stw	r23,40(sp)
  803d04:	dd800915 	stw	r22,36(sp)
  803d08:	dc400415 	stw	r17,16(sp)
  803d0c:	dc000315 	stw	r16,12(sp)
  803d10:	2829883a 	mov	r20,r5
  803d14:	3039883a 	mov	fp,r6
  803d18:	3825883a 	mov	r18,r7
  803d1c:	2809883a 	mov	r4,r5
  803d20:	2005883a 	mov	r2,r4
  803d24:	14400003 	ldbu	r17,0(r2)
  803d28:	24000044 	addi	r16,r4,1
  803d2c:	8009883a 	mov	r4,r16
  803d30:	9c47883a 	add	r3,r19,r17
  803d34:	18c00043 	ldbu	r3,1(r3)
  803d38:	18c0020c 	andi	r3,r3,8
  803d3c:	183ff81e 	bne	r3,zero,803d20 <__alt_data_end+0xff803d20>
  803d40:	00c00b44 	movi	r3,45
  803d44:	88c0041e 	bne	r17,r3,803d58 <_strtol_r+0x84>
  803d48:	14000084 	addi	r16,r2,2
  803d4c:	14400043 	ldbu	r17,1(r2)
  803d50:	05c00044 	movi	r23,1
  803d54:	00000506 	br	803d6c <_strtol_r+0x98>
  803d58:	00c00ac4 	movi	r3,43
  803d5c:	88c0021e 	bne	r17,r3,803d68 <_strtol_r+0x94>
  803d60:	14400043 	ldbu	r17,1(r2)
  803d64:	14000084 	addi	r16,r2,2
  803d68:	002f883a 	mov	r23,zero
  803d6c:	90000326 	beq	r18,zero,803d7c <_strtol_r+0xa8>
  803d70:	00800404 	movi	r2,16
  803d74:	90800a1e 	bne	r18,r2,803da0 <_strtol_r+0xcc>
  803d78:	00005406 	br	803ecc <_strtol_r+0x1f8>
  803d7c:	00800c04 	movi	r2,48
  803d80:	8880501e 	bne	r17,r2,803ec4 <_strtol_r+0x1f0>
  803d84:	80800003 	ldbu	r2,0(r16)
  803d88:	00c01604 	movi	r3,88
  803d8c:	108037cc 	andi	r2,r2,223
  803d90:	10c0481e 	bne	r2,r3,803eb4 <_strtol_r+0x1e0>
  803d94:	84400043 	ldbu	r17,1(r16)
  803d98:	04800404 	movi	r18,16
  803d9c:	84000084 	addi	r16,r16,2
  803da0:	00e00034 	movhi	r3,32768
  803da4:	18ffffc4 	addi	r3,r3,-1
  803da8:	b8c7883a 	add	r3,r23,r3
  803dac:	1809883a 	mov	r4,r3
  803db0:	900b883a 	mov	r5,r18
  803db4:	d8c00015 	stw	r3,0(sp)
  803db8:	080197c0 	call	80197c <__umodsi3>
  803dbc:	d8c00017 	ldw	r3,0(sp)
  803dc0:	900b883a 	mov	r5,r18
  803dc4:	102d883a 	mov	r22,r2
  803dc8:	1809883a 	mov	r4,r3
  803dcc:	08019180 	call	801918 <__udivsi3>
  803dd0:	100d883a 	mov	r6,r2
  803dd4:	0009883a 	mov	r4,zero
  803dd8:	0005883a 	mov	r2,zero
  803ddc:	01c00044 	movi	r7,1
  803de0:	023fffc4 	movi	r8,-1
  803de4:	9c47883a 	add	r3,r19,r17
  803de8:	18c00043 	ldbu	r3,1(r3)
  803dec:	1940010c 	andi	r5,r3,4
  803df0:	28000226 	beq	r5,zero,803dfc <_strtol_r+0x128>
  803df4:	8c7ff404 	addi	r17,r17,-48
  803df8:	00000706 	br	803e18 <_strtol_r+0x144>
  803dfc:	18c000cc 	andi	r3,r3,3
  803e00:	18001a26 	beq	r3,zero,803e6c <_strtol_r+0x198>
  803e04:	19c00226 	beq	r3,r7,803e10 <_strtol_r+0x13c>
  803e08:	00c015c4 	movi	r3,87
  803e0c:	00000106 	br	803e14 <_strtol_r+0x140>
  803e10:	00c00dc4 	movi	r3,55
  803e14:	88e3c83a 	sub	r17,r17,r3
  803e18:	8c80140e 	bge	r17,r18,803e6c <_strtol_r+0x198>
  803e1c:	22001026 	beq	r4,r8,803e60 <_strtol_r+0x18c>
  803e20:	30800e36 	bltu	r6,r2,803e5c <_strtol_r+0x188>
  803e24:	1180011e 	bne	r2,r6,803e2c <_strtol_r+0x158>
  803e28:	b4400c16 	blt	r22,r17,803e5c <_strtol_r+0x188>
  803e2c:	1009883a 	mov	r4,r2
  803e30:	900b883a 	mov	r5,r18
  803e34:	d9800015 	stw	r6,0(sp)
  803e38:	d9c00115 	stw	r7,4(sp)
  803e3c:	da000215 	stw	r8,8(sp)
  803e40:	08019d40 	call	8019d4 <__mulsi3>
  803e44:	8885883a 	add	r2,r17,r2
  803e48:	01000044 	movi	r4,1
  803e4c:	d9800017 	ldw	r6,0(sp)
  803e50:	d9c00117 	ldw	r7,4(sp)
  803e54:	da000217 	ldw	r8,8(sp)
  803e58:	00000106 	br	803e60 <_strtol_r+0x18c>
  803e5c:	013fffc4 	movi	r4,-1
  803e60:	84400003 	ldbu	r17,0(r16)
  803e64:	84000044 	addi	r16,r16,1
  803e68:	003fde06 	br	803de4 <__alt_data_end+0xff803de4>
  803e6c:	00ffffc4 	movi	r3,-1
  803e70:	20c0071e 	bne	r4,r3,803e90 <_strtol_r+0x1bc>
  803e74:	00a00034 	movhi	r2,32768
  803e78:	10c5883a 	add	r2,r2,r3
  803e7c:	00c00884 	movi	r3,34
  803e80:	a8c00015 	stw	r3,0(r21)
  803e84:	b885883a 	add	r2,r23,r2
  803e88:	e000051e 	bne	fp,zero,803ea0 <_strtol_r+0x1cc>
  803e8c:	00001206 	br	803ed8 <_strtol_r+0x204>
  803e90:	b8000126 	beq	r23,zero,803e98 <_strtol_r+0x1c4>
  803e94:	0085c83a 	sub	r2,zero,r2
  803e98:	e0000f26 	beq	fp,zero,803ed8 <_strtol_r+0x204>
  803e9c:	20000226 	beq	r4,zero,803ea8 <_strtol_r+0x1d4>
  803ea0:	843fffc4 	addi	r16,r16,-1
  803ea4:	00000106 	br	803eac <_strtol_r+0x1d8>
  803ea8:	a021883a 	mov	r16,r20
  803eac:	e4000015 	stw	r16,0(fp)
  803eb0:	00000906 	br	803ed8 <_strtol_r+0x204>
  803eb4:	04400c04 	movi	r17,48
  803eb8:	903fb91e 	bne	r18,zero,803da0 <__alt_data_end+0xff803da0>
  803ebc:	04800204 	movi	r18,8
  803ec0:	003fb706 	br	803da0 <__alt_data_end+0xff803da0>
  803ec4:	04800284 	movi	r18,10
  803ec8:	003fb506 	br	803da0 <__alt_data_end+0xff803da0>
  803ecc:	00800c04 	movi	r2,48
  803ed0:	88bfac26 	beq	r17,r2,803d84 <__alt_data_end+0xff803d84>
  803ed4:	003fb206 	br	803da0 <__alt_data_end+0xff803da0>
  803ed8:	dfc00c17 	ldw	ra,48(sp)
  803edc:	df000b17 	ldw	fp,44(sp)
  803ee0:	ddc00a17 	ldw	r23,40(sp)
  803ee4:	dd800917 	ldw	r22,36(sp)
  803ee8:	dd400817 	ldw	r21,32(sp)
  803eec:	dd000717 	ldw	r20,28(sp)
  803ef0:	dcc00617 	ldw	r19,24(sp)
  803ef4:	dc800517 	ldw	r18,20(sp)
  803ef8:	dc400417 	ldw	r17,16(sp)
  803efc:	dc000317 	ldw	r16,12(sp)
  803f00:	dec00d04 	addi	sp,sp,52
  803f04:	f800283a 	ret

00803f08 <strtol>:
  803f08:	00802034 	movhi	r2,128
  803f0c:	10973a04 	addi	r2,r2,23784
  803f10:	300f883a 	mov	r7,r6
  803f14:	280d883a 	mov	r6,r5
  803f18:	200b883a 	mov	r5,r4
  803f1c:	11000017 	ldw	r4,0(r2)
  803f20:	0803cd41 	jmpi	803cd4 <_strtol_r>

00803f24 <print_repeat>:
  803f24:	defffb04 	addi	sp,sp,-20
  803f28:	dc800315 	stw	r18,12(sp)
  803f2c:	dc400215 	stw	r17,8(sp)
  803f30:	dc000115 	stw	r16,4(sp)
  803f34:	dfc00415 	stw	ra,16(sp)
  803f38:	2025883a 	mov	r18,r4
  803f3c:	2823883a 	mov	r17,r5
  803f40:	d9800005 	stb	r6,0(sp)
  803f44:	3821883a 	mov	r16,r7
  803f48:	04000a0e 	bge	zero,r16,803f74 <print_repeat+0x50>
  803f4c:	88800117 	ldw	r2,4(r17)
  803f50:	01c00044 	movi	r7,1
  803f54:	d80d883a 	mov	r6,sp
  803f58:	880b883a 	mov	r5,r17
  803f5c:	9009883a 	mov	r4,r18
  803f60:	103ee83a 	callr	r2
  803f64:	843fffc4 	addi	r16,r16,-1
  803f68:	103ff726 	beq	r2,zero,803f48 <__alt_data_end+0xff803f48>
  803f6c:	00bfffc4 	movi	r2,-1
  803f70:	00000106 	br	803f78 <print_repeat+0x54>
  803f74:	0005883a 	mov	r2,zero
  803f78:	dfc00417 	ldw	ra,16(sp)
  803f7c:	dc800317 	ldw	r18,12(sp)
  803f80:	dc400217 	ldw	r17,8(sp)
  803f84:	dc000117 	ldw	r16,4(sp)
  803f88:	dec00504 	addi	sp,sp,20
  803f8c:	f800283a 	ret

00803f90 <___svfprintf_internal_r>:
  803f90:	deffe504 	addi	sp,sp,-108
  803f94:	d8c00804 	addi	r3,sp,32
  803f98:	ddc01815 	stw	r23,96(sp)
  803f9c:	dd801715 	stw	r22,92(sp)
  803fa0:	dd401615 	stw	r21,88(sp)
  803fa4:	dd001515 	stw	r20,84(sp)
  803fa8:	dcc01415 	stw	r19,80(sp)
  803fac:	dc801315 	stw	r18,76(sp)
  803fb0:	dc401215 	stw	r17,72(sp)
  803fb4:	dc001115 	stw	r16,68(sp)
  803fb8:	dfc01a15 	stw	ra,104(sp)
  803fbc:	df001915 	stw	fp,100(sp)
  803fc0:	2029883a 	mov	r20,r4
  803fc4:	2823883a 	mov	r17,r5
  803fc8:	382d883a 	mov	r22,r7
  803fcc:	d9800f15 	stw	r6,60(sp)
  803fd0:	0021883a 	mov	r16,zero
  803fd4:	d8000e15 	stw	zero,56(sp)
  803fd8:	d8000a15 	stw	zero,40(sp)
  803fdc:	002b883a 	mov	r21,zero
  803fe0:	0027883a 	mov	r19,zero
  803fe4:	0025883a 	mov	r18,zero
  803fe8:	d8000c15 	stw	zero,48(sp)
  803fec:	d8000b15 	stw	zero,44(sp)
  803ff0:	002f883a 	mov	r23,zero
  803ff4:	d8c00915 	stw	r3,36(sp)
  803ff8:	d8c00f17 	ldw	r3,60(sp)
  803ffc:	19000003 	ldbu	r4,0(r3)
  804000:	20803fcc 	andi	r2,r4,255
  804004:	1080201c 	xori	r2,r2,128
  804008:	10bfe004 	addi	r2,r2,-128
  80400c:	10011e26 	beq	r2,zero,804488 <___svfprintf_internal_r+0x4f8>
  804010:	00c00044 	movi	r3,1
  804014:	b8c01426 	beq	r23,r3,804068 <___svfprintf_internal_r+0xd8>
  804018:	1dc00216 	blt	r3,r23,804024 <___svfprintf_internal_r+0x94>
  80401c:	b8000626 	beq	r23,zero,804038 <___svfprintf_internal_r+0xa8>
  804020:	00011506 	br	804478 <___svfprintf_internal_r+0x4e8>
  804024:	01400084 	movi	r5,2
  804028:	b9401d26 	beq	r23,r5,8040a0 <___svfprintf_internal_r+0x110>
  80402c:	014000c4 	movi	r5,3
  804030:	b9402b26 	beq	r23,r5,8040e0 <___svfprintf_internal_r+0x150>
  804034:	00011006 	br	804478 <___svfprintf_internal_r+0x4e8>
  804038:	01400944 	movi	r5,37
  80403c:	1140fc26 	beq	r2,r5,804430 <___svfprintf_internal_r+0x4a0>
  804040:	88800117 	ldw	r2,4(r17)
  804044:	d9000005 	stb	r4,0(sp)
  804048:	01c00044 	movi	r7,1
  80404c:	d80d883a 	mov	r6,sp
  804050:	880b883a 	mov	r5,r17
  804054:	a009883a 	mov	r4,r20
  804058:	103ee83a 	callr	r2
  80405c:	1000d81e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  804060:	84000044 	addi	r16,r16,1
  804064:	00010406 	br	804478 <___svfprintf_internal_r+0x4e8>
  804068:	01400c04 	movi	r5,48
  80406c:	1140fa26 	beq	r2,r5,804458 <___svfprintf_internal_r+0x4c8>
  804070:	01400944 	movi	r5,37
  804074:	11400a1e 	bne	r2,r5,8040a0 <___svfprintf_internal_r+0x110>
  804078:	d8800005 	stb	r2,0(sp)
  80407c:	88800117 	ldw	r2,4(r17)
  804080:	b80f883a 	mov	r7,r23
  804084:	d80d883a 	mov	r6,sp
  804088:	880b883a 	mov	r5,r17
  80408c:	a009883a 	mov	r4,r20
  804090:	103ee83a 	callr	r2
  804094:	1000ca1e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  804098:	84000044 	addi	r16,r16,1
  80409c:	0000f506 	br	804474 <___svfprintf_internal_r+0x4e4>
  8040a0:	25fff404 	addi	r23,r4,-48
  8040a4:	bdc03fcc 	andi	r23,r23,255
  8040a8:	00c00244 	movi	r3,9
  8040ac:	1dc00936 	bltu	r3,r23,8040d4 <___svfprintf_internal_r+0x144>
  8040b0:	00bfffc4 	movi	r2,-1
  8040b4:	90800426 	beq	r18,r2,8040c8 <___svfprintf_internal_r+0x138>
  8040b8:	01400284 	movi	r5,10
  8040bc:	9009883a 	mov	r4,r18
  8040c0:	08019d40 	call	8019d4 <__mulsi3>
  8040c4:	00000106 	br	8040cc <___svfprintf_internal_r+0x13c>
  8040c8:	0005883a 	mov	r2,zero
  8040cc:	b8a5883a 	add	r18,r23,r2
  8040d0:	0000e206 	br	80445c <___svfprintf_internal_r+0x4cc>
  8040d4:	01400b84 	movi	r5,46
  8040d8:	1140e426 	beq	r2,r5,80446c <___svfprintf_internal_r+0x4dc>
  8040dc:	05c00084 	movi	r23,2
  8040e0:	213ff404 	addi	r4,r4,-48
  8040e4:	27003fcc 	andi	fp,r4,255
  8040e8:	00c00244 	movi	r3,9
  8040ec:	1f000936 	bltu	r3,fp,804114 <___svfprintf_internal_r+0x184>
  8040f0:	00bfffc4 	movi	r2,-1
  8040f4:	98800426 	beq	r19,r2,804108 <___svfprintf_internal_r+0x178>
  8040f8:	01400284 	movi	r5,10
  8040fc:	9809883a 	mov	r4,r19
  804100:	08019d40 	call	8019d4 <__mulsi3>
  804104:	00000106 	br	80410c <___svfprintf_internal_r+0x17c>
  804108:	0005883a 	mov	r2,zero
  80410c:	e0a7883a 	add	r19,fp,r2
  804110:	0000d906 	br	804478 <___svfprintf_internal_r+0x4e8>
  804114:	00c01b04 	movi	r3,108
  804118:	10c0d226 	beq	r2,r3,804464 <___svfprintf_internal_r+0x4d4>
  80411c:	013fffc4 	movi	r4,-1
  804120:	99000226 	beq	r19,r4,80412c <___svfprintf_internal_r+0x19c>
  804124:	d8000b15 	stw	zero,44(sp)
  804128:	00000106 	br	804130 <___svfprintf_internal_r+0x1a0>
  80412c:	04c00044 	movi	r19,1
  804130:	01001a44 	movi	r4,105
  804134:	11001626 	beq	r2,r4,804190 <___svfprintf_internal_r+0x200>
  804138:	20800916 	blt	r4,r2,804160 <___svfprintf_internal_r+0x1d0>
  80413c:	010018c4 	movi	r4,99
  804140:	11008826 	beq	r2,r4,804364 <___svfprintf_internal_r+0x3d4>
  804144:	01001904 	movi	r4,100
  804148:	11001126 	beq	r2,r4,804190 <___svfprintf_internal_r+0x200>
  80414c:	01001604 	movi	r4,88
  804150:	1100c81e 	bne	r2,r4,804474 <___svfprintf_internal_r+0x4e4>
  804154:	00c00044 	movi	r3,1
  804158:	d8c00e15 	stw	r3,56(sp)
  80415c:	00001506 	br	8041b4 <___svfprintf_internal_r+0x224>
  804160:	01001cc4 	movi	r4,115
  804164:	11009826 	beq	r2,r4,8043c8 <___svfprintf_internal_r+0x438>
  804168:	20800416 	blt	r4,r2,80417c <___svfprintf_internal_r+0x1ec>
  80416c:	01001bc4 	movi	r4,111
  804170:	1100c01e 	bne	r2,r4,804474 <___svfprintf_internal_r+0x4e4>
  804174:	05400204 	movi	r21,8
  804178:	00000f06 	br	8041b8 <___svfprintf_internal_r+0x228>
  80417c:	01001d44 	movi	r4,117
  804180:	11000d26 	beq	r2,r4,8041b8 <___svfprintf_internal_r+0x228>
  804184:	01001e04 	movi	r4,120
  804188:	11000a26 	beq	r2,r4,8041b4 <___svfprintf_internal_r+0x224>
  80418c:	0000b906 	br	804474 <___svfprintf_internal_r+0x4e4>
  804190:	d8c00a17 	ldw	r3,40(sp)
  804194:	b7000104 	addi	fp,r22,4
  804198:	18000726 	beq	r3,zero,8041b8 <___svfprintf_internal_r+0x228>
  80419c:	df000d15 	stw	fp,52(sp)
  8041a0:	b5c00017 	ldw	r23,0(r22)
  8041a4:	b800080e 	bge	r23,zero,8041c8 <___svfprintf_internal_r+0x238>
  8041a8:	05efc83a 	sub	r23,zero,r23
  8041ac:	02400044 	movi	r9,1
  8041b0:	00000606 	br	8041cc <___svfprintf_internal_r+0x23c>
  8041b4:	05400404 	movi	r21,16
  8041b8:	b0c00104 	addi	r3,r22,4
  8041bc:	d8c00d15 	stw	r3,52(sp)
  8041c0:	b5c00017 	ldw	r23,0(r22)
  8041c4:	d8000a15 	stw	zero,40(sp)
  8041c8:	0013883a 	mov	r9,zero
  8041cc:	d839883a 	mov	fp,sp
  8041d0:	b8001726 	beq	r23,zero,804230 <___svfprintf_internal_r+0x2a0>
  8041d4:	a80b883a 	mov	r5,r21
  8041d8:	b809883a 	mov	r4,r23
  8041dc:	da401015 	stw	r9,64(sp)
  8041e0:	08019180 	call	801918 <__udivsi3>
  8041e4:	a80b883a 	mov	r5,r21
  8041e8:	1009883a 	mov	r4,r2
  8041ec:	102d883a 	mov	r22,r2
  8041f0:	08019d40 	call	8019d4 <__mulsi3>
  8041f4:	b885c83a 	sub	r2,r23,r2
  8041f8:	00c00244 	movi	r3,9
  8041fc:	da401017 	ldw	r9,64(sp)
  804200:	18800216 	blt	r3,r2,80420c <___svfprintf_internal_r+0x27c>
  804204:	10800c04 	addi	r2,r2,48
  804208:	00000506 	br	804220 <___svfprintf_internal_r+0x290>
  80420c:	d8c00e17 	ldw	r3,56(sp)
  804210:	18000226 	beq	r3,zero,80421c <___svfprintf_internal_r+0x28c>
  804214:	10800dc4 	addi	r2,r2,55
  804218:	00000106 	br	804220 <___svfprintf_internal_r+0x290>
  80421c:	108015c4 	addi	r2,r2,87
  804220:	e0800005 	stb	r2,0(fp)
  804224:	b02f883a 	mov	r23,r22
  804228:	e7000044 	addi	fp,fp,1
  80422c:	003fe806 	br	8041d0 <__alt_data_end+0xff8041d0>
  804230:	e6efc83a 	sub	r23,fp,sp
  804234:	9dc5c83a 	sub	r2,r19,r23
  804238:	0080090e 	bge	zero,r2,804260 <___svfprintf_internal_r+0x2d0>
  80423c:	e085883a 	add	r2,fp,r2
  804240:	01400c04 	movi	r5,48
  804244:	d8c00917 	ldw	r3,36(sp)
  804248:	e009883a 	mov	r4,fp
  80424c:	e0c0032e 	bgeu	fp,r3,80425c <___svfprintf_internal_r+0x2cc>
  804250:	e7000044 	addi	fp,fp,1
  804254:	21400005 	stb	r5,0(r4)
  804258:	e0bffa1e 	bne	fp,r2,804244 <__alt_data_end+0xff804244>
  80425c:	e6efc83a 	sub	r23,fp,sp
  804260:	d8c00b17 	ldw	r3,44(sp)
  804264:	4dd1883a 	add	r8,r9,r23
  804268:	922dc83a 	sub	r22,r18,r8
  80426c:	18001626 	beq	r3,zero,8042c8 <___svfprintf_internal_r+0x338>
  804270:	48000a26 	beq	r9,zero,80429c <___svfprintf_internal_r+0x30c>
  804274:	00800b44 	movi	r2,45
  804278:	d8800805 	stb	r2,32(sp)
  80427c:	88800117 	ldw	r2,4(r17)
  804280:	01c00044 	movi	r7,1
  804284:	d9800804 	addi	r6,sp,32
  804288:	880b883a 	mov	r5,r17
  80428c:	a009883a 	mov	r4,r20
  804290:	103ee83a 	callr	r2
  804294:	10004a1e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  804298:	84000044 	addi	r16,r16,1
  80429c:	0580070e 	bge	zero,r22,8042bc <___svfprintf_internal_r+0x32c>
  8042a0:	b00f883a 	mov	r7,r22
  8042a4:	01800c04 	movi	r6,48
  8042a8:	880b883a 	mov	r5,r17
  8042ac:	a009883a 	mov	r4,r20
  8042b0:	0803f240 	call	803f24 <print_repeat>
  8042b4:	1000421e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  8042b8:	85a1883a 	add	r16,r16,r22
  8042bc:	e02d883a 	mov	r22,fp
  8042c0:	bf2fc83a 	sub	r23,r23,fp
  8042c4:	00002006 	br	804348 <___svfprintf_internal_r+0x3b8>
  8042c8:	0580090e 	bge	zero,r22,8042f0 <___svfprintf_internal_r+0x360>
  8042cc:	b00f883a 	mov	r7,r22
  8042d0:	01800804 	movi	r6,32
  8042d4:	880b883a 	mov	r5,r17
  8042d8:	a009883a 	mov	r4,r20
  8042dc:	da401015 	stw	r9,64(sp)
  8042e0:	0803f240 	call	803f24 <print_repeat>
  8042e4:	da401017 	ldw	r9,64(sp)
  8042e8:	1000351e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  8042ec:	85a1883a 	add	r16,r16,r22
  8042f0:	483ff226 	beq	r9,zero,8042bc <__alt_data_end+0xff8042bc>
  8042f4:	00800b44 	movi	r2,45
  8042f8:	d8800805 	stb	r2,32(sp)
  8042fc:	88800117 	ldw	r2,4(r17)
  804300:	01c00044 	movi	r7,1
  804304:	d9800804 	addi	r6,sp,32
  804308:	880b883a 	mov	r5,r17
  80430c:	a009883a 	mov	r4,r20
  804310:	103ee83a 	callr	r2
  804314:	10002a1e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  804318:	84000044 	addi	r16,r16,1
  80431c:	003fe706 	br	8042bc <__alt_data_end+0xff8042bc>
  804320:	b5bfffc4 	addi	r22,r22,-1
  804324:	b0800003 	ldbu	r2,0(r22)
  804328:	01c00044 	movi	r7,1
  80432c:	d9800804 	addi	r6,sp,32
  804330:	d8800805 	stb	r2,32(sp)
  804334:	88800117 	ldw	r2,4(r17)
  804338:	880b883a 	mov	r5,r17
  80433c:	a009883a 	mov	r4,r20
  804340:	103ee83a 	callr	r2
  804344:	10001e1e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  804348:	8585c83a 	sub	r2,r16,r22
  80434c:	b5c9883a 	add	r4,r22,r23
  804350:	e085883a 	add	r2,fp,r2
  804354:	013ff216 	blt	zero,r4,804320 <__alt_data_end+0xff804320>
  804358:	1021883a 	mov	r16,r2
  80435c:	dd800d17 	ldw	r22,52(sp)
  804360:	00004406 	br	804474 <___svfprintf_internal_r+0x4e4>
  804364:	00800044 	movi	r2,1
  804368:	1480080e 	bge	r2,r18,80438c <___svfprintf_internal_r+0x3fc>
  80436c:	95ffffc4 	addi	r23,r18,-1
  804370:	b80f883a 	mov	r7,r23
  804374:	01800804 	movi	r6,32
  804378:	880b883a 	mov	r5,r17
  80437c:	a009883a 	mov	r4,r20
  804380:	0803f240 	call	803f24 <print_repeat>
  804384:	10000e1e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  804388:	85e1883a 	add	r16,r16,r23
  80438c:	b0800017 	ldw	r2,0(r22)
  804390:	01c00044 	movi	r7,1
  804394:	d80d883a 	mov	r6,sp
  804398:	d8800005 	stb	r2,0(sp)
  80439c:	88800117 	ldw	r2,4(r17)
  8043a0:	880b883a 	mov	r5,r17
  8043a4:	a009883a 	mov	r4,r20
  8043a8:	b5c00104 	addi	r23,r22,4
  8043ac:	103ee83a 	callr	r2
  8043b0:	1000031e 	bne	r2,zero,8043c0 <___svfprintf_internal_r+0x430>
  8043b4:	84000044 	addi	r16,r16,1
  8043b8:	b82d883a 	mov	r22,r23
  8043bc:	00002d06 	br	804474 <___svfprintf_internal_r+0x4e4>
  8043c0:	00bfffc4 	movi	r2,-1
  8043c4:	00003106 	br	80448c <___svfprintf_internal_r+0x4fc>
  8043c8:	b5c00017 	ldw	r23,0(r22)
  8043cc:	b7000104 	addi	fp,r22,4
  8043d0:	b809883a 	mov	r4,r23
  8043d4:	0803b000 	call	803b00 <strlen>
  8043d8:	9091c83a 	sub	r8,r18,r2
  8043dc:	102d883a 	mov	r22,r2
  8043e0:	0200090e 	bge	zero,r8,804408 <___svfprintf_internal_r+0x478>
  8043e4:	400f883a 	mov	r7,r8
  8043e8:	01800804 	movi	r6,32
  8043ec:	880b883a 	mov	r5,r17
  8043f0:	a009883a 	mov	r4,r20
  8043f4:	da001015 	stw	r8,64(sp)
  8043f8:	0803f240 	call	803f24 <print_repeat>
  8043fc:	da001017 	ldw	r8,64(sp)
  804400:	103fef1e 	bne	r2,zero,8043c0 <__alt_data_end+0xff8043c0>
  804404:	8221883a 	add	r16,r16,r8
  804408:	88800117 	ldw	r2,4(r17)
  80440c:	b00f883a 	mov	r7,r22
  804410:	b80d883a 	mov	r6,r23
  804414:	880b883a 	mov	r5,r17
  804418:	a009883a 	mov	r4,r20
  80441c:	103ee83a 	callr	r2
  804420:	103fe71e 	bne	r2,zero,8043c0 <__alt_data_end+0xff8043c0>
  804424:	85a1883a 	add	r16,r16,r22
  804428:	e02d883a 	mov	r22,fp
  80442c:	00001106 	br	804474 <___svfprintf_internal_r+0x4e4>
  804430:	00c00044 	movi	r3,1
  804434:	04ffffc4 	movi	r19,-1
  804438:	d8000e15 	stw	zero,56(sp)
  80443c:	d8c00a15 	stw	r3,40(sp)
  804440:	05400284 	movi	r21,10
  804444:	9825883a 	mov	r18,r19
  804448:	d8000c15 	stw	zero,48(sp)
  80444c:	d8000b15 	stw	zero,44(sp)
  804450:	182f883a 	mov	r23,r3
  804454:	00000806 	br	804478 <___svfprintf_internal_r+0x4e8>
  804458:	ddc00b15 	stw	r23,44(sp)
  80445c:	05c00084 	movi	r23,2
  804460:	00000506 	br	804478 <___svfprintf_internal_r+0x4e8>
  804464:	00c00044 	movi	r3,1
  804468:	d8c00c15 	stw	r3,48(sp)
  80446c:	05c000c4 	movi	r23,3
  804470:	00000106 	br	804478 <___svfprintf_internal_r+0x4e8>
  804474:	002f883a 	mov	r23,zero
  804478:	d8c00f17 	ldw	r3,60(sp)
  80447c:	18c00044 	addi	r3,r3,1
  804480:	d8c00f15 	stw	r3,60(sp)
  804484:	003edc06 	br	803ff8 <__alt_data_end+0xff803ff8>
  804488:	8005883a 	mov	r2,r16
  80448c:	dfc01a17 	ldw	ra,104(sp)
  804490:	df001917 	ldw	fp,100(sp)
  804494:	ddc01817 	ldw	r23,96(sp)
  804498:	dd801717 	ldw	r22,92(sp)
  80449c:	dd401617 	ldw	r21,88(sp)
  8044a0:	dd001517 	ldw	r20,84(sp)
  8044a4:	dcc01417 	ldw	r19,80(sp)
  8044a8:	dc801317 	ldw	r18,76(sp)
  8044ac:	dc401217 	ldw	r17,72(sp)
  8044b0:	dc001117 	ldw	r16,68(sp)
  8044b4:	dec01b04 	addi	sp,sp,108
  8044b8:	f800283a 	ret

008044bc <__vfprintf_internal_unused>:
  8044bc:	00802034 	movhi	r2,128
  8044c0:	10973a04 	addi	r2,r2,23784
  8044c4:	300f883a 	mov	r7,r6
  8044c8:	280d883a 	mov	r6,r5
  8044cc:	200b883a 	mov	r5,r4
  8044d0:	11000017 	ldw	r4,0(r2)
  8044d4:	0803f901 	jmpi	803f90 <___svfprintf_internal_r>

008044d8 <print_repeat>:
  8044d8:	defffb04 	addi	sp,sp,-20
  8044dc:	dc800315 	stw	r18,12(sp)
  8044e0:	dc400215 	stw	r17,8(sp)
  8044e4:	dc000115 	stw	r16,4(sp)
  8044e8:	dfc00415 	stw	ra,16(sp)
  8044ec:	2025883a 	mov	r18,r4
  8044f0:	2823883a 	mov	r17,r5
  8044f4:	d9800005 	stb	r6,0(sp)
  8044f8:	3821883a 	mov	r16,r7
  8044fc:	04000a0e 	bge	zero,r16,804528 <print_repeat+0x50>
  804500:	88800117 	ldw	r2,4(r17)
  804504:	01c00044 	movi	r7,1
  804508:	d80d883a 	mov	r6,sp
  80450c:	880b883a 	mov	r5,r17
  804510:	9009883a 	mov	r4,r18
  804514:	103ee83a 	callr	r2
  804518:	843fffc4 	addi	r16,r16,-1
  80451c:	103ff726 	beq	r2,zero,8044fc <__alt_data_end+0xff8044fc>
  804520:	00bfffc4 	movi	r2,-1
  804524:	00000106 	br	80452c <print_repeat+0x54>
  804528:	0005883a 	mov	r2,zero
  80452c:	dfc00417 	ldw	ra,16(sp)
  804530:	dc800317 	ldw	r18,12(sp)
  804534:	dc400217 	ldw	r17,8(sp)
  804538:	dc000117 	ldw	r16,4(sp)
  80453c:	dec00504 	addi	sp,sp,20
  804540:	f800283a 	ret

00804544 <___vfprintf_internal_r>:
  804544:	deffe504 	addi	sp,sp,-108
  804548:	d8c00804 	addi	r3,sp,32
  80454c:	ddc01815 	stw	r23,96(sp)
  804550:	dd801715 	stw	r22,92(sp)
  804554:	dd401615 	stw	r21,88(sp)
  804558:	dd001515 	stw	r20,84(sp)
  80455c:	dcc01415 	stw	r19,80(sp)
  804560:	dc801315 	stw	r18,76(sp)
  804564:	dc401215 	stw	r17,72(sp)
  804568:	dc001115 	stw	r16,68(sp)
  80456c:	dfc01a15 	stw	ra,104(sp)
  804570:	df001915 	stw	fp,100(sp)
  804574:	2029883a 	mov	r20,r4
  804578:	2823883a 	mov	r17,r5
  80457c:	382d883a 	mov	r22,r7
  804580:	d9800f15 	stw	r6,60(sp)
  804584:	0021883a 	mov	r16,zero
  804588:	d8000e15 	stw	zero,56(sp)
  80458c:	d8000a15 	stw	zero,40(sp)
  804590:	002b883a 	mov	r21,zero
  804594:	0027883a 	mov	r19,zero
  804598:	0025883a 	mov	r18,zero
  80459c:	d8000c15 	stw	zero,48(sp)
  8045a0:	d8000b15 	stw	zero,44(sp)
  8045a4:	002f883a 	mov	r23,zero
  8045a8:	d8c00915 	stw	r3,36(sp)
  8045ac:	d8c00f17 	ldw	r3,60(sp)
  8045b0:	19000003 	ldbu	r4,0(r3)
  8045b4:	20803fcc 	andi	r2,r4,255
  8045b8:	1080201c 	xori	r2,r2,128
  8045bc:	10bfe004 	addi	r2,r2,-128
  8045c0:	10011e26 	beq	r2,zero,804a3c <___vfprintf_internal_r+0x4f8>
  8045c4:	00c00044 	movi	r3,1
  8045c8:	b8c01426 	beq	r23,r3,80461c <___vfprintf_internal_r+0xd8>
  8045cc:	1dc00216 	blt	r3,r23,8045d8 <___vfprintf_internal_r+0x94>
  8045d0:	b8000626 	beq	r23,zero,8045ec <___vfprintf_internal_r+0xa8>
  8045d4:	00011506 	br	804a2c <___vfprintf_internal_r+0x4e8>
  8045d8:	01400084 	movi	r5,2
  8045dc:	b9401d26 	beq	r23,r5,804654 <___vfprintf_internal_r+0x110>
  8045e0:	014000c4 	movi	r5,3
  8045e4:	b9402b26 	beq	r23,r5,804694 <___vfprintf_internal_r+0x150>
  8045e8:	00011006 	br	804a2c <___vfprintf_internal_r+0x4e8>
  8045ec:	01400944 	movi	r5,37
  8045f0:	1140fc26 	beq	r2,r5,8049e4 <___vfprintf_internal_r+0x4a0>
  8045f4:	88800117 	ldw	r2,4(r17)
  8045f8:	d9000005 	stb	r4,0(sp)
  8045fc:	01c00044 	movi	r7,1
  804600:	d80d883a 	mov	r6,sp
  804604:	880b883a 	mov	r5,r17
  804608:	a009883a 	mov	r4,r20
  80460c:	103ee83a 	callr	r2
  804610:	1000d81e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  804614:	84000044 	addi	r16,r16,1
  804618:	00010406 	br	804a2c <___vfprintf_internal_r+0x4e8>
  80461c:	01400c04 	movi	r5,48
  804620:	1140fa26 	beq	r2,r5,804a0c <___vfprintf_internal_r+0x4c8>
  804624:	01400944 	movi	r5,37
  804628:	11400a1e 	bne	r2,r5,804654 <___vfprintf_internal_r+0x110>
  80462c:	d8800005 	stb	r2,0(sp)
  804630:	88800117 	ldw	r2,4(r17)
  804634:	b80f883a 	mov	r7,r23
  804638:	d80d883a 	mov	r6,sp
  80463c:	880b883a 	mov	r5,r17
  804640:	a009883a 	mov	r4,r20
  804644:	103ee83a 	callr	r2
  804648:	1000ca1e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  80464c:	84000044 	addi	r16,r16,1
  804650:	0000f506 	br	804a28 <___vfprintf_internal_r+0x4e4>
  804654:	25fff404 	addi	r23,r4,-48
  804658:	bdc03fcc 	andi	r23,r23,255
  80465c:	00c00244 	movi	r3,9
  804660:	1dc00936 	bltu	r3,r23,804688 <___vfprintf_internal_r+0x144>
  804664:	00bfffc4 	movi	r2,-1
  804668:	90800426 	beq	r18,r2,80467c <___vfprintf_internal_r+0x138>
  80466c:	01400284 	movi	r5,10
  804670:	9009883a 	mov	r4,r18
  804674:	08019d40 	call	8019d4 <__mulsi3>
  804678:	00000106 	br	804680 <___vfprintf_internal_r+0x13c>
  80467c:	0005883a 	mov	r2,zero
  804680:	b8a5883a 	add	r18,r23,r2
  804684:	0000e206 	br	804a10 <___vfprintf_internal_r+0x4cc>
  804688:	01400b84 	movi	r5,46
  80468c:	1140e426 	beq	r2,r5,804a20 <___vfprintf_internal_r+0x4dc>
  804690:	05c00084 	movi	r23,2
  804694:	213ff404 	addi	r4,r4,-48
  804698:	27003fcc 	andi	fp,r4,255
  80469c:	00c00244 	movi	r3,9
  8046a0:	1f000936 	bltu	r3,fp,8046c8 <___vfprintf_internal_r+0x184>
  8046a4:	00bfffc4 	movi	r2,-1
  8046a8:	98800426 	beq	r19,r2,8046bc <___vfprintf_internal_r+0x178>
  8046ac:	01400284 	movi	r5,10
  8046b0:	9809883a 	mov	r4,r19
  8046b4:	08019d40 	call	8019d4 <__mulsi3>
  8046b8:	00000106 	br	8046c0 <___vfprintf_internal_r+0x17c>
  8046bc:	0005883a 	mov	r2,zero
  8046c0:	e0a7883a 	add	r19,fp,r2
  8046c4:	0000d906 	br	804a2c <___vfprintf_internal_r+0x4e8>
  8046c8:	00c01b04 	movi	r3,108
  8046cc:	10c0d226 	beq	r2,r3,804a18 <___vfprintf_internal_r+0x4d4>
  8046d0:	013fffc4 	movi	r4,-1
  8046d4:	99000226 	beq	r19,r4,8046e0 <___vfprintf_internal_r+0x19c>
  8046d8:	d8000b15 	stw	zero,44(sp)
  8046dc:	00000106 	br	8046e4 <___vfprintf_internal_r+0x1a0>
  8046e0:	04c00044 	movi	r19,1
  8046e4:	01001a44 	movi	r4,105
  8046e8:	11001626 	beq	r2,r4,804744 <___vfprintf_internal_r+0x200>
  8046ec:	20800916 	blt	r4,r2,804714 <___vfprintf_internal_r+0x1d0>
  8046f0:	010018c4 	movi	r4,99
  8046f4:	11008826 	beq	r2,r4,804918 <___vfprintf_internal_r+0x3d4>
  8046f8:	01001904 	movi	r4,100
  8046fc:	11001126 	beq	r2,r4,804744 <___vfprintf_internal_r+0x200>
  804700:	01001604 	movi	r4,88
  804704:	1100c81e 	bne	r2,r4,804a28 <___vfprintf_internal_r+0x4e4>
  804708:	00c00044 	movi	r3,1
  80470c:	d8c00e15 	stw	r3,56(sp)
  804710:	00001506 	br	804768 <___vfprintf_internal_r+0x224>
  804714:	01001cc4 	movi	r4,115
  804718:	11009826 	beq	r2,r4,80497c <___vfprintf_internal_r+0x438>
  80471c:	20800416 	blt	r4,r2,804730 <___vfprintf_internal_r+0x1ec>
  804720:	01001bc4 	movi	r4,111
  804724:	1100c01e 	bne	r2,r4,804a28 <___vfprintf_internal_r+0x4e4>
  804728:	05400204 	movi	r21,8
  80472c:	00000f06 	br	80476c <___vfprintf_internal_r+0x228>
  804730:	01001d44 	movi	r4,117
  804734:	11000d26 	beq	r2,r4,80476c <___vfprintf_internal_r+0x228>
  804738:	01001e04 	movi	r4,120
  80473c:	11000a26 	beq	r2,r4,804768 <___vfprintf_internal_r+0x224>
  804740:	0000b906 	br	804a28 <___vfprintf_internal_r+0x4e4>
  804744:	d8c00a17 	ldw	r3,40(sp)
  804748:	b7000104 	addi	fp,r22,4
  80474c:	18000726 	beq	r3,zero,80476c <___vfprintf_internal_r+0x228>
  804750:	df000d15 	stw	fp,52(sp)
  804754:	b5c00017 	ldw	r23,0(r22)
  804758:	b800080e 	bge	r23,zero,80477c <___vfprintf_internal_r+0x238>
  80475c:	05efc83a 	sub	r23,zero,r23
  804760:	02400044 	movi	r9,1
  804764:	00000606 	br	804780 <___vfprintf_internal_r+0x23c>
  804768:	05400404 	movi	r21,16
  80476c:	b0c00104 	addi	r3,r22,4
  804770:	d8c00d15 	stw	r3,52(sp)
  804774:	b5c00017 	ldw	r23,0(r22)
  804778:	d8000a15 	stw	zero,40(sp)
  80477c:	0013883a 	mov	r9,zero
  804780:	d839883a 	mov	fp,sp
  804784:	b8001726 	beq	r23,zero,8047e4 <___vfprintf_internal_r+0x2a0>
  804788:	a80b883a 	mov	r5,r21
  80478c:	b809883a 	mov	r4,r23
  804790:	da401015 	stw	r9,64(sp)
  804794:	08019180 	call	801918 <__udivsi3>
  804798:	a80b883a 	mov	r5,r21
  80479c:	1009883a 	mov	r4,r2
  8047a0:	102d883a 	mov	r22,r2
  8047a4:	08019d40 	call	8019d4 <__mulsi3>
  8047a8:	b885c83a 	sub	r2,r23,r2
  8047ac:	00c00244 	movi	r3,9
  8047b0:	da401017 	ldw	r9,64(sp)
  8047b4:	18800216 	blt	r3,r2,8047c0 <___vfprintf_internal_r+0x27c>
  8047b8:	10800c04 	addi	r2,r2,48
  8047bc:	00000506 	br	8047d4 <___vfprintf_internal_r+0x290>
  8047c0:	d8c00e17 	ldw	r3,56(sp)
  8047c4:	18000226 	beq	r3,zero,8047d0 <___vfprintf_internal_r+0x28c>
  8047c8:	10800dc4 	addi	r2,r2,55
  8047cc:	00000106 	br	8047d4 <___vfprintf_internal_r+0x290>
  8047d0:	108015c4 	addi	r2,r2,87
  8047d4:	e0800005 	stb	r2,0(fp)
  8047d8:	b02f883a 	mov	r23,r22
  8047dc:	e7000044 	addi	fp,fp,1
  8047e0:	003fe806 	br	804784 <__alt_data_end+0xff804784>
  8047e4:	e6efc83a 	sub	r23,fp,sp
  8047e8:	9dc5c83a 	sub	r2,r19,r23
  8047ec:	0080090e 	bge	zero,r2,804814 <___vfprintf_internal_r+0x2d0>
  8047f0:	e085883a 	add	r2,fp,r2
  8047f4:	01400c04 	movi	r5,48
  8047f8:	d8c00917 	ldw	r3,36(sp)
  8047fc:	e009883a 	mov	r4,fp
  804800:	e0c0032e 	bgeu	fp,r3,804810 <___vfprintf_internal_r+0x2cc>
  804804:	e7000044 	addi	fp,fp,1
  804808:	21400005 	stb	r5,0(r4)
  80480c:	e0bffa1e 	bne	fp,r2,8047f8 <__alt_data_end+0xff8047f8>
  804810:	e6efc83a 	sub	r23,fp,sp
  804814:	d8c00b17 	ldw	r3,44(sp)
  804818:	4dd1883a 	add	r8,r9,r23
  80481c:	922dc83a 	sub	r22,r18,r8
  804820:	18001626 	beq	r3,zero,80487c <___vfprintf_internal_r+0x338>
  804824:	48000a26 	beq	r9,zero,804850 <___vfprintf_internal_r+0x30c>
  804828:	00800b44 	movi	r2,45
  80482c:	d8800805 	stb	r2,32(sp)
  804830:	88800117 	ldw	r2,4(r17)
  804834:	01c00044 	movi	r7,1
  804838:	d9800804 	addi	r6,sp,32
  80483c:	880b883a 	mov	r5,r17
  804840:	a009883a 	mov	r4,r20
  804844:	103ee83a 	callr	r2
  804848:	10004a1e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  80484c:	84000044 	addi	r16,r16,1
  804850:	0580070e 	bge	zero,r22,804870 <___vfprintf_internal_r+0x32c>
  804854:	b00f883a 	mov	r7,r22
  804858:	01800c04 	movi	r6,48
  80485c:	880b883a 	mov	r5,r17
  804860:	a009883a 	mov	r4,r20
  804864:	08044d80 	call	8044d8 <print_repeat>
  804868:	1000421e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  80486c:	85a1883a 	add	r16,r16,r22
  804870:	e02d883a 	mov	r22,fp
  804874:	bf2fc83a 	sub	r23,r23,fp
  804878:	00002006 	br	8048fc <___vfprintf_internal_r+0x3b8>
  80487c:	0580090e 	bge	zero,r22,8048a4 <___vfprintf_internal_r+0x360>
  804880:	b00f883a 	mov	r7,r22
  804884:	01800804 	movi	r6,32
  804888:	880b883a 	mov	r5,r17
  80488c:	a009883a 	mov	r4,r20
  804890:	da401015 	stw	r9,64(sp)
  804894:	08044d80 	call	8044d8 <print_repeat>
  804898:	da401017 	ldw	r9,64(sp)
  80489c:	1000351e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  8048a0:	85a1883a 	add	r16,r16,r22
  8048a4:	483ff226 	beq	r9,zero,804870 <__alt_data_end+0xff804870>
  8048a8:	00800b44 	movi	r2,45
  8048ac:	d8800805 	stb	r2,32(sp)
  8048b0:	88800117 	ldw	r2,4(r17)
  8048b4:	01c00044 	movi	r7,1
  8048b8:	d9800804 	addi	r6,sp,32
  8048bc:	880b883a 	mov	r5,r17
  8048c0:	a009883a 	mov	r4,r20
  8048c4:	103ee83a 	callr	r2
  8048c8:	10002a1e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  8048cc:	84000044 	addi	r16,r16,1
  8048d0:	003fe706 	br	804870 <__alt_data_end+0xff804870>
  8048d4:	b5bfffc4 	addi	r22,r22,-1
  8048d8:	b0800003 	ldbu	r2,0(r22)
  8048dc:	01c00044 	movi	r7,1
  8048e0:	d9800804 	addi	r6,sp,32
  8048e4:	d8800805 	stb	r2,32(sp)
  8048e8:	88800117 	ldw	r2,4(r17)
  8048ec:	880b883a 	mov	r5,r17
  8048f0:	a009883a 	mov	r4,r20
  8048f4:	103ee83a 	callr	r2
  8048f8:	10001e1e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  8048fc:	8585c83a 	sub	r2,r16,r22
  804900:	b5c9883a 	add	r4,r22,r23
  804904:	e085883a 	add	r2,fp,r2
  804908:	013ff216 	blt	zero,r4,8048d4 <__alt_data_end+0xff8048d4>
  80490c:	1021883a 	mov	r16,r2
  804910:	dd800d17 	ldw	r22,52(sp)
  804914:	00004406 	br	804a28 <___vfprintf_internal_r+0x4e4>
  804918:	00800044 	movi	r2,1
  80491c:	1480080e 	bge	r2,r18,804940 <___vfprintf_internal_r+0x3fc>
  804920:	95ffffc4 	addi	r23,r18,-1
  804924:	b80f883a 	mov	r7,r23
  804928:	01800804 	movi	r6,32
  80492c:	880b883a 	mov	r5,r17
  804930:	a009883a 	mov	r4,r20
  804934:	08044d80 	call	8044d8 <print_repeat>
  804938:	10000e1e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  80493c:	85e1883a 	add	r16,r16,r23
  804940:	b0800017 	ldw	r2,0(r22)
  804944:	01c00044 	movi	r7,1
  804948:	d80d883a 	mov	r6,sp
  80494c:	d8800005 	stb	r2,0(sp)
  804950:	88800117 	ldw	r2,4(r17)
  804954:	880b883a 	mov	r5,r17
  804958:	a009883a 	mov	r4,r20
  80495c:	b5c00104 	addi	r23,r22,4
  804960:	103ee83a 	callr	r2
  804964:	1000031e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x430>
  804968:	84000044 	addi	r16,r16,1
  80496c:	b82d883a 	mov	r22,r23
  804970:	00002d06 	br	804a28 <___vfprintf_internal_r+0x4e4>
  804974:	00bfffc4 	movi	r2,-1
  804978:	00003106 	br	804a40 <___vfprintf_internal_r+0x4fc>
  80497c:	b5c00017 	ldw	r23,0(r22)
  804980:	b7000104 	addi	fp,r22,4
  804984:	b809883a 	mov	r4,r23
  804988:	0803b000 	call	803b00 <strlen>
  80498c:	9091c83a 	sub	r8,r18,r2
  804990:	102d883a 	mov	r22,r2
  804994:	0200090e 	bge	zero,r8,8049bc <___vfprintf_internal_r+0x478>
  804998:	400f883a 	mov	r7,r8
  80499c:	01800804 	movi	r6,32
  8049a0:	880b883a 	mov	r5,r17
  8049a4:	a009883a 	mov	r4,r20
  8049a8:	da001015 	stw	r8,64(sp)
  8049ac:	08044d80 	call	8044d8 <print_repeat>
  8049b0:	da001017 	ldw	r8,64(sp)
  8049b4:	103fef1e 	bne	r2,zero,804974 <__alt_data_end+0xff804974>
  8049b8:	8221883a 	add	r16,r16,r8
  8049bc:	88800117 	ldw	r2,4(r17)
  8049c0:	b00f883a 	mov	r7,r22
  8049c4:	b80d883a 	mov	r6,r23
  8049c8:	880b883a 	mov	r5,r17
  8049cc:	a009883a 	mov	r4,r20
  8049d0:	103ee83a 	callr	r2
  8049d4:	103fe71e 	bne	r2,zero,804974 <__alt_data_end+0xff804974>
  8049d8:	85a1883a 	add	r16,r16,r22
  8049dc:	e02d883a 	mov	r22,fp
  8049e0:	00001106 	br	804a28 <___vfprintf_internal_r+0x4e4>
  8049e4:	00c00044 	movi	r3,1
  8049e8:	04ffffc4 	movi	r19,-1
  8049ec:	d8000e15 	stw	zero,56(sp)
  8049f0:	d8c00a15 	stw	r3,40(sp)
  8049f4:	05400284 	movi	r21,10
  8049f8:	9825883a 	mov	r18,r19
  8049fc:	d8000c15 	stw	zero,48(sp)
  804a00:	d8000b15 	stw	zero,44(sp)
  804a04:	182f883a 	mov	r23,r3
  804a08:	00000806 	br	804a2c <___vfprintf_internal_r+0x4e8>
  804a0c:	ddc00b15 	stw	r23,44(sp)
  804a10:	05c00084 	movi	r23,2
  804a14:	00000506 	br	804a2c <___vfprintf_internal_r+0x4e8>
  804a18:	00c00044 	movi	r3,1
  804a1c:	d8c00c15 	stw	r3,48(sp)
  804a20:	05c000c4 	movi	r23,3
  804a24:	00000106 	br	804a2c <___vfprintf_internal_r+0x4e8>
  804a28:	002f883a 	mov	r23,zero
  804a2c:	d8c00f17 	ldw	r3,60(sp)
  804a30:	18c00044 	addi	r3,r3,1
  804a34:	d8c00f15 	stw	r3,60(sp)
  804a38:	003edc06 	br	8045ac <__alt_data_end+0xff8045ac>
  804a3c:	8005883a 	mov	r2,r16
  804a40:	dfc01a17 	ldw	ra,104(sp)
  804a44:	df001917 	ldw	fp,100(sp)
  804a48:	ddc01817 	ldw	r23,96(sp)
  804a4c:	dd801717 	ldw	r22,92(sp)
  804a50:	dd401617 	ldw	r21,88(sp)
  804a54:	dd001517 	ldw	r20,84(sp)
  804a58:	dcc01417 	ldw	r19,80(sp)
  804a5c:	dc801317 	ldw	r18,76(sp)
  804a60:	dc401217 	ldw	r17,72(sp)
  804a64:	dc001117 	ldw	r16,68(sp)
  804a68:	dec01b04 	addi	sp,sp,108
  804a6c:	f800283a 	ret

00804a70 <__vfprintf_internal>:
  804a70:	00802034 	movhi	r2,128
  804a74:	10973a04 	addi	r2,r2,23784
  804a78:	300f883a 	mov	r7,r6
  804a7c:	280d883a 	mov	r6,r5
  804a80:	200b883a 	mov	r5,r4
  804a84:	11000017 	ldw	r4,0(r2)
  804a88:	08045441 	jmpi	804544 <___vfprintf_internal_r>

00804a8c <__sfvwrite_small_dev>:
  804a8c:	2880000b 	ldhu	r2,0(r5)
  804a90:	1080020c 	andi	r2,r2,8
  804a94:	10002126 	beq	r2,zero,804b1c <__sfvwrite_small_dev+0x90>
  804a98:	2880008f 	ldh	r2,2(r5)
  804a9c:	defffa04 	addi	sp,sp,-24
  804aa0:	dc000015 	stw	r16,0(sp)
  804aa4:	dfc00515 	stw	ra,20(sp)
  804aa8:	dd000415 	stw	r20,16(sp)
  804aac:	dcc00315 	stw	r19,12(sp)
  804ab0:	dc800215 	stw	r18,8(sp)
  804ab4:	dc400115 	stw	r17,4(sp)
  804ab8:	2821883a 	mov	r16,r5
  804abc:	10001216 	blt	r2,zero,804b08 <__sfvwrite_small_dev+0x7c>
  804ac0:	2027883a 	mov	r19,r4
  804ac4:	3025883a 	mov	r18,r6
  804ac8:	3823883a 	mov	r17,r7
  804acc:	05010004 	movi	r20,1024
  804ad0:	04400b0e 	bge	zero,r17,804b00 <__sfvwrite_small_dev+0x74>
  804ad4:	880f883a 	mov	r7,r17
  804ad8:	a440010e 	bge	r20,r17,804ae0 <__sfvwrite_small_dev+0x54>
  804adc:	01c10004 	movi	r7,1024
  804ae0:	8140008f 	ldh	r5,2(r16)
  804ae4:	900d883a 	mov	r6,r18
  804ae8:	9809883a 	mov	r4,r19
  804aec:	0804bec0 	call	804bec <_write_r>
  804af0:	0080050e 	bge	zero,r2,804b08 <__sfvwrite_small_dev+0x7c>
  804af4:	88a3c83a 	sub	r17,r17,r2
  804af8:	90a5883a 	add	r18,r18,r2
  804afc:	003ff406 	br	804ad0 <__alt_data_end+0xff804ad0>
  804b00:	0005883a 	mov	r2,zero
  804b04:	00000706 	br	804b24 <__sfvwrite_small_dev+0x98>
  804b08:	8080000b 	ldhu	r2,0(r16)
  804b0c:	10801014 	ori	r2,r2,64
  804b10:	8080000d 	sth	r2,0(r16)
  804b14:	00bfffc4 	movi	r2,-1
  804b18:	00000206 	br	804b24 <__sfvwrite_small_dev+0x98>
  804b1c:	00bfffc4 	movi	r2,-1
  804b20:	f800283a 	ret
  804b24:	dfc00517 	ldw	ra,20(sp)
  804b28:	dd000417 	ldw	r20,16(sp)
  804b2c:	dcc00317 	ldw	r19,12(sp)
  804b30:	dc800217 	ldw	r18,8(sp)
  804b34:	dc400117 	ldw	r17,4(sp)
  804b38:	dc000017 	ldw	r16,0(sp)
  804b3c:	dec00604 	addi	sp,sp,24
  804b40:	f800283a 	ret

00804b44 <__sfvwrite_small_str>:
  804b44:	2880000b 	ldhu	r2,0(r5)
  804b48:	10c0020c 	andi	r3,r2,8
  804b4c:	18002026 	beq	r3,zero,804bd0 <__sfvwrite_small_str+0x8c>
  804b50:	28c0008f 	ldh	r3,2(r5)
  804b54:	defffd04 	addi	sp,sp,-12
  804b58:	dc000015 	stw	r16,0(sp)
  804b5c:	dfc00215 	stw	ra,8(sp)
  804b60:	dc400115 	stw	r17,4(sp)
  804b64:	2821883a 	mov	r16,r5
  804b68:	1800150e 	bge	r3,zero,804bc0 <__sfvwrite_small_str+0x7c>
  804b6c:	10c0800c 	andi	r3,r2,512
  804b70:	18001326 	beq	r3,zero,804bc0 <__sfvwrite_small_str+0x7c>
  804b74:	2c400517 	ldw	r17,20(r5)
  804b78:	89c0030e 	bge	r17,r7,804b88 <__sfvwrite_small_str+0x44>
  804b7c:	10c0200c 	andi	r3,r2,128
  804b80:	18000326 	beq	r3,zero,804b90 <__sfvwrite_small_str+0x4c>
  804b84:	00000e06 	br	804bc0 <__sfvwrite_small_str+0x7c>
  804b88:	3c40010e 	bge	r7,r17,804b90 <__sfvwrite_small_str+0x4c>
  804b8c:	3823883a 	mov	r17,r7
  804b90:	81000417 	ldw	r4,16(r16)
  804b94:	300b883a 	mov	r5,r6
  804b98:	880d883a 	mov	r6,r17
  804b9c:	08035f00 	call	8035f0 <memmove>
  804ba0:	80800517 	ldw	r2,20(r16)
  804ba4:	1445c83a 	sub	r2,r2,r17
  804ba8:	80800515 	stw	r2,20(r16)
  804bac:	80800417 	ldw	r2,16(r16)
  804bb0:	1463883a 	add	r17,r2,r17
  804bb4:	84400415 	stw	r17,16(r16)
  804bb8:	0005883a 	mov	r2,zero
  804bbc:	00000606 	br	804bd8 <__sfvwrite_small_str+0x94>
  804bc0:	10801014 	ori	r2,r2,64
  804bc4:	8080000d 	sth	r2,0(r16)
  804bc8:	00bfffc4 	movi	r2,-1
  804bcc:	00000206 	br	804bd8 <__sfvwrite_small_str+0x94>
  804bd0:	00bfffc4 	movi	r2,-1
  804bd4:	f800283a 	ret
  804bd8:	dfc00217 	ldw	ra,8(sp)
  804bdc:	dc400117 	ldw	r17,4(sp)
  804be0:	dc000017 	ldw	r16,0(sp)
  804be4:	dec00304 	addi	sp,sp,12
  804be8:	f800283a 	ret

00804bec <_write_r>:
  804bec:	defffd04 	addi	sp,sp,-12
  804bf0:	dc000015 	stw	r16,0(sp)
  804bf4:	04002034 	movhi	r16,128
  804bf8:	dc400115 	stw	r17,4(sp)
  804bfc:	84181d04 	addi	r16,r16,24692
  804c00:	2023883a 	mov	r17,r4
  804c04:	2809883a 	mov	r4,r5
  804c08:	300b883a 	mov	r5,r6
  804c0c:	380d883a 	mov	r6,r7
  804c10:	dfc00215 	stw	ra,8(sp)
  804c14:	80000015 	stw	zero,0(r16)
  804c18:	080502c0 	call	80502c <write>
  804c1c:	00ffffc4 	movi	r3,-1
  804c20:	10c0031e 	bne	r2,r3,804c30 <_write_r+0x44>
  804c24:	80c00017 	ldw	r3,0(r16)
  804c28:	18000126 	beq	r3,zero,804c30 <_write_r+0x44>
  804c2c:	88c00015 	stw	r3,0(r17)
  804c30:	dfc00217 	ldw	ra,8(sp)
  804c34:	dc400117 	ldw	r17,4(sp)
  804c38:	dc000017 	ldw	r16,0(sp)
  804c3c:	dec00304 	addi	sp,sp,12
  804c40:	f800283a 	ret

00804c44 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804c44:	00802034 	movhi	r2,128
  804c48:	10972004 	addi	r2,r2,23680
  804c4c:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804c50:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804c54:	01002034 	movhi	r4,128
  804c58:	01800044 	movi	r6,1
  804c5c:	d80b883a 	mov	r5,sp
  804c60:	21173d04 	addi	r4,r4,23796
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804c64:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804c68:	08050d40 	call	8050d4 <altera_avalon_jtag_uart_read>
  804c6c:	0080020e 	bge	zero,r2,804c78 <alt_getchar+0x34>
        return -1;
    }
    return c;
  804c70:	d8800007 	ldb	r2,0(sp)
  804c74:	00000106 	br	804c7c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  804c78:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  804c7c:	dfc00117 	ldw	ra,4(sp)
  804c80:	dec00204 	addi	sp,sp,8
  804c84:	f800283a 	ret

00804c88 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  804c88:	008007c4 	movi	r2,31
  804c8c:	11002136 	bltu	r2,r4,804d14 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804c90:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c94:	00ffff84 	movi	r3,-2
  804c98:	38c4703a 	and	r2,r7,r3
  804c9c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  804ca0:	200490fa 	slli	r2,r4,3
  804ca4:	02002034 	movhi	r8,128
  804ca8:	42182804 	addi	r8,r8,24736
  804cac:	4085883a 	add	r2,r8,r2
  804cb0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
  804cb4:	11400115 	stw	r5,4(r2)
  804cb8:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  804cbc:	30000726 	beq	r6,zero,804cdc <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804cc0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804cc4:	28c6703a 	and	r3,r5,r3
  804cc8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  804ccc:	d0e0e817 	ldw	r3,-31840(gp)
  804cd0:	1104983a 	sll	r2,r2,r4
  804cd4:	10c4b03a 	or	r2,r2,r3
  804cd8:	00000706 	br	804cf8 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804cdc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ce0:	28c6703a 	and	r3,r5,r3
  804ce4:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  804ce8:	1104983a 	sll	r2,r2,r4
  804cec:	d0e0e817 	ldw	r3,-31840(gp)
  804cf0:	0084303a 	nor	r2,zero,r2
  804cf4:	10c4703a 	and	r2,r2,r3
  804cf8:	d0a0e815 	stw	r2,-31840(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804cfc:	d0a0e817 	ldw	r2,-31840(gp)
  804d00:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804d04:	2801703a 	wrctl	status,r5
  804d08:	3801703a 	wrctl	status,r7
  804d0c:	0005883a 	mov	r2,zero
  804d10:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  804d14:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  804d18:	f800283a 	ret

00804d1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  804d1c:	deffff04 	addi	sp,sp,-4
  804d20:	01002034 	movhi	r4,128
  804d24:	01402034 	movhi	r5,128
  804d28:	dfc00015 	stw	ra,0(sp)
  804d2c:	21167b04 	addi	r4,r4,23020
  804d30:	29574404 	addi	r5,r5,23824

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804d34:	2140061e 	bne	r4,r5,804d50 <alt_load+0x34>
  804d38:	01002034 	movhi	r4,128
  804d3c:	01402034 	movhi	r5,128
  804d40:	21000804 	addi	r4,r4,32
  804d44:	29400804 	addi	r5,r5,32
  804d48:	2140121e 	bne	r4,r5,804d94 <alt_load+0x78>
  804d4c:	00000b06 	br	804d7c <alt_load+0x60>
  804d50:	00c02034 	movhi	r3,128
  804d54:	18d74404 	addi	r3,r3,23824
  804d58:	1907c83a 	sub	r3,r3,r4
  804d5c:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804d60:	10fff526 	beq	r2,r3,804d38 <__alt_data_end+0xff804d38>
    {
      *to++ = *from++;
  804d64:	114f883a 	add	r7,r2,r5
  804d68:	39c00017 	ldw	r7,0(r7)
  804d6c:	110d883a 	add	r6,r2,r4
  804d70:	10800104 	addi	r2,r2,4
  804d74:	31c00015 	stw	r7,0(r6)
  804d78:	003ff906 	br	804d60 <__alt_data_end+0xff804d60>
  804d7c:	01002034 	movhi	r4,128
  804d80:	01402034 	movhi	r5,128
  804d84:	21153e04 	addi	r4,r4,21752
  804d88:	29553e04 	addi	r5,r5,21752

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804d8c:	2140101e 	bne	r4,r5,804dd0 <alt_load+0xb4>
  804d90:	00000b06 	br	804dc0 <alt_load+0xa4>
  804d94:	00c02034 	movhi	r3,128
  804d98:	18c06004 	addi	r3,r3,384
  804d9c:	1907c83a 	sub	r3,r3,r4
  804da0:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804da4:	10fff526 	beq	r2,r3,804d7c <__alt_data_end+0xff804d7c>
    {
      *to++ = *from++;
  804da8:	114f883a 	add	r7,r2,r5
  804dac:	39c00017 	ldw	r7,0(r7)
  804db0:	110d883a 	add	r6,r2,r4
  804db4:	10800104 	addi	r2,r2,4
  804db8:	31c00015 	stw	r7,0(r6)
  804dbc:	003ff906 	br	804da4 <__alt_data_end+0xff804da4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804dc0:	080535c0 	call	80535c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  804dc4:	dfc00017 	ldw	ra,0(sp)
  804dc8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  804dcc:	08054481 	jmpi	805448 <alt_icache_flush_all>
  804dd0:	00c02034 	movhi	r3,128
  804dd4:	18d67b04 	addi	r3,r3,23020
  804dd8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804ddc:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804de0:	18bff726 	beq	r3,r2,804dc0 <__alt_data_end+0xff804dc0>
    {
      *to++ = *from++;
  804de4:	114f883a 	add	r7,r2,r5
  804de8:	39c00017 	ldw	r7,0(r7)
  804dec:	110d883a 	add	r6,r2,r4
  804df0:	10800104 	addi	r2,r2,4
  804df4:	31c00015 	stw	r7,0(r6)
  804df8:	003ff906 	br	804de0 <__alt_data_end+0xff804de0>

00804dfc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804dfc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804e00:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804e04:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804e08:	080508c0 	call	80508c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  804e0c:	08050ac0 	call	8050ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804e10:	d1a0e917 	ldw	r6,-31836(gp)
  804e14:	d160ea17 	ldw	r5,-31832(gp)
  804e18:	d120eb17 	ldw	r4,-31828(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  804e1c:	dfc00017 	ldw	ra,0(sp)
  804e20:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804e24:	08010c81 	jmpi	8010c8 <main>

00804e28 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  804e28:	defff204 	addi	sp,sp,-56
  804e2c:	2005883a 	mov	r2,r4
  804e30:	dfc00a15 	stw	ra,40(sp)
  804e34:	df000915 	stw	fp,36(sp)
  804e38:	ddc00815 	stw	r23,32(sp)
  804e3c:	dd800715 	stw	r22,28(sp)
  804e40:	dd400615 	stw	r21,24(sp)
  804e44:	dd000515 	stw	r20,20(sp)
  804e48:	dcc00415 	stw	r19,16(sp)
  804e4c:	dc800315 	stw	r18,12(sp)
  804e50:	dc400215 	stw	r17,8(sp)
  804e54:	dc000115 	stw	r16,4(sp)
  804e58:	d9400b15 	stw	r5,44(sp)
  804e5c:	d9800c15 	stw	r6,48(sp)
  804e60:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804e64:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  804e68:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  804e6c:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  804e70:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804e74:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804e78:	11000007 	ldb	r4,0(r2)
  804e7c:	20003a26 	beq	r4,zero,804f68 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804e80:	24000226 	beq	r4,r16,804e8c <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804e84:	14400044 	addi	r17,r2,1
  804e88:	00001406 	br	804edc <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  804e8c:	14400084 	addi	r17,r2,2
  804e90:	10800047 	ldb	r2,1(r2)
  804e94:	10003426 	beq	r2,zero,804f68 <alt_printf+0x140>
            {
                if (c == '%')
  804e98:	1400021e 	bne	r2,r16,804ea4 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  804e9c:	8009883a 	mov	r4,r16
  804ea0:	00000e06 	br	804edc <alt_printf+0xb4>
                } 
                else if (c == 'c')
  804ea4:	1480051e 	bne	r2,r18,804ebc <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  804ea8:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  804eac:	ad800104 	addi	r22,r21,4
  804eb0:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  804eb4:	0804f980 	call	804f98 <alt_putchar>
  804eb8:	00002906 	br	804f60 <alt_printf+0x138>
                }
                else if (c == 'x')
  804ebc:	14c0201e 	bne	r2,r19,804f40 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  804ec0:	adc00017 	ldw	r23,0(r21)
  804ec4:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  804ec8:	b8000326 	beq	r23,zero,804ed8 <alt_printf+0xb0>
  804ecc:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804ed0:	00c003c4 	movi	r3,15
  804ed4:	00000306 	br	804ee4 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  804ed8:	01000c04 	movi	r4,48
  804edc:	0804f980 	call	804f98 <alt_putchar>
                        continue;
  804ee0:	00001f06 	br	804f60 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804ee4:	1d84983a 	sll	r2,r3,r22
  804ee8:	15c4703a 	and	r2,r2,r23
  804eec:	1000021e 	bne	r2,zero,804ef8 <alt_printf+0xd0>
                        digit_shift -= 4;
  804ef0:	b5bfff04 	addi	r22,r22,-4
  804ef4:	003ffb06 	br	804ee4 <__alt_data_end+0xff804ee4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804ef8:	070003c4 	movi	fp,15
                        if (digit <= 9)
  804efc:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804f00:	b0001716 	blt	r22,zero,804f60 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804f04:	e588983a 	sll	r4,fp,r22
  804f08:	25c8703a 	and	r4,r4,r23
  804f0c:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  804f10:	19000236 	bltu	r3,r4,804f1c <alt_printf+0xf4>
                            c = '0' + digit;
  804f14:	21000c04 	addi	r4,r4,48
  804f18:	00000106 	br	804f20 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  804f1c:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  804f20:	21003fcc 	andi	r4,r4,255
  804f24:	2100201c 	xori	r4,r4,128
  804f28:	213fe004 	addi	r4,r4,-128
  804f2c:	d8c00015 	stw	r3,0(sp)
  804f30:	0804f980 	call	804f98 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804f34:	b5bfff04 	addi	r22,r22,-4
  804f38:	d8c00017 	ldw	r3,0(sp)
  804f3c:	003ff006 	br	804f00 <__alt_data_end+0xff804f00>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804f40:	1500071e 	bne	r2,r20,804f60 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  804f44:	ad800017 	ldw	r22,0(r21)
  804f48:	ad400104 	addi	r21,r21,4

                    while(*s)
  804f4c:	b1000007 	ldb	r4,0(r22)
  804f50:	20000326 	beq	r4,zero,804f60 <alt_printf+0x138>
                      alt_putchar(*s++);
  804f54:	b5800044 	addi	r22,r22,1
  804f58:	0804f980 	call	804f98 <alt_putchar>
  804f5c:	003ffb06 	br	804f4c <__alt_data_end+0xff804f4c>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  804f60:	8805883a 	mov	r2,r17
  804f64:	003fc406 	br	804e78 <__alt_data_end+0xff804e78>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  804f68:	dfc00a17 	ldw	ra,40(sp)
  804f6c:	df000917 	ldw	fp,36(sp)
  804f70:	ddc00817 	ldw	r23,32(sp)
  804f74:	dd800717 	ldw	r22,28(sp)
  804f78:	dd400617 	ldw	r21,24(sp)
  804f7c:	dd000517 	ldw	r20,20(sp)
  804f80:	dcc00417 	ldw	r19,16(sp)
  804f84:	dc800317 	ldw	r18,12(sp)
  804f88:	dc400217 	ldw	r17,8(sp)
  804f8c:	dc000117 	ldw	r16,4(sp)
  804f90:	dec00e04 	addi	sp,sp,56
  804f94:	f800283a 	ret

00804f98 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804f98:	defffd04 	addi	sp,sp,-12
  804f9c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  804fa0:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804fa4:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804fa8:	01002034 	movhi	r4,128
  804fac:	000f883a 	mov	r7,zero
  804fb0:	01800044 	movi	r6,1
  804fb4:	d80b883a 	mov	r5,sp
  804fb8:	21173d04 	addi	r4,r4,23796
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804fbc:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804fc0:	08051300 	call	805130 <altera_avalon_jtag_uart_write>
  804fc4:	00ffffc4 	movi	r3,-1
  804fc8:	10c00126 	beq	r2,r3,804fd0 <alt_putchar+0x38>
        return -1;
    }
    return c;
  804fcc:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
  804fd0:	dfc00217 	ldw	ra,8(sp)
  804fd4:	dc000117 	ldw	r16,4(sp)
  804fd8:	dec00304 	addi	sp,sp,12
  804fdc:	f800283a 	ret

00804fe0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804fe0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804fe4:	00bfff84 	movi	r2,-2
  804fe8:	2884703a 	and	r2,r5,r2
  804fec:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804ff0:	d0a00617 	ldw	r2,-32744(gp)
  804ff4:	00ffff04 	movi	r3,-4
  804ff8:	108000c4 	addi	r2,r2,3
  804ffc:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  805000:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  805004:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  805008:	1109883a 	add	r4,r2,r4
  80500c:	18c00004 	addi	r3,r3,0
  805010:	1900032e 	bgeu	r3,r4,805020 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805014:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  805018:	00bfffc4 	movi	r2,-1
  80501c:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  805020:	d1200615 	stw	r4,-32744(gp)
  805024:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  805028:	f800283a 	ret

0080502c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
  80502c:	00800044 	movi	r2,1
  805030:	20800226 	beq	r4,r2,80503c <write+0x10>
  805034:	00800084 	movi	r2,2
  805038:	2080041e 	bne	r4,r2,80504c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
  80503c:	01002034 	movhi	r4,128
  805040:	000f883a 	mov	r7,zero
  805044:	21173d04 	addi	r4,r4,23796
  805048:	08051301 	jmpi	805130 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  80504c:	d0a00d17 	ldw	r2,-32716(gp)
  805050:	10000926 	beq	r2,zero,805078 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  805054:	deffff04 	addi	sp,sp,-4
  805058:	dfc00015 	stw	ra,0(sp)
  80505c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  805060:	00c01444 	movi	r3,81
  805064:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  805068:	00bfffc4 	movi	r2,-1
  80506c:	dfc00017 	ldw	ra,0(sp)
  805070:	dec00104 	addi	sp,sp,4
  805074:	f800283a 	ret
  805078:	d0a0e704 	addi	r2,gp,-31844
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  80507c:	00c01444 	movi	r3,81
  805080:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  805084:	00bfffc4 	movi	r2,-1
  805088:	f800283a 	ret

0080508c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80508c:	deffff04 	addi	sp,sp,-4
  805090:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  805094:	080544c0 	call	80544c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  805098:	00800044 	movi	r2,1
  80509c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8050a0:	dfc00017 	ldw	ra,0(sp)
  8050a4:	dec00104 	addi	sp,sp,4
  8050a8:	f800283a 	ret

008050ac <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  8050ac:	00804034 	movhi	r2,256
  8050b0:	10840004 	addi	r2,r2,4096
  8050b4:	d0a0ed15 	stw	r2,-31820(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8050b8:	01002034 	movhi	r4,128
  8050bc:	0081c9f4 	movhi	r2,1831
  8050c0:	10838004 	addi	r2,r2,3584
  8050c4:	d1600904 	addi	r5,gp,-32732
  8050c8:	21171504 	addi	r4,r4,23636
  8050cc:	d0a0ec15 	stw	r2,-31824(gp)
  8050d0:	08053681 	jmpi	805368 <alt_dev_llist_insert>

008050d4 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  8050d4:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  8050d8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  8050dc:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  8050e0:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  8050e4:	11800b2e 	bgeu	r2,r6,805114 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8050e8:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  8050ec:	1a60000c 	andi	r9,r3,32768
  8050f0:	48000326 	beq	r9,zero,805100 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8050f4:	10c00005 	stb	r3,0(r2)
  8050f8:	10800044 	addi	r2,r2,1
  8050fc:	003ff906 	br	8050e4 <__alt_data_end+0xff8050e4>
    else if (ptr != buffer)
  805100:	11400226 	beq	r2,r5,80510c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  805104:	1145c83a 	sub	r2,r2,r5
  805108:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  80510c:	403ff526 	beq	r8,zero,8050e4 <__alt_data_end+0xff8050e4>
  805110:	00000106 	br	805118 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  805114:	117ffb1e 	bne	r2,r5,805104 <__alt_data_end+0xff805104>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  805118:	39d0000c 	andi	r7,r7,16384
  80511c:	3800021e 	bne	r7,zero,805128 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  805120:	00bffec4 	movi	r2,-5
  805124:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  805128:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  80512c:	f800283a 	ret

00805130 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  805130:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  805134:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  805138:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  80513c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  805140:	2980072e 	bgeu	r5,r6,805160 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  805144:	38c00037 	ldwio	r3,0(r7)
  805148:	18ffffec 	andhi	r3,r3,65535
  80514c:	183ffc26 	beq	r3,zero,805140 <__alt_data_end+0xff805140>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  805150:	28c00007 	ldb	r3,0(r5)
  805154:	20c00035 	stwio	r3,0(r4)
  805158:	29400044 	addi	r5,r5,1
  80515c:	003ff806 	br	805140 <__alt_data_end+0xff805140>

  return count;
}
  805160:	f800283a 	ret

00805164 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  805164:	d0e0ec17 	ldw	r3,-31824(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  805168:	d0a0ed17 	ldw	r2,-31820(gp)

  if (!altera_avalon_timer_ts_freq)
  80516c:	18000c26 	beq	r3,zero,8051a0 <alt_timestamp_start+0x3c>
    return -1;
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  805170:	11000104 	addi	r4,r2,4
  805174:	00c00204 	movi	r3,8
  805178:	20c00035 	stwio	r3,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  80517c:	00ffffd4 	movui	r3,65535
  805180:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  805184:	10c00335 	stwio	r3,12(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  805188:	10c00435 	stwio	r3,16(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  80518c:	10c00535 	stwio	r3,20(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  805190:	00800104 	movi	r2,4
  805194:	20800035 	stwio	r2,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  805198:	0005883a 	mov	r2,zero
  80519c:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
  8051a0:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
  8051a4:	f800283a 	ret

008051a8 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  8051a8:	d0a0ec17 	ldw	r2,-31824(gp)
  8051ac:	10000e26 	beq	r2,zero,8051e8 <alt_timestamp+0x40>
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  8051b0:	d120ed17 	ldw	r4,-31820(gp)
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  8051b4:	20800604 	addi	r2,r4,24
  8051b8:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  8051bc:	11400037 	ldwio	r5,0(r2)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  8051c0:	20800737 	ldwio	r2,28(r4)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  8051c4:	20c00837 	ldwio	r3,32(r4)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  8051c8:	21000937 	ldwio	r4,36(r4)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  8051cc:	2008943a 	slli	r4,r4,16
  8051d0:	1004943a 	slli	r2,r2,16
  8051d4:	297fffcc 	andi	r5,r5,65535
  8051d8:	18ffffcc 	andi	r3,r3,65535
  8051dc:	2884303a 	nor	r2,r5,r2
  8051e0:	20c6303a 	nor	r3,r4,r3
  8051e4:	f800283a 	ret
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
  8051e8:	00bfffc4 	movi	r2,-1
  8051ec:	1007883a 	mov	r3,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
  8051f0:	f800283a 	ret

008051f4 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
  8051f4:	d0a0ec17 	ldw	r2,-31824(gp)
  8051f8:	f800283a 	ret

008051fc <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
  8051fc:	d1600904 	addi	r5,gp,-32732
  805200:	08053d41 	jmpi	8053d4 <alt_find_dev>

00805204 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
  805204:	20800a17 	ldw	r2,40(r4)
  805208:	10800023 	ldbuio	r2,0(r2)
  80520c:	28800005 	stb	r2,0(r5)

	return 0;
}
  805210:	0005883a 	mov	r2,zero
  805214:	f800283a 	ret

00805218 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805218:	20800a17 	ldw	r2,40(r4)
  80521c:	29400fcc 	andi	r5,r5,63
  805220:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805224:	20800a17 	ldw	r2,40(r4)
  805228:	10800063 	ldbuio	r2,1(r2)
  80522c:	30800005 	stb	r2,0(r6)

	return 0;
}
  805230:	0005883a 	mov	r2,zero
  805234:	f800283a 	ret

00805238 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805238:	20800a17 	ldw	r2,40(r4)
  80523c:	29400fcc 	andi	r5,r5,63
  805240:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
  805244:	20800a17 	ldw	r2,40(r4)
  805248:	11800065 	stbio	r6,1(r2)

	return 0;
}
  80524c:	0005883a 	mov	r2,zero
  805250:	f800283a 	ret

00805254 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805254:	20800a17 	ldw	r2,40(r4)
  805258:	00c00c84 	movi	r3,50
  80525c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805260:	20800a17 	ldw	r2,40(r4)
  805264:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805268:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  80526c:	10803fcc 	andi	r2,r2,255
  805270:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805274:	20800a17 	ldw	r2,40(r4)
  805278:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  80527c:	20800a17 	ldw	r2,40(r4)
  805280:	10800063 	ldbuio	r2,1(r2)
  805284:	10803fcc 	andi	r2,r2,255
  805288:	1006923a 	slli	r3,r2,8
  80528c:	28800017 	ldw	r2,0(r5)
  805290:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
  805294:	10e0000c 	andi	r3,r2,32768
  805298:	18000126 	beq	r3,zero,8052a0 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
  80529c:	10bffff4 	orhi	r2,r2,65535
  8052a0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  8052a4:	0005883a 	mov	r2,zero
  8052a8:	f800283a 	ret

008052ac <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8052ac:	20800a17 	ldw	r2,40(r4)
  8052b0:	00c00d04 	movi	r3,52
  8052b4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8052b8:	20800a17 	ldw	r2,40(r4)
  8052bc:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8052c0:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8052c4:	10803fcc 	andi	r2,r2,255
  8052c8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8052cc:	20800a17 	ldw	r2,40(r4)
  8052d0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  8052d4:	20800a17 	ldw	r2,40(r4)
  8052d8:	10800063 	ldbuio	r2,1(r2)
  8052dc:	10803fcc 	andi	r2,r2,255
  8052e0:	1006923a 	slli	r3,r2,8
  8052e4:	28800017 	ldw	r2,0(r5)
  8052e8:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
  8052ec:	10e0000c 	andi	r3,r2,32768
  8052f0:	18000126 	beq	r3,zero,8052f8 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
  8052f4:	10bffff4 	orhi	r2,r2,65535
  8052f8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  8052fc:	0005883a 	mov	r2,zero
  805300:	f800283a 	ret

00805304 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805304:	20800a17 	ldw	r2,40(r4)
  805308:	00c00d84 	movi	r3,54
  80530c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805310:	20800a17 	ldw	r2,40(r4)
  805314:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805318:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  80531c:	10803fcc 	andi	r2,r2,255
  805320:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805324:	20800a17 	ldw	r2,40(r4)
  805328:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  80532c:	20800a17 	ldw	r2,40(r4)
  805330:	10800063 	ldbuio	r2,1(r2)
  805334:	10803fcc 	andi	r2,r2,255
  805338:	1006923a 	slli	r3,r2,8
  80533c:	28800017 	ldw	r2,0(r5)
  805340:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
  805344:	10e0000c 	andi	r3,r2,32768
  805348:	18000126 	beq	r3,zero,805350 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
  80534c:	10bffff4 	orhi	r2,r2,65535
  805350:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  805354:	0005883a 	mov	r2,zero
  805358:	f800283a 	ret

0080535c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80535c:	f800283a 	ret

00805360 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  805360:	3005883a 	mov	r2,r6
  805364:	f800283a 	ret

00805368 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  805368:	20000226 	beq	r4,zero,805374 <alt_dev_llist_insert+0xc>
  80536c:	20800217 	ldw	r2,8(r4)
  805370:	1000101e 	bne	r2,zero,8053b4 <alt_dev_llist_insert+0x4c>
  805374:	d0a00d17 	ldw	r2,-32716(gp)
  805378:	10000926 	beq	r2,zero,8053a0 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80537c:	deffff04 	addi	sp,sp,-4
  805380:	dfc00015 	stw	ra,0(sp)
  805384:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  805388:	00c00584 	movi	r3,22
  80538c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  805390:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  805394:	dfc00017 	ldw	ra,0(sp)
  805398:	dec00104 	addi	sp,sp,4
  80539c:	f800283a 	ret
  8053a0:	d0a0e704 	addi	r2,gp,-31844
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  8053a4:	00c00584 	movi	r3,22
  8053a8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  8053ac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  8053b0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  8053b4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8053b8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  8053bc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  8053c0:	28800017 	ldw	r2,0(r5)
  8053c4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  8053c8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  8053cc:	0005883a 	mov	r2,zero
  8053d0:	f800283a 	ret

008053d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8053d4:	defffb04 	addi	sp,sp,-20
  8053d8:	dcc00315 	stw	r19,12(sp)
  8053dc:	dc800215 	stw	r18,8(sp)
  8053e0:	dc400115 	stw	r17,4(sp)
  8053e4:	dc000015 	stw	r16,0(sp)
  8053e8:	dfc00415 	stw	ra,16(sp)
  8053ec:	2027883a 	mov	r19,r4
  8053f0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  8053f4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  8053f8:	0803b000 	call	803b00 <strlen>
  8053fc:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  805400:	84400726 	beq	r16,r17,805420 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  805404:	81000217 	ldw	r4,8(r16)
  805408:	900d883a 	mov	r6,r18
  80540c:	980b883a 	mov	r5,r19
  805410:	08054c80 	call	8054c8 <memcmp>
  805414:	10000426 	beq	r2,zero,805428 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  805418:	84000017 	ldw	r16,0(r16)
  80541c:	003ff806 	br	805400 <__alt_data_end+0xff805400>
  }
  
  /* No match found */
  
  return NULL;
  805420:	0005883a 	mov	r2,zero
  805424:	00000106 	br	80542c <alt_find_dev+0x58>
  805428:	8005883a 	mov	r2,r16
}
  80542c:	dfc00417 	ldw	ra,16(sp)
  805430:	dcc00317 	ldw	r19,12(sp)
  805434:	dc800217 	ldw	r18,8(sp)
  805438:	dc400117 	ldw	r17,4(sp)
  80543c:	dc000017 	ldw	r16,0(sp)
  805440:	dec00504 	addi	sp,sp,20
  805444:	f800283a 	ret

00805448 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  805448:	f800283a 	ret

0080544c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  80544c:	000170fa 	wrctl	ienable,zero
  805450:	f800283a 	ret

00805454 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  805454:	213ffe84 	addi	r4,r4,-6
  805458:	008003c4 	movi	r2,15
  80545c:	11001636 	bltu	r2,r4,8054b8 <alt_exception_cause_generated_bad_addr+0x64>
  805460:	200890ba 	slli	r4,r4,2
  805464:	00802034 	movhi	r2,128
  805468:	10951e04 	addi	r2,r2,21624
  80546c:	2089883a 	add	r4,r4,r2
  805470:	20800017 	ldw	r2,0(r4)
  805474:	1000683a 	jmp	r2
  805478:	008054c0 	call	8054c <__alt_mem_sdram-0x77fab4>
  80547c:	008054c0 	call	8054c <__alt_mem_sdram-0x77fab4>
  805480:	008054b8 	rdprs	r2,zero,338
  805484:	008054b8 	rdprs	r2,zero,338
  805488:	008054b8 	rdprs	r2,zero,338
  80548c:	008054c0 	call	8054c <__alt_mem_sdram-0x77fab4>
  805490:	008054b8 	rdprs	r2,zero,338
  805494:	008054b8 	rdprs	r2,zero,338
  805498:	008054c0 	call	8054c <__alt_mem_sdram-0x77fab4>
  80549c:	008054c0 	call	8054c <__alt_mem_sdram-0x77fab4>
  8054a0:	008054b8 	rdprs	r2,zero,338
  8054a4:	008054c0 	call	8054c <__alt_mem_sdram-0x77fab4>
  8054a8:	008054b8 	rdprs	r2,zero,338
  8054ac:	008054b8 	rdprs	r2,zero,338
  8054b0:	008054b8 	rdprs	r2,zero,338
  8054b4:	008054c0 	call	8054c <__alt_mem_sdram-0x77fab4>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8054b8:	0005883a 	mov	r2,zero
  8054bc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8054c0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  8054c4:	f800283a 	ret

008054c8 <memcmp>:
  8054c8:	218d883a 	add	r6,r4,r6
  8054cc:	21800826 	beq	r4,r6,8054f0 <memcmp+0x28>
  8054d0:	20800003 	ldbu	r2,0(r4)
  8054d4:	28c00003 	ldbu	r3,0(r5)
  8054d8:	10c00226 	beq	r2,r3,8054e4 <memcmp+0x1c>
  8054dc:	10c5c83a 	sub	r2,r2,r3
  8054e0:	f800283a 	ret
  8054e4:	21000044 	addi	r4,r4,1
  8054e8:	29400044 	addi	r5,r5,1
  8054ec:	003ff706 	br	8054cc <__alt_data_end+0xff8054cc>
  8054f0:	0005883a 	mov	r2,zero
  8054f4:	f800283a 	ret
