
snake.elf:     file format elf32-littlenios2
snake.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00005938 memsz 0x00005938 flags r-x
    LOAD off    0x00006958 vaddr 0x00805958 paddr 0x00805c7c align 2**12
         filesz 0x00000324 memsz 0x00000324 flags rw-
    LOAD off    0x00006fa0 vaddr 0x00805fa0 paddr 0x00805fa0 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000052e4  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004f4  00805464  00805464  00006464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000324  00805958  00805c7c  00006958  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  00805fa0  00805fa0  00006fa0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0080610c  0080610c  00006c7c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006c7c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000810  00000000  00000000  00006ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d04f  00000000  00000000  000074b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000427f  00000000  00000000  000144ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004f24  00000000  00000000  0001877e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d70  00000000  00000000  0001d6a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002910  00000000  00000000  0001e414  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009100  00000000  00000000  00020d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00029e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c98  00000000  00000000  00029e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002ccfe  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002cd01  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002cd04  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002cd05  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002cd06  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002cd0a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002cd0e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002cd12  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002cd1b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002cd24  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  0002cd2d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000030  00000000  00000000  0002cd32  2**0
                  CONTENTS, READONLY
 29 .jdi          000042a1  00000000  00000000  0002cd62  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000d4d6a  00000000  00000000  00031003  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
00805464 l    d  .rodata	00000000 .rodata
00805958 l    d  .rwdata	00000000 .rwdata
00805fa0 l    d  .bss	00000000 .bss
0080610c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../snake_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00805fa8 l     O .bss	00000004 count.3438
00805fa0 l     O .bss	00000008 lasttime.3439
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803e90 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00804444 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
008057cb l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00805ae0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00805c5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00805bc0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
008052cc l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00805ffc g     O .bss	00000004 alt_instruction_exception_handler
00804d68 g     F .text	0000002c alt_main
00803a40 g     F .text	0000002c strcpy
0080600c g     O .bss	00000100 alt_irq
008006cc g     F .text	00000070 disp_timer_init
00805fbc g     O .bss	00000004 norm_const
00805c7c g       *ABS*	00000000 __flash_rwdata_start
0080610c g       *ABS*	00000000 __alt_heap_start
00803c38 g     F .text	00000008 strtok_r
00805fb4 g     O .bss	00000004 disp_length
00803854 g     F .text	0000004c printf
00805ff4 g     O .bss	00000004 altera_avalon_timer_ts_freq
008009e4 g     F .text	00000038 hw_push_coefficients
0080355c g     F .text	00000060 memmove
00803ba8 g     F .text	00000090 __strtok_r
00805c60 g     O .rwdata	00000004 jtag_uart
008053b8 g     F .text	00000008 altera_nios2_gen2_irq_init
00804ab0 g     F .text	000000a8 __sfvwrite_small_str
00800000 g     F .entry	0000000c __reset
008051c0 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00805fb0 g     O .bss	00000004 led_val
00800020 g       *ABS*	00000000 __flash_exceptions_start
00805fe0 g     O .bss	00000004 errno
00805fec g     O .bss	00000004 alt_argv
0080dc44 g       *ABS*	00000000 _gp
00800a1c g     F .text	00000110 coeffs_to_fixed
00805bec g     O .rwdata	00000030 alt_fd_list
00805340 g     F .text	00000074 alt_find_dev
00805fc0 g     O .bss	00000004 cmdbuffer
00805fb8 g     O .bss	00000004 disp_offset
008053c0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
008007ac g     F .text	000000d4 to_hex
00805040 g     F .text	0000005c altera_avalon_jtag_uart_read
00803534 g     F .text	00000014 malloc
00803818 g     F .text	0000003c _printf_r
00801884 g     F .text	00000064 .hidden __udivsi3
00801024 g     F .text	00000010 hw_y_read
00800494 g     F .text	000000ac write_to_disp
008038a0 g     F .text	00000050 _sbrk_r
00805c64 g     O .rwdata	00000004 alt_max_fd
00801014 g     F .text	00000010 hw_x_read
00804bf4 g     F .text	00000094 alt_irq_register
00805fac g     O .bss	00000004 debug
00801968 g     F .text	000008ac .hidden __adddf3
008005c8 g     F .text	00000094 read_request
00800880 g     F .text	00000014 throw_code
00805c50 g     O .rwdata	00000004 _global_impure_ptr
0080610c g       *ABS*	00000000 __bss_end
00804bb0 g     F .text	00000044 alt_getchar
00801190 g     F .text	000005fc .hidden __udivdi3
008001bc g     F .text	00000060 led_timer_isr
0080065c g     F .text	00000070 acc_timer_init
00803e74 g     F .text	0000001c strtol
00805fe4 g     O .bss	00000004 alt_irq_active
00805fc4 g     O .bss	00000004 disp_buf
008000fc g     F .exceptions	00000060 alt_irq_handler
00805c1c g     O .rwdata	00000028 alt_dev_null
008052c8 g     F .text	00000004 alt_dcache_flush_all
00803450 g     F .text	00000080 .hidden __fixdfsi
008008f4 g     F .text	000000f0 acc_timer_isr
00800240 g     F .text	000001dc letter_to_hex
00805c7c g       *ABS*	00000000 __ram_rwdata_end
00805c68 g     O .rwdata	00000008 alt_dev_list
00804f98 g     F .text	00000060 write
00805160 g     F .text	00000008 alt_timestamp_freq
00805958 g       *ABS*	00000000 __ram_rodata_end
008039cc g     F .text	0000003c strcat
008018e8 g     F .text	00000058 .hidden __umodsi3
0080610c g       *ABS*	00000000 end
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
008034d0 g     F .text	00000064 .hidden __clzsi2
0080509c g     F .text	00000034 altera_avalon_jtag_uart_write
008044b0 g     F .text	0000052c ___vfprintf_internal_r
008038f0 g     F .text	00000064 _sprintf_r
008035dc g     F .text	000000e4 _free_r
00804d94 g     F .text	00000170 alt_printf
00805c44 g     O .rwdata	00000004 quality
00800180 g     F .text	0000003c _start
00800578 g     F .text	00000050 clr_disp
00805018 g     F .text	00000028 alt_sys_init
00805170 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00806000 g     O .bss	0000000c hexbuffers
00801940 g     F .text	00000028 .hidden __mulsi3
00805958 g       *ABS*	00000000 __ram_rwdata_start
00805464 g       *ABS*	00000000 __ram_rodata_start
00803a88 g     F .text	00000054 strncpy
00805218 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00803adc g     F .text	000000cc strtok
00805434 g     F .text	00000030 memcmp
0080610c g       *ABS*	00000000 __alt_stack_base
00802214 g     F .text	000009d0 .hidden __divdf3
00802be4 g     F .text	0000086c .hidden __muldf3
008052d4 g     F .text	0000006c alt_dev_llist_insert
00804f4c g     F .text	0000004c sbrk
00803efc g     F .text	0000052c ___svfprintf_internal_r
008049f8 g     F .text	000000b8 __sfvwrite_small_dev
00805fa0 g       *ABS*	00000000 __bss_start
008035bc g     F .text	00000020 memset
00801034 g     F .text	0000015c main
00805fe8 g     O .bss	00000004 alt_envp
01000000 g       *ABS*	00000000 __alt_heap_limit
00803c40 g     F .text	00000234 _strtol_r
008050d0 g     F .text	00000044 alt_timestamp_start
008036c0 g     F .text	00000158 _malloc_r
00805c78 g     O .rwdata	00000004 alt_errno
0080021c g     F .text	00000024 second_letter_to_hex
00805c48 g     O .rwdata	00000004 led_offset
0080178c g     F .text	00000084 .hidden __divsi3
00803a08 g     F .text	00000038 strcmp
00805464 g       *ABS*	00000000 __flash_rodata_start
00804ff8 g     F .text	00000020 alt_irq_init
00800b2c g     F .text	000004e8 parse_request
00803954 g     F .text	00000078 sprintf
008055ca g     O .rodata	00000100 .hidden __clz_tab
00804b58 g     F .text	00000058 _write_r
00805c54 g     O .rwdata	00000004 _impure_ptr
00805ff0 g     O .bss	00000004 alt_argc
00805ff8 g     O .bss	00000004 altera_avalon_timer_ts_base
00805958 g     O .rwdata	00000188 h
00800020 g       .exceptions	00000000 alt_irq_entry
00805c70 g     O .rwdata	00000008 alt_fs_list
00804428 g     F .text	0000001c __vfprintf_internal_unused
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805168 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00805114 g     F .text	0000004c alt_timestamp
00800894 g     F .text	00000028 hw_reset
00805c7c g       *ABS*	00000000 _edata
0080610c g       *ABS*	00000000 _end
00800540 g     F .text	00000038 disp_timer_isr
00800180 g       *ABS*	00000000 __ram_exceptions_end
00805fc8 g     O .bss	00000008 latency
00801810 g     F .text	00000074 .hidden __modsi3
00805c4c g     O .rwdata	00000004 __ctype_ptr__
00805270 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
008056ca g     O .rodata	00000101 _ctype_
0080000c g       .entry	00000000 _exit
00805184 g     F .text	00000020 alt_up_accelerometer_spi_read
008051a4 g     F .text	0000001c alt_up_accelerometer_spi_write
00803a6c g     F .text	0000001c strlen
00804f04 g     F .text	00000048 alt_putchar
00805fd8 g     O .bss	00000004 __malloc_sbrk_start
008053b4 g     F .text	00000004 alt_icache_flush_all
0080041c g     F .text	00000078 write_char
00805c58 g     O .rwdata	00000004 alt_priority_mask
00805fdc g     O .bss	00000004 __malloc_free_list
008049dc g     F .text	0000001c __vfprintf_internal
00805fd0 g     O .bss	00000004 acc_dev
0080073c g     F .text	00000070 led_timer_init
008008bc g     F .text	00000038 hw_push_value
00804c88 g     F .text	000000e0 alt_load
00803548 g     F .text	00000014 free
00805fd4 g     O .bss	00000004 led_buf



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80010c:	04002034 	movhi	r16,128
  800110:	84180304 	addi	r16,r16,24588

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	000b883a 	mov	r5,zero
    mask = 1;
  800118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	1888703a 	and	r4,r3,r2
  800120:	20000b26 	beq	r4,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800124:	280490fa 	slli	r2,r5,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	183ff51e 	bne	r3,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	1085883a 	add	r2,r2,r2
      i++;
  800154:	29400044 	addi	r5,r5,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a0ee17 	ldw	r2,-31816(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6b71114 	ori	gp,gp,56388
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	1097e814 	ori	r2,r2,24480

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d84314 	ori	r3,r3,24844

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	0804c880 	call	804c88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	0804d680 	call	804d68 <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <led_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void led_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  8001bc:	00804034 	movhi	r2,256
  8001c0:	10844804 	addi	r2,r2,4384
  8001c4:	10000035 	stwio	zero,0(r2)

	if (led_offset != -1){
  8001c8:	d0a00117 	ldw	r2,-32764(gp)
  8001cc:	017fffc4 	movi	r5,-1
  8001d0:	11401126 	beq	r2,r5,800218 <led_timer_isr+0x5c>


		if (led_buf[led_offset] == '\0'){
  8001d4:	d0e0e417 	ldw	r3,-31856(gp)
  8001d8:	1887883a 	add	r3,r3,r2
  8001dc:	19000007 	ldb	r4,0(r3)
  8001e0:	00c04034 	movhi	r3,256
  8001e4:	18c49404 	addi	r3,r3,4688
  8001e8:	2000031e 	bne	r4,zero,8001f8 <led_timer_isr+0x3c>
			led_offset = -1;
  8001ec:	d1600115 	stw	r5,-32764(gp)
			IOWR(LED_BASE, 0, led_val);
  8001f0:	d0a0db17 	ldw	r2,-31892(gp)
  8001f4:	00000506 	br	80020c <led_timer_isr+0x50>
  8001f8:	10800044 	addi	r2,r2,1

		}
		else if (led_buf[led_offset] == '1'){
  8001fc:	01400c44 	movi	r5,49
			led_offset++;
  800200:	d0a00115 	stw	r2,-32764(gp)
		if (led_buf[led_offset] == '\0'){
			led_offset = -1;
			IOWR(LED_BASE, 0, led_val);

		}
		else if (led_buf[led_offset] == '1'){
  800204:	2140031e 	bne	r4,r5,800214 <led_timer_isr+0x58>
			led_offset++;
			IOWR(LED_BASE, 0, 1023);
  800208:	0080ffc4 	movi	r2,1023
  80020c:	18800035 	stwio	r2,0(r3)
  800210:	f800283a 	ret
		}
		else{
			led_offset++;
			IOWR(LED_BASE, 0, 0);
  800214:	18000035 	stwio	zero,0(r3)
  800218:	f800283a 	ret

0080021c <second_letter_to_hex>:
	 norm_const = (FIXED)((int)(sum*scalefactor));
	 hw_push_coefficients(norm_const, norm_const);
}

int second_letter_to_hex(char in){
	switch(in){
  80021c:	21003fcc 	andi	r4,r4,255
  800220:	2100201c 	xori	r4,r4,128
  800224:	213fe004 	addi	r4,r4,-128
  800228:	00801344 	movi	r2,77
  80022c:	20800226 	beq	r4,r2,800238 <second_letter_to_hex+0x1c>
		case 'M':
			return 0b10101011;
	};
	return 0b11111111;
  800230:	00803fc4 	movi	r2,255
  800234:	f800283a 	ret
}

int second_letter_to_hex(char in){
	switch(in){
		case 'M':
			return 0b10101011;
  800238:	00802ac4 	movi	r2,171
	};
	return 0b11111111;
}
  80023c:	f800283a 	ret

00800240 <letter_to_hex>:


int letter_to_hex(char in, int* second){

	switch(in){
  800240:	213ff484 	addi	r4,r4,-46
  800244:	21003fcc 	andi	r4,r4,255
  800248:	00800b04 	movi	r2,44
  80024c:	11006f36 	bltu	r2,r4,80040c <letter_to_hex+0x1cc>
  800250:	200890ba 	slli	r4,r4,2
  800254:	00802034 	movhi	r2,128
  800258:	10809a04 	addi	r2,r2,616
  80025c:	2089883a 	add	r4,r4,r2
  800260:	20800017 	ldw	r2,0(r4)
  800264:	1000683a 	jmp	r2
  800268:	00800404 	movi	r2,16
  80026c:	0080040c 	andi	r2,zero,16
  800270:	00800414 	movui	r2,16
  800274:	0080031c 	xori	r2,zero,12
  800278:	008003fc 	xorhi	r2,zero,15
  80027c:	00800324 	muli	r2,zero,12
  800280:	0080032c 	andhi	r2,zero,12
  800284:	008003cc 	andi	r2,zero,15
  800288:	00800334 	movhi	r2,12
  80028c:	0080033c 	xorhi	r2,zero,12
  800290:	00800344 	movi	r2,13
  800294:	0080037c 	xorhi	r2,zero,13
  800298:	0080040c 	andi	r2,zero,16
  80029c:	0080040c 	andi	r2,zero,16
  8002a0:	0080040c 	andi	r2,zero,16
  8002a4:	0080040c 	andi	r2,zero,16
  8002a8:	0080040c 	andi	r2,zero,16
  8002ac:	0080040c 	andi	r2,zero,16
  8002b0:	0080040c 	andi	r2,zero,16
  8002b4:	0080034c 	andi	r2,zero,13
  8002b8:	00800354 	movui	r2,13
  8002bc:	0080035c 	xori	r2,zero,13
  8002c0:	00800364 	muli	r2,zero,13
  8002c4:	0080036c 	andhi	r2,zero,13
  8002c8:	00800374 	movhi	r2,13
  8002cc:	0080037c 	xorhi	r2,zero,13
  8002d0:	00800384 	movi	r2,14
  8002d4:	0080031c 	xori	r2,zero,12
  8002d8:	0080038c 	andi	r2,zero,14
  8002dc:	00800394 	movui	r2,14
  8002e0:	0080039c 	xori	r2,zero,14
  8002e4:	008003a4 	muli	r2,zero,14
  8002e8:	008003ac 	andhi	r2,zero,14
  8002ec:	00800414 	movui	r2,16
  8002f0:	008003b4 	movhi	r2,14
  8002f4:	008003bc 	xorhi	r2,zero,14
  8002f8:	008003c4 	movi	r2,15
  8002fc:	008003cc 	andi	r2,zero,15
  800300:	008003d4 	movui	r2,15
  800304:	008003dc 	xori	r2,zero,15
  800308:	008003e4 	muli	r2,zero,15
  80030c:	0080040c 	andi	r2,zero,16
  800310:	008003ec 	andhi	r2,zero,15
  800314:	008003f4 	movhi	r2,15
  800318:	008003fc 	xorhi	r2,zero,15
		case '0':
			return 0b11000000;
		case '1':
			return 0b11111001;
  80031c:	00803e44 	movi	r2,249
  800320:	f800283a 	ret
		case '2':
			return 0b10100100;
		case '3':
			return 0b10110000;
  800324:	00802c04 	movi	r2,176
  800328:	f800283a 	ret
		case '4':
			return 0b10011001;
  80032c:	00802644 	movi	r2,153
  800330:	f800283a 	ret
		case '5':
			return 0b10010010;
		case '6':
			return 0b10000010;
  800334:	00802084 	movi	r2,130
  800338:	f800283a 	ret
		case '7':
			return 0b11111000;
  80033c:	00803e04 	movi	r2,248
  800340:	f800283a 	ret
		case '8':
			return 0b10000000;
  800344:	00802004 	movi	r2,128
  800348:	f800283a 	ret
		case '9':
			return 0b10010000;
		case 'A':
			return 0b10001000;
  80034c:	00802204 	movi	r2,136
  800350:	f800283a 	ret
		case 'B'://Lowercase
			return 0b10000011;
  800354:	008020c4 	movi	r2,131
  800358:	f800283a 	ret
		case 'C':
			return 0b11000110;
  80035c:	00803184 	movi	r2,198
  800360:	f800283a 	ret
		case 'D'://Lowercase
			return 0b10100001;
  800364:	00802844 	movi	r2,161
  800368:	f800283a 	ret
		case 'E':
			return 0b10000110;
  80036c:	00802184 	movi	r2,134
  800370:	f800283a 	ret
		case 'F':
			return 0b10001110;
  800374:	00802384 	movi	r2,142
  800378:	f800283a 	ret
		case 'G':
			return 0b10010000;
  80037c:	00802404 	movi	r2,144
  800380:	f800283a 	ret
		case 'H':
			return 0b10001001;
  800384:	00802244 	movi	r2,137
  800388:	f800283a 	ret
		case 'I':
			return 0b11111001;
		case 'J':
			return 0b11110001;
  80038c:	00803c44 	movi	r2,241
  800390:	f800283a 	ret
		case 'K':
			return 0b10001010;
  800394:	00802284 	movi	r2,138
  800398:	f800283a 	ret
		case 'L':
			return 0b11000111;
  80039c:	008031c4 	movi	r2,199
  8003a0:	f800283a 	ret
		case 'M':
			*second = 1;
  8003a4:	00800044 	movi	r2,1
  8003a8:	28800015 	stw	r2,0(r5)
			return 0b10101011;
		case 'N':
			return 0b10101011;
  8003ac:	00802ac4 	movi	r2,171
  8003b0:	f800283a 	ret
		case 'O':
			return 0b11000000;
		case 'P':
			return 0b10001100;
  8003b4:	00802304 	movi	r2,140
  8003b8:	f800283a 	ret
		case 'Q':
			return 0b10011000;
  8003bc:	00802604 	movi	r2,152
  8003c0:	f800283a 	ret
		case 'R'://Lowercase
			return 0b10101111;
  8003c4:	00802bc4 	movi	r2,175
  8003c8:	f800283a 	ret
		case 'S':
			return 0b10010010;
  8003cc:	00802484 	movi	r2,146
  8003d0:	f800283a 	ret
		case 'T':
			return 0b10000111;
  8003d4:	008021c4 	movi	r2,135
  8003d8:	f800283a 	ret
		case 'U':
			return 0b11000001;
  8003dc:	00803044 	movi	r2,193
  8003e0:	f800283a 	ret
		case 'V':
			return 0b11100011;
  8003e4:	008038c4 	movi	r2,227
  8003e8:	f800283a 	ret
		case 'X':
			return 0b10011011;
  8003ec:	008026c4 	movi	r2,155
  8003f0:	f800283a 	ret
		case 'Y':
			return 0b10010001;
  8003f4:	00802444 	movi	r2,145
  8003f8:	f800283a 	ret
		case 'Z':
			return 0b10100100;
  8003fc:	00802904 	movi	r2,164
  800400:	f800283a 	ret
		case '.':
			return 0b00000000;
  800404:	0005883a 	mov	r2,zero
  800408:	f800283a 	ret
		default:
			return 0b11111111;
  80040c:	00803fc4 	movi	r2,255
  800410:	f800283a 	ret

int letter_to_hex(char in, int* second){

	switch(in){
		case '0':
			return 0b11000000;
  800414:	00803004 	movi	r2,192
		default:
			return 0b11111111;
	};

	return 0;
}
  800418:	f800283a 	ret

0080041c <write_char>:

void write_char(alt_32 code, int index){
	if (index == 5){
  80041c:	00800144 	movi	r2,5
  800420:	2880031e 	bne	r5,r2,800430 <write_char+0x14>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, code);
  800424:	00804034 	movhi	r2,256
  800428:	10849004 	addi	r2,r2,4672
  80042c:	00001706 	br	80048c <write_char+0x70>
	} else if (index == 4){
  800430:	00800104 	movi	r2,4
  800434:	2880031e 	bne	r5,r2,800444 <write_char+0x28>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, code);
  800438:	00804034 	movhi	r2,256
  80043c:	10848c04 	addi	r2,r2,4656
  800440:	00001206 	br	80048c <write_char+0x70>
	}else if (index == 3){
  800444:	008000c4 	movi	r2,3
  800448:	2880031e 	bne	r5,r2,800458 <write_char+0x3c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, code);
  80044c:	00804034 	movhi	r2,256
  800450:	10848804 	addi	r2,r2,4640
  800454:	00000d06 	br	80048c <write_char+0x70>
	}else if (index == 2){
  800458:	00800084 	movi	r2,2
  80045c:	2880031e 	bne	r5,r2,80046c <write_char+0x50>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, code);
  800460:	00804034 	movhi	r2,256
  800464:	10848404 	addi	r2,r2,4624
  800468:	00000806 	br	80048c <write_char+0x70>
	}else if (index == 1){
  80046c:	00800044 	movi	r2,1
  800470:	2880031e 	bne	r5,r2,800480 <write_char+0x64>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, code);
  800474:	00804034 	movhi	r2,256
  800478:	10848004 	addi	r2,r2,4608
  80047c:	00000306 	br	80048c <write_char+0x70>
	}else if (index == 0){
  800480:	2800031e 	bne	r5,zero,800490 <write_char+0x74>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, code);
  800484:	00804034 	movhi	r2,256
  800488:	10847c04 	addi	r2,r2,4592
  80048c:	11000035 	stwio	r4,0(r2)
  800490:	f800283a 	ret

00800494 <write_to_disp>:
	}
}
//Display processing
void write_to_disp(char* str, int offset){
  800494:	defff904 	addi	sp,sp,-28
  800498:	dd000515 	stw	r20,20(sp)
  80049c:	dcc00415 	stw	r19,16(sp)
  8004a0:	dc800315 	stw	r18,12(sp)
  8004a4:	dc400215 	stw	r17,8(sp)
  8004a8:	dc000115 	stw	r16,4(sp)
  8004ac:	dfc00615 	stw	ra,24(sp)
  8004b0:	2029883a 	mov	r20,r4
  8004b4:	2825883a 	mov	r18,r5
	int second = 0;
  8004b8:	d8000015 	stw	zero,0(sp)
	int code;
	int char_offset = 0;
	int flag;

	for(int i = 5; i>=0; i--){
  8004bc:	04000144 	movi	r16,5
}
//Display processing
void write_to_disp(char* str, int offset){
	int second = 0;
	int code;
	int char_offset = 0;
  8004c0:	0023883a 	mov	r17,zero
	int flag;

	for(int i = 5; i>=0; i--){
  8004c4:	04ffffc4 	movi	r19,-1
		if (second){
  8004c8:	d8c00017 	ldw	r3,0(sp)
  8004cc:	a445883a 	add	r2,r20,r17
			code = second_letter_to_hex(str[offset+char_offset]);
  8004d0:	1485883a 	add	r2,r2,r18
	int code;
	int char_offset = 0;
	int flag;

	for(int i = 5; i>=0; i--){
		if (second){
  8004d4:	18000726 	beq	r3,zero,8004f4 <write_to_disp+0x60>
			code = second_letter_to_hex(str[offset+char_offset]);
  8004d8:	11000007 	ldb	r4,0(r2)
  8004dc:	080021c0 	call	80021c <second_letter_to_hex>
			write_char(code, i);
  8004e0:	800b883a 	mov	r5,r16
  8004e4:	1009883a 	mov	r4,r2
  8004e8:	080041c0 	call	80041c <write_char>
			second = 0;
  8004ec:	d8000015 	stw	zero,0(sp)
  8004f0:	00000806 	br	800514 <write_to_disp+0x80>
			char_offset++;
			 flag = 0;
		}else{
			second = 0;
			flag = 0;
			code = letter_to_hex(str[offset+char_offset], &second);
  8004f4:	11000007 	ldb	r4,0(r2)
  8004f8:	d80b883a 	mov	r5,sp
  8004fc:	08002400 	call	800240 <letter_to_hex>
			write_char(code, i);
  800500:	1009883a 	mov	r4,r2
  800504:	800b883a 	mov	r5,r16
  800508:	080041c0 	call	80041c <write_char>

			if(second == 0){char_offset++;}
  80050c:	d8800017 	ldw	r2,0(sp)
  800510:	1000011e 	bne	r2,zero,800518 <write_to_disp+0x84>
  800514:	8c400044 	addi	r17,r17,1
	int second = 0;
	int code;
	int char_offset = 0;
	int flag;

	for(int i = 5; i>=0; i--){
  800518:	843fffc4 	addi	r16,r16,-1
  80051c:	84ffea1e 	bne	r16,r19,8004c8 <__alt_data_end+0xff8004c8>
			write_char(code, i);

			if(second == 0){char_offset++;}
		}
	}
}
  800520:	dfc00617 	ldw	ra,24(sp)
  800524:	dd000517 	ldw	r20,20(sp)
  800528:	dcc00417 	ldw	r19,16(sp)
  80052c:	dc800317 	ldw	r18,12(sp)
  800530:	dc400217 	ldw	r17,8(sp)
  800534:	dc000117 	ldw	r16,4(sp)
  800538:	dec00704 	addi	sp,sp,28
  80053c:	f800283a 	ret

00800540 <disp_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);

}

void disp_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  800540:	00804034 	movhi	r2,256
  800544:	10843804 	addi	r2,r2,4320
  800548:	10000035 	stwio	zero,0(r2)

    if(disp_buf[disp_offset+5] == '\0'){
  80054c:	d120e017 	ldw	r4,-31872(gp)
  800550:	d0a0dd17 	ldw	r2,-31884(gp)
  800554:	2087883a 	add	r3,r4,r2
  800558:	18c00147 	ldb	r3,5(r3)
  80055c:	1800021e 	bne	r3,zero,800568 <disp_timer_isr+0x28>
    	disp_offset = 0;
  800560:	d020dd15 	stw	zero,-31884(gp)
  800564:	00000206 	br	800570 <disp_timer_isr+0x30>
    }
    else{
    	disp_offset++;
  800568:	10800044 	addi	r2,r2,1
  80056c:	d0a0dd15 	stw	r2,-31884(gp)
    }
    write_to_disp(disp_buf,disp_offset);
  800570:	d160dd17 	ldw	r5,-31884(gp)
  800574:	08004941 	jmpi	800494 <write_to_disp>

00800578 <clr_disp>:
	}
}


void clr_disp(){
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 255);
  800578:	00c04034 	movhi	r3,256
  80057c:	00803fc4 	movi	r2,255
  800580:	18c47c04 	addi	r3,r3,4592
  800584:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 255);
  800588:	00c04034 	movhi	r3,256
  80058c:	18c48004 	addi	r3,r3,4608
  800590:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 255);
  800594:	00c04034 	movhi	r3,256
  800598:	18c48404 	addi	r3,r3,4624
  80059c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 255);
  8005a0:	00c04034 	movhi	r3,256
  8005a4:	18c48804 	addi	r3,r3,4640
  8005a8:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 255);
  8005ac:	00c04034 	movhi	r3,256
  8005b0:	18c48c04 	addi	r3,r3,4656
  8005b4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 255);
  8005b8:	00c04034 	movhi	r3,256
  8005bc:	18c49004 	addi	r3,r3,4672
  8005c0:	18800035 	stwio	r2,0(r3)
  8005c4:	f800283a 	ret

008005c8 <read_request>:
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  8005c8:	defffb04 	addi	sp,sp,-20
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  8005cc:	01801004 	movi	r6,64
  8005d0:	000b883a 	mov	r5,zero
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  8005d4:	dfc00415 	stw	ra,16(sp)
  8005d8:	dcc00315 	stw	r19,12(sp)
  8005dc:	dc800215 	stw	r18,8(sp)
  8005e0:	dc400115 	stw	r17,4(sp)
  8005e4:	dc000015 	stw	r16,0(sp)
  8005e8:	2023883a 	mov	r17,r4
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  8005ec:	08035bc0 	call	8035bc <memset>

	//Get first character
	c = alt_getchar();
  8005f0:	0804bb00 	call	804bb0 <alt_getchar>
  8005f4:	1025883a 	mov	r18,r2

	//Start timer after first char received
	latency = alt_timestamp();
  8005f8:	08051140 	call	805114 <alt_timestamp>
  8005fc:	d0a0e115 	stw	r2,-31868(gp)
  800600:	d0e0e215 	stw	r3,-31864(gp)

	while(c != '\n'){
  800604:	8821883a 	mov	r16,r17
  800608:	04c00284 	movi	r19,10
  80060c:	90803fcc 	andi	r2,r18,255
  800610:	1080201c 	xori	r2,r2,128
  800614:	10bfe004 	addi	r2,r2,-128
  800618:	8449c83a 	sub	r4,r16,r17
  80061c:	14c00526 	beq	r2,r19,800634 <read_request+0x6c>
		outbuf[idx] = c;
  800620:	84800005 	stb	r18,0(r16)
		c = alt_getchar();
  800624:	0804bb00 	call	804bb0 <alt_getchar>
  800628:	1025883a 	mov	r18,r2
  80062c:	84000044 	addi	r16,r16,1
  800630:	003ff606 	br	80060c <__alt_data_end+0xff80060c>
		idx++;
	}
	outbuf[idx] = ' ';
  800634:	8909883a 	add	r4,r17,r4
  800638:	00800804 	movi	r2,32
  80063c:	20800005 	stb	r2,0(r4)

}
  800640:	dfc00417 	ldw	ra,16(sp)
  800644:	dcc00317 	ldw	r19,12(sp)
  800648:	dc800217 	ldw	r18,8(sp)
  80064c:	dc400117 	ldw	r17,4(sp)
  800650:	dc000017 	ldw	r16,0(sp)
  800654:	dec00504 	addi	sp,sp,20
  800658:	f800283a 	ret

0080065c <acc_timer_init>:

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  80065c:	defffe04 	addi	sp,sp,-8
  800660:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  800664:	04004034 	movhi	r16,256

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  800668:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  80066c:	84043104 	addi	r16,r16,4292
  800670:	008000c4 	movi	r2,3
  800674:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800678:	00804034 	movhi	r2,256
  80067c:	10843004 	addi	r2,r2,4288
  800680:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(ACC_TIMER_BASE, 0xfbd0);
  800684:	00804034 	movhi	r2,256
  800688:	10843204 	addi	r2,r2,4296
  80068c:	00fef414 	movui	r3,64464
  800690:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(ACC_TIMER_BASE, 0x0001);
  800694:	00804034 	movhi	r2,256
  800698:	10843304 	addi	r2,r2,4300
  80069c:	00c00044 	movi	r3,1
  8006a0:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
  8006a4:	200d883a 	mov	r6,r4
  8006a8:	000b883a 	mov	r5,zero
  8006ac:	01000244 	movi	r4,9
  8006b0:	0804bf40 	call	804bf4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);
  8006b4:	008001c4 	movi	r2,7
  8006b8:	80800035 	stwio	r2,0(r16)

}
  8006bc:	dfc00117 	ldw	ra,4(sp)
  8006c0:	dc000017 	ldw	r16,0(sp)
  8006c4:	dec00204 	addi	sp,sp,8
  8006c8:	f800283a 	ret

008006cc <disp_timer_init>:
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  8006cc:	defffe04 	addi	sp,sp,-8
  8006d0:	dc000015 	stw	r16,0(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  8006d4:	04004034 	movhi	r16,256
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  8006d8:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  8006dc:	84043904 	addi	r16,r16,4324
  8006e0:	008000c4 	movi	r2,3
  8006e4:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  8006e8:	00804034 	movhi	r2,256
  8006ec:	10843804 	addi	r2,r2,4320
  8006f0:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(HEX_TIMER_BASE, 0x5a00);
  8006f4:	00804034 	movhi	r2,256
  8006f8:	10843a04 	addi	r2,r2,4328
  8006fc:	00d68004 	movi	r3,23040
  800700:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(HEX_TIMER_BASE, 0x0262);
  800704:	00804034 	movhi	r2,256
  800708:	10843b04 	addi	r2,r2,4332
  80070c:	00c09884 	movi	r3,610
  800710:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(HEX_TIMER_IRQ, 0, isr);
  800714:	200d883a 	mov	r6,r4
  800718:	000b883a 	mov	r5,zero
  80071c:	01000204 	movi	r4,8
  800720:	0804bf40 	call	804bf4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);
  800724:	008001c4 	movi	r2,7
  800728:	80800035 	stwio	r2,0(r16)

}
  80072c:	dfc00117 	ldw	ra,4(sp)
  800730:	dc000017 	ldw	r16,0(sp)
  800734:	dec00204 	addi	sp,sp,8
  800738:	f800283a 	ret

0080073c <led_timer_init>:



}

void led_timer_init(void * isr) {
  80073c:	defffe04 	addi	sp,sp,-8
  800740:	dc000015 	stw	r16,0(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  800744:	04004034 	movhi	r16,256



}

void led_timer_init(void * isr) {
  800748:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  80074c:	84044904 	addi	r16,r16,4388
  800750:	008000c4 	movi	r2,3
  800754:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  800758:	00804034 	movhi	r2,256
  80075c:	10844804 	addi	r2,r2,4384
  800760:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x5d40);
  800764:	00804034 	movhi	r2,256
  800768:	10844a04 	addi	r2,r2,4392
  80076c:	00d75004 	movi	r3,23872
  800770:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x00c6);
  800774:	00804034 	movhi	r2,256
  800778:	10844b04 	addi	r2,r2,4396
  80077c:	00c03184 	movi	r3,198
  800780:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
  800784:	200d883a 	mov	r6,r4
  800788:	000b883a 	mov	r5,zero
  80078c:	01000144 	movi	r4,5
  800790:	0804bf40 	call	804bf4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
  800794:	008001c4 	movi	r2,7
  800798:	80800035 	stwio	r2,0(r16)

}
  80079c:	dfc00117 	ldw	ra,4(sp)
  8007a0:	dc000017 	ldw	r16,0(sp)
  8007a4:	dec00204 	addi	sp,sp,8
  8007a8:	f800283a 	ret

008007ac <to_hex>:
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  8007ac:	defffc04 	addi	sp,sp,-16
  8007b0:	dc400115 	stw	r17,4(sp)
  8007b4:	3023883a 	mov	r17,r6
  8007b8:	dc800215 	stw	r18,8(sp)
  8007bc:	dc000015 	stw	r16,0(sp)
  8007c0:	2025883a 	mov	r18,r4
  8007c4:	2821883a 	mov	r16,r5
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  8007c8:	01800204 	movi	r6,8
  8007cc:	000b883a 	mov	r5,zero
  8007d0:	8809883a 	mov	r4,r17
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  8007d4:	dfc00315 	stw	ra,12(sp)
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  8007d8:	08035bc0 	call	8035bc <memset>
	sprintf(buf, "%x", val);
  8007dc:	01402034 	movhi	r5,128
  8007e0:	8809883a 	mov	r4,r17
  8007e4:	900d883a 	mov	r6,r18
  8007e8:	29551904 	addi	r5,r5,21604
  8007ec:	08039540 	call	803954 <sprintf>
	int hexlen = strlen(buf);
  8007f0:	8809883a 	mov	r4,r17
  8007f4:	0803a6c0 	call	803a6c <strlen>

	//Left shift if string is longer than desired length to take least significant
	if (hexlen > length){
  8007f8:	8080090e 	bge	r16,r2,800820 <to_hex+0x74>
  8007fc:	8807883a 	mov	r3,r17
		for(int i = 0; i < length; i++){
  800800:	1c49c83a 	sub	r4,r3,r17
  800804:	24000c0e 	bge	r4,r16,800838 <to_hex+0x8c>
			buf[i] = buf[(i + hexlen - length)];
  800808:	10c9883a 	add	r4,r2,r3
  80080c:	2409c83a 	sub	r4,r4,r16
  800810:	21000003 	ldbu	r4,0(r4)
  800814:	18c00044 	addi	r3,r3,1
  800818:	193fffc5 	stb	r4,-1(r3)
  80081c:	003ff806 	br	800800 <__alt_data_end+0xff800800>
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
  800820:	1400050e 	bge	r2,r16,800838 <to_hex+0x8c>
  800824:	80ffffc4 	addi	r3,r16,-1
  800828:	88c7883a 	add	r3,r17,r3
  80082c:	0009883a 	mov	r4,zero
		for(int i = 0; i < length; i++){
			if(i < hexlen){
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
			}
			else{
				buf[(length - 1 - i)] = '0';
  800830:	01800c04 	movi	r6,48
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800834:	24000816 	blt	r4,r16,800858 <to_hex+0xac>
			}

		}
	}
	//Add termination
	buf[length] = '\0';
  800838:	8c21883a 	add	r16,r17,r16
  80083c:	80000005 	stb	zero,0(r16)

}
  800840:	dfc00317 	ldw	ra,12(sp)
  800844:	dc800217 	ldw	r18,8(sp)
  800848:	dc400117 	ldw	r17,4(sp)
  80084c:	dc000017 	ldw	r16,0(sp)
  800850:	dec00404 	addi	sp,sp,16
  800854:	f800283a 	ret
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
			if(i < hexlen){
  800858:	2080050e 	bge	r4,r2,800870 <to_hex+0xc4>
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
  80085c:	1c0bc83a 	sub	r5,r3,r16
  800860:	288b883a 	add	r5,r5,r2
  800864:	29400003 	ldbu	r5,0(r5)
  800868:	19400005 	stb	r5,0(r3)
  80086c:	00000106 	br	800874 <to_hex+0xc8>
			}
			else{
				buf[(length - 1 - i)] = '0';
  800870:	19800005 	stb	r6,0(r3)
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800874:	21000044 	addi	r4,r4,1
  800878:	18ffffc4 	addi	r3,r3,-1
  80087c:	003fed06 	br	800834 <__alt_data_end+0xff800834>

00800880 <throw_code>:

}


void throw_code(char* regname, int code){
	printf("K %s %x\n", regname, code);
  800880:	280d883a 	mov	r6,r5
  800884:	200b883a 	mov	r5,r4
  800888:	01002034 	movhi	r4,128
  80088c:	21151a04 	addi	r4,r4,21608
  800890:	08038541 	jmpi	803854 <printf>

00800894 <hw_reset>:
}

//Hardware helper functions
void hw_reset(){
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800894:	00804034 	movhi	r2,256
  800898:	0007883a 	mov	r3,zero
  80089c:	10846804 	addi	r2,r2,4512
  8008a0:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 4);
  8008a4:	01000104 	movi	r4,4
  8008a8:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 7);
  8008ac:	010001c4 	movi	r4,7
  8008b0:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  8008b4:	10c00035 	stwio	r3,0(r2)
  8008b8:	f800283a 	ret

008008bc <hw_push_value>:
};

void hw_push_value(alt_32 xvalue, alt_32 yvalue){
	IOWR(HARDWARE_OUT_X_BASE,0, xvalue);
  8008bc:	00804034 	movhi	r2,256
  8008c0:	10847004 	addi	r2,r2,4544
  8008c4:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_OUT_Y_BASE,0, yvalue);
  8008c8:	00804034 	movhi	r2,256
  8008cc:	10846004 	addi	r2,r2,4480
  8008d0:	11400035 	stwio	r5,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  8008d4:	00804034 	movhi	r2,256
  8008d8:	0007883a 	mov	r3,zero
  8008dc:	10846804 	addi	r2,r2,4512
  8008e0:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 1);
  8008e4:	01000044 	movi	r4,1
  8008e8:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  8008ec:	10c00035 	stwio	r3,0(r2)
  8008f0:	f800283a 	ret

008008f4 <acc_timer_isr>:
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  8008f4:	defffb04 	addi	sp,sp,-20
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  8008f8:	00804034 	movhi	r2,256
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  8008fc:	dfc00415 	stw	ra,16(sp)
  800900:	dc400315 	stw	r17,12(sp)
  800904:	dc000215 	stw	r16,8(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800908:	10843004 	addi	r2,r2,4288
  80090c:	10000035 	stwio	zero,0(r2)


    alt_32 x,y;

    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800910:	d120e317 	ldw	r4,-31860(gp)
  800914:	d9400104 	addi	r5,sp,4
  800918:	08051c00 	call	8051c0 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  80091c:	d120e317 	ldw	r4,-31860(gp)
  800920:	d80b883a 	mov	r5,sp
  800924:	08052180 	call	805218 <alt_up_accelerometer_spi_read_y_axis>

	hw_push_value(x,y);
  800928:	d9400017 	ldw	r5,0(sp)
  80092c:	d9000117 	ldw	r4,4(sp)
  800930:	08008bc0 	call	8008bc <hw_push_value>

	//iNTERRUPT FREQUENCY MONITORING
	static int count;
	static alt_64 lasttime;

    if(debug && ((count & 4095) == 0) ){
  800934:	d0a0da17 	ldw	r2,-31896(gp)
  800938:	10002226 	beq	r2,zero,8009c4 <acc_timer_isr+0xd0>
  80093c:	d0a0d917 	ldw	r2,-31900(gp)
  800940:	1083ffcc 	andi	r2,r2,4095
  800944:	10001f1e 	bne	r2,zero,8009c4 <acc_timer_isr+0xd0>
    	printf("Avg sampling period (us): %i\n", (alt_timestamp()-lasttime)/4096 /(alt_timestamp_freq()/1000000) );
  800948:	08051140 	call	805114 <alt_timestamp>
  80094c:	d460d717 	ldw	r17,-31908(gp)
  800950:	d160d817 	ldw	r5,-31904(gp)
  800954:	1463c83a 	sub	r17,r2,r17
  800958:	1445803a 	cmpltu	r2,r2,r17
  80095c:	1947c83a 	sub	r3,r3,r5
  800960:	1887c83a 	sub	r3,r3,r2
  800964:	1804953a 	slli	r2,r3,20
  800968:	8822d33a 	srli	r17,r17,12
  80096c:	1820d33a 	srli	r16,r3,12
  800970:	1462b03a 	or	r17,r2,r17
  800974:	08051600 	call	805160 <alt_timestamp_freq>
  800978:	014003f4 	movhi	r5,15
  80097c:	29509004 	addi	r5,r5,16960
  800980:	1009883a 	mov	r4,r2
  800984:	08018840 	call	801884 <__udivsi3>
  800988:	000f883a 	mov	r7,zero
  80098c:	100d883a 	mov	r6,r2
  800990:	8809883a 	mov	r4,r17
  800994:	800b883a 	mov	r5,r16
  800998:	08011900 	call	801190 <__udivdi3>
  80099c:	01002034 	movhi	r4,128
  8009a0:	100b883a 	mov	r5,r2
  8009a4:	180d883a 	mov	r6,r3
  8009a8:	21151d04 	addi	r4,r4,21620
  8009ac:	08038540 	call	803854 <printf>
		count = 1;
  8009b0:	00800044 	movi	r2,1
  8009b4:	d0a0d915 	stw	r2,-31900(gp)
		lasttime = alt_timestamp();
  8009b8:	08051140 	call	805114 <alt_timestamp>
  8009bc:	d0a0d715 	stw	r2,-31908(gp)
  8009c0:	d0e0d815 	stw	r3,-31904(gp)
    }
    count++;
  8009c4:	d0a0d917 	ldw	r2,-31900(gp)
  8009c8:	10800044 	addi	r2,r2,1
  8009cc:	d0a0d915 	stw	r2,-31900(gp)
}
  8009d0:	dfc00417 	ldw	ra,16(sp)
  8009d4:	dc400317 	ldw	r17,12(sp)
  8009d8:	dc000217 	ldw	r16,8(sp)
  8009dc:	dec00504 	addi	sp,sp,20
  8009e0:	f800283a 	ret

008009e4 <hw_push_coefficients>:
	IOWR(HARDWARE_CLOCKS_BASE, 0, 1);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);

}
void hw_push_coefficients(alt_32 xvalue, alt_32 yvalue){
	IOWR(HARDWARE_OUT_X_BASE,0, xvalue);
  8009e4:	00804034 	movhi	r2,256
  8009e8:	10847004 	addi	r2,r2,4544
  8009ec:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_OUT_Y_BASE,0, yvalue);
  8009f0:	00804034 	movhi	r2,256
  8009f4:	10846004 	addi	r2,r2,4480
  8009f8:	11400035 	stwio	r5,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  8009fc:	00804034 	movhi	r2,256
  800a00:	0007883a 	mov	r3,zero
  800a04:	10846804 	addi	r2,r2,4512
  800a08:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
  800a0c:	01000084 	movi	r4,2
  800a10:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800a14:	10c00035 	stwio	r3,0(r2)
  800a18:	f800283a 	ret

00800a1c <coeffs_to_fixed>:


//Ring buffer
//---------------------------------------------------------------

void coeffs_to_fixed(){
  800a1c:	defffa04 	addi	sp,sp,-24
  800a20:	dd000415 	stw	r20,16(sp)
  800a24:	dcc00315 	stw	r19,12(sp)
  800a28:	dc800215 	stw	r18,8(sp)
  800a2c:	dc400115 	stw	r17,4(sp)
  800a30:	dc000015 	stw	r16,0(sp)
  800a34:	dfc00515 	stw	ra,20(sp)

	hw_reset();
  800a38:	08008940 	call	800894 <hw_reset>

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800a3c:	d0a00017 	ldw	r2,-32768(gp)

void coeffs_to_fixed(){

	hw_reset();

	double sum = 0;
  800a40:	0029883a 	mov	r20,zero
  800a44:	0027883a 	mov	r19,zero

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800a48:	1006d7fa 	srli	r3,r2,31
  800a4c:	1885883a 	add	r2,r3,r2
  800a50:	1023d07a 	srai	r17,r2,1
	int upper_bound = RING_SIZE/2 + quality/2;
  800a54:	1005d07a 	srai	r2,r2,1

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800a58:	0463c83a 	sub	r17,zero,r17
  800a5c:	8c400744 	addi	r17,r17,29
  800a60:	882490fa 	slli	r18,r17,3
	int upper_bound = RING_SIZE/2 + quality/2;
  800a64:	14000744 	addi	r16,r2,29
  800a68:	00802034 	movhi	r2,128
  800a6c:	10965604 	addi	r2,r2,22872
  800a70:	90a5883a 	add	r18,r18,r2

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){
  800a74:	8c00150e 	bge	r17,r16,800acc <coeffs_to_fixed+0xb0>

		temp = (FIXED)(h[i]*scalefactor);
  800a78:	91000017 	ldw	r4,0(r18)
  800a7c:	91400117 	ldw	r5,4(r18)
  800a80:	000d883a 	mov	r6,zero
  800a84:	01d02834 	movhi	r7,16544
  800a88:	0802be40 	call	802be4 <__muldf3>
  800a8c:	180b883a 	mov	r5,r3
  800a90:	1009883a 	mov	r4,r2
  800a94:	08034500 	call	803450 <__fixdfsi>
		hw_push_coefficients(temp, temp);
  800a98:	100b883a 	mov	r5,r2
  800a9c:	1009883a 	mov	r4,r2
  800aa0:	08009e40 	call	8009e4 <hw_push_coefficients>
		sum += h[i];
  800aa4:	91800017 	ldw	r6,0(r18)
  800aa8:	91c00117 	ldw	r7,4(r18)
  800aac:	a009883a 	mov	r4,r20
  800ab0:	980b883a 	mov	r5,r19
  800ab4:	08019680 	call	801968 <__adddf3>
  800ab8:	1029883a 	mov	r20,r2
  800abc:	1827883a 	mov	r19,r3
	int lower_bound = RING_SIZE/2 - quality/2;
	int upper_bound = RING_SIZE/2 + quality/2;

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){
  800ac0:	8c400044 	addi	r17,r17,1
  800ac4:	94800204 	addi	r18,r18,8
  800ac8:	003fea06 	br	800a74 <__alt_data_end+0xff800a74>

	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
  800acc:	a00d883a 	mov	r6,r20
  800ad0:	980f883a 	mov	r7,r19
  800ad4:	0009883a 	mov	r4,zero
  800ad8:	014ffc34 	movhi	r5,16368
  800adc:	08022140 	call	802214 <__divdf3>
  800ae0:	000d883a 	mov	r6,zero
  800ae4:	01d02834 	movhi	r7,16544
  800ae8:	1009883a 	mov	r4,r2
  800aec:	180b883a 	mov	r5,r3
  800af0:	0802be40 	call	802be4 <__muldf3>
  800af4:	180b883a 	mov	r5,r3
  800af8:	1009883a 	mov	r4,r2
  800afc:	08034500 	call	803450 <__fixdfsi>
	 hw_push_coefficients(norm_const, norm_const);
  800b00:	100b883a 	mov	r5,r2
  800b04:	1009883a 	mov	r4,r2

	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
  800b08:	d0a0de15 	stw	r2,-31880(gp)
	 hw_push_coefficients(norm_const, norm_const);
}
  800b0c:	dfc00517 	ldw	ra,20(sp)
  800b10:	dd000417 	ldw	r20,16(sp)
  800b14:	dcc00317 	ldw	r19,12(sp)
  800b18:	dc800217 	ldw	r18,8(sp)
  800b1c:	dc400117 	ldw	r17,4(sp)
  800b20:	dc000017 	ldw	r16,0(sp)
  800b24:	dec00604 	addi	sp,sp,24
	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
	 hw_push_coefficients(norm_const, norm_const);
  800b28:	08009e41 	jmpi	8009e4 <hw_push_coefficients>

00800b2c <parse_request>:
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  800b2c:	deffef04 	addi	sp,sp,-68
	int token_number = 0;
	char* tokens[8] = {};
  800b30:	01800804 	movi	r6,32
  800b34:	000b883a 	mov	r5,zero
  800b38:	d809883a 	mov	r4,sp
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  800b3c:	dfc01015 	stw	ra,64(sp)
  800b40:	dc000b15 	stw	r16,44(sp)
  800b44:	dd000f15 	stw	r20,60(sp)
  800b48:	dcc00e15 	stw	r19,56(sp)
  800b4c:	dc800d15 	stw	r18,52(sp)
  800b50:	dc400c15 	stw	r17,48(sp)
	int token_number = 0;
	char* tokens[8] = {};
  800b54:	08035bc0 	call	8035bc <memset>
	char* token;


	token = strtok(cmdbuffer, " ");
  800b58:	d120df17 	ldw	r4,-31876(gp)
  800b5c:	01402034 	movhi	r5,128
  800b60:	29553c04 	addi	r5,r5,21744
  800b64:	0803adc0 	call	803adc <strtok>
	outbuf[idx] = ' ';

}

void parse_request(char* request){
	int token_number = 0;
  800b68:	0021883a 	mov	r16,zero


	token = strtok(cmdbuffer, " ");


	while(token != NULL){
  800b6c:	10000a26 	beq	r2,zero,800b98 <parse_request+0x6c>
		tokens[token_number]= token;
  800b70:	8407883a 	add	r3,r16,r16
  800b74:	18c7883a 	add	r3,r3,r3
  800b78:	d8c7883a 	add	r3,sp,r3
		token_number++;
		token = strtok(NULL, " ");
  800b7c:	01402034 	movhi	r5,128

	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
  800b80:	18800015 	stw	r2,0(r3)
		token_number++;
		token = strtok(NULL, " ");
  800b84:	29553c04 	addi	r5,r5,21744
  800b88:	0009883a 	mov	r4,zero
	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
		token_number++;
  800b8c:	84000044 	addi	r16,r16,1
		token = strtok(NULL, " ");
  800b90:	0803adc0 	call	803adc <strtok>
  800b94:	003ff506 	br	800b6c <__alt_data_end+0xff800b6c>
	}

	if(token_number == 0 || strcmp(tokens[0], &"R" ) != 0){
  800b98:	80000526 	beq	r16,zero,800bb0 <parse_request+0x84>
  800b9c:	d9000017 	ldw	r4,0(sp)
  800ba0:	01402034 	movhi	r5,128
  800ba4:	29552504 	addi	r5,r5,21652
  800ba8:	0803a080 	call	803a08 <strcmp>
  800bac:	10000226 	beq	r2,zero,800bb8 <parse_request+0x8c>
		throw_code(&"ERR", 1);
  800bb0:	01400044 	movi	r5,1
  800bb4:	00008f06 	br	800df4 <parse_request+0x2c8>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
  800bb8:	dc400117 	ldw	r17,4(sp)
  800bbc:	01402034 	movhi	r5,128
  800bc0:	29552704 	addi	r5,r5,21660
  800bc4:	8809883a 	mov	r4,r17
  800bc8:	0803a080 	call	803a08 <strcmp>
  800bcc:	1025883a 	mov	r18,r2
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
  800bd0:	10000526 	beq	r2,zero,800be8 <parse_request+0xbc>
  800bd4:	01402034 	movhi	r5,128
  800bd8:	29552804 	addi	r5,r5,21664
  800bdc:	8809883a 	mov	r4,r17
  800be0:	0803a080 	call	803a08 <strcmp>
  800be4:	1000241e 	bne	r2,zero,800c78 <parse_request+0x14c>
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
}
alt_32 hw_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_X_BASE);
  800be8:	00804034 	movhi	r2,256
  800bec:	10846c04 	addi	r2,r2,4528
  800bf0:	15000037 	ldwio	r20,0(r2)
}

alt_32 hw_y_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_Y_BASE);
  800bf4:	00804034 	movhi	r2,256
  800bf8:	10846404 	addi	r2,r2,4496
  800bfc:	14c00037 	ldwio	r19,0(r2)
		matched = 1;

		alt_32 x,y,z;
			x = hw_x_read();
			y = hw_y_read();
			alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800c00:	d120e317 	ldw	r4,-31860(gp)

			to_hex(x, 3, hexbuffers[0]);
  800c04:	04002034 	movhi	r16,128
		matched = 1;

		alt_32 x,y,z;
			x = hw_x_read();
			y = hw_y_read();
			alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800c08:	d9400804 	addi	r5,sp,32
  800c0c:	08052700 	call	805270 <alt_up_accelerometer_spi_read_z_axis>

			to_hex(x, 3, hexbuffers[0]);
  800c10:	84180004 	addi	r16,r16,24576
  800c14:	81800017 	ldw	r6,0(r16)
  800c18:	014000c4 	movi	r5,3
  800c1c:	a009883a 	mov	r4,r20
  800c20:	08007ac0 	call	8007ac <to_hex>
			to_hex(y, 3, hexbuffers[1]);
  800c24:	81800117 	ldw	r6,4(r16)
  800c28:	014000c4 	movi	r5,3
  800c2c:	9809883a 	mov	r4,r19
  800c30:	08007ac0 	call	8007ac <to_hex>
			to_hex(z, 3, hexbuffers[2]);
  800c34:	81800217 	ldw	r6,8(r16)
  800c38:	d9000817 	ldw	r4,32(sp)
  800c3c:	014000c4 	movi	r5,3
  800c40:	08007ac0 	call	8007ac <to_hex>

			if (is_all){
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800c44:	81c00217 	ldw	r7,8(r16)
  800c48:	81800117 	ldw	r6,4(r16)
  800c4c:	81400017 	ldw	r5,0(r16)

			to_hex(x, 3, hexbuffers[0]);
			to_hex(y, 3, hexbuffers[1]);
			to_hex(z, 3, hexbuffers[2]);

			if (is_all){
  800c50:	9000041e 	bne	r18,zero,800c64 <parse_request+0x138>
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800c54:	01002034 	movhi	r4,128
  800c58:	21152a04 	addi	r4,r4,21672
  800c5c:	0804d940 	call	804d94 <alt_printf>
  800c60:	00000b06 	br	800c90 <parse_request+0x164>
			}
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800c64:	01002034 	movhi	r4,128
  800c68:	21153004 	addi	r4,r4,21696
  800c6c:	0804d940 	call	804d94 <alt_printf>
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;
  800c70:	04000044 	movi	r16,1
  800c74:	00000106 	br	800c7c <parse_request+0x150>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;
  800c78:	0021883a 	mov	r16,zero
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  800c7c:	01402034 	movhi	r5,128
  800c80:	29553604 	addi	r5,r5,21720
  800c84:	8809883a 	mov	r4,r17
  800c88:	0803a080 	call	803a08 <strcmp>
  800c8c:	1000261e 	bne	r2,zero,800d28 <parse_request+0x1fc>
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800c90:	d120e317 	ldw	r4,-31860(gp)
  800c94:	d9400a04 	addi	r5,sp,40
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800c98:	04002034 	movhi	r16,128
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800c9c:	08051c00 	call	8051c0 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800ca0:	d120e317 	ldw	r4,-31860(gp)
  800ca4:	d9400904 	addi	r5,sp,36
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800ca8:	84180004 	addi	r16,r16,24576
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800cac:	08052180 	call	805218 <alt_up_accelerometer_spi_read_y_axis>
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800cb0:	d120e317 	ldw	r4,-31860(gp)
  800cb4:	d9400804 	addi	r5,sp,32
  800cb8:	08052700 	call	805270 <alt_up_accelerometer_spi_read_z_axis>

		to_hex(x, 3, hexbuffers[0]);
  800cbc:	81800017 	ldw	r6,0(r16)
  800cc0:	d9000a17 	ldw	r4,40(sp)
  800cc4:	014000c4 	movi	r5,3
  800cc8:	08007ac0 	call	8007ac <to_hex>
		to_hex(y, 3, hexbuffers[1]);
  800ccc:	81800117 	ldw	r6,4(r16)
  800cd0:	d9000917 	ldw	r4,36(sp)
  800cd4:	014000c4 	movi	r5,3
  800cd8:	08007ac0 	call	8007ac <to_hex>
		to_hex(z, 3, hexbuffers[2]);
  800cdc:	81800217 	ldw	r6,8(r16)
  800ce0:	d9000817 	ldw	r4,32(sp)
  800ce4:	014000c4 	movi	r5,3
  800ce8:	08007ac0 	call	8007ac <to_hex>

		if (is_all){
  800cec:	9000071e 	bne	r18,zero,800d0c <parse_request+0x1e0>
			printf("ACCRAW X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800cf0:	81c00217 	ldw	r7,8(r16)
  800cf4:	81800117 	ldw	r6,4(r16)
  800cf8:	81400017 	ldw	r5,0(r16)
  800cfc:	01002034 	movhi	r4,128
  800d00:	21153804 	addi	r4,r4,21728
  800d04:	08038540 	call	803854 <printf>
  800d08:	00000c06 	br	800d3c <parse_request+0x210>
		}
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800d0c:	81c00217 	ldw	r7,8(r16)
  800d10:	81800117 	ldw	r6,4(r16)
  800d14:	81400017 	ldw	r5,0(r16)
  800d18:	01002034 	movhi	r4,128
  800d1c:	21153d04 	addi	r4,r4,21748
  800d20:	08038540 	call	803854 <printf>
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;
  800d24:	04000044 	movi	r16,1
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800d28:	01402034 	movhi	r5,128
  800d2c:	29554304 	addi	r5,r5,21772
  800d30:	8809883a 	mov	r4,r17
  800d34:	0803a080 	call	803a08 <strcmp>
  800d38:	10000e1e 	bne	r2,zero,800d74 <parse_request+0x248>

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800d3c:	00804034 	movhi	r2,256
  800d40:	10847404 	addi	r2,r2,4560
  800d44:	11400037 	ldwio	r5,0(r2)
  800d48:	014a303a 	nor	r5,zero,r5

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
  800d4c:	294000cc 	andi	r5,r5,3

		if (is_all){
  800d50:	9000041e 	bne	r18,zero,800d64 <parse_request+0x238>
			alt_printf("BUTTON %x ", button);
  800d54:	01002034 	movhi	r4,128
  800d58:	21154504 	addi	r4,r4,21780
  800d5c:	0804d940 	call	804d94 <alt_printf>
  800d60:	00000906 	br	800d88 <parse_request+0x25c>
		}
		else{
			alt_printf("K BUTTON %x 0\n", button);
  800d64:	01002034 	movhi	r4,128
  800d68:	21154804 	addi	r4,r4,21792
  800d6c:	0804d940 	call	804d94 <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
  800d70:	04000044 	movi	r16,1
		else{
			alt_printf("K BUTTON %x 0\n", button);
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  800d74:	01402034 	movhi	r5,128
  800d78:	29556204 	addi	r5,r5,21896
  800d7c:	8809883a 	mov	r4,r17
  800d80:	0803a080 	call	803a08 <strcmp>
  800d84:	10001f1e 	bne	r2,zero,800e04 <parse_request+0x2d8>
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800d88:	00804034 	movhi	r2,256
  800d8c:	10847804 	addi	r2,r2,4576
  800d90:	14000037 	ldwio	r16,0(r2)
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800d94:	00802034 	movhi	r2,128
  800d98:	10980004 	addi	r2,r2,24576
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800d9c:	0420303a 	nor	r16,zero,r16
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800da0:	11800017 	ldw	r6,0(r2)
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
  800da4:	8400ffcc 	andi	r16,r16,1023
		to_hex(switches, 3, hexbuffers[0]);
  800da8:	014000c4 	movi	r5,3
  800dac:	8009883a 	mov	r4,r16
  800db0:	08007ac0 	call	8007ac <to_hex>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
  800db4:	800b883a 	mov	r5,r16

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);

		if (is_all){
  800db8:	9000071e 	bne	r18,zero,800dd8 <parse_request+0x2ac>
			alt_printf("SWITCH %x ", switches);
  800dbc:	01002034 	movhi	r4,128
  800dc0:	21154c04 	addi	r4,r4,21808
  800dc4:	0804d940 	call	804d94 <alt_printf>

	}

	//Saves unnecessary comparisons
	if (is_all){
		alt_printf(" 0\n");
  800dc8:	01002034 	movhi	r4,128
  800dcc:	21154f04 	addi	r4,r4,21820
  800dd0:	0804d940 	call	804d94 <alt_printf>
		return;
  800dd4:	00008706 	br	800ff4 <parse_request+0x4c8>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
		}
		else{
			alt_printf("K SWITCH %x 0\n", switches);
  800dd8:	01002034 	movhi	r4,128
  800ddc:	21155004 	addi	r4,r4,21824
  800de0:	0804d940 	call	804d94 <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;
  800de4:	04000044 	movi	r16,1
  800de8:	00000606 	br	800e04 <parse_request+0x2d8>
			debug = (int) strtol(tokens[2], 0, 16);
			throw_code(&"DEBUG", 0);
			matched = 1;
		}

	if (!matched){
  800dec:	8000811e 	bne	r16,zero,800ff4 <parse_request+0x4c8>
		throw_code(&"ERR", 2);
  800df0:	01400084 	movi	r5,2
  800df4:	01002034 	movhi	r4,128
  800df8:	21152604 	addi	r4,r4,21656
  800dfc:	08008800 	call	800880 <throw_code>
  800e00:	00007c06 	br	800ff4 <parse_request+0x4c8>
	}


	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){
  800e04:	01402034 	movhi	r5,128
  800e08:	29555604 	addi	r5,r5,21848
  800e0c:	8809883a 	mov	r4,r17
  800e10:	0803a080 	call	803a08 <strcmp>
  800e14:	10002b1e 	bne	r2,zero,800ec4 <parse_request+0x398>

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800e18:	d120e017 	ldw	r4,-31872(gp)
  800e1c:	01801904 	movi	r6,100
  800e20:	000b883a 	mov	r5,zero
  800e24:	08035bc0 	call	8035bc <memset>
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800e28:	d9400217 	ldw	r5,8(sp)
  800e2c:	d120e017 	ldw	r4,-31872(gp)
  800e30:	01801904 	movi	r6,100
  800e34:	0803a880 	call	803a88 <strncpy>
		disp_length = strlen(disp_buf);
  800e38:	d420e017 	ldw	r16,-31872(gp)
  800e3c:	8009883a 	mov	r4,r16
  800e40:	0803a6c0 	call	803a6c <strlen>
		if(strlen(disp_buf)>6){
  800e44:	8009883a 	mov	r4,r16

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_length = strlen(disp_buf);
  800e48:	1025883a 	mov	r18,r2
  800e4c:	d0a0dc15 	stw	r2,-31888(gp)
		if(strlen(disp_buf)>6){
  800e50:	0803a6c0 	call	803a6c <strlen>
  800e54:	00c00184 	movi	r3,6
  800e58:	1880112e 	bgeu	r3,r2,800ea0 <parse_request+0x374>

			memmove((disp_buf+5),disp_buf,disp_length);
  800e5c:	800b883a 	mov	r5,r16
  800e60:	81000144 	addi	r4,r16,5
  800e64:	900d883a 	mov	r6,r18
  800e68:	080355c0 	call	80355c <memmove>
			disp_buf[0] = '_';
  800e6c:	008017c4 	movi	r2,95
  800e70:	80800005 	stb	r2,0(r16)
			disp_buf[1] = '_';
  800e74:	d0e0e017 	ldw	r3,-31872(gp)
			disp_buf[2] = '_';
			disp_buf[3] = '_';
			disp_buf[4] = '_';
			strcat(disp_buf, &"_____");
  800e78:	01402034 	movhi	r5,128
  800e7c:	29555404 	addi	r5,r5,21840
		disp_length = strlen(disp_buf);
		if(strlen(disp_buf)>6){

			memmove((disp_buf+5),disp_buf,disp_length);
			disp_buf[0] = '_';
			disp_buf[1] = '_';
  800e80:	18800045 	stb	r2,1(r3)
			disp_buf[2] = '_';
  800e84:	d0e0e017 	ldw	r3,-31872(gp)
  800e88:	18800085 	stb	r2,2(r3)
			disp_buf[3] = '_';
  800e8c:	d0e0e017 	ldw	r3,-31872(gp)
  800e90:	188000c5 	stb	r2,3(r3)
			disp_buf[4] = '_';
  800e94:	d120e017 	ldw	r4,-31872(gp)
  800e98:	20800105 	stb	r2,4(r4)
			strcat(disp_buf, &"_____");
  800e9c:	08039cc0 	call	8039cc <strcat>
		}
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800ea0:	d120e017 	ldw	r4,-31872(gp)
			disp_buf[2] = '_';
			disp_buf[3] = '_';
			disp_buf[4] = '_';
			strcat(disp_buf, &"_____");
		}
		disp_offset = 0;
  800ea4:	d020dd15 	stw	zero,-31884(gp)
	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
  800ea8:	04000044 	movi	r16,1
			disp_buf[3] = '_';
			disp_buf[4] = '_';
			strcat(disp_buf, &"_____");
		}
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800eac:	0803a6c0 	call	803a6c <strlen>

		throw_code(&"HEXTEXT", 0);
  800eb0:	01002034 	movhi	r4,128
  800eb4:	000b883a 	mov	r5,zero
  800eb8:	21155604 	addi	r4,r4,21848
			disp_buf[3] = '_';
			disp_buf[4] = '_';
			strcat(disp_buf, &"_____");
		}
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800ebc:	d0a0dc15 	stw	r2,-31888(gp)

		throw_code(&"HEXTEXT", 0);
  800ec0:	08008800 	call	800880 <throw_code>
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){
  800ec4:	01402034 	movhi	r5,128
  800ec8:	29555804 	addi	r5,r5,21856
  800ecc:	8809883a 	mov	r4,r17
  800ed0:	0803a080 	call	803a08 <strcmp>
  800ed4:	10000d1e 	bne	r2,zero,800f0c <parse_request+0x3e0>

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800ed8:	d9000217 	ldw	r4,8(sp)
  800edc:	01800404 	movi	r6,16
  800ee0:	000b883a 	mov	r5,zero
  800ee4:	0803e740 	call	803e74 <strtol>
		IOWR(LED_BASE, 0, led_val);
  800ee8:	00c04034 	movhi	r3,256
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800eec:	d0a0db15 	stw	r2,-31892(gp)
		IOWR(LED_BASE, 0, led_val);
  800ef0:	18c49404 	addi	r3,r3,4688
  800ef4:	18800035 	stwio	r2,0(r3)
		throw_code(&"LEDWRITE", 0);
  800ef8:	01002034 	movhi	r4,128
  800efc:	000b883a 	mov	r5,zero
  800f00:	21155804 	addi	r4,r4,21856
  800f04:	08008800 	call	800880 <throw_code>
		matched = 1;
  800f08:	04000044 	movi	r16,1

	}
	if (strcmp(tokens[1], &"ACCQUAL") == 0){
  800f0c:	01402034 	movhi	r5,128
  800f10:	29555b04 	addi	r5,r5,21868
  800f14:	8809883a 	mov	r4,r17
  800f18:	0803a080 	call	803a08 <strcmp>
  800f1c:	1000131e 	bne	r2,zero,800f6c <parse_request+0x440>

			//alt_printf("Tried to write LEDWRITE");
			quality = (int) strtol(tokens[2], 0, 10);
  800f20:	d9000217 	ldw	r4,8(sp)
  800f24:	01800284 	movi	r6,10
  800f28:	000b883a 	mov	r5,zero
  800f2c:	0803e740 	call	803e74 <strtol>
  800f30:	d0a00015 	stw	r2,-32768(gp)

			if (quality<0) {
  800f34:	1000020e 	bge	r2,zero,800f40 <parse_request+0x414>
				quality = 0;
  800f38:	d0200015 	stw	zero,-32768(gp)
  800f3c:	00000306 	br	800f4c <parse_request+0x420>
				throw_code(&"ACCQUAL", 1);
			}
			else if (quality > RING_SIZE){
  800f40:	00c00ec4 	movi	r3,59
  800f44:	1880030e 	bge	r3,r2,800f54 <parse_request+0x428>
				quality = RING_SIZE;
  800f48:	d0e00015 	stw	r3,-32768(gp)
				throw_code(&"ACCQUAL", 1);
  800f4c:	01400044 	movi	r5,1
  800f50:	00000106 	br	800f58 <parse_request+0x42c>
			}
			else {
				throw_code(&"ACCQUAL", 0);
  800f54:	000b883a 	mov	r5,zero
  800f58:	01002034 	movhi	r4,128
  800f5c:	21155b04 	addi	r4,r4,21868
  800f60:	08008800 	call	800880 <throw_code>
			}

			coeffs_to_fixed();

			matched = 1;
  800f64:	04000044 	movi	r16,1
			}
			else {
				throw_code(&"ACCQUAL", 0);
			}

			coeffs_to_fixed();
  800f68:	0800a1c0 	call	800a1c <coeffs_to_fixed>

			matched = 1;

		}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){
  800f6c:	dc400117 	ldw	r17,4(sp)
  800f70:	01402034 	movhi	r5,128
  800f74:	29555d04 	addi	r5,r5,21876
  800f78:	8809883a 	mov	r4,r17
  800f7c:	0803a080 	call	803a08 <strcmp>
  800f80:	10000e1e 	bne	r2,zero,800fbc <parse_request+0x490>

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
  800f84:	d120e417 	ldw	r4,-31856(gp)
  800f88:	01801904 	movi	r6,100
  800f8c:	000b883a 	mov	r5,zero
  800f90:	08035bc0 	call	8035bc <memset>
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  800f94:	d9400217 	ldw	r5,8(sp)
  800f98:	d120e417 	ldw	r4,-31856(gp)
  800f9c:	01801904 	movi	r6,100
		led_offset = 0;
		throw_code(&"LEDFLASH", 0);
		matched = 1;
  800fa0:	04000044 	movi	r16,1
		}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  800fa4:	0803a880 	call	803a88 <strncpy>
		led_offset = 0;
		throw_code(&"LEDFLASH", 0);
  800fa8:	01002034 	movhi	r4,128
  800fac:	000b883a 	mov	r5,zero
  800fb0:	21155d04 	addi	r4,r4,21876
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
		led_offset = 0;
  800fb4:	d0200115 	stw	zero,-32764(gp)
		throw_code(&"LEDFLASH", 0);
  800fb8:	08008800 	call	800880 <throw_code>
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){
  800fbc:	01402034 	movhi	r5,128
  800fc0:	29556004 	addi	r5,r5,21888
  800fc4:	8809883a 	mov	r4,r17
  800fc8:	0803a080 	call	803a08 <strcmp>
  800fcc:	103f871e 	bne	r2,zero,800dec <__alt_data_end+0xff800dec>

			debug = (int) strtol(tokens[2], 0, 16);
  800fd0:	d9000217 	ldw	r4,8(sp)
  800fd4:	000b883a 	mov	r5,zero
  800fd8:	01800404 	movi	r6,16
  800fdc:	0803e740 	call	803e74 <strtol>
			throw_code(&"DEBUG", 0);
  800fe0:	01002034 	movhi	r4,128
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){

			debug = (int) strtol(tokens[2], 0, 16);
  800fe4:	d0a0da15 	stw	r2,-31896(gp)
			throw_code(&"DEBUG", 0);
  800fe8:	000b883a 	mov	r5,zero
  800fec:	21156004 	addi	r4,r4,21888
  800ff0:	003f8206 	br	800dfc <__alt_data_end+0xff800dfc>
	if (!matched){
		throw_code(&"ERR", 2);
		matched = 1;
	}

}
  800ff4:	dfc01017 	ldw	ra,64(sp)
  800ff8:	dd000f17 	ldw	r20,60(sp)
  800ffc:	dcc00e17 	ldw	r19,56(sp)
  801000:	dc800d17 	ldw	r18,52(sp)
  801004:	dc400c17 	ldw	r17,48(sp)
  801008:	dc000b17 	ldw	r16,44(sp)
  80100c:	dec01104 	addi	sp,sp,68
  801010:	f800283a 	ret

00801014 <hw_x_read>:
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
}
alt_32 hw_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_X_BASE);
}
  801014:	00804034 	movhi	r2,256
  801018:	10846c04 	addi	r2,r2,4528
  80101c:	10800037 	ldwio	r2,0(r2)
  801020:	f800283a 	ret

00801024 <hw_y_read>:

alt_32 hw_y_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_Y_BASE);
}
  801024:	00804034 	movhi	r2,256
  801028:	10846404 	addi	r2,r2,4496
  80102c:	10800037 	ldwio	r2,0(r2)
  801030:	f800283a 	ret

00801034 <main>:

//Main function
int main() {
  801034:	defffd04 	addi	sp,sp,-12
  801038:	dfc00215 	stw	ra,8(sp)
  80103c:	dc400115 	stw	r17,4(sp)
  801040:	dc000015 	stw	r16,0(sp)


	//Initialize fixed point coefficients
	coeffs_to_fixed();
  801044:	0800a1c0 	call	800a1c <coeffs_to_fixed>

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  801048:	01001904 	movi	r4,100
  80104c:	08035340 	call	803534 <malloc>
	strcpy(disp_buf, "______");
  801050:	01402034 	movhi	r5,128
  801054:	29556404 	addi	r5,r5,21904
  801058:	1009883a 	mov	r4,r2

	//Initialize fixed point coefficients
	coeffs_to_fixed();

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  80105c:	d0a0e015 	stw	r2,-31872(gp)
	strcpy(disp_buf, "______");
  801060:	0803a400 	call	803a40 <strcpy>
	clr_disp();
  801064:	08005780 	call	800578 <clr_disp>
	disp_timer_init(disp_timer_isr);
  801068:	01002034 	movhi	r4,128
  80106c:	21015004 	addi	r4,r4,1344
  801070:	08006cc0 	call	8006cc <disp_timer_init>
	disp_length = 6;
  801074:	00800184 	movi	r2,6

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  801078:	01001904 	movi	r4,100
	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
	strcpy(disp_buf, "______");
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;
  80107c:	d0a0dc15 	stw	r2,-31888(gp)

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  801080:	08035340 	call	803534 <malloc>
	led_timer_init(led_timer_isr);
  801084:	01002034 	movhi	r4,128
  801088:	21006f04 	addi	r4,r4,444
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  80108c:	d0a0e415 	stw	r2,-31856(gp)
	led_timer_init(led_timer_isr);
  801090:	080073c0 	call	80073c <led_timer_init>
	led_offset = -1;
  801094:	00bfffc4 	movi	r2,-1
  801098:	d0a00115 	stw	r2,-32764(gp)
	IOWR(LED_BASE, 0, 0);
  80109c:	00804034 	movhi	r2,256
  8010a0:	10849404 	addi	r2,r2,4688
  8010a4:	10000035 	stwio	zero,0(r2)


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  8010a8:	01001004 	movi	r4,64
  8010ac:	08035340 	call	803534 <malloc>

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010b0:	01000204 	movi	r4,8
	led_offset = -1;
	IOWR(LED_BASE, 0, 0);


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  8010b4:	d0a0df15 	stw	r2,-31876(gp)

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010b8:	04002034 	movhi	r16,128
  8010bc:	08035340 	call	803534 <malloc>
  8010c0:	84180004 	addi	r16,r16,24576
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010c4:	01000204 	movi	r4,8

	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010c8:	80800015 	stw	r2,0(r16)
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010cc:	08035340 	call	803534 <malloc>
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010d0:	01000204 	movi	r4,8
	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010d4:	80800115 	stw	r2,4(r16)
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010d8:	08035340 	call	803534 <malloc>


	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  8010dc:	01001904 	movi	r4,100
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  8010e0:	80800215 	stw	r2,8(r16)


	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  8010e4:	08035340 	call	803534 <malloc>
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  8010e8:	01801904 	movi	r6,100
  8010ec:	000b883a 	mov	r5,zero
  8010f0:	1009883a 	mov	r4,r2
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));


	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  8010f4:	d0a0e015 	stw	r2,-31872(gp)
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  8010f8:	08035bc0 	call	8035bc <memset>

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  8010fc:	01002034 	movhi	r4,128
  801100:	21156604 	addi	r4,r4,21912
  801104:	08051680 	call	805168 <alt_up_accelerometer_spi_open_dev>


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  801108:	01002034 	movhi	r4,128
  80110c:	21023d04 	addi	r4,r4,2292
	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  801110:	d0a0e315 	stw	r2,-31860(gp)


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  801114:	080065c0 	call	80065c <acc_timer_init>
	alt_timestamp_start();
  801118:	08050d00 	call	8050d0 <alt_timestamp_start>

	//Command response loop
	while(1){
		read_request(cmdbuffer);
  80111c:	d120df17 	ldw	r4,-31876(gp)
  801120:	08005c80 	call	8005c8 <read_request>
		parse_request(cmdbuffer);
  801124:	d120df17 	ldw	r4,-31876(gp)
  801128:	0800b2c0 	call	800b2c <parse_request>

		//Request response timing: first char received to last char sent
		if (debug){
  80112c:	d0a0da17 	ldw	r2,-31896(gp)
  801130:	103ffa26 	beq	r2,zero,80111c <__alt_data_end+0xff80111c>
			printf("Response time (us) : %i \n",(alt_timestamp()-latency)/(alt_timestamp_freq()/1000000));
  801134:	08051140 	call	805114 <alt_timestamp>
  801138:	d460e117 	ldw	r17,-31868(gp)
  80113c:	d120e217 	ldw	r4,-31864(gp)
  801140:	1463c83a 	sub	r17,r2,r17
  801144:	1907c83a 	sub	r3,r3,r4
  801148:	1445803a 	cmpltu	r2,r2,r17
  80114c:	18a1c83a 	sub	r16,r3,r2
  801150:	08051600 	call	805160 <alt_timestamp_freq>
  801154:	014003f4 	movhi	r5,15
  801158:	29509004 	addi	r5,r5,16960
  80115c:	1009883a 	mov	r4,r2
  801160:	08018840 	call	801884 <__udivsi3>
  801164:	8809883a 	mov	r4,r17
  801168:	800b883a 	mov	r5,r16
  80116c:	100d883a 	mov	r6,r2
  801170:	000f883a 	mov	r7,zero
  801174:	08011900 	call	801190 <__udivdi3>
  801178:	01002034 	movhi	r4,128
  80117c:	100b883a 	mov	r5,r2
  801180:	180d883a 	mov	r6,r3
  801184:	21156c04 	addi	r4,r4,21936
  801188:	08038540 	call	803854 <printf>
  80118c:	003fe306 	br	80111c <__alt_data_end+0xff80111c>

00801190 <__udivdi3>:
  801190:	defff404 	addi	sp,sp,-48
  801194:	dcc00515 	stw	r19,20(sp)
  801198:	dc000215 	stw	r16,8(sp)
  80119c:	dfc00b15 	stw	ra,44(sp)
  8011a0:	df000a15 	stw	fp,40(sp)
  8011a4:	ddc00915 	stw	r23,36(sp)
  8011a8:	dd800815 	stw	r22,32(sp)
  8011ac:	dd400715 	stw	r21,28(sp)
  8011b0:	dd000615 	stw	r20,24(sp)
  8011b4:	dc800415 	stw	r18,16(sp)
  8011b8:	dc400315 	stw	r17,12(sp)
  8011bc:	2027883a 	mov	r19,r4
  8011c0:	2821883a 	mov	r16,r5
  8011c4:	3800461e 	bne	r7,zero,8012e0 <__udivdi3+0x150>
  8011c8:	3023883a 	mov	r17,r6
  8011cc:	2025883a 	mov	r18,r4
  8011d0:	2980572e 	bgeu	r5,r6,801330 <__udivdi3+0x1a0>
  8011d4:	00bfffd4 	movui	r2,65535
  8011d8:	282d883a 	mov	r22,r5
  8011dc:	1180b236 	bltu	r2,r6,8014a8 <__udivdi3+0x318>
  8011e0:	00803fc4 	movi	r2,255
  8011e4:	1185803a 	cmpltu	r2,r2,r6
  8011e8:	100490fa 	slli	r2,r2,3
  8011ec:	3086d83a 	srl	r3,r6,r2
  8011f0:	01002034 	movhi	r4,128
  8011f4:	21157284 	addi	r4,r4,21962
  8011f8:	20c7883a 	add	r3,r4,r3
  8011fc:	18c00003 	ldbu	r3,0(r3)
  801200:	1885883a 	add	r2,r3,r2
  801204:	00c00804 	movi	r3,32
  801208:	1887c83a 	sub	r3,r3,r2
  80120c:	18000526 	beq	r3,zero,801224 <__udivdi3+0x94>
  801210:	80e0983a 	sll	r16,r16,r3
  801214:	9884d83a 	srl	r2,r19,r2
  801218:	30e2983a 	sll	r17,r6,r3
  80121c:	98e4983a 	sll	r18,r19,r3
  801220:	142cb03a 	or	r22,r2,r16
  801224:	882ad43a 	srli	r21,r17,16
  801228:	b009883a 	mov	r4,r22
  80122c:	8d3fffcc 	andi	r20,r17,65535
  801230:	a80b883a 	mov	r5,r21
  801234:	08018e80 	call	8018e8 <__umodsi3>
  801238:	b009883a 	mov	r4,r22
  80123c:	a80b883a 	mov	r5,r21
  801240:	1027883a 	mov	r19,r2
  801244:	08018840 	call	801884 <__udivsi3>
  801248:	100b883a 	mov	r5,r2
  80124c:	a009883a 	mov	r4,r20
  801250:	102d883a 	mov	r22,r2
  801254:	08019400 	call	801940 <__mulsi3>
  801258:	9826943a 	slli	r19,r19,16
  80125c:	9006d43a 	srli	r3,r18,16
  801260:	1cc6b03a 	or	r3,r3,r19
  801264:	1880052e 	bgeu	r3,r2,80127c <__udivdi3+0xec>
  801268:	1c47883a 	add	r3,r3,r17
  80126c:	b13fffc4 	addi	r4,r22,-1
  801270:	1c400136 	bltu	r3,r17,801278 <__udivdi3+0xe8>
  801274:	18814236 	bltu	r3,r2,801780 <__udivdi3+0x5f0>
  801278:	202d883a 	mov	r22,r4
  80127c:	18a1c83a 	sub	r16,r3,r2
  801280:	8009883a 	mov	r4,r16
  801284:	a80b883a 	mov	r5,r21
  801288:	08018e80 	call	8018e8 <__umodsi3>
  80128c:	1027883a 	mov	r19,r2
  801290:	8009883a 	mov	r4,r16
  801294:	a80b883a 	mov	r5,r21
  801298:	9826943a 	slli	r19,r19,16
  80129c:	08018840 	call	801884 <__udivsi3>
  8012a0:	100b883a 	mov	r5,r2
  8012a4:	a009883a 	mov	r4,r20
  8012a8:	94bfffcc 	andi	r18,r18,65535
  8012ac:	1021883a 	mov	r16,r2
  8012b0:	94e4b03a 	or	r18,r18,r19
  8012b4:	08019400 	call	801940 <__mulsi3>
  8012b8:	9080052e 	bgeu	r18,r2,8012d0 <__udivdi3+0x140>
  8012bc:	8ca5883a 	add	r18,r17,r18
  8012c0:	80ffffc4 	addi	r3,r16,-1
  8012c4:	94410c36 	bltu	r18,r17,8016f8 <__udivdi3+0x568>
  8012c8:	90810b2e 	bgeu	r18,r2,8016f8 <__udivdi3+0x568>
  8012cc:	843fff84 	addi	r16,r16,-2
  8012d0:	b004943a 	slli	r2,r22,16
  8012d4:	0007883a 	mov	r3,zero
  8012d8:	1404b03a 	or	r2,r2,r16
  8012dc:	00005e06 	br	801458 <__udivdi3+0x2c8>
  8012e0:	29c05b36 	bltu	r5,r7,801450 <__udivdi3+0x2c0>
  8012e4:	00bfffd4 	movui	r2,65535
  8012e8:	11c0672e 	bgeu	r2,r7,801488 <__udivdi3+0x2f8>
  8012ec:	00804034 	movhi	r2,256
  8012f0:	10bfffc4 	addi	r2,r2,-1
  8012f4:	11c10a36 	bltu	r2,r7,801720 <__udivdi3+0x590>
  8012f8:	00800404 	movi	r2,16
  8012fc:	3886d83a 	srl	r3,r7,r2
  801300:	01002034 	movhi	r4,128
  801304:	21157284 	addi	r4,r4,21962
  801308:	20c7883a 	add	r3,r4,r3
  80130c:	18c00003 	ldbu	r3,0(r3)
  801310:	05c00804 	movi	r23,32
  801314:	1885883a 	add	r2,r3,r2
  801318:	b8afc83a 	sub	r23,r23,r2
  80131c:	b800671e 	bne	r23,zero,8014bc <__udivdi3+0x32c>
  801320:	3c010536 	bltu	r7,r16,801738 <__udivdi3+0x5a8>
  801324:	9985403a 	cmpgeu	r2,r19,r6
  801328:	0007883a 	mov	r3,zero
  80132c:	00004a06 	br	801458 <__udivdi3+0x2c8>
  801330:	3000041e 	bne	r6,zero,801344 <__udivdi3+0x1b4>
  801334:	000b883a 	mov	r5,zero
  801338:	01000044 	movi	r4,1
  80133c:	08018840 	call	801884 <__udivsi3>
  801340:	1023883a 	mov	r17,r2
  801344:	00bfffd4 	movui	r2,65535
  801348:	1440532e 	bgeu	r2,r17,801498 <__udivdi3+0x308>
  80134c:	00804034 	movhi	r2,256
  801350:	10bfffc4 	addi	r2,r2,-1
  801354:	1440f436 	bltu	r2,r17,801728 <__udivdi3+0x598>
  801358:	00800404 	movi	r2,16
  80135c:	8886d83a 	srl	r3,r17,r2
  801360:	01002034 	movhi	r4,128
  801364:	21157284 	addi	r4,r4,21962
  801368:	20c7883a 	add	r3,r4,r3
  80136c:	18c00003 	ldbu	r3,0(r3)
  801370:	1885883a 	add	r2,r3,r2
  801374:	00c00804 	movi	r3,32
  801378:	1887c83a 	sub	r3,r3,r2
  80137c:	1800a51e 	bne	r3,zero,801614 <__udivdi3+0x484>
  801380:	882ad43a 	srli	r21,r17,16
  801384:	8461c83a 	sub	r16,r16,r17
  801388:	8d3fffcc 	andi	r20,r17,65535
  80138c:	00c00044 	movi	r3,1
  801390:	a80b883a 	mov	r5,r21
  801394:	8009883a 	mov	r4,r16
  801398:	d8c00115 	stw	r3,4(sp)
  80139c:	08018e80 	call	8018e8 <__umodsi3>
  8013a0:	a80b883a 	mov	r5,r21
  8013a4:	8009883a 	mov	r4,r16
  8013a8:	1027883a 	mov	r19,r2
  8013ac:	08018840 	call	801884 <__udivsi3>
  8013b0:	a00b883a 	mov	r5,r20
  8013b4:	1009883a 	mov	r4,r2
  8013b8:	102d883a 	mov	r22,r2
  8013bc:	08019400 	call	801940 <__mulsi3>
  8013c0:	9826943a 	slli	r19,r19,16
  8013c4:	900ed43a 	srli	r7,r18,16
  8013c8:	d8c00117 	ldw	r3,4(sp)
  8013cc:	3cceb03a 	or	r7,r7,r19
  8013d0:	3880052e 	bgeu	r7,r2,8013e8 <__udivdi3+0x258>
  8013d4:	3c4f883a 	add	r7,r7,r17
  8013d8:	b13fffc4 	addi	r4,r22,-1
  8013dc:	3c400136 	bltu	r7,r17,8013e4 <__udivdi3+0x254>
  8013e0:	3880e436 	bltu	r7,r2,801774 <__udivdi3+0x5e4>
  8013e4:	202d883a 	mov	r22,r4
  8013e8:	38a1c83a 	sub	r16,r7,r2
  8013ec:	8009883a 	mov	r4,r16
  8013f0:	a80b883a 	mov	r5,r21
  8013f4:	d8c00115 	stw	r3,4(sp)
  8013f8:	08018e80 	call	8018e8 <__umodsi3>
  8013fc:	1027883a 	mov	r19,r2
  801400:	8009883a 	mov	r4,r16
  801404:	a80b883a 	mov	r5,r21
  801408:	9826943a 	slli	r19,r19,16
  80140c:	08018840 	call	801884 <__udivsi3>
  801410:	a00b883a 	mov	r5,r20
  801414:	1009883a 	mov	r4,r2
  801418:	94bfffcc 	andi	r18,r18,65535
  80141c:	1021883a 	mov	r16,r2
  801420:	94e4b03a 	or	r18,r18,r19
  801424:	08019400 	call	801940 <__mulsi3>
  801428:	d8c00117 	ldw	r3,4(sp)
  80142c:	9080052e 	bgeu	r18,r2,801444 <__udivdi3+0x2b4>
  801430:	8ca5883a 	add	r18,r17,r18
  801434:	813fffc4 	addi	r4,r16,-1
  801438:	9440ad36 	bltu	r18,r17,8016f0 <__udivdi3+0x560>
  80143c:	9080ac2e 	bgeu	r18,r2,8016f0 <__udivdi3+0x560>
  801440:	843fff84 	addi	r16,r16,-2
  801444:	b004943a 	slli	r2,r22,16
  801448:	1404b03a 	or	r2,r2,r16
  80144c:	00000206 	br	801458 <__udivdi3+0x2c8>
  801450:	0007883a 	mov	r3,zero
  801454:	0005883a 	mov	r2,zero
  801458:	dfc00b17 	ldw	ra,44(sp)
  80145c:	df000a17 	ldw	fp,40(sp)
  801460:	ddc00917 	ldw	r23,36(sp)
  801464:	dd800817 	ldw	r22,32(sp)
  801468:	dd400717 	ldw	r21,28(sp)
  80146c:	dd000617 	ldw	r20,24(sp)
  801470:	dcc00517 	ldw	r19,20(sp)
  801474:	dc800417 	ldw	r18,16(sp)
  801478:	dc400317 	ldw	r17,12(sp)
  80147c:	dc000217 	ldw	r16,8(sp)
  801480:	dec00c04 	addi	sp,sp,48
  801484:	f800283a 	ret
  801488:	00803fc4 	movi	r2,255
  80148c:	11c5803a 	cmpltu	r2,r2,r7
  801490:	100490fa 	slli	r2,r2,3
  801494:	003f9906 	br	8012fc <__alt_data_end+0xff8012fc>
  801498:	00803fc4 	movi	r2,255
  80149c:	1445803a 	cmpltu	r2,r2,r17
  8014a0:	100490fa 	slli	r2,r2,3
  8014a4:	003fad06 	br	80135c <__alt_data_end+0xff80135c>
  8014a8:	00804034 	movhi	r2,256
  8014ac:	10bfffc4 	addi	r2,r2,-1
  8014b0:	11809f36 	bltu	r2,r6,801730 <__udivdi3+0x5a0>
  8014b4:	00800404 	movi	r2,16
  8014b8:	003f4c06 	br	8011ec <__alt_data_end+0xff8011ec>
  8014bc:	3dce983a 	sll	r7,r7,r23
  8014c0:	30b8d83a 	srl	fp,r6,r2
  8014c4:	80a2d83a 	srl	r17,r16,r2
  8014c8:	35cc983a 	sll	r6,r6,r23
  8014cc:	3f38b03a 	or	fp,r7,fp
  8014d0:	e024d43a 	srli	r18,fp,16
  8014d4:	9884d83a 	srl	r2,r19,r2
  8014d8:	85e0983a 	sll	r16,r16,r23
  8014dc:	8809883a 	mov	r4,r17
  8014e0:	900b883a 	mov	r5,r18
  8014e4:	d9800015 	stw	r6,0(sp)
  8014e8:	1420b03a 	or	r16,r2,r16
  8014ec:	08018e80 	call	8018e8 <__umodsi3>
  8014f0:	900b883a 	mov	r5,r18
  8014f4:	8809883a 	mov	r4,r17
  8014f8:	1029883a 	mov	r20,r2
  8014fc:	e5bfffcc 	andi	r22,fp,65535
  801500:	08018840 	call	801884 <__udivsi3>
  801504:	100b883a 	mov	r5,r2
  801508:	b009883a 	mov	r4,r22
  80150c:	102b883a 	mov	r21,r2
  801510:	08019400 	call	801940 <__mulsi3>
  801514:	a028943a 	slli	r20,r20,16
  801518:	8006d43a 	srli	r3,r16,16
  80151c:	1d06b03a 	or	r3,r3,r20
  801520:	1880042e 	bgeu	r3,r2,801534 <__udivdi3+0x3a4>
  801524:	1f07883a 	add	r3,r3,fp
  801528:	a93fffc4 	addi	r4,r21,-1
  80152c:	1f00892e 	bgeu	r3,fp,801754 <__udivdi3+0x5c4>
  801530:	202b883a 	mov	r21,r4
  801534:	18a3c83a 	sub	r17,r3,r2
  801538:	8809883a 	mov	r4,r17
  80153c:	900b883a 	mov	r5,r18
  801540:	08018e80 	call	8018e8 <__umodsi3>
  801544:	1029883a 	mov	r20,r2
  801548:	8809883a 	mov	r4,r17
  80154c:	900b883a 	mov	r5,r18
  801550:	a028943a 	slli	r20,r20,16
  801554:	08018840 	call	801884 <__udivsi3>
  801558:	100b883a 	mov	r5,r2
  80155c:	b009883a 	mov	r4,r22
  801560:	843fffcc 	andi	r16,r16,65535
  801564:	1023883a 	mov	r17,r2
  801568:	8520b03a 	or	r16,r16,r20
  80156c:	08019400 	call	801940 <__mulsi3>
  801570:	8080042e 	bgeu	r16,r2,801584 <__udivdi3+0x3f4>
  801574:	8721883a 	add	r16,r16,fp
  801578:	88ffffc4 	addi	r3,r17,-1
  80157c:	8700712e 	bgeu	r16,fp,801744 <__udivdi3+0x5b4>
  801580:	1823883a 	mov	r17,r3
  801584:	a80e943a 	slli	r7,r21,16
  801588:	d8c00017 	ldw	r3,0(sp)
  80158c:	80a1c83a 	sub	r16,r16,r2
  801590:	3c64b03a 	or	r18,r7,r17
  801594:	1d3fffcc 	andi	r20,r3,65535
  801598:	9022d43a 	srli	r17,r18,16
  80159c:	95bfffcc 	andi	r22,r18,65535
  8015a0:	a00b883a 	mov	r5,r20
  8015a4:	b009883a 	mov	r4,r22
  8015a8:	182ad43a 	srli	r21,r3,16
  8015ac:	08019400 	call	801940 <__mulsi3>
  8015b0:	a00b883a 	mov	r5,r20
  8015b4:	8809883a 	mov	r4,r17
  8015b8:	1039883a 	mov	fp,r2
  8015bc:	08019400 	call	801940 <__mulsi3>
  8015c0:	8809883a 	mov	r4,r17
  8015c4:	a80b883a 	mov	r5,r21
  8015c8:	1029883a 	mov	r20,r2
  8015cc:	08019400 	call	801940 <__mulsi3>
  8015d0:	a80b883a 	mov	r5,r21
  8015d4:	b009883a 	mov	r4,r22
  8015d8:	1023883a 	mov	r17,r2
  8015dc:	08019400 	call	801940 <__mulsi3>
  8015e0:	e006d43a 	srli	r3,fp,16
  8015e4:	1505883a 	add	r2,r2,r20
  8015e8:	1887883a 	add	r3,r3,r2
  8015ec:	1d00022e 	bgeu	r3,r20,8015f8 <__udivdi3+0x468>
  8015f0:	00800074 	movhi	r2,1
  8015f4:	88a3883a 	add	r17,r17,r2
  8015f8:	1804d43a 	srli	r2,r3,16
  8015fc:	1463883a 	add	r17,r2,r17
  801600:	84404436 	bltu	r16,r17,801714 <__udivdi3+0x584>
  801604:	84403e26 	beq	r16,r17,801700 <__udivdi3+0x570>
  801608:	9005883a 	mov	r2,r18
  80160c:	0007883a 	mov	r3,zero
  801610:	003f9106 	br	801458 <__alt_data_end+0xff801458>
  801614:	88e2983a 	sll	r17,r17,r3
  801618:	80aed83a 	srl	r23,r16,r2
  80161c:	80e0983a 	sll	r16,r16,r3
  801620:	882ad43a 	srli	r21,r17,16
  801624:	9884d83a 	srl	r2,r19,r2
  801628:	b809883a 	mov	r4,r23
  80162c:	a80b883a 	mov	r5,r21
  801630:	98e4983a 	sll	r18,r19,r3
  801634:	142cb03a 	or	r22,r2,r16
  801638:	08018e80 	call	8018e8 <__umodsi3>
  80163c:	b809883a 	mov	r4,r23
  801640:	a80b883a 	mov	r5,r21
  801644:	1027883a 	mov	r19,r2
  801648:	8d3fffcc 	andi	r20,r17,65535
  80164c:	08018840 	call	801884 <__udivsi3>
  801650:	a009883a 	mov	r4,r20
  801654:	100b883a 	mov	r5,r2
  801658:	102f883a 	mov	r23,r2
  80165c:	08019400 	call	801940 <__mulsi3>
  801660:	9826943a 	slli	r19,r19,16
  801664:	b008d43a 	srli	r4,r22,16
  801668:	24c8b03a 	or	r4,r4,r19
  80166c:	2080062e 	bgeu	r4,r2,801688 <__udivdi3+0x4f8>
  801670:	2449883a 	add	r4,r4,r17
  801674:	b8ffffc4 	addi	r3,r23,-1
  801678:	24403c36 	bltu	r4,r17,80176c <__udivdi3+0x5dc>
  80167c:	20803b2e 	bgeu	r4,r2,80176c <__udivdi3+0x5dc>
  801680:	bdffff84 	addi	r23,r23,-2
  801684:	2449883a 	add	r4,r4,r17
  801688:	20a1c83a 	sub	r16,r4,r2
  80168c:	a80b883a 	mov	r5,r21
  801690:	8009883a 	mov	r4,r16
  801694:	08018e80 	call	8018e8 <__umodsi3>
  801698:	a80b883a 	mov	r5,r21
  80169c:	8009883a 	mov	r4,r16
  8016a0:	1027883a 	mov	r19,r2
  8016a4:	08018840 	call	801884 <__udivsi3>
  8016a8:	a009883a 	mov	r4,r20
  8016ac:	100b883a 	mov	r5,r2
  8016b0:	9826943a 	slli	r19,r19,16
  8016b4:	1039883a 	mov	fp,r2
  8016b8:	08019400 	call	801940 <__mulsi3>
  8016bc:	b13fffcc 	andi	r4,r22,65535
  8016c0:	24c8b03a 	or	r4,r4,r19
  8016c4:	2080062e 	bgeu	r4,r2,8016e0 <__udivdi3+0x550>
  8016c8:	2449883a 	add	r4,r4,r17
  8016cc:	e0ffffc4 	addi	r3,fp,-1
  8016d0:	24402436 	bltu	r4,r17,801764 <__udivdi3+0x5d4>
  8016d4:	2080232e 	bgeu	r4,r2,801764 <__udivdi3+0x5d4>
  8016d8:	e73fff84 	addi	fp,fp,-2
  8016dc:	2449883a 	add	r4,r4,r17
  8016e0:	b82e943a 	slli	r23,r23,16
  8016e4:	20a1c83a 	sub	r16,r4,r2
  8016e8:	bf06b03a 	or	r3,r23,fp
  8016ec:	003f2806 	br	801390 <__alt_data_end+0xff801390>
  8016f0:	2021883a 	mov	r16,r4
  8016f4:	003f5306 	br	801444 <__alt_data_end+0xff801444>
  8016f8:	1821883a 	mov	r16,r3
  8016fc:	003ef406 	br	8012d0 <__alt_data_end+0xff8012d0>
  801700:	1806943a 	slli	r3,r3,16
  801704:	9de6983a 	sll	r19,r19,r23
  801708:	e73fffcc 	andi	fp,fp,65535
  80170c:	1f07883a 	add	r3,r3,fp
  801710:	98ffbd2e 	bgeu	r19,r3,801608 <__alt_data_end+0xff801608>
  801714:	90bfffc4 	addi	r2,r18,-1
  801718:	0007883a 	mov	r3,zero
  80171c:	003f4e06 	br	801458 <__alt_data_end+0xff801458>
  801720:	00800604 	movi	r2,24
  801724:	003ef506 	br	8012fc <__alt_data_end+0xff8012fc>
  801728:	00800604 	movi	r2,24
  80172c:	003f0b06 	br	80135c <__alt_data_end+0xff80135c>
  801730:	00800604 	movi	r2,24
  801734:	003ead06 	br	8011ec <__alt_data_end+0xff8011ec>
  801738:	0007883a 	mov	r3,zero
  80173c:	00800044 	movi	r2,1
  801740:	003f4506 	br	801458 <__alt_data_end+0xff801458>
  801744:	80bf8e2e 	bgeu	r16,r2,801580 <__alt_data_end+0xff801580>
  801748:	8c7fff84 	addi	r17,r17,-2
  80174c:	8721883a 	add	r16,r16,fp
  801750:	003f8c06 	br	801584 <__alt_data_end+0xff801584>
  801754:	18bf762e 	bgeu	r3,r2,801530 <__alt_data_end+0xff801530>
  801758:	ad7fff84 	addi	r21,r21,-2
  80175c:	1f07883a 	add	r3,r3,fp
  801760:	003f7406 	br	801534 <__alt_data_end+0xff801534>
  801764:	1839883a 	mov	fp,r3
  801768:	003fdd06 	br	8016e0 <__alt_data_end+0xff8016e0>
  80176c:	182f883a 	mov	r23,r3
  801770:	003fc506 	br	801688 <__alt_data_end+0xff801688>
  801774:	b5bfff84 	addi	r22,r22,-2
  801778:	3c4f883a 	add	r7,r7,r17
  80177c:	003f1a06 	br	8013e8 <__alt_data_end+0xff8013e8>
  801780:	b5bfff84 	addi	r22,r22,-2
  801784:	1c47883a 	add	r3,r3,r17
  801788:	003ebc06 	br	80127c <__alt_data_end+0xff80127c>

0080178c <__divsi3>:
  80178c:	20001b16 	blt	r4,zero,8017fc <__divsi3+0x70>
  801790:	000f883a 	mov	r7,zero
  801794:	28001616 	blt	r5,zero,8017f0 <__divsi3+0x64>
  801798:	200d883a 	mov	r6,r4
  80179c:	29001a2e 	bgeu	r5,r4,801808 <__divsi3+0x7c>
  8017a0:	00800804 	movi	r2,32
  8017a4:	00c00044 	movi	r3,1
  8017a8:	00000106 	br	8017b0 <__divsi3+0x24>
  8017ac:	10000d26 	beq	r2,zero,8017e4 <__divsi3+0x58>
  8017b0:	294b883a 	add	r5,r5,r5
  8017b4:	10bfffc4 	addi	r2,r2,-1
  8017b8:	18c7883a 	add	r3,r3,r3
  8017bc:	293ffb36 	bltu	r5,r4,8017ac <__alt_data_end+0xff8017ac>
  8017c0:	0005883a 	mov	r2,zero
  8017c4:	18000726 	beq	r3,zero,8017e4 <__divsi3+0x58>
  8017c8:	0005883a 	mov	r2,zero
  8017cc:	31400236 	bltu	r6,r5,8017d8 <__divsi3+0x4c>
  8017d0:	314dc83a 	sub	r6,r6,r5
  8017d4:	10c4b03a 	or	r2,r2,r3
  8017d8:	1806d07a 	srli	r3,r3,1
  8017dc:	280ad07a 	srli	r5,r5,1
  8017e0:	183ffa1e 	bne	r3,zero,8017cc <__alt_data_end+0xff8017cc>
  8017e4:	38000126 	beq	r7,zero,8017ec <__divsi3+0x60>
  8017e8:	0085c83a 	sub	r2,zero,r2
  8017ec:	f800283a 	ret
  8017f0:	014bc83a 	sub	r5,zero,r5
  8017f4:	39c0005c 	xori	r7,r7,1
  8017f8:	003fe706 	br	801798 <__alt_data_end+0xff801798>
  8017fc:	0109c83a 	sub	r4,zero,r4
  801800:	01c00044 	movi	r7,1
  801804:	003fe306 	br	801794 <__alt_data_end+0xff801794>
  801808:	00c00044 	movi	r3,1
  80180c:	003fee06 	br	8017c8 <__alt_data_end+0xff8017c8>

00801810 <__modsi3>:
  801810:	20001716 	blt	r4,zero,801870 <__modsi3+0x60>
  801814:	000f883a 	mov	r7,zero
  801818:	2005883a 	mov	r2,r4
  80181c:	28001216 	blt	r5,zero,801868 <__modsi3+0x58>
  801820:	2900162e 	bgeu	r5,r4,80187c <__modsi3+0x6c>
  801824:	01800804 	movi	r6,32
  801828:	00c00044 	movi	r3,1
  80182c:	00000106 	br	801834 <__modsi3+0x24>
  801830:	30000a26 	beq	r6,zero,80185c <__modsi3+0x4c>
  801834:	294b883a 	add	r5,r5,r5
  801838:	31bfffc4 	addi	r6,r6,-1
  80183c:	18c7883a 	add	r3,r3,r3
  801840:	293ffb36 	bltu	r5,r4,801830 <__alt_data_end+0xff801830>
  801844:	18000526 	beq	r3,zero,80185c <__modsi3+0x4c>
  801848:	1806d07a 	srli	r3,r3,1
  80184c:	11400136 	bltu	r2,r5,801854 <__modsi3+0x44>
  801850:	1145c83a 	sub	r2,r2,r5
  801854:	280ad07a 	srli	r5,r5,1
  801858:	183ffb1e 	bne	r3,zero,801848 <__alt_data_end+0xff801848>
  80185c:	38000126 	beq	r7,zero,801864 <__modsi3+0x54>
  801860:	0085c83a 	sub	r2,zero,r2
  801864:	f800283a 	ret
  801868:	014bc83a 	sub	r5,zero,r5
  80186c:	003fec06 	br	801820 <__alt_data_end+0xff801820>
  801870:	0109c83a 	sub	r4,zero,r4
  801874:	01c00044 	movi	r7,1
  801878:	003fe706 	br	801818 <__alt_data_end+0xff801818>
  80187c:	00c00044 	movi	r3,1
  801880:	003ff106 	br	801848 <__alt_data_end+0xff801848>

00801884 <__udivsi3>:
  801884:	200d883a 	mov	r6,r4
  801888:	2900152e 	bgeu	r5,r4,8018e0 <__udivsi3+0x5c>
  80188c:	28001416 	blt	r5,zero,8018e0 <__udivsi3+0x5c>
  801890:	00800804 	movi	r2,32
  801894:	00c00044 	movi	r3,1
  801898:	00000206 	br	8018a4 <__udivsi3+0x20>
  80189c:	10000e26 	beq	r2,zero,8018d8 <__udivsi3+0x54>
  8018a0:	28000516 	blt	r5,zero,8018b8 <__udivsi3+0x34>
  8018a4:	294b883a 	add	r5,r5,r5
  8018a8:	10bfffc4 	addi	r2,r2,-1
  8018ac:	18c7883a 	add	r3,r3,r3
  8018b0:	293ffa36 	bltu	r5,r4,80189c <__alt_data_end+0xff80189c>
  8018b4:	18000826 	beq	r3,zero,8018d8 <__udivsi3+0x54>
  8018b8:	0005883a 	mov	r2,zero
  8018bc:	31400236 	bltu	r6,r5,8018c8 <__udivsi3+0x44>
  8018c0:	314dc83a 	sub	r6,r6,r5
  8018c4:	10c4b03a 	or	r2,r2,r3
  8018c8:	1806d07a 	srli	r3,r3,1
  8018cc:	280ad07a 	srli	r5,r5,1
  8018d0:	183ffa1e 	bne	r3,zero,8018bc <__alt_data_end+0xff8018bc>
  8018d4:	f800283a 	ret
  8018d8:	0005883a 	mov	r2,zero
  8018dc:	f800283a 	ret
  8018e0:	00c00044 	movi	r3,1
  8018e4:	003ff406 	br	8018b8 <__alt_data_end+0xff8018b8>

008018e8 <__umodsi3>:
  8018e8:	2005883a 	mov	r2,r4
  8018ec:	2900122e 	bgeu	r5,r4,801938 <__umodsi3+0x50>
  8018f0:	28001116 	blt	r5,zero,801938 <__umodsi3+0x50>
  8018f4:	01800804 	movi	r6,32
  8018f8:	00c00044 	movi	r3,1
  8018fc:	00000206 	br	801908 <__umodsi3+0x20>
  801900:	30000c26 	beq	r6,zero,801934 <__umodsi3+0x4c>
  801904:	28000516 	blt	r5,zero,80191c <__umodsi3+0x34>
  801908:	294b883a 	add	r5,r5,r5
  80190c:	31bfffc4 	addi	r6,r6,-1
  801910:	18c7883a 	add	r3,r3,r3
  801914:	293ffa36 	bltu	r5,r4,801900 <__alt_data_end+0xff801900>
  801918:	18000626 	beq	r3,zero,801934 <__umodsi3+0x4c>
  80191c:	1806d07a 	srli	r3,r3,1
  801920:	11400136 	bltu	r2,r5,801928 <__umodsi3+0x40>
  801924:	1145c83a 	sub	r2,r2,r5
  801928:	280ad07a 	srli	r5,r5,1
  80192c:	183ffb1e 	bne	r3,zero,80191c <__alt_data_end+0xff80191c>
  801930:	f800283a 	ret
  801934:	f800283a 	ret
  801938:	00c00044 	movi	r3,1
  80193c:	003ff706 	br	80191c <__alt_data_end+0xff80191c>

00801940 <__mulsi3>:
  801940:	0005883a 	mov	r2,zero
  801944:	20000726 	beq	r4,zero,801964 <__mulsi3+0x24>
  801948:	20c0004c 	andi	r3,r4,1
  80194c:	2008d07a 	srli	r4,r4,1
  801950:	18000126 	beq	r3,zero,801958 <__mulsi3+0x18>
  801954:	1145883a 	add	r2,r2,r5
  801958:	294b883a 	add	r5,r5,r5
  80195c:	203ffa1e 	bne	r4,zero,801948 <__alt_data_end+0xff801948>
  801960:	f800283a 	ret
  801964:	f800283a 	ret

00801968 <__adddf3>:
  801968:	02c00434 	movhi	r11,16
  80196c:	5affffc4 	addi	r11,r11,-1
  801970:	2806d7fa 	srli	r3,r5,31
  801974:	2ad4703a 	and	r10,r5,r11
  801978:	3ad2703a 	and	r9,r7,r11
  80197c:	3804d53a 	srli	r2,r7,20
  801980:	3018d77a 	srli	r12,r6,29
  801984:	280ad53a 	srli	r5,r5,20
  801988:	501490fa 	slli	r10,r10,3
  80198c:	2010d77a 	srli	r8,r4,29
  801990:	481290fa 	slli	r9,r9,3
  801994:	380ed7fa 	srli	r7,r7,31
  801998:	defffb04 	addi	sp,sp,-20
  80199c:	dc800215 	stw	r18,8(sp)
  8019a0:	dc400115 	stw	r17,4(sp)
  8019a4:	dc000015 	stw	r16,0(sp)
  8019a8:	dfc00415 	stw	ra,16(sp)
  8019ac:	dcc00315 	stw	r19,12(sp)
  8019b0:	1c803fcc 	andi	r18,r3,255
  8019b4:	2c01ffcc 	andi	r16,r5,2047
  8019b8:	5210b03a 	or	r8,r10,r8
  8019bc:	202290fa 	slli	r17,r4,3
  8019c0:	1081ffcc 	andi	r2,r2,2047
  8019c4:	4b12b03a 	or	r9,r9,r12
  8019c8:	300c90fa 	slli	r6,r6,3
  8019cc:	91c07526 	beq	r18,r7,801ba4 <__adddf3+0x23c>
  8019d0:	8087c83a 	sub	r3,r16,r2
  8019d4:	00c0ab0e 	bge	zero,r3,801c84 <__adddf3+0x31c>
  8019d8:	10002a1e 	bne	r2,zero,801a84 <__adddf3+0x11c>
  8019dc:	4984b03a 	or	r2,r9,r6
  8019e0:	1000961e 	bne	r2,zero,801c3c <__adddf3+0x2d4>
  8019e4:	888001cc 	andi	r2,r17,7
  8019e8:	10000726 	beq	r2,zero,801a08 <__adddf3+0xa0>
  8019ec:	888003cc 	andi	r2,r17,15
  8019f0:	00c00104 	movi	r3,4
  8019f4:	10c00426 	beq	r2,r3,801a08 <__adddf3+0xa0>
  8019f8:	88c7883a 	add	r3,r17,r3
  8019fc:	1c63803a 	cmpltu	r17,r3,r17
  801a00:	4451883a 	add	r8,r8,r17
  801a04:	1823883a 	mov	r17,r3
  801a08:	4080202c 	andhi	r2,r8,128
  801a0c:	10005926 	beq	r2,zero,801b74 <__adddf3+0x20c>
  801a10:	84000044 	addi	r16,r16,1
  801a14:	0081ffc4 	movi	r2,2047
  801a18:	8080ba26 	beq	r16,r2,801d04 <__adddf3+0x39c>
  801a1c:	00bfe034 	movhi	r2,65408
  801a20:	10bfffc4 	addi	r2,r2,-1
  801a24:	4090703a 	and	r8,r8,r2
  801a28:	4004977a 	slli	r2,r8,29
  801a2c:	4010927a 	slli	r8,r8,9
  801a30:	8822d0fa 	srli	r17,r17,3
  801a34:	8401ffcc 	andi	r16,r16,2047
  801a38:	4010d33a 	srli	r8,r8,12
  801a3c:	9007883a 	mov	r3,r18
  801a40:	1444b03a 	or	r2,r2,r17
  801a44:	8401ffcc 	andi	r16,r16,2047
  801a48:	8020953a 	slli	r16,r16,20
  801a4c:	18c03fcc 	andi	r3,r3,255
  801a50:	01000434 	movhi	r4,16
  801a54:	213fffc4 	addi	r4,r4,-1
  801a58:	180697fa 	slli	r3,r3,31
  801a5c:	4110703a 	and	r8,r8,r4
  801a60:	4410b03a 	or	r8,r8,r16
  801a64:	40c6b03a 	or	r3,r8,r3
  801a68:	dfc00417 	ldw	ra,16(sp)
  801a6c:	dcc00317 	ldw	r19,12(sp)
  801a70:	dc800217 	ldw	r18,8(sp)
  801a74:	dc400117 	ldw	r17,4(sp)
  801a78:	dc000017 	ldw	r16,0(sp)
  801a7c:	dec00504 	addi	sp,sp,20
  801a80:	f800283a 	ret
  801a84:	0081ffc4 	movi	r2,2047
  801a88:	80bfd626 	beq	r16,r2,8019e4 <__alt_data_end+0xff8019e4>
  801a8c:	4a402034 	orhi	r9,r9,128
  801a90:	00800e04 	movi	r2,56
  801a94:	10c09f16 	blt	r2,r3,801d14 <__adddf3+0x3ac>
  801a98:	008007c4 	movi	r2,31
  801a9c:	10c0c216 	blt	r2,r3,801da8 <__adddf3+0x440>
  801aa0:	00800804 	movi	r2,32
  801aa4:	10c5c83a 	sub	r2,r2,r3
  801aa8:	488a983a 	sll	r5,r9,r2
  801aac:	30c8d83a 	srl	r4,r6,r3
  801ab0:	3084983a 	sll	r2,r6,r2
  801ab4:	48c6d83a 	srl	r3,r9,r3
  801ab8:	290cb03a 	or	r6,r5,r4
  801abc:	1004c03a 	cmpne	r2,r2,zero
  801ac0:	308cb03a 	or	r6,r6,r2
  801ac4:	898dc83a 	sub	r6,r17,r6
  801ac8:	89a3803a 	cmpltu	r17,r17,r6
  801acc:	40d1c83a 	sub	r8,r8,r3
  801ad0:	4451c83a 	sub	r8,r8,r17
  801ad4:	3023883a 	mov	r17,r6
  801ad8:	4080202c 	andhi	r2,r8,128
  801adc:	10002326 	beq	r2,zero,801b6c <__adddf3+0x204>
  801ae0:	04c02034 	movhi	r19,128
  801ae4:	9cffffc4 	addi	r19,r19,-1
  801ae8:	44e6703a 	and	r19,r8,r19
  801aec:	98007626 	beq	r19,zero,801cc8 <__adddf3+0x360>
  801af0:	9809883a 	mov	r4,r19
  801af4:	08034d00 	call	8034d0 <__clzsi2>
  801af8:	10fffe04 	addi	r3,r2,-8
  801afc:	010007c4 	movi	r4,31
  801b00:	20c07716 	blt	r4,r3,801ce0 <__adddf3+0x378>
  801b04:	00800804 	movi	r2,32
  801b08:	10c5c83a 	sub	r2,r2,r3
  801b0c:	8884d83a 	srl	r2,r17,r2
  801b10:	98d0983a 	sll	r8,r19,r3
  801b14:	88e2983a 	sll	r17,r17,r3
  801b18:	1204b03a 	or	r2,r2,r8
  801b1c:	1c007416 	blt	r3,r16,801cf0 <__adddf3+0x388>
  801b20:	1c21c83a 	sub	r16,r3,r16
  801b24:	82000044 	addi	r8,r16,1
  801b28:	00c007c4 	movi	r3,31
  801b2c:	1a009116 	blt	r3,r8,801d74 <__adddf3+0x40c>
  801b30:	00c00804 	movi	r3,32
  801b34:	1a07c83a 	sub	r3,r3,r8
  801b38:	8a08d83a 	srl	r4,r17,r8
  801b3c:	88e2983a 	sll	r17,r17,r3
  801b40:	10c6983a 	sll	r3,r2,r3
  801b44:	1210d83a 	srl	r8,r2,r8
  801b48:	8804c03a 	cmpne	r2,r17,zero
  801b4c:	1906b03a 	or	r3,r3,r4
  801b50:	18a2b03a 	or	r17,r3,r2
  801b54:	0021883a 	mov	r16,zero
  801b58:	003fa206 	br	8019e4 <__alt_data_end+0xff8019e4>
  801b5c:	1890b03a 	or	r8,r3,r2
  801b60:	40017d26 	beq	r8,zero,802158 <__adddf3+0x7f0>
  801b64:	1011883a 	mov	r8,r2
  801b68:	1823883a 	mov	r17,r3
  801b6c:	888001cc 	andi	r2,r17,7
  801b70:	103f9e1e 	bne	r2,zero,8019ec <__alt_data_end+0xff8019ec>
  801b74:	4004977a 	slli	r2,r8,29
  801b78:	8822d0fa 	srli	r17,r17,3
  801b7c:	4010d0fa 	srli	r8,r8,3
  801b80:	9007883a 	mov	r3,r18
  801b84:	1444b03a 	or	r2,r2,r17
  801b88:	0101ffc4 	movi	r4,2047
  801b8c:	81002426 	beq	r16,r4,801c20 <__adddf3+0x2b8>
  801b90:	8120703a 	and	r16,r16,r4
  801b94:	01000434 	movhi	r4,16
  801b98:	213fffc4 	addi	r4,r4,-1
  801b9c:	4110703a 	and	r8,r8,r4
  801ba0:	003fa806 	br	801a44 <__alt_data_end+0xff801a44>
  801ba4:	8089c83a 	sub	r4,r16,r2
  801ba8:	01005e0e 	bge	zero,r4,801d24 <__adddf3+0x3bc>
  801bac:	10002b26 	beq	r2,zero,801c5c <__adddf3+0x2f4>
  801bb0:	0081ffc4 	movi	r2,2047
  801bb4:	80bf8b26 	beq	r16,r2,8019e4 <__alt_data_end+0xff8019e4>
  801bb8:	4a402034 	orhi	r9,r9,128
  801bbc:	00800e04 	movi	r2,56
  801bc0:	1100a40e 	bge	r2,r4,801e54 <__adddf3+0x4ec>
  801bc4:	498cb03a 	or	r6,r9,r6
  801bc8:	300ac03a 	cmpne	r5,r6,zero
  801bcc:	0013883a 	mov	r9,zero
  801bd0:	2c4b883a 	add	r5,r5,r17
  801bd4:	2c63803a 	cmpltu	r17,r5,r17
  801bd8:	4a11883a 	add	r8,r9,r8
  801bdc:	8a11883a 	add	r8,r17,r8
  801be0:	2823883a 	mov	r17,r5
  801be4:	4080202c 	andhi	r2,r8,128
  801be8:	103fe026 	beq	r2,zero,801b6c <__alt_data_end+0xff801b6c>
  801bec:	84000044 	addi	r16,r16,1
  801bf0:	0081ffc4 	movi	r2,2047
  801bf4:	8080d226 	beq	r16,r2,801f40 <__adddf3+0x5d8>
  801bf8:	00bfe034 	movhi	r2,65408
  801bfc:	10bfffc4 	addi	r2,r2,-1
  801c00:	4090703a 	and	r8,r8,r2
  801c04:	880ad07a 	srli	r5,r17,1
  801c08:	400897fa 	slli	r4,r8,31
  801c0c:	88c0004c 	andi	r3,r17,1
  801c10:	28e2b03a 	or	r17,r5,r3
  801c14:	4010d07a 	srli	r8,r8,1
  801c18:	2462b03a 	or	r17,r4,r17
  801c1c:	003f7106 	br	8019e4 <__alt_data_end+0xff8019e4>
  801c20:	4088b03a 	or	r4,r8,r2
  801c24:	20014526 	beq	r4,zero,80213c <__adddf3+0x7d4>
  801c28:	01000434 	movhi	r4,16
  801c2c:	42000234 	orhi	r8,r8,8
  801c30:	213fffc4 	addi	r4,r4,-1
  801c34:	4110703a 	and	r8,r8,r4
  801c38:	003f8206 	br	801a44 <__alt_data_end+0xff801a44>
  801c3c:	18ffffc4 	addi	r3,r3,-1
  801c40:	1800491e 	bne	r3,zero,801d68 <__adddf3+0x400>
  801c44:	898bc83a 	sub	r5,r17,r6
  801c48:	8963803a 	cmpltu	r17,r17,r5
  801c4c:	4251c83a 	sub	r8,r8,r9
  801c50:	4451c83a 	sub	r8,r8,r17
  801c54:	2823883a 	mov	r17,r5
  801c58:	003f9f06 	br	801ad8 <__alt_data_end+0xff801ad8>
  801c5c:	4984b03a 	or	r2,r9,r6
  801c60:	103f6026 	beq	r2,zero,8019e4 <__alt_data_end+0xff8019e4>
  801c64:	213fffc4 	addi	r4,r4,-1
  801c68:	2000931e 	bne	r4,zero,801eb8 <__adddf3+0x550>
  801c6c:	898d883a 	add	r6,r17,r6
  801c70:	3463803a 	cmpltu	r17,r6,r17
  801c74:	4251883a 	add	r8,r8,r9
  801c78:	8a11883a 	add	r8,r17,r8
  801c7c:	3023883a 	mov	r17,r6
  801c80:	003fd806 	br	801be4 <__alt_data_end+0xff801be4>
  801c84:	1800541e 	bne	r3,zero,801dd8 <__adddf3+0x470>
  801c88:	80800044 	addi	r2,r16,1
  801c8c:	1081ffcc 	andi	r2,r2,2047
  801c90:	00c00044 	movi	r3,1
  801c94:	1880a00e 	bge	r3,r2,801f18 <__adddf3+0x5b0>
  801c98:	8989c83a 	sub	r4,r17,r6
  801c9c:	8905803a 	cmpltu	r2,r17,r4
  801ca0:	4267c83a 	sub	r19,r8,r9
  801ca4:	98a7c83a 	sub	r19,r19,r2
  801ca8:	9880202c 	andhi	r2,r19,128
  801cac:	10006326 	beq	r2,zero,801e3c <__adddf3+0x4d4>
  801cb0:	3463c83a 	sub	r17,r6,r17
  801cb4:	4a07c83a 	sub	r3,r9,r8
  801cb8:	344d803a 	cmpltu	r6,r6,r17
  801cbc:	19a7c83a 	sub	r19,r3,r6
  801cc0:	3825883a 	mov	r18,r7
  801cc4:	983f8a1e 	bne	r19,zero,801af0 <__alt_data_end+0xff801af0>
  801cc8:	8809883a 	mov	r4,r17
  801ccc:	08034d00 	call	8034d0 <__clzsi2>
  801cd0:	10800804 	addi	r2,r2,32
  801cd4:	10fffe04 	addi	r3,r2,-8
  801cd8:	010007c4 	movi	r4,31
  801cdc:	20ff890e 	bge	r4,r3,801b04 <__alt_data_end+0xff801b04>
  801ce0:	10bff604 	addi	r2,r2,-40
  801ce4:	8884983a 	sll	r2,r17,r2
  801ce8:	0023883a 	mov	r17,zero
  801cec:	1c3f8c0e 	bge	r3,r16,801b20 <__alt_data_end+0xff801b20>
  801cf0:	023fe034 	movhi	r8,65408
  801cf4:	423fffc4 	addi	r8,r8,-1
  801cf8:	80e1c83a 	sub	r16,r16,r3
  801cfc:	1210703a 	and	r8,r2,r8
  801d00:	003f3806 	br	8019e4 <__alt_data_end+0xff8019e4>
  801d04:	9007883a 	mov	r3,r18
  801d08:	0011883a 	mov	r8,zero
  801d0c:	0005883a 	mov	r2,zero
  801d10:	003f4c06 	br	801a44 <__alt_data_end+0xff801a44>
  801d14:	498cb03a 	or	r6,r9,r6
  801d18:	300cc03a 	cmpne	r6,r6,zero
  801d1c:	0007883a 	mov	r3,zero
  801d20:	003f6806 	br	801ac4 <__alt_data_end+0xff801ac4>
  801d24:	20009c1e 	bne	r4,zero,801f98 <__adddf3+0x630>
  801d28:	80800044 	addi	r2,r16,1
  801d2c:	1141ffcc 	andi	r5,r2,2047
  801d30:	01000044 	movi	r4,1
  801d34:	2140670e 	bge	r4,r5,801ed4 <__adddf3+0x56c>
  801d38:	0101ffc4 	movi	r4,2047
  801d3c:	11007f26 	beq	r2,r4,801f3c <__adddf3+0x5d4>
  801d40:	898d883a 	add	r6,r17,r6
  801d44:	4247883a 	add	r3,r8,r9
  801d48:	3451803a 	cmpltu	r8,r6,r17
  801d4c:	40d1883a 	add	r8,r8,r3
  801d50:	402297fa 	slli	r17,r8,31
  801d54:	300cd07a 	srli	r6,r6,1
  801d58:	4010d07a 	srli	r8,r8,1
  801d5c:	1021883a 	mov	r16,r2
  801d60:	89a2b03a 	or	r17,r17,r6
  801d64:	003f1f06 	br	8019e4 <__alt_data_end+0xff8019e4>
  801d68:	0081ffc4 	movi	r2,2047
  801d6c:	80bf481e 	bne	r16,r2,801a90 <__alt_data_end+0xff801a90>
  801d70:	003f1c06 	br	8019e4 <__alt_data_end+0xff8019e4>
  801d74:	843ff844 	addi	r16,r16,-31
  801d78:	01000804 	movi	r4,32
  801d7c:	1406d83a 	srl	r3,r2,r16
  801d80:	41005026 	beq	r8,r4,801ec4 <__adddf3+0x55c>
  801d84:	01001004 	movi	r4,64
  801d88:	2211c83a 	sub	r8,r4,r8
  801d8c:	1204983a 	sll	r2,r2,r8
  801d90:	88a2b03a 	or	r17,r17,r2
  801d94:	8822c03a 	cmpne	r17,r17,zero
  801d98:	1c62b03a 	or	r17,r3,r17
  801d9c:	0011883a 	mov	r8,zero
  801da0:	0021883a 	mov	r16,zero
  801da4:	003f7106 	br	801b6c <__alt_data_end+0xff801b6c>
  801da8:	193ff804 	addi	r4,r3,-32
  801dac:	00800804 	movi	r2,32
  801db0:	4908d83a 	srl	r4,r9,r4
  801db4:	18804526 	beq	r3,r2,801ecc <__adddf3+0x564>
  801db8:	00801004 	movi	r2,64
  801dbc:	10c5c83a 	sub	r2,r2,r3
  801dc0:	4886983a 	sll	r3,r9,r2
  801dc4:	198cb03a 	or	r6,r3,r6
  801dc8:	300cc03a 	cmpne	r6,r6,zero
  801dcc:	218cb03a 	or	r6,r4,r6
  801dd0:	0007883a 	mov	r3,zero
  801dd4:	003f3b06 	br	801ac4 <__alt_data_end+0xff801ac4>
  801dd8:	80002a26 	beq	r16,zero,801e84 <__adddf3+0x51c>
  801ddc:	0101ffc4 	movi	r4,2047
  801de0:	11006826 	beq	r2,r4,801f84 <__adddf3+0x61c>
  801de4:	00c7c83a 	sub	r3,zero,r3
  801de8:	42002034 	orhi	r8,r8,128
  801dec:	01000e04 	movi	r4,56
  801df0:	20c07c16 	blt	r4,r3,801fe4 <__adddf3+0x67c>
  801df4:	010007c4 	movi	r4,31
  801df8:	20c0da16 	blt	r4,r3,802164 <__adddf3+0x7fc>
  801dfc:	01000804 	movi	r4,32
  801e00:	20c9c83a 	sub	r4,r4,r3
  801e04:	4114983a 	sll	r10,r8,r4
  801e08:	88cad83a 	srl	r5,r17,r3
  801e0c:	8908983a 	sll	r4,r17,r4
  801e10:	40c6d83a 	srl	r3,r8,r3
  801e14:	5162b03a 	or	r17,r10,r5
  801e18:	2008c03a 	cmpne	r4,r4,zero
  801e1c:	8922b03a 	or	r17,r17,r4
  801e20:	3463c83a 	sub	r17,r6,r17
  801e24:	48c7c83a 	sub	r3,r9,r3
  801e28:	344d803a 	cmpltu	r6,r6,r17
  801e2c:	1991c83a 	sub	r8,r3,r6
  801e30:	1021883a 	mov	r16,r2
  801e34:	3825883a 	mov	r18,r7
  801e38:	003f2706 	br	801ad8 <__alt_data_end+0xff801ad8>
  801e3c:	24d0b03a 	or	r8,r4,r19
  801e40:	40001b1e 	bne	r8,zero,801eb0 <__adddf3+0x548>
  801e44:	0005883a 	mov	r2,zero
  801e48:	0007883a 	mov	r3,zero
  801e4c:	0021883a 	mov	r16,zero
  801e50:	003f4d06 	br	801b88 <__alt_data_end+0xff801b88>
  801e54:	008007c4 	movi	r2,31
  801e58:	11003c16 	blt	r2,r4,801f4c <__adddf3+0x5e4>
  801e5c:	00800804 	movi	r2,32
  801e60:	1105c83a 	sub	r2,r2,r4
  801e64:	488e983a 	sll	r7,r9,r2
  801e68:	310ad83a 	srl	r5,r6,r4
  801e6c:	3084983a 	sll	r2,r6,r2
  801e70:	4912d83a 	srl	r9,r9,r4
  801e74:	394ab03a 	or	r5,r7,r5
  801e78:	1004c03a 	cmpne	r2,r2,zero
  801e7c:	288ab03a 	or	r5,r5,r2
  801e80:	003f5306 	br	801bd0 <__alt_data_end+0xff801bd0>
  801e84:	4448b03a 	or	r4,r8,r17
  801e88:	20003e26 	beq	r4,zero,801f84 <__adddf3+0x61c>
  801e8c:	00c6303a 	nor	r3,zero,r3
  801e90:	18003a1e 	bne	r3,zero,801f7c <__adddf3+0x614>
  801e94:	3463c83a 	sub	r17,r6,r17
  801e98:	4a07c83a 	sub	r3,r9,r8
  801e9c:	344d803a 	cmpltu	r6,r6,r17
  801ea0:	1991c83a 	sub	r8,r3,r6
  801ea4:	1021883a 	mov	r16,r2
  801ea8:	3825883a 	mov	r18,r7
  801eac:	003f0a06 	br	801ad8 <__alt_data_end+0xff801ad8>
  801eb0:	2023883a 	mov	r17,r4
  801eb4:	003f0d06 	br	801aec <__alt_data_end+0xff801aec>
  801eb8:	0081ffc4 	movi	r2,2047
  801ebc:	80bf3f1e 	bne	r16,r2,801bbc <__alt_data_end+0xff801bbc>
  801ec0:	003ec806 	br	8019e4 <__alt_data_end+0xff8019e4>
  801ec4:	0005883a 	mov	r2,zero
  801ec8:	003fb106 	br	801d90 <__alt_data_end+0xff801d90>
  801ecc:	0007883a 	mov	r3,zero
  801ed0:	003fbc06 	br	801dc4 <__alt_data_end+0xff801dc4>
  801ed4:	4444b03a 	or	r2,r8,r17
  801ed8:	8000871e 	bne	r16,zero,8020f8 <__adddf3+0x790>
  801edc:	1000ba26 	beq	r2,zero,8021c8 <__adddf3+0x860>
  801ee0:	4984b03a 	or	r2,r9,r6
  801ee4:	103ebf26 	beq	r2,zero,8019e4 <__alt_data_end+0xff8019e4>
  801ee8:	8985883a 	add	r2,r17,r6
  801eec:	4247883a 	add	r3,r8,r9
  801ef0:	1451803a 	cmpltu	r8,r2,r17
  801ef4:	40d1883a 	add	r8,r8,r3
  801ef8:	40c0202c 	andhi	r3,r8,128
  801efc:	1023883a 	mov	r17,r2
  801f00:	183f1a26 	beq	r3,zero,801b6c <__alt_data_end+0xff801b6c>
  801f04:	00bfe034 	movhi	r2,65408
  801f08:	10bfffc4 	addi	r2,r2,-1
  801f0c:	2021883a 	mov	r16,r4
  801f10:	4090703a 	and	r8,r8,r2
  801f14:	003eb306 	br	8019e4 <__alt_data_end+0xff8019e4>
  801f18:	4444b03a 	or	r2,r8,r17
  801f1c:	8000291e 	bne	r16,zero,801fc4 <__adddf3+0x65c>
  801f20:	10004b1e 	bne	r2,zero,802050 <__adddf3+0x6e8>
  801f24:	4990b03a 	or	r8,r9,r6
  801f28:	40008b26 	beq	r8,zero,802158 <__adddf3+0x7f0>
  801f2c:	4811883a 	mov	r8,r9
  801f30:	3023883a 	mov	r17,r6
  801f34:	3825883a 	mov	r18,r7
  801f38:	003eaa06 	br	8019e4 <__alt_data_end+0xff8019e4>
  801f3c:	1021883a 	mov	r16,r2
  801f40:	0011883a 	mov	r8,zero
  801f44:	0005883a 	mov	r2,zero
  801f48:	003f0f06 	br	801b88 <__alt_data_end+0xff801b88>
  801f4c:	217ff804 	addi	r5,r4,-32
  801f50:	00800804 	movi	r2,32
  801f54:	494ad83a 	srl	r5,r9,r5
  801f58:	20807d26 	beq	r4,r2,802150 <__adddf3+0x7e8>
  801f5c:	00801004 	movi	r2,64
  801f60:	1109c83a 	sub	r4,r2,r4
  801f64:	4912983a 	sll	r9,r9,r4
  801f68:	498cb03a 	or	r6,r9,r6
  801f6c:	300cc03a 	cmpne	r6,r6,zero
  801f70:	298ab03a 	or	r5,r5,r6
  801f74:	0013883a 	mov	r9,zero
  801f78:	003f1506 	br	801bd0 <__alt_data_end+0xff801bd0>
  801f7c:	0101ffc4 	movi	r4,2047
  801f80:	113f9a1e 	bne	r2,r4,801dec <__alt_data_end+0xff801dec>
  801f84:	4811883a 	mov	r8,r9
  801f88:	3023883a 	mov	r17,r6
  801f8c:	1021883a 	mov	r16,r2
  801f90:	3825883a 	mov	r18,r7
  801f94:	003e9306 	br	8019e4 <__alt_data_end+0xff8019e4>
  801f98:	8000161e 	bne	r16,zero,801ff4 <__adddf3+0x68c>
  801f9c:	444ab03a 	or	r5,r8,r17
  801fa0:	28005126 	beq	r5,zero,8020e8 <__adddf3+0x780>
  801fa4:	0108303a 	nor	r4,zero,r4
  801fa8:	20004d1e 	bne	r4,zero,8020e0 <__adddf3+0x778>
  801fac:	89a3883a 	add	r17,r17,r6
  801fb0:	4253883a 	add	r9,r8,r9
  801fb4:	898d803a 	cmpltu	r6,r17,r6
  801fb8:	3251883a 	add	r8,r6,r9
  801fbc:	1021883a 	mov	r16,r2
  801fc0:	003f0806 	br	801be4 <__alt_data_end+0xff801be4>
  801fc4:	1000301e 	bne	r2,zero,802088 <__adddf3+0x720>
  801fc8:	4984b03a 	or	r2,r9,r6
  801fcc:	10007126 	beq	r2,zero,802194 <__adddf3+0x82c>
  801fd0:	4811883a 	mov	r8,r9
  801fd4:	3023883a 	mov	r17,r6
  801fd8:	3825883a 	mov	r18,r7
  801fdc:	0401ffc4 	movi	r16,2047
  801fe0:	003e8006 	br	8019e4 <__alt_data_end+0xff8019e4>
  801fe4:	4462b03a 	or	r17,r8,r17
  801fe8:	8822c03a 	cmpne	r17,r17,zero
  801fec:	0007883a 	mov	r3,zero
  801ff0:	003f8b06 	br	801e20 <__alt_data_end+0xff801e20>
  801ff4:	0141ffc4 	movi	r5,2047
  801ff8:	11403b26 	beq	r2,r5,8020e8 <__adddf3+0x780>
  801ffc:	0109c83a 	sub	r4,zero,r4
  802000:	42002034 	orhi	r8,r8,128
  802004:	01400e04 	movi	r5,56
  802008:	29006716 	blt	r5,r4,8021a8 <__adddf3+0x840>
  80200c:	014007c4 	movi	r5,31
  802010:	29007016 	blt	r5,r4,8021d4 <__adddf3+0x86c>
  802014:	01400804 	movi	r5,32
  802018:	290bc83a 	sub	r5,r5,r4
  80201c:	4154983a 	sll	r10,r8,r5
  802020:	890ed83a 	srl	r7,r17,r4
  802024:	894a983a 	sll	r5,r17,r5
  802028:	4108d83a 	srl	r4,r8,r4
  80202c:	51e2b03a 	or	r17,r10,r7
  802030:	280ac03a 	cmpne	r5,r5,zero
  802034:	8962b03a 	or	r17,r17,r5
  802038:	89a3883a 	add	r17,r17,r6
  80203c:	2253883a 	add	r9,r4,r9
  802040:	898d803a 	cmpltu	r6,r17,r6
  802044:	3251883a 	add	r8,r6,r9
  802048:	1021883a 	mov	r16,r2
  80204c:	003ee506 	br	801be4 <__alt_data_end+0xff801be4>
  802050:	4984b03a 	or	r2,r9,r6
  802054:	103e6326 	beq	r2,zero,8019e4 <__alt_data_end+0xff8019e4>
  802058:	8987c83a 	sub	r3,r17,r6
  80205c:	88c9803a 	cmpltu	r4,r17,r3
  802060:	4245c83a 	sub	r2,r8,r9
  802064:	1105c83a 	sub	r2,r2,r4
  802068:	1100202c 	andhi	r4,r2,128
  80206c:	203ebb26 	beq	r4,zero,801b5c <__alt_data_end+0xff801b5c>
  802070:	3463c83a 	sub	r17,r6,r17
  802074:	4a07c83a 	sub	r3,r9,r8
  802078:	344d803a 	cmpltu	r6,r6,r17
  80207c:	1991c83a 	sub	r8,r3,r6
  802080:	3825883a 	mov	r18,r7
  802084:	003e5706 	br	8019e4 <__alt_data_end+0xff8019e4>
  802088:	4984b03a 	or	r2,r9,r6
  80208c:	10002e26 	beq	r2,zero,802148 <__adddf3+0x7e0>
  802090:	4004d0fa 	srli	r2,r8,3
  802094:	8822d0fa 	srli	r17,r17,3
  802098:	4010977a 	slli	r8,r8,29
  80209c:	10c0022c 	andhi	r3,r2,8
  8020a0:	4462b03a 	or	r17,r8,r17
  8020a4:	18000826 	beq	r3,zero,8020c8 <__adddf3+0x760>
  8020a8:	4808d0fa 	srli	r4,r9,3
  8020ac:	20c0022c 	andhi	r3,r4,8
  8020b0:	1800051e 	bne	r3,zero,8020c8 <__adddf3+0x760>
  8020b4:	300cd0fa 	srli	r6,r6,3
  8020b8:	4806977a 	slli	r3,r9,29
  8020bc:	2005883a 	mov	r2,r4
  8020c0:	3825883a 	mov	r18,r7
  8020c4:	19a2b03a 	or	r17,r3,r6
  8020c8:	8810d77a 	srli	r8,r17,29
  8020cc:	100490fa 	slli	r2,r2,3
  8020d0:	882290fa 	slli	r17,r17,3
  8020d4:	0401ffc4 	movi	r16,2047
  8020d8:	4090b03a 	or	r8,r8,r2
  8020dc:	003e4106 	br	8019e4 <__alt_data_end+0xff8019e4>
  8020e0:	0141ffc4 	movi	r5,2047
  8020e4:	117fc71e 	bne	r2,r5,802004 <__alt_data_end+0xff802004>
  8020e8:	4811883a 	mov	r8,r9
  8020ec:	3023883a 	mov	r17,r6
  8020f0:	1021883a 	mov	r16,r2
  8020f4:	003e3b06 	br	8019e4 <__alt_data_end+0xff8019e4>
  8020f8:	10002f26 	beq	r2,zero,8021b8 <__adddf3+0x850>
  8020fc:	4984b03a 	or	r2,r9,r6
  802100:	10001126 	beq	r2,zero,802148 <__adddf3+0x7e0>
  802104:	4004d0fa 	srli	r2,r8,3
  802108:	8822d0fa 	srli	r17,r17,3
  80210c:	4010977a 	slli	r8,r8,29
  802110:	10c0022c 	andhi	r3,r2,8
  802114:	4462b03a 	or	r17,r8,r17
  802118:	183feb26 	beq	r3,zero,8020c8 <__alt_data_end+0xff8020c8>
  80211c:	4808d0fa 	srli	r4,r9,3
  802120:	20c0022c 	andhi	r3,r4,8
  802124:	183fe81e 	bne	r3,zero,8020c8 <__alt_data_end+0xff8020c8>
  802128:	300cd0fa 	srli	r6,r6,3
  80212c:	4806977a 	slli	r3,r9,29
  802130:	2005883a 	mov	r2,r4
  802134:	19a2b03a 	or	r17,r3,r6
  802138:	003fe306 	br	8020c8 <__alt_data_end+0xff8020c8>
  80213c:	0011883a 	mov	r8,zero
  802140:	0005883a 	mov	r2,zero
  802144:	003e3f06 	br	801a44 <__alt_data_end+0xff801a44>
  802148:	0401ffc4 	movi	r16,2047
  80214c:	003e2506 	br	8019e4 <__alt_data_end+0xff8019e4>
  802150:	0013883a 	mov	r9,zero
  802154:	003f8406 	br	801f68 <__alt_data_end+0xff801f68>
  802158:	0005883a 	mov	r2,zero
  80215c:	0007883a 	mov	r3,zero
  802160:	003e8906 	br	801b88 <__alt_data_end+0xff801b88>
  802164:	197ff804 	addi	r5,r3,-32
  802168:	01000804 	movi	r4,32
  80216c:	414ad83a 	srl	r5,r8,r5
  802170:	19002426 	beq	r3,r4,802204 <__adddf3+0x89c>
  802174:	01001004 	movi	r4,64
  802178:	20c7c83a 	sub	r3,r4,r3
  80217c:	40c6983a 	sll	r3,r8,r3
  802180:	1c46b03a 	or	r3,r3,r17
  802184:	1806c03a 	cmpne	r3,r3,zero
  802188:	28e2b03a 	or	r17,r5,r3
  80218c:	0007883a 	mov	r3,zero
  802190:	003f2306 	br	801e20 <__alt_data_end+0xff801e20>
  802194:	0007883a 	mov	r3,zero
  802198:	5811883a 	mov	r8,r11
  80219c:	00bfffc4 	movi	r2,-1
  8021a0:	0401ffc4 	movi	r16,2047
  8021a4:	003e7806 	br	801b88 <__alt_data_end+0xff801b88>
  8021a8:	4462b03a 	or	r17,r8,r17
  8021ac:	8822c03a 	cmpne	r17,r17,zero
  8021b0:	0009883a 	mov	r4,zero
  8021b4:	003fa006 	br	802038 <__alt_data_end+0xff802038>
  8021b8:	4811883a 	mov	r8,r9
  8021bc:	3023883a 	mov	r17,r6
  8021c0:	0401ffc4 	movi	r16,2047
  8021c4:	003e0706 	br	8019e4 <__alt_data_end+0xff8019e4>
  8021c8:	4811883a 	mov	r8,r9
  8021cc:	3023883a 	mov	r17,r6
  8021d0:	003e0406 	br	8019e4 <__alt_data_end+0xff8019e4>
  8021d4:	21fff804 	addi	r7,r4,-32
  8021d8:	01400804 	movi	r5,32
  8021dc:	41ced83a 	srl	r7,r8,r7
  8021e0:	21400a26 	beq	r4,r5,80220c <__adddf3+0x8a4>
  8021e4:	01401004 	movi	r5,64
  8021e8:	2909c83a 	sub	r4,r5,r4
  8021ec:	4108983a 	sll	r4,r8,r4
  8021f0:	2448b03a 	or	r4,r4,r17
  8021f4:	2008c03a 	cmpne	r4,r4,zero
  8021f8:	3922b03a 	or	r17,r7,r4
  8021fc:	0009883a 	mov	r4,zero
  802200:	003f8d06 	br	802038 <__alt_data_end+0xff802038>
  802204:	0007883a 	mov	r3,zero
  802208:	003fdd06 	br	802180 <__alt_data_end+0xff802180>
  80220c:	0009883a 	mov	r4,zero
  802210:	003ff706 	br	8021f0 <__alt_data_end+0xff8021f0>

00802214 <__divdf3>:
  802214:	defff004 	addi	sp,sp,-64
  802218:	dc800815 	stw	r18,32(sp)
  80221c:	2824d53a 	srli	r18,r5,20
  802220:	dd800c15 	stw	r22,48(sp)
  802224:	282cd7fa 	srli	r22,r5,31
  802228:	dc000615 	stw	r16,24(sp)
  80222c:	04000434 	movhi	r16,16
  802230:	843fffc4 	addi	r16,r16,-1
  802234:	dfc00f15 	stw	ra,60(sp)
  802238:	df000e15 	stw	fp,56(sp)
  80223c:	ddc00d15 	stw	r23,52(sp)
  802240:	dd400b15 	stw	r21,44(sp)
  802244:	dd000a15 	stw	r20,40(sp)
  802248:	dcc00915 	stw	r19,36(sp)
  80224c:	dc400715 	stw	r17,28(sp)
  802250:	9481ffcc 	andi	r18,r18,2047
  802254:	2c20703a 	and	r16,r5,r16
  802258:	b2003fcc 	andi	r8,r22,255
  80225c:	90006126 	beq	r18,zero,8023e4 <__divdf3+0x1d0>
  802260:	0081ffc4 	movi	r2,2047
  802264:	202b883a 	mov	r21,r4
  802268:	90803726 	beq	r18,r2,802348 <__divdf3+0x134>
  80226c:	80800434 	orhi	r2,r16,16
  802270:	100490fa 	slli	r2,r2,3
  802274:	2020d77a 	srli	r16,r4,29
  802278:	202a90fa 	slli	r21,r4,3
  80227c:	94bf0044 	addi	r18,r18,-1023
  802280:	80a0b03a 	or	r16,r16,r2
  802284:	0013883a 	mov	r9,zero
  802288:	000b883a 	mov	r5,zero
  80228c:	3806d53a 	srli	r3,r7,20
  802290:	382ed7fa 	srli	r23,r7,31
  802294:	04400434 	movhi	r17,16
  802298:	8c7fffc4 	addi	r17,r17,-1
  80229c:	18c1ffcc 	andi	r3,r3,2047
  8022a0:	3029883a 	mov	r20,r6
  8022a4:	3c62703a 	and	r17,r7,r17
  8022a8:	bf003fcc 	andi	fp,r23,255
  8022ac:	18006e26 	beq	r3,zero,802468 <__divdf3+0x254>
  8022b0:	0081ffc4 	movi	r2,2047
  8022b4:	18806626 	beq	r3,r2,802450 <__divdf3+0x23c>
  8022b8:	88800434 	orhi	r2,r17,16
  8022bc:	100490fa 	slli	r2,r2,3
  8022c0:	3022d77a 	srli	r17,r6,29
  8022c4:	302890fa 	slli	r20,r6,3
  8022c8:	18ff0044 	addi	r3,r3,-1023
  8022cc:	88a2b03a 	or	r17,r17,r2
  8022d0:	000f883a 	mov	r7,zero
  8022d4:	b5e6f03a 	xor	r19,r22,r23
  8022d8:	3a4cb03a 	or	r6,r7,r9
  8022dc:	008003c4 	movi	r2,15
  8022e0:	9809883a 	mov	r4,r19
  8022e4:	90c7c83a 	sub	r3,r18,r3
  8022e8:	9cc03fcc 	andi	r19,r19,255
  8022ec:	11809636 	bltu	r2,r6,802548 <__divdf3+0x334>
  8022f0:	300c90ba 	slli	r6,r6,2
  8022f4:	00802034 	movhi	r2,128
  8022f8:	1088c204 	addi	r2,r2,8968
  8022fc:	308d883a 	add	r6,r6,r2
  802300:	30800017 	ldw	r2,0(r6)
  802304:	1000683a 	jmp	r2
  802308:	00802548 	cmpgei	r2,zero,149
  80230c:	00802380 	call	80238 <__reset-0x77fdc8>
  802310:	00802538 	rdprs	r2,zero,148
  802314:	00802374 	movhi	r2,141
  802318:	00802538 	rdprs	r2,zero,148
  80231c:	0080250c 	andi	r2,zero,148
  802320:	00802538 	rdprs	r2,zero,148
  802324:	00802374 	movhi	r2,141
  802328:	00802380 	call	80238 <__reset-0x77fdc8>
  80232c:	00802380 	call	80238 <__reset-0x77fdc8>
  802330:	0080250c 	andi	r2,zero,148
  802334:	00802374 	movhi	r2,141
  802338:	00802364 	muli	r2,zero,141
  80233c:	00802364 	muli	r2,zero,141
  802340:	00802364 	muli	r2,zero,141
  802344:	008028d0 	cmplti	r2,zero,163
  802348:	2404b03a 	or	r2,r4,r16
  80234c:	10006c1e 	bne	r2,zero,802500 <__divdf3+0x2ec>
  802350:	02400204 	movi	r9,8
  802354:	0021883a 	mov	r16,zero
  802358:	002b883a 	mov	r21,zero
  80235c:	01400084 	movi	r5,2
  802360:	003fca06 	br	80228c <__alt_data_end+0xff80228c>
  802364:	8023883a 	mov	r17,r16
  802368:	a829883a 	mov	r20,r21
  80236c:	4039883a 	mov	fp,r8
  802370:	280f883a 	mov	r7,r5
  802374:	00800084 	movi	r2,2
  802378:	3881601e 	bne	r7,r2,8028fc <__divdf3+0x6e8>
  80237c:	e027883a 	mov	r19,fp
  802380:	9900004c 	andi	r4,r19,1
  802384:	0081ffc4 	movi	r2,2047
  802388:	0021883a 	mov	r16,zero
  80238c:	002b883a 	mov	r21,zero
  802390:	1004953a 	slli	r2,r2,20
  802394:	20c03fcc 	andi	r3,r4,255
  802398:	01400434 	movhi	r5,16
  80239c:	297fffc4 	addi	r5,r5,-1
  8023a0:	180697fa 	slli	r3,r3,31
  8023a4:	8160703a 	and	r16,r16,r5
  8023a8:	80a0b03a 	or	r16,r16,r2
  8023ac:	80c6b03a 	or	r3,r16,r3
  8023b0:	a805883a 	mov	r2,r21
  8023b4:	dfc00f17 	ldw	ra,60(sp)
  8023b8:	df000e17 	ldw	fp,56(sp)
  8023bc:	ddc00d17 	ldw	r23,52(sp)
  8023c0:	dd800c17 	ldw	r22,48(sp)
  8023c4:	dd400b17 	ldw	r21,44(sp)
  8023c8:	dd000a17 	ldw	r20,40(sp)
  8023cc:	dcc00917 	ldw	r19,36(sp)
  8023d0:	dc800817 	ldw	r18,32(sp)
  8023d4:	dc400717 	ldw	r17,28(sp)
  8023d8:	dc000617 	ldw	r16,24(sp)
  8023dc:	dec01004 	addi	sp,sp,64
  8023e0:	f800283a 	ret
  8023e4:	2404b03a 	or	r2,r4,r16
  8023e8:	2023883a 	mov	r17,r4
  8023ec:	10003f26 	beq	r2,zero,8024ec <__divdf3+0x2d8>
  8023f0:	80015e26 	beq	r16,zero,80296c <__divdf3+0x758>
  8023f4:	8009883a 	mov	r4,r16
  8023f8:	d9800215 	stw	r6,8(sp)
  8023fc:	d9c00515 	stw	r7,20(sp)
  802400:	da000415 	stw	r8,16(sp)
  802404:	08034d00 	call	8034d0 <__clzsi2>
  802408:	d9800217 	ldw	r6,8(sp)
  80240c:	d9c00517 	ldw	r7,20(sp)
  802410:	da000417 	ldw	r8,16(sp)
  802414:	113ffd44 	addi	r4,r2,-11
  802418:	00c00704 	movi	r3,28
  80241c:	19014f16 	blt	r3,r4,80295c <__divdf3+0x748>
  802420:	00c00744 	movi	r3,29
  802424:	157ffe04 	addi	r21,r2,-8
  802428:	1907c83a 	sub	r3,r3,r4
  80242c:	8560983a 	sll	r16,r16,r21
  802430:	88c6d83a 	srl	r3,r17,r3
  802434:	8d6a983a 	sll	r21,r17,r21
  802438:	1c20b03a 	or	r16,r3,r16
  80243c:	1080fcc4 	addi	r2,r2,1011
  802440:	00a5c83a 	sub	r18,zero,r2
  802444:	0013883a 	mov	r9,zero
  802448:	000b883a 	mov	r5,zero
  80244c:	003f8f06 	br	80228c <__alt_data_end+0xff80228c>
  802450:	3444b03a 	or	r2,r6,r17
  802454:	1000231e 	bne	r2,zero,8024e4 <__divdf3+0x2d0>
  802458:	0023883a 	mov	r17,zero
  80245c:	0029883a 	mov	r20,zero
  802460:	01c00084 	movi	r7,2
  802464:	003f9b06 	br	8022d4 <__alt_data_end+0xff8022d4>
  802468:	3444b03a 	or	r2,r6,r17
  80246c:	10001926 	beq	r2,zero,8024d4 <__divdf3+0x2c0>
  802470:	88014b26 	beq	r17,zero,8029a0 <__divdf3+0x78c>
  802474:	8809883a 	mov	r4,r17
  802478:	d9400115 	stw	r5,4(sp)
  80247c:	d9800215 	stw	r6,8(sp)
  802480:	da000415 	stw	r8,16(sp)
  802484:	da400315 	stw	r9,12(sp)
  802488:	08034d00 	call	8034d0 <__clzsi2>
  80248c:	d9400117 	ldw	r5,4(sp)
  802490:	d9800217 	ldw	r6,8(sp)
  802494:	da000417 	ldw	r8,16(sp)
  802498:	da400317 	ldw	r9,12(sp)
  80249c:	113ffd44 	addi	r4,r2,-11
  8024a0:	00c00704 	movi	r3,28
  8024a4:	19013a16 	blt	r3,r4,802990 <__divdf3+0x77c>
  8024a8:	00c00744 	movi	r3,29
  8024ac:	153ffe04 	addi	r20,r2,-8
  8024b0:	1907c83a 	sub	r3,r3,r4
  8024b4:	8d22983a 	sll	r17,r17,r20
  8024b8:	30c6d83a 	srl	r3,r6,r3
  8024bc:	3528983a 	sll	r20,r6,r20
  8024c0:	1c62b03a 	or	r17,r3,r17
  8024c4:	1080fcc4 	addi	r2,r2,1011
  8024c8:	0087c83a 	sub	r3,zero,r2
  8024cc:	000f883a 	mov	r7,zero
  8024d0:	003f8006 	br	8022d4 <__alt_data_end+0xff8022d4>
  8024d4:	0023883a 	mov	r17,zero
  8024d8:	0029883a 	mov	r20,zero
  8024dc:	01c00044 	movi	r7,1
  8024e0:	003f7c06 	br	8022d4 <__alt_data_end+0xff8022d4>
  8024e4:	01c000c4 	movi	r7,3
  8024e8:	003f7a06 	br	8022d4 <__alt_data_end+0xff8022d4>
  8024ec:	02400104 	movi	r9,4
  8024f0:	0021883a 	mov	r16,zero
  8024f4:	002b883a 	mov	r21,zero
  8024f8:	01400044 	movi	r5,1
  8024fc:	003f6306 	br	80228c <__alt_data_end+0xff80228c>
  802500:	02400304 	movi	r9,12
  802504:	014000c4 	movi	r5,3
  802508:	003f6006 	br	80228c <__alt_data_end+0xff80228c>
  80250c:	04000434 	movhi	r16,16
  802510:	0009883a 	mov	r4,zero
  802514:	843fffc4 	addi	r16,r16,-1
  802518:	057fffc4 	movi	r21,-1
  80251c:	0081ffc4 	movi	r2,2047
  802520:	003f9b06 	br	802390 <__alt_data_end+0xff802390>
  802524:	00c00044 	movi	r3,1
  802528:	1887c83a 	sub	r3,r3,r2
  80252c:	01000e04 	movi	r4,56
  802530:	20c1530e 	bge	r4,r3,802a80 <__divdf3+0x86c>
  802534:	9900004c 	andi	r4,r19,1
  802538:	0005883a 	mov	r2,zero
  80253c:	0021883a 	mov	r16,zero
  802540:	002b883a 	mov	r21,zero
  802544:	003f9206 	br	802390 <__alt_data_end+0xff802390>
  802548:	8c012e36 	bltu	r17,r16,802a04 <__divdf3+0x7f0>
  80254c:	84412c26 	beq	r16,r17,802a00 <__divdf3+0x7ec>
  802550:	a82f883a 	mov	r23,r21
  802554:	18ffffc4 	addi	r3,r3,-1
  802558:	002b883a 	mov	r21,zero
  80255c:	a004d63a 	srli	r2,r20,24
  802560:	8822923a 	slli	r17,r17,8
  802564:	a028923a 	slli	r20,r20,8
  802568:	8009883a 	mov	r4,r16
  80256c:	88acb03a 	or	r22,r17,r2
  802570:	dd000015 	stw	r20,0(sp)
  802574:	b028d43a 	srli	r20,r22,16
  802578:	d8c00215 	stw	r3,8(sp)
  80257c:	b4bfffcc 	andi	r18,r22,65535
  802580:	a00b883a 	mov	r5,r20
  802584:	08018840 	call	801884 <__udivsi3>
  802588:	100b883a 	mov	r5,r2
  80258c:	9009883a 	mov	r4,r18
  802590:	1023883a 	mov	r17,r2
  802594:	08019400 	call	801940 <__mulsi3>
  802598:	8009883a 	mov	r4,r16
  80259c:	a00b883a 	mov	r5,r20
  8025a0:	1039883a 	mov	fp,r2
  8025a4:	08018e80 	call	8018e8 <__umodsi3>
  8025a8:	1004943a 	slli	r2,r2,16
  8025ac:	b808d43a 	srli	r4,r23,16
  8025b0:	d8c00217 	ldw	r3,8(sp)
  8025b4:	2084b03a 	or	r2,r4,r2
  8025b8:	1700062e 	bgeu	r2,fp,8025d4 <__divdf3+0x3c0>
  8025bc:	1585883a 	add	r2,r2,r22
  8025c0:	893fffc4 	addi	r4,r17,-1
  8025c4:	15811d36 	bltu	r2,r22,802a3c <__divdf3+0x828>
  8025c8:	17011c2e 	bgeu	r2,fp,802a3c <__divdf3+0x828>
  8025cc:	8c7fff84 	addi	r17,r17,-2
  8025d0:	1585883a 	add	r2,r2,r22
  8025d4:	1739c83a 	sub	fp,r2,fp
  8025d8:	a00b883a 	mov	r5,r20
  8025dc:	e009883a 	mov	r4,fp
  8025e0:	d8c00215 	stw	r3,8(sp)
  8025e4:	08018840 	call	801884 <__udivsi3>
  8025e8:	100b883a 	mov	r5,r2
  8025ec:	9009883a 	mov	r4,r18
  8025f0:	1021883a 	mov	r16,r2
  8025f4:	08019400 	call	801940 <__mulsi3>
  8025f8:	a00b883a 	mov	r5,r20
  8025fc:	e009883a 	mov	r4,fp
  802600:	d8800415 	stw	r2,16(sp)
  802604:	08018e80 	call	8018e8 <__umodsi3>
  802608:	1004943a 	slli	r2,r2,16
  80260c:	da000417 	ldw	r8,16(sp)
  802610:	bdffffcc 	andi	r23,r23,65535
  802614:	b884b03a 	or	r2,r23,r2
  802618:	d8c00217 	ldw	r3,8(sp)
  80261c:	1200062e 	bgeu	r2,r8,802638 <__divdf3+0x424>
  802620:	1585883a 	add	r2,r2,r22
  802624:	813fffc4 	addi	r4,r16,-1
  802628:	15810236 	bltu	r2,r22,802a34 <__divdf3+0x820>
  80262c:	1201012e 	bgeu	r2,r8,802a34 <__divdf3+0x820>
  802630:	843fff84 	addi	r16,r16,-2
  802634:	1585883a 	add	r2,r2,r22
  802638:	8822943a 	slli	r17,r17,16
  80263c:	d9800017 	ldw	r6,0(sp)
  802640:	1211c83a 	sub	r8,r2,r8
  802644:	8c22b03a 	or	r17,r17,r16
  802648:	373fffcc 	andi	fp,r6,65535
  80264c:	8abfffcc 	andi	r10,r17,65535
  802650:	8820d43a 	srli	r16,r17,16
  802654:	5009883a 	mov	r4,r10
  802658:	e00b883a 	mov	r5,fp
  80265c:	302ed43a 	srli	r23,r6,16
  802660:	d8c00215 	stw	r3,8(sp)
  802664:	da000415 	stw	r8,16(sp)
  802668:	da800115 	stw	r10,4(sp)
  80266c:	08019400 	call	801940 <__mulsi3>
  802670:	800b883a 	mov	r5,r16
  802674:	e009883a 	mov	r4,fp
  802678:	d8800515 	stw	r2,20(sp)
  80267c:	08019400 	call	801940 <__mulsi3>
  802680:	8009883a 	mov	r4,r16
  802684:	b80b883a 	mov	r5,r23
  802688:	d8800315 	stw	r2,12(sp)
  80268c:	08019400 	call	801940 <__mulsi3>
  802690:	da800117 	ldw	r10,4(sp)
  802694:	b80b883a 	mov	r5,r23
  802698:	1021883a 	mov	r16,r2
  80269c:	5009883a 	mov	r4,r10
  8026a0:	08019400 	call	801940 <__mulsi3>
  8026a4:	d9c00517 	ldw	r7,20(sp)
  8026a8:	da400317 	ldw	r9,12(sp)
  8026ac:	d8c00217 	ldw	r3,8(sp)
  8026b0:	3808d43a 	srli	r4,r7,16
  8026b4:	1245883a 	add	r2,r2,r9
  8026b8:	da000417 	ldw	r8,16(sp)
  8026bc:	2085883a 	add	r2,r4,r2
  8026c0:	1240022e 	bgeu	r2,r9,8026cc <__divdf3+0x4b8>
  8026c4:	01000074 	movhi	r4,1
  8026c8:	8121883a 	add	r16,r16,r4
  8026cc:	1008d43a 	srli	r4,r2,16
  8026d0:	1004943a 	slli	r2,r2,16
  8026d4:	39ffffcc 	andi	r7,r7,65535
  8026d8:	2409883a 	add	r4,r4,r16
  8026dc:	11c5883a 	add	r2,r2,r7
  8026e0:	4100bb36 	bltu	r8,r4,8029d0 <__divdf3+0x7bc>
  8026e4:	4100d726 	beq	r8,r4,802a44 <__divdf3+0x830>
  8026e8:	4109c83a 	sub	r4,r8,r4
  8026ec:	a8a1c83a 	sub	r16,r21,r2
  8026f0:	ac2b803a 	cmpltu	r21,r21,r16
  8026f4:	256bc83a 	sub	r21,r4,r21
  8026f8:	b540d926 	beq	r22,r21,802a60 <__divdf3+0x84c>
  8026fc:	a00b883a 	mov	r5,r20
  802700:	a809883a 	mov	r4,r21
  802704:	d8c00215 	stw	r3,8(sp)
  802708:	08018840 	call	801884 <__udivsi3>
  80270c:	100b883a 	mov	r5,r2
  802710:	9009883a 	mov	r4,r18
  802714:	d8800515 	stw	r2,20(sp)
  802718:	08019400 	call	801940 <__mulsi3>
  80271c:	a809883a 	mov	r4,r21
  802720:	a00b883a 	mov	r5,r20
  802724:	d8800415 	stw	r2,16(sp)
  802728:	08018e80 	call	8018e8 <__umodsi3>
  80272c:	1004943a 	slli	r2,r2,16
  802730:	8008d43a 	srli	r4,r16,16
  802734:	da000417 	ldw	r8,16(sp)
  802738:	d8c00217 	ldw	r3,8(sp)
  80273c:	2084b03a 	or	r2,r4,r2
  802740:	d9c00517 	ldw	r7,20(sp)
  802744:	1200062e 	bgeu	r2,r8,802760 <__divdf3+0x54c>
  802748:	1585883a 	add	r2,r2,r22
  80274c:	393fffc4 	addi	r4,r7,-1
  802750:	1580c536 	bltu	r2,r22,802a68 <__divdf3+0x854>
  802754:	1200c42e 	bgeu	r2,r8,802a68 <__divdf3+0x854>
  802758:	39ffff84 	addi	r7,r7,-2
  80275c:	1585883a 	add	r2,r2,r22
  802760:	122bc83a 	sub	r21,r2,r8
  802764:	a00b883a 	mov	r5,r20
  802768:	a809883a 	mov	r4,r21
  80276c:	d8c00215 	stw	r3,8(sp)
  802770:	d9c00515 	stw	r7,20(sp)
  802774:	08018840 	call	801884 <__udivsi3>
  802778:	9009883a 	mov	r4,r18
  80277c:	100b883a 	mov	r5,r2
  802780:	d8800415 	stw	r2,16(sp)
  802784:	08019400 	call	801940 <__mulsi3>
  802788:	a809883a 	mov	r4,r21
  80278c:	a00b883a 	mov	r5,r20
  802790:	1025883a 	mov	r18,r2
  802794:	08018e80 	call	8018e8 <__umodsi3>
  802798:	1004943a 	slli	r2,r2,16
  80279c:	813fffcc 	andi	r4,r16,65535
  8027a0:	d8c00217 	ldw	r3,8(sp)
  8027a4:	20a0b03a 	or	r16,r4,r2
  8027a8:	d9c00517 	ldw	r7,20(sp)
  8027ac:	da000417 	ldw	r8,16(sp)
  8027b0:	8480062e 	bgeu	r16,r18,8027cc <__divdf3+0x5b8>
  8027b4:	85a1883a 	add	r16,r16,r22
  8027b8:	40bfffc4 	addi	r2,r8,-1
  8027bc:	8580ac36 	bltu	r16,r22,802a70 <__divdf3+0x85c>
  8027c0:	8480ab2e 	bgeu	r16,r18,802a70 <__divdf3+0x85c>
  8027c4:	423fff84 	addi	r8,r8,-2
  8027c8:	85a1883a 	add	r16,r16,r22
  8027cc:	3804943a 	slli	r2,r7,16
  8027d0:	84a1c83a 	sub	r16,r16,r18
  8027d4:	e009883a 	mov	r4,fp
  8027d8:	1228b03a 	or	r20,r2,r8
  8027dc:	a1ffffcc 	andi	r7,r20,65535
  8027e0:	a024d43a 	srli	r18,r20,16
  8027e4:	380b883a 	mov	r5,r7
  8027e8:	d8c00215 	stw	r3,8(sp)
  8027ec:	d9c00515 	stw	r7,20(sp)
  8027f0:	08019400 	call	801940 <__mulsi3>
  8027f4:	900b883a 	mov	r5,r18
  8027f8:	e009883a 	mov	r4,fp
  8027fc:	102b883a 	mov	r21,r2
  802800:	08019400 	call	801940 <__mulsi3>
  802804:	900b883a 	mov	r5,r18
  802808:	b809883a 	mov	r4,r23
  80280c:	1039883a 	mov	fp,r2
  802810:	08019400 	call	801940 <__mulsi3>
  802814:	d9c00517 	ldw	r7,20(sp)
  802818:	b80b883a 	mov	r5,r23
  80281c:	1025883a 	mov	r18,r2
  802820:	3809883a 	mov	r4,r7
  802824:	08019400 	call	801940 <__mulsi3>
  802828:	a808d43a 	srli	r4,r21,16
  80282c:	1705883a 	add	r2,r2,fp
  802830:	d8c00217 	ldw	r3,8(sp)
  802834:	2085883a 	add	r2,r4,r2
  802838:	1700022e 	bgeu	r2,fp,802844 <__divdf3+0x630>
  80283c:	01000074 	movhi	r4,1
  802840:	9125883a 	add	r18,r18,r4
  802844:	1008d43a 	srli	r4,r2,16
  802848:	1004943a 	slli	r2,r2,16
  80284c:	ad7fffcc 	andi	r21,r21,65535
  802850:	2489883a 	add	r4,r4,r18
  802854:	1545883a 	add	r2,r2,r21
  802858:	81003836 	bltu	r16,r4,80293c <__divdf3+0x728>
  80285c:	81003626 	beq	r16,r4,802938 <__divdf3+0x724>
  802860:	a5000054 	ori	r20,r20,1
  802864:	1880ffc4 	addi	r2,r3,1023
  802868:	00bf2e0e 	bge	zero,r2,802524 <__alt_data_end+0xff802524>
  80286c:	a10001cc 	andi	r4,r20,7
  802870:	20000726 	beq	r4,zero,802890 <__divdf3+0x67c>
  802874:	a10003cc 	andi	r4,r20,15
  802878:	01400104 	movi	r5,4
  80287c:	21400426 	beq	r4,r5,802890 <__divdf3+0x67c>
  802880:	a149883a 	add	r4,r20,r5
  802884:	2529803a 	cmpltu	r20,r4,r20
  802888:	8d23883a 	add	r17,r17,r20
  80288c:	2029883a 	mov	r20,r4
  802890:	8900402c 	andhi	r4,r17,256
  802894:	20000426 	beq	r4,zero,8028a8 <__divdf3+0x694>
  802898:	18810004 	addi	r2,r3,1024
  80289c:	00ffc034 	movhi	r3,65280
  8028a0:	18ffffc4 	addi	r3,r3,-1
  8028a4:	88e2703a 	and	r17,r17,r3
  8028a8:	00c1ff84 	movi	r3,2046
  8028ac:	18beb416 	blt	r3,r2,802380 <__alt_data_end+0xff802380>
  8028b0:	a028d0fa 	srli	r20,r20,3
  8028b4:	882a977a 	slli	r21,r17,29
  8028b8:	8820927a 	slli	r16,r17,9
  8028bc:	1081ffcc 	andi	r2,r2,2047
  8028c0:	ad2ab03a 	or	r21,r21,r20
  8028c4:	8020d33a 	srli	r16,r16,12
  8028c8:	9900004c 	andi	r4,r19,1
  8028cc:	003eb006 	br	802390 <__alt_data_end+0xff802390>
  8028d0:	8080022c 	andhi	r2,r16,8
  8028d4:	10001226 	beq	r2,zero,802920 <__divdf3+0x70c>
  8028d8:	8880022c 	andhi	r2,r17,8
  8028dc:	1000101e 	bne	r2,zero,802920 <__divdf3+0x70c>
  8028e0:	00800434 	movhi	r2,16
  8028e4:	8c000234 	orhi	r16,r17,8
  8028e8:	10bfffc4 	addi	r2,r2,-1
  8028ec:	b809883a 	mov	r4,r23
  8028f0:	80a0703a 	and	r16,r16,r2
  8028f4:	a02b883a 	mov	r21,r20
  8028f8:	003f0806 	br	80251c <__alt_data_end+0xff80251c>
  8028fc:	008000c4 	movi	r2,3
  802900:	3880b126 	beq	r7,r2,802bc8 <__divdf3+0x9b4>
  802904:	00800044 	movi	r2,1
  802908:	38805b1e 	bne	r7,r2,802a78 <__divdf3+0x864>
  80290c:	e009883a 	mov	r4,fp
  802910:	0005883a 	mov	r2,zero
  802914:	0021883a 	mov	r16,zero
  802918:	002b883a 	mov	r21,zero
  80291c:	003e9c06 	br	802390 <__alt_data_end+0xff802390>
  802920:	00800434 	movhi	r2,16
  802924:	84000234 	orhi	r16,r16,8
  802928:	10bfffc4 	addi	r2,r2,-1
  80292c:	b009883a 	mov	r4,r22
  802930:	80a0703a 	and	r16,r16,r2
  802934:	003ef906 	br	80251c <__alt_data_end+0xff80251c>
  802938:	103fca26 	beq	r2,zero,802864 <__alt_data_end+0xff802864>
  80293c:	b421883a 	add	r16,r22,r16
  802940:	a17fffc4 	addi	r5,r20,-1
  802944:	8580422e 	bgeu	r16,r22,802a50 <__divdf3+0x83c>
  802948:	2829883a 	mov	r20,r5
  80294c:	813fc41e 	bne	r16,r4,802860 <__alt_data_end+0xff802860>
  802950:	d9800017 	ldw	r6,0(sp)
  802954:	30bfc21e 	bne	r6,r2,802860 <__alt_data_end+0xff802860>
  802958:	003fc206 	br	802864 <__alt_data_end+0xff802864>
  80295c:	143ff604 	addi	r16,r2,-40
  802960:	8c20983a 	sll	r16,r17,r16
  802964:	002b883a 	mov	r21,zero
  802968:	003eb406 	br	80243c <__alt_data_end+0xff80243c>
  80296c:	d9800215 	stw	r6,8(sp)
  802970:	d9c00515 	stw	r7,20(sp)
  802974:	da000415 	stw	r8,16(sp)
  802978:	08034d00 	call	8034d0 <__clzsi2>
  80297c:	10800804 	addi	r2,r2,32
  802980:	da000417 	ldw	r8,16(sp)
  802984:	d9c00517 	ldw	r7,20(sp)
  802988:	d9800217 	ldw	r6,8(sp)
  80298c:	003ea106 	br	802414 <__alt_data_end+0xff802414>
  802990:	147ff604 	addi	r17,r2,-40
  802994:	3462983a 	sll	r17,r6,r17
  802998:	0029883a 	mov	r20,zero
  80299c:	003ec906 	br	8024c4 <__alt_data_end+0xff8024c4>
  8029a0:	3009883a 	mov	r4,r6
  8029a4:	d9400115 	stw	r5,4(sp)
  8029a8:	d9800215 	stw	r6,8(sp)
  8029ac:	da000415 	stw	r8,16(sp)
  8029b0:	da400315 	stw	r9,12(sp)
  8029b4:	08034d00 	call	8034d0 <__clzsi2>
  8029b8:	10800804 	addi	r2,r2,32
  8029bc:	da400317 	ldw	r9,12(sp)
  8029c0:	da000417 	ldw	r8,16(sp)
  8029c4:	d9800217 	ldw	r6,8(sp)
  8029c8:	d9400117 	ldw	r5,4(sp)
  8029cc:	003eb306 	br	80249c <__alt_data_end+0xff80249c>
  8029d0:	d9800017 	ldw	r6,0(sp)
  8029d4:	a9ab883a 	add	r21,r21,r6
  8029d8:	a98b803a 	cmpltu	r5,r21,r6
  8029dc:	2d8b883a 	add	r5,r5,r22
  8029e0:	2a11883a 	add	r8,r5,r8
  8029e4:	897fffc4 	addi	r5,r17,-1
  8029e8:	b2000c2e 	bgeu	r22,r8,802a1c <__divdf3+0x808>
  8029ec:	41003f36 	bltu	r8,r4,802aec <__divdf3+0x8d8>
  8029f0:	22006c26 	beq	r4,r8,802ba4 <__divdf3+0x990>
  8029f4:	4109c83a 	sub	r4,r8,r4
  8029f8:	2823883a 	mov	r17,r5
  8029fc:	003f3b06 	br	8026ec <__alt_data_end+0xff8026ec>
  802a00:	ad3ed336 	bltu	r21,r20,802550 <__alt_data_end+0xff802550>
  802a04:	a804d07a 	srli	r2,r21,1
  802a08:	802e97fa 	slli	r23,r16,31
  802a0c:	a82a97fa 	slli	r21,r21,31
  802a10:	8020d07a 	srli	r16,r16,1
  802a14:	b8aeb03a 	or	r23,r23,r2
  802a18:	003ed006 	br	80255c <__alt_data_end+0xff80255c>
  802a1c:	b23ff51e 	bne	r22,r8,8029f4 <__alt_data_end+0xff8029f4>
  802a20:	d9800017 	ldw	r6,0(sp)
  802a24:	a9bff12e 	bgeu	r21,r6,8029ec <__alt_data_end+0xff8029ec>
  802a28:	b109c83a 	sub	r4,r22,r4
  802a2c:	2823883a 	mov	r17,r5
  802a30:	003f2e06 	br	8026ec <__alt_data_end+0xff8026ec>
  802a34:	2021883a 	mov	r16,r4
  802a38:	003eff06 	br	802638 <__alt_data_end+0xff802638>
  802a3c:	2023883a 	mov	r17,r4
  802a40:	003ee406 	br	8025d4 <__alt_data_end+0xff8025d4>
  802a44:	a8bfe236 	bltu	r21,r2,8029d0 <__alt_data_end+0xff8029d0>
  802a48:	0009883a 	mov	r4,zero
  802a4c:	003f2706 	br	8026ec <__alt_data_end+0xff8026ec>
  802a50:	81002d36 	bltu	r16,r4,802b08 <__divdf3+0x8f4>
  802a54:	24005626 	beq	r4,r16,802bb0 <__divdf3+0x99c>
  802a58:	2829883a 	mov	r20,r5
  802a5c:	003f8006 	br	802860 <__alt_data_end+0xff802860>
  802a60:	053fffc4 	movi	r20,-1
  802a64:	003f7f06 	br	802864 <__alt_data_end+0xff802864>
  802a68:	200f883a 	mov	r7,r4
  802a6c:	003f3c06 	br	802760 <__alt_data_end+0xff802760>
  802a70:	1011883a 	mov	r8,r2
  802a74:	003f5506 	br	8027cc <__alt_data_end+0xff8027cc>
  802a78:	e027883a 	mov	r19,fp
  802a7c:	003f7906 	br	802864 <__alt_data_end+0xff802864>
  802a80:	010007c4 	movi	r4,31
  802a84:	20c02816 	blt	r4,r3,802b28 <__divdf3+0x914>
  802a88:	00800804 	movi	r2,32
  802a8c:	10c5c83a 	sub	r2,r2,r3
  802a90:	888a983a 	sll	r5,r17,r2
  802a94:	a0c8d83a 	srl	r4,r20,r3
  802a98:	a084983a 	sll	r2,r20,r2
  802a9c:	88e2d83a 	srl	r17,r17,r3
  802aa0:	2906b03a 	or	r3,r5,r4
  802aa4:	1004c03a 	cmpne	r2,r2,zero
  802aa8:	1886b03a 	or	r3,r3,r2
  802aac:	188001cc 	andi	r2,r3,7
  802ab0:	10000726 	beq	r2,zero,802ad0 <__divdf3+0x8bc>
  802ab4:	188003cc 	andi	r2,r3,15
  802ab8:	01000104 	movi	r4,4
  802abc:	11000426 	beq	r2,r4,802ad0 <__divdf3+0x8bc>
  802ac0:	1805883a 	mov	r2,r3
  802ac4:	10c00104 	addi	r3,r2,4
  802ac8:	1885803a 	cmpltu	r2,r3,r2
  802acc:	88a3883a 	add	r17,r17,r2
  802ad0:	8880202c 	andhi	r2,r17,128
  802ad4:	10002926 	beq	r2,zero,802b7c <__divdf3+0x968>
  802ad8:	9900004c 	andi	r4,r19,1
  802adc:	00800044 	movi	r2,1
  802ae0:	0021883a 	mov	r16,zero
  802ae4:	002b883a 	mov	r21,zero
  802ae8:	003e2906 	br	802390 <__alt_data_end+0xff802390>
  802aec:	d9800017 	ldw	r6,0(sp)
  802af0:	8c7fff84 	addi	r17,r17,-2
  802af4:	a9ab883a 	add	r21,r21,r6
  802af8:	a98b803a 	cmpltu	r5,r21,r6
  802afc:	2d8b883a 	add	r5,r5,r22
  802b00:	2a11883a 	add	r8,r5,r8
  802b04:	003ef806 	br	8026e8 <__alt_data_end+0xff8026e8>
  802b08:	d9800017 	ldw	r6,0(sp)
  802b0c:	318f883a 	add	r7,r6,r6
  802b10:	398b803a 	cmpltu	r5,r7,r6
  802b14:	2d8d883a 	add	r6,r5,r22
  802b18:	81a1883a 	add	r16,r16,r6
  802b1c:	a17fff84 	addi	r5,r20,-2
  802b20:	d9c00015 	stw	r7,0(sp)
  802b24:	003f8806 	br	802948 <__alt_data_end+0xff802948>
  802b28:	013ff844 	movi	r4,-31
  802b2c:	2085c83a 	sub	r2,r4,r2
  802b30:	8888d83a 	srl	r4,r17,r2
  802b34:	00800804 	movi	r2,32
  802b38:	18802126 	beq	r3,r2,802bc0 <__divdf3+0x9ac>
  802b3c:	04001004 	movi	r16,64
  802b40:	80c7c83a 	sub	r3,r16,r3
  802b44:	88e0983a 	sll	r16,r17,r3
  802b48:	8504b03a 	or	r2,r16,r20
  802b4c:	1004c03a 	cmpne	r2,r2,zero
  802b50:	2084b03a 	or	r2,r4,r2
  802b54:	144001cc 	andi	r17,r2,7
  802b58:	88000d1e 	bne	r17,zero,802b90 <__divdf3+0x97c>
  802b5c:	0021883a 	mov	r16,zero
  802b60:	102ad0fa 	srli	r21,r2,3
  802b64:	9900004c 	andi	r4,r19,1
  802b68:	0005883a 	mov	r2,zero
  802b6c:	ac6ab03a 	or	r21,r21,r17
  802b70:	003e0706 	br	802390 <__alt_data_end+0xff802390>
  802b74:	1007883a 	mov	r3,r2
  802b78:	0023883a 	mov	r17,zero
  802b7c:	8820927a 	slli	r16,r17,9
  802b80:	1805883a 	mov	r2,r3
  802b84:	8822977a 	slli	r17,r17,29
  802b88:	8020d33a 	srli	r16,r16,12
  802b8c:	003ff406 	br	802b60 <__alt_data_end+0xff802b60>
  802b90:	10c003cc 	andi	r3,r2,15
  802b94:	01000104 	movi	r4,4
  802b98:	193ff626 	beq	r3,r4,802b74 <__alt_data_end+0xff802b74>
  802b9c:	0023883a 	mov	r17,zero
  802ba0:	003fc806 	br	802ac4 <__alt_data_end+0xff802ac4>
  802ba4:	a8bfd136 	bltu	r21,r2,802aec <__alt_data_end+0xff802aec>
  802ba8:	2823883a 	mov	r17,r5
  802bac:	003fa606 	br	802a48 <__alt_data_end+0xff802a48>
  802bb0:	d9800017 	ldw	r6,0(sp)
  802bb4:	30bfd436 	bltu	r6,r2,802b08 <__alt_data_end+0xff802b08>
  802bb8:	2829883a 	mov	r20,r5
  802bbc:	003f6406 	br	802950 <__alt_data_end+0xff802950>
  802bc0:	0021883a 	mov	r16,zero
  802bc4:	003fe006 	br	802b48 <__alt_data_end+0xff802b48>
  802bc8:	00800434 	movhi	r2,16
  802bcc:	8c000234 	orhi	r16,r17,8
  802bd0:	10bfffc4 	addi	r2,r2,-1
  802bd4:	e009883a 	mov	r4,fp
  802bd8:	80a0703a 	and	r16,r16,r2
  802bdc:	a02b883a 	mov	r21,r20
  802be0:	003e4e06 	br	80251c <__alt_data_end+0xff80251c>

00802be4 <__muldf3>:
  802be4:	deffee04 	addi	sp,sp,-72
  802be8:	dd000c15 	stw	r20,48(sp)
  802bec:	2828d53a 	srli	r20,r5,20
  802bf0:	ddc00f15 	stw	r23,60(sp)
  802bf4:	282ed7fa 	srli	r23,r5,31
  802bf8:	dc000815 	stw	r16,32(sp)
  802bfc:	04000434 	movhi	r16,16
  802c00:	dcc00b15 	stw	r19,44(sp)
  802c04:	843fffc4 	addi	r16,r16,-1
  802c08:	dfc01115 	stw	ra,68(sp)
  802c0c:	df001015 	stw	fp,64(sp)
  802c10:	dd800e15 	stw	r22,56(sp)
  802c14:	dd400d15 	stw	r21,52(sp)
  802c18:	dc800a15 	stw	r18,40(sp)
  802c1c:	dc400915 	stw	r17,36(sp)
  802c20:	a501ffcc 	andi	r20,r20,2047
  802c24:	2c20703a 	and	r16,r5,r16
  802c28:	b827883a 	mov	r19,r23
  802c2c:	ba403fcc 	andi	r9,r23,255
  802c30:	a0006026 	beq	r20,zero,802db4 <__muldf3+0x1d0>
  802c34:	0081ffc4 	movi	r2,2047
  802c38:	202d883a 	mov	r22,r4
  802c3c:	a0803626 	beq	r20,r2,802d18 <__muldf3+0x134>
  802c40:	84000434 	orhi	r16,r16,16
  802c44:	200ad77a 	srli	r5,r4,29
  802c48:	800490fa 	slli	r2,r16,3
  802c4c:	202c90fa 	slli	r22,r4,3
  802c50:	a53f0044 	addi	r20,r20,-1023
  802c54:	28a0b03a 	or	r16,r5,r2
  802c58:	002b883a 	mov	r21,zero
  802c5c:	000b883a 	mov	r5,zero
  802c60:	3804d53a 	srli	r2,r7,20
  802c64:	3838d7fa 	srli	fp,r7,31
  802c68:	04400434 	movhi	r17,16
  802c6c:	8c7fffc4 	addi	r17,r17,-1
  802c70:	1081ffcc 	andi	r2,r2,2047
  802c74:	3025883a 	mov	r18,r6
  802c78:	3c62703a 	and	r17,r7,r17
  802c7c:	e2803fcc 	andi	r10,fp,255
  802c80:	10006d26 	beq	r2,zero,802e38 <__muldf3+0x254>
  802c84:	00c1ffc4 	movi	r3,2047
  802c88:	10c06526 	beq	r2,r3,802e20 <__muldf3+0x23c>
  802c8c:	8c400434 	orhi	r17,r17,16
  802c90:	300ed77a 	srli	r7,r6,29
  802c94:	880690fa 	slli	r3,r17,3
  802c98:	302490fa 	slli	r18,r6,3
  802c9c:	10bf0044 	addi	r2,r2,-1023
  802ca0:	38e2b03a 	or	r17,r7,r3
  802ca4:	000f883a 	mov	r7,zero
  802ca8:	a087883a 	add	r3,r20,r2
  802cac:	010003c4 	movi	r4,15
  802cb0:	3d44b03a 	or	r2,r7,r21
  802cb4:	e5ccf03a 	xor	r6,fp,r23
  802cb8:	1a000044 	addi	r8,r3,1
  802cbc:	20809b36 	bltu	r4,r2,802f2c <__muldf3+0x348>
  802cc0:	100490ba 	slli	r2,r2,2
  802cc4:	01002034 	movhi	r4,128
  802cc8:	210b3604 	addi	r4,r4,11480
  802ccc:	1105883a 	add	r2,r2,r4
  802cd0:	10800017 	ldw	r2,0(r2)
  802cd4:	1000683a 	jmp	r2
  802cd8:	00802f2c 	andhi	r2,zero,188
  802cdc:	00802d38 	rdprs	r2,zero,180
  802ce0:	00802d38 	rdprs	r2,zero,180
  802ce4:	00802d34 	movhi	r2,180
  802ce8:	00802f08 	cmpgei	r2,zero,188
  802cec:	00802f08 	cmpgei	r2,zero,188
  802cf0:	00802ef0 	cmpltui	r2,zero,187
  802cf4:	00802d34 	movhi	r2,180
  802cf8:	00802f08 	cmpgei	r2,zero,188
  802cfc:	00802ef0 	cmpltui	r2,zero,187
  802d00:	00802f08 	cmpgei	r2,zero,188
  802d04:	00802d34 	movhi	r2,180
  802d08:	00802f18 	cmpnei	r2,zero,188
  802d0c:	00802f18 	cmpnei	r2,zero,188
  802d10:	00802f18 	cmpnei	r2,zero,188
  802d14:	00803278 	rdprs	r2,zero,201
  802d18:	2404b03a 	or	r2,r4,r16
  802d1c:	1000711e 	bne	r2,zero,802ee4 <__muldf3+0x300>
  802d20:	05400204 	movi	r21,8
  802d24:	0021883a 	mov	r16,zero
  802d28:	002d883a 	mov	r22,zero
  802d2c:	01400084 	movi	r5,2
  802d30:	003fcb06 	br	802c60 <__alt_data_end+0xff802c60>
  802d34:	500d883a 	mov	r6,r10
  802d38:	00800084 	movi	r2,2
  802d3c:	38805926 	beq	r7,r2,802ea4 <__muldf3+0x2c0>
  802d40:	008000c4 	movi	r2,3
  802d44:	3881bb26 	beq	r7,r2,803434 <__muldf3+0x850>
  802d48:	00800044 	movi	r2,1
  802d4c:	3881961e 	bne	r7,r2,8033a8 <__muldf3+0x7c4>
  802d50:	3027883a 	mov	r19,r6
  802d54:	0005883a 	mov	r2,zero
  802d58:	0021883a 	mov	r16,zero
  802d5c:	002d883a 	mov	r22,zero
  802d60:	1004953a 	slli	r2,r2,20
  802d64:	98c03fcc 	andi	r3,r19,255
  802d68:	04400434 	movhi	r17,16
  802d6c:	8c7fffc4 	addi	r17,r17,-1
  802d70:	180697fa 	slli	r3,r3,31
  802d74:	8460703a 	and	r16,r16,r17
  802d78:	80a0b03a 	or	r16,r16,r2
  802d7c:	80c6b03a 	or	r3,r16,r3
  802d80:	b005883a 	mov	r2,r22
  802d84:	dfc01117 	ldw	ra,68(sp)
  802d88:	df001017 	ldw	fp,64(sp)
  802d8c:	ddc00f17 	ldw	r23,60(sp)
  802d90:	dd800e17 	ldw	r22,56(sp)
  802d94:	dd400d17 	ldw	r21,52(sp)
  802d98:	dd000c17 	ldw	r20,48(sp)
  802d9c:	dcc00b17 	ldw	r19,44(sp)
  802da0:	dc800a17 	ldw	r18,40(sp)
  802da4:	dc400917 	ldw	r17,36(sp)
  802da8:	dc000817 	ldw	r16,32(sp)
  802dac:	dec01204 	addi	sp,sp,72
  802db0:	f800283a 	ret
  802db4:	2404b03a 	or	r2,r4,r16
  802db8:	202b883a 	mov	r21,r4
  802dbc:	10004426 	beq	r2,zero,802ed0 <__muldf3+0x2ec>
  802dc0:	80015126 	beq	r16,zero,803308 <__muldf3+0x724>
  802dc4:	8009883a 	mov	r4,r16
  802dc8:	d9800715 	stw	r6,28(sp)
  802dcc:	d9c00215 	stw	r7,8(sp)
  802dd0:	da400415 	stw	r9,16(sp)
  802dd4:	08034d00 	call	8034d0 <__clzsi2>
  802dd8:	d9800717 	ldw	r6,28(sp)
  802ddc:	d9c00217 	ldw	r7,8(sp)
  802de0:	da400417 	ldw	r9,16(sp)
  802de4:	113ffd44 	addi	r4,r2,-11
  802de8:	00c00704 	movi	r3,28
  802dec:	19014216 	blt	r3,r4,8032f8 <__muldf3+0x714>
  802df0:	00c00744 	movi	r3,29
  802df4:	15bffe04 	addi	r22,r2,-8
  802df8:	1907c83a 	sub	r3,r3,r4
  802dfc:	85a0983a 	sll	r16,r16,r22
  802e00:	a8c6d83a 	srl	r3,r21,r3
  802e04:	adac983a 	sll	r22,r21,r22
  802e08:	1c20b03a 	or	r16,r3,r16
  802e0c:	1080fcc4 	addi	r2,r2,1011
  802e10:	00a9c83a 	sub	r20,zero,r2
  802e14:	002b883a 	mov	r21,zero
  802e18:	000b883a 	mov	r5,zero
  802e1c:	003f9006 	br	802c60 <__alt_data_end+0xff802c60>
  802e20:	3446b03a 	or	r3,r6,r17
  802e24:	1800281e 	bne	r3,zero,802ec8 <__muldf3+0x2e4>
  802e28:	0023883a 	mov	r17,zero
  802e2c:	0025883a 	mov	r18,zero
  802e30:	01c00084 	movi	r7,2
  802e34:	003f9c06 	br	802ca8 <__alt_data_end+0xff802ca8>
  802e38:	3446b03a 	or	r3,r6,r17
  802e3c:	18001e26 	beq	r3,zero,802eb8 <__muldf3+0x2d4>
  802e40:	88012126 	beq	r17,zero,8032c8 <__muldf3+0x6e4>
  802e44:	8809883a 	mov	r4,r17
  802e48:	d9400215 	stw	r5,8(sp)
  802e4c:	d9800715 	stw	r6,28(sp)
  802e50:	da400415 	stw	r9,16(sp)
  802e54:	da800315 	stw	r10,12(sp)
  802e58:	08034d00 	call	8034d0 <__clzsi2>
  802e5c:	d9400217 	ldw	r5,8(sp)
  802e60:	d9800717 	ldw	r6,28(sp)
  802e64:	da400417 	ldw	r9,16(sp)
  802e68:	da800317 	ldw	r10,12(sp)
  802e6c:	113ffd44 	addi	r4,r2,-11
  802e70:	00c00704 	movi	r3,28
  802e74:	19011016 	blt	r3,r4,8032b8 <__muldf3+0x6d4>
  802e78:	00c00744 	movi	r3,29
  802e7c:	14bffe04 	addi	r18,r2,-8
  802e80:	1907c83a 	sub	r3,r3,r4
  802e84:	8ca2983a 	sll	r17,r17,r18
  802e88:	30c6d83a 	srl	r3,r6,r3
  802e8c:	34a4983a 	sll	r18,r6,r18
  802e90:	1c62b03a 	or	r17,r3,r17
  802e94:	1080fcc4 	addi	r2,r2,1011
  802e98:	0085c83a 	sub	r2,zero,r2
  802e9c:	000f883a 	mov	r7,zero
  802ea0:	003f8106 	br	802ca8 <__alt_data_end+0xff802ca8>
  802ea4:	3027883a 	mov	r19,r6
  802ea8:	0081ffc4 	movi	r2,2047
  802eac:	0021883a 	mov	r16,zero
  802eb0:	002d883a 	mov	r22,zero
  802eb4:	003faa06 	br	802d60 <__alt_data_end+0xff802d60>
  802eb8:	0023883a 	mov	r17,zero
  802ebc:	0025883a 	mov	r18,zero
  802ec0:	01c00044 	movi	r7,1
  802ec4:	003f7806 	br	802ca8 <__alt_data_end+0xff802ca8>
  802ec8:	01c000c4 	movi	r7,3
  802ecc:	003f7606 	br	802ca8 <__alt_data_end+0xff802ca8>
  802ed0:	05400104 	movi	r21,4
  802ed4:	0021883a 	mov	r16,zero
  802ed8:	002d883a 	mov	r22,zero
  802edc:	01400044 	movi	r5,1
  802ee0:	003f5f06 	br	802c60 <__alt_data_end+0xff802c60>
  802ee4:	05400304 	movi	r21,12
  802ee8:	014000c4 	movi	r5,3
  802eec:	003f5c06 	br	802c60 <__alt_data_end+0xff802c60>
  802ef0:	04000434 	movhi	r16,16
  802ef4:	0027883a 	mov	r19,zero
  802ef8:	843fffc4 	addi	r16,r16,-1
  802efc:	05bfffc4 	movi	r22,-1
  802f00:	0081ffc4 	movi	r2,2047
  802f04:	003f9606 	br	802d60 <__alt_data_end+0xff802d60>
  802f08:	8023883a 	mov	r17,r16
  802f0c:	b025883a 	mov	r18,r22
  802f10:	280f883a 	mov	r7,r5
  802f14:	003f8806 	br	802d38 <__alt_data_end+0xff802d38>
  802f18:	8023883a 	mov	r17,r16
  802f1c:	b025883a 	mov	r18,r22
  802f20:	480d883a 	mov	r6,r9
  802f24:	280f883a 	mov	r7,r5
  802f28:	003f8306 	br	802d38 <__alt_data_end+0xff802d38>
  802f2c:	b026d43a 	srli	r19,r22,16
  802f30:	902ed43a 	srli	r23,r18,16
  802f34:	b5bfffcc 	andi	r22,r22,65535
  802f38:	94bfffcc 	andi	r18,r18,65535
  802f3c:	b00b883a 	mov	r5,r22
  802f40:	9009883a 	mov	r4,r18
  802f44:	d8c00515 	stw	r3,20(sp)
  802f48:	d9800715 	stw	r6,28(sp)
  802f4c:	da000615 	stw	r8,24(sp)
  802f50:	08019400 	call	801940 <__mulsi3>
  802f54:	980b883a 	mov	r5,r19
  802f58:	9009883a 	mov	r4,r18
  802f5c:	1029883a 	mov	r20,r2
  802f60:	08019400 	call	801940 <__mulsi3>
  802f64:	b80b883a 	mov	r5,r23
  802f68:	9809883a 	mov	r4,r19
  802f6c:	102b883a 	mov	r21,r2
  802f70:	08019400 	call	801940 <__mulsi3>
  802f74:	b809883a 	mov	r4,r23
  802f78:	b00b883a 	mov	r5,r22
  802f7c:	1039883a 	mov	fp,r2
  802f80:	08019400 	call	801940 <__mulsi3>
  802f84:	a008d43a 	srli	r4,r20,16
  802f88:	1545883a 	add	r2,r2,r21
  802f8c:	d8c00517 	ldw	r3,20(sp)
  802f90:	2085883a 	add	r2,r4,r2
  802f94:	d9800717 	ldw	r6,28(sp)
  802f98:	da000617 	ldw	r8,24(sp)
  802f9c:	1540022e 	bgeu	r2,r21,802fa8 <__muldf3+0x3c4>
  802fa0:	01000074 	movhi	r4,1
  802fa4:	e139883a 	add	fp,fp,r4
  802fa8:	100e943a 	slli	r7,r2,16
  802fac:	1004d43a 	srli	r2,r2,16
  802fb0:	882ad43a 	srli	r21,r17,16
  802fb4:	a53fffcc 	andi	r20,r20,65535
  802fb8:	8c7fffcc 	andi	r17,r17,65535
  802fbc:	3d29883a 	add	r20,r7,r20
  802fc0:	b00b883a 	mov	r5,r22
  802fc4:	8809883a 	mov	r4,r17
  802fc8:	d8c00515 	stw	r3,20(sp)
  802fcc:	d9800715 	stw	r6,28(sp)
  802fd0:	da000615 	stw	r8,24(sp)
  802fd4:	dd000115 	stw	r20,4(sp)
  802fd8:	d8800015 	stw	r2,0(sp)
  802fdc:	08019400 	call	801940 <__mulsi3>
  802fe0:	980b883a 	mov	r5,r19
  802fe4:	8809883a 	mov	r4,r17
  802fe8:	d8800215 	stw	r2,8(sp)
  802fec:	08019400 	call	801940 <__mulsi3>
  802ff0:	9809883a 	mov	r4,r19
  802ff4:	a80b883a 	mov	r5,r21
  802ff8:	1029883a 	mov	r20,r2
  802ffc:	08019400 	call	801940 <__mulsi3>
  803000:	b00b883a 	mov	r5,r22
  803004:	a809883a 	mov	r4,r21
  803008:	d8800415 	stw	r2,16(sp)
  80300c:	08019400 	call	801940 <__mulsi3>
  803010:	d9c00217 	ldw	r7,8(sp)
  803014:	1505883a 	add	r2,r2,r20
  803018:	d8c00517 	ldw	r3,20(sp)
  80301c:	3826d43a 	srli	r19,r7,16
  803020:	d9800717 	ldw	r6,28(sp)
  803024:	da000617 	ldw	r8,24(sp)
  803028:	9885883a 	add	r2,r19,r2
  80302c:	da400417 	ldw	r9,16(sp)
  803030:	1500022e 	bgeu	r2,r20,80303c <__muldf3+0x458>
  803034:	01000074 	movhi	r4,1
  803038:	4913883a 	add	r9,r9,r4
  80303c:	1028d43a 	srli	r20,r2,16
  803040:	1004943a 	slli	r2,r2,16
  803044:	802cd43a 	srli	r22,r16,16
  803048:	843fffcc 	andi	r16,r16,65535
  80304c:	3cffffcc 	andi	r19,r7,65535
  803050:	9009883a 	mov	r4,r18
  803054:	800b883a 	mov	r5,r16
  803058:	a269883a 	add	r20,r20,r9
  80305c:	d8c00515 	stw	r3,20(sp)
  803060:	d9800715 	stw	r6,28(sp)
  803064:	da000615 	stw	r8,24(sp)
  803068:	14e7883a 	add	r19,r2,r19
  80306c:	08019400 	call	801940 <__mulsi3>
  803070:	9009883a 	mov	r4,r18
  803074:	b00b883a 	mov	r5,r22
  803078:	d8800315 	stw	r2,12(sp)
  80307c:	08019400 	call	801940 <__mulsi3>
  803080:	b809883a 	mov	r4,r23
  803084:	b00b883a 	mov	r5,r22
  803088:	d8800215 	stw	r2,8(sp)
  80308c:	08019400 	call	801940 <__mulsi3>
  803090:	b80b883a 	mov	r5,r23
  803094:	8009883a 	mov	r4,r16
  803098:	d8800415 	stw	r2,16(sp)
  80309c:	08019400 	call	801940 <__mulsi3>
  8030a0:	da800317 	ldw	r10,12(sp)
  8030a4:	d9c00217 	ldw	r7,8(sp)
  8030a8:	d9000017 	ldw	r4,0(sp)
  8030ac:	502ed43a 	srli	r23,r10,16
  8030b0:	11c5883a 	add	r2,r2,r7
  8030b4:	24e5883a 	add	r18,r4,r19
  8030b8:	b885883a 	add	r2,r23,r2
  8030bc:	d8c00517 	ldw	r3,20(sp)
  8030c0:	d9800717 	ldw	r6,28(sp)
  8030c4:	da000617 	ldw	r8,24(sp)
  8030c8:	da400417 	ldw	r9,16(sp)
  8030cc:	11c0022e 	bgeu	r2,r7,8030d8 <__muldf3+0x4f4>
  8030d0:	01000074 	movhi	r4,1
  8030d4:	4913883a 	add	r9,r9,r4
  8030d8:	100ed43a 	srli	r7,r2,16
  8030dc:	1004943a 	slli	r2,r2,16
  8030e0:	55ffffcc 	andi	r23,r10,65535
  8030e4:	3a53883a 	add	r9,r7,r9
  8030e8:	8809883a 	mov	r4,r17
  8030ec:	800b883a 	mov	r5,r16
  8030f0:	d8c00515 	stw	r3,20(sp)
  8030f4:	d9800715 	stw	r6,28(sp)
  8030f8:	da000615 	stw	r8,24(sp)
  8030fc:	da400415 	stw	r9,16(sp)
  803100:	15ef883a 	add	r23,r2,r23
  803104:	08019400 	call	801940 <__mulsi3>
  803108:	8809883a 	mov	r4,r17
  80310c:	b00b883a 	mov	r5,r22
  803110:	d8800215 	stw	r2,8(sp)
  803114:	08019400 	call	801940 <__mulsi3>
  803118:	b00b883a 	mov	r5,r22
  80311c:	a809883a 	mov	r4,r21
  803120:	d8800315 	stw	r2,12(sp)
  803124:	08019400 	call	801940 <__mulsi3>
  803128:	8009883a 	mov	r4,r16
  80312c:	a80b883a 	mov	r5,r21
  803130:	1023883a 	mov	r17,r2
  803134:	08019400 	call	801940 <__mulsi3>
  803138:	d9c00217 	ldw	r7,8(sp)
  80313c:	da800317 	ldw	r10,12(sp)
  803140:	d8c00517 	ldw	r3,20(sp)
  803144:	3808d43a 	srli	r4,r7,16
  803148:	1285883a 	add	r2,r2,r10
  80314c:	d9800717 	ldw	r6,28(sp)
  803150:	2085883a 	add	r2,r4,r2
  803154:	da000617 	ldw	r8,24(sp)
  803158:	da400417 	ldw	r9,16(sp)
  80315c:	1280022e 	bgeu	r2,r10,803168 <__muldf3+0x584>
  803160:	01000074 	movhi	r4,1
  803164:	8923883a 	add	r17,r17,r4
  803168:	1008943a 	slli	r4,r2,16
  80316c:	39ffffcc 	andi	r7,r7,65535
  803170:	e4b9883a 	add	fp,fp,r18
  803174:	21cf883a 	add	r7,r4,r7
  803178:	e4e7803a 	cmpltu	r19,fp,r19
  80317c:	3d0f883a 	add	r7,r7,r20
  803180:	bf39883a 	add	fp,r23,fp
  803184:	99c9883a 	add	r4,r19,r7
  803188:	e5ef803a 	cmpltu	r23,fp,r23
  80318c:	490b883a 	add	r5,r9,r4
  803190:	1004d43a 	srli	r2,r2,16
  803194:	b965883a 	add	r18,r23,r5
  803198:	24c9803a 	cmpltu	r4,r4,r19
  80319c:	3d29803a 	cmpltu	r20,r7,r20
  8031a0:	a128b03a 	or	r20,r20,r4
  8031a4:	95ef803a 	cmpltu	r23,r18,r23
  8031a8:	2a53803a 	cmpltu	r9,r5,r9
  8031ac:	a0a9883a 	add	r20,r20,r2
  8031b0:	4deeb03a 	or	r23,r9,r23
  8031b4:	a5ef883a 	add	r23,r20,r23
  8031b8:	bc63883a 	add	r17,r23,r17
  8031bc:	e004927a 	slli	r2,fp,9
  8031c0:	d9000117 	ldw	r4,4(sp)
  8031c4:	882e927a 	slli	r23,r17,9
  8031c8:	9022d5fa 	srli	r17,r18,23
  8031cc:	e038d5fa 	srli	fp,fp,23
  8031d0:	1104b03a 	or	r2,r2,r4
  8031d4:	9024927a 	slli	r18,r18,9
  8031d8:	1004c03a 	cmpne	r2,r2,zero
  8031dc:	bc62b03a 	or	r17,r23,r17
  8031e0:	1738b03a 	or	fp,r2,fp
  8031e4:	8880402c 	andhi	r2,r17,256
  8031e8:	e4a4b03a 	or	r18,fp,r18
  8031ec:	10000726 	beq	r2,zero,80320c <__muldf3+0x628>
  8031f0:	9006d07a 	srli	r3,r18,1
  8031f4:	880497fa 	slli	r2,r17,31
  8031f8:	9480004c 	andi	r18,r18,1
  8031fc:	8822d07a 	srli	r17,r17,1
  803200:	1ca4b03a 	or	r18,r3,r18
  803204:	14a4b03a 	or	r18,r2,r18
  803208:	4007883a 	mov	r3,r8
  80320c:	1880ffc4 	addi	r2,r3,1023
  803210:	0080460e 	bge	zero,r2,80332c <__muldf3+0x748>
  803214:	910001cc 	andi	r4,r18,7
  803218:	20000726 	beq	r4,zero,803238 <__muldf3+0x654>
  80321c:	910003cc 	andi	r4,r18,15
  803220:	01400104 	movi	r5,4
  803224:	21400426 	beq	r4,r5,803238 <__muldf3+0x654>
  803228:	9149883a 	add	r4,r18,r5
  80322c:	24a5803a 	cmpltu	r18,r4,r18
  803230:	8ca3883a 	add	r17,r17,r18
  803234:	2025883a 	mov	r18,r4
  803238:	8900402c 	andhi	r4,r17,256
  80323c:	20000426 	beq	r4,zero,803250 <__muldf3+0x66c>
  803240:	18810004 	addi	r2,r3,1024
  803244:	00ffc034 	movhi	r3,65280
  803248:	18ffffc4 	addi	r3,r3,-1
  80324c:	88e2703a 	and	r17,r17,r3
  803250:	00c1ff84 	movi	r3,2046
  803254:	18bf1316 	blt	r3,r2,802ea4 <__alt_data_end+0xff802ea4>
  803258:	882c977a 	slli	r22,r17,29
  80325c:	9024d0fa 	srli	r18,r18,3
  803260:	8822927a 	slli	r17,r17,9
  803264:	1081ffcc 	andi	r2,r2,2047
  803268:	b4acb03a 	or	r22,r22,r18
  80326c:	8820d33a 	srli	r16,r17,12
  803270:	3027883a 	mov	r19,r6
  803274:	003eba06 	br	802d60 <__alt_data_end+0xff802d60>
  803278:	8080022c 	andhi	r2,r16,8
  80327c:	10000926 	beq	r2,zero,8032a4 <__muldf3+0x6c0>
  803280:	8880022c 	andhi	r2,r17,8
  803284:	1000071e 	bne	r2,zero,8032a4 <__muldf3+0x6c0>
  803288:	00800434 	movhi	r2,16
  80328c:	8c000234 	orhi	r16,r17,8
  803290:	10bfffc4 	addi	r2,r2,-1
  803294:	e027883a 	mov	r19,fp
  803298:	80a0703a 	and	r16,r16,r2
  80329c:	902d883a 	mov	r22,r18
  8032a0:	003f1706 	br	802f00 <__alt_data_end+0xff802f00>
  8032a4:	00800434 	movhi	r2,16
  8032a8:	84000234 	orhi	r16,r16,8
  8032ac:	10bfffc4 	addi	r2,r2,-1
  8032b0:	80a0703a 	and	r16,r16,r2
  8032b4:	003f1206 	br	802f00 <__alt_data_end+0xff802f00>
  8032b8:	147ff604 	addi	r17,r2,-40
  8032bc:	3462983a 	sll	r17,r6,r17
  8032c0:	0025883a 	mov	r18,zero
  8032c4:	003ef306 	br	802e94 <__alt_data_end+0xff802e94>
  8032c8:	3009883a 	mov	r4,r6
  8032cc:	d9400215 	stw	r5,8(sp)
  8032d0:	d9800715 	stw	r6,28(sp)
  8032d4:	da400415 	stw	r9,16(sp)
  8032d8:	da800315 	stw	r10,12(sp)
  8032dc:	08034d00 	call	8034d0 <__clzsi2>
  8032e0:	10800804 	addi	r2,r2,32
  8032e4:	da800317 	ldw	r10,12(sp)
  8032e8:	da400417 	ldw	r9,16(sp)
  8032ec:	d9800717 	ldw	r6,28(sp)
  8032f0:	d9400217 	ldw	r5,8(sp)
  8032f4:	003edd06 	br	802e6c <__alt_data_end+0xff802e6c>
  8032f8:	143ff604 	addi	r16,r2,-40
  8032fc:	ac20983a 	sll	r16,r21,r16
  803300:	002d883a 	mov	r22,zero
  803304:	003ec106 	br	802e0c <__alt_data_end+0xff802e0c>
  803308:	d9800715 	stw	r6,28(sp)
  80330c:	d9c00215 	stw	r7,8(sp)
  803310:	da400415 	stw	r9,16(sp)
  803314:	08034d00 	call	8034d0 <__clzsi2>
  803318:	10800804 	addi	r2,r2,32
  80331c:	da400417 	ldw	r9,16(sp)
  803320:	d9c00217 	ldw	r7,8(sp)
  803324:	d9800717 	ldw	r6,28(sp)
  803328:	003eae06 	br	802de4 <__alt_data_end+0xff802de4>
  80332c:	00c00044 	movi	r3,1
  803330:	1887c83a 	sub	r3,r3,r2
  803334:	01000e04 	movi	r4,56
  803338:	20fe8516 	blt	r4,r3,802d50 <__alt_data_end+0xff802d50>
  80333c:	010007c4 	movi	r4,31
  803340:	20c01b16 	blt	r4,r3,8033b0 <__muldf3+0x7cc>
  803344:	00800804 	movi	r2,32
  803348:	10c5c83a 	sub	r2,r2,r3
  80334c:	888a983a 	sll	r5,r17,r2
  803350:	90c8d83a 	srl	r4,r18,r3
  803354:	9084983a 	sll	r2,r18,r2
  803358:	88e2d83a 	srl	r17,r17,r3
  80335c:	2906b03a 	or	r3,r5,r4
  803360:	1004c03a 	cmpne	r2,r2,zero
  803364:	1886b03a 	or	r3,r3,r2
  803368:	188001cc 	andi	r2,r3,7
  80336c:	10000726 	beq	r2,zero,80338c <__muldf3+0x7a8>
  803370:	188003cc 	andi	r2,r3,15
  803374:	01000104 	movi	r4,4
  803378:	11000426 	beq	r2,r4,80338c <__muldf3+0x7a8>
  80337c:	1805883a 	mov	r2,r3
  803380:	10c00104 	addi	r3,r2,4
  803384:	1885803a 	cmpltu	r2,r3,r2
  803388:	88a3883a 	add	r17,r17,r2
  80338c:	8880202c 	andhi	r2,r17,128
  803390:	10001c26 	beq	r2,zero,803404 <__muldf3+0x820>
  803394:	3027883a 	mov	r19,r6
  803398:	00800044 	movi	r2,1
  80339c:	0021883a 	mov	r16,zero
  8033a0:	002d883a 	mov	r22,zero
  8033a4:	003e6e06 	br	802d60 <__alt_data_end+0xff802d60>
  8033a8:	4007883a 	mov	r3,r8
  8033ac:	003f9706 	br	80320c <__alt_data_end+0xff80320c>
  8033b0:	017ff844 	movi	r5,-31
  8033b4:	2885c83a 	sub	r2,r5,r2
  8033b8:	888ad83a 	srl	r5,r17,r2
  8033bc:	00800804 	movi	r2,32
  8033c0:	18801a26 	beq	r3,r2,80342c <__muldf3+0x848>
  8033c4:	01001004 	movi	r4,64
  8033c8:	20c7c83a 	sub	r3,r4,r3
  8033cc:	88e2983a 	sll	r17,r17,r3
  8033d0:	8ca4b03a 	or	r18,r17,r18
  8033d4:	9004c03a 	cmpne	r2,r18,zero
  8033d8:	2884b03a 	or	r2,r5,r2
  8033dc:	144001cc 	andi	r17,r2,7
  8033e0:	88000d1e 	bne	r17,zero,803418 <__muldf3+0x834>
  8033e4:	0021883a 	mov	r16,zero
  8033e8:	102cd0fa 	srli	r22,r2,3
  8033ec:	3027883a 	mov	r19,r6
  8033f0:	0005883a 	mov	r2,zero
  8033f4:	b46cb03a 	or	r22,r22,r17
  8033f8:	003e5906 	br	802d60 <__alt_data_end+0xff802d60>
  8033fc:	1007883a 	mov	r3,r2
  803400:	0023883a 	mov	r17,zero
  803404:	8820927a 	slli	r16,r17,9
  803408:	1805883a 	mov	r2,r3
  80340c:	8822977a 	slli	r17,r17,29
  803410:	8020d33a 	srli	r16,r16,12
  803414:	003ff406 	br	8033e8 <__alt_data_end+0xff8033e8>
  803418:	10c003cc 	andi	r3,r2,15
  80341c:	01000104 	movi	r4,4
  803420:	193ff626 	beq	r3,r4,8033fc <__alt_data_end+0xff8033fc>
  803424:	0023883a 	mov	r17,zero
  803428:	003fd506 	br	803380 <__alt_data_end+0xff803380>
  80342c:	0023883a 	mov	r17,zero
  803430:	003fe706 	br	8033d0 <__alt_data_end+0xff8033d0>
  803434:	00800434 	movhi	r2,16
  803438:	8c000234 	orhi	r16,r17,8
  80343c:	10bfffc4 	addi	r2,r2,-1
  803440:	3027883a 	mov	r19,r6
  803444:	80a0703a 	and	r16,r16,r2
  803448:	902d883a 	mov	r22,r18
  80344c:	003eac06 	br	802f00 <__alt_data_end+0xff802f00>

00803450 <__fixdfsi>:
  803450:	280cd53a 	srli	r6,r5,20
  803454:	00c00434 	movhi	r3,16
  803458:	18ffffc4 	addi	r3,r3,-1
  80345c:	3181ffcc 	andi	r6,r6,2047
  803460:	01c0ff84 	movi	r7,1022
  803464:	28c6703a 	and	r3,r5,r3
  803468:	280ad7fa 	srli	r5,r5,31
  80346c:	3980120e 	bge	r7,r6,8034b8 <__fixdfsi+0x68>
  803470:	00810744 	movi	r2,1053
  803474:	11800c16 	blt	r2,r6,8034a8 <__fixdfsi+0x58>
  803478:	00810cc4 	movi	r2,1075
  80347c:	1185c83a 	sub	r2,r2,r6
  803480:	01c007c4 	movi	r7,31
  803484:	18c00434 	orhi	r3,r3,16
  803488:	38800d16 	blt	r7,r2,8034c0 <__fixdfsi+0x70>
  80348c:	31befb44 	addi	r6,r6,-1043
  803490:	2084d83a 	srl	r2,r4,r2
  803494:	1986983a 	sll	r3,r3,r6
  803498:	1884b03a 	or	r2,r3,r2
  80349c:	28000726 	beq	r5,zero,8034bc <__fixdfsi+0x6c>
  8034a0:	0085c83a 	sub	r2,zero,r2
  8034a4:	f800283a 	ret
  8034a8:	00a00034 	movhi	r2,32768
  8034ac:	10bfffc4 	addi	r2,r2,-1
  8034b0:	2885883a 	add	r2,r5,r2
  8034b4:	f800283a 	ret
  8034b8:	0005883a 	mov	r2,zero
  8034bc:	f800283a 	ret
  8034c0:	008104c4 	movi	r2,1043
  8034c4:	1185c83a 	sub	r2,r2,r6
  8034c8:	1884d83a 	srl	r2,r3,r2
  8034cc:	003ff306 	br	80349c <__alt_data_end+0xff80349c>

008034d0 <__clzsi2>:
  8034d0:	00bfffd4 	movui	r2,65535
  8034d4:	11000536 	bltu	r2,r4,8034ec <__clzsi2+0x1c>
  8034d8:	00803fc4 	movi	r2,255
  8034dc:	11000f36 	bltu	r2,r4,80351c <__clzsi2+0x4c>
  8034e0:	00800804 	movi	r2,32
  8034e4:	0007883a 	mov	r3,zero
  8034e8:	00000506 	br	803500 <__clzsi2+0x30>
  8034ec:	00804034 	movhi	r2,256
  8034f0:	10bfffc4 	addi	r2,r2,-1
  8034f4:	11000c2e 	bgeu	r2,r4,803528 <__clzsi2+0x58>
  8034f8:	00800204 	movi	r2,8
  8034fc:	00c00604 	movi	r3,24
  803500:	20c8d83a 	srl	r4,r4,r3
  803504:	00c02034 	movhi	r3,128
  803508:	18d57284 	addi	r3,r3,21962
  80350c:	1909883a 	add	r4,r3,r4
  803510:	20c00003 	ldbu	r3,0(r4)
  803514:	10c5c83a 	sub	r2,r2,r3
  803518:	f800283a 	ret
  80351c:	00800604 	movi	r2,24
  803520:	00c00204 	movi	r3,8
  803524:	003ff606 	br	803500 <__alt_data_end+0xff803500>
  803528:	00800404 	movi	r2,16
  80352c:	1007883a 	mov	r3,r2
  803530:	003ff306 	br	803500 <__alt_data_end+0xff803500>

00803534 <malloc>:
  803534:	00802034 	movhi	r2,128
  803538:	10971504 	addi	r2,r2,23636
  80353c:	200b883a 	mov	r5,r4
  803540:	11000017 	ldw	r4,0(r2)
  803544:	08036c01 	jmpi	8036c0 <_malloc_r>

00803548 <free>:
  803548:	00802034 	movhi	r2,128
  80354c:	10971504 	addi	r2,r2,23636
  803550:	200b883a 	mov	r5,r4
  803554:	11000017 	ldw	r4,0(r2)
  803558:	08035dc1 	jmpi	8035dc <_free_r>

0080355c <memmove>:
  80355c:	2005883a 	mov	r2,r4
  803560:	218f883a 	add	r7,r4,r6
  803564:	29000236 	bltu	r5,r4,803570 <memmove+0x14>
  803568:	1007883a 	mov	r3,r2
  80356c:	00000c06 	br	8035a0 <memmove+0x44>
  803570:	2987883a 	add	r3,r5,r6
  803574:	20fffc2e 	bgeu	r4,r3,803568 <__alt_data_end+0xff803568>
  803578:	380b883a 	mov	r5,r7
  80357c:	30cdc83a 	sub	r6,r6,r3
  803580:	1989883a 	add	r4,r3,r6
  803584:	20000526 	beq	r4,zero,80359c <memmove+0x40>
  803588:	18ffffc4 	addi	r3,r3,-1
  80358c:	19000003 	ldbu	r4,0(r3)
  803590:	297fffc4 	addi	r5,r5,-1
  803594:	29000005 	stb	r4,0(r5)
  803598:	003ff906 	br	803580 <__alt_data_end+0xff803580>
  80359c:	f800283a 	ret
  8035a0:	19c00526 	beq	r3,r7,8035b8 <memmove+0x5c>
  8035a4:	29000003 	ldbu	r4,0(r5)
  8035a8:	18c00044 	addi	r3,r3,1
  8035ac:	29400044 	addi	r5,r5,1
  8035b0:	193fffc5 	stb	r4,-1(r3)
  8035b4:	003ffa06 	br	8035a0 <__alt_data_end+0xff8035a0>
  8035b8:	f800283a 	ret

008035bc <memset>:
  8035bc:	2005883a 	mov	r2,r4
  8035c0:	2007883a 	mov	r3,r4
  8035c4:	218d883a 	add	r6,r4,r6
  8035c8:	19800326 	beq	r3,r6,8035d8 <memset+0x1c>
  8035cc:	19400005 	stb	r5,0(r3)
  8035d0:	18c00044 	addi	r3,r3,1
  8035d4:	003ffc06 	br	8035c8 <__alt_data_end+0xff8035c8>
  8035d8:	f800283a 	ret

008035dc <_free_r>:
  8035dc:	28003726 	beq	r5,zero,8036bc <_free_r+0xe0>
  8035e0:	28ffff17 	ldw	r3,-4(r5)
  8035e4:	28bfff04 	addi	r2,r5,-4
  8035e8:	1800010e 	bge	r3,zero,8035f0 <_free_r+0x14>
  8035ec:	10c5883a 	add	r2,r2,r3
  8035f0:	01402034 	movhi	r5,128
  8035f4:	2957f704 	addi	r5,r5,24540
  8035f8:	28c00017 	ldw	r3,0(r5)
  8035fc:	280d883a 	mov	r6,r5
  803600:	1800031e 	bne	r3,zero,803610 <_free_r+0x34>
  803604:	10000115 	stw	zero,4(r2)
  803608:	28800015 	stw	r2,0(r5)
  80360c:	f800283a 	ret
  803610:	10c00c2e 	bgeu	r2,r3,803644 <_free_r+0x68>
  803614:	11000017 	ldw	r4,0(r2)
  803618:	110b883a 	add	r5,r2,r4
  80361c:	1940041e 	bne	r3,r5,803630 <_free_r+0x54>
  803620:	19400017 	ldw	r5,0(r3)
  803624:	18c00117 	ldw	r3,4(r3)
  803628:	2909883a 	add	r4,r5,r4
  80362c:	11000015 	stw	r4,0(r2)
  803630:	10c00115 	stw	r3,4(r2)
  803634:	30800015 	stw	r2,0(r6)
  803638:	f800283a 	ret
  80363c:	11400336 	bltu	r2,r5,80364c <_free_r+0x70>
  803640:	2807883a 	mov	r3,r5
  803644:	19400117 	ldw	r5,4(r3)
  803648:	283ffc1e 	bne	r5,zero,80363c <__alt_data_end+0xff80363c>
  80364c:	19c00017 	ldw	r7,0(r3)
  803650:	19cd883a 	add	r6,r3,r7
  803654:	30800a1e 	bne	r6,r2,803680 <_free_r+0xa4>
  803658:	10800017 	ldw	r2,0(r2)
  80365c:	3885883a 	add	r2,r7,r2
  803660:	18800015 	stw	r2,0(r3)
  803664:	1889883a 	add	r4,r3,r2
  803668:	2900141e 	bne	r5,r4,8036bc <_free_r+0xe0>
  80366c:	29000017 	ldw	r4,0(r5)
  803670:	2085883a 	add	r2,r4,r2
  803674:	18800015 	stw	r2,0(r3)
  803678:	28800117 	ldw	r2,4(r5)
  80367c:	00000e06 	br	8036b8 <_free_r+0xdc>
  803680:	1180032e 	bgeu	r2,r6,803690 <_free_r+0xb4>
  803684:	00800304 	movi	r2,12
  803688:	20800015 	stw	r2,0(r4)
  80368c:	f800283a 	ret
  803690:	11000017 	ldw	r4,0(r2)
  803694:	110d883a 	add	r6,r2,r4
  803698:	2980061e 	bne	r5,r6,8036b4 <_free_r+0xd8>
  80369c:	29800017 	ldw	r6,0(r5)
  8036a0:	3109883a 	add	r4,r6,r4
  8036a4:	11000015 	stw	r4,0(r2)
  8036a8:	29000117 	ldw	r4,4(r5)
  8036ac:	11000115 	stw	r4,4(r2)
  8036b0:	00000106 	br	8036b8 <_free_r+0xdc>
  8036b4:	11400115 	stw	r5,4(r2)
  8036b8:	18800115 	stw	r2,4(r3)
  8036bc:	f800283a 	ret

008036c0 <_malloc_r>:
  8036c0:	defffb04 	addi	sp,sp,-20
  8036c4:	00bfff04 	movi	r2,-4
  8036c8:	dc400115 	stw	r17,4(sp)
  8036cc:	2c4000c4 	addi	r17,r5,3
  8036d0:	88a2703a 	and	r17,r17,r2
  8036d4:	dc800215 	stw	r18,8(sp)
  8036d8:	dfc00415 	stw	ra,16(sp)
  8036dc:	dcc00315 	stw	r19,12(sp)
  8036e0:	dc000015 	stw	r16,0(sp)
  8036e4:	8c400204 	addi	r17,r17,8
  8036e8:	00800304 	movi	r2,12
  8036ec:	2025883a 	mov	r18,r4
  8036f0:	8880022e 	bgeu	r17,r2,8036fc <_malloc_r+0x3c>
  8036f4:	1023883a 	mov	r17,r2
  8036f8:	00000506 	br	803710 <_malloc_r+0x50>
  8036fc:	8800040e 	bge	r17,zero,803710 <_malloc_r+0x50>
  803700:	00800304 	movi	r2,12
  803704:	90800015 	stw	r2,0(r18)
  803708:	0005883a 	mov	r2,zero
  80370c:	00003b06 	br	8037fc <_malloc_r+0x13c>
  803710:	897ffb36 	bltu	r17,r5,803700 <__alt_data_end+0xff803700>
  803714:	00802034 	movhi	r2,128
  803718:	1097f704 	addi	r2,r2,24540
  80371c:	10c00017 	ldw	r3,0(r2)
  803720:	1009883a 	mov	r4,r2
  803724:	1821883a 	mov	r16,r3
  803728:	80000926 	beq	r16,zero,803750 <_malloc_r+0x90>
  80372c:	80800017 	ldw	r2,0(r16)
  803730:	1445c83a 	sub	r2,r2,r17
  803734:	10001516 	blt	r2,zero,80378c <_malloc_r+0xcc>
  803738:	014002c4 	movi	r5,11
  80373c:	28800d2e 	bgeu	r5,r2,803774 <_malloc_r+0xb4>
  803740:	80800015 	stw	r2,0(r16)
  803744:	80a1883a 	add	r16,r16,r2
  803748:	84400015 	stw	r17,0(r16)
  80374c:	8000221e 	bne	r16,zero,8037d8 <_malloc_r+0x118>
  803750:	04002034 	movhi	r16,128
  803754:	8417f604 	addi	r16,r16,24536
  803758:	80800017 	ldw	r2,0(r16)
  80375c:	10000e1e 	bne	r2,zero,803798 <_malloc_r+0xd8>
  803760:	000b883a 	mov	r5,zero
  803764:	9009883a 	mov	r4,r18
  803768:	08038a00 	call	8038a0 <_sbrk_r>
  80376c:	80800015 	stw	r2,0(r16)
  803770:	00000906 	br	803798 <_malloc_r+0xd8>
  803774:	80800117 	ldw	r2,4(r16)
  803778:	1c00021e 	bne	r3,r16,803784 <_malloc_r+0xc4>
  80377c:	20800015 	stw	r2,0(r4)
  803780:	00001506 	br	8037d8 <_malloc_r+0x118>
  803784:	18800115 	stw	r2,4(r3)
  803788:	00001306 	br	8037d8 <_malloc_r+0x118>
  80378c:	8007883a 	mov	r3,r16
  803790:	84000117 	ldw	r16,4(r16)
  803794:	003fe406 	br	803728 <__alt_data_end+0xff803728>
  803798:	880b883a 	mov	r5,r17
  80379c:	9009883a 	mov	r4,r18
  8037a0:	08038a00 	call	8038a0 <_sbrk_r>
  8037a4:	04ffffc4 	movi	r19,-1
  8037a8:	14ffd526 	beq	r2,r19,803700 <__alt_data_end+0xff803700>
  8037ac:	140000c4 	addi	r16,r2,3
  8037b0:	00ffff04 	movi	r3,-4
  8037b4:	80e0703a 	and	r16,r16,r3
  8037b8:	1400021e 	bne	r2,r16,8037c4 <_malloc_r+0x104>
  8037bc:	84400015 	stw	r17,0(r16)
  8037c0:	00000506 	br	8037d8 <_malloc_r+0x118>
  8037c4:	808bc83a 	sub	r5,r16,r2
  8037c8:	9009883a 	mov	r4,r18
  8037cc:	08038a00 	call	8038a0 <_sbrk_r>
  8037d0:	14fffa1e 	bne	r2,r19,8037bc <__alt_data_end+0xff8037bc>
  8037d4:	003fca06 	br	803700 <__alt_data_end+0xff803700>
  8037d8:	810002c4 	addi	r4,r16,11
  8037dc:	00bffe04 	movi	r2,-8
  8037e0:	80c00104 	addi	r3,r16,4
  8037e4:	2084703a 	and	r2,r4,r2
  8037e8:	10c7c83a 	sub	r3,r2,r3
  8037ec:	18000326 	beq	r3,zero,8037fc <_malloc_r+0x13c>
  8037f0:	80e1883a 	add	r16,r16,r3
  8037f4:	00c7c83a 	sub	r3,zero,r3
  8037f8:	80c00015 	stw	r3,0(r16)
  8037fc:	dfc00417 	ldw	ra,16(sp)
  803800:	dcc00317 	ldw	r19,12(sp)
  803804:	dc800217 	ldw	r18,8(sp)
  803808:	dc400117 	ldw	r17,4(sp)
  80380c:	dc000017 	ldw	r16,0(sp)
  803810:	dec00504 	addi	sp,sp,20
  803814:	f800283a 	ret

00803818 <_printf_r>:
  803818:	defffd04 	addi	sp,sp,-12
  80381c:	dfc00015 	stw	ra,0(sp)
  803820:	d9800115 	stw	r6,4(sp)
  803824:	d9c00215 	stw	r7,8(sp)
  803828:	20c00217 	ldw	r3,8(r4)
  80382c:	01802034 	movhi	r6,128
  803830:	31927e04 	addi	r6,r6,18936
  803834:	19800115 	stw	r6,4(r3)
  803838:	280d883a 	mov	r6,r5
  80383c:	21400217 	ldw	r5,8(r4)
  803840:	d9c00104 	addi	r7,sp,4
  803844:	08044b00 	call	8044b0 <___vfprintf_internal_r>
  803848:	dfc00017 	ldw	ra,0(sp)
  80384c:	dec00304 	addi	sp,sp,12
  803850:	f800283a 	ret

00803854 <printf>:
  803854:	defffc04 	addi	sp,sp,-16
  803858:	dfc00015 	stw	ra,0(sp)
  80385c:	d9400115 	stw	r5,4(sp)
  803860:	d9800215 	stw	r6,8(sp)
  803864:	d9c00315 	stw	r7,12(sp)
  803868:	00802034 	movhi	r2,128
  80386c:	10971504 	addi	r2,r2,23636
  803870:	10800017 	ldw	r2,0(r2)
  803874:	01402034 	movhi	r5,128
  803878:	29527e04 	addi	r5,r5,18936
  80387c:	10c00217 	ldw	r3,8(r2)
  803880:	d9800104 	addi	r6,sp,4
  803884:	19400115 	stw	r5,4(r3)
  803888:	200b883a 	mov	r5,r4
  80388c:	11000217 	ldw	r4,8(r2)
  803890:	08049dc0 	call	8049dc <__vfprintf_internal>
  803894:	dfc00017 	ldw	ra,0(sp)
  803898:	dec00404 	addi	sp,sp,16
  80389c:	f800283a 	ret

008038a0 <_sbrk_r>:
  8038a0:	defffd04 	addi	sp,sp,-12
  8038a4:	dc000015 	stw	r16,0(sp)
  8038a8:	04002034 	movhi	r16,128
  8038ac:	dc400115 	stw	r17,4(sp)
  8038b0:	8417f804 	addi	r16,r16,24544
  8038b4:	2023883a 	mov	r17,r4
  8038b8:	2809883a 	mov	r4,r5
  8038bc:	dfc00215 	stw	ra,8(sp)
  8038c0:	80000015 	stw	zero,0(r16)
  8038c4:	0804f4c0 	call	804f4c <sbrk>
  8038c8:	00ffffc4 	movi	r3,-1
  8038cc:	10c0031e 	bne	r2,r3,8038dc <_sbrk_r+0x3c>
  8038d0:	80c00017 	ldw	r3,0(r16)
  8038d4:	18000126 	beq	r3,zero,8038dc <_sbrk_r+0x3c>
  8038d8:	88c00015 	stw	r3,0(r17)
  8038dc:	dfc00217 	ldw	ra,8(sp)
  8038e0:	dc400117 	ldw	r17,4(sp)
  8038e4:	dc000017 	ldw	r16,0(sp)
  8038e8:	dec00304 	addi	sp,sp,12
  8038ec:	f800283a 	ret

008038f0 <_sprintf_r>:
  8038f0:	defff704 	addi	sp,sp,-36
  8038f4:	dfc00715 	stw	ra,28(sp)
  8038f8:	d9c00815 	stw	r7,32(sp)
  8038fc:	00808204 	movi	r2,520
  803900:	d880000d 	sth	r2,0(sp)
  803904:	00a00034 	movhi	r2,32768
  803908:	10bfffc4 	addi	r2,r2,-1
  80390c:	d8800515 	stw	r2,20(sp)
  803910:	d8800315 	stw	r2,12(sp)
  803914:	00bfffc4 	movi	r2,-1
  803918:	d880008d 	sth	r2,2(sp)
  80391c:	00802034 	movhi	r2,128
  803920:	d9400415 	stw	r5,16(sp)
  803924:	d9400215 	stw	r5,8(sp)
  803928:	1092ac04 	addi	r2,r2,19120
  80392c:	d9c00804 	addi	r7,sp,32
  803930:	d80b883a 	mov	r5,sp
  803934:	d8800115 	stw	r2,4(sp)
  803938:	d8000615 	stw	zero,24(sp)
  80393c:	0803efc0 	call	803efc <___svfprintf_internal_r>
  803940:	d8c00417 	ldw	r3,16(sp)
  803944:	18000005 	stb	zero,0(r3)
  803948:	dfc00717 	ldw	ra,28(sp)
  80394c:	dec00904 	addi	sp,sp,36
  803950:	f800283a 	ret

00803954 <sprintf>:
  803954:	defff604 	addi	sp,sp,-40
  803958:	dfc00715 	stw	ra,28(sp)
  80395c:	d9800815 	stw	r6,32(sp)
  803960:	d9c00915 	stw	r7,36(sp)
  803964:	00808204 	movi	r2,520
  803968:	d880000d 	sth	r2,0(sp)
  80396c:	00a00034 	movhi	r2,32768
  803970:	10bfffc4 	addi	r2,r2,-1
  803974:	d8800515 	stw	r2,20(sp)
  803978:	d8800315 	stw	r2,12(sp)
  80397c:	00bfffc4 	movi	r2,-1
  803980:	d880008d 	sth	r2,2(sp)
  803984:	00802034 	movhi	r2,128
  803988:	1092ac04 	addi	r2,r2,19120
  80398c:	d8800115 	stw	r2,4(sp)
  803990:	00802034 	movhi	r2,128
  803994:	10971504 	addi	r2,r2,23636
  803998:	d9000415 	stw	r4,16(sp)
  80399c:	d9000215 	stw	r4,8(sp)
  8039a0:	11000017 	ldw	r4,0(r2)
  8039a4:	280d883a 	mov	r6,r5
  8039a8:	d9c00804 	addi	r7,sp,32
  8039ac:	d80b883a 	mov	r5,sp
  8039b0:	d8000615 	stw	zero,24(sp)
  8039b4:	0803efc0 	call	803efc <___svfprintf_internal_r>
  8039b8:	d8c00417 	ldw	r3,16(sp)
  8039bc:	18000005 	stb	zero,0(r3)
  8039c0:	dfc00717 	ldw	ra,28(sp)
  8039c4:	dec00a04 	addi	sp,sp,40
  8039c8:	f800283a 	ret

008039cc <strcat>:
  8039cc:	2005883a 	mov	r2,r4
  8039d0:	2007883a 	mov	r3,r4
  8039d4:	19000007 	ldb	r4,0(r3)
  8039d8:	20000226 	beq	r4,zero,8039e4 <strcat+0x18>
  8039dc:	18c00044 	addi	r3,r3,1
  8039e0:	003ffc06 	br	8039d4 <__alt_data_end+0xff8039d4>
  8039e4:	29800003 	ldbu	r6,0(r5)
  8039e8:	18c00044 	addi	r3,r3,1
  8039ec:	29400044 	addi	r5,r5,1
  8039f0:	19bfffc5 	stb	r6,-1(r3)
  8039f4:	31803fcc 	andi	r6,r6,255
  8039f8:	3180201c 	xori	r6,r6,128
  8039fc:	31bfe004 	addi	r6,r6,-128
  803a00:	303ff81e 	bne	r6,zero,8039e4 <__alt_data_end+0xff8039e4>
  803a04:	f800283a 	ret

00803a08 <strcmp>:
  803a08:	20800003 	ldbu	r2,0(r4)
  803a0c:	10c03fcc 	andi	r3,r2,255
  803a10:	18c0201c 	xori	r3,r3,128
  803a14:	18ffe004 	addi	r3,r3,-128
  803a18:	18000526 	beq	r3,zero,803a30 <strcmp+0x28>
  803a1c:	29800007 	ldb	r6,0(r5)
  803a20:	1980031e 	bne	r3,r6,803a30 <strcmp+0x28>
  803a24:	21000044 	addi	r4,r4,1
  803a28:	29400044 	addi	r5,r5,1
  803a2c:	003ff606 	br	803a08 <__alt_data_end+0xff803a08>
  803a30:	28c00003 	ldbu	r3,0(r5)
  803a34:	10803fcc 	andi	r2,r2,255
  803a38:	10c5c83a 	sub	r2,r2,r3
  803a3c:	f800283a 	ret

00803a40 <strcpy>:
  803a40:	2005883a 	mov	r2,r4
  803a44:	200d883a 	mov	r6,r4
  803a48:	28c00003 	ldbu	r3,0(r5)
  803a4c:	31800044 	addi	r6,r6,1
  803a50:	29400044 	addi	r5,r5,1
  803a54:	30ffffc5 	stb	r3,-1(r6)
  803a58:	18c03fcc 	andi	r3,r3,255
  803a5c:	18c0201c 	xori	r3,r3,128
  803a60:	18ffe004 	addi	r3,r3,-128
  803a64:	183ff81e 	bne	r3,zero,803a48 <__alt_data_end+0xff803a48>
  803a68:	f800283a 	ret

00803a6c <strlen>:
  803a6c:	2005883a 	mov	r2,r4
  803a70:	10c00007 	ldb	r3,0(r2)
  803a74:	18000226 	beq	r3,zero,803a80 <strlen+0x14>
  803a78:	10800044 	addi	r2,r2,1
  803a7c:	003ffc06 	br	803a70 <__alt_data_end+0xff803a70>
  803a80:	1105c83a 	sub	r2,r2,r4
  803a84:	f800283a 	ret

00803a88 <strncpy>:
  803a88:	2005883a 	mov	r2,r4
  803a8c:	200f883a 	mov	r7,r4
  803a90:	30000c26 	beq	r6,zero,803ac4 <strncpy+0x3c>
  803a94:	2a000003 	ldbu	r8,0(r5)
  803a98:	38c00044 	addi	r3,r7,1
  803a9c:	31bfffc4 	addi	r6,r6,-1
  803aa0:	3a000005 	stb	r8,0(r7)
  803aa4:	42003fcc 	andi	r8,r8,255
  803aa8:	4200201c 	xori	r8,r8,128
  803aac:	423fe004 	addi	r8,r8,-128
  803ab0:	29400044 	addi	r5,r5,1
  803ab4:	180f883a 	mov	r7,r3
  803ab8:	403ff51e 	bne	r8,zero,803a90 <__alt_data_end+0xff803a90>
  803abc:	198d883a 	add	r6,r3,r6
  803ac0:	00000106 	br	803ac8 <strncpy+0x40>
  803ac4:	f800283a 	ret
  803ac8:	30c00326 	beq	r6,r3,803ad8 <strncpy+0x50>
  803acc:	18000005 	stb	zero,0(r3)
  803ad0:	18c00044 	addi	r3,r3,1
  803ad4:	003ffc06 	br	803ac8 <__alt_data_end+0xff803ac8>
  803ad8:	f800283a 	ret

00803adc <strtok>:
  803adc:	00802034 	movhi	r2,128
  803ae0:	defffc04 	addi	sp,sp,-16
  803ae4:	10971504 	addi	r2,r2,23636
  803ae8:	dc000115 	stw	r16,4(sp)
  803aec:	14000017 	ldw	r16,0(r2)
  803af0:	dc400215 	stw	r17,8(sp)
  803af4:	dfc00315 	stw	ra,12(sp)
  803af8:	80803617 	ldw	r2,216(r16)
  803afc:	2023883a 	mov	r17,r4
  803b00:	1000211e 	bne	r2,zero,803b88 <strtok+0xac>
  803b04:	01001404 	movi	r4,80
  803b08:	d9400015 	stw	r5,0(sp)
  803b0c:	08035340 	call	803534 <malloc>
  803b10:	80803615 	stw	r2,216(r16)
  803b14:	10000215 	stw	zero,8(r2)
  803b18:	10000015 	stw	zero,0(r2)
  803b1c:	10000115 	stw	zero,4(r2)
  803b20:	80803617 	ldw	r2,216(r16)
  803b24:	10000415 	stw	zero,16(r2)
  803b28:	10000315 	stw	zero,12(r2)
  803b2c:	80803617 	ldw	r2,216(r16)
  803b30:	10000615 	stw	zero,24(r2)
  803b34:	10000515 	stw	zero,20(r2)
  803b38:	80803617 	ldw	r2,216(r16)
  803b3c:	10000b15 	stw	zero,44(r2)
  803b40:	10000a15 	stw	zero,40(r2)
  803b44:	80803617 	ldw	r2,216(r16)
  803b48:	10000d15 	stw	zero,52(r2)
  803b4c:	10000c15 	stw	zero,48(r2)
  803b50:	80803617 	ldw	r2,216(r16)
  803b54:	10000f15 	stw	zero,60(r2)
  803b58:	10000e15 	stw	zero,56(r2)
  803b5c:	80803617 	ldw	r2,216(r16)
  803b60:	10001115 	stw	zero,68(r2)
  803b64:	10001015 	stw	zero,64(r2)
  803b68:	80803617 	ldw	r2,216(r16)
  803b6c:	10001315 	stw	zero,76(r2)
  803b70:	10001215 	stw	zero,72(r2)
  803b74:	80803617 	ldw	r2,216(r16)
  803b78:	10000705 	stb	zero,28(r2)
  803b7c:	80803617 	ldw	r2,216(r16)
  803b80:	d9400017 	ldw	r5,0(sp)
  803b84:	10000915 	stw	zero,36(r2)
  803b88:	81803617 	ldw	r6,216(r16)
  803b8c:	01c00044 	movi	r7,1
  803b90:	8809883a 	mov	r4,r17
  803b94:	dfc00317 	ldw	ra,12(sp)
  803b98:	dc400217 	ldw	r17,8(sp)
  803b9c:	dc000117 	ldw	r16,4(sp)
  803ba0:	dec00404 	addi	sp,sp,16
  803ba4:	0803ba81 	jmpi	803ba8 <__strtok_r>

00803ba8 <__strtok_r>:
  803ba8:	2000021e 	bne	r4,zero,803bb4 <__strtok_r+0xc>
  803bac:	31000017 	ldw	r4,0(r6)
  803bb0:	20001f26 	beq	r4,zero,803c30 <__strtok_r+0x88>
  803bb4:	2005883a 	mov	r2,r4
  803bb8:	12000007 	ldb	r8,0(r2)
  803bbc:	21000044 	addi	r4,r4,1
  803bc0:	2807883a 	mov	r3,r5
  803bc4:	1a400007 	ldb	r9,0(r3)
  803bc8:	48000626 	beq	r9,zero,803be4 <__strtok_r+0x3c>
  803bcc:	18c00044 	addi	r3,r3,1
  803bd0:	427ffc1e 	bne	r8,r9,803bc4 <__alt_data_end+0xff803bc4>
  803bd4:	383ff71e 	bne	r7,zero,803bb4 <__alt_data_end+0xff803bb4>
  803bd8:	31000015 	stw	r4,0(r6)
  803bdc:	10000005 	stb	zero,0(r2)
  803be0:	f800283a 	ret
  803be4:	4000061e 	bne	r8,zero,803c00 <__strtok_r+0x58>
  803be8:	30000015 	stw	zero,0(r6)
  803bec:	00001006 	br	803c30 <__strtok_r+0x88>
  803bf0:	19c00007 	ldb	r7,0(r3)
  803bf4:	51c00826 	beq	r10,r7,803c18 <__strtok_r+0x70>
  803bf8:	18c00044 	addi	r3,r3,1
  803bfc:	383ffc1e 	bne	r7,zero,803bf0 <__alt_data_end+0xff803bf0>
  803c00:	2011883a 	mov	r8,r4
  803c04:	21000044 	addi	r4,r4,1
  803c08:	2013883a 	mov	r9,r4
  803c0c:	42800007 	ldb	r10,0(r8)
  803c10:	2807883a 	mov	r3,r5
  803c14:	003ff606 	br	803bf0 <__alt_data_end+0xff803bf0>
  803c18:	50000226 	beq	r10,zero,803c24 <__strtok_r+0x7c>
  803c1c:	40000005 	stb	zero,0(r8)
  803c20:	00000106 	br	803c28 <__strtok_r+0x80>
  803c24:	0013883a 	mov	r9,zero
  803c28:	32400015 	stw	r9,0(r6)
  803c2c:	f800283a 	ret
  803c30:	0005883a 	mov	r2,zero
  803c34:	f800283a 	ret

00803c38 <strtok_r>:
  803c38:	01c00044 	movi	r7,1
  803c3c:	0803ba81 	jmpi	803ba8 <__strtok_r>

00803c40 <_strtol_r>:
  803c40:	00802034 	movhi	r2,128
  803c44:	defff304 	addi	sp,sp,-52
  803c48:	10971304 	addi	r2,r2,23628
  803c4c:	dcc00615 	stw	r19,24(sp)
  803c50:	14c00017 	ldw	r19,0(r2)
  803c54:	df000b15 	stw	fp,44(sp)
  803c58:	dd400815 	stw	r21,32(sp)
  803c5c:	dd000715 	stw	r20,28(sp)
  803c60:	dc800515 	stw	r18,20(sp)
  803c64:	202b883a 	mov	r21,r4
  803c68:	dfc00c15 	stw	ra,48(sp)
  803c6c:	ddc00a15 	stw	r23,40(sp)
  803c70:	dd800915 	stw	r22,36(sp)
  803c74:	dc400415 	stw	r17,16(sp)
  803c78:	dc000315 	stw	r16,12(sp)
  803c7c:	2829883a 	mov	r20,r5
  803c80:	3039883a 	mov	fp,r6
  803c84:	3825883a 	mov	r18,r7
  803c88:	2809883a 	mov	r4,r5
  803c8c:	2005883a 	mov	r2,r4
  803c90:	14400003 	ldbu	r17,0(r2)
  803c94:	24000044 	addi	r16,r4,1
  803c98:	8009883a 	mov	r4,r16
  803c9c:	9c47883a 	add	r3,r19,r17
  803ca0:	18c00043 	ldbu	r3,1(r3)
  803ca4:	18c0020c 	andi	r3,r3,8
  803ca8:	183ff81e 	bne	r3,zero,803c8c <__alt_data_end+0xff803c8c>
  803cac:	00c00b44 	movi	r3,45
  803cb0:	88c0041e 	bne	r17,r3,803cc4 <_strtol_r+0x84>
  803cb4:	14000084 	addi	r16,r2,2
  803cb8:	14400043 	ldbu	r17,1(r2)
  803cbc:	05c00044 	movi	r23,1
  803cc0:	00000506 	br	803cd8 <_strtol_r+0x98>
  803cc4:	00c00ac4 	movi	r3,43
  803cc8:	88c0021e 	bne	r17,r3,803cd4 <_strtol_r+0x94>
  803ccc:	14400043 	ldbu	r17,1(r2)
  803cd0:	14000084 	addi	r16,r2,2
  803cd4:	002f883a 	mov	r23,zero
  803cd8:	90000326 	beq	r18,zero,803ce8 <_strtol_r+0xa8>
  803cdc:	00800404 	movi	r2,16
  803ce0:	90800a1e 	bne	r18,r2,803d0c <_strtol_r+0xcc>
  803ce4:	00005406 	br	803e38 <_strtol_r+0x1f8>
  803ce8:	00800c04 	movi	r2,48
  803cec:	8880501e 	bne	r17,r2,803e30 <_strtol_r+0x1f0>
  803cf0:	80800003 	ldbu	r2,0(r16)
  803cf4:	00c01604 	movi	r3,88
  803cf8:	108037cc 	andi	r2,r2,223
  803cfc:	10c0481e 	bne	r2,r3,803e20 <_strtol_r+0x1e0>
  803d00:	84400043 	ldbu	r17,1(r16)
  803d04:	04800404 	movi	r18,16
  803d08:	84000084 	addi	r16,r16,2
  803d0c:	00e00034 	movhi	r3,32768
  803d10:	18ffffc4 	addi	r3,r3,-1
  803d14:	b8c7883a 	add	r3,r23,r3
  803d18:	1809883a 	mov	r4,r3
  803d1c:	900b883a 	mov	r5,r18
  803d20:	d8c00015 	stw	r3,0(sp)
  803d24:	08018e80 	call	8018e8 <__umodsi3>
  803d28:	d8c00017 	ldw	r3,0(sp)
  803d2c:	900b883a 	mov	r5,r18
  803d30:	102d883a 	mov	r22,r2
  803d34:	1809883a 	mov	r4,r3
  803d38:	08018840 	call	801884 <__udivsi3>
  803d3c:	100d883a 	mov	r6,r2
  803d40:	0009883a 	mov	r4,zero
  803d44:	0005883a 	mov	r2,zero
  803d48:	01c00044 	movi	r7,1
  803d4c:	023fffc4 	movi	r8,-1
  803d50:	9c47883a 	add	r3,r19,r17
  803d54:	18c00043 	ldbu	r3,1(r3)
  803d58:	1940010c 	andi	r5,r3,4
  803d5c:	28000226 	beq	r5,zero,803d68 <_strtol_r+0x128>
  803d60:	8c7ff404 	addi	r17,r17,-48
  803d64:	00000706 	br	803d84 <_strtol_r+0x144>
  803d68:	18c000cc 	andi	r3,r3,3
  803d6c:	18001a26 	beq	r3,zero,803dd8 <_strtol_r+0x198>
  803d70:	19c00226 	beq	r3,r7,803d7c <_strtol_r+0x13c>
  803d74:	00c015c4 	movi	r3,87
  803d78:	00000106 	br	803d80 <_strtol_r+0x140>
  803d7c:	00c00dc4 	movi	r3,55
  803d80:	88e3c83a 	sub	r17,r17,r3
  803d84:	8c80140e 	bge	r17,r18,803dd8 <_strtol_r+0x198>
  803d88:	22001026 	beq	r4,r8,803dcc <_strtol_r+0x18c>
  803d8c:	30800e36 	bltu	r6,r2,803dc8 <_strtol_r+0x188>
  803d90:	1180011e 	bne	r2,r6,803d98 <_strtol_r+0x158>
  803d94:	b4400c16 	blt	r22,r17,803dc8 <_strtol_r+0x188>
  803d98:	1009883a 	mov	r4,r2
  803d9c:	900b883a 	mov	r5,r18
  803da0:	d9800015 	stw	r6,0(sp)
  803da4:	d9c00115 	stw	r7,4(sp)
  803da8:	da000215 	stw	r8,8(sp)
  803dac:	08019400 	call	801940 <__mulsi3>
  803db0:	8885883a 	add	r2,r17,r2
  803db4:	01000044 	movi	r4,1
  803db8:	d9800017 	ldw	r6,0(sp)
  803dbc:	d9c00117 	ldw	r7,4(sp)
  803dc0:	da000217 	ldw	r8,8(sp)
  803dc4:	00000106 	br	803dcc <_strtol_r+0x18c>
  803dc8:	013fffc4 	movi	r4,-1
  803dcc:	84400003 	ldbu	r17,0(r16)
  803dd0:	84000044 	addi	r16,r16,1
  803dd4:	003fde06 	br	803d50 <__alt_data_end+0xff803d50>
  803dd8:	00ffffc4 	movi	r3,-1
  803ddc:	20c0071e 	bne	r4,r3,803dfc <_strtol_r+0x1bc>
  803de0:	00a00034 	movhi	r2,32768
  803de4:	10c5883a 	add	r2,r2,r3
  803de8:	00c00884 	movi	r3,34
  803dec:	a8c00015 	stw	r3,0(r21)
  803df0:	b885883a 	add	r2,r23,r2
  803df4:	e000051e 	bne	fp,zero,803e0c <_strtol_r+0x1cc>
  803df8:	00001206 	br	803e44 <_strtol_r+0x204>
  803dfc:	b8000126 	beq	r23,zero,803e04 <_strtol_r+0x1c4>
  803e00:	0085c83a 	sub	r2,zero,r2
  803e04:	e0000f26 	beq	fp,zero,803e44 <_strtol_r+0x204>
  803e08:	20000226 	beq	r4,zero,803e14 <_strtol_r+0x1d4>
  803e0c:	843fffc4 	addi	r16,r16,-1
  803e10:	00000106 	br	803e18 <_strtol_r+0x1d8>
  803e14:	a021883a 	mov	r16,r20
  803e18:	e4000015 	stw	r16,0(fp)
  803e1c:	00000906 	br	803e44 <_strtol_r+0x204>
  803e20:	04400c04 	movi	r17,48
  803e24:	903fb91e 	bne	r18,zero,803d0c <__alt_data_end+0xff803d0c>
  803e28:	04800204 	movi	r18,8
  803e2c:	003fb706 	br	803d0c <__alt_data_end+0xff803d0c>
  803e30:	04800284 	movi	r18,10
  803e34:	003fb506 	br	803d0c <__alt_data_end+0xff803d0c>
  803e38:	00800c04 	movi	r2,48
  803e3c:	88bfac26 	beq	r17,r2,803cf0 <__alt_data_end+0xff803cf0>
  803e40:	003fb206 	br	803d0c <__alt_data_end+0xff803d0c>
  803e44:	dfc00c17 	ldw	ra,48(sp)
  803e48:	df000b17 	ldw	fp,44(sp)
  803e4c:	ddc00a17 	ldw	r23,40(sp)
  803e50:	dd800917 	ldw	r22,36(sp)
  803e54:	dd400817 	ldw	r21,32(sp)
  803e58:	dd000717 	ldw	r20,28(sp)
  803e5c:	dcc00617 	ldw	r19,24(sp)
  803e60:	dc800517 	ldw	r18,20(sp)
  803e64:	dc400417 	ldw	r17,16(sp)
  803e68:	dc000317 	ldw	r16,12(sp)
  803e6c:	dec00d04 	addi	sp,sp,52
  803e70:	f800283a 	ret

00803e74 <strtol>:
  803e74:	00802034 	movhi	r2,128
  803e78:	10971504 	addi	r2,r2,23636
  803e7c:	300f883a 	mov	r7,r6
  803e80:	280d883a 	mov	r6,r5
  803e84:	200b883a 	mov	r5,r4
  803e88:	11000017 	ldw	r4,0(r2)
  803e8c:	0803c401 	jmpi	803c40 <_strtol_r>

00803e90 <print_repeat>:
  803e90:	defffb04 	addi	sp,sp,-20
  803e94:	dc800315 	stw	r18,12(sp)
  803e98:	dc400215 	stw	r17,8(sp)
  803e9c:	dc000115 	stw	r16,4(sp)
  803ea0:	dfc00415 	stw	ra,16(sp)
  803ea4:	2025883a 	mov	r18,r4
  803ea8:	2823883a 	mov	r17,r5
  803eac:	d9800005 	stb	r6,0(sp)
  803eb0:	3821883a 	mov	r16,r7
  803eb4:	04000a0e 	bge	zero,r16,803ee0 <print_repeat+0x50>
  803eb8:	88800117 	ldw	r2,4(r17)
  803ebc:	01c00044 	movi	r7,1
  803ec0:	d80d883a 	mov	r6,sp
  803ec4:	880b883a 	mov	r5,r17
  803ec8:	9009883a 	mov	r4,r18
  803ecc:	103ee83a 	callr	r2
  803ed0:	843fffc4 	addi	r16,r16,-1
  803ed4:	103ff726 	beq	r2,zero,803eb4 <__alt_data_end+0xff803eb4>
  803ed8:	00bfffc4 	movi	r2,-1
  803edc:	00000106 	br	803ee4 <print_repeat+0x54>
  803ee0:	0005883a 	mov	r2,zero
  803ee4:	dfc00417 	ldw	ra,16(sp)
  803ee8:	dc800317 	ldw	r18,12(sp)
  803eec:	dc400217 	ldw	r17,8(sp)
  803ef0:	dc000117 	ldw	r16,4(sp)
  803ef4:	dec00504 	addi	sp,sp,20
  803ef8:	f800283a 	ret

00803efc <___svfprintf_internal_r>:
  803efc:	deffe504 	addi	sp,sp,-108
  803f00:	d8c00804 	addi	r3,sp,32
  803f04:	ddc01815 	stw	r23,96(sp)
  803f08:	dd801715 	stw	r22,92(sp)
  803f0c:	dd401615 	stw	r21,88(sp)
  803f10:	dd001515 	stw	r20,84(sp)
  803f14:	dcc01415 	stw	r19,80(sp)
  803f18:	dc801315 	stw	r18,76(sp)
  803f1c:	dc401215 	stw	r17,72(sp)
  803f20:	dc001115 	stw	r16,68(sp)
  803f24:	dfc01a15 	stw	ra,104(sp)
  803f28:	df001915 	stw	fp,100(sp)
  803f2c:	2029883a 	mov	r20,r4
  803f30:	2823883a 	mov	r17,r5
  803f34:	382d883a 	mov	r22,r7
  803f38:	d9800f15 	stw	r6,60(sp)
  803f3c:	0021883a 	mov	r16,zero
  803f40:	d8000e15 	stw	zero,56(sp)
  803f44:	d8000a15 	stw	zero,40(sp)
  803f48:	002b883a 	mov	r21,zero
  803f4c:	0027883a 	mov	r19,zero
  803f50:	0025883a 	mov	r18,zero
  803f54:	d8000c15 	stw	zero,48(sp)
  803f58:	d8000b15 	stw	zero,44(sp)
  803f5c:	002f883a 	mov	r23,zero
  803f60:	d8c00915 	stw	r3,36(sp)
  803f64:	d8c00f17 	ldw	r3,60(sp)
  803f68:	19000003 	ldbu	r4,0(r3)
  803f6c:	20803fcc 	andi	r2,r4,255
  803f70:	1080201c 	xori	r2,r2,128
  803f74:	10bfe004 	addi	r2,r2,-128
  803f78:	10011e26 	beq	r2,zero,8043f4 <___svfprintf_internal_r+0x4f8>
  803f7c:	00c00044 	movi	r3,1
  803f80:	b8c01426 	beq	r23,r3,803fd4 <___svfprintf_internal_r+0xd8>
  803f84:	1dc00216 	blt	r3,r23,803f90 <___svfprintf_internal_r+0x94>
  803f88:	b8000626 	beq	r23,zero,803fa4 <___svfprintf_internal_r+0xa8>
  803f8c:	00011506 	br	8043e4 <___svfprintf_internal_r+0x4e8>
  803f90:	01400084 	movi	r5,2
  803f94:	b9401d26 	beq	r23,r5,80400c <___svfprintf_internal_r+0x110>
  803f98:	014000c4 	movi	r5,3
  803f9c:	b9402b26 	beq	r23,r5,80404c <___svfprintf_internal_r+0x150>
  803fa0:	00011006 	br	8043e4 <___svfprintf_internal_r+0x4e8>
  803fa4:	01400944 	movi	r5,37
  803fa8:	1140fc26 	beq	r2,r5,80439c <___svfprintf_internal_r+0x4a0>
  803fac:	88800117 	ldw	r2,4(r17)
  803fb0:	d9000005 	stb	r4,0(sp)
  803fb4:	01c00044 	movi	r7,1
  803fb8:	d80d883a 	mov	r6,sp
  803fbc:	880b883a 	mov	r5,r17
  803fc0:	a009883a 	mov	r4,r20
  803fc4:	103ee83a 	callr	r2
  803fc8:	1000d81e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  803fcc:	84000044 	addi	r16,r16,1
  803fd0:	00010406 	br	8043e4 <___svfprintf_internal_r+0x4e8>
  803fd4:	01400c04 	movi	r5,48
  803fd8:	1140fa26 	beq	r2,r5,8043c4 <___svfprintf_internal_r+0x4c8>
  803fdc:	01400944 	movi	r5,37
  803fe0:	11400a1e 	bne	r2,r5,80400c <___svfprintf_internal_r+0x110>
  803fe4:	d8800005 	stb	r2,0(sp)
  803fe8:	88800117 	ldw	r2,4(r17)
  803fec:	b80f883a 	mov	r7,r23
  803ff0:	d80d883a 	mov	r6,sp
  803ff4:	880b883a 	mov	r5,r17
  803ff8:	a009883a 	mov	r4,r20
  803ffc:	103ee83a 	callr	r2
  804000:	1000ca1e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  804004:	84000044 	addi	r16,r16,1
  804008:	0000f506 	br	8043e0 <___svfprintf_internal_r+0x4e4>
  80400c:	25fff404 	addi	r23,r4,-48
  804010:	bdc03fcc 	andi	r23,r23,255
  804014:	00c00244 	movi	r3,9
  804018:	1dc00936 	bltu	r3,r23,804040 <___svfprintf_internal_r+0x144>
  80401c:	00bfffc4 	movi	r2,-1
  804020:	90800426 	beq	r18,r2,804034 <___svfprintf_internal_r+0x138>
  804024:	01400284 	movi	r5,10
  804028:	9009883a 	mov	r4,r18
  80402c:	08019400 	call	801940 <__mulsi3>
  804030:	00000106 	br	804038 <___svfprintf_internal_r+0x13c>
  804034:	0005883a 	mov	r2,zero
  804038:	b8a5883a 	add	r18,r23,r2
  80403c:	0000e206 	br	8043c8 <___svfprintf_internal_r+0x4cc>
  804040:	01400b84 	movi	r5,46
  804044:	1140e426 	beq	r2,r5,8043d8 <___svfprintf_internal_r+0x4dc>
  804048:	05c00084 	movi	r23,2
  80404c:	213ff404 	addi	r4,r4,-48
  804050:	27003fcc 	andi	fp,r4,255
  804054:	00c00244 	movi	r3,9
  804058:	1f000936 	bltu	r3,fp,804080 <___svfprintf_internal_r+0x184>
  80405c:	00bfffc4 	movi	r2,-1
  804060:	98800426 	beq	r19,r2,804074 <___svfprintf_internal_r+0x178>
  804064:	01400284 	movi	r5,10
  804068:	9809883a 	mov	r4,r19
  80406c:	08019400 	call	801940 <__mulsi3>
  804070:	00000106 	br	804078 <___svfprintf_internal_r+0x17c>
  804074:	0005883a 	mov	r2,zero
  804078:	e0a7883a 	add	r19,fp,r2
  80407c:	0000d906 	br	8043e4 <___svfprintf_internal_r+0x4e8>
  804080:	00c01b04 	movi	r3,108
  804084:	10c0d226 	beq	r2,r3,8043d0 <___svfprintf_internal_r+0x4d4>
  804088:	013fffc4 	movi	r4,-1
  80408c:	99000226 	beq	r19,r4,804098 <___svfprintf_internal_r+0x19c>
  804090:	d8000b15 	stw	zero,44(sp)
  804094:	00000106 	br	80409c <___svfprintf_internal_r+0x1a0>
  804098:	04c00044 	movi	r19,1
  80409c:	01001a44 	movi	r4,105
  8040a0:	11001626 	beq	r2,r4,8040fc <___svfprintf_internal_r+0x200>
  8040a4:	20800916 	blt	r4,r2,8040cc <___svfprintf_internal_r+0x1d0>
  8040a8:	010018c4 	movi	r4,99
  8040ac:	11008826 	beq	r2,r4,8042d0 <___svfprintf_internal_r+0x3d4>
  8040b0:	01001904 	movi	r4,100
  8040b4:	11001126 	beq	r2,r4,8040fc <___svfprintf_internal_r+0x200>
  8040b8:	01001604 	movi	r4,88
  8040bc:	1100c81e 	bne	r2,r4,8043e0 <___svfprintf_internal_r+0x4e4>
  8040c0:	00c00044 	movi	r3,1
  8040c4:	d8c00e15 	stw	r3,56(sp)
  8040c8:	00001506 	br	804120 <___svfprintf_internal_r+0x224>
  8040cc:	01001cc4 	movi	r4,115
  8040d0:	11009826 	beq	r2,r4,804334 <___svfprintf_internal_r+0x438>
  8040d4:	20800416 	blt	r4,r2,8040e8 <___svfprintf_internal_r+0x1ec>
  8040d8:	01001bc4 	movi	r4,111
  8040dc:	1100c01e 	bne	r2,r4,8043e0 <___svfprintf_internal_r+0x4e4>
  8040e0:	05400204 	movi	r21,8
  8040e4:	00000f06 	br	804124 <___svfprintf_internal_r+0x228>
  8040e8:	01001d44 	movi	r4,117
  8040ec:	11000d26 	beq	r2,r4,804124 <___svfprintf_internal_r+0x228>
  8040f0:	01001e04 	movi	r4,120
  8040f4:	11000a26 	beq	r2,r4,804120 <___svfprintf_internal_r+0x224>
  8040f8:	0000b906 	br	8043e0 <___svfprintf_internal_r+0x4e4>
  8040fc:	d8c00a17 	ldw	r3,40(sp)
  804100:	b7000104 	addi	fp,r22,4
  804104:	18000726 	beq	r3,zero,804124 <___svfprintf_internal_r+0x228>
  804108:	df000d15 	stw	fp,52(sp)
  80410c:	b5c00017 	ldw	r23,0(r22)
  804110:	b800080e 	bge	r23,zero,804134 <___svfprintf_internal_r+0x238>
  804114:	05efc83a 	sub	r23,zero,r23
  804118:	02400044 	movi	r9,1
  80411c:	00000606 	br	804138 <___svfprintf_internal_r+0x23c>
  804120:	05400404 	movi	r21,16
  804124:	b0c00104 	addi	r3,r22,4
  804128:	d8c00d15 	stw	r3,52(sp)
  80412c:	b5c00017 	ldw	r23,0(r22)
  804130:	d8000a15 	stw	zero,40(sp)
  804134:	0013883a 	mov	r9,zero
  804138:	d839883a 	mov	fp,sp
  80413c:	b8001726 	beq	r23,zero,80419c <___svfprintf_internal_r+0x2a0>
  804140:	a80b883a 	mov	r5,r21
  804144:	b809883a 	mov	r4,r23
  804148:	da401015 	stw	r9,64(sp)
  80414c:	08018840 	call	801884 <__udivsi3>
  804150:	a80b883a 	mov	r5,r21
  804154:	1009883a 	mov	r4,r2
  804158:	102d883a 	mov	r22,r2
  80415c:	08019400 	call	801940 <__mulsi3>
  804160:	b885c83a 	sub	r2,r23,r2
  804164:	00c00244 	movi	r3,9
  804168:	da401017 	ldw	r9,64(sp)
  80416c:	18800216 	blt	r3,r2,804178 <___svfprintf_internal_r+0x27c>
  804170:	10800c04 	addi	r2,r2,48
  804174:	00000506 	br	80418c <___svfprintf_internal_r+0x290>
  804178:	d8c00e17 	ldw	r3,56(sp)
  80417c:	18000226 	beq	r3,zero,804188 <___svfprintf_internal_r+0x28c>
  804180:	10800dc4 	addi	r2,r2,55
  804184:	00000106 	br	80418c <___svfprintf_internal_r+0x290>
  804188:	108015c4 	addi	r2,r2,87
  80418c:	e0800005 	stb	r2,0(fp)
  804190:	b02f883a 	mov	r23,r22
  804194:	e7000044 	addi	fp,fp,1
  804198:	003fe806 	br	80413c <__alt_data_end+0xff80413c>
  80419c:	e6efc83a 	sub	r23,fp,sp
  8041a0:	9dc5c83a 	sub	r2,r19,r23
  8041a4:	0080090e 	bge	zero,r2,8041cc <___svfprintf_internal_r+0x2d0>
  8041a8:	e085883a 	add	r2,fp,r2
  8041ac:	01400c04 	movi	r5,48
  8041b0:	d8c00917 	ldw	r3,36(sp)
  8041b4:	e009883a 	mov	r4,fp
  8041b8:	e0c0032e 	bgeu	fp,r3,8041c8 <___svfprintf_internal_r+0x2cc>
  8041bc:	e7000044 	addi	fp,fp,1
  8041c0:	21400005 	stb	r5,0(r4)
  8041c4:	e0bffa1e 	bne	fp,r2,8041b0 <__alt_data_end+0xff8041b0>
  8041c8:	e6efc83a 	sub	r23,fp,sp
  8041cc:	d8c00b17 	ldw	r3,44(sp)
  8041d0:	4dd1883a 	add	r8,r9,r23
  8041d4:	922dc83a 	sub	r22,r18,r8
  8041d8:	18001626 	beq	r3,zero,804234 <___svfprintf_internal_r+0x338>
  8041dc:	48000a26 	beq	r9,zero,804208 <___svfprintf_internal_r+0x30c>
  8041e0:	00800b44 	movi	r2,45
  8041e4:	d8800805 	stb	r2,32(sp)
  8041e8:	88800117 	ldw	r2,4(r17)
  8041ec:	01c00044 	movi	r7,1
  8041f0:	d9800804 	addi	r6,sp,32
  8041f4:	880b883a 	mov	r5,r17
  8041f8:	a009883a 	mov	r4,r20
  8041fc:	103ee83a 	callr	r2
  804200:	10004a1e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  804204:	84000044 	addi	r16,r16,1
  804208:	0580070e 	bge	zero,r22,804228 <___svfprintf_internal_r+0x32c>
  80420c:	b00f883a 	mov	r7,r22
  804210:	01800c04 	movi	r6,48
  804214:	880b883a 	mov	r5,r17
  804218:	a009883a 	mov	r4,r20
  80421c:	0803e900 	call	803e90 <print_repeat>
  804220:	1000421e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  804224:	85a1883a 	add	r16,r16,r22
  804228:	e02d883a 	mov	r22,fp
  80422c:	bf2fc83a 	sub	r23,r23,fp
  804230:	00002006 	br	8042b4 <___svfprintf_internal_r+0x3b8>
  804234:	0580090e 	bge	zero,r22,80425c <___svfprintf_internal_r+0x360>
  804238:	b00f883a 	mov	r7,r22
  80423c:	01800804 	movi	r6,32
  804240:	880b883a 	mov	r5,r17
  804244:	a009883a 	mov	r4,r20
  804248:	da401015 	stw	r9,64(sp)
  80424c:	0803e900 	call	803e90 <print_repeat>
  804250:	da401017 	ldw	r9,64(sp)
  804254:	1000351e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  804258:	85a1883a 	add	r16,r16,r22
  80425c:	483ff226 	beq	r9,zero,804228 <__alt_data_end+0xff804228>
  804260:	00800b44 	movi	r2,45
  804264:	d8800805 	stb	r2,32(sp)
  804268:	88800117 	ldw	r2,4(r17)
  80426c:	01c00044 	movi	r7,1
  804270:	d9800804 	addi	r6,sp,32
  804274:	880b883a 	mov	r5,r17
  804278:	a009883a 	mov	r4,r20
  80427c:	103ee83a 	callr	r2
  804280:	10002a1e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  804284:	84000044 	addi	r16,r16,1
  804288:	003fe706 	br	804228 <__alt_data_end+0xff804228>
  80428c:	b5bfffc4 	addi	r22,r22,-1
  804290:	b0800003 	ldbu	r2,0(r22)
  804294:	01c00044 	movi	r7,1
  804298:	d9800804 	addi	r6,sp,32
  80429c:	d8800805 	stb	r2,32(sp)
  8042a0:	88800117 	ldw	r2,4(r17)
  8042a4:	880b883a 	mov	r5,r17
  8042a8:	a009883a 	mov	r4,r20
  8042ac:	103ee83a 	callr	r2
  8042b0:	10001e1e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  8042b4:	8585c83a 	sub	r2,r16,r22
  8042b8:	b5c9883a 	add	r4,r22,r23
  8042bc:	e085883a 	add	r2,fp,r2
  8042c0:	013ff216 	blt	zero,r4,80428c <__alt_data_end+0xff80428c>
  8042c4:	1021883a 	mov	r16,r2
  8042c8:	dd800d17 	ldw	r22,52(sp)
  8042cc:	00004406 	br	8043e0 <___svfprintf_internal_r+0x4e4>
  8042d0:	00800044 	movi	r2,1
  8042d4:	1480080e 	bge	r2,r18,8042f8 <___svfprintf_internal_r+0x3fc>
  8042d8:	95ffffc4 	addi	r23,r18,-1
  8042dc:	b80f883a 	mov	r7,r23
  8042e0:	01800804 	movi	r6,32
  8042e4:	880b883a 	mov	r5,r17
  8042e8:	a009883a 	mov	r4,r20
  8042ec:	0803e900 	call	803e90 <print_repeat>
  8042f0:	10000e1e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  8042f4:	85e1883a 	add	r16,r16,r23
  8042f8:	b0800017 	ldw	r2,0(r22)
  8042fc:	01c00044 	movi	r7,1
  804300:	d80d883a 	mov	r6,sp
  804304:	d8800005 	stb	r2,0(sp)
  804308:	88800117 	ldw	r2,4(r17)
  80430c:	880b883a 	mov	r5,r17
  804310:	a009883a 	mov	r4,r20
  804314:	b5c00104 	addi	r23,r22,4
  804318:	103ee83a 	callr	r2
  80431c:	1000031e 	bne	r2,zero,80432c <___svfprintf_internal_r+0x430>
  804320:	84000044 	addi	r16,r16,1
  804324:	b82d883a 	mov	r22,r23
  804328:	00002d06 	br	8043e0 <___svfprintf_internal_r+0x4e4>
  80432c:	00bfffc4 	movi	r2,-1
  804330:	00003106 	br	8043f8 <___svfprintf_internal_r+0x4fc>
  804334:	b5c00017 	ldw	r23,0(r22)
  804338:	b7000104 	addi	fp,r22,4
  80433c:	b809883a 	mov	r4,r23
  804340:	0803a6c0 	call	803a6c <strlen>
  804344:	9091c83a 	sub	r8,r18,r2
  804348:	102d883a 	mov	r22,r2
  80434c:	0200090e 	bge	zero,r8,804374 <___svfprintf_internal_r+0x478>
  804350:	400f883a 	mov	r7,r8
  804354:	01800804 	movi	r6,32
  804358:	880b883a 	mov	r5,r17
  80435c:	a009883a 	mov	r4,r20
  804360:	da001015 	stw	r8,64(sp)
  804364:	0803e900 	call	803e90 <print_repeat>
  804368:	da001017 	ldw	r8,64(sp)
  80436c:	103fef1e 	bne	r2,zero,80432c <__alt_data_end+0xff80432c>
  804370:	8221883a 	add	r16,r16,r8
  804374:	88800117 	ldw	r2,4(r17)
  804378:	b00f883a 	mov	r7,r22
  80437c:	b80d883a 	mov	r6,r23
  804380:	880b883a 	mov	r5,r17
  804384:	a009883a 	mov	r4,r20
  804388:	103ee83a 	callr	r2
  80438c:	103fe71e 	bne	r2,zero,80432c <__alt_data_end+0xff80432c>
  804390:	85a1883a 	add	r16,r16,r22
  804394:	e02d883a 	mov	r22,fp
  804398:	00001106 	br	8043e0 <___svfprintf_internal_r+0x4e4>
  80439c:	00c00044 	movi	r3,1
  8043a0:	04ffffc4 	movi	r19,-1
  8043a4:	d8000e15 	stw	zero,56(sp)
  8043a8:	d8c00a15 	stw	r3,40(sp)
  8043ac:	05400284 	movi	r21,10
  8043b0:	9825883a 	mov	r18,r19
  8043b4:	d8000c15 	stw	zero,48(sp)
  8043b8:	d8000b15 	stw	zero,44(sp)
  8043bc:	182f883a 	mov	r23,r3
  8043c0:	00000806 	br	8043e4 <___svfprintf_internal_r+0x4e8>
  8043c4:	ddc00b15 	stw	r23,44(sp)
  8043c8:	05c00084 	movi	r23,2
  8043cc:	00000506 	br	8043e4 <___svfprintf_internal_r+0x4e8>
  8043d0:	00c00044 	movi	r3,1
  8043d4:	d8c00c15 	stw	r3,48(sp)
  8043d8:	05c000c4 	movi	r23,3
  8043dc:	00000106 	br	8043e4 <___svfprintf_internal_r+0x4e8>
  8043e0:	002f883a 	mov	r23,zero
  8043e4:	d8c00f17 	ldw	r3,60(sp)
  8043e8:	18c00044 	addi	r3,r3,1
  8043ec:	d8c00f15 	stw	r3,60(sp)
  8043f0:	003edc06 	br	803f64 <__alt_data_end+0xff803f64>
  8043f4:	8005883a 	mov	r2,r16
  8043f8:	dfc01a17 	ldw	ra,104(sp)
  8043fc:	df001917 	ldw	fp,100(sp)
  804400:	ddc01817 	ldw	r23,96(sp)
  804404:	dd801717 	ldw	r22,92(sp)
  804408:	dd401617 	ldw	r21,88(sp)
  80440c:	dd001517 	ldw	r20,84(sp)
  804410:	dcc01417 	ldw	r19,80(sp)
  804414:	dc801317 	ldw	r18,76(sp)
  804418:	dc401217 	ldw	r17,72(sp)
  80441c:	dc001117 	ldw	r16,68(sp)
  804420:	dec01b04 	addi	sp,sp,108
  804424:	f800283a 	ret

00804428 <__vfprintf_internal_unused>:
  804428:	00802034 	movhi	r2,128
  80442c:	10971504 	addi	r2,r2,23636
  804430:	300f883a 	mov	r7,r6
  804434:	280d883a 	mov	r6,r5
  804438:	200b883a 	mov	r5,r4
  80443c:	11000017 	ldw	r4,0(r2)
  804440:	0803efc1 	jmpi	803efc <___svfprintf_internal_r>

00804444 <print_repeat>:
  804444:	defffb04 	addi	sp,sp,-20
  804448:	dc800315 	stw	r18,12(sp)
  80444c:	dc400215 	stw	r17,8(sp)
  804450:	dc000115 	stw	r16,4(sp)
  804454:	dfc00415 	stw	ra,16(sp)
  804458:	2025883a 	mov	r18,r4
  80445c:	2823883a 	mov	r17,r5
  804460:	d9800005 	stb	r6,0(sp)
  804464:	3821883a 	mov	r16,r7
  804468:	04000a0e 	bge	zero,r16,804494 <print_repeat+0x50>
  80446c:	88800117 	ldw	r2,4(r17)
  804470:	01c00044 	movi	r7,1
  804474:	d80d883a 	mov	r6,sp
  804478:	880b883a 	mov	r5,r17
  80447c:	9009883a 	mov	r4,r18
  804480:	103ee83a 	callr	r2
  804484:	843fffc4 	addi	r16,r16,-1
  804488:	103ff726 	beq	r2,zero,804468 <__alt_data_end+0xff804468>
  80448c:	00bfffc4 	movi	r2,-1
  804490:	00000106 	br	804498 <print_repeat+0x54>
  804494:	0005883a 	mov	r2,zero
  804498:	dfc00417 	ldw	ra,16(sp)
  80449c:	dc800317 	ldw	r18,12(sp)
  8044a0:	dc400217 	ldw	r17,8(sp)
  8044a4:	dc000117 	ldw	r16,4(sp)
  8044a8:	dec00504 	addi	sp,sp,20
  8044ac:	f800283a 	ret

008044b0 <___vfprintf_internal_r>:
  8044b0:	deffe504 	addi	sp,sp,-108
  8044b4:	d8c00804 	addi	r3,sp,32
  8044b8:	ddc01815 	stw	r23,96(sp)
  8044bc:	dd801715 	stw	r22,92(sp)
  8044c0:	dd401615 	stw	r21,88(sp)
  8044c4:	dd001515 	stw	r20,84(sp)
  8044c8:	dcc01415 	stw	r19,80(sp)
  8044cc:	dc801315 	stw	r18,76(sp)
  8044d0:	dc401215 	stw	r17,72(sp)
  8044d4:	dc001115 	stw	r16,68(sp)
  8044d8:	dfc01a15 	stw	ra,104(sp)
  8044dc:	df001915 	stw	fp,100(sp)
  8044e0:	2029883a 	mov	r20,r4
  8044e4:	2823883a 	mov	r17,r5
  8044e8:	382d883a 	mov	r22,r7
  8044ec:	d9800f15 	stw	r6,60(sp)
  8044f0:	0021883a 	mov	r16,zero
  8044f4:	d8000e15 	stw	zero,56(sp)
  8044f8:	d8000a15 	stw	zero,40(sp)
  8044fc:	002b883a 	mov	r21,zero
  804500:	0027883a 	mov	r19,zero
  804504:	0025883a 	mov	r18,zero
  804508:	d8000c15 	stw	zero,48(sp)
  80450c:	d8000b15 	stw	zero,44(sp)
  804510:	002f883a 	mov	r23,zero
  804514:	d8c00915 	stw	r3,36(sp)
  804518:	d8c00f17 	ldw	r3,60(sp)
  80451c:	19000003 	ldbu	r4,0(r3)
  804520:	20803fcc 	andi	r2,r4,255
  804524:	1080201c 	xori	r2,r2,128
  804528:	10bfe004 	addi	r2,r2,-128
  80452c:	10011e26 	beq	r2,zero,8049a8 <___vfprintf_internal_r+0x4f8>
  804530:	00c00044 	movi	r3,1
  804534:	b8c01426 	beq	r23,r3,804588 <___vfprintf_internal_r+0xd8>
  804538:	1dc00216 	blt	r3,r23,804544 <___vfprintf_internal_r+0x94>
  80453c:	b8000626 	beq	r23,zero,804558 <___vfprintf_internal_r+0xa8>
  804540:	00011506 	br	804998 <___vfprintf_internal_r+0x4e8>
  804544:	01400084 	movi	r5,2
  804548:	b9401d26 	beq	r23,r5,8045c0 <___vfprintf_internal_r+0x110>
  80454c:	014000c4 	movi	r5,3
  804550:	b9402b26 	beq	r23,r5,804600 <___vfprintf_internal_r+0x150>
  804554:	00011006 	br	804998 <___vfprintf_internal_r+0x4e8>
  804558:	01400944 	movi	r5,37
  80455c:	1140fc26 	beq	r2,r5,804950 <___vfprintf_internal_r+0x4a0>
  804560:	88800117 	ldw	r2,4(r17)
  804564:	d9000005 	stb	r4,0(sp)
  804568:	01c00044 	movi	r7,1
  80456c:	d80d883a 	mov	r6,sp
  804570:	880b883a 	mov	r5,r17
  804574:	a009883a 	mov	r4,r20
  804578:	103ee83a 	callr	r2
  80457c:	1000d81e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  804580:	84000044 	addi	r16,r16,1
  804584:	00010406 	br	804998 <___vfprintf_internal_r+0x4e8>
  804588:	01400c04 	movi	r5,48
  80458c:	1140fa26 	beq	r2,r5,804978 <___vfprintf_internal_r+0x4c8>
  804590:	01400944 	movi	r5,37
  804594:	11400a1e 	bne	r2,r5,8045c0 <___vfprintf_internal_r+0x110>
  804598:	d8800005 	stb	r2,0(sp)
  80459c:	88800117 	ldw	r2,4(r17)
  8045a0:	b80f883a 	mov	r7,r23
  8045a4:	d80d883a 	mov	r6,sp
  8045a8:	880b883a 	mov	r5,r17
  8045ac:	a009883a 	mov	r4,r20
  8045b0:	103ee83a 	callr	r2
  8045b4:	1000ca1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  8045b8:	84000044 	addi	r16,r16,1
  8045bc:	0000f506 	br	804994 <___vfprintf_internal_r+0x4e4>
  8045c0:	25fff404 	addi	r23,r4,-48
  8045c4:	bdc03fcc 	andi	r23,r23,255
  8045c8:	00c00244 	movi	r3,9
  8045cc:	1dc00936 	bltu	r3,r23,8045f4 <___vfprintf_internal_r+0x144>
  8045d0:	00bfffc4 	movi	r2,-1
  8045d4:	90800426 	beq	r18,r2,8045e8 <___vfprintf_internal_r+0x138>
  8045d8:	01400284 	movi	r5,10
  8045dc:	9009883a 	mov	r4,r18
  8045e0:	08019400 	call	801940 <__mulsi3>
  8045e4:	00000106 	br	8045ec <___vfprintf_internal_r+0x13c>
  8045e8:	0005883a 	mov	r2,zero
  8045ec:	b8a5883a 	add	r18,r23,r2
  8045f0:	0000e206 	br	80497c <___vfprintf_internal_r+0x4cc>
  8045f4:	01400b84 	movi	r5,46
  8045f8:	1140e426 	beq	r2,r5,80498c <___vfprintf_internal_r+0x4dc>
  8045fc:	05c00084 	movi	r23,2
  804600:	213ff404 	addi	r4,r4,-48
  804604:	27003fcc 	andi	fp,r4,255
  804608:	00c00244 	movi	r3,9
  80460c:	1f000936 	bltu	r3,fp,804634 <___vfprintf_internal_r+0x184>
  804610:	00bfffc4 	movi	r2,-1
  804614:	98800426 	beq	r19,r2,804628 <___vfprintf_internal_r+0x178>
  804618:	01400284 	movi	r5,10
  80461c:	9809883a 	mov	r4,r19
  804620:	08019400 	call	801940 <__mulsi3>
  804624:	00000106 	br	80462c <___vfprintf_internal_r+0x17c>
  804628:	0005883a 	mov	r2,zero
  80462c:	e0a7883a 	add	r19,fp,r2
  804630:	0000d906 	br	804998 <___vfprintf_internal_r+0x4e8>
  804634:	00c01b04 	movi	r3,108
  804638:	10c0d226 	beq	r2,r3,804984 <___vfprintf_internal_r+0x4d4>
  80463c:	013fffc4 	movi	r4,-1
  804640:	99000226 	beq	r19,r4,80464c <___vfprintf_internal_r+0x19c>
  804644:	d8000b15 	stw	zero,44(sp)
  804648:	00000106 	br	804650 <___vfprintf_internal_r+0x1a0>
  80464c:	04c00044 	movi	r19,1
  804650:	01001a44 	movi	r4,105
  804654:	11001626 	beq	r2,r4,8046b0 <___vfprintf_internal_r+0x200>
  804658:	20800916 	blt	r4,r2,804680 <___vfprintf_internal_r+0x1d0>
  80465c:	010018c4 	movi	r4,99
  804660:	11008826 	beq	r2,r4,804884 <___vfprintf_internal_r+0x3d4>
  804664:	01001904 	movi	r4,100
  804668:	11001126 	beq	r2,r4,8046b0 <___vfprintf_internal_r+0x200>
  80466c:	01001604 	movi	r4,88
  804670:	1100c81e 	bne	r2,r4,804994 <___vfprintf_internal_r+0x4e4>
  804674:	00c00044 	movi	r3,1
  804678:	d8c00e15 	stw	r3,56(sp)
  80467c:	00001506 	br	8046d4 <___vfprintf_internal_r+0x224>
  804680:	01001cc4 	movi	r4,115
  804684:	11009826 	beq	r2,r4,8048e8 <___vfprintf_internal_r+0x438>
  804688:	20800416 	blt	r4,r2,80469c <___vfprintf_internal_r+0x1ec>
  80468c:	01001bc4 	movi	r4,111
  804690:	1100c01e 	bne	r2,r4,804994 <___vfprintf_internal_r+0x4e4>
  804694:	05400204 	movi	r21,8
  804698:	00000f06 	br	8046d8 <___vfprintf_internal_r+0x228>
  80469c:	01001d44 	movi	r4,117
  8046a0:	11000d26 	beq	r2,r4,8046d8 <___vfprintf_internal_r+0x228>
  8046a4:	01001e04 	movi	r4,120
  8046a8:	11000a26 	beq	r2,r4,8046d4 <___vfprintf_internal_r+0x224>
  8046ac:	0000b906 	br	804994 <___vfprintf_internal_r+0x4e4>
  8046b0:	d8c00a17 	ldw	r3,40(sp)
  8046b4:	b7000104 	addi	fp,r22,4
  8046b8:	18000726 	beq	r3,zero,8046d8 <___vfprintf_internal_r+0x228>
  8046bc:	df000d15 	stw	fp,52(sp)
  8046c0:	b5c00017 	ldw	r23,0(r22)
  8046c4:	b800080e 	bge	r23,zero,8046e8 <___vfprintf_internal_r+0x238>
  8046c8:	05efc83a 	sub	r23,zero,r23
  8046cc:	02400044 	movi	r9,1
  8046d0:	00000606 	br	8046ec <___vfprintf_internal_r+0x23c>
  8046d4:	05400404 	movi	r21,16
  8046d8:	b0c00104 	addi	r3,r22,4
  8046dc:	d8c00d15 	stw	r3,52(sp)
  8046e0:	b5c00017 	ldw	r23,0(r22)
  8046e4:	d8000a15 	stw	zero,40(sp)
  8046e8:	0013883a 	mov	r9,zero
  8046ec:	d839883a 	mov	fp,sp
  8046f0:	b8001726 	beq	r23,zero,804750 <___vfprintf_internal_r+0x2a0>
  8046f4:	a80b883a 	mov	r5,r21
  8046f8:	b809883a 	mov	r4,r23
  8046fc:	da401015 	stw	r9,64(sp)
  804700:	08018840 	call	801884 <__udivsi3>
  804704:	a80b883a 	mov	r5,r21
  804708:	1009883a 	mov	r4,r2
  80470c:	102d883a 	mov	r22,r2
  804710:	08019400 	call	801940 <__mulsi3>
  804714:	b885c83a 	sub	r2,r23,r2
  804718:	00c00244 	movi	r3,9
  80471c:	da401017 	ldw	r9,64(sp)
  804720:	18800216 	blt	r3,r2,80472c <___vfprintf_internal_r+0x27c>
  804724:	10800c04 	addi	r2,r2,48
  804728:	00000506 	br	804740 <___vfprintf_internal_r+0x290>
  80472c:	d8c00e17 	ldw	r3,56(sp)
  804730:	18000226 	beq	r3,zero,80473c <___vfprintf_internal_r+0x28c>
  804734:	10800dc4 	addi	r2,r2,55
  804738:	00000106 	br	804740 <___vfprintf_internal_r+0x290>
  80473c:	108015c4 	addi	r2,r2,87
  804740:	e0800005 	stb	r2,0(fp)
  804744:	b02f883a 	mov	r23,r22
  804748:	e7000044 	addi	fp,fp,1
  80474c:	003fe806 	br	8046f0 <__alt_data_end+0xff8046f0>
  804750:	e6efc83a 	sub	r23,fp,sp
  804754:	9dc5c83a 	sub	r2,r19,r23
  804758:	0080090e 	bge	zero,r2,804780 <___vfprintf_internal_r+0x2d0>
  80475c:	e085883a 	add	r2,fp,r2
  804760:	01400c04 	movi	r5,48
  804764:	d8c00917 	ldw	r3,36(sp)
  804768:	e009883a 	mov	r4,fp
  80476c:	e0c0032e 	bgeu	fp,r3,80477c <___vfprintf_internal_r+0x2cc>
  804770:	e7000044 	addi	fp,fp,1
  804774:	21400005 	stb	r5,0(r4)
  804778:	e0bffa1e 	bne	fp,r2,804764 <__alt_data_end+0xff804764>
  80477c:	e6efc83a 	sub	r23,fp,sp
  804780:	d8c00b17 	ldw	r3,44(sp)
  804784:	4dd1883a 	add	r8,r9,r23
  804788:	922dc83a 	sub	r22,r18,r8
  80478c:	18001626 	beq	r3,zero,8047e8 <___vfprintf_internal_r+0x338>
  804790:	48000a26 	beq	r9,zero,8047bc <___vfprintf_internal_r+0x30c>
  804794:	00800b44 	movi	r2,45
  804798:	d8800805 	stb	r2,32(sp)
  80479c:	88800117 	ldw	r2,4(r17)
  8047a0:	01c00044 	movi	r7,1
  8047a4:	d9800804 	addi	r6,sp,32
  8047a8:	880b883a 	mov	r5,r17
  8047ac:	a009883a 	mov	r4,r20
  8047b0:	103ee83a 	callr	r2
  8047b4:	10004a1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  8047b8:	84000044 	addi	r16,r16,1
  8047bc:	0580070e 	bge	zero,r22,8047dc <___vfprintf_internal_r+0x32c>
  8047c0:	b00f883a 	mov	r7,r22
  8047c4:	01800c04 	movi	r6,48
  8047c8:	880b883a 	mov	r5,r17
  8047cc:	a009883a 	mov	r4,r20
  8047d0:	08044440 	call	804444 <print_repeat>
  8047d4:	1000421e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  8047d8:	85a1883a 	add	r16,r16,r22
  8047dc:	e02d883a 	mov	r22,fp
  8047e0:	bf2fc83a 	sub	r23,r23,fp
  8047e4:	00002006 	br	804868 <___vfprintf_internal_r+0x3b8>
  8047e8:	0580090e 	bge	zero,r22,804810 <___vfprintf_internal_r+0x360>
  8047ec:	b00f883a 	mov	r7,r22
  8047f0:	01800804 	movi	r6,32
  8047f4:	880b883a 	mov	r5,r17
  8047f8:	a009883a 	mov	r4,r20
  8047fc:	da401015 	stw	r9,64(sp)
  804800:	08044440 	call	804444 <print_repeat>
  804804:	da401017 	ldw	r9,64(sp)
  804808:	1000351e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  80480c:	85a1883a 	add	r16,r16,r22
  804810:	483ff226 	beq	r9,zero,8047dc <__alt_data_end+0xff8047dc>
  804814:	00800b44 	movi	r2,45
  804818:	d8800805 	stb	r2,32(sp)
  80481c:	88800117 	ldw	r2,4(r17)
  804820:	01c00044 	movi	r7,1
  804824:	d9800804 	addi	r6,sp,32
  804828:	880b883a 	mov	r5,r17
  80482c:	a009883a 	mov	r4,r20
  804830:	103ee83a 	callr	r2
  804834:	10002a1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  804838:	84000044 	addi	r16,r16,1
  80483c:	003fe706 	br	8047dc <__alt_data_end+0xff8047dc>
  804840:	b5bfffc4 	addi	r22,r22,-1
  804844:	b0800003 	ldbu	r2,0(r22)
  804848:	01c00044 	movi	r7,1
  80484c:	d9800804 	addi	r6,sp,32
  804850:	d8800805 	stb	r2,32(sp)
  804854:	88800117 	ldw	r2,4(r17)
  804858:	880b883a 	mov	r5,r17
  80485c:	a009883a 	mov	r4,r20
  804860:	103ee83a 	callr	r2
  804864:	10001e1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  804868:	8585c83a 	sub	r2,r16,r22
  80486c:	b5c9883a 	add	r4,r22,r23
  804870:	e085883a 	add	r2,fp,r2
  804874:	013ff216 	blt	zero,r4,804840 <__alt_data_end+0xff804840>
  804878:	1021883a 	mov	r16,r2
  80487c:	dd800d17 	ldw	r22,52(sp)
  804880:	00004406 	br	804994 <___vfprintf_internal_r+0x4e4>
  804884:	00800044 	movi	r2,1
  804888:	1480080e 	bge	r2,r18,8048ac <___vfprintf_internal_r+0x3fc>
  80488c:	95ffffc4 	addi	r23,r18,-1
  804890:	b80f883a 	mov	r7,r23
  804894:	01800804 	movi	r6,32
  804898:	880b883a 	mov	r5,r17
  80489c:	a009883a 	mov	r4,r20
  8048a0:	08044440 	call	804444 <print_repeat>
  8048a4:	10000e1e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  8048a8:	85e1883a 	add	r16,r16,r23
  8048ac:	b0800017 	ldw	r2,0(r22)
  8048b0:	01c00044 	movi	r7,1
  8048b4:	d80d883a 	mov	r6,sp
  8048b8:	d8800005 	stb	r2,0(sp)
  8048bc:	88800117 	ldw	r2,4(r17)
  8048c0:	880b883a 	mov	r5,r17
  8048c4:	a009883a 	mov	r4,r20
  8048c8:	b5c00104 	addi	r23,r22,4
  8048cc:	103ee83a 	callr	r2
  8048d0:	1000031e 	bne	r2,zero,8048e0 <___vfprintf_internal_r+0x430>
  8048d4:	84000044 	addi	r16,r16,1
  8048d8:	b82d883a 	mov	r22,r23
  8048dc:	00002d06 	br	804994 <___vfprintf_internal_r+0x4e4>
  8048e0:	00bfffc4 	movi	r2,-1
  8048e4:	00003106 	br	8049ac <___vfprintf_internal_r+0x4fc>
  8048e8:	b5c00017 	ldw	r23,0(r22)
  8048ec:	b7000104 	addi	fp,r22,4
  8048f0:	b809883a 	mov	r4,r23
  8048f4:	0803a6c0 	call	803a6c <strlen>
  8048f8:	9091c83a 	sub	r8,r18,r2
  8048fc:	102d883a 	mov	r22,r2
  804900:	0200090e 	bge	zero,r8,804928 <___vfprintf_internal_r+0x478>
  804904:	400f883a 	mov	r7,r8
  804908:	01800804 	movi	r6,32
  80490c:	880b883a 	mov	r5,r17
  804910:	a009883a 	mov	r4,r20
  804914:	da001015 	stw	r8,64(sp)
  804918:	08044440 	call	804444 <print_repeat>
  80491c:	da001017 	ldw	r8,64(sp)
  804920:	103fef1e 	bne	r2,zero,8048e0 <__alt_data_end+0xff8048e0>
  804924:	8221883a 	add	r16,r16,r8
  804928:	88800117 	ldw	r2,4(r17)
  80492c:	b00f883a 	mov	r7,r22
  804930:	b80d883a 	mov	r6,r23
  804934:	880b883a 	mov	r5,r17
  804938:	a009883a 	mov	r4,r20
  80493c:	103ee83a 	callr	r2
  804940:	103fe71e 	bne	r2,zero,8048e0 <__alt_data_end+0xff8048e0>
  804944:	85a1883a 	add	r16,r16,r22
  804948:	e02d883a 	mov	r22,fp
  80494c:	00001106 	br	804994 <___vfprintf_internal_r+0x4e4>
  804950:	00c00044 	movi	r3,1
  804954:	04ffffc4 	movi	r19,-1
  804958:	d8000e15 	stw	zero,56(sp)
  80495c:	d8c00a15 	stw	r3,40(sp)
  804960:	05400284 	movi	r21,10
  804964:	9825883a 	mov	r18,r19
  804968:	d8000c15 	stw	zero,48(sp)
  80496c:	d8000b15 	stw	zero,44(sp)
  804970:	182f883a 	mov	r23,r3
  804974:	00000806 	br	804998 <___vfprintf_internal_r+0x4e8>
  804978:	ddc00b15 	stw	r23,44(sp)
  80497c:	05c00084 	movi	r23,2
  804980:	00000506 	br	804998 <___vfprintf_internal_r+0x4e8>
  804984:	00c00044 	movi	r3,1
  804988:	d8c00c15 	stw	r3,48(sp)
  80498c:	05c000c4 	movi	r23,3
  804990:	00000106 	br	804998 <___vfprintf_internal_r+0x4e8>
  804994:	002f883a 	mov	r23,zero
  804998:	d8c00f17 	ldw	r3,60(sp)
  80499c:	18c00044 	addi	r3,r3,1
  8049a0:	d8c00f15 	stw	r3,60(sp)
  8049a4:	003edc06 	br	804518 <__alt_data_end+0xff804518>
  8049a8:	8005883a 	mov	r2,r16
  8049ac:	dfc01a17 	ldw	ra,104(sp)
  8049b0:	df001917 	ldw	fp,100(sp)
  8049b4:	ddc01817 	ldw	r23,96(sp)
  8049b8:	dd801717 	ldw	r22,92(sp)
  8049bc:	dd401617 	ldw	r21,88(sp)
  8049c0:	dd001517 	ldw	r20,84(sp)
  8049c4:	dcc01417 	ldw	r19,80(sp)
  8049c8:	dc801317 	ldw	r18,76(sp)
  8049cc:	dc401217 	ldw	r17,72(sp)
  8049d0:	dc001117 	ldw	r16,68(sp)
  8049d4:	dec01b04 	addi	sp,sp,108
  8049d8:	f800283a 	ret

008049dc <__vfprintf_internal>:
  8049dc:	00802034 	movhi	r2,128
  8049e0:	10971504 	addi	r2,r2,23636
  8049e4:	300f883a 	mov	r7,r6
  8049e8:	280d883a 	mov	r6,r5
  8049ec:	200b883a 	mov	r5,r4
  8049f0:	11000017 	ldw	r4,0(r2)
  8049f4:	08044b01 	jmpi	8044b0 <___vfprintf_internal_r>

008049f8 <__sfvwrite_small_dev>:
  8049f8:	2880000b 	ldhu	r2,0(r5)
  8049fc:	1080020c 	andi	r2,r2,8
  804a00:	10002126 	beq	r2,zero,804a88 <__sfvwrite_small_dev+0x90>
  804a04:	2880008f 	ldh	r2,2(r5)
  804a08:	defffa04 	addi	sp,sp,-24
  804a0c:	dc000015 	stw	r16,0(sp)
  804a10:	dfc00515 	stw	ra,20(sp)
  804a14:	dd000415 	stw	r20,16(sp)
  804a18:	dcc00315 	stw	r19,12(sp)
  804a1c:	dc800215 	stw	r18,8(sp)
  804a20:	dc400115 	stw	r17,4(sp)
  804a24:	2821883a 	mov	r16,r5
  804a28:	10001216 	blt	r2,zero,804a74 <__sfvwrite_small_dev+0x7c>
  804a2c:	2027883a 	mov	r19,r4
  804a30:	3025883a 	mov	r18,r6
  804a34:	3823883a 	mov	r17,r7
  804a38:	05010004 	movi	r20,1024
  804a3c:	04400b0e 	bge	zero,r17,804a6c <__sfvwrite_small_dev+0x74>
  804a40:	880f883a 	mov	r7,r17
  804a44:	a440010e 	bge	r20,r17,804a4c <__sfvwrite_small_dev+0x54>
  804a48:	01c10004 	movi	r7,1024
  804a4c:	8140008f 	ldh	r5,2(r16)
  804a50:	900d883a 	mov	r6,r18
  804a54:	9809883a 	mov	r4,r19
  804a58:	0804b580 	call	804b58 <_write_r>
  804a5c:	0080050e 	bge	zero,r2,804a74 <__sfvwrite_small_dev+0x7c>
  804a60:	88a3c83a 	sub	r17,r17,r2
  804a64:	90a5883a 	add	r18,r18,r2
  804a68:	003ff406 	br	804a3c <__alt_data_end+0xff804a3c>
  804a6c:	0005883a 	mov	r2,zero
  804a70:	00000706 	br	804a90 <__sfvwrite_small_dev+0x98>
  804a74:	8080000b 	ldhu	r2,0(r16)
  804a78:	10801014 	ori	r2,r2,64
  804a7c:	8080000d 	sth	r2,0(r16)
  804a80:	00bfffc4 	movi	r2,-1
  804a84:	00000206 	br	804a90 <__sfvwrite_small_dev+0x98>
  804a88:	00bfffc4 	movi	r2,-1
  804a8c:	f800283a 	ret
  804a90:	dfc00517 	ldw	ra,20(sp)
  804a94:	dd000417 	ldw	r20,16(sp)
  804a98:	dcc00317 	ldw	r19,12(sp)
  804a9c:	dc800217 	ldw	r18,8(sp)
  804aa0:	dc400117 	ldw	r17,4(sp)
  804aa4:	dc000017 	ldw	r16,0(sp)
  804aa8:	dec00604 	addi	sp,sp,24
  804aac:	f800283a 	ret

00804ab0 <__sfvwrite_small_str>:
  804ab0:	2880000b 	ldhu	r2,0(r5)
  804ab4:	10c0020c 	andi	r3,r2,8
  804ab8:	18002026 	beq	r3,zero,804b3c <__sfvwrite_small_str+0x8c>
  804abc:	28c0008f 	ldh	r3,2(r5)
  804ac0:	defffd04 	addi	sp,sp,-12
  804ac4:	dc000015 	stw	r16,0(sp)
  804ac8:	dfc00215 	stw	ra,8(sp)
  804acc:	dc400115 	stw	r17,4(sp)
  804ad0:	2821883a 	mov	r16,r5
  804ad4:	1800150e 	bge	r3,zero,804b2c <__sfvwrite_small_str+0x7c>
  804ad8:	10c0800c 	andi	r3,r2,512
  804adc:	18001326 	beq	r3,zero,804b2c <__sfvwrite_small_str+0x7c>
  804ae0:	2c400517 	ldw	r17,20(r5)
  804ae4:	89c0030e 	bge	r17,r7,804af4 <__sfvwrite_small_str+0x44>
  804ae8:	10c0200c 	andi	r3,r2,128
  804aec:	18000326 	beq	r3,zero,804afc <__sfvwrite_small_str+0x4c>
  804af0:	00000e06 	br	804b2c <__sfvwrite_small_str+0x7c>
  804af4:	3c40010e 	bge	r7,r17,804afc <__sfvwrite_small_str+0x4c>
  804af8:	3823883a 	mov	r17,r7
  804afc:	81000417 	ldw	r4,16(r16)
  804b00:	300b883a 	mov	r5,r6
  804b04:	880d883a 	mov	r6,r17
  804b08:	080355c0 	call	80355c <memmove>
  804b0c:	80800517 	ldw	r2,20(r16)
  804b10:	1445c83a 	sub	r2,r2,r17
  804b14:	80800515 	stw	r2,20(r16)
  804b18:	80800417 	ldw	r2,16(r16)
  804b1c:	1463883a 	add	r17,r2,r17
  804b20:	84400415 	stw	r17,16(r16)
  804b24:	0005883a 	mov	r2,zero
  804b28:	00000606 	br	804b44 <__sfvwrite_small_str+0x94>
  804b2c:	10801014 	ori	r2,r2,64
  804b30:	8080000d 	sth	r2,0(r16)
  804b34:	00bfffc4 	movi	r2,-1
  804b38:	00000206 	br	804b44 <__sfvwrite_small_str+0x94>
  804b3c:	00bfffc4 	movi	r2,-1
  804b40:	f800283a 	ret
  804b44:	dfc00217 	ldw	ra,8(sp)
  804b48:	dc400117 	ldw	r17,4(sp)
  804b4c:	dc000017 	ldw	r16,0(sp)
  804b50:	dec00304 	addi	sp,sp,12
  804b54:	f800283a 	ret

00804b58 <_write_r>:
  804b58:	defffd04 	addi	sp,sp,-12
  804b5c:	dc000015 	stw	r16,0(sp)
  804b60:	04002034 	movhi	r16,128
  804b64:	dc400115 	stw	r17,4(sp)
  804b68:	8417f804 	addi	r16,r16,24544
  804b6c:	2023883a 	mov	r17,r4
  804b70:	2809883a 	mov	r4,r5
  804b74:	300b883a 	mov	r5,r6
  804b78:	380d883a 	mov	r6,r7
  804b7c:	dfc00215 	stw	ra,8(sp)
  804b80:	80000015 	stw	zero,0(r16)
  804b84:	0804f980 	call	804f98 <write>
  804b88:	00ffffc4 	movi	r3,-1
  804b8c:	10c0031e 	bne	r2,r3,804b9c <_write_r+0x44>
  804b90:	80c00017 	ldw	r3,0(r16)
  804b94:	18000126 	beq	r3,zero,804b9c <_write_r+0x44>
  804b98:	88c00015 	stw	r3,0(r17)
  804b9c:	dfc00217 	ldw	ra,8(sp)
  804ba0:	dc400117 	ldw	r17,4(sp)
  804ba4:	dc000017 	ldw	r16,0(sp)
  804ba8:	dec00304 	addi	sp,sp,12
  804bac:	f800283a 	ret

00804bb0 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804bb0:	00802034 	movhi	r2,128
  804bb4:	1096fb04 	addi	r2,r2,23532
  804bb8:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804bbc:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804bc0:	01002034 	movhi	r4,128
  804bc4:	01800044 	movi	r6,1
  804bc8:	d80b883a 	mov	r5,sp
  804bcc:	21171804 	addi	r4,r4,23648
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804bd0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804bd4:	08050400 	call	805040 <altera_avalon_jtag_uart_read>
  804bd8:	0080020e 	bge	zero,r2,804be4 <alt_getchar+0x34>
        return -1;
    }
    return c;
  804bdc:	d8800007 	ldb	r2,0(sp)
  804be0:	00000106 	br	804be8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  804be4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  804be8:	dfc00117 	ldw	ra,4(sp)
  804bec:	dec00204 	addi	sp,sp,8
  804bf0:	f800283a 	ret

00804bf4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  804bf4:	008007c4 	movi	r2,31
  804bf8:	11002136 	bltu	r2,r4,804c80 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804bfc:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c00:	00ffff84 	movi	r3,-2
  804c04:	38c4703a 	and	r2,r7,r3
  804c08:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  804c0c:	200490fa 	slli	r2,r4,3
  804c10:	02002034 	movhi	r8,128
  804c14:	42180304 	addi	r8,r8,24588
  804c18:	4085883a 	add	r2,r8,r2
  804c1c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
  804c20:	11400115 	stw	r5,4(r2)
  804c24:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  804c28:	30000726 	beq	r6,zero,804c48 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804c2c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c30:	28c6703a 	and	r3,r5,r3
  804c34:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  804c38:	d0e0e817 	ldw	r3,-31840(gp)
  804c3c:	1104983a 	sll	r2,r2,r4
  804c40:	10c4b03a 	or	r2,r2,r3
  804c44:	00000706 	br	804c64 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804c48:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c4c:	28c6703a 	and	r3,r5,r3
  804c50:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  804c54:	1104983a 	sll	r2,r2,r4
  804c58:	d0e0e817 	ldw	r3,-31840(gp)
  804c5c:	0084303a 	nor	r2,zero,r2
  804c60:	10c4703a 	and	r2,r2,r3
  804c64:	d0a0e815 	stw	r2,-31840(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804c68:	d0a0e817 	ldw	r2,-31840(gp)
  804c6c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804c70:	2801703a 	wrctl	status,r5
  804c74:	3801703a 	wrctl	status,r7
  804c78:	0005883a 	mov	r2,zero
  804c7c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  804c80:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  804c84:	f800283a 	ret

00804c88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  804c88:	deffff04 	addi	sp,sp,-4
  804c8c:	01002034 	movhi	r4,128
  804c90:	01402034 	movhi	r5,128
  804c94:	dfc00015 	stw	ra,0(sp)
  804c98:	21165604 	addi	r4,r4,22872
  804c9c:	29571f04 	addi	r5,r5,23676

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804ca0:	2140061e 	bne	r4,r5,804cbc <alt_load+0x34>
  804ca4:	01002034 	movhi	r4,128
  804ca8:	01402034 	movhi	r5,128
  804cac:	21000804 	addi	r4,r4,32
  804cb0:	29400804 	addi	r5,r5,32
  804cb4:	2140121e 	bne	r4,r5,804d00 <alt_load+0x78>
  804cb8:	00000b06 	br	804ce8 <alt_load+0x60>
  804cbc:	00c02034 	movhi	r3,128
  804cc0:	18d71f04 	addi	r3,r3,23676
  804cc4:	1907c83a 	sub	r3,r3,r4
  804cc8:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804ccc:	10fff526 	beq	r2,r3,804ca4 <__alt_data_end+0xff804ca4>
    {
      *to++ = *from++;
  804cd0:	114f883a 	add	r7,r2,r5
  804cd4:	39c00017 	ldw	r7,0(r7)
  804cd8:	110d883a 	add	r6,r2,r4
  804cdc:	10800104 	addi	r2,r2,4
  804ce0:	31c00015 	stw	r7,0(r6)
  804ce4:	003ff906 	br	804ccc <__alt_data_end+0xff804ccc>
  804ce8:	01002034 	movhi	r4,128
  804cec:	01402034 	movhi	r5,128
  804cf0:	21151904 	addi	r4,r4,21604
  804cf4:	29551904 	addi	r5,r5,21604

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804cf8:	2140101e 	bne	r4,r5,804d3c <alt_load+0xb4>
  804cfc:	00000b06 	br	804d2c <alt_load+0xa4>
  804d00:	00c02034 	movhi	r3,128
  804d04:	18c06004 	addi	r3,r3,384
  804d08:	1907c83a 	sub	r3,r3,r4
  804d0c:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804d10:	10fff526 	beq	r2,r3,804ce8 <__alt_data_end+0xff804ce8>
    {
      *to++ = *from++;
  804d14:	114f883a 	add	r7,r2,r5
  804d18:	39c00017 	ldw	r7,0(r7)
  804d1c:	110d883a 	add	r6,r2,r4
  804d20:	10800104 	addi	r2,r2,4
  804d24:	31c00015 	stw	r7,0(r6)
  804d28:	003ff906 	br	804d10 <__alt_data_end+0xff804d10>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804d2c:	08052c80 	call	8052c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  804d30:	dfc00017 	ldw	ra,0(sp)
  804d34:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  804d38:	08053b41 	jmpi	8053b4 <alt_icache_flush_all>
  804d3c:	00c02034 	movhi	r3,128
  804d40:	18d65604 	addi	r3,r3,22872
  804d44:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804d48:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804d4c:	18bff726 	beq	r3,r2,804d2c <__alt_data_end+0xff804d2c>
    {
      *to++ = *from++;
  804d50:	114f883a 	add	r7,r2,r5
  804d54:	39c00017 	ldw	r7,0(r7)
  804d58:	110d883a 	add	r6,r2,r4
  804d5c:	10800104 	addi	r2,r2,4
  804d60:	31c00015 	stw	r7,0(r6)
  804d64:	003ff906 	br	804d4c <__alt_data_end+0xff804d4c>

00804d68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804d68:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804d6c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804d70:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804d74:	0804ff80 	call	804ff8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  804d78:	08050180 	call	805018 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804d7c:	d1a0e917 	ldw	r6,-31836(gp)
  804d80:	d160ea17 	ldw	r5,-31832(gp)
  804d84:	d120eb17 	ldw	r4,-31828(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  804d88:	dfc00017 	ldw	ra,0(sp)
  804d8c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804d90:	08010341 	jmpi	801034 <main>

00804d94 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  804d94:	defff204 	addi	sp,sp,-56
  804d98:	2005883a 	mov	r2,r4
  804d9c:	dfc00a15 	stw	ra,40(sp)
  804da0:	df000915 	stw	fp,36(sp)
  804da4:	ddc00815 	stw	r23,32(sp)
  804da8:	dd800715 	stw	r22,28(sp)
  804dac:	dd400615 	stw	r21,24(sp)
  804db0:	dd000515 	stw	r20,20(sp)
  804db4:	dcc00415 	stw	r19,16(sp)
  804db8:	dc800315 	stw	r18,12(sp)
  804dbc:	dc400215 	stw	r17,8(sp)
  804dc0:	dc000115 	stw	r16,4(sp)
  804dc4:	d9400b15 	stw	r5,44(sp)
  804dc8:	d9800c15 	stw	r6,48(sp)
  804dcc:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804dd0:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  804dd4:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  804dd8:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  804ddc:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804de0:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804de4:	11000007 	ldb	r4,0(r2)
  804de8:	20003a26 	beq	r4,zero,804ed4 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804dec:	24000226 	beq	r4,r16,804df8 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804df0:	14400044 	addi	r17,r2,1
  804df4:	00001406 	br	804e48 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  804df8:	14400084 	addi	r17,r2,2
  804dfc:	10800047 	ldb	r2,1(r2)
  804e00:	10003426 	beq	r2,zero,804ed4 <alt_printf+0x140>
            {
                if (c == '%')
  804e04:	1400021e 	bne	r2,r16,804e10 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  804e08:	8009883a 	mov	r4,r16
  804e0c:	00000e06 	br	804e48 <alt_printf+0xb4>
                } 
                else if (c == 'c')
  804e10:	1480051e 	bne	r2,r18,804e28 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  804e14:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  804e18:	ad800104 	addi	r22,r21,4
  804e1c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  804e20:	0804f040 	call	804f04 <alt_putchar>
  804e24:	00002906 	br	804ecc <alt_printf+0x138>
                }
                else if (c == 'x')
  804e28:	14c0201e 	bne	r2,r19,804eac <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  804e2c:	adc00017 	ldw	r23,0(r21)
  804e30:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  804e34:	b8000326 	beq	r23,zero,804e44 <alt_printf+0xb0>
  804e38:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804e3c:	00c003c4 	movi	r3,15
  804e40:	00000306 	br	804e50 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  804e44:	01000c04 	movi	r4,48
  804e48:	0804f040 	call	804f04 <alt_putchar>
                        continue;
  804e4c:	00001f06 	br	804ecc <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804e50:	1d84983a 	sll	r2,r3,r22
  804e54:	15c4703a 	and	r2,r2,r23
  804e58:	1000021e 	bne	r2,zero,804e64 <alt_printf+0xd0>
                        digit_shift -= 4;
  804e5c:	b5bfff04 	addi	r22,r22,-4
  804e60:	003ffb06 	br	804e50 <__alt_data_end+0xff804e50>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804e64:	070003c4 	movi	fp,15
                        if (digit <= 9)
  804e68:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804e6c:	b0001716 	blt	r22,zero,804ecc <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804e70:	e588983a 	sll	r4,fp,r22
  804e74:	25c8703a 	and	r4,r4,r23
  804e78:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  804e7c:	19000236 	bltu	r3,r4,804e88 <alt_printf+0xf4>
                            c = '0' + digit;
  804e80:	21000c04 	addi	r4,r4,48
  804e84:	00000106 	br	804e8c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  804e88:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  804e8c:	21003fcc 	andi	r4,r4,255
  804e90:	2100201c 	xori	r4,r4,128
  804e94:	213fe004 	addi	r4,r4,-128
  804e98:	d8c00015 	stw	r3,0(sp)
  804e9c:	0804f040 	call	804f04 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804ea0:	b5bfff04 	addi	r22,r22,-4
  804ea4:	d8c00017 	ldw	r3,0(sp)
  804ea8:	003ff006 	br	804e6c <__alt_data_end+0xff804e6c>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804eac:	1500071e 	bne	r2,r20,804ecc <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  804eb0:	ad800017 	ldw	r22,0(r21)
  804eb4:	ad400104 	addi	r21,r21,4

                    while(*s)
  804eb8:	b1000007 	ldb	r4,0(r22)
  804ebc:	20000326 	beq	r4,zero,804ecc <alt_printf+0x138>
                      alt_putchar(*s++);
  804ec0:	b5800044 	addi	r22,r22,1
  804ec4:	0804f040 	call	804f04 <alt_putchar>
  804ec8:	003ffb06 	br	804eb8 <__alt_data_end+0xff804eb8>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  804ecc:	8805883a 	mov	r2,r17
  804ed0:	003fc406 	br	804de4 <__alt_data_end+0xff804de4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  804ed4:	dfc00a17 	ldw	ra,40(sp)
  804ed8:	df000917 	ldw	fp,36(sp)
  804edc:	ddc00817 	ldw	r23,32(sp)
  804ee0:	dd800717 	ldw	r22,28(sp)
  804ee4:	dd400617 	ldw	r21,24(sp)
  804ee8:	dd000517 	ldw	r20,20(sp)
  804eec:	dcc00417 	ldw	r19,16(sp)
  804ef0:	dc800317 	ldw	r18,12(sp)
  804ef4:	dc400217 	ldw	r17,8(sp)
  804ef8:	dc000117 	ldw	r16,4(sp)
  804efc:	dec00e04 	addi	sp,sp,56
  804f00:	f800283a 	ret

00804f04 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804f04:	defffd04 	addi	sp,sp,-12
  804f08:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  804f0c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804f10:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804f14:	01002034 	movhi	r4,128
  804f18:	000f883a 	mov	r7,zero
  804f1c:	01800044 	movi	r6,1
  804f20:	d80b883a 	mov	r5,sp
  804f24:	21171804 	addi	r4,r4,23648
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804f28:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804f2c:	080509c0 	call	80509c <altera_avalon_jtag_uart_write>
  804f30:	00ffffc4 	movi	r3,-1
  804f34:	10c00126 	beq	r2,r3,804f3c <alt_putchar+0x38>
        return -1;
    }
    return c;
  804f38:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
  804f3c:	dfc00217 	ldw	ra,8(sp)
  804f40:	dc000117 	ldw	r16,4(sp)
  804f44:	dec00304 	addi	sp,sp,12
  804f48:	f800283a 	ret

00804f4c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804f4c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804f50:	00bfff84 	movi	r2,-2
  804f54:	2884703a 	and	r2,r5,r2
  804f58:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804f5c:	d0a00617 	ldw	r2,-32744(gp)
  804f60:	00ffff04 	movi	r3,-4
  804f64:	108000c4 	addi	r2,r2,3
  804f68:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804f6c:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804f70:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804f74:	1109883a 	add	r4,r2,r4
  804f78:	18c00004 	addi	r3,r3,0
  804f7c:	1900032e 	bgeu	r3,r4,804f8c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804f80:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804f84:	00bfffc4 	movi	r2,-1
  804f88:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  804f8c:	d1200615 	stw	r4,-32744(gp)
  804f90:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  804f94:	f800283a 	ret

00804f98 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
  804f98:	00800044 	movi	r2,1
  804f9c:	20800226 	beq	r4,r2,804fa8 <write+0x10>
  804fa0:	00800084 	movi	r2,2
  804fa4:	2080041e 	bne	r4,r2,804fb8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
  804fa8:	01002034 	movhi	r4,128
  804fac:	000f883a 	mov	r7,zero
  804fb0:	21171804 	addi	r4,r4,23648
  804fb4:	080509c1 	jmpi	80509c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  804fb8:	d0a00d17 	ldw	r2,-32716(gp)
  804fbc:	10000926 	beq	r2,zero,804fe4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  804fc0:	deffff04 	addi	sp,sp,-4
  804fc4:	dfc00015 	stw	ra,0(sp)
  804fc8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  804fcc:	00c01444 	movi	r3,81
  804fd0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  804fd4:	00bfffc4 	movi	r2,-1
  804fd8:	dfc00017 	ldw	ra,0(sp)
  804fdc:	dec00104 	addi	sp,sp,4
  804fe0:	f800283a 	ret
  804fe4:	d0a0e704 	addi	r2,gp,-31844
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  804fe8:	00c01444 	movi	r3,81
  804fec:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  804ff0:	00bfffc4 	movi	r2,-1
  804ff4:	f800283a 	ret

00804ff8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  804ff8:	deffff04 	addi	sp,sp,-4
  804ffc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  805000:	08053b80 	call	8053b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  805004:	00800044 	movi	r2,1
  805008:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80500c:	dfc00017 	ldw	ra,0(sp)
  805010:	dec00104 	addi	sp,sp,4
  805014:	f800283a 	ret

00805018 <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  805018:	00804034 	movhi	r2,256
  80501c:	10840004 	addi	r2,r2,4096
  805020:	d0a0ed15 	stw	r2,-31820(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  805024:	01002034 	movhi	r4,128
  805028:	0081c9f4 	movhi	r2,1831
  80502c:	10838004 	addi	r2,r2,3584
  805030:	d1600904 	addi	r5,gp,-32732
  805034:	2116f004 	addi	r4,r4,23488
  805038:	d0a0ec15 	stw	r2,-31824(gp)
  80503c:	08052d41 	jmpi	8052d4 <alt_dev_llist_insert>

00805040 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  805040:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  805044:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  805048:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  80504c:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  805050:	11800b2e 	bgeu	r2,r6,805080 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  805054:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  805058:	1a60000c 	andi	r9,r3,32768
  80505c:	48000326 	beq	r9,zero,80506c <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  805060:	10c00005 	stb	r3,0(r2)
  805064:	10800044 	addi	r2,r2,1
  805068:	003ff906 	br	805050 <__alt_data_end+0xff805050>
    else if (ptr != buffer)
  80506c:	11400226 	beq	r2,r5,805078 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  805070:	1145c83a 	sub	r2,r2,r5
  805074:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  805078:	403ff526 	beq	r8,zero,805050 <__alt_data_end+0xff805050>
  80507c:	00000106 	br	805084 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  805080:	117ffb1e 	bne	r2,r5,805070 <__alt_data_end+0xff805070>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  805084:	39d0000c 	andi	r7,r7,16384
  805088:	3800021e 	bne	r7,zero,805094 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  80508c:	00bffec4 	movi	r2,-5
  805090:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  805094:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  805098:	f800283a 	ret

0080509c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  80509c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8050a0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  8050a4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8050a8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  8050ac:	2980072e 	bgeu	r5,r6,8050cc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8050b0:	38c00037 	ldwio	r3,0(r7)
  8050b4:	18ffffec 	andhi	r3,r3,65535
  8050b8:	183ffc26 	beq	r3,zero,8050ac <__alt_data_end+0xff8050ac>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  8050bc:	28c00007 	ldb	r3,0(r5)
  8050c0:	20c00035 	stwio	r3,0(r4)
  8050c4:	29400044 	addi	r5,r5,1
  8050c8:	003ff806 	br	8050ac <__alt_data_end+0xff8050ac>

  return count;
}
  8050cc:	f800283a 	ret

008050d0 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  8050d0:	d0e0ec17 	ldw	r3,-31824(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  8050d4:	d0a0ed17 	ldw	r2,-31820(gp)

  if (!altera_avalon_timer_ts_freq)
  8050d8:	18000c26 	beq	r3,zero,80510c <alt_timestamp_start+0x3c>
    return -1;
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  8050dc:	11000104 	addi	r4,r2,4
  8050e0:	00c00204 	movi	r3,8
  8050e4:	20c00035 	stwio	r3,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  8050e8:	00ffffd4 	movui	r3,65535
  8050ec:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  8050f0:	10c00335 	stwio	r3,12(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  8050f4:	10c00435 	stwio	r3,16(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  8050f8:	10c00535 	stwio	r3,20(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  8050fc:	00800104 	movi	r2,4
  805100:	20800035 	stwio	r2,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  805104:	0005883a 	mov	r2,zero
  805108:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
  80510c:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
  805110:	f800283a 	ret

00805114 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  805114:	d0a0ec17 	ldw	r2,-31824(gp)
  805118:	10000e26 	beq	r2,zero,805154 <alt_timestamp+0x40>
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  80511c:	d120ed17 	ldw	r4,-31820(gp)
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  805120:	20800604 	addi	r2,r4,24
  805124:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  805128:	11400037 	ldwio	r5,0(r2)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  80512c:	20800737 	ldwio	r2,28(r4)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  805130:	20c00837 	ldwio	r3,32(r4)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  805134:	21000937 	ldwio	r4,36(r4)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  805138:	2008943a 	slli	r4,r4,16
  80513c:	1004943a 	slli	r2,r2,16
  805140:	297fffcc 	andi	r5,r5,65535
  805144:	18ffffcc 	andi	r3,r3,65535
  805148:	2884303a 	nor	r2,r5,r2
  80514c:	20c6303a 	nor	r3,r4,r3
  805150:	f800283a 	ret
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
  805154:	00bfffc4 	movi	r2,-1
  805158:	1007883a 	mov	r3,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
  80515c:	f800283a 	ret

00805160 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
  805160:	d0a0ec17 	ldw	r2,-31824(gp)
  805164:	f800283a 	ret

00805168 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
  805168:	d1600904 	addi	r5,gp,-32732
  80516c:	08053401 	jmpi	805340 <alt_find_dev>

00805170 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
  805170:	20800a17 	ldw	r2,40(r4)
  805174:	10800023 	ldbuio	r2,0(r2)
  805178:	28800005 	stb	r2,0(r5)

	return 0;
}
  80517c:	0005883a 	mov	r2,zero
  805180:	f800283a 	ret

00805184 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805184:	20800a17 	ldw	r2,40(r4)
  805188:	29400fcc 	andi	r5,r5,63
  80518c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805190:	20800a17 	ldw	r2,40(r4)
  805194:	10800063 	ldbuio	r2,1(r2)
  805198:	30800005 	stb	r2,0(r6)

	return 0;
}
  80519c:	0005883a 	mov	r2,zero
  8051a0:	f800283a 	ret

008051a4 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8051a4:	20800a17 	ldw	r2,40(r4)
  8051a8:	29400fcc 	andi	r5,r5,63
  8051ac:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
  8051b0:	20800a17 	ldw	r2,40(r4)
  8051b4:	11800065 	stbio	r6,1(r2)

	return 0;
}
  8051b8:	0005883a 	mov	r2,zero
  8051bc:	f800283a 	ret

008051c0 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8051c0:	20800a17 	ldw	r2,40(r4)
  8051c4:	00c00c84 	movi	r3,50
  8051c8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8051cc:	20800a17 	ldw	r2,40(r4)
  8051d0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8051d4:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8051d8:	10803fcc 	andi	r2,r2,255
  8051dc:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8051e0:	20800a17 	ldw	r2,40(r4)
  8051e4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  8051e8:	20800a17 	ldw	r2,40(r4)
  8051ec:	10800063 	ldbuio	r2,1(r2)
  8051f0:	10803fcc 	andi	r2,r2,255
  8051f4:	1006923a 	slli	r3,r2,8
  8051f8:	28800017 	ldw	r2,0(r5)
  8051fc:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
  805200:	10e0000c 	andi	r3,r2,32768
  805204:	18000126 	beq	r3,zero,80520c <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
  805208:	10bffff4 	orhi	r2,r2,65535
  80520c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  805210:	0005883a 	mov	r2,zero
  805214:	f800283a 	ret

00805218 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805218:	20800a17 	ldw	r2,40(r4)
  80521c:	00c00d04 	movi	r3,52
  805220:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805224:	20800a17 	ldw	r2,40(r4)
  805228:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  80522c:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805230:	10803fcc 	andi	r2,r2,255
  805234:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805238:	20800a17 	ldw	r2,40(r4)
  80523c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  805240:	20800a17 	ldw	r2,40(r4)
  805244:	10800063 	ldbuio	r2,1(r2)
  805248:	10803fcc 	andi	r2,r2,255
  80524c:	1006923a 	slli	r3,r2,8
  805250:	28800017 	ldw	r2,0(r5)
  805254:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
  805258:	10e0000c 	andi	r3,r2,32768
  80525c:	18000126 	beq	r3,zero,805264 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
  805260:	10bffff4 	orhi	r2,r2,65535
  805264:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  805268:	0005883a 	mov	r2,zero
  80526c:	f800283a 	ret

00805270 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805270:	20800a17 	ldw	r2,40(r4)
  805274:	00c00d84 	movi	r3,54
  805278:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  80527c:	20800a17 	ldw	r2,40(r4)
  805280:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805284:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805288:	10803fcc 	andi	r2,r2,255
  80528c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805290:	20800a17 	ldw	r2,40(r4)
  805294:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  805298:	20800a17 	ldw	r2,40(r4)
  80529c:	10800063 	ldbuio	r2,1(r2)
  8052a0:	10803fcc 	andi	r2,r2,255
  8052a4:	1006923a 	slli	r3,r2,8
  8052a8:	28800017 	ldw	r2,0(r5)
  8052ac:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
  8052b0:	10e0000c 	andi	r3,r2,32768
  8052b4:	18000126 	beq	r3,zero,8052bc <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
  8052b8:	10bffff4 	orhi	r2,r2,65535
  8052bc:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  8052c0:	0005883a 	mov	r2,zero
  8052c4:	f800283a 	ret

008052c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8052c8:	f800283a 	ret

008052cc <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  8052cc:	3005883a 	mov	r2,r6
  8052d0:	f800283a 	ret

008052d4 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8052d4:	20000226 	beq	r4,zero,8052e0 <alt_dev_llist_insert+0xc>
  8052d8:	20800217 	ldw	r2,8(r4)
  8052dc:	1000101e 	bne	r2,zero,805320 <alt_dev_llist_insert+0x4c>
  8052e0:	d0a00d17 	ldw	r2,-32716(gp)
  8052e4:	10000926 	beq	r2,zero,80530c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8052e8:	deffff04 	addi	sp,sp,-4
  8052ec:	dfc00015 	stw	ra,0(sp)
  8052f0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  8052f4:	00c00584 	movi	r3,22
  8052f8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  8052fc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  805300:	dfc00017 	ldw	ra,0(sp)
  805304:	dec00104 	addi	sp,sp,4
  805308:	f800283a 	ret
  80530c:	d0a0e704 	addi	r2,gp,-31844
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  805310:	00c00584 	movi	r3,22
  805314:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  805318:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  80531c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  805320:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805324:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  805328:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  80532c:	28800017 	ldw	r2,0(r5)
  805330:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  805334:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  805338:	0005883a 	mov	r2,zero
  80533c:	f800283a 	ret

00805340 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  805340:	defffb04 	addi	sp,sp,-20
  805344:	dcc00315 	stw	r19,12(sp)
  805348:	dc800215 	stw	r18,8(sp)
  80534c:	dc400115 	stw	r17,4(sp)
  805350:	dc000015 	stw	r16,0(sp)
  805354:	dfc00415 	stw	ra,16(sp)
  805358:	2027883a 	mov	r19,r4
  80535c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  805360:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  805364:	0803a6c0 	call	803a6c <strlen>
  805368:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80536c:	84400726 	beq	r16,r17,80538c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  805370:	81000217 	ldw	r4,8(r16)
  805374:	900d883a 	mov	r6,r18
  805378:	980b883a 	mov	r5,r19
  80537c:	08054340 	call	805434 <memcmp>
  805380:	10000426 	beq	r2,zero,805394 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  805384:	84000017 	ldw	r16,0(r16)
  805388:	003ff806 	br	80536c <__alt_data_end+0xff80536c>
  }
  
  /* No match found */
  
  return NULL;
  80538c:	0005883a 	mov	r2,zero
  805390:	00000106 	br	805398 <alt_find_dev+0x58>
  805394:	8005883a 	mov	r2,r16
}
  805398:	dfc00417 	ldw	ra,16(sp)
  80539c:	dcc00317 	ldw	r19,12(sp)
  8053a0:	dc800217 	ldw	r18,8(sp)
  8053a4:	dc400117 	ldw	r17,4(sp)
  8053a8:	dc000017 	ldw	r16,0(sp)
  8053ac:	dec00504 	addi	sp,sp,20
  8053b0:	f800283a 	ret

008053b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8053b4:	f800283a 	ret

008053b8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  8053b8:	000170fa 	wrctl	ienable,zero
  8053bc:	f800283a 	ret

008053c0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  8053c0:	213ffe84 	addi	r4,r4,-6
  8053c4:	008003c4 	movi	r2,15
  8053c8:	11001636 	bltu	r2,r4,805424 <alt_exception_cause_generated_bad_addr+0x64>
  8053cc:	200890ba 	slli	r4,r4,2
  8053d0:	00802034 	movhi	r2,128
  8053d4:	1094f904 	addi	r2,r2,21476
  8053d8:	2089883a 	add	r4,r4,r2
  8053dc:	20800017 	ldw	r2,0(r4)
  8053e0:	1000683a 	jmp	r2
  8053e4:	0080542c 	andhi	r2,zero,336
  8053e8:	0080542c 	andhi	r2,zero,336
  8053ec:	00805424 	muli	r2,zero,336
  8053f0:	00805424 	muli	r2,zero,336
  8053f4:	00805424 	muli	r2,zero,336
  8053f8:	0080542c 	andhi	r2,zero,336
  8053fc:	00805424 	muli	r2,zero,336
  805400:	00805424 	muli	r2,zero,336
  805404:	0080542c 	andhi	r2,zero,336
  805408:	0080542c 	andhi	r2,zero,336
  80540c:	00805424 	muli	r2,zero,336
  805410:	0080542c 	andhi	r2,zero,336
  805414:	00805424 	muli	r2,zero,336
  805418:	00805424 	muli	r2,zero,336
  80541c:	00805424 	muli	r2,zero,336
  805420:	0080542c 	andhi	r2,zero,336
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  805424:	0005883a 	mov	r2,zero
  805428:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80542c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  805430:	f800283a 	ret

00805434 <memcmp>:
  805434:	218d883a 	add	r6,r4,r6
  805438:	21800826 	beq	r4,r6,80545c <memcmp+0x28>
  80543c:	20800003 	ldbu	r2,0(r4)
  805440:	28c00003 	ldbu	r3,0(r5)
  805444:	10c00226 	beq	r2,r3,805450 <memcmp+0x1c>
  805448:	10c5c83a 	sub	r2,r2,r3
  80544c:	f800283a 	ret
  805450:	21000044 	addi	r4,r4,1
  805454:	29400044 	addi	r5,r5,1
  805458:	003ff706 	br	805438 <__alt_data_end+0xff805438>
  80545c:	0005883a 	mov	r2,zero
  805460:	f800283a 	ret
