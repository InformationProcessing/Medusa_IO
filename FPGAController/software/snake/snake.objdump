
snake.elf:     file format elf32-littlenios2
snake.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800180

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00005894 memsz 0x00005894 flags r-x
    LOAD off    0x000068b4 vaddr 0x008058b4 paddr 0x00805bd8 align 2**12
         filesz 0x00000324 memsz 0x00000324 flags rw-
    LOAD off    0x00006efc vaddr 0x00805efc paddr 0x00805efc align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000521c  00800180  00800180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000518  0080539c  0080539c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000324  008058b4  00805bd8  000068b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00805efc  00805efc  00006efc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00806078  00806078  00006bd8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006bd8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000007f0  00000000  00000000  00006c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d1c3  00000000  00000000  000073f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004246  00000000  00000000  000145b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004e84  00000000  00000000  000187f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d84  00000000  00000000  0001d680  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000291b  00000000  00000000  0001e404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000911d  00000000  00000000  00020d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00029e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ca8  00000000  00000000  00029e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002cda6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002cda9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002cdac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002cdad  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002cdae  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002cdb2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002cdb6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002cdba  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002cdc3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002cdcc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  0002cdd5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0002cdda  2**0
                  CONTENTS, READONLY
 29 .jdi          0000433a  00000000  00000000  0002ce09  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000d4d6a  00000000  00000000  00031143  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800180 l    d  .text	00000000 .text
0080539c l    d  .rodata	00000000 .rodata
008058b4 l    d  .rwdata	00000000 .rwdata
00805efc l    d  .bss	00000000 .bss
00806078 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../snake_bsp//obj/HAL/src/crt0.o
008001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
008054fa l     O .rodata	0000002d CSWTCH.83
00805f04 l     O .bss	00000004 count.3448
00805efc l     O .bss	00000008 lasttime.3449
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803d68 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0080431c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00805728 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00805a3c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00805bb8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00805b1c l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00805204 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00805f68 g     O .bss	00000004 alt_instruction_exception_handler
00804ca0 g     F .text	0000002c alt_main
00803918 g     F .text	0000002c strcpy
00805f78 g     O .bss	00000100 alt_irq
008005b8 g     F .text	00000070 disp_timer_init
00805f1c g     O .bss	00000004 norm_const
00805bd8 g       *ABS*	00000000 __flash_rwdata_start
00806078 g       *ABS*	00000000 __alt_heap_start
00803b10 g     F .text	00000008 strtok_r
00805f14 g     O .bss	00000004 disp_length
00803768 g     F .text	0000004c printf
00805f60 g     O .bss	00000004 altera_avalon_timer_ts_freq
008008e8 g     F .text	00000038 hw_push_coefficients
00804a30 g     F .text	00000060 memmove
00803a80 g     F .text	00000090 __strtok_r
00805f08 g     O .bss	00000004 hfixed
00805bbc g     O .rwdata	00000004 jtag_uart
008052f0 g     F .text	00000008 altera_nios2_gen2_irq_init
00804988 g     F .text	000000a8 __sfvwrite_small_str
00800000 g     F .entry	0000000c __reset
008050f8 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00805f10 g     O .bss	00000004 led_val
00800020 g       *ABS*	00000000 __flash_exceptions_start
00805f4c g     O .bss	00000004 errno
00805f58 g     O .bss	00000004 alt_argv
0080dba0 g       *ABS*	00000000 _gp
00800920 g     F .text	00000170 coeffs_to_fixed
00805b48 g     O .rwdata	00000030 alt_fd_list
00805278 g     F .text	00000074 alt_find_dev
00805f20 g     O .bss	00000004 cmdbuffer
00805f18 g     O .bss	00000004 disp_offset
008052f8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00800698 g     F .text	000000d4 to_hex
00800284 g     F .text	000000e4 convolve_fixed
00804f78 g     F .text	0000005c altera_avalon_jtag_uart_read
008034a8 g     F .text	00000014 malloc
0080372c g     F .text	0000003c _printf_r
008017f8 g     F .text	00000064 .hidden __udivsi3
00800f20 g     F .text	00000010 hw_y_read
00800394 g     F .text	00000098 write_to_disp
0080021c g     F .text	00000038 ring_buf_push
008037b4 g     F .text	00000050 _sbrk_r
00805bc0 g     O .rwdata	00000004 alt_max_fd
00800f10 g     F .text	00000010 hw_x_read
00804b2c g     F .text	00000094 alt_irq_register
00805f0c g     O .bss	00000004 debug
008018dc g     F .text	000008ac .hidden __adddf3
008004b4 g     F .text	00000094 read_request
0080076c g     F .text	00000014 throw_code
00805bac g     O .rwdata	00000004 _global_impure_ptr
00806078 g       *ABS*	00000000 __bss_end
00804ae8 g     F .text	00000044 alt_getchar
00801104 g     F .text	000005fc .hidden __udivdi3
00805f24 g     O .bss	00000004 x_buf
008001bc g     F .text	00000060 led_timer_isr
00800548 g     F .text	00000070 acc_timer_init
00803d4c g     F .text	0000001c strtol
00805f50 g     O .bss	00000004 alt_irq_active
00805f28 g     O .bss	00000004 disp_buf
008000fc g     F .exceptions	00000060 alt_irq_handler
00805b78 g     O .rwdata	00000028 alt_dev_null
00805200 g     F .text	00000004 alt_dcache_flush_all
008033c4 g     F .text	00000080 .hidden __fixdfsi
008007e0 g     F .text	00000108 acc_timer_isr
00800368 g     F .text	0000002c letter_to_hex
00805bd8 g       *ABS*	00000000 __ram_rwdata_end
00805bc4 g     O .rwdata	00000008 alt_dev_list
00804ed0 g     F .text	00000060 write
00805098 g     F .text	00000008 alt_timestamp_freq
008058b4 g       *ABS*	00000000 __ram_rodata_end
0080185c g     F .text	00000058 .hidden __umodsi3
00806078 g       *ABS*	00000000 end
0080015c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00803444 g     F .text	00000064 .hidden __clzsi2
00804fd4 g     F .text	00000034 altera_avalon_jtag_uart_write
00804388 g     F .text	0000052c ___vfprintf_internal_r
00803804 g     F .text	00000064 _sprintf_r
008034f0 g     F .text	000000e4 _free_r
00804ccc g     F .text	00000170 alt_printf
00805ba0 g     O .rwdata	00000004 quality
00800180 g     F .text	0000003c _start
00800464 g     F .text	00000050 clr_disp
00805f2c g     O .bss	00000004 y_buf
00804f50 g     F .text	00000028 alt_sys_init
008050a8 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00805f6c g     O .bss	0000000c hexbuffers
008018b4 g     F .text	00000028 .hidden __mulsi3
008058b4 g       *ABS*	00000000 __ram_rwdata_start
0080539c g       *ABS*	00000000 __ram_rodata_start
00803960 g     F .text	00000054 strncpy
00805150 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
008039b4 g     F .text	000000cc strtok
0080536c g     F .text	00000030 memcmp
00806078 g       *ABS*	00000000 __alt_stack_base
00802188 g     F .text	000009d0 .hidden __divdf3
00802b58 g     F .text	0000086c .hidden __muldf3
0080520c g     F .text	0000006c alt_dev_llist_insert
00804e84 g     F .text	0000004c sbrk
00803dd4 g     F .text	0000052c ___svfprintf_internal_r
008048d0 g     F .text	000000b8 __sfvwrite_small_dev
00805efc g       *ABS*	00000000 __bss_start
008034d0 g     F .text	00000020 memset
00800f30 g     F .text	000001d4 main
00805f54 g     O .bss	00000004 alt_envp
01000000 g       *ABS*	00000000 __alt_heap_limit
00803b18 g     F .text	00000234 _strtol_r
00805008 g     F .text	00000044 alt_timestamp_start
008035d4 g     F .text	00000158 _malloc_r
00805bd4 g     O .rwdata	00000004 alt_errno
00805ba4 g     O .rwdata	00000004 led_offset
00801700 g     F .text	00000084 .hidden __divsi3
008038e0 g     F .text	00000038 strcmp
0080539c g       *ABS*	00000000 __flash_rodata_start
00800254 g     F .text	00000030 ring_buf_read
00804f30 g     F .text	00000020 alt_irq_init
00800a90 g     F .text	00000480 parse_request
00803868 g     F .text	00000078 sprintf
00805527 g     O .rodata	00000100 .hidden __clz_tab
00804a90 g     F .text	00000058 _write_r
00805bb0 g     O .rwdata	00000004 _impure_ptr
00805f5c g     O .bss	00000004 alt_argc
00805f64 g     O .bss	00000004 altera_avalon_timer_ts_base
008058b4 g     O .rwdata	00000188 h
00800020 g       .exceptions	00000000 alt_irq_entry
00805bcc g     O .rwdata	00000008 alt_fs_list
00804300 g     F .text	0000001c __vfprintf_internal_unused
00805f30 g     O .bss	00000004 z_buf
00800020 g       *ABS*	00000000 __ram_exceptions_start
008050a0 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0080504c g     F .text	0000004c alt_timestamp
00800780 g     F .text	00000028 hw_reset
00805bd8 g       *ABS*	00000000 _edata
00806078 g       *ABS*	00000000 _end
0080042c g     F .text	00000038 disp_timer_isr
00800180 g       *ABS*	00000000 __ram_exceptions_end
00805f34 g     O .bss	00000008 latency
00801784 g     F .text	00000074 .hidden __modsi3
00805ba8 g     O .rwdata	00000004 __ctype_ptr__
008051a8 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00805627 g     O .rodata	00000101 _ctype_
0080000c g       .entry	00000000 _exit
008050bc g     F .text	00000020 alt_up_accelerometer_spi_read
008050dc g     F .text	0000001c alt_up_accelerometer_spi_write
00803944 g     F .text	0000001c strlen
00804e3c g     F .text	00000048 alt_putchar
00805f44 g     O .bss	00000004 __malloc_sbrk_start
008052ec g     F .text	00000004 alt_icache_flush_all
00805bb4 g     O .rwdata	00000004 alt_priority_mask
00805f48 g     O .bss	00000004 __malloc_free_list
008048b4 g     F .text	0000001c __vfprintf_internal
00805f3c g     O .bss	00000004 acc_dev
00800628 g     F .text	00000070 led_timer_init
008007a8 g     F .text	00000038 hw_push_value
00804bc0 g     F .text	000000e0 alt_load
008034bc g     F .text	00000014 free
00805f40 g     O .bss	00000004 led_buf



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406014 	ori	at,at,384
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	080015c0 	call	80015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defffe04 	addi	sp,sp,-8
  800100:	dfc00115 	stw	ra,4(sp)
  800104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80010c:	04002034 	movhi	r16,128
  800110:	8417de04 	addi	r16,r16,24440

  active = alt_irq_pending ();

  do
  {
    i = 0;
  800114:	000b883a 	mov	r5,zero
    mask = 1;
  800118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	1888703a 	and	r4,r3,r2
  800120:	20000b26 	beq	r4,zero,800150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  800124:	280490fa 	slli	r2,r5,3
  800128:	8085883a 	add	r2,r16,r2
  80012c:	10c00017 	ldw	r3,0(r2)
  800130:	11000117 	ldw	r4,4(r2)
  800134:	183ee83a 	callr	r3
  800138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  80013c:	183ff51e 	bne	r3,zero,800114 <__alt_data_end+0xff800114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800140:	dfc00117 	ldw	ra,4(sp)
  800144:	dc000017 	ldw	r16,0(sp)
  800148:	dec00204 	addi	sp,sp,8
  80014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800150:	1085883a 	add	r2,r2,r2
      i++;
  800154:	29400044 	addi	r5,r5,1

    } while (1);
  800158:	003ff006 	br	80011c <__alt_data_end+0xff80011c>

0080015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  80015c:	d0a0f217 	ldw	r2,-31800(gp)
  800160:	10000426 	beq	r2,zero,800174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800164:	200b883a 	mov	r5,r4
  800168:	000d883a 	mov	r6,zero
  80016c:	013fffc4 	movi	r4,-1
  800170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
  800178:	0005883a 	mov	r2,zero
  80017c:	f800283a 	ret

Disassembly of section .text:

00800180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800180:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800188:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80018c:	d6b6e814 	ori	gp,gp,56224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800190:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800194:	1097bf14 	ori	r2,r2,24316

    movhi r3, %hi(__bss_end)
  800198:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80019c:	18d81e14 	ori	r3,r3,24696

    beq r2, r3, 1f
  8001a0:	10c00326 	beq	r2,r3,8001b0 <_start+0x30>

0:
    stw zero, (r2)
  8001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001ac:	10fffd36 	bltu	r2,r3,8001a4 <__alt_data_end+0xff8001a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b0:	0804bc00 	call	804bc0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b4:	0804ca00 	call	804ca0 <alt_main>

008001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001b8:	003fff06 	br	8001b8 <__alt_data_end+0xff8001b8>

008001bc <led_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void led_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  8001bc:	00804034 	movhi	r2,256
  8001c0:	10844804 	addi	r2,r2,4384
  8001c4:	10000035 	stwio	zero,0(r2)

	if (led_offset != -1){
  8001c8:	d0a00117 	ldw	r2,-32764(gp)
  8001cc:	017fffc4 	movi	r5,-1
  8001d0:	11401126 	beq	r2,r5,800218 <led_timer_isr+0x5c>


		if (led_buf[led_offset] == '\0'){
  8001d4:	d0e0e817 	ldw	r3,-31840(gp)
  8001d8:	1887883a 	add	r3,r3,r2
  8001dc:	19000007 	ldb	r4,0(r3)
  8001e0:	00c04034 	movhi	r3,256
  8001e4:	18c49404 	addi	r3,r3,4688
  8001e8:	2000031e 	bne	r4,zero,8001f8 <led_timer_isr+0x3c>
			led_offset = -1;
  8001ec:	d1600115 	stw	r5,-32764(gp)
			IOWR(LED_BASE, 0, led_val);
  8001f0:	d0a0dc17 	ldw	r2,-31888(gp)
  8001f4:	00000506 	br	80020c <led_timer_isr+0x50>
  8001f8:	10800044 	addi	r2,r2,1

		}
		else if (led_buf[led_offset] == '1'){
  8001fc:	01400c44 	movi	r5,49
			led_offset++;
  800200:	d0a00115 	stw	r2,-32764(gp)
		if (led_buf[led_offset] == '\0'){
			led_offset = -1;
			IOWR(LED_BASE, 0, led_val);

		}
		else if (led_buf[led_offset] == '1'){
  800204:	2140031e 	bne	r4,r5,800214 <led_timer_isr+0x58>
			led_offset++;
			IOWR(LED_BASE, 0, 1023);
  800208:	0080ffc4 	movi	r2,1023
  80020c:	18800035 	stwio	r2,0(r3)
  800210:	f800283a 	ret
		}
		else{
			led_offset++;
			IOWR(LED_BASE, 0, 0);
  800214:	18000035 	stwio	zero,0(r3)
  800218:	f800283a 	ret

0080021c <ring_buf_push>:
	RING_T* values;
};

//Buffer functions
void ring_buf_push(struct ring_buffer* buf, RING_T in){
	if (buf->next_free < 0){
  80021c:	20800117 	ldw	r2,4(r4)
  800220:	1000030e 	bge	r2,zero,800230 <ring_buf_push+0x14>
		buf->next_free = buf ->size-1;
  800224:	20800017 	ldw	r2,0(r4)
  800228:	10bfffc4 	addi	r2,r2,-1
  80022c:	20800115 	stw	r2,4(r4)
	}
	(buf->values)[buf->next_free] = in;
  800230:	20c00117 	ldw	r3,4(r4)
  800234:	21800217 	ldw	r6,8(r4)
  800238:	18c5883a 	add	r2,r3,r3
  80023c:	1085883a 	add	r2,r2,r2
  800240:	3085883a 	add	r2,r6,r2
  800244:	11400015 	stw	r5,0(r2)
	(buf->next_free)--;
  800248:	18ffffc4 	addi	r3,r3,-1
  80024c:	20c00115 	stw	r3,4(r4)
  800250:	f800283a 	ret

00800254 <ring_buf_read>:
}

RING_T ring_buf_read(struct ring_buffer* buf, RING_T idx){
	int mapped_idx;
	if (buf->next_free+1+idx >= buf->size){
  800254:	20800117 	ldw	r2,4(r4)
  800258:	10800044 	addi	r2,r2,1
  80025c:	114b883a 	add	r5,r2,r5
  800260:	20800017 	ldw	r2,0(r4)
  800264:	28800116 	blt	r5,r2,80026c <ring_buf_read+0x18>
		mapped_idx = buf->next_free+1+idx - buf->size;
  800268:	288bc83a 	sub	r5,r5,r2
	}
	else {
		mapped_idx = buf->next_free+1+idx;
	}

	return buf->values[mapped_idx];
  80026c:	20800217 	ldw	r2,8(r4)
  800270:	294b883a 	add	r5,r5,r5
  800274:	294b883a 	add	r5,r5,r5
  800278:	114b883a 	add	r5,r2,r5
}
  80027c:	28800017 	ldw	r2,0(r5)
  800280:	f800283a 	ret

00800284 <convolve_fixed>:

alt_32 convolve_fixed(struct ring_buffer* buf, alt_32 coefficients[]  ){
  800284:	defffa04 	addi	sp,sp,-24
  800288:	dd000415 	stw	r20,16(sp)
  80028c:	2029883a 	mov	r20,r4
  800290:	dfc00515 	stw	ra,20(sp)
  800294:	dcc00315 	stw	r19,12(sp)
  800298:	dc800215 	stw	r18,8(sp)
  80029c:	dc400115 	stw	r17,4(sp)
  8002a0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8002a4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8002a8:	00bfff84 	movi	r2,-2
  8002ac:	1884703a 	and	r2,r3,r2
  8002b0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  8002b4:	d120ec17 	ldw	r4,-31824(gp)
  8002b8:	00bff7c4 	movi	r2,-33
  8002bc:	2084703a 	and	r2,r4,r2
  8002c0:	d0a0ec15 	stw	r2,-31824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8002c4:	d0a0ec17 	ldw	r2,-31824(gp)
  8002c8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8002cc:	1801703a 	wrctl	status,r3
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	alt_32 sum = 0;
	for(int i = 0; i < quality; i ++){
  8002d0:	d4e00017 	ldw	r19,-32768(gp)
  8002d4:	2821883a 	mov	r16,r5
  8002d8:	0023883a 	mov	r17,zero

	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	alt_32 sum = 0;
  8002dc:	0025883a 	mov	r18,zero
	for(int i = 0; i < quality; i ++){
  8002e0:	8cc00b0e 	bge	r17,r19,800310 <convolve_fixed+0x8c>
		sum += (coefficients[i]*ring_buf_read(buf, i)>>POINT);
  8002e4:	880b883a 	mov	r5,r17
  8002e8:	a009883a 	mov	r4,r20
  8002ec:	08002540 	call	800254 <ring_buf_read>
  8002f0:	81400017 	ldw	r5,0(r16)
  8002f4:	1009883a 	mov	r4,r2
	//Disabling interrupts prevents accelerometer buffers being overwritten while value is calculated
	//alt_irq_context state = alt_irq_disable_all ();
	alt_irq_disable(TIMER_IRQ);

	alt_32 sum = 0;
	for(int i = 0; i < quality; i ++){
  8002f8:	8c400044 	addi	r17,r17,1
		sum += (coefficients[i]*ring_buf_read(buf, i)>>POINT);
  8002fc:	08018b40 	call	8018b4 <__mulsi3>
  800300:	1005d2fa 	srai	r2,r2,11
  800304:	84000104 	addi	r16,r16,4
  800308:	90a5883a 	add	r18,r18,r2
  80030c:	003ff406 	br	8002e0 <__alt_data_end+0xff8002e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800310:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800314:	00bfff84 	movi	r2,-2
  800318:	1884703a 	and	r2,r3,r2
  80031c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  800320:	d0a0ec17 	ldw	r2,-31824(gp)
  800324:	10800814 	ori	r2,r2,32
  800328:	d0a0ec15 	stw	r2,-31824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80032c:	d0a0ec17 	ldw	r2,-31824(gp)
  800330:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800334:	1801703a 	wrctl	status,r3
	}

	//Re-enable interrupts from state
	//alt_irq_enable_all(state);
	alt_irq_enable(TIMER_IRQ);
	return ((sum*norm_const)>>POINT);
  800338:	d160df17 	ldw	r5,-31876(gp)
  80033c:	9009883a 	mov	r4,r18
  800340:	08018b40 	call	8018b4 <__mulsi3>

}
  800344:	1005d2fa 	srai	r2,r2,11
  800348:	dfc00517 	ldw	ra,20(sp)
  80034c:	dd000417 	ldw	r20,16(sp)
  800350:	dcc00317 	ldw	r19,12(sp)
  800354:	dc800217 	ldw	r18,8(sp)
  800358:	dc400117 	ldw	r17,4(sp)
  80035c:	dc000017 	ldw	r16,0(sp)
  800360:	dec00604 	addi	sp,sp,24
  800364:	f800283a 	ret

00800368 <letter_to_hex>:
	 norm_const = (FIXED)((int)(sum*scalefactor));
	 hw_push_coefficients(norm_const, norm_const);
}


int letter_to_hex(char in){
  800368:	213ff484 	addi	r4,r4,-46
  80036c:	21003fcc 	andi	r4,r4,255
  800370:	00800b04 	movi	r2,44
  800374:	11000536 	bltu	r2,r4,80038c <letter_to_hex+0x24>
  800378:	00802034 	movhi	r2,128
  80037c:	10953e84 	addi	r2,r2,21754
  800380:	1109883a 	add	r4,r2,r4
  800384:	20800003 	ldbu	r2,0(r4)
  800388:	f800283a 	ret

	switch(in){
  80038c:	00803fc4 	movi	r2,255
		default:
			return 0b11111111;
	};

	return 0;
}
  800390:	f800283a 	ret

00800394 <write_to_disp>:

//Display processing
void write_to_disp(char* str, int offset){
  800394:	defffe04 	addi	sp,sp,-8
  800398:	dc000015 	stw	r16,0(sp)
  80039c:	dfc00115 	stw	ra,4(sp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, letter_to_hex(str[offset]));
  8003a0:	2161883a 	add	r16,r4,r5
  8003a4:	81000007 	ldb	r4,0(r16)
  8003a8:	08003680 	call	800368 <letter_to_hex>
  8003ac:	00c04034 	movhi	r3,256
  8003b0:	18c49004 	addi	r3,r3,4672
  8003b4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, letter_to_hex(str[offset+1]));
  8003b8:	81000047 	ldb	r4,1(r16)
  8003bc:	08003680 	call	800368 <letter_to_hex>
  8003c0:	00c04034 	movhi	r3,256
  8003c4:	18c48c04 	addi	r3,r3,4656
  8003c8:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, letter_to_hex(str[offset+2]));
  8003cc:	81000087 	ldb	r4,2(r16)
  8003d0:	08003680 	call	800368 <letter_to_hex>
  8003d4:	00c04034 	movhi	r3,256
  8003d8:	18c48804 	addi	r3,r3,4640
  8003dc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, letter_to_hex(str[offset+3]));
  8003e0:	810000c7 	ldb	r4,3(r16)
  8003e4:	08003680 	call	800368 <letter_to_hex>
  8003e8:	00c04034 	movhi	r3,256
  8003ec:	18c48404 	addi	r3,r3,4624
  8003f0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, letter_to_hex(str[offset+4]));
  8003f4:	81000107 	ldb	r4,4(r16)
  8003f8:	08003680 	call	800368 <letter_to_hex>
  8003fc:	00c04034 	movhi	r3,256
  800400:	18c48004 	addi	r3,r3,4608
  800404:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, letter_to_hex(str[offset+5]));
  800408:	81000147 	ldb	r4,5(r16)
  80040c:	08003680 	call	800368 <letter_to_hex>
  800410:	00c04034 	movhi	r3,256
  800414:	18c47c04 	addi	r3,r3,4592
  800418:	18800035 	stwio	r2,0(r3)
}
  80041c:	dfc00117 	ldw	ra,4(sp)
  800420:	dc000017 	ldw	r16,0(sp)
  800424:	dec00204 	addi	sp,sp,8
  800428:	f800283a 	ret

0080042c <disp_timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);

}

void disp_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  80042c:	00804034 	movhi	r2,256
  800430:	10843804 	addi	r2,r2,4320
  800434:	10000035 	stwio	zero,0(r2)

    if(disp_buf[disp_offset+5] == '\0'){
  800438:	d120e217 	ldw	r4,-31864(gp)
  80043c:	d0a0de17 	ldw	r2,-31880(gp)
  800440:	2087883a 	add	r3,r4,r2
  800444:	18c00147 	ldb	r3,5(r3)
  800448:	1800021e 	bne	r3,zero,800454 <disp_timer_isr+0x28>
    	disp_offset = 0;
  80044c:	d020de15 	stw	zero,-31880(gp)
  800450:	00000206 	br	80045c <disp_timer_isr+0x30>
    }
    else{
    	disp_offset++;
  800454:	10800044 	addi	r2,r2,1
  800458:	d0a0de15 	stw	r2,-31880(gp)
    }
    write_to_disp(disp_buf,disp_offset);
  80045c:	d160de17 	ldw	r5,-31880(gp)
  800460:	08003941 	jmpi	800394 <write_to_disp>

00800464 <clr_disp>:
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, letter_to_hex(str[offset+5]));
}


void clr_disp(){
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 255);
  800464:	00c04034 	movhi	r3,256
  800468:	00803fc4 	movi	r2,255
  80046c:	18c47c04 	addi	r3,r3,4592
  800470:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 255);
  800474:	00c04034 	movhi	r3,256
  800478:	18c48004 	addi	r3,r3,4608
  80047c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 255);
  800480:	00c04034 	movhi	r3,256
  800484:	18c48404 	addi	r3,r3,4624
  800488:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 255);
  80048c:	00c04034 	movhi	r3,256
  800490:	18c48804 	addi	r3,r3,4640
  800494:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 255);
  800498:	00c04034 	movhi	r3,256
  80049c:	18c48c04 	addi	r3,r3,4656
  8004a0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 255);
  8004a4:	00c04034 	movhi	r3,256
  8004a8:	18c49004 	addi	r3,r3,4672
  8004ac:	18800035 	stwio	r2,0(r3)
  8004b0:	f800283a 	ret

008004b4 <read_request>:
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  8004b4:	defffb04 	addi	sp,sp,-20
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  8004b8:	01801004 	movi	r6,64
  8004bc:	000b883a 	mov	r5,zero
}


//Input tokenization and parsing
//---------------------------------------------------------------
void read_request(char* outbuf){
  8004c0:	dfc00415 	stw	ra,16(sp)
  8004c4:	dcc00315 	stw	r19,12(sp)
  8004c8:	dc800215 	stw	r18,8(sp)
  8004cc:	dc400115 	stw	r17,4(sp)
  8004d0:	dc000015 	stw	r16,0(sp)
  8004d4:	2023883a 	mov	r17,r4
	char c;
	int idx = 0;

	//Clear previous request from buffer
	memset(outbuf, 0, BUFFER_SIZE);
  8004d8:	08034d00 	call	8034d0 <memset>

	//Get first character
	c = alt_getchar();
  8004dc:	0804ae80 	call	804ae8 <alt_getchar>
  8004e0:	1025883a 	mov	r18,r2

	//Start timer after first char received
	latency = alt_timestamp();
  8004e4:	080504c0 	call	80504c <alt_timestamp>
  8004e8:	d0a0e515 	stw	r2,-31852(gp)
  8004ec:	d0e0e615 	stw	r3,-31848(gp)

	while(c != '\n'){
  8004f0:	8821883a 	mov	r16,r17
  8004f4:	04c00284 	movi	r19,10
  8004f8:	90803fcc 	andi	r2,r18,255
  8004fc:	1080201c 	xori	r2,r2,128
  800500:	10bfe004 	addi	r2,r2,-128
  800504:	8449c83a 	sub	r4,r16,r17
  800508:	14c00526 	beq	r2,r19,800520 <read_request+0x6c>
		outbuf[idx] = c;
  80050c:	84800005 	stb	r18,0(r16)
		c = alt_getchar();
  800510:	0804ae80 	call	804ae8 <alt_getchar>
  800514:	1025883a 	mov	r18,r2
  800518:	84000044 	addi	r16,r16,1
  80051c:	003ff606 	br	8004f8 <__alt_data_end+0xff8004f8>
		idx++;
	}
	outbuf[idx] = ' ';
  800520:	8909883a 	add	r4,r17,r4
  800524:	00800804 	movi	r2,32
  800528:	20800005 	stb	r2,0(r4)

}
  80052c:	dfc00417 	ldw	ra,16(sp)
  800530:	dcc00317 	ldw	r19,12(sp)
  800534:	dc800217 	ldw	r18,8(sp)
  800538:	dc400117 	ldw	r17,4(sp)
  80053c:	dc000017 	ldw	r16,0(sp)
  800540:	dec00504 	addi	sp,sp,20
  800544:	f800283a 	ret

00800548 <acc_timer_init>:

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  800548:	defffe04 	addi	sp,sp,-8
  80054c:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 1000;
//	alt_32 period = alt_timestamp_freq()/freq;

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  800550:	04004034 	movhi	r16,256

// Timer code
//---------------------------------------------------------------


void acc_timer_init(void * isr) {
  800554:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 1000;
//	alt_32 period = alt_timestamp_freq()/freq;

    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0003);
  800558:	84043104 	addi	r16,r16,4292
  80055c:	008000c4 	movi	r2,3
  800560:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  800564:	00804034 	movhi	r2,256
  800568:	10843004 	addi	r2,r2,4288
  80056c:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(ACC_TIMER_BASE, 0xfbd0);
  800570:	00804034 	movhi	r2,256
  800574:	10843204 	addi	r2,r2,4296
  800578:	00fef414 	movui	r3,64464
  80057c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(ACC_TIMER_BASE, 0x0001);
  800580:	00804034 	movhi	r2,256
  800584:	10843304 	addi	r2,r2,4300
  800588:	00c00044 	movi	r3,1
  80058c:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
  800590:	200d883a 	mov	r6,r4
  800594:	000b883a 	mov	r5,zero
  800598:	01000244 	movi	r4,9
  80059c:	0804b2c0 	call	804b2c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);
  8005a0:	008001c4 	movi	r2,7
  8005a4:	80800035 	stwio	r2,0(r16)

}
  8005a8:	dfc00117 	ldw	ra,4(sp)
  8005ac:	dc000017 	ldw	r16,0(sp)
  8005b0:	dec00204 	addi	sp,sp,8
  8005b4:	f800283a 	ret

008005b8 <disp_timer_init>:
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  8005b8:	defffe04 	addi	sp,sp,-8
  8005bc:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  8005c0:	04004034 	movhi	r16,256
		lasttime = alt_timestamp();
    }
    count++;
}

void disp_timer_init(void * isr) {
  8005c4:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0003);
  8005c8:	84043904 	addi	r16,r16,4324
  8005cc:	008000c4 	movi	r2,3
  8005d0:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(HEX_TIMER_BASE, 0);
  8005d4:	00804034 	movhi	r2,256
  8005d8:	10843804 	addi	r2,r2,4320
  8005dc:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(HEX_TIMER_BASE, 0x5a00);
  8005e0:	00804034 	movhi	r2,256
  8005e4:	10843a04 	addi	r2,r2,4328
  8005e8:	00d68004 	movi	r3,23040
  8005ec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(HEX_TIMER_BASE, 0x0262);
  8005f0:	00804034 	movhi	r2,256
  8005f4:	10843b04 	addi	r2,r2,4332
  8005f8:	00c09884 	movi	r3,610
  8005fc:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(HEX_TIMER_IRQ, 0, isr);
  800600:	200d883a 	mov	r6,r4
  800604:	000b883a 	mov	r5,zero
  800608:	01000204 	movi	r4,8
  80060c:	0804b2c0 	call	804b2c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(HEX_TIMER_BASE, 0x0007);
  800610:	008001c4 	movi	r2,7
  800614:	80800035 	stwio	r2,0(r16)

}
  800618:	dfc00117 	ldw	ra,4(sp)
  80061c:	dc000017 	ldw	r16,0(sp)
  800620:	dec00204 	addi	sp,sp,8
  800624:	f800283a 	ret

00800628 <led_timer_init>:



}

void led_timer_init(void * isr) {
  800628:	defffe04 	addi	sp,sp,-8
  80062c:	dc000015 	stw	r16,0(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  800630:	04004034 	movhi	r16,256



}

void led_timer_init(void * isr) {
  800634:	dfc00115 	stw	ra,4(sp)
	//Calculate necessary cycles for 1 ms period
//	alt_32 freq = 5;
//	alt_32 period = alt_timestamp_freq()/freq;


    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
  800638:	84044904 	addi	r16,r16,4388
  80063c:	008000c4 	movi	r2,3
  800640:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
  800644:	00804034 	movhi	r2,256
  800648:	10844804 	addi	r2,r2,4384
  80064c:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x5d40);
  800650:	00804034 	movhi	r2,256
  800654:	10844a04 	addi	r2,r2,4392
  800658:	00d75004 	movi	r3,23872
  80065c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x00c6);
  800660:	00804034 	movhi	r2,256
  800664:	10844b04 	addi	r2,r2,4396
  800668:	00c03184 	movi	r3,198
  80066c:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
  800670:	200d883a 	mov	r6,r4
  800674:	000b883a 	mov	r5,zero
  800678:	01000144 	movi	r4,5
  80067c:	0804b2c0 	call	804b2c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
  800680:	008001c4 	movi	r2,7
  800684:	80800035 	stwio	r2,0(r16)

}
  800688:	dfc00117 	ldw	ra,4(sp)
  80068c:	dc000017 	ldw	r16,0(sp)
  800690:	dec00204 	addi	sp,sp,8
  800694:	f800283a 	ret

00800698 <to_hex>:
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  800698:	defffc04 	addi	sp,sp,-16
  80069c:	dc400115 	stw	r17,4(sp)
  8006a0:	3023883a 	mov	r17,r6
  8006a4:	dc800215 	stw	r18,8(sp)
  8006a8:	dc000015 	stw	r16,0(sp)
  8006ac:	2025883a 	mov	r18,r4
  8006b0:	2821883a 	mov	r16,r5
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  8006b4:	01800204 	movi	r6,8
  8006b8:	000b883a 	mov	r5,zero
  8006bc:	8809883a 	mov	r4,r17
//Input processing
//---------------------------------------------------------------
//Function takes integer and writes to character buffer the hex representation in
//such a way that it is padded or cut down to length

void to_hex(alt_32 val, int length, char* buf ){
  8006c0:	dfc00315 	stw	ra,12(sp)
	//Clear previous data from buffer and write new
	memset(buf, 0, HEX_BUF_SIZE);
  8006c4:	08034d00 	call	8034d0 <memset>
	sprintf(buf, "%x", val);
  8006c8:	01402034 	movhi	r5,128
  8006cc:	8809883a 	mov	r4,r17
  8006d0:	900d883a 	mov	r6,r18
  8006d4:	2954e704 	addi	r5,r5,21404
  8006d8:	08038680 	call	803868 <sprintf>
	int hexlen = strlen(buf);
  8006dc:	8809883a 	mov	r4,r17
  8006e0:	08039440 	call	803944 <strlen>

	//Left shift if string is longer than desired length to take least significant
	if (hexlen > length){
  8006e4:	8080090e 	bge	r16,r2,80070c <to_hex+0x74>
  8006e8:	8807883a 	mov	r3,r17
		for(int i = 0; i < length; i++){
  8006ec:	1c49c83a 	sub	r4,r3,r17
  8006f0:	24000c0e 	bge	r4,r16,800724 <to_hex+0x8c>
			buf[i] = buf[(i + hexlen - length)];
  8006f4:	10c9883a 	add	r4,r2,r3
  8006f8:	2409c83a 	sub	r4,r4,r16
  8006fc:	21000003 	ldbu	r4,0(r4)
  800700:	18c00044 	addi	r3,r3,1
  800704:	193fffc5 	stb	r4,-1(r3)
  800708:	003ff806 	br	8006ec <__alt_data_end+0xff8006ec>
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
  80070c:	1400050e 	bge	r2,r16,800724 <to_hex+0x8c>
  800710:	80ffffc4 	addi	r3,r16,-1
  800714:	88c7883a 	add	r3,r17,r3
  800718:	0009883a 	mov	r4,zero
		for(int i = 0; i < length; i++){
			if(i < hexlen){
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
			}
			else{
				buf[(length - 1 - i)] = '0';
  80071c:	01800c04 	movi	r6,48
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800720:	24000816 	blt	r4,r16,800744 <to_hex+0xac>
			}

		}
	}
	//Add termination
	buf[length] = '\0';
  800724:	8c21883a 	add	r16,r17,r16
  800728:	80000005 	stb	zero,0(r16)

}
  80072c:	dfc00317 	ldw	ra,12(sp)
  800730:	dc800217 	ldw	r18,8(sp)
  800734:	dc400117 	ldw	r17,4(sp)
  800738:	dc000017 	ldw	r16,0(sp)
  80073c:	dec00404 	addi	sp,sp,16
  800740:	f800283a 	ret
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
			if(i < hexlen){
  800744:	2080050e 	bge	r4,r2,80075c <to_hex+0xc4>
				buf[(length - 1 - i)] = buf[(length - 1 - i) - (length-hexlen)];
  800748:	1c0bc83a 	sub	r5,r3,r16
  80074c:	288b883a 	add	r5,r5,r2
  800750:	29400003 	ldbu	r5,0(r5)
  800754:	19400005 	stb	r5,0(r3)
  800758:	00000106 	br	800760 <to_hex+0xc8>
			}
			else{
				buf[(length - 1 - i)] = '0';
  80075c:	19800005 	stb	r6,0(r3)
			buf[i] = buf[(i + hexlen - length)];
		}
	}
	//Right shift to align if desired hex is shorter than desired
	else if (hexlen < length){
		for(int i = 0; i < length; i++){
  800760:	21000044 	addi	r4,r4,1
  800764:	18ffffc4 	addi	r3,r3,-1
  800768:	003fed06 	br	800720 <__alt_data_end+0xff800720>

0080076c <throw_code>:

}


void throw_code(char* regname, int code){
	printf("K %s %x\n", regname, code);
  80076c:	280d883a 	mov	r6,r5
  800770:	200b883a 	mov	r5,r4
  800774:	01002034 	movhi	r4,128
  800778:	2114e804 	addi	r4,r4,21408
  80077c:	08037681 	jmpi	803768 <printf>

00800780 <hw_reset>:
}

//Hardware helper functions
void hw_reset(){
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800780:	00804034 	movhi	r2,256
  800784:	0007883a 	mov	r3,zero
  800788:	10846804 	addi	r2,r2,4512
  80078c:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 4);
  800790:	01000104 	movi	r4,4
  800794:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 7);
  800798:	010001c4 	movi	r4,7
  80079c:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  8007a0:	10c00035 	stwio	r3,0(r2)
  8007a4:	f800283a 	ret

008007a8 <hw_push_value>:
};

void hw_push_value(alt_32 xvalue, alt_32 yvalue){
	IOWR(HARDWARE_OUT_X_BASE,0, xvalue);
  8007a8:	00804034 	movhi	r2,256
  8007ac:	10847004 	addi	r2,r2,4544
  8007b0:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_OUT_Y_BASE,0, yvalue);
  8007b4:	00804034 	movhi	r2,256
  8007b8:	10846004 	addi	r2,r2,4480
  8007bc:	11400035 	stwio	r5,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  8007c0:	00804034 	movhi	r2,256
  8007c4:	0007883a 	mov	r3,zero
  8007c8:	10846804 	addi	r2,r2,4512
  8007cc:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 1);
  8007d0:	01000044 	movi	r4,1
  8007d4:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  8007d8:	10c00035 	stwio	r3,0(r2)
  8007dc:	f800283a 	ret

008007e0 <acc_timer_isr>:
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  8007e0:	defffa04 	addi	sp,sp,-24
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  8007e4:	00804034 	movhi	r2,256
    alt_irq_register(ACC_TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(ACC_TIMER_BASE, 0x0007);

}

void acc_timer_isr() {
  8007e8:	dfc00515 	stw	ra,20(sp)
  8007ec:	dc400415 	stw	r17,16(sp)
  8007f0:	dc000315 	stw	r16,12(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(ACC_TIMER_BASE, 0);
  8007f4:	10843004 	addi	r2,r2,4288
  8007f8:	10000035 	stwio	zero,0(r2)


    alt_32 x,y,z;

    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  8007fc:	d120e717 	ldw	r4,-31844(gp)
  800800:	d9400204 	addi	r5,sp,8
  800804:	08050f80 	call	8050f8 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800808:	d120e717 	ldw	r4,-31844(gp)
  80080c:	d9400104 	addi	r5,sp,4
  800810:	08051500 	call	805150 <alt_up_accelerometer_spi_read_y_axis>
	alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800814:	d120e717 	ldw	r4,-31844(gp)
  800818:	d80b883a 	mov	r5,sp
  80081c:	08051a80 	call	8051a8 <alt_up_accelerometer_spi_read_z_axis>

	hw_push_value(x,y);
  800820:	d9400117 	ldw	r5,4(sp)
  800824:	d9000217 	ldw	r4,8(sp)
  800828:	08007a80 	call	8007a8 <hw_push_value>

	ring_buf_push(z_buf, z);
  80082c:	d9400017 	ldw	r5,0(sp)
  800830:	d120e417 	ldw	r4,-31856(gp)
  800834:	080021c0 	call	80021c <ring_buf_push>

	//iNTERRUPT FREQUENCY MONITORING
	static int count;
	static alt_64 lasttime;

    if(debug && ((count & 4095) == 0) ){
  800838:	d0a0db17 	ldw	r2,-31892(gp)
  80083c:	10002226 	beq	r2,zero,8008c8 <acc_timer_isr+0xe8>
  800840:	d0a0d917 	ldw	r2,-31900(gp)
  800844:	1083ffcc 	andi	r2,r2,4095
  800848:	10001f1e 	bne	r2,zero,8008c8 <acc_timer_isr+0xe8>
    	printf("Avg sampling period (us): %i\n", (alt_timestamp()-lasttime)/4096 /(alt_timestamp_freq()/1000000) );
  80084c:	080504c0 	call	80504c <alt_timestamp>
  800850:	d460d717 	ldw	r17,-31908(gp)
  800854:	d160d817 	ldw	r5,-31904(gp)
  800858:	1463c83a 	sub	r17,r2,r17
  80085c:	1445803a 	cmpltu	r2,r2,r17
  800860:	1947c83a 	sub	r3,r3,r5
  800864:	1887c83a 	sub	r3,r3,r2
  800868:	1804953a 	slli	r2,r3,20
  80086c:	8822d33a 	srli	r17,r17,12
  800870:	1820d33a 	srli	r16,r3,12
  800874:	1462b03a 	or	r17,r2,r17
  800878:	08050980 	call	805098 <alt_timestamp_freq>
  80087c:	014003f4 	movhi	r5,15
  800880:	29509004 	addi	r5,r5,16960
  800884:	1009883a 	mov	r4,r2
  800888:	08017f80 	call	8017f8 <__udivsi3>
  80088c:	000f883a 	mov	r7,zero
  800890:	100d883a 	mov	r6,r2
  800894:	8809883a 	mov	r4,r17
  800898:	800b883a 	mov	r5,r16
  80089c:	08011040 	call	801104 <__udivdi3>
  8008a0:	01002034 	movhi	r4,128
  8008a4:	100b883a 	mov	r5,r2
  8008a8:	180d883a 	mov	r6,r3
  8008ac:	2114eb04 	addi	r4,r4,21420
  8008b0:	08037680 	call	803768 <printf>
		count = 1;
  8008b4:	00800044 	movi	r2,1
  8008b8:	d0a0d915 	stw	r2,-31900(gp)
		lasttime = alt_timestamp();
  8008bc:	080504c0 	call	80504c <alt_timestamp>
  8008c0:	d0a0d715 	stw	r2,-31908(gp)
  8008c4:	d0e0d815 	stw	r3,-31904(gp)
    }
    count++;
  8008c8:	d0a0d917 	ldw	r2,-31900(gp)
  8008cc:	10800044 	addi	r2,r2,1
  8008d0:	d0a0d915 	stw	r2,-31900(gp)
}
  8008d4:	dfc00517 	ldw	ra,20(sp)
  8008d8:	dc400417 	ldw	r17,16(sp)
  8008dc:	dc000317 	ldw	r16,12(sp)
  8008e0:	dec00604 	addi	sp,sp,24
  8008e4:	f800283a 	ret

008008e8 <hw_push_coefficients>:
	IOWR(HARDWARE_CLOCKS_BASE, 0, 1);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);

}
void hw_push_coefficients(alt_32 xvalue, alt_32 yvalue){
	IOWR(HARDWARE_OUT_X_BASE,0, xvalue);
  8008e8:	00804034 	movhi	r2,256
  8008ec:	10847004 	addi	r2,r2,4544
  8008f0:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_OUT_Y_BASE,0, yvalue);
  8008f4:	00804034 	movhi	r2,256
  8008f8:	10846004 	addi	r2,r2,4480
  8008fc:	11400035 	stwio	r5,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800900:	00804034 	movhi	r2,256
  800904:	0007883a 	mov	r3,zero
  800908:	10846804 	addi	r2,r2,4512
  80090c:	10c00035 	stwio	r3,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
  800910:	01000084 	movi	r4,2
  800914:	11000035 	stwio	r4,0(r2)
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
  800918:	10c00035 	stwio	r3,0(r2)
  80091c:	f800283a 	ret

00800920 <coeffs_to_fixed>:
	//alt_irq_enable_all(state);
	alt_irq_enable(TIMER_IRQ);
	return ((sum*norm_const)>>POINT);

}
void coeffs_to_fixed(){
  800920:	defff804 	addi	sp,sp,-32
  800924:	dfc00715 	stw	ra,28(sp)
  800928:	dd800615 	stw	r22,24(sp)
  80092c:	dd400515 	stw	r21,20(sp)
  800930:	dd000415 	stw	r20,16(sp)
  800934:	dcc00315 	stw	r19,12(sp)
  800938:	dc800215 	stw	r18,8(sp)
  80093c:	dc400115 	stw	r17,4(sp)
  800940:	dc000015 	stw	r16,0(sp)

	hw_reset();
  800944:	08007800 	call	800780 <hw_reset>

	if (hfixed == NULL){
  800948:	d120da17 	ldw	r4,-31896(gp)
  80094c:	2000041e 	bne	r4,zero,800960 <coeffs_to_fixed+0x40>
		hfixed = malloc(RING_SIZE * sizeof(FIXED));
  800950:	01003b04 	movi	r4,236
  800954:	08034a80 	call	8034a8 <malloc>
  800958:	d0a0da15 	stw	r2,-31896(gp)
  80095c:	00000306 	br	80096c <coeffs_to_fixed+0x4c>
	}
	else{
		memset(hfixed, 0, RING_SIZE);
  800960:	01800ec4 	movi	r6,59
  800964:	000b883a 	mov	r5,zero
  800968:	08034d00 	call	8034d0 <memset>

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  80096c:	d0a00017 	ldw	r2,-32768(gp)

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){

		hfixed[real_index]= (FIXED)(h[i]*scalefactor);
  800970:	04d00034 	movhi	r19,16384
	}
	else{
		memset(hfixed, 0, RING_SIZE);
	}

	double sum = 0;
  800974:	002d883a 	mov	r22,zero

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800978:	1006d7fa 	srli	r3,r2,31
	}
	else{
		memset(hfixed, 0, RING_SIZE);
	}

	double sum = 0;
  80097c:	002b883a 	mov	r21,zero

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){

		hfixed[real_index]= (FIXED)(h[i]*scalefactor);
  800980:	9cfff8c4 	addi	r19,r19,-29

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800984:	1885883a 	add	r2,r3,r2
  800988:	1007d07a 	srai	r3,r2,1
	int upper_bound = RING_SIZE/2 + quality/2;
  80098c:	1005d07a 	srai	r2,r2,1

	//Multiply to shift for fixed point
	int scalefactor = 1 << POINT;

	//Re-indexing
	int lower_bound = RING_SIZE/2 - quality/2;
  800990:	00c7c83a 	sub	r3,zero,r3
  800994:	1d000744 	addi	r20,r3,29
  800998:	a02090fa 	slli	r16,r20,3
  80099c:	182497ba 	slli	r18,r3,30
	int upper_bound = RING_SIZE/2 + quality/2;
  8009a0:	14400744 	addi	r17,r2,29
  8009a4:	00802034 	movhi	r2,128
  8009a8:	10962d04 	addi	r2,r2,22708
  8009ac:	80a1883a 	add	r16,r16,r2
  8009b0:	90e5c83a 	sub	r18,r18,r3

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){
  8009b4:	a4401c0e 	bge	r20,r17,800a28 <coeffs_to_fixed+0x108>

		hfixed[real_index]= (FIXED)(h[i]*scalefactor);
  8009b8:	81000017 	ldw	r4,0(r16)
  8009bc:	81400117 	ldw	r5,4(r16)
  8009c0:	000d883a 	mov	r6,zero
  8009c4:	01d02834 	movhi	r7,16544
  8009c8:	0802b580 	call	802b58 <__muldf3>
  8009cc:	180b883a 	mov	r5,r3
  8009d0:	1009883a 	mov	r4,r2
  8009d4:	08033c40 	call	8033c4 <__fixdfsi>
  8009d8:	a487883a 	add	r3,r20,r18
  8009dc:	d120da17 	ldw	r4,-31896(gp)
  8009e0:	1cc7883a 	add	r3,r3,r19
  8009e4:	18c7883a 	add	r3,r3,r3
  8009e8:	18c7883a 	add	r3,r3,r3
  8009ec:	20c7883a 	add	r3,r4,r3
		hw_push_coefficients(hfixed[real_index], hfixed[real_index]);
  8009f0:	100b883a 	mov	r5,r2
  8009f4:	1009883a 	mov	r4,r2

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){

		hfixed[real_index]= (FIXED)(h[i]*scalefactor);
  8009f8:	18800015 	stw	r2,0(r3)
		hw_push_coefficients(hfixed[real_index], hfixed[real_index]);
  8009fc:	08008e80 	call	8008e8 <hw_push_coefficients>
		sum += h[i];
  800a00:	81800017 	ldw	r6,0(r16)
  800a04:	81c00117 	ldw	r7,4(r16)
  800a08:	b009883a 	mov	r4,r22
  800a0c:	a80b883a 	mov	r5,r21
  800a10:	08018dc0 	call	8018dc <__adddf3>
  800a14:	102d883a 	mov	r22,r2
  800a18:	182b883a 	mov	r21,r3
	int lower_bound = RING_SIZE/2 - quality/2;
	int upper_bound = RING_SIZE/2 + quality/2;

	//Indexing system for taking values from center of impulse response array

	for(int i = lower_bound; i< upper_bound; i++){
  800a1c:	a5000044 	addi	r20,r20,1
  800a20:	84000204 	addi	r16,r16,8
  800a24:	003fe306 	br	8009b4 <__alt_data_end+0xff8009b4>

	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
  800a28:	b00d883a 	mov	r6,r22
  800a2c:	a80f883a 	mov	r7,r21
  800a30:	0009883a 	mov	r4,zero
  800a34:	014ffc34 	movhi	r5,16368
  800a38:	08021880 	call	802188 <__divdf3>
  800a3c:	000d883a 	mov	r6,zero
  800a40:	01d02834 	movhi	r7,16544
  800a44:	1009883a 	mov	r4,r2
  800a48:	180b883a 	mov	r5,r3
  800a4c:	0802b580 	call	802b58 <__muldf3>
  800a50:	180b883a 	mov	r5,r3
  800a54:	1009883a 	mov	r4,r2
  800a58:	08033c40 	call	8033c4 <__fixdfsi>
	 hw_push_coefficients(norm_const, norm_const);
  800a5c:	100b883a 	mov	r5,r2
  800a60:	1009883a 	mov	r4,r2

	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
  800a64:	d0a0df15 	stw	r2,-31876(gp)
	 hw_push_coefficients(norm_const, norm_const);
}
  800a68:	dfc00717 	ldw	ra,28(sp)
  800a6c:	dd800617 	ldw	r22,24(sp)
  800a70:	dd400517 	ldw	r21,20(sp)
  800a74:	dd000417 	ldw	r20,16(sp)
  800a78:	dcc00317 	ldw	r19,12(sp)
  800a7c:	dc800217 	ldw	r18,8(sp)
  800a80:	dc400117 	ldw	r17,4(sp)
  800a84:	dc000017 	ldw	r16,0(sp)
  800a88:	dec00804 	addi	sp,sp,32
	//Floating point scaling factor
	 sum = 1/sum;

	 //Fixed point conversion of normalization constant
	 norm_const = (FIXED)((int)(sum*scalefactor));
	 hw_push_coefficients(norm_const, norm_const);
  800a8c:	08008e81 	jmpi	8008e8 <hw_push_coefficients>

00800a90 <parse_request>:
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  800a90:	deffee04 	addi	sp,sp,-72
	int token_number = 0;
	char* tokens[8] = {};
  800a94:	01800804 	movi	r6,32
  800a98:	000b883a 	mov	r5,zero
  800a9c:	d809883a 	mov	r4,sp
	}
	outbuf[idx] = ' ';

}

void parse_request(char* request){
  800aa0:	dfc01115 	stw	ra,68(sp)
  800aa4:	dc000b15 	stw	r16,44(sp)
  800aa8:	dd401015 	stw	r21,64(sp)
  800aac:	dd000f15 	stw	r20,60(sp)
  800ab0:	dcc00e15 	stw	r19,56(sp)
  800ab4:	dc800d15 	stw	r18,52(sp)
  800ab8:	dc400c15 	stw	r17,48(sp)
	int token_number = 0;
	char* tokens[8] = {};
  800abc:	08034d00 	call	8034d0 <memset>
	char* token;


	token = strtok(cmdbuffer, " ");
  800ac0:	d120e017 	ldw	r4,-31872(gp)
  800ac4:	01402034 	movhi	r5,128
  800ac8:	29550804 	addi	r5,r5,21536
  800acc:	08039b40 	call	8039b4 <strtok>
	outbuf[idx] = ' ';

}

void parse_request(char* request){
	int token_number = 0;
  800ad0:	0021883a 	mov	r16,zero


	token = strtok(cmdbuffer, " ");


	while(token != NULL){
  800ad4:	10000a26 	beq	r2,zero,800b00 <parse_request+0x70>
		tokens[token_number]= token;
  800ad8:	8407883a 	add	r3,r16,r16
  800adc:	18c7883a 	add	r3,r3,r3
  800ae0:	d8c7883a 	add	r3,sp,r3
		token_number++;
		token = strtok(NULL, " ");
  800ae4:	01402034 	movhi	r5,128

	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
  800ae8:	18800015 	stw	r2,0(r3)
		token_number++;
		token = strtok(NULL, " ");
  800aec:	29550804 	addi	r5,r5,21536
  800af0:	0009883a 	mov	r4,zero
	token = strtok(cmdbuffer, " ");


	while(token != NULL){
		tokens[token_number]= token;
		token_number++;
  800af4:	84000044 	addi	r16,r16,1
		token = strtok(NULL, " ");
  800af8:	08039b40 	call	8039b4 <strtok>
  800afc:	003ff506 	br	800ad4 <__alt_data_end+0xff800ad4>
	}

	if(token_number == 0 || strcmp(tokens[0], &"R" ) != 0){
  800b00:	80000526 	beq	r16,zero,800b18 <parse_request+0x88>
  800b04:	d9000017 	ldw	r4,0(sp)
  800b08:	01402034 	movhi	r5,128
  800b0c:	2954f304 	addi	r5,r5,21452
  800b10:	08038e00 	call	8038e0 <strcmp>
  800b14:	10000226 	beq	r2,zero,800b20 <parse_request+0x90>
		throw_code(&"ERR", 1);
  800b18:	01400044 	movi	r5,1
  800b1c:	00008d06 	br	800d54 <parse_request+0x2c4>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
  800b20:	dc400117 	ldw	r17,4(sp)
  800b24:	01402034 	movhi	r5,128
  800b28:	2954f504 	addi	r5,r5,21460
  800b2c:	8809883a 	mov	r4,r17
  800b30:	08038e00 	call	8038e0 <strcmp>
  800b34:	1025883a 	mov	r18,r2
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
  800b38:	10000526 	beq	r2,zero,800b50 <parse_request+0xc0>
  800b3c:	01402034 	movhi	r5,128
  800b40:	2954f604 	addi	r5,r5,21464
  800b44:	8809883a 	mov	r4,r17
  800b48:	08038e00 	call	8038e0 <strcmp>
  800b4c:	1000251e 	bne	r2,zero,800be4 <parse_request+0x154>
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
}
alt_32 hw_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_X_BASE);
  800b50:	00804034 	movhi	r2,256
  800b54:	10846c04 	addi	r2,r2,4528
  800b58:	15400037 	ldwio	r21,0(r2)
}

alt_32 hw_y_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_Y_BASE);
  800b5c:	00804034 	movhi	r2,256
  800b60:	10846404 	addi	r2,r2,4496
  800b64:	15000037 	ldwio	r20,0(r2)
		matched = 1;

		alt_32 x,y,z;
			x = hw_x_read();
			y = hw_y_read();
			z = convolve_fixed(z_buf, hfixed);
  800b68:	d160da17 	ldw	r5,-31896(gp)
  800b6c:	d120e417 	ldw	r4,-31856(gp)

			to_hex(x, 3, hexbuffers[0]);
  800b70:	04002034 	movhi	r16,128
  800b74:	8417db04 	addi	r16,r16,24428
		matched = 1;

		alt_32 x,y,z;
			x = hw_x_read();
			y = hw_y_read();
			z = convolve_fixed(z_buf, hfixed);
  800b78:	08002840 	call	800284 <convolve_fixed>

			to_hex(x, 3, hexbuffers[0]);
  800b7c:	81800017 	ldw	r6,0(r16)
  800b80:	014000c4 	movi	r5,3
  800b84:	a809883a 	mov	r4,r21
		matched = 1;

		alt_32 x,y,z;
			x = hw_x_read();
			y = hw_y_read();
			z = convolve_fixed(z_buf, hfixed);
  800b88:	1027883a 	mov	r19,r2

			to_hex(x, 3, hexbuffers[0]);
  800b8c:	08006980 	call	800698 <to_hex>
			to_hex(y, 3, hexbuffers[1]);
  800b90:	81800117 	ldw	r6,4(r16)
  800b94:	014000c4 	movi	r5,3
  800b98:	a009883a 	mov	r4,r20
  800b9c:	08006980 	call	800698 <to_hex>
			to_hex(z, 3, hexbuffers[2]);
  800ba0:	81800217 	ldw	r6,8(r16)
  800ba4:	014000c4 	movi	r5,3
  800ba8:	9809883a 	mov	r4,r19
  800bac:	08006980 	call	800698 <to_hex>

			if (is_all){
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800bb0:	81c00217 	ldw	r7,8(r16)
  800bb4:	81800117 	ldw	r6,4(r16)
  800bb8:	81400017 	ldw	r5,0(r16)

			to_hex(x, 3, hexbuffers[0]);
			to_hex(y, 3, hexbuffers[1]);
			to_hex(z, 3, hexbuffers[2]);

			if (is_all){
  800bbc:	9000041e 	bne	r18,zero,800bd0 <parse_request+0x140>
				alt_printf("K ACCPROC X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800bc0:	01002034 	movhi	r4,128
  800bc4:	2114f804 	addi	r4,r4,21472
  800bc8:	0804ccc0 	call	804ccc <alt_printf>
  800bcc:	00000b06 	br	800bfc <parse_request+0x16c>
			}
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800bd0:	01002034 	movhi	r4,128
  800bd4:	2114fe04 	addi	r4,r4,21496
  800bd8:	0804ccc0 	call	804ccc <alt_printf>
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;

	if(is_all || (strcmp(tokens[1], &"ACCPROC") == 0)){
		//alt_printf("Tried to read accproc");
		matched = 1;
  800bdc:	04000044 	movi	r16,1
  800be0:	00000106 	br	800be8 <parse_request+0x158>
		return;
	}

	//Read request parsing
	int is_all = (strcmp(tokens[1], &"ALL") == 0); //Strcmp is weird and equal is denoted by 0
	int matched = 0;
  800be4:	0021883a 	mov	r16,zero
			else{
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
  800be8:	01402034 	movhi	r5,128
  800bec:	29552c04 	addi	r5,r5,21680
  800bf0:	8809883a 	mov	r4,r17
  800bf4:	08038e00 	call	8038e0 <strcmp>
  800bf8:	1000231e 	bne	r2,zero,800c88 <parse_request+0x1f8>
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800bfc:	d120e717 	ldw	r4,-31844(gp)
  800c00:	d9400a04 	addi	r5,sp,40
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800c04:	04002034 	movhi	r16,128
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
  800c08:	08050f80 	call	8050f8 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800c0c:	d120e717 	ldw	r4,-31844(gp)
  800c10:	d9400904 	addi	r5,sp,36
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);

		to_hex(x, 3, hexbuffers[0]);
  800c14:	8417db04 	addi	r16,r16,24428
		matched = 1;

		//Direct accelerometer read
		alt_32 x,y,z;
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y);
  800c18:	08051500 	call	805150 <alt_up_accelerometer_spi_read_y_axis>
		alt_up_accelerometer_spi_read_z_axis(acc_dev, & z);
  800c1c:	d120e717 	ldw	r4,-31844(gp)
  800c20:	d9400804 	addi	r5,sp,32
  800c24:	08051a80 	call	8051a8 <alt_up_accelerometer_spi_read_z_axis>

		to_hex(x, 3, hexbuffers[0]);
  800c28:	81800017 	ldw	r6,0(r16)
  800c2c:	d9000a17 	ldw	r4,40(sp)
  800c30:	014000c4 	movi	r5,3
  800c34:	08006980 	call	800698 <to_hex>
		to_hex(y, 3, hexbuffers[1]);
  800c38:	81800117 	ldw	r6,4(r16)
  800c3c:	d9000917 	ldw	r4,36(sp)
  800c40:	014000c4 	movi	r5,3
  800c44:	08006980 	call	800698 <to_hex>
		to_hex(z, 3, hexbuffers[2]);
  800c48:	81800217 	ldw	r6,8(r16)
  800c4c:	d9000817 	ldw	r4,32(sp)
  800c50:	014000c4 	movi	r5,3
  800c54:	08006980 	call	800698 <to_hex>

		if (is_all){
			printf("ACCRAW X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800c58:	81c00217 	ldw	r7,8(r16)
  800c5c:	81800117 	ldw	r6,4(r16)
  800c60:	81400017 	ldw	r5,0(r16)

		to_hex(x, 3, hexbuffers[0]);
		to_hex(y, 3, hexbuffers[1]);
		to_hex(z, 3, hexbuffers[2]);

		if (is_all){
  800c64:	9000041e 	bne	r18,zero,800c78 <parse_request+0x1e8>
			printf("ACCRAW X%sY%sZ%s ", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800c68:	01002034 	movhi	r4,128
  800c6c:	21150404 	addi	r4,r4,21520
  800c70:	08037680 	call	803768 <printf>
  800c74:	00000906 	br	800c9c <parse_request+0x20c>
		}
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
  800c78:	01002034 	movhi	r4,128
  800c7c:	21150904 	addi	r4,r4,21540
  800c80:	08037680 	call	803768 <printf>
				alt_printf("K ACCPROC X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
			}

	}
	if (is_all || strcmp(tokens[1], &"ACCRAW") == 0){
		matched = 1;
  800c84:	04000044 	movi	r16,1
		else{
			printf("K ACCRAW X%sY%sZ%s 0\n", hexbuffers[0], hexbuffers[1], hexbuffers[2]);
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){
  800c88:	01402034 	movhi	r5,128
  800c8c:	29550f04 	addi	r5,r5,21564
  800c90:	8809883a 	mov	r4,r17
  800c94:	08038e00 	call	8038e0 <strcmp>
  800c98:	10000e1e 	bne	r2,zero,800cd4 <parse_request+0x244>

		matched = 1;
		alt_32 button = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
  800c9c:	00804034 	movhi	r2,256
  800ca0:	10847404 	addi	r2,r2,4560
  800ca4:	11400037 	ldwio	r5,0(r2)
  800ca8:	014a303a 	nor	r5,zero,r5

		//Button response processing
		//Bitmask
		alt_32 mask = 0x3;
		button = button & mask;
  800cac:	294000cc 	andi	r5,r5,3

		if (is_all){
  800cb0:	9000041e 	bne	r18,zero,800cc4 <parse_request+0x234>
			alt_printf("BUTTON %x ", button);
  800cb4:	01002034 	movhi	r4,128
  800cb8:	21151104 	addi	r4,r4,21572
  800cbc:	0804ccc0 	call	804ccc <alt_printf>
  800cc0:	00000906 	br	800ce8 <parse_request+0x258>
		}
		else{
			alt_printf("K BUTTON %x 0\n", button);
  800cc4:	01002034 	movhi	r4,128
  800cc8:	21151404 	addi	r4,r4,21584
  800ccc:	0804ccc0 	call	804ccc <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"BUTTON") == 0){

		matched = 1;
  800cd0:	04000044 	movi	r16,1
		else{
			alt_printf("K BUTTON %x 0\n", button);
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
  800cd4:	01402034 	movhi	r5,128
  800cd8:	29552e04 	addi	r5,r5,21688
  800cdc:	8809883a 	mov	r4,r17
  800ce0:	08038e00 	call	8038e0 <strcmp>
  800ce4:	10001f1e 	bne	r2,zero,800d64 <parse_request+0x2d4>
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800ce8:	00804034 	movhi	r2,256
  800cec:	10847804 	addi	r2,r2,4576
  800cf0:	14000037 	ldwio	r16,0(r2)
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800cf4:	00802034 	movhi	r2,128
  800cf8:	1097db04 	addi	r2,r2,24428
	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
  800cfc:	0420303a 	nor	r16,zero,r16
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);
  800d00:	11800017 	ldw	r6,0(r2)
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
  800d04:	8400ffcc 	andi	r16,r16,1023
		to_hex(switches, 3, hexbuffers[0]);
  800d08:	014000c4 	movi	r5,3
  800d0c:	8009883a 	mov	r4,r16
  800d10:	08006980 	call	800698 <to_hex>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
  800d14:	800b883a 	mov	r5,r16

		alt_32 switches = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switches &= 0x3ff;
		to_hex(switches, 3, hexbuffers[0]);

		if (is_all){
  800d18:	9000071e 	bne	r18,zero,800d38 <parse_request+0x2a8>
			alt_printf("SWITCH %x ", switches);
  800d1c:	01002034 	movhi	r4,128
  800d20:	21151804 	addi	r4,r4,21600
  800d24:	0804ccc0 	call	804ccc <alt_printf>

	}

	//Saves unnecessary comparisons
	if (is_all){
		alt_printf(" 0\n");
  800d28:	01002034 	movhi	r4,128
  800d2c:	21151b04 	addi	r4,r4,21612
  800d30:	0804ccc0 	call	804ccc <alt_printf>
		return;
  800d34:	00006d06 	br	800eec <parse_request+0x45c>

		if (is_all){
			alt_printf("SWITCH %x ", switches);
		}
		else{
			alt_printf("K SWITCH %x 0\n", switches);
  800d38:	01002034 	movhi	r4,128
  800d3c:	21151c04 	addi	r4,r4,21616
  800d40:	0804ccc0 	call	804ccc <alt_printf>
		}

	}
	if (is_all || strcmp(tokens[1], &"SWITCH") == 0){
		//alt_printf("Tried to read switch");
		matched = 1;
  800d44:	04000044 	movi	r16,1
  800d48:	00000606 	br	800d64 <parse_request+0x2d4>
			debug = (int) strtol(tokens[2], 0, 16);
			throw_code(&"DEBUG", 0);
			matched = 1;
		}

	if (!matched){
  800d4c:	8000671e 	bne	r16,zero,800eec <parse_request+0x45c>
		throw_code(&"ERR", 2);
  800d50:	01400084 	movi	r5,2
  800d54:	01002034 	movhi	r4,128
  800d58:	2114f404 	addi	r4,r4,21456
  800d5c:	080076c0 	call	80076c <throw_code>
  800d60:	00006206 	br	800eec <parse_request+0x45c>
	}


	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){
  800d64:	01402034 	movhi	r5,128
  800d68:	29552004 	addi	r5,r5,21632
  800d6c:	8809883a 	mov	r4,r17
  800d70:	08038e00 	call	8038e0 <strcmp>
  800d74:	1000111e 	bne	r2,zero,800dbc <parse_request+0x32c>

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  800d78:	d120e217 	ldw	r4,-31864(gp)
  800d7c:	01801904 	movi	r6,100
  800d80:	000b883a 	mov	r5,zero
  800d84:	08034d00 	call	8034d0 <memset>
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800d88:	d9400217 	ldw	r5,8(sp)
  800d8c:	d120e217 	ldw	r4,-31864(gp)
  800d90:	01801904 	movi	r6,100
	//Write request parsing

	if (strcmp(tokens[1], &"HEXTEXT") == 0){

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
  800d94:	04000044 	movi	r16,1
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
  800d98:	08039600 	call	803960 <strncpy>
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800d9c:	d120e217 	ldw	r4,-31864(gp)

		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_offset = 0;
  800da0:	d020de15 	stw	zero,-31880(gp)
		disp_length = strlen(disp_buf);
  800da4:	08039440 	call	803944 <strlen>

		throw_code(&"HEXTEXT", 0);
  800da8:	01002034 	movhi	r4,128
  800dac:	000b883a 	mov	r5,zero
  800db0:	21152004 	addi	r4,r4,21632
		//alt_printf("Tried to write HEXTEXT");
		matched = 1;
		memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
		strncpy(disp_buf, tokens[2], DISP_BUF_SIZE);
		disp_offset = 0;
		disp_length = strlen(disp_buf);
  800db4:	d0a0dd15 	stw	r2,-31884(gp)

		throw_code(&"HEXTEXT", 0);
  800db8:	080076c0 	call	80076c <throw_code>
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){
  800dbc:	01402034 	movhi	r5,128
  800dc0:	29552204 	addi	r5,r5,21640
  800dc4:	8809883a 	mov	r4,r17
  800dc8:	08038e00 	call	8038e0 <strcmp>
  800dcc:	10000d1e 	bne	r2,zero,800e04 <parse_request+0x374>

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800dd0:	d9000217 	ldw	r4,8(sp)
  800dd4:	01800404 	movi	r6,16
  800dd8:	000b883a 	mov	r5,zero
  800ddc:	0803d4c0 	call	803d4c <strtol>
		IOWR(LED_BASE, 0, led_val);
  800de0:	00c04034 	movhi	r3,256
	}

	if (strcmp(tokens[1], &"LEDWRITE") == 0){

		//alt_printf("Tried to write LEDWRITE");
		led_val = (int) strtol(tokens[2], 0, 16);
  800de4:	d0a0dc15 	stw	r2,-31888(gp)
		IOWR(LED_BASE, 0, led_val);
  800de8:	18c49404 	addi	r3,r3,4688
  800dec:	18800035 	stwio	r2,0(r3)
		throw_code(&"LEDWRITE", 0);
  800df0:	01002034 	movhi	r4,128
  800df4:	000b883a 	mov	r5,zero
  800df8:	21152204 	addi	r4,r4,21640
  800dfc:	080076c0 	call	80076c <throw_code>
		matched = 1;
  800e00:	04000044 	movi	r16,1

	}
	if (strcmp(tokens[1], &"ACCQUAL") == 0){
  800e04:	01402034 	movhi	r5,128
  800e08:	29552504 	addi	r5,r5,21652
  800e0c:	8809883a 	mov	r4,r17
  800e10:	08038e00 	call	8038e0 <strcmp>
  800e14:	1000131e 	bne	r2,zero,800e64 <parse_request+0x3d4>

			//alt_printf("Tried to write LEDWRITE");
			quality = (int) strtol(tokens[2], 0, 10);
  800e18:	d9000217 	ldw	r4,8(sp)
  800e1c:	01800284 	movi	r6,10
  800e20:	000b883a 	mov	r5,zero
  800e24:	0803d4c0 	call	803d4c <strtol>
  800e28:	d0a00015 	stw	r2,-32768(gp)

			if (quality<0) {
  800e2c:	1000020e 	bge	r2,zero,800e38 <parse_request+0x3a8>
				quality = 0;
  800e30:	d0200015 	stw	zero,-32768(gp)
  800e34:	00000306 	br	800e44 <parse_request+0x3b4>
				throw_code(&"ACCQUAL", 1);
			}
			else if (quality > RING_SIZE){
  800e38:	00c00ec4 	movi	r3,59
  800e3c:	1880030e 	bge	r3,r2,800e4c <parse_request+0x3bc>
				quality = RING_SIZE;
  800e40:	d0e00015 	stw	r3,-32768(gp)
				throw_code(&"ACCQUAL", 1);
  800e44:	01400044 	movi	r5,1
  800e48:	00000106 	br	800e50 <parse_request+0x3c0>
			}
			else {
				throw_code(&"ACCQUAL", 0);
  800e4c:	000b883a 	mov	r5,zero
  800e50:	01002034 	movhi	r4,128
  800e54:	21152504 	addi	r4,r4,21652
  800e58:	080076c0 	call	80076c <throw_code>
			}

			coeffs_to_fixed();

			matched = 1;
  800e5c:	04000044 	movi	r16,1
			}
			else {
				throw_code(&"ACCQUAL", 0);
			}

			coeffs_to_fixed();
  800e60:	08009200 	call	800920 <coeffs_to_fixed>

			matched = 1;

		}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){
  800e64:	dc400117 	ldw	r17,4(sp)
  800e68:	01402034 	movhi	r5,128
  800e6c:	29552704 	addi	r5,r5,21660
  800e70:	8809883a 	mov	r4,r17
  800e74:	08038e00 	call	8038e0 <strcmp>
  800e78:	10000e1e 	bne	r2,zero,800eb4 <parse_request+0x424>

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
  800e7c:	d120e817 	ldw	r4,-31840(gp)
  800e80:	01801904 	movi	r6,100
  800e84:	000b883a 	mov	r5,zero
  800e88:	08034d00 	call	8034d0 <memset>
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  800e8c:	d9400217 	ldw	r5,8(sp)
  800e90:	d120e817 	ldw	r4,-31840(gp)
  800e94:	01801904 	movi	r6,100
		led_offset = 0;
		throw_code(&"LEDFLASH", 0);
		matched = 1;
  800e98:	04000044 	movi	r16,1
		}
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
  800e9c:	08039600 	call	803960 <strncpy>
		led_offset = 0;
		throw_code(&"LEDFLASH", 0);
  800ea0:	01002034 	movhi	r4,128
  800ea4:	000b883a 	mov	r5,zero
  800ea8:	21152704 	addi	r4,r4,21660
	if (strcmp(tokens[1], &"LEDFLASH") == 0){

		//alt_printf("Tried to write LEDFLASH");
		memset(led_buf, 0,(LED_BUF_SIZE) * sizeof(char));
		strncpy(led_buf, tokens[2], LED_BUF_SIZE);
		led_offset = 0;
  800eac:	d0200115 	stw	zero,-32764(gp)
		throw_code(&"LEDFLASH", 0);
  800eb0:	080076c0 	call	80076c <throw_code>
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){
  800eb4:	01402034 	movhi	r5,128
  800eb8:	29552a04 	addi	r5,r5,21672
  800ebc:	8809883a 	mov	r4,r17
  800ec0:	08038e00 	call	8038e0 <strcmp>
  800ec4:	103fa11e 	bne	r2,zero,800d4c <__alt_data_end+0xff800d4c>

			debug = (int) strtol(tokens[2], 0, 16);
  800ec8:	d9000217 	ldw	r4,8(sp)
  800ecc:	000b883a 	mov	r5,zero
  800ed0:	01800404 	movi	r6,16
  800ed4:	0803d4c0 	call	803d4c <strtol>
			throw_code(&"DEBUG", 0);
  800ed8:	01002034 	movhi	r4,128
		matched = 1;

		}
	if (strcmp(tokens[1], &"DEBUG") == 0){

			debug = (int) strtol(tokens[2], 0, 16);
  800edc:	d0a0db15 	stw	r2,-31892(gp)
			throw_code(&"DEBUG", 0);
  800ee0:	000b883a 	mov	r5,zero
  800ee4:	21152a04 	addi	r4,r4,21672
  800ee8:	003f9c06 	br	800d5c <__alt_data_end+0xff800d5c>
	if (!matched){
		throw_code(&"ERR", 2);
		matched = 1;
	}

}
  800eec:	dfc01117 	ldw	ra,68(sp)
  800ef0:	dd401017 	ldw	r21,64(sp)
  800ef4:	dd000f17 	ldw	r20,60(sp)
  800ef8:	dcc00e17 	ldw	r19,56(sp)
  800efc:	dc800d17 	ldw	r18,52(sp)
  800f00:	dc400c17 	ldw	r17,48(sp)
  800f04:	dc000b17 	ldw	r16,44(sp)
  800f08:	dec01204 	addi	sp,sp,72
  800f0c:	f800283a 	ret

00800f10 <hw_x_read>:
	IOWR(HARDWARE_CLOCKS_BASE, 0, 2);
	IOWR(HARDWARE_CLOCKS_BASE, 0, 0);
}
alt_32 hw_x_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_X_BASE);
}
  800f10:	00804034 	movhi	r2,256
  800f14:	10846c04 	addi	r2,r2,4528
  800f18:	10800037 	ldwio	r2,0(r2)
  800f1c:	f800283a 	ret

00800f20 <hw_y_read>:

alt_32 hw_y_read(){
	return IORD_ALTERA_AVALON_PIO_DATA(HARDWARE_IN_Y_BASE);
}
  800f20:	00804034 	movhi	r2,256
  800f24:	10846404 	addi	r2,r2,4496
  800f28:	10800037 	ldwio	r2,0(r2)
  800f2c:	f800283a 	ret

00800f30 <main>:

//Main function
int main() {
  800f30:	defff404 	addi	sp,sp,-48
  800f34:	dfc00b15 	stw	ra,44(sp)
  800f38:	dc400a15 	stw	r17,40(sp)
  800f3c:	dc000915 	stw	r16,36(sp)


	//Initialize fixed point coefficients
	coeffs_to_fixed();
  800f40:	08009200 	call	800920 <coeffs_to_fixed>

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800f44:	01001904 	movi	r4,100
  800f48:	08034a80 	call	8034a8 <malloc>
	strcpy(disp_buf, "______");
  800f4c:	01402034 	movhi	r5,128
  800f50:	29553004 	addi	r5,r5,21696
  800f54:	1009883a 	mov	r4,r2

	//Initialize fixed point coefficients
	coeffs_to_fixed();

	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
  800f58:	d0a0e215 	stw	r2,-31864(gp)
	strcpy(disp_buf, "______");
  800f5c:	08039180 	call	803918 <strcpy>
	clr_disp();
  800f60:	08004640 	call	800464 <clr_disp>
	disp_timer_init(disp_timer_isr);
  800f64:	01002034 	movhi	r4,128
  800f68:	21010b04 	addi	r4,r4,1068
  800f6c:	08005b80 	call	8005b8 <disp_timer_init>
	disp_length = 6;
  800f70:	00800184 	movi	r2,6

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800f74:	01001904 	movi	r4,100
	//Clear display from flash message and add
	disp_buf = malloc(DISP_BUF_SIZE * sizeof(char));
	strcpy(disp_buf, "______");
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;
  800f78:	d0a0dd15 	stw	r2,-31884(gp)

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800f7c:	08034a80 	call	8034a8 <malloc>
	led_timer_init(led_timer_isr);
  800f80:	01002034 	movhi	r4,128
  800f84:	21006f04 	addi	r4,r4,444
	clr_disp();
	disp_timer_init(disp_timer_isr);
	disp_length = 6;

	//Ledflash initialization
	led_buf = malloc(LED_BUF_SIZE * sizeof(char));
  800f88:	d0a0e815 	stw	r2,-31840(gp)
	led_timer_init(led_timer_isr);
  800f8c:	08006280 	call	800628 <led_timer_init>
	led_offset = -1;
  800f90:	00bfffc4 	movi	r2,-1
  800f94:	d0a00115 	stw	r2,-32764(gp)
	IOWR(LED_BASE, 0, 0);
  800f98:	00804034 	movhi	r2,256
  800f9c:	10849404 	addi	r2,r2,4688
  800fa0:	10000035 	stwio	zero,0(r2)


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800fa4:	01001004 	movi	r4,64
  800fa8:	08034a80 	call	8034a8 <malloc>

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800fac:	01000204 	movi	r4,8
	led_offset = -1;
	IOWR(LED_BASE, 0, 0);


	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));
  800fb0:	d0a0e015 	stw	r2,-31872(gp)

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800fb4:	04002034 	movhi	r16,128
  800fb8:	08034a80 	call	8034a8 <malloc>
  800fbc:	8417db04 	addi	r16,r16,24428
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800fc0:	01000204 	movi	r4,8

	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
  800fc4:	80800015 	stw	r2,0(r16)
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800fc8:	08034a80 	call	8034a8 <malloc>
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  800fcc:	01000204 	movi	r4,8
	//UART buffer instantiation
	cmdbuffer = malloc( BUFFER_SIZE * sizeof(char));

	//Initialize hex output buffers
	hexbuffers[0] = malloc( HEX_BUF_SIZE * sizeof(char));
	hexbuffers[1] = malloc( HEX_BUF_SIZE * sizeof(char));
  800fd0:	80800115 	stw	r2,4(r16)
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));
  800fd4:	08034a80 	call	8034a8 <malloc>
  800fd8:	80800215 	stw	r2,8(r16)

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800fdc:	00800ec4 	movi	r2,59
  800fe0:	d8800615 	stw	r2,24(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800fe4:	d8800315 	stw	r2,12(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800fe8:	d8800015 	stw	r2,0(sp)
	x_buf = &x;
  800fec:	d8800604 	addi	r2,sp,24
  800ff0:	d0a0e115 	stw	r2,-31868(gp)
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  800ff4:	01003b04 	movi	r4,236

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
  800ff8:	d8800304 	addi	r2,sp,12
	hexbuffers[2] = malloc( HEX_BUF_SIZE * sizeof(char));

	//Initialize accelerometer buffers
	struct ring_buffer x,y,z;

	x = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  800ffc:	d8000715 	stw	zero,28(sp)
	y = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  801000:	d8000415 	stw	zero,16(sp)
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
  801004:	d8000115 	stw	zero,4(sp)
	x_buf = &x;
	y_buf = &y;
  801008:	d0a0e315 	stw	r2,-31860(gp)
	z_buf = &z;
  80100c:	d6e0e415 	stw	sp,-31856(gp)

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  801010:	08034a80 	call	8034a8 <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  801014:	01003b04 	movi	r4,236
	z = (struct ring_buffer){.size = RING_SIZE, .next_free = 0, .values = 0};
	x_buf = &x;
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  801018:	1021883a 	mov	r16,r2
  80101c:	d8800815 	stw	r2,32(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  801020:	08034a80 	call	8034a8 <malloc>
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  801024:	01803b04 	movi	r6,236
  801028:	000b883a 	mov	r5,zero
  80102c:	1009883a 	mov	r4,r2
	y_buf = &y;
	z_buf = &z;

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  801030:	d8800515 	stw	r2,20(sp)
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  801034:	08034d00 	call	8034d0 <memset>
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  801038:	01003b04 	movi	r4,236
  80103c:	08034a80 	call	8034a8 <malloc>
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  801040:	01803b04 	movi	r6,236
  801044:	000b883a 	mov	r5,zero
  801048:	8009883a 	mov	r4,r16

	x_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	y_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
  80104c:	d8800215 	stw	r2,8(sp)
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
  801050:	08034d00 	call	8034d0 <memset>

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  801054:	01001904 	movi	r4,100
  801058:	08034a80 	call	8034a8 <malloc>
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  80105c:	01801904 	movi	r6,100
  801060:	000b883a 	mov	r5,zero
  801064:	1009883a 	mov	r4,r2
	memset(y_buf->values, 0,(RING_SIZE) * sizeof(RING_T));
	z_buf->values = malloc((RING_SIZE) * sizeof(RING_T));
	memset(x_buf->values, 0,(RING_SIZE) * sizeof(RING_T));

	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
  801068:	d0a0e215 	stw	r2,-31864(gp)
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));
  80106c:	08034d00 	call	8034d0 <memset>

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  801070:	01002034 	movhi	r4,128
  801074:	21153204 	addi	r4,r4,21704
  801078:	08050a00 	call	8050a0 <alt_up_accelerometer_spi_open_dev>

	//to_hex(16,3,hexbuffers[0]);


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  80107c:	01002034 	movhi	r4,128
  801080:	2101f804 	addi	r4,r4,2016
	//Display buffer
	disp_buf  = malloc((DISP_BUF_SIZE) * sizeof(char));
	memset(disp_buf, 0,(DISP_BUF_SIZE) * sizeof(char));

	//Accelerometer initialization
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
  801084:	d0a0e715 	stw	r2,-31844(gp)

	//to_hex(16,3,hexbuffers[0]);


	//1kHz timer routine initialization
	acc_timer_init(acc_timer_isr);
  801088:	08005480 	call	800548 <acc_timer_init>
	alt_timestamp_start();
  80108c:	08050080 	call	805008 <alt_timestamp_start>

	//Command response loop
	while(1){
		read_request(cmdbuffer);
  801090:	d120e017 	ldw	r4,-31872(gp)
  801094:	08004b40 	call	8004b4 <read_request>
		parse_request(cmdbuffer);
  801098:	d120e017 	ldw	r4,-31872(gp)
  80109c:	0800a900 	call	800a90 <parse_request>

		//Request response timing: first char received to last char sent
		if (debug){
  8010a0:	d0a0db17 	ldw	r2,-31892(gp)
  8010a4:	103ffa26 	beq	r2,zero,801090 <__alt_data_end+0xff801090>
			printf("Response time (us) : %i \n",(alt_timestamp()-latency)/(alt_timestamp_freq()/1000000));
  8010a8:	080504c0 	call	80504c <alt_timestamp>
  8010ac:	d460e517 	ldw	r17,-31852(gp)
  8010b0:	d120e617 	ldw	r4,-31848(gp)
  8010b4:	1463c83a 	sub	r17,r2,r17
  8010b8:	1907c83a 	sub	r3,r3,r4
  8010bc:	1445803a 	cmpltu	r2,r2,r17
  8010c0:	18a1c83a 	sub	r16,r3,r2
  8010c4:	08050980 	call	805098 <alt_timestamp_freq>
  8010c8:	014003f4 	movhi	r5,15
  8010cc:	29509004 	addi	r5,r5,16960
  8010d0:	1009883a 	mov	r4,r2
  8010d4:	08017f80 	call	8017f8 <__udivsi3>
  8010d8:	8809883a 	mov	r4,r17
  8010dc:	800b883a 	mov	r5,r16
  8010e0:	100d883a 	mov	r6,r2
  8010e4:	000f883a 	mov	r7,zero
  8010e8:	08011040 	call	801104 <__udivdi3>
  8010ec:	01002034 	movhi	r4,128
  8010f0:	100b883a 	mov	r5,r2
  8010f4:	180d883a 	mov	r6,r3
  8010f8:	21153804 	addi	r4,r4,21728
  8010fc:	08037680 	call	803768 <printf>
  801100:	003fe306 	br	801090 <__alt_data_end+0xff801090>

00801104 <__udivdi3>:
  801104:	defff404 	addi	sp,sp,-48
  801108:	dcc00515 	stw	r19,20(sp)
  80110c:	dc000215 	stw	r16,8(sp)
  801110:	dfc00b15 	stw	ra,44(sp)
  801114:	df000a15 	stw	fp,40(sp)
  801118:	ddc00915 	stw	r23,36(sp)
  80111c:	dd800815 	stw	r22,32(sp)
  801120:	dd400715 	stw	r21,28(sp)
  801124:	dd000615 	stw	r20,24(sp)
  801128:	dc800415 	stw	r18,16(sp)
  80112c:	dc400315 	stw	r17,12(sp)
  801130:	2027883a 	mov	r19,r4
  801134:	2821883a 	mov	r16,r5
  801138:	3800461e 	bne	r7,zero,801254 <__udivdi3+0x150>
  80113c:	3023883a 	mov	r17,r6
  801140:	2025883a 	mov	r18,r4
  801144:	2980572e 	bgeu	r5,r6,8012a4 <__udivdi3+0x1a0>
  801148:	00bfffd4 	movui	r2,65535
  80114c:	282d883a 	mov	r22,r5
  801150:	1180b236 	bltu	r2,r6,80141c <__udivdi3+0x318>
  801154:	00803fc4 	movi	r2,255
  801158:	1185803a 	cmpltu	r2,r2,r6
  80115c:	100490fa 	slli	r2,r2,3
  801160:	3086d83a 	srl	r3,r6,r2
  801164:	01002034 	movhi	r4,128
  801168:	211549c4 	addi	r4,r4,21799
  80116c:	20c7883a 	add	r3,r4,r3
  801170:	18c00003 	ldbu	r3,0(r3)
  801174:	1885883a 	add	r2,r3,r2
  801178:	00c00804 	movi	r3,32
  80117c:	1887c83a 	sub	r3,r3,r2
  801180:	18000526 	beq	r3,zero,801198 <__udivdi3+0x94>
  801184:	80e0983a 	sll	r16,r16,r3
  801188:	9884d83a 	srl	r2,r19,r2
  80118c:	30e2983a 	sll	r17,r6,r3
  801190:	98e4983a 	sll	r18,r19,r3
  801194:	142cb03a 	or	r22,r2,r16
  801198:	882ad43a 	srli	r21,r17,16
  80119c:	b009883a 	mov	r4,r22
  8011a0:	8d3fffcc 	andi	r20,r17,65535
  8011a4:	a80b883a 	mov	r5,r21
  8011a8:	080185c0 	call	80185c <__umodsi3>
  8011ac:	b009883a 	mov	r4,r22
  8011b0:	a80b883a 	mov	r5,r21
  8011b4:	1027883a 	mov	r19,r2
  8011b8:	08017f80 	call	8017f8 <__udivsi3>
  8011bc:	100b883a 	mov	r5,r2
  8011c0:	a009883a 	mov	r4,r20
  8011c4:	102d883a 	mov	r22,r2
  8011c8:	08018b40 	call	8018b4 <__mulsi3>
  8011cc:	9826943a 	slli	r19,r19,16
  8011d0:	9006d43a 	srli	r3,r18,16
  8011d4:	1cc6b03a 	or	r3,r3,r19
  8011d8:	1880052e 	bgeu	r3,r2,8011f0 <__udivdi3+0xec>
  8011dc:	1c47883a 	add	r3,r3,r17
  8011e0:	b13fffc4 	addi	r4,r22,-1
  8011e4:	1c400136 	bltu	r3,r17,8011ec <__udivdi3+0xe8>
  8011e8:	18814236 	bltu	r3,r2,8016f4 <__udivdi3+0x5f0>
  8011ec:	202d883a 	mov	r22,r4
  8011f0:	18a1c83a 	sub	r16,r3,r2
  8011f4:	8009883a 	mov	r4,r16
  8011f8:	a80b883a 	mov	r5,r21
  8011fc:	080185c0 	call	80185c <__umodsi3>
  801200:	1027883a 	mov	r19,r2
  801204:	8009883a 	mov	r4,r16
  801208:	a80b883a 	mov	r5,r21
  80120c:	9826943a 	slli	r19,r19,16
  801210:	08017f80 	call	8017f8 <__udivsi3>
  801214:	100b883a 	mov	r5,r2
  801218:	a009883a 	mov	r4,r20
  80121c:	94bfffcc 	andi	r18,r18,65535
  801220:	1021883a 	mov	r16,r2
  801224:	94e4b03a 	or	r18,r18,r19
  801228:	08018b40 	call	8018b4 <__mulsi3>
  80122c:	9080052e 	bgeu	r18,r2,801244 <__udivdi3+0x140>
  801230:	8ca5883a 	add	r18,r17,r18
  801234:	80ffffc4 	addi	r3,r16,-1
  801238:	94410c36 	bltu	r18,r17,80166c <__udivdi3+0x568>
  80123c:	90810b2e 	bgeu	r18,r2,80166c <__udivdi3+0x568>
  801240:	843fff84 	addi	r16,r16,-2
  801244:	b004943a 	slli	r2,r22,16
  801248:	0007883a 	mov	r3,zero
  80124c:	1404b03a 	or	r2,r2,r16
  801250:	00005e06 	br	8013cc <__udivdi3+0x2c8>
  801254:	29c05b36 	bltu	r5,r7,8013c4 <__udivdi3+0x2c0>
  801258:	00bfffd4 	movui	r2,65535
  80125c:	11c0672e 	bgeu	r2,r7,8013fc <__udivdi3+0x2f8>
  801260:	00804034 	movhi	r2,256
  801264:	10bfffc4 	addi	r2,r2,-1
  801268:	11c10a36 	bltu	r2,r7,801694 <__udivdi3+0x590>
  80126c:	00800404 	movi	r2,16
  801270:	3886d83a 	srl	r3,r7,r2
  801274:	01002034 	movhi	r4,128
  801278:	211549c4 	addi	r4,r4,21799
  80127c:	20c7883a 	add	r3,r4,r3
  801280:	18c00003 	ldbu	r3,0(r3)
  801284:	05c00804 	movi	r23,32
  801288:	1885883a 	add	r2,r3,r2
  80128c:	b8afc83a 	sub	r23,r23,r2
  801290:	b800671e 	bne	r23,zero,801430 <__udivdi3+0x32c>
  801294:	3c010536 	bltu	r7,r16,8016ac <__udivdi3+0x5a8>
  801298:	9985403a 	cmpgeu	r2,r19,r6
  80129c:	0007883a 	mov	r3,zero
  8012a0:	00004a06 	br	8013cc <__udivdi3+0x2c8>
  8012a4:	3000041e 	bne	r6,zero,8012b8 <__udivdi3+0x1b4>
  8012a8:	000b883a 	mov	r5,zero
  8012ac:	01000044 	movi	r4,1
  8012b0:	08017f80 	call	8017f8 <__udivsi3>
  8012b4:	1023883a 	mov	r17,r2
  8012b8:	00bfffd4 	movui	r2,65535
  8012bc:	1440532e 	bgeu	r2,r17,80140c <__udivdi3+0x308>
  8012c0:	00804034 	movhi	r2,256
  8012c4:	10bfffc4 	addi	r2,r2,-1
  8012c8:	1440f436 	bltu	r2,r17,80169c <__udivdi3+0x598>
  8012cc:	00800404 	movi	r2,16
  8012d0:	8886d83a 	srl	r3,r17,r2
  8012d4:	01002034 	movhi	r4,128
  8012d8:	211549c4 	addi	r4,r4,21799
  8012dc:	20c7883a 	add	r3,r4,r3
  8012e0:	18c00003 	ldbu	r3,0(r3)
  8012e4:	1885883a 	add	r2,r3,r2
  8012e8:	00c00804 	movi	r3,32
  8012ec:	1887c83a 	sub	r3,r3,r2
  8012f0:	1800a51e 	bne	r3,zero,801588 <__udivdi3+0x484>
  8012f4:	882ad43a 	srli	r21,r17,16
  8012f8:	8461c83a 	sub	r16,r16,r17
  8012fc:	8d3fffcc 	andi	r20,r17,65535
  801300:	00c00044 	movi	r3,1
  801304:	a80b883a 	mov	r5,r21
  801308:	8009883a 	mov	r4,r16
  80130c:	d8c00115 	stw	r3,4(sp)
  801310:	080185c0 	call	80185c <__umodsi3>
  801314:	a80b883a 	mov	r5,r21
  801318:	8009883a 	mov	r4,r16
  80131c:	1027883a 	mov	r19,r2
  801320:	08017f80 	call	8017f8 <__udivsi3>
  801324:	a00b883a 	mov	r5,r20
  801328:	1009883a 	mov	r4,r2
  80132c:	102d883a 	mov	r22,r2
  801330:	08018b40 	call	8018b4 <__mulsi3>
  801334:	9826943a 	slli	r19,r19,16
  801338:	900ed43a 	srli	r7,r18,16
  80133c:	d8c00117 	ldw	r3,4(sp)
  801340:	3cceb03a 	or	r7,r7,r19
  801344:	3880052e 	bgeu	r7,r2,80135c <__udivdi3+0x258>
  801348:	3c4f883a 	add	r7,r7,r17
  80134c:	b13fffc4 	addi	r4,r22,-1
  801350:	3c400136 	bltu	r7,r17,801358 <__udivdi3+0x254>
  801354:	3880e436 	bltu	r7,r2,8016e8 <__udivdi3+0x5e4>
  801358:	202d883a 	mov	r22,r4
  80135c:	38a1c83a 	sub	r16,r7,r2
  801360:	8009883a 	mov	r4,r16
  801364:	a80b883a 	mov	r5,r21
  801368:	d8c00115 	stw	r3,4(sp)
  80136c:	080185c0 	call	80185c <__umodsi3>
  801370:	1027883a 	mov	r19,r2
  801374:	8009883a 	mov	r4,r16
  801378:	a80b883a 	mov	r5,r21
  80137c:	9826943a 	slli	r19,r19,16
  801380:	08017f80 	call	8017f8 <__udivsi3>
  801384:	a00b883a 	mov	r5,r20
  801388:	1009883a 	mov	r4,r2
  80138c:	94bfffcc 	andi	r18,r18,65535
  801390:	1021883a 	mov	r16,r2
  801394:	94e4b03a 	or	r18,r18,r19
  801398:	08018b40 	call	8018b4 <__mulsi3>
  80139c:	d8c00117 	ldw	r3,4(sp)
  8013a0:	9080052e 	bgeu	r18,r2,8013b8 <__udivdi3+0x2b4>
  8013a4:	8ca5883a 	add	r18,r17,r18
  8013a8:	813fffc4 	addi	r4,r16,-1
  8013ac:	9440ad36 	bltu	r18,r17,801664 <__udivdi3+0x560>
  8013b0:	9080ac2e 	bgeu	r18,r2,801664 <__udivdi3+0x560>
  8013b4:	843fff84 	addi	r16,r16,-2
  8013b8:	b004943a 	slli	r2,r22,16
  8013bc:	1404b03a 	or	r2,r2,r16
  8013c0:	00000206 	br	8013cc <__udivdi3+0x2c8>
  8013c4:	0007883a 	mov	r3,zero
  8013c8:	0005883a 	mov	r2,zero
  8013cc:	dfc00b17 	ldw	ra,44(sp)
  8013d0:	df000a17 	ldw	fp,40(sp)
  8013d4:	ddc00917 	ldw	r23,36(sp)
  8013d8:	dd800817 	ldw	r22,32(sp)
  8013dc:	dd400717 	ldw	r21,28(sp)
  8013e0:	dd000617 	ldw	r20,24(sp)
  8013e4:	dcc00517 	ldw	r19,20(sp)
  8013e8:	dc800417 	ldw	r18,16(sp)
  8013ec:	dc400317 	ldw	r17,12(sp)
  8013f0:	dc000217 	ldw	r16,8(sp)
  8013f4:	dec00c04 	addi	sp,sp,48
  8013f8:	f800283a 	ret
  8013fc:	00803fc4 	movi	r2,255
  801400:	11c5803a 	cmpltu	r2,r2,r7
  801404:	100490fa 	slli	r2,r2,3
  801408:	003f9906 	br	801270 <__alt_data_end+0xff801270>
  80140c:	00803fc4 	movi	r2,255
  801410:	1445803a 	cmpltu	r2,r2,r17
  801414:	100490fa 	slli	r2,r2,3
  801418:	003fad06 	br	8012d0 <__alt_data_end+0xff8012d0>
  80141c:	00804034 	movhi	r2,256
  801420:	10bfffc4 	addi	r2,r2,-1
  801424:	11809f36 	bltu	r2,r6,8016a4 <__udivdi3+0x5a0>
  801428:	00800404 	movi	r2,16
  80142c:	003f4c06 	br	801160 <__alt_data_end+0xff801160>
  801430:	3dce983a 	sll	r7,r7,r23
  801434:	30b8d83a 	srl	fp,r6,r2
  801438:	80a2d83a 	srl	r17,r16,r2
  80143c:	35cc983a 	sll	r6,r6,r23
  801440:	3f38b03a 	or	fp,r7,fp
  801444:	e024d43a 	srli	r18,fp,16
  801448:	9884d83a 	srl	r2,r19,r2
  80144c:	85e0983a 	sll	r16,r16,r23
  801450:	8809883a 	mov	r4,r17
  801454:	900b883a 	mov	r5,r18
  801458:	d9800015 	stw	r6,0(sp)
  80145c:	1420b03a 	or	r16,r2,r16
  801460:	080185c0 	call	80185c <__umodsi3>
  801464:	900b883a 	mov	r5,r18
  801468:	8809883a 	mov	r4,r17
  80146c:	1029883a 	mov	r20,r2
  801470:	e5bfffcc 	andi	r22,fp,65535
  801474:	08017f80 	call	8017f8 <__udivsi3>
  801478:	100b883a 	mov	r5,r2
  80147c:	b009883a 	mov	r4,r22
  801480:	102b883a 	mov	r21,r2
  801484:	08018b40 	call	8018b4 <__mulsi3>
  801488:	a028943a 	slli	r20,r20,16
  80148c:	8006d43a 	srli	r3,r16,16
  801490:	1d06b03a 	or	r3,r3,r20
  801494:	1880042e 	bgeu	r3,r2,8014a8 <__udivdi3+0x3a4>
  801498:	1f07883a 	add	r3,r3,fp
  80149c:	a93fffc4 	addi	r4,r21,-1
  8014a0:	1f00892e 	bgeu	r3,fp,8016c8 <__udivdi3+0x5c4>
  8014a4:	202b883a 	mov	r21,r4
  8014a8:	18a3c83a 	sub	r17,r3,r2
  8014ac:	8809883a 	mov	r4,r17
  8014b0:	900b883a 	mov	r5,r18
  8014b4:	080185c0 	call	80185c <__umodsi3>
  8014b8:	1029883a 	mov	r20,r2
  8014bc:	8809883a 	mov	r4,r17
  8014c0:	900b883a 	mov	r5,r18
  8014c4:	a028943a 	slli	r20,r20,16
  8014c8:	08017f80 	call	8017f8 <__udivsi3>
  8014cc:	100b883a 	mov	r5,r2
  8014d0:	b009883a 	mov	r4,r22
  8014d4:	843fffcc 	andi	r16,r16,65535
  8014d8:	1023883a 	mov	r17,r2
  8014dc:	8520b03a 	or	r16,r16,r20
  8014e0:	08018b40 	call	8018b4 <__mulsi3>
  8014e4:	8080042e 	bgeu	r16,r2,8014f8 <__udivdi3+0x3f4>
  8014e8:	8721883a 	add	r16,r16,fp
  8014ec:	88ffffc4 	addi	r3,r17,-1
  8014f0:	8700712e 	bgeu	r16,fp,8016b8 <__udivdi3+0x5b4>
  8014f4:	1823883a 	mov	r17,r3
  8014f8:	a80e943a 	slli	r7,r21,16
  8014fc:	d8c00017 	ldw	r3,0(sp)
  801500:	80a1c83a 	sub	r16,r16,r2
  801504:	3c64b03a 	or	r18,r7,r17
  801508:	1d3fffcc 	andi	r20,r3,65535
  80150c:	9022d43a 	srli	r17,r18,16
  801510:	95bfffcc 	andi	r22,r18,65535
  801514:	a00b883a 	mov	r5,r20
  801518:	b009883a 	mov	r4,r22
  80151c:	182ad43a 	srli	r21,r3,16
  801520:	08018b40 	call	8018b4 <__mulsi3>
  801524:	a00b883a 	mov	r5,r20
  801528:	8809883a 	mov	r4,r17
  80152c:	1039883a 	mov	fp,r2
  801530:	08018b40 	call	8018b4 <__mulsi3>
  801534:	8809883a 	mov	r4,r17
  801538:	a80b883a 	mov	r5,r21
  80153c:	1029883a 	mov	r20,r2
  801540:	08018b40 	call	8018b4 <__mulsi3>
  801544:	a80b883a 	mov	r5,r21
  801548:	b009883a 	mov	r4,r22
  80154c:	1023883a 	mov	r17,r2
  801550:	08018b40 	call	8018b4 <__mulsi3>
  801554:	e006d43a 	srli	r3,fp,16
  801558:	1505883a 	add	r2,r2,r20
  80155c:	1887883a 	add	r3,r3,r2
  801560:	1d00022e 	bgeu	r3,r20,80156c <__udivdi3+0x468>
  801564:	00800074 	movhi	r2,1
  801568:	88a3883a 	add	r17,r17,r2
  80156c:	1804d43a 	srli	r2,r3,16
  801570:	1463883a 	add	r17,r2,r17
  801574:	84404436 	bltu	r16,r17,801688 <__udivdi3+0x584>
  801578:	84403e26 	beq	r16,r17,801674 <__udivdi3+0x570>
  80157c:	9005883a 	mov	r2,r18
  801580:	0007883a 	mov	r3,zero
  801584:	003f9106 	br	8013cc <__alt_data_end+0xff8013cc>
  801588:	88e2983a 	sll	r17,r17,r3
  80158c:	80aed83a 	srl	r23,r16,r2
  801590:	80e0983a 	sll	r16,r16,r3
  801594:	882ad43a 	srli	r21,r17,16
  801598:	9884d83a 	srl	r2,r19,r2
  80159c:	b809883a 	mov	r4,r23
  8015a0:	a80b883a 	mov	r5,r21
  8015a4:	98e4983a 	sll	r18,r19,r3
  8015a8:	142cb03a 	or	r22,r2,r16
  8015ac:	080185c0 	call	80185c <__umodsi3>
  8015b0:	b809883a 	mov	r4,r23
  8015b4:	a80b883a 	mov	r5,r21
  8015b8:	1027883a 	mov	r19,r2
  8015bc:	8d3fffcc 	andi	r20,r17,65535
  8015c0:	08017f80 	call	8017f8 <__udivsi3>
  8015c4:	a009883a 	mov	r4,r20
  8015c8:	100b883a 	mov	r5,r2
  8015cc:	102f883a 	mov	r23,r2
  8015d0:	08018b40 	call	8018b4 <__mulsi3>
  8015d4:	9826943a 	slli	r19,r19,16
  8015d8:	b008d43a 	srli	r4,r22,16
  8015dc:	24c8b03a 	or	r4,r4,r19
  8015e0:	2080062e 	bgeu	r4,r2,8015fc <__udivdi3+0x4f8>
  8015e4:	2449883a 	add	r4,r4,r17
  8015e8:	b8ffffc4 	addi	r3,r23,-1
  8015ec:	24403c36 	bltu	r4,r17,8016e0 <__udivdi3+0x5dc>
  8015f0:	20803b2e 	bgeu	r4,r2,8016e0 <__udivdi3+0x5dc>
  8015f4:	bdffff84 	addi	r23,r23,-2
  8015f8:	2449883a 	add	r4,r4,r17
  8015fc:	20a1c83a 	sub	r16,r4,r2
  801600:	a80b883a 	mov	r5,r21
  801604:	8009883a 	mov	r4,r16
  801608:	080185c0 	call	80185c <__umodsi3>
  80160c:	a80b883a 	mov	r5,r21
  801610:	8009883a 	mov	r4,r16
  801614:	1027883a 	mov	r19,r2
  801618:	08017f80 	call	8017f8 <__udivsi3>
  80161c:	a009883a 	mov	r4,r20
  801620:	100b883a 	mov	r5,r2
  801624:	9826943a 	slli	r19,r19,16
  801628:	1039883a 	mov	fp,r2
  80162c:	08018b40 	call	8018b4 <__mulsi3>
  801630:	b13fffcc 	andi	r4,r22,65535
  801634:	24c8b03a 	or	r4,r4,r19
  801638:	2080062e 	bgeu	r4,r2,801654 <__udivdi3+0x550>
  80163c:	2449883a 	add	r4,r4,r17
  801640:	e0ffffc4 	addi	r3,fp,-1
  801644:	24402436 	bltu	r4,r17,8016d8 <__udivdi3+0x5d4>
  801648:	2080232e 	bgeu	r4,r2,8016d8 <__udivdi3+0x5d4>
  80164c:	e73fff84 	addi	fp,fp,-2
  801650:	2449883a 	add	r4,r4,r17
  801654:	b82e943a 	slli	r23,r23,16
  801658:	20a1c83a 	sub	r16,r4,r2
  80165c:	bf06b03a 	or	r3,r23,fp
  801660:	003f2806 	br	801304 <__alt_data_end+0xff801304>
  801664:	2021883a 	mov	r16,r4
  801668:	003f5306 	br	8013b8 <__alt_data_end+0xff8013b8>
  80166c:	1821883a 	mov	r16,r3
  801670:	003ef406 	br	801244 <__alt_data_end+0xff801244>
  801674:	1806943a 	slli	r3,r3,16
  801678:	9de6983a 	sll	r19,r19,r23
  80167c:	e73fffcc 	andi	fp,fp,65535
  801680:	1f07883a 	add	r3,r3,fp
  801684:	98ffbd2e 	bgeu	r19,r3,80157c <__alt_data_end+0xff80157c>
  801688:	90bfffc4 	addi	r2,r18,-1
  80168c:	0007883a 	mov	r3,zero
  801690:	003f4e06 	br	8013cc <__alt_data_end+0xff8013cc>
  801694:	00800604 	movi	r2,24
  801698:	003ef506 	br	801270 <__alt_data_end+0xff801270>
  80169c:	00800604 	movi	r2,24
  8016a0:	003f0b06 	br	8012d0 <__alt_data_end+0xff8012d0>
  8016a4:	00800604 	movi	r2,24
  8016a8:	003ead06 	br	801160 <__alt_data_end+0xff801160>
  8016ac:	0007883a 	mov	r3,zero
  8016b0:	00800044 	movi	r2,1
  8016b4:	003f4506 	br	8013cc <__alt_data_end+0xff8013cc>
  8016b8:	80bf8e2e 	bgeu	r16,r2,8014f4 <__alt_data_end+0xff8014f4>
  8016bc:	8c7fff84 	addi	r17,r17,-2
  8016c0:	8721883a 	add	r16,r16,fp
  8016c4:	003f8c06 	br	8014f8 <__alt_data_end+0xff8014f8>
  8016c8:	18bf762e 	bgeu	r3,r2,8014a4 <__alt_data_end+0xff8014a4>
  8016cc:	ad7fff84 	addi	r21,r21,-2
  8016d0:	1f07883a 	add	r3,r3,fp
  8016d4:	003f7406 	br	8014a8 <__alt_data_end+0xff8014a8>
  8016d8:	1839883a 	mov	fp,r3
  8016dc:	003fdd06 	br	801654 <__alt_data_end+0xff801654>
  8016e0:	182f883a 	mov	r23,r3
  8016e4:	003fc506 	br	8015fc <__alt_data_end+0xff8015fc>
  8016e8:	b5bfff84 	addi	r22,r22,-2
  8016ec:	3c4f883a 	add	r7,r7,r17
  8016f0:	003f1a06 	br	80135c <__alt_data_end+0xff80135c>
  8016f4:	b5bfff84 	addi	r22,r22,-2
  8016f8:	1c47883a 	add	r3,r3,r17
  8016fc:	003ebc06 	br	8011f0 <__alt_data_end+0xff8011f0>

00801700 <__divsi3>:
  801700:	20001b16 	blt	r4,zero,801770 <__divsi3+0x70>
  801704:	000f883a 	mov	r7,zero
  801708:	28001616 	blt	r5,zero,801764 <__divsi3+0x64>
  80170c:	200d883a 	mov	r6,r4
  801710:	29001a2e 	bgeu	r5,r4,80177c <__divsi3+0x7c>
  801714:	00800804 	movi	r2,32
  801718:	00c00044 	movi	r3,1
  80171c:	00000106 	br	801724 <__divsi3+0x24>
  801720:	10000d26 	beq	r2,zero,801758 <__divsi3+0x58>
  801724:	294b883a 	add	r5,r5,r5
  801728:	10bfffc4 	addi	r2,r2,-1
  80172c:	18c7883a 	add	r3,r3,r3
  801730:	293ffb36 	bltu	r5,r4,801720 <__alt_data_end+0xff801720>
  801734:	0005883a 	mov	r2,zero
  801738:	18000726 	beq	r3,zero,801758 <__divsi3+0x58>
  80173c:	0005883a 	mov	r2,zero
  801740:	31400236 	bltu	r6,r5,80174c <__divsi3+0x4c>
  801744:	314dc83a 	sub	r6,r6,r5
  801748:	10c4b03a 	or	r2,r2,r3
  80174c:	1806d07a 	srli	r3,r3,1
  801750:	280ad07a 	srli	r5,r5,1
  801754:	183ffa1e 	bne	r3,zero,801740 <__alt_data_end+0xff801740>
  801758:	38000126 	beq	r7,zero,801760 <__divsi3+0x60>
  80175c:	0085c83a 	sub	r2,zero,r2
  801760:	f800283a 	ret
  801764:	014bc83a 	sub	r5,zero,r5
  801768:	39c0005c 	xori	r7,r7,1
  80176c:	003fe706 	br	80170c <__alt_data_end+0xff80170c>
  801770:	0109c83a 	sub	r4,zero,r4
  801774:	01c00044 	movi	r7,1
  801778:	003fe306 	br	801708 <__alt_data_end+0xff801708>
  80177c:	00c00044 	movi	r3,1
  801780:	003fee06 	br	80173c <__alt_data_end+0xff80173c>

00801784 <__modsi3>:
  801784:	20001716 	blt	r4,zero,8017e4 <__modsi3+0x60>
  801788:	000f883a 	mov	r7,zero
  80178c:	2005883a 	mov	r2,r4
  801790:	28001216 	blt	r5,zero,8017dc <__modsi3+0x58>
  801794:	2900162e 	bgeu	r5,r4,8017f0 <__modsi3+0x6c>
  801798:	01800804 	movi	r6,32
  80179c:	00c00044 	movi	r3,1
  8017a0:	00000106 	br	8017a8 <__modsi3+0x24>
  8017a4:	30000a26 	beq	r6,zero,8017d0 <__modsi3+0x4c>
  8017a8:	294b883a 	add	r5,r5,r5
  8017ac:	31bfffc4 	addi	r6,r6,-1
  8017b0:	18c7883a 	add	r3,r3,r3
  8017b4:	293ffb36 	bltu	r5,r4,8017a4 <__alt_data_end+0xff8017a4>
  8017b8:	18000526 	beq	r3,zero,8017d0 <__modsi3+0x4c>
  8017bc:	1806d07a 	srli	r3,r3,1
  8017c0:	11400136 	bltu	r2,r5,8017c8 <__modsi3+0x44>
  8017c4:	1145c83a 	sub	r2,r2,r5
  8017c8:	280ad07a 	srli	r5,r5,1
  8017cc:	183ffb1e 	bne	r3,zero,8017bc <__alt_data_end+0xff8017bc>
  8017d0:	38000126 	beq	r7,zero,8017d8 <__modsi3+0x54>
  8017d4:	0085c83a 	sub	r2,zero,r2
  8017d8:	f800283a 	ret
  8017dc:	014bc83a 	sub	r5,zero,r5
  8017e0:	003fec06 	br	801794 <__alt_data_end+0xff801794>
  8017e4:	0109c83a 	sub	r4,zero,r4
  8017e8:	01c00044 	movi	r7,1
  8017ec:	003fe706 	br	80178c <__alt_data_end+0xff80178c>
  8017f0:	00c00044 	movi	r3,1
  8017f4:	003ff106 	br	8017bc <__alt_data_end+0xff8017bc>

008017f8 <__udivsi3>:
  8017f8:	200d883a 	mov	r6,r4
  8017fc:	2900152e 	bgeu	r5,r4,801854 <__udivsi3+0x5c>
  801800:	28001416 	blt	r5,zero,801854 <__udivsi3+0x5c>
  801804:	00800804 	movi	r2,32
  801808:	00c00044 	movi	r3,1
  80180c:	00000206 	br	801818 <__udivsi3+0x20>
  801810:	10000e26 	beq	r2,zero,80184c <__udivsi3+0x54>
  801814:	28000516 	blt	r5,zero,80182c <__udivsi3+0x34>
  801818:	294b883a 	add	r5,r5,r5
  80181c:	10bfffc4 	addi	r2,r2,-1
  801820:	18c7883a 	add	r3,r3,r3
  801824:	293ffa36 	bltu	r5,r4,801810 <__alt_data_end+0xff801810>
  801828:	18000826 	beq	r3,zero,80184c <__udivsi3+0x54>
  80182c:	0005883a 	mov	r2,zero
  801830:	31400236 	bltu	r6,r5,80183c <__udivsi3+0x44>
  801834:	314dc83a 	sub	r6,r6,r5
  801838:	10c4b03a 	or	r2,r2,r3
  80183c:	1806d07a 	srli	r3,r3,1
  801840:	280ad07a 	srli	r5,r5,1
  801844:	183ffa1e 	bne	r3,zero,801830 <__alt_data_end+0xff801830>
  801848:	f800283a 	ret
  80184c:	0005883a 	mov	r2,zero
  801850:	f800283a 	ret
  801854:	00c00044 	movi	r3,1
  801858:	003ff406 	br	80182c <__alt_data_end+0xff80182c>

0080185c <__umodsi3>:
  80185c:	2005883a 	mov	r2,r4
  801860:	2900122e 	bgeu	r5,r4,8018ac <__umodsi3+0x50>
  801864:	28001116 	blt	r5,zero,8018ac <__umodsi3+0x50>
  801868:	01800804 	movi	r6,32
  80186c:	00c00044 	movi	r3,1
  801870:	00000206 	br	80187c <__umodsi3+0x20>
  801874:	30000c26 	beq	r6,zero,8018a8 <__umodsi3+0x4c>
  801878:	28000516 	blt	r5,zero,801890 <__umodsi3+0x34>
  80187c:	294b883a 	add	r5,r5,r5
  801880:	31bfffc4 	addi	r6,r6,-1
  801884:	18c7883a 	add	r3,r3,r3
  801888:	293ffa36 	bltu	r5,r4,801874 <__alt_data_end+0xff801874>
  80188c:	18000626 	beq	r3,zero,8018a8 <__umodsi3+0x4c>
  801890:	1806d07a 	srli	r3,r3,1
  801894:	11400136 	bltu	r2,r5,80189c <__umodsi3+0x40>
  801898:	1145c83a 	sub	r2,r2,r5
  80189c:	280ad07a 	srli	r5,r5,1
  8018a0:	183ffb1e 	bne	r3,zero,801890 <__alt_data_end+0xff801890>
  8018a4:	f800283a 	ret
  8018a8:	f800283a 	ret
  8018ac:	00c00044 	movi	r3,1
  8018b0:	003ff706 	br	801890 <__alt_data_end+0xff801890>

008018b4 <__mulsi3>:
  8018b4:	0005883a 	mov	r2,zero
  8018b8:	20000726 	beq	r4,zero,8018d8 <__mulsi3+0x24>
  8018bc:	20c0004c 	andi	r3,r4,1
  8018c0:	2008d07a 	srli	r4,r4,1
  8018c4:	18000126 	beq	r3,zero,8018cc <__mulsi3+0x18>
  8018c8:	1145883a 	add	r2,r2,r5
  8018cc:	294b883a 	add	r5,r5,r5
  8018d0:	203ffa1e 	bne	r4,zero,8018bc <__alt_data_end+0xff8018bc>
  8018d4:	f800283a 	ret
  8018d8:	f800283a 	ret

008018dc <__adddf3>:
  8018dc:	02c00434 	movhi	r11,16
  8018e0:	5affffc4 	addi	r11,r11,-1
  8018e4:	2806d7fa 	srli	r3,r5,31
  8018e8:	2ad4703a 	and	r10,r5,r11
  8018ec:	3ad2703a 	and	r9,r7,r11
  8018f0:	3804d53a 	srli	r2,r7,20
  8018f4:	3018d77a 	srli	r12,r6,29
  8018f8:	280ad53a 	srli	r5,r5,20
  8018fc:	501490fa 	slli	r10,r10,3
  801900:	2010d77a 	srli	r8,r4,29
  801904:	481290fa 	slli	r9,r9,3
  801908:	380ed7fa 	srli	r7,r7,31
  80190c:	defffb04 	addi	sp,sp,-20
  801910:	dc800215 	stw	r18,8(sp)
  801914:	dc400115 	stw	r17,4(sp)
  801918:	dc000015 	stw	r16,0(sp)
  80191c:	dfc00415 	stw	ra,16(sp)
  801920:	dcc00315 	stw	r19,12(sp)
  801924:	1c803fcc 	andi	r18,r3,255
  801928:	2c01ffcc 	andi	r16,r5,2047
  80192c:	5210b03a 	or	r8,r10,r8
  801930:	202290fa 	slli	r17,r4,3
  801934:	1081ffcc 	andi	r2,r2,2047
  801938:	4b12b03a 	or	r9,r9,r12
  80193c:	300c90fa 	slli	r6,r6,3
  801940:	91c07526 	beq	r18,r7,801b18 <__adddf3+0x23c>
  801944:	8087c83a 	sub	r3,r16,r2
  801948:	00c0ab0e 	bge	zero,r3,801bf8 <__adddf3+0x31c>
  80194c:	10002a1e 	bne	r2,zero,8019f8 <__adddf3+0x11c>
  801950:	4984b03a 	or	r2,r9,r6
  801954:	1000961e 	bne	r2,zero,801bb0 <__adddf3+0x2d4>
  801958:	888001cc 	andi	r2,r17,7
  80195c:	10000726 	beq	r2,zero,80197c <__adddf3+0xa0>
  801960:	888003cc 	andi	r2,r17,15
  801964:	00c00104 	movi	r3,4
  801968:	10c00426 	beq	r2,r3,80197c <__adddf3+0xa0>
  80196c:	88c7883a 	add	r3,r17,r3
  801970:	1c63803a 	cmpltu	r17,r3,r17
  801974:	4451883a 	add	r8,r8,r17
  801978:	1823883a 	mov	r17,r3
  80197c:	4080202c 	andhi	r2,r8,128
  801980:	10005926 	beq	r2,zero,801ae8 <__adddf3+0x20c>
  801984:	84000044 	addi	r16,r16,1
  801988:	0081ffc4 	movi	r2,2047
  80198c:	8080ba26 	beq	r16,r2,801c78 <__adddf3+0x39c>
  801990:	00bfe034 	movhi	r2,65408
  801994:	10bfffc4 	addi	r2,r2,-1
  801998:	4090703a 	and	r8,r8,r2
  80199c:	4004977a 	slli	r2,r8,29
  8019a0:	4010927a 	slli	r8,r8,9
  8019a4:	8822d0fa 	srli	r17,r17,3
  8019a8:	8401ffcc 	andi	r16,r16,2047
  8019ac:	4010d33a 	srli	r8,r8,12
  8019b0:	9007883a 	mov	r3,r18
  8019b4:	1444b03a 	or	r2,r2,r17
  8019b8:	8401ffcc 	andi	r16,r16,2047
  8019bc:	8020953a 	slli	r16,r16,20
  8019c0:	18c03fcc 	andi	r3,r3,255
  8019c4:	01000434 	movhi	r4,16
  8019c8:	213fffc4 	addi	r4,r4,-1
  8019cc:	180697fa 	slli	r3,r3,31
  8019d0:	4110703a 	and	r8,r8,r4
  8019d4:	4410b03a 	or	r8,r8,r16
  8019d8:	40c6b03a 	or	r3,r8,r3
  8019dc:	dfc00417 	ldw	ra,16(sp)
  8019e0:	dcc00317 	ldw	r19,12(sp)
  8019e4:	dc800217 	ldw	r18,8(sp)
  8019e8:	dc400117 	ldw	r17,4(sp)
  8019ec:	dc000017 	ldw	r16,0(sp)
  8019f0:	dec00504 	addi	sp,sp,20
  8019f4:	f800283a 	ret
  8019f8:	0081ffc4 	movi	r2,2047
  8019fc:	80bfd626 	beq	r16,r2,801958 <__alt_data_end+0xff801958>
  801a00:	4a402034 	orhi	r9,r9,128
  801a04:	00800e04 	movi	r2,56
  801a08:	10c09f16 	blt	r2,r3,801c88 <__adddf3+0x3ac>
  801a0c:	008007c4 	movi	r2,31
  801a10:	10c0c216 	blt	r2,r3,801d1c <__adddf3+0x440>
  801a14:	00800804 	movi	r2,32
  801a18:	10c5c83a 	sub	r2,r2,r3
  801a1c:	488a983a 	sll	r5,r9,r2
  801a20:	30c8d83a 	srl	r4,r6,r3
  801a24:	3084983a 	sll	r2,r6,r2
  801a28:	48c6d83a 	srl	r3,r9,r3
  801a2c:	290cb03a 	or	r6,r5,r4
  801a30:	1004c03a 	cmpne	r2,r2,zero
  801a34:	308cb03a 	or	r6,r6,r2
  801a38:	898dc83a 	sub	r6,r17,r6
  801a3c:	89a3803a 	cmpltu	r17,r17,r6
  801a40:	40d1c83a 	sub	r8,r8,r3
  801a44:	4451c83a 	sub	r8,r8,r17
  801a48:	3023883a 	mov	r17,r6
  801a4c:	4080202c 	andhi	r2,r8,128
  801a50:	10002326 	beq	r2,zero,801ae0 <__adddf3+0x204>
  801a54:	04c02034 	movhi	r19,128
  801a58:	9cffffc4 	addi	r19,r19,-1
  801a5c:	44e6703a 	and	r19,r8,r19
  801a60:	98007626 	beq	r19,zero,801c3c <__adddf3+0x360>
  801a64:	9809883a 	mov	r4,r19
  801a68:	08034440 	call	803444 <__clzsi2>
  801a6c:	10fffe04 	addi	r3,r2,-8
  801a70:	010007c4 	movi	r4,31
  801a74:	20c07716 	blt	r4,r3,801c54 <__adddf3+0x378>
  801a78:	00800804 	movi	r2,32
  801a7c:	10c5c83a 	sub	r2,r2,r3
  801a80:	8884d83a 	srl	r2,r17,r2
  801a84:	98d0983a 	sll	r8,r19,r3
  801a88:	88e2983a 	sll	r17,r17,r3
  801a8c:	1204b03a 	or	r2,r2,r8
  801a90:	1c007416 	blt	r3,r16,801c64 <__adddf3+0x388>
  801a94:	1c21c83a 	sub	r16,r3,r16
  801a98:	82000044 	addi	r8,r16,1
  801a9c:	00c007c4 	movi	r3,31
  801aa0:	1a009116 	blt	r3,r8,801ce8 <__adddf3+0x40c>
  801aa4:	00c00804 	movi	r3,32
  801aa8:	1a07c83a 	sub	r3,r3,r8
  801aac:	8a08d83a 	srl	r4,r17,r8
  801ab0:	88e2983a 	sll	r17,r17,r3
  801ab4:	10c6983a 	sll	r3,r2,r3
  801ab8:	1210d83a 	srl	r8,r2,r8
  801abc:	8804c03a 	cmpne	r2,r17,zero
  801ac0:	1906b03a 	or	r3,r3,r4
  801ac4:	18a2b03a 	or	r17,r3,r2
  801ac8:	0021883a 	mov	r16,zero
  801acc:	003fa206 	br	801958 <__alt_data_end+0xff801958>
  801ad0:	1890b03a 	or	r8,r3,r2
  801ad4:	40017d26 	beq	r8,zero,8020cc <__adddf3+0x7f0>
  801ad8:	1011883a 	mov	r8,r2
  801adc:	1823883a 	mov	r17,r3
  801ae0:	888001cc 	andi	r2,r17,7
  801ae4:	103f9e1e 	bne	r2,zero,801960 <__alt_data_end+0xff801960>
  801ae8:	4004977a 	slli	r2,r8,29
  801aec:	8822d0fa 	srli	r17,r17,3
  801af0:	4010d0fa 	srli	r8,r8,3
  801af4:	9007883a 	mov	r3,r18
  801af8:	1444b03a 	or	r2,r2,r17
  801afc:	0101ffc4 	movi	r4,2047
  801b00:	81002426 	beq	r16,r4,801b94 <__adddf3+0x2b8>
  801b04:	8120703a 	and	r16,r16,r4
  801b08:	01000434 	movhi	r4,16
  801b0c:	213fffc4 	addi	r4,r4,-1
  801b10:	4110703a 	and	r8,r8,r4
  801b14:	003fa806 	br	8019b8 <__alt_data_end+0xff8019b8>
  801b18:	8089c83a 	sub	r4,r16,r2
  801b1c:	01005e0e 	bge	zero,r4,801c98 <__adddf3+0x3bc>
  801b20:	10002b26 	beq	r2,zero,801bd0 <__adddf3+0x2f4>
  801b24:	0081ffc4 	movi	r2,2047
  801b28:	80bf8b26 	beq	r16,r2,801958 <__alt_data_end+0xff801958>
  801b2c:	4a402034 	orhi	r9,r9,128
  801b30:	00800e04 	movi	r2,56
  801b34:	1100a40e 	bge	r2,r4,801dc8 <__adddf3+0x4ec>
  801b38:	498cb03a 	or	r6,r9,r6
  801b3c:	300ac03a 	cmpne	r5,r6,zero
  801b40:	0013883a 	mov	r9,zero
  801b44:	2c4b883a 	add	r5,r5,r17
  801b48:	2c63803a 	cmpltu	r17,r5,r17
  801b4c:	4a11883a 	add	r8,r9,r8
  801b50:	8a11883a 	add	r8,r17,r8
  801b54:	2823883a 	mov	r17,r5
  801b58:	4080202c 	andhi	r2,r8,128
  801b5c:	103fe026 	beq	r2,zero,801ae0 <__alt_data_end+0xff801ae0>
  801b60:	84000044 	addi	r16,r16,1
  801b64:	0081ffc4 	movi	r2,2047
  801b68:	8080d226 	beq	r16,r2,801eb4 <__adddf3+0x5d8>
  801b6c:	00bfe034 	movhi	r2,65408
  801b70:	10bfffc4 	addi	r2,r2,-1
  801b74:	4090703a 	and	r8,r8,r2
  801b78:	880ad07a 	srli	r5,r17,1
  801b7c:	400897fa 	slli	r4,r8,31
  801b80:	88c0004c 	andi	r3,r17,1
  801b84:	28e2b03a 	or	r17,r5,r3
  801b88:	4010d07a 	srli	r8,r8,1
  801b8c:	2462b03a 	or	r17,r4,r17
  801b90:	003f7106 	br	801958 <__alt_data_end+0xff801958>
  801b94:	4088b03a 	or	r4,r8,r2
  801b98:	20014526 	beq	r4,zero,8020b0 <__adddf3+0x7d4>
  801b9c:	01000434 	movhi	r4,16
  801ba0:	42000234 	orhi	r8,r8,8
  801ba4:	213fffc4 	addi	r4,r4,-1
  801ba8:	4110703a 	and	r8,r8,r4
  801bac:	003f8206 	br	8019b8 <__alt_data_end+0xff8019b8>
  801bb0:	18ffffc4 	addi	r3,r3,-1
  801bb4:	1800491e 	bne	r3,zero,801cdc <__adddf3+0x400>
  801bb8:	898bc83a 	sub	r5,r17,r6
  801bbc:	8963803a 	cmpltu	r17,r17,r5
  801bc0:	4251c83a 	sub	r8,r8,r9
  801bc4:	4451c83a 	sub	r8,r8,r17
  801bc8:	2823883a 	mov	r17,r5
  801bcc:	003f9f06 	br	801a4c <__alt_data_end+0xff801a4c>
  801bd0:	4984b03a 	or	r2,r9,r6
  801bd4:	103f6026 	beq	r2,zero,801958 <__alt_data_end+0xff801958>
  801bd8:	213fffc4 	addi	r4,r4,-1
  801bdc:	2000931e 	bne	r4,zero,801e2c <__adddf3+0x550>
  801be0:	898d883a 	add	r6,r17,r6
  801be4:	3463803a 	cmpltu	r17,r6,r17
  801be8:	4251883a 	add	r8,r8,r9
  801bec:	8a11883a 	add	r8,r17,r8
  801bf0:	3023883a 	mov	r17,r6
  801bf4:	003fd806 	br	801b58 <__alt_data_end+0xff801b58>
  801bf8:	1800541e 	bne	r3,zero,801d4c <__adddf3+0x470>
  801bfc:	80800044 	addi	r2,r16,1
  801c00:	1081ffcc 	andi	r2,r2,2047
  801c04:	00c00044 	movi	r3,1
  801c08:	1880a00e 	bge	r3,r2,801e8c <__adddf3+0x5b0>
  801c0c:	8989c83a 	sub	r4,r17,r6
  801c10:	8905803a 	cmpltu	r2,r17,r4
  801c14:	4267c83a 	sub	r19,r8,r9
  801c18:	98a7c83a 	sub	r19,r19,r2
  801c1c:	9880202c 	andhi	r2,r19,128
  801c20:	10006326 	beq	r2,zero,801db0 <__adddf3+0x4d4>
  801c24:	3463c83a 	sub	r17,r6,r17
  801c28:	4a07c83a 	sub	r3,r9,r8
  801c2c:	344d803a 	cmpltu	r6,r6,r17
  801c30:	19a7c83a 	sub	r19,r3,r6
  801c34:	3825883a 	mov	r18,r7
  801c38:	983f8a1e 	bne	r19,zero,801a64 <__alt_data_end+0xff801a64>
  801c3c:	8809883a 	mov	r4,r17
  801c40:	08034440 	call	803444 <__clzsi2>
  801c44:	10800804 	addi	r2,r2,32
  801c48:	10fffe04 	addi	r3,r2,-8
  801c4c:	010007c4 	movi	r4,31
  801c50:	20ff890e 	bge	r4,r3,801a78 <__alt_data_end+0xff801a78>
  801c54:	10bff604 	addi	r2,r2,-40
  801c58:	8884983a 	sll	r2,r17,r2
  801c5c:	0023883a 	mov	r17,zero
  801c60:	1c3f8c0e 	bge	r3,r16,801a94 <__alt_data_end+0xff801a94>
  801c64:	023fe034 	movhi	r8,65408
  801c68:	423fffc4 	addi	r8,r8,-1
  801c6c:	80e1c83a 	sub	r16,r16,r3
  801c70:	1210703a 	and	r8,r2,r8
  801c74:	003f3806 	br	801958 <__alt_data_end+0xff801958>
  801c78:	9007883a 	mov	r3,r18
  801c7c:	0011883a 	mov	r8,zero
  801c80:	0005883a 	mov	r2,zero
  801c84:	003f4c06 	br	8019b8 <__alt_data_end+0xff8019b8>
  801c88:	498cb03a 	or	r6,r9,r6
  801c8c:	300cc03a 	cmpne	r6,r6,zero
  801c90:	0007883a 	mov	r3,zero
  801c94:	003f6806 	br	801a38 <__alt_data_end+0xff801a38>
  801c98:	20009c1e 	bne	r4,zero,801f0c <__adddf3+0x630>
  801c9c:	80800044 	addi	r2,r16,1
  801ca0:	1141ffcc 	andi	r5,r2,2047
  801ca4:	01000044 	movi	r4,1
  801ca8:	2140670e 	bge	r4,r5,801e48 <__adddf3+0x56c>
  801cac:	0101ffc4 	movi	r4,2047
  801cb0:	11007f26 	beq	r2,r4,801eb0 <__adddf3+0x5d4>
  801cb4:	898d883a 	add	r6,r17,r6
  801cb8:	4247883a 	add	r3,r8,r9
  801cbc:	3451803a 	cmpltu	r8,r6,r17
  801cc0:	40d1883a 	add	r8,r8,r3
  801cc4:	402297fa 	slli	r17,r8,31
  801cc8:	300cd07a 	srli	r6,r6,1
  801ccc:	4010d07a 	srli	r8,r8,1
  801cd0:	1021883a 	mov	r16,r2
  801cd4:	89a2b03a 	or	r17,r17,r6
  801cd8:	003f1f06 	br	801958 <__alt_data_end+0xff801958>
  801cdc:	0081ffc4 	movi	r2,2047
  801ce0:	80bf481e 	bne	r16,r2,801a04 <__alt_data_end+0xff801a04>
  801ce4:	003f1c06 	br	801958 <__alt_data_end+0xff801958>
  801ce8:	843ff844 	addi	r16,r16,-31
  801cec:	01000804 	movi	r4,32
  801cf0:	1406d83a 	srl	r3,r2,r16
  801cf4:	41005026 	beq	r8,r4,801e38 <__adddf3+0x55c>
  801cf8:	01001004 	movi	r4,64
  801cfc:	2211c83a 	sub	r8,r4,r8
  801d00:	1204983a 	sll	r2,r2,r8
  801d04:	88a2b03a 	or	r17,r17,r2
  801d08:	8822c03a 	cmpne	r17,r17,zero
  801d0c:	1c62b03a 	or	r17,r3,r17
  801d10:	0011883a 	mov	r8,zero
  801d14:	0021883a 	mov	r16,zero
  801d18:	003f7106 	br	801ae0 <__alt_data_end+0xff801ae0>
  801d1c:	193ff804 	addi	r4,r3,-32
  801d20:	00800804 	movi	r2,32
  801d24:	4908d83a 	srl	r4,r9,r4
  801d28:	18804526 	beq	r3,r2,801e40 <__adddf3+0x564>
  801d2c:	00801004 	movi	r2,64
  801d30:	10c5c83a 	sub	r2,r2,r3
  801d34:	4886983a 	sll	r3,r9,r2
  801d38:	198cb03a 	or	r6,r3,r6
  801d3c:	300cc03a 	cmpne	r6,r6,zero
  801d40:	218cb03a 	or	r6,r4,r6
  801d44:	0007883a 	mov	r3,zero
  801d48:	003f3b06 	br	801a38 <__alt_data_end+0xff801a38>
  801d4c:	80002a26 	beq	r16,zero,801df8 <__adddf3+0x51c>
  801d50:	0101ffc4 	movi	r4,2047
  801d54:	11006826 	beq	r2,r4,801ef8 <__adddf3+0x61c>
  801d58:	00c7c83a 	sub	r3,zero,r3
  801d5c:	42002034 	orhi	r8,r8,128
  801d60:	01000e04 	movi	r4,56
  801d64:	20c07c16 	blt	r4,r3,801f58 <__adddf3+0x67c>
  801d68:	010007c4 	movi	r4,31
  801d6c:	20c0da16 	blt	r4,r3,8020d8 <__adddf3+0x7fc>
  801d70:	01000804 	movi	r4,32
  801d74:	20c9c83a 	sub	r4,r4,r3
  801d78:	4114983a 	sll	r10,r8,r4
  801d7c:	88cad83a 	srl	r5,r17,r3
  801d80:	8908983a 	sll	r4,r17,r4
  801d84:	40c6d83a 	srl	r3,r8,r3
  801d88:	5162b03a 	or	r17,r10,r5
  801d8c:	2008c03a 	cmpne	r4,r4,zero
  801d90:	8922b03a 	or	r17,r17,r4
  801d94:	3463c83a 	sub	r17,r6,r17
  801d98:	48c7c83a 	sub	r3,r9,r3
  801d9c:	344d803a 	cmpltu	r6,r6,r17
  801da0:	1991c83a 	sub	r8,r3,r6
  801da4:	1021883a 	mov	r16,r2
  801da8:	3825883a 	mov	r18,r7
  801dac:	003f2706 	br	801a4c <__alt_data_end+0xff801a4c>
  801db0:	24d0b03a 	or	r8,r4,r19
  801db4:	40001b1e 	bne	r8,zero,801e24 <__adddf3+0x548>
  801db8:	0005883a 	mov	r2,zero
  801dbc:	0007883a 	mov	r3,zero
  801dc0:	0021883a 	mov	r16,zero
  801dc4:	003f4d06 	br	801afc <__alt_data_end+0xff801afc>
  801dc8:	008007c4 	movi	r2,31
  801dcc:	11003c16 	blt	r2,r4,801ec0 <__adddf3+0x5e4>
  801dd0:	00800804 	movi	r2,32
  801dd4:	1105c83a 	sub	r2,r2,r4
  801dd8:	488e983a 	sll	r7,r9,r2
  801ddc:	310ad83a 	srl	r5,r6,r4
  801de0:	3084983a 	sll	r2,r6,r2
  801de4:	4912d83a 	srl	r9,r9,r4
  801de8:	394ab03a 	or	r5,r7,r5
  801dec:	1004c03a 	cmpne	r2,r2,zero
  801df0:	288ab03a 	or	r5,r5,r2
  801df4:	003f5306 	br	801b44 <__alt_data_end+0xff801b44>
  801df8:	4448b03a 	or	r4,r8,r17
  801dfc:	20003e26 	beq	r4,zero,801ef8 <__adddf3+0x61c>
  801e00:	00c6303a 	nor	r3,zero,r3
  801e04:	18003a1e 	bne	r3,zero,801ef0 <__adddf3+0x614>
  801e08:	3463c83a 	sub	r17,r6,r17
  801e0c:	4a07c83a 	sub	r3,r9,r8
  801e10:	344d803a 	cmpltu	r6,r6,r17
  801e14:	1991c83a 	sub	r8,r3,r6
  801e18:	1021883a 	mov	r16,r2
  801e1c:	3825883a 	mov	r18,r7
  801e20:	003f0a06 	br	801a4c <__alt_data_end+0xff801a4c>
  801e24:	2023883a 	mov	r17,r4
  801e28:	003f0d06 	br	801a60 <__alt_data_end+0xff801a60>
  801e2c:	0081ffc4 	movi	r2,2047
  801e30:	80bf3f1e 	bne	r16,r2,801b30 <__alt_data_end+0xff801b30>
  801e34:	003ec806 	br	801958 <__alt_data_end+0xff801958>
  801e38:	0005883a 	mov	r2,zero
  801e3c:	003fb106 	br	801d04 <__alt_data_end+0xff801d04>
  801e40:	0007883a 	mov	r3,zero
  801e44:	003fbc06 	br	801d38 <__alt_data_end+0xff801d38>
  801e48:	4444b03a 	or	r2,r8,r17
  801e4c:	8000871e 	bne	r16,zero,80206c <__adddf3+0x790>
  801e50:	1000ba26 	beq	r2,zero,80213c <__adddf3+0x860>
  801e54:	4984b03a 	or	r2,r9,r6
  801e58:	103ebf26 	beq	r2,zero,801958 <__alt_data_end+0xff801958>
  801e5c:	8985883a 	add	r2,r17,r6
  801e60:	4247883a 	add	r3,r8,r9
  801e64:	1451803a 	cmpltu	r8,r2,r17
  801e68:	40d1883a 	add	r8,r8,r3
  801e6c:	40c0202c 	andhi	r3,r8,128
  801e70:	1023883a 	mov	r17,r2
  801e74:	183f1a26 	beq	r3,zero,801ae0 <__alt_data_end+0xff801ae0>
  801e78:	00bfe034 	movhi	r2,65408
  801e7c:	10bfffc4 	addi	r2,r2,-1
  801e80:	2021883a 	mov	r16,r4
  801e84:	4090703a 	and	r8,r8,r2
  801e88:	003eb306 	br	801958 <__alt_data_end+0xff801958>
  801e8c:	4444b03a 	or	r2,r8,r17
  801e90:	8000291e 	bne	r16,zero,801f38 <__adddf3+0x65c>
  801e94:	10004b1e 	bne	r2,zero,801fc4 <__adddf3+0x6e8>
  801e98:	4990b03a 	or	r8,r9,r6
  801e9c:	40008b26 	beq	r8,zero,8020cc <__adddf3+0x7f0>
  801ea0:	4811883a 	mov	r8,r9
  801ea4:	3023883a 	mov	r17,r6
  801ea8:	3825883a 	mov	r18,r7
  801eac:	003eaa06 	br	801958 <__alt_data_end+0xff801958>
  801eb0:	1021883a 	mov	r16,r2
  801eb4:	0011883a 	mov	r8,zero
  801eb8:	0005883a 	mov	r2,zero
  801ebc:	003f0f06 	br	801afc <__alt_data_end+0xff801afc>
  801ec0:	217ff804 	addi	r5,r4,-32
  801ec4:	00800804 	movi	r2,32
  801ec8:	494ad83a 	srl	r5,r9,r5
  801ecc:	20807d26 	beq	r4,r2,8020c4 <__adddf3+0x7e8>
  801ed0:	00801004 	movi	r2,64
  801ed4:	1109c83a 	sub	r4,r2,r4
  801ed8:	4912983a 	sll	r9,r9,r4
  801edc:	498cb03a 	or	r6,r9,r6
  801ee0:	300cc03a 	cmpne	r6,r6,zero
  801ee4:	298ab03a 	or	r5,r5,r6
  801ee8:	0013883a 	mov	r9,zero
  801eec:	003f1506 	br	801b44 <__alt_data_end+0xff801b44>
  801ef0:	0101ffc4 	movi	r4,2047
  801ef4:	113f9a1e 	bne	r2,r4,801d60 <__alt_data_end+0xff801d60>
  801ef8:	4811883a 	mov	r8,r9
  801efc:	3023883a 	mov	r17,r6
  801f00:	1021883a 	mov	r16,r2
  801f04:	3825883a 	mov	r18,r7
  801f08:	003e9306 	br	801958 <__alt_data_end+0xff801958>
  801f0c:	8000161e 	bne	r16,zero,801f68 <__adddf3+0x68c>
  801f10:	444ab03a 	or	r5,r8,r17
  801f14:	28005126 	beq	r5,zero,80205c <__adddf3+0x780>
  801f18:	0108303a 	nor	r4,zero,r4
  801f1c:	20004d1e 	bne	r4,zero,802054 <__adddf3+0x778>
  801f20:	89a3883a 	add	r17,r17,r6
  801f24:	4253883a 	add	r9,r8,r9
  801f28:	898d803a 	cmpltu	r6,r17,r6
  801f2c:	3251883a 	add	r8,r6,r9
  801f30:	1021883a 	mov	r16,r2
  801f34:	003f0806 	br	801b58 <__alt_data_end+0xff801b58>
  801f38:	1000301e 	bne	r2,zero,801ffc <__adddf3+0x720>
  801f3c:	4984b03a 	or	r2,r9,r6
  801f40:	10007126 	beq	r2,zero,802108 <__adddf3+0x82c>
  801f44:	4811883a 	mov	r8,r9
  801f48:	3023883a 	mov	r17,r6
  801f4c:	3825883a 	mov	r18,r7
  801f50:	0401ffc4 	movi	r16,2047
  801f54:	003e8006 	br	801958 <__alt_data_end+0xff801958>
  801f58:	4462b03a 	or	r17,r8,r17
  801f5c:	8822c03a 	cmpne	r17,r17,zero
  801f60:	0007883a 	mov	r3,zero
  801f64:	003f8b06 	br	801d94 <__alt_data_end+0xff801d94>
  801f68:	0141ffc4 	movi	r5,2047
  801f6c:	11403b26 	beq	r2,r5,80205c <__adddf3+0x780>
  801f70:	0109c83a 	sub	r4,zero,r4
  801f74:	42002034 	orhi	r8,r8,128
  801f78:	01400e04 	movi	r5,56
  801f7c:	29006716 	blt	r5,r4,80211c <__adddf3+0x840>
  801f80:	014007c4 	movi	r5,31
  801f84:	29007016 	blt	r5,r4,802148 <__adddf3+0x86c>
  801f88:	01400804 	movi	r5,32
  801f8c:	290bc83a 	sub	r5,r5,r4
  801f90:	4154983a 	sll	r10,r8,r5
  801f94:	890ed83a 	srl	r7,r17,r4
  801f98:	894a983a 	sll	r5,r17,r5
  801f9c:	4108d83a 	srl	r4,r8,r4
  801fa0:	51e2b03a 	or	r17,r10,r7
  801fa4:	280ac03a 	cmpne	r5,r5,zero
  801fa8:	8962b03a 	or	r17,r17,r5
  801fac:	89a3883a 	add	r17,r17,r6
  801fb0:	2253883a 	add	r9,r4,r9
  801fb4:	898d803a 	cmpltu	r6,r17,r6
  801fb8:	3251883a 	add	r8,r6,r9
  801fbc:	1021883a 	mov	r16,r2
  801fc0:	003ee506 	br	801b58 <__alt_data_end+0xff801b58>
  801fc4:	4984b03a 	or	r2,r9,r6
  801fc8:	103e6326 	beq	r2,zero,801958 <__alt_data_end+0xff801958>
  801fcc:	8987c83a 	sub	r3,r17,r6
  801fd0:	88c9803a 	cmpltu	r4,r17,r3
  801fd4:	4245c83a 	sub	r2,r8,r9
  801fd8:	1105c83a 	sub	r2,r2,r4
  801fdc:	1100202c 	andhi	r4,r2,128
  801fe0:	203ebb26 	beq	r4,zero,801ad0 <__alt_data_end+0xff801ad0>
  801fe4:	3463c83a 	sub	r17,r6,r17
  801fe8:	4a07c83a 	sub	r3,r9,r8
  801fec:	344d803a 	cmpltu	r6,r6,r17
  801ff0:	1991c83a 	sub	r8,r3,r6
  801ff4:	3825883a 	mov	r18,r7
  801ff8:	003e5706 	br	801958 <__alt_data_end+0xff801958>
  801ffc:	4984b03a 	or	r2,r9,r6
  802000:	10002e26 	beq	r2,zero,8020bc <__adddf3+0x7e0>
  802004:	4004d0fa 	srli	r2,r8,3
  802008:	8822d0fa 	srli	r17,r17,3
  80200c:	4010977a 	slli	r8,r8,29
  802010:	10c0022c 	andhi	r3,r2,8
  802014:	4462b03a 	or	r17,r8,r17
  802018:	18000826 	beq	r3,zero,80203c <__adddf3+0x760>
  80201c:	4808d0fa 	srli	r4,r9,3
  802020:	20c0022c 	andhi	r3,r4,8
  802024:	1800051e 	bne	r3,zero,80203c <__adddf3+0x760>
  802028:	300cd0fa 	srli	r6,r6,3
  80202c:	4806977a 	slli	r3,r9,29
  802030:	2005883a 	mov	r2,r4
  802034:	3825883a 	mov	r18,r7
  802038:	19a2b03a 	or	r17,r3,r6
  80203c:	8810d77a 	srli	r8,r17,29
  802040:	100490fa 	slli	r2,r2,3
  802044:	882290fa 	slli	r17,r17,3
  802048:	0401ffc4 	movi	r16,2047
  80204c:	4090b03a 	or	r8,r8,r2
  802050:	003e4106 	br	801958 <__alt_data_end+0xff801958>
  802054:	0141ffc4 	movi	r5,2047
  802058:	117fc71e 	bne	r2,r5,801f78 <__alt_data_end+0xff801f78>
  80205c:	4811883a 	mov	r8,r9
  802060:	3023883a 	mov	r17,r6
  802064:	1021883a 	mov	r16,r2
  802068:	003e3b06 	br	801958 <__alt_data_end+0xff801958>
  80206c:	10002f26 	beq	r2,zero,80212c <__adddf3+0x850>
  802070:	4984b03a 	or	r2,r9,r6
  802074:	10001126 	beq	r2,zero,8020bc <__adddf3+0x7e0>
  802078:	4004d0fa 	srli	r2,r8,3
  80207c:	8822d0fa 	srli	r17,r17,3
  802080:	4010977a 	slli	r8,r8,29
  802084:	10c0022c 	andhi	r3,r2,8
  802088:	4462b03a 	or	r17,r8,r17
  80208c:	183feb26 	beq	r3,zero,80203c <__alt_data_end+0xff80203c>
  802090:	4808d0fa 	srli	r4,r9,3
  802094:	20c0022c 	andhi	r3,r4,8
  802098:	183fe81e 	bne	r3,zero,80203c <__alt_data_end+0xff80203c>
  80209c:	300cd0fa 	srli	r6,r6,3
  8020a0:	4806977a 	slli	r3,r9,29
  8020a4:	2005883a 	mov	r2,r4
  8020a8:	19a2b03a 	or	r17,r3,r6
  8020ac:	003fe306 	br	80203c <__alt_data_end+0xff80203c>
  8020b0:	0011883a 	mov	r8,zero
  8020b4:	0005883a 	mov	r2,zero
  8020b8:	003e3f06 	br	8019b8 <__alt_data_end+0xff8019b8>
  8020bc:	0401ffc4 	movi	r16,2047
  8020c0:	003e2506 	br	801958 <__alt_data_end+0xff801958>
  8020c4:	0013883a 	mov	r9,zero
  8020c8:	003f8406 	br	801edc <__alt_data_end+0xff801edc>
  8020cc:	0005883a 	mov	r2,zero
  8020d0:	0007883a 	mov	r3,zero
  8020d4:	003e8906 	br	801afc <__alt_data_end+0xff801afc>
  8020d8:	197ff804 	addi	r5,r3,-32
  8020dc:	01000804 	movi	r4,32
  8020e0:	414ad83a 	srl	r5,r8,r5
  8020e4:	19002426 	beq	r3,r4,802178 <__adddf3+0x89c>
  8020e8:	01001004 	movi	r4,64
  8020ec:	20c7c83a 	sub	r3,r4,r3
  8020f0:	40c6983a 	sll	r3,r8,r3
  8020f4:	1c46b03a 	or	r3,r3,r17
  8020f8:	1806c03a 	cmpne	r3,r3,zero
  8020fc:	28e2b03a 	or	r17,r5,r3
  802100:	0007883a 	mov	r3,zero
  802104:	003f2306 	br	801d94 <__alt_data_end+0xff801d94>
  802108:	0007883a 	mov	r3,zero
  80210c:	5811883a 	mov	r8,r11
  802110:	00bfffc4 	movi	r2,-1
  802114:	0401ffc4 	movi	r16,2047
  802118:	003e7806 	br	801afc <__alt_data_end+0xff801afc>
  80211c:	4462b03a 	or	r17,r8,r17
  802120:	8822c03a 	cmpne	r17,r17,zero
  802124:	0009883a 	mov	r4,zero
  802128:	003fa006 	br	801fac <__alt_data_end+0xff801fac>
  80212c:	4811883a 	mov	r8,r9
  802130:	3023883a 	mov	r17,r6
  802134:	0401ffc4 	movi	r16,2047
  802138:	003e0706 	br	801958 <__alt_data_end+0xff801958>
  80213c:	4811883a 	mov	r8,r9
  802140:	3023883a 	mov	r17,r6
  802144:	003e0406 	br	801958 <__alt_data_end+0xff801958>
  802148:	21fff804 	addi	r7,r4,-32
  80214c:	01400804 	movi	r5,32
  802150:	41ced83a 	srl	r7,r8,r7
  802154:	21400a26 	beq	r4,r5,802180 <__adddf3+0x8a4>
  802158:	01401004 	movi	r5,64
  80215c:	2909c83a 	sub	r4,r5,r4
  802160:	4108983a 	sll	r4,r8,r4
  802164:	2448b03a 	or	r4,r4,r17
  802168:	2008c03a 	cmpne	r4,r4,zero
  80216c:	3922b03a 	or	r17,r7,r4
  802170:	0009883a 	mov	r4,zero
  802174:	003f8d06 	br	801fac <__alt_data_end+0xff801fac>
  802178:	0007883a 	mov	r3,zero
  80217c:	003fdd06 	br	8020f4 <__alt_data_end+0xff8020f4>
  802180:	0009883a 	mov	r4,zero
  802184:	003ff706 	br	802164 <__alt_data_end+0xff802164>

00802188 <__divdf3>:
  802188:	defff004 	addi	sp,sp,-64
  80218c:	dc800815 	stw	r18,32(sp)
  802190:	2824d53a 	srli	r18,r5,20
  802194:	dd800c15 	stw	r22,48(sp)
  802198:	282cd7fa 	srli	r22,r5,31
  80219c:	dc000615 	stw	r16,24(sp)
  8021a0:	04000434 	movhi	r16,16
  8021a4:	843fffc4 	addi	r16,r16,-1
  8021a8:	dfc00f15 	stw	ra,60(sp)
  8021ac:	df000e15 	stw	fp,56(sp)
  8021b0:	ddc00d15 	stw	r23,52(sp)
  8021b4:	dd400b15 	stw	r21,44(sp)
  8021b8:	dd000a15 	stw	r20,40(sp)
  8021bc:	dcc00915 	stw	r19,36(sp)
  8021c0:	dc400715 	stw	r17,28(sp)
  8021c4:	9481ffcc 	andi	r18,r18,2047
  8021c8:	2c20703a 	and	r16,r5,r16
  8021cc:	b2003fcc 	andi	r8,r22,255
  8021d0:	90006126 	beq	r18,zero,802358 <__divdf3+0x1d0>
  8021d4:	0081ffc4 	movi	r2,2047
  8021d8:	202b883a 	mov	r21,r4
  8021dc:	90803726 	beq	r18,r2,8022bc <__divdf3+0x134>
  8021e0:	80800434 	orhi	r2,r16,16
  8021e4:	100490fa 	slli	r2,r2,3
  8021e8:	2020d77a 	srli	r16,r4,29
  8021ec:	202a90fa 	slli	r21,r4,3
  8021f0:	94bf0044 	addi	r18,r18,-1023
  8021f4:	80a0b03a 	or	r16,r16,r2
  8021f8:	0013883a 	mov	r9,zero
  8021fc:	000b883a 	mov	r5,zero
  802200:	3806d53a 	srli	r3,r7,20
  802204:	382ed7fa 	srli	r23,r7,31
  802208:	04400434 	movhi	r17,16
  80220c:	8c7fffc4 	addi	r17,r17,-1
  802210:	18c1ffcc 	andi	r3,r3,2047
  802214:	3029883a 	mov	r20,r6
  802218:	3c62703a 	and	r17,r7,r17
  80221c:	bf003fcc 	andi	fp,r23,255
  802220:	18006e26 	beq	r3,zero,8023dc <__divdf3+0x254>
  802224:	0081ffc4 	movi	r2,2047
  802228:	18806626 	beq	r3,r2,8023c4 <__divdf3+0x23c>
  80222c:	88800434 	orhi	r2,r17,16
  802230:	100490fa 	slli	r2,r2,3
  802234:	3022d77a 	srli	r17,r6,29
  802238:	302890fa 	slli	r20,r6,3
  80223c:	18ff0044 	addi	r3,r3,-1023
  802240:	88a2b03a 	or	r17,r17,r2
  802244:	000f883a 	mov	r7,zero
  802248:	b5e6f03a 	xor	r19,r22,r23
  80224c:	3a4cb03a 	or	r6,r7,r9
  802250:	008003c4 	movi	r2,15
  802254:	9809883a 	mov	r4,r19
  802258:	90c7c83a 	sub	r3,r18,r3
  80225c:	9cc03fcc 	andi	r19,r19,255
  802260:	11809636 	bltu	r2,r6,8024bc <__divdf3+0x334>
  802264:	300c90ba 	slli	r6,r6,2
  802268:	00802034 	movhi	r2,128
  80226c:	10889f04 	addi	r2,r2,8828
  802270:	308d883a 	add	r6,r6,r2
  802274:	30800017 	ldw	r2,0(r6)
  802278:	1000683a 	jmp	r2
  80227c:	008024bc 	xorhi	r2,zero,146
  802280:	008022f4 	movhi	r2,139
  802284:	008024ac 	andhi	r2,zero,146
  802288:	008022e8 	cmpgeui	r2,zero,139
  80228c:	008024ac 	andhi	r2,zero,146
  802290:	00802480 	call	80248 <__reset-0x77fdb8>
  802294:	008024ac 	andhi	r2,zero,146
  802298:	008022e8 	cmpgeui	r2,zero,139
  80229c:	008022f4 	movhi	r2,139
  8022a0:	008022f4 	movhi	r2,139
  8022a4:	00802480 	call	80248 <__reset-0x77fdb8>
  8022a8:	008022e8 	cmpgeui	r2,zero,139
  8022ac:	008022d8 	cmpnei	r2,zero,139
  8022b0:	008022d8 	cmpnei	r2,zero,139
  8022b4:	008022d8 	cmpnei	r2,zero,139
  8022b8:	00802844 	movi	r2,161
  8022bc:	2404b03a 	or	r2,r4,r16
  8022c0:	10006c1e 	bne	r2,zero,802474 <__divdf3+0x2ec>
  8022c4:	02400204 	movi	r9,8
  8022c8:	0021883a 	mov	r16,zero
  8022cc:	002b883a 	mov	r21,zero
  8022d0:	01400084 	movi	r5,2
  8022d4:	003fca06 	br	802200 <__alt_data_end+0xff802200>
  8022d8:	8023883a 	mov	r17,r16
  8022dc:	a829883a 	mov	r20,r21
  8022e0:	4039883a 	mov	fp,r8
  8022e4:	280f883a 	mov	r7,r5
  8022e8:	00800084 	movi	r2,2
  8022ec:	3881601e 	bne	r7,r2,802870 <__divdf3+0x6e8>
  8022f0:	e027883a 	mov	r19,fp
  8022f4:	9900004c 	andi	r4,r19,1
  8022f8:	0081ffc4 	movi	r2,2047
  8022fc:	0021883a 	mov	r16,zero
  802300:	002b883a 	mov	r21,zero
  802304:	1004953a 	slli	r2,r2,20
  802308:	20c03fcc 	andi	r3,r4,255
  80230c:	01400434 	movhi	r5,16
  802310:	297fffc4 	addi	r5,r5,-1
  802314:	180697fa 	slli	r3,r3,31
  802318:	8160703a 	and	r16,r16,r5
  80231c:	80a0b03a 	or	r16,r16,r2
  802320:	80c6b03a 	or	r3,r16,r3
  802324:	a805883a 	mov	r2,r21
  802328:	dfc00f17 	ldw	ra,60(sp)
  80232c:	df000e17 	ldw	fp,56(sp)
  802330:	ddc00d17 	ldw	r23,52(sp)
  802334:	dd800c17 	ldw	r22,48(sp)
  802338:	dd400b17 	ldw	r21,44(sp)
  80233c:	dd000a17 	ldw	r20,40(sp)
  802340:	dcc00917 	ldw	r19,36(sp)
  802344:	dc800817 	ldw	r18,32(sp)
  802348:	dc400717 	ldw	r17,28(sp)
  80234c:	dc000617 	ldw	r16,24(sp)
  802350:	dec01004 	addi	sp,sp,64
  802354:	f800283a 	ret
  802358:	2404b03a 	or	r2,r4,r16
  80235c:	2023883a 	mov	r17,r4
  802360:	10003f26 	beq	r2,zero,802460 <__divdf3+0x2d8>
  802364:	80015e26 	beq	r16,zero,8028e0 <__divdf3+0x758>
  802368:	8009883a 	mov	r4,r16
  80236c:	d9800215 	stw	r6,8(sp)
  802370:	d9c00515 	stw	r7,20(sp)
  802374:	da000415 	stw	r8,16(sp)
  802378:	08034440 	call	803444 <__clzsi2>
  80237c:	d9800217 	ldw	r6,8(sp)
  802380:	d9c00517 	ldw	r7,20(sp)
  802384:	da000417 	ldw	r8,16(sp)
  802388:	113ffd44 	addi	r4,r2,-11
  80238c:	00c00704 	movi	r3,28
  802390:	19014f16 	blt	r3,r4,8028d0 <__divdf3+0x748>
  802394:	00c00744 	movi	r3,29
  802398:	157ffe04 	addi	r21,r2,-8
  80239c:	1907c83a 	sub	r3,r3,r4
  8023a0:	8560983a 	sll	r16,r16,r21
  8023a4:	88c6d83a 	srl	r3,r17,r3
  8023a8:	8d6a983a 	sll	r21,r17,r21
  8023ac:	1c20b03a 	or	r16,r3,r16
  8023b0:	1080fcc4 	addi	r2,r2,1011
  8023b4:	00a5c83a 	sub	r18,zero,r2
  8023b8:	0013883a 	mov	r9,zero
  8023bc:	000b883a 	mov	r5,zero
  8023c0:	003f8f06 	br	802200 <__alt_data_end+0xff802200>
  8023c4:	3444b03a 	or	r2,r6,r17
  8023c8:	1000231e 	bne	r2,zero,802458 <__divdf3+0x2d0>
  8023cc:	0023883a 	mov	r17,zero
  8023d0:	0029883a 	mov	r20,zero
  8023d4:	01c00084 	movi	r7,2
  8023d8:	003f9b06 	br	802248 <__alt_data_end+0xff802248>
  8023dc:	3444b03a 	or	r2,r6,r17
  8023e0:	10001926 	beq	r2,zero,802448 <__divdf3+0x2c0>
  8023e4:	88014b26 	beq	r17,zero,802914 <__divdf3+0x78c>
  8023e8:	8809883a 	mov	r4,r17
  8023ec:	d9400115 	stw	r5,4(sp)
  8023f0:	d9800215 	stw	r6,8(sp)
  8023f4:	da000415 	stw	r8,16(sp)
  8023f8:	da400315 	stw	r9,12(sp)
  8023fc:	08034440 	call	803444 <__clzsi2>
  802400:	d9400117 	ldw	r5,4(sp)
  802404:	d9800217 	ldw	r6,8(sp)
  802408:	da000417 	ldw	r8,16(sp)
  80240c:	da400317 	ldw	r9,12(sp)
  802410:	113ffd44 	addi	r4,r2,-11
  802414:	00c00704 	movi	r3,28
  802418:	19013a16 	blt	r3,r4,802904 <__divdf3+0x77c>
  80241c:	00c00744 	movi	r3,29
  802420:	153ffe04 	addi	r20,r2,-8
  802424:	1907c83a 	sub	r3,r3,r4
  802428:	8d22983a 	sll	r17,r17,r20
  80242c:	30c6d83a 	srl	r3,r6,r3
  802430:	3528983a 	sll	r20,r6,r20
  802434:	1c62b03a 	or	r17,r3,r17
  802438:	1080fcc4 	addi	r2,r2,1011
  80243c:	0087c83a 	sub	r3,zero,r2
  802440:	000f883a 	mov	r7,zero
  802444:	003f8006 	br	802248 <__alt_data_end+0xff802248>
  802448:	0023883a 	mov	r17,zero
  80244c:	0029883a 	mov	r20,zero
  802450:	01c00044 	movi	r7,1
  802454:	003f7c06 	br	802248 <__alt_data_end+0xff802248>
  802458:	01c000c4 	movi	r7,3
  80245c:	003f7a06 	br	802248 <__alt_data_end+0xff802248>
  802460:	02400104 	movi	r9,4
  802464:	0021883a 	mov	r16,zero
  802468:	002b883a 	mov	r21,zero
  80246c:	01400044 	movi	r5,1
  802470:	003f6306 	br	802200 <__alt_data_end+0xff802200>
  802474:	02400304 	movi	r9,12
  802478:	014000c4 	movi	r5,3
  80247c:	003f6006 	br	802200 <__alt_data_end+0xff802200>
  802480:	04000434 	movhi	r16,16
  802484:	0009883a 	mov	r4,zero
  802488:	843fffc4 	addi	r16,r16,-1
  80248c:	057fffc4 	movi	r21,-1
  802490:	0081ffc4 	movi	r2,2047
  802494:	003f9b06 	br	802304 <__alt_data_end+0xff802304>
  802498:	00c00044 	movi	r3,1
  80249c:	1887c83a 	sub	r3,r3,r2
  8024a0:	01000e04 	movi	r4,56
  8024a4:	20c1530e 	bge	r4,r3,8029f4 <__divdf3+0x86c>
  8024a8:	9900004c 	andi	r4,r19,1
  8024ac:	0005883a 	mov	r2,zero
  8024b0:	0021883a 	mov	r16,zero
  8024b4:	002b883a 	mov	r21,zero
  8024b8:	003f9206 	br	802304 <__alt_data_end+0xff802304>
  8024bc:	8c012e36 	bltu	r17,r16,802978 <__divdf3+0x7f0>
  8024c0:	84412c26 	beq	r16,r17,802974 <__divdf3+0x7ec>
  8024c4:	a82f883a 	mov	r23,r21
  8024c8:	18ffffc4 	addi	r3,r3,-1
  8024cc:	002b883a 	mov	r21,zero
  8024d0:	a004d63a 	srli	r2,r20,24
  8024d4:	8822923a 	slli	r17,r17,8
  8024d8:	a028923a 	slli	r20,r20,8
  8024dc:	8009883a 	mov	r4,r16
  8024e0:	88acb03a 	or	r22,r17,r2
  8024e4:	dd000015 	stw	r20,0(sp)
  8024e8:	b028d43a 	srli	r20,r22,16
  8024ec:	d8c00215 	stw	r3,8(sp)
  8024f0:	b4bfffcc 	andi	r18,r22,65535
  8024f4:	a00b883a 	mov	r5,r20
  8024f8:	08017f80 	call	8017f8 <__udivsi3>
  8024fc:	100b883a 	mov	r5,r2
  802500:	9009883a 	mov	r4,r18
  802504:	1023883a 	mov	r17,r2
  802508:	08018b40 	call	8018b4 <__mulsi3>
  80250c:	8009883a 	mov	r4,r16
  802510:	a00b883a 	mov	r5,r20
  802514:	1039883a 	mov	fp,r2
  802518:	080185c0 	call	80185c <__umodsi3>
  80251c:	1004943a 	slli	r2,r2,16
  802520:	b808d43a 	srli	r4,r23,16
  802524:	d8c00217 	ldw	r3,8(sp)
  802528:	2084b03a 	or	r2,r4,r2
  80252c:	1700062e 	bgeu	r2,fp,802548 <__divdf3+0x3c0>
  802530:	1585883a 	add	r2,r2,r22
  802534:	893fffc4 	addi	r4,r17,-1
  802538:	15811d36 	bltu	r2,r22,8029b0 <__divdf3+0x828>
  80253c:	17011c2e 	bgeu	r2,fp,8029b0 <__divdf3+0x828>
  802540:	8c7fff84 	addi	r17,r17,-2
  802544:	1585883a 	add	r2,r2,r22
  802548:	1739c83a 	sub	fp,r2,fp
  80254c:	a00b883a 	mov	r5,r20
  802550:	e009883a 	mov	r4,fp
  802554:	d8c00215 	stw	r3,8(sp)
  802558:	08017f80 	call	8017f8 <__udivsi3>
  80255c:	100b883a 	mov	r5,r2
  802560:	9009883a 	mov	r4,r18
  802564:	1021883a 	mov	r16,r2
  802568:	08018b40 	call	8018b4 <__mulsi3>
  80256c:	a00b883a 	mov	r5,r20
  802570:	e009883a 	mov	r4,fp
  802574:	d8800415 	stw	r2,16(sp)
  802578:	080185c0 	call	80185c <__umodsi3>
  80257c:	1004943a 	slli	r2,r2,16
  802580:	da000417 	ldw	r8,16(sp)
  802584:	bdffffcc 	andi	r23,r23,65535
  802588:	b884b03a 	or	r2,r23,r2
  80258c:	d8c00217 	ldw	r3,8(sp)
  802590:	1200062e 	bgeu	r2,r8,8025ac <__divdf3+0x424>
  802594:	1585883a 	add	r2,r2,r22
  802598:	813fffc4 	addi	r4,r16,-1
  80259c:	15810236 	bltu	r2,r22,8029a8 <__divdf3+0x820>
  8025a0:	1201012e 	bgeu	r2,r8,8029a8 <__divdf3+0x820>
  8025a4:	843fff84 	addi	r16,r16,-2
  8025a8:	1585883a 	add	r2,r2,r22
  8025ac:	8822943a 	slli	r17,r17,16
  8025b0:	d9800017 	ldw	r6,0(sp)
  8025b4:	1211c83a 	sub	r8,r2,r8
  8025b8:	8c22b03a 	or	r17,r17,r16
  8025bc:	373fffcc 	andi	fp,r6,65535
  8025c0:	8abfffcc 	andi	r10,r17,65535
  8025c4:	8820d43a 	srli	r16,r17,16
  8025c8:	5009883a 	mov	r4,r10
  8025cc:	e00b883a 	mov	r5,fp
  8025d0:	302ed43a 	srli	r23,r6,16
  8025d4:	d8c00215 	stw	r3,8(sp)
  8025d8:	da000415 	stw	r8,16(sp)
  8025dc:	da800115 	stw	r10,4(sp)
  8025e0:	08018b40 	call	8018b4 <__mulsi3>
  8025e4:	800b883a 	mov	r5,r16
  8025e8:	e009883a 	mov	r4,fp
  8025ec:	d8800515 	stw	r2,20(sp)
  8025f0:	08018b40 	call	8018b4 <__mulsi3>
  8025f4:	8009883a 	mov	r4,r16
  8025f8:	b80b883a 	mov	r5,r23
  8025fc:	d8800315 	stw	r2,12(sp)
  802600:	08018b40 	call	8018b4 <__mulsi3>
  802604:	da800117 	ldw	r10,4(sp)
  802608:	b80b883a 	mov	r5,r23
  80260c:	1021883a 	mov	r16,r2
  802610:	5009883a 	mov	r4,r10
  802614:	08018b40 	call	8018b4 <__mulsi3>
  802618:	d9c00517 	ldw	r7,20(sp)
  80261c:	da400317 	ldw	r9,12(sp)
  802620:	d8c00217 	ldw	r3,8(sp)
  802624:	3808d43a 	srli	r4,r7,16
  802628:	1245883a 	add	r2,r2,r9
  80262c:	da000417 	ldw	r8,16(sp)
  802630:	2085883a 	add	r2,r4,r2
  802634:	1240022e 	bgeu	r2,r9,802640 <__divdf3+0x4b8>
  802638:	01000074 	movhi	r4,1
  80263c:	8121883a 	add	r16,r16,r4
  802640:	1008d43a 	srli	r4,r2,16
  802644:	1004943a 	slli	r2,r2,16
  802648:	39ffffcc 	andi	r7,r7,65535
  80264c:	2409883a 	add	r4,r4,r16
  802650:	11c5883a 	add	r2,r2,r7
  802654:	4100bb36 	bltu	r8,r4,802944 <__divdf3+0x7bc>
  802658:	4100d726 	beq	r8,r4,8029b8 <__divdf3+0x830>
  80265c:	4109c83a 	sub	r4,r8,r4
  802660:	a8a1c83a 	sub	r16,r21,r2
  802664:	ac2b803a 	cmpltu	r21,r21,r16
  802668:	256bc83a 	sub	r21,r4,r21
  80266c:	b540d926 	beq	r22,r21,8029d4 <__divdf3+0x84c>
  802670:	a00b883a 	mov	r5,r20
  802674:	a809883a 	mov	r4,r21
  802678:	d8c00215 	stw	r3,8(sp)
  80267c:	08017f80 	call	8017f8 <__udivsi3>
  802680:	100b883a 	mov	r5,r2
  802684:	9009883a 	mov	r4,r18
  802688:	d8800515 	stw	r2,20(sp)
  80268c:	08018b40 	call	8018b4 <__mulsi3>
  802690:	a809883a 	mov	r4,r21
  802694:	a00b883a 	mov	r5,r20
  802698:	d8800415 	stw	r2,16(sp)
  80269c:	080185c0 	call	80185c <__umodsi3>
  8026a0:	1004943a 	slli	r2,r2,16
  8026a4:	8008d43a 	srli	r4,r16,16
  8026a8:	da000417 	ldw	r8,16(sp)
  8026ac:	d8c00217 	ldw	r3,8(sp)
  8026b0:	2084b03a 	or	r2,r4,r2
  8026b4:	d9c00517 	ldw	r7,20(sp)
  8026b8:	1200062e 	bgeu	r2,r8,8026d4 <__divdf3+0x54c>
  8026bc:	1585883a 	add	r2,r2,r22
  8026c0:	393fffc4 	addi	r4,r7,-1
  8026c4:	1580c536 	bltu	r2,r22,8029dc <__divdf3+0x854>
  8026c8:	1200c42e 	bgeu	r2,r8,8029dc <__divdf3+0x854>
  8026cc:	39ffff84 	addi	r7,r7,-2
  8026d0:	1585883a 	add	r2,r2,r22
  8026d4:	122bc83a 	sub	r21,r2,r8
  8026d8:	a00b883a 	mov	r5,r20
  8026dc:	a809883a 	mov	r4,r21
  8026e0:	d8c00215 	stw	r3,8(sp)
  8026e4:	d9c00515 	stw	r7,20(sp)
  8026e8:	08017f80 	call	8017f8 <__udivsi3>
  8026ec:	9009883a 	mov	r4,r18
  8026f0:	100b883a 	mov	r5,r2
  8026f4:	d8800415 	stw	r2,16(sp)
  8026f8:	08018b40 	call	8018b4 <__mulsi3>
  8026fc:	a809883a 	mov	r4,r21
  802700:	a00b883a 	mov	r5,r20
  802704:	1025883a 	mov	r18,r2
  802708:	080185c0 	call	80185c <__umodsi3>
  80270c:	1004943a 	slli	r2,r2,16
  802710:	813fffcc 	andi	r4,r16,65535
  802714:	d8c00217 	ldw	r3,8(sp)
  802718:	20a0b03a 	or	r16,r4,r2
  80271c:	d9c00517 	ldw	r7,20(sp)
  802720:	da000417 	ldw	r8,16(sp)
  802724:	8480062e 	bgeu	r16,r18,802740 <__divdf3+0x5b8>
  802728:	85a1883a 	add	r16,r16,r22
  80272c:	40bfffc4 	addi	r2,r8,-1
  802730:	8580ac36 	bltu	r16,r22,8029e4 <__divdf3+0x85c>
  802734:	8480ab2e 	bgeu	r16,r18,8029e4 <__divdf3+0x85c>
  802738:	423fff84 	addi	r8,r8,-2
  80273c:	85a1883a 	add	r16,r16,r22
  802740:	3804943a 	slli	r2,r7,16
  802744:	84a1c83a 	sub	r16,r16,r18
  802748:	e009883a 	mov	r4,fp
  80274c:	1228b03a 	or	r20,r2,r8
  802750:	a1ffffcc 	andi	r7,r20,65535
  802754:	a024d43a 	srli	r18,r20,16
  802758:	380b883a 	mov	r5,r7
  80275c:	d8c00215 	stw	r3,8(sp)
  802760:	d9c00515 	stw	r7,20(sp)
  802764:	08018b40 	call	8018b4 <__mulsi3>
  802768:	900b883a 	mov	r5,r18
  80276c:	e009883a 	mov	r4,fp
  802770:	102b883a 	mov	r21,r2
  802774:	08018b40 	call	8018b4 <__mulsi3>
  802778:	900b883a 	mov	r5,r18
  80277c:	b809883a 	mov	r4,r23
  802780:	1039883a 	mov	fp,r2
  802784:	08018b40 	call	8018b4 <__mulsi3>
  802788:	d9c00517 	ldw	r7,20(sp)
  80278c:	b80b883a 	mov	r5,r23
  802790:	1025883a 	mov	r18,r2
  802794:	3809883a 	mov	r4,r7
  802798:	08018b40 	call	8018b4 <__mulsi3>
  80279c:	a808d43a 	srli	r4,r21,16
  8027a0:	1705883a 	add	r2,r2,fp
  8027a4:	d8c00217 	ldw	r3,8(sp)
  8027a8:	2085883a 	add	r2,r4,r2
  8027ac:	1700022e 	bgeu	r2,fp,8027b8 <__divdf3+0x630>
  8027b0:	01000074 	movhi	r4,1
  8027b4:	9125883a 	add	r18,r18,r4
  8027b8:	1008d43a 	srli	r4,r2,16
  8027bc:	1004943a 	slli	r2,r2,16
  8027c0:	ad7fffcc 	andi	r21,r21,65535
  8027c4:	2489883a 	add	r4,r4,r18
  8027c8:	1545883a 	add	r2,r2,r21
  8027cc:	81003836 	bltu	r16,r4,8028b0 <__divdf3+0x728>
  8027d0:	81003626 	beq	r16,r4,8028ac <__divdf3+0x724>
  8027d4:	a5000054 	ori	r20,r20,1
  8027d8:	1880ffc4 	addi	r2,r3,1023
  8027dc:	00bf2e0e 	bge	zero,r2,802498 <__alt_data_end+0xff802498>
  8027e0:	a10001cc 	andi	r4,r20,7
  8027e4:	20000726 	beq	r4,zero,802804 <__divdf3+0x67c>
  8027e8:	a10003cc 	andi	r4,r20,15
  8027ec:	01400104 	movi	r5,4
  8027f0:	21400426 	beq	r4,r5,802804 <__divdf3+0x67c>
  8027f4:	a149883a 	add	r4,r20,r5
  8027f8:	2529803a 	cmpltu	r20,r4,r20
  8027fc:	8d23883a 	add	r17,r17,r20
  802800:	2029883a 	mov	r20,r4
  802804:	8900402c 	andhi	r4,r17,256
  802808:	20000426 	beq	r4,zero,80281c <__divdf3+0x694>
  80280c:	18810004 	addi	r2,r3,1024
  802810:	00ffc034 	movhi	r3,65280
  802814:	18ffffc4 	addi	r3,r3,-1
  802818:	88e2703a 	and	r17,r17,r3
  80281c:	00c1ff84 	movi	r3,2046
  802820:	18beb416 	blt	r3,r2,8022f4 <__alt_data_end+0xff8022f4>
  802824:	a028d0fa 	srli	r20,r20,3
  802828:	882a977a 	slli	r21,r17,29
  80282c:	8820927a 	slli	r16,r17,9
  802830:	1081ffcc 	andi	r2,r2,2047
  802834:	ad2ab03a 	or	r21,r21,r20
  802838:	8020d33a 	srli	r16,r16,12
  80283c:	9900004c 	andi	r4,r19,1
  802840:	003eb006 	br	802304 <__alt_data_end+0xff802304>
  802844:	8080022c 	andhi	r2,r16,8
  802848:	10001226 	beq	r2,zero,802894 <__divdf3+0x70c>
  80284c:	8880022c 	andhi	r2,r17,8
  802850:	1000101e 	bne	r2,zero,802894 <__divdf3+0x70c>
  802854:	00800434 	movhi	r2,16
  802858:	8c000234 	orhi	r16,r17,8
  80285c:	10bfffc4 	addi	r2,r2,-1
  802860:	b809883a 	mov	r4,r23
  802864:	80a0703a 	and	r16,r16,r2
  802868:	a02b883a 	mov	r21,r20
  80286c:	003f0806 	br	802490 <__alt_data_end+0xff802490>
  802870:	008000c4 	movi	r2,3
  802874:	3880b126 	beq	r7,r2,802b3c <__divdf3+0x9b4>
  802878:	00800044 	movi	r2,1
  80287c:	38805b1e 	bne	r7,r2,8029ec <__divdf3+0x864>
  802880:	e009883a 	mov	r4,fp
  802884:	0005883a 	mov	r2,zero
  802888:	0021883a 	mov	r16,zero
  80288c:	002b883a 	mov	r21,zero
  802890:	003e9c06 	br	802304 <__alt_data_end+0xff802304>
  802894:	00800434 	movhi	r2,16
  802898:	84000234 	orhi	r16,r16,8
  80289c:	10bfffc4 	addi	r2,r2,-1
  8028a0:	b009883a 	mov	r4,r22
  8028a4:	80a0703a 	and	r16,r16,r2
  8028a8:	003ef906 	br	802490 <__alt_data_end+0xff802490>
  8028ac:	103fca26 	beq	r2,zero,8027d8 <__alt_data_end+0xff8027d8>
  8028b0:	b421883a 	add	r16,r22,r16
  8028b4:	a17fffc4 	addi	r5,r20,-1
  8028b8:	8580422e 	bgeu	r16,r22,8029c4 <__divdf3+0x83c>
  8028bc:	2829883a 	mov	r20,r5
  8028c0:	813fc41e 	bne	r16,r4,8027d4 <__alt_data_end+0xff8027d4>
  8028c4:	d9800017 	ldw	r6,0(sp)
  8028c8:	30bfc21e 	bne	r6,r2,8027d4 <__alt_data_end+0xff8027d4>
  8028cc:	003fc206 	br	8027d8 <__alt_data_end+0xff8027d8>
  8028d0:	143ff604 	addi	r16,r2,-40
  8028d4:	8c20983a 	sll	r16,r17,r16
  8028d8:	002b883a 	mov	r21,zero
  8028dc:	003eb406 	br	8023b0 <__alt_data_end+0xff8023b0>
  8028e0:	d9800215 	stw	r6,8(sp)
  8028e4:	d9c00515 	stw	r7,20(sp)
  8028e8:	da000415 	stw	r8,16(sp)
  8028ec:	08034440 	call	803444 <__clzsi2>
  8028f0:	10800804 	addi	r2,r2,32
  8028f4:	da000417 	ldw	r8,16(sp)
  8028f8:	d9c00517 	ldw	r7,20(sp)
  8028fc:	d9800217 	ldw	r6,8(sp)
  802900:	003ea106 	br	802388 <__alt_data_end+0xff802388>
  802904:	147ff604 	addi	r17,r2,-40
  802908:	3462983a 	sll	r17,r6,r17
  80290c:	0029883a 	mov	r20,zero
  802910:	003ec906 	br	802438 <__alt_data_end+0xff802438>
  802914:	3009883a 	mov	r4,r6
  802918:	d9400115 	stw	r5,4(sp)
  80291c:	d9800215 	stw	r6,8(sp)
  802920:	da000415 	stw	r8,16(sp)
  802924:	da400315 	stw	r9,12(sp)
  802928:	08034440 	call	803444 <__clzsi2>
  80292c:	10800804 	addi	r2,r2,32
  802930:	da400317 	ldw	r9,12(sp)
  802934:	da000417 	ldw	r8,16(sp)
  802938:	d9800217 	ldw	r6,8(sp)
  80293c:	d9400117 	ldw	r5,4(sp)
  802940:	003eb306 	br	802410 <__alt_data_end+0xff802410>
  802944:	d9800017 	ldw	r6,0(sp)
  802948:	a9ab883a 	add	r21,r21,r6
  80294c:	a98b803a 	cmpltu	r5,r21,r6
  802950:	2d8b883a 	add	r5,r5,r22
  802954:	2a11883a 	add	r8,r5,r8
  802958:	897fffc4 	addi	r5,r17,-1
  80295c:	b2000c2e 	bgeu	r22,r8,802990 <__divdf3+0x808>
  802960:	41003f36 	bltu	r8,r4,802a60 <__divdf3+0x8d8>
  802964:	22006c26 	beq	r4,r8,802b18 <__divdf3+0x990>
  802968:	4109c83a 	sub	r4,r8,r4
  80296c:	2823883a 	mov	r17,r5
  802970:	003f3b06 	br	802660 <__alt_data_end+0xff802660>
  802974:	ad3ed336 	bltu	r21,r20,8024c4 <__alt_data_end+0xff8024c4>
  802978:	a804d07a 	srli	r2,r21,1
  80297c:	802e97fa 	slli	r23,r16,31
  802980:	a82a97fa 	slli	r21,r21,31
  802984:	8020d07a 	srli	r16,r16,1
  802988:	b8aeb03a 	or	r23,r23,r2
  80298c:	003ed006 	br	8024d0 <__alt_data_end+0xff8024d0>
  802990:	b23ff51e 	bne	r22,r8,802968 <__alt_data_end+0xff802968>
  802994:	d9800017 	ldw	r6,0(sp)
  802998:	a9bff12e 	bgeu	r21,r6,802960 <__alt_data_end+0xff802960>
  80299c:	b109c83a 	sub	r4,r22,r4
  8029a0:	2823883a 	mov	r17,r5
  8029a4:	003f2e06 	br	802660 <__alt_data_end+0xff802660>
  8029a8:	2021883a 	mov	r16,r4
  8029ac:	003eff06 	br	8025ac <__alt_data_end+0xff8025ac>
  8029b0:	2023883a 	mov	r17,r4
  8029b4:	003ee406 	br	802548 <__alt_data_end+0xff802548>
  8029b8:	a8bfe236 	bltu	r21,r2,802944 <__alt_data_end+0xff802944>
  8029bc:	0009883a 	mov	r4,zero
  8029c0:	003f2706 	br	802660 <__alt_data_end+0xff802660>
  8029c4:	81002d36 	bltu	r16,r4,802a7c <__divdf3+0x8f4>
  8029c8:	24005626 	beq	r4,r16,802b24 <__divdf3+0x99c>
  8029cc:	2829883a 	mov	r20,r5
  8029d0:	003f8006 	br	8027d4 <__alt_data_end+0xff8027d4>
  8029d4:	053fffc4 	movi	r20,-1
  8029d8:	003f7f06 	br	8027d8 <__alt_data_end+0xff8027d8>
  8029dc:	200f883a 	mov	r7,r4
  8029e0:	003f3c06 	br	8026d4 <__alt_data_end+0xff8026d4>
  8029e4:	1011883a 	mov	r8,r2
  8029e8:	003f5506 	br	802740 <__alt_data_end+0xff802740>
  8029ec:	e027883a 	mov	r19,fp
  8029f0:	003f7906 	br	8027d8 <__alt_data_end+0xff8027d8>
  8029f4:	010007c4 	movi	r4,31
  8029f8:	20c02816 	blt	r4,r3,802a9c <__divdf3+0x914>
  8029fc:	00800804 	movi	r2,32
  802a00:	10c5c83a 	sub	r2,r2,r3
  802a04:	888a983a 	sll	r5,r17,r2
  802a08:	a0c8d83a 	srl	r4,r20,r3
  802a0c:	a084983a 	sll	r2,r20,r2
  802a10:	88e2d83a 	srl	r17,r17,r3
  802a14:	2906b03a 	or	r3,r5,r4
  802a18:	1004c03a 	cmpne	r2,r2,zero
  802a1c:	1886b03a 	or	r3,r3,r2
  802a20:	188001cc 	andi	r2,r3,7
  802a24:	10000726 	beq	r2,zero,802a44 <__divdf3+0x8bc>
  802a28:	188003cc 	andi	r2,r3,15
  802a2c:	01000104 	movi	r4,4
  802a30:	11000426 	beq	r2,r4,802a44 <__divdf3+0x8bc>
  802a34:	1805883a 	mov	r2,r3
  802a38:	10c00104 	addi	r3,r2,4
  802a3c:	1885803a 	cmpltu	r2,r3,r2
  802a40:	88a3883a 	add	r17,r17,r2
  802a44:	8880202c 	andhi	r2,r17,128
  802a48:	10002926 	beq	r2,zero,802af0 <__divdf3+0x968>
  802a4c:	9900004c 	andi	r4,r19,1
  802a50:	00800044 	movi	r2,1
  802a54:	0021883a 	mov	r16,zero
  802a58:	002b883a 	mov	r21,zero
  802a5c:	003e2906 	br	802304 <__alt_data_end+0xff802304>
  802a60:	d9800017 	ldw	r6,0(sp)
  802a64:	8c7fff84 	addi	r17,r17,-2
  802a68:	a9ab883a 	add	r21,r21,r6
  802a6c:	a98b803a 	cmpltu	r5,r21,r6
  802a70:	2d8b883a 	add	r5,r5,r22
  802a74:	2a11883a 	add	r8,r5,r8
  802a78:	003ef806 	br	80265c <__alt_data_end+0xff80265c>
  802a7c:	d9800017 	ldw	r6,0(sp)
  802a80:	318f883a 	add	r7,r6,r6
  802a84:	398b803a 	cmpltu	r5,r7,r6
  802a88:	2d8d883a 	add	r6,r5,r22
  802a8c:	81a1883a 	add	r16,r16,r6
  802a90:	a17fff84 	addi	r5,r20,-2
  802a94:	d9c00015 	stw	r7,0(sp)
  802a98:	003f8806 	br	8028bc <__alt_data_end+0xff8028bc>
  802a9c:	013ff844 	movi	r4,-31
  802aa0:	2085c83a 	sub	r2,r4,r2
  802aa4:	8888d83a 	srl	r4,r17,r2
  802aa8:	00800804 	movi	r2,32
  802aac:	18802126 	beq	r3,r2,802b34 <__divdf3+0x9ac>
  802ab0:	04001004 	movi	r16,64
  802ab4:	80c7c83a 	sub	r3,r16,r3
  802ab8:	88e0983a 	sll	r16,r17,r3
  802abc:	8504b03a 	or	r2,r16,r20
  802ac0:	1004c03a 	cmpne	r2,r2,zero
  802ac4:	2084b03a 	or	r2,r4,r2
  802ac8:	144001cc 	andi	r17,r2,7
  802acc:	88000d1e 	bne	r17,zero,802b04 <__divdf3+0x97c>
  802ad0:	0021883a 	mov	r16,zero
  802ad4:	102ad0fa 	srli	r21,r2,3
  802ad8:	9900004c 	andi	r4,r19,1
  802adc:	0005883a 	mov	r2,zero
  802ae0:	ac6ab03a 	or	r21,r21,r17
  802ae4:	003e0706 	br	802304 <__alt_data_end+0xff802304>
  802ae8:	1007883a 	mov	r3,r2
  802aec:	0023883a 	mov	r17,zero
  802af0:	8820927a 	slli	r16,r17,9
  802af4:	1805883a 	mov	r2,r3
  802af8:	8822977a 	slli	r17,r17,29
  802afc:	8020d33a 	srli	r16,r16,12
  802b00:	003ff406 	br	802ad4 <__alt_data_end+0xff802ad4>
  802b04:	10c003cc 	andi	r3,r2,15
  802b08:	01000104 	movi	r4,4
  802b0c:	193ff626 	beq	r3,r4,802ae8 <__alt_data_end+0xff802ae8>
  802b10:	0023883a 	mov	r17,zero
  802b14:	003fc806 	br	802a38 <__alt_data_end+0xff802a38>
  802b18:	a8bfd136 	bltu	r21,r2,802a60 <__alt_data_end+0xff802a60>
  802b1c:	2823883a 	mov	r17,r5
  802b20:	003fa606 	br	8029bc <__alt_data_end+0xff8029bc>
  802b24:	d9800017 	ldw	r6,0(sp)
  802b28:	30bfd436 	bltu	r6,r2,802a7c <__alt_data_end+0xff802a7c>
  802b2c:	2829883a 	mov	r20,r5
  802b30:	003f6406 	br	8028c4 <__alt_data_end+0xff8028c4>
  802b34:	0021883a 	mov	r16,zero
  802b38:	003fe006 	br	802abc <__alt_data_end+0xff802abc>
  802b3c:	00800434 	movhi	r2,16
  802b40:	8c000234 	orhi	r16,r17,8
  802b44:	10bfffc4 	addi	r2,r2,-1
  802b48:	e009883a 	mov	r4,fp
  802b4c:	80a0703a 	and	r16,r16,r2
  802b50:	a02b883a 	mov	r21,r20
  802b54:	003e4e06 	br	802490 <__alt_data_end+0xff802490>

00802b58 <__muldf3>:
  802b58:	deffee04 	addi	sp,sp,-72
  802b5c:	dd000c15 	stw	r20,48(sp)
  802b60:	2828d53a 	srli	r20,r5,20
  802b64:	ddc00f15 	stw	r23,60(sp)
  802b68:	282ed7fa 	srli	r23,r5,31
  802b6c:	dc000815 	stw	r16,32(sp)
  802b70:	04000434 	movhi	r16,16
  802b74:	dcc00b15 	stw	r19,44(sp)
  802b78:	843fffc4 	addi	r16,r16,-1
  802b7c:	dfc01115 	stw	ra,68(sp)
  802b80:	df001015 	stw	fp,64(sp)
  802b84:	dd800e15 	stw	r22,56(sp)
  802b88:	dd400d15 	stw	r21,52(sp)
  802b8c:	dc800a15 	stw	r18,40(sp)
  802b90:	dc400915 	stw	r17,36(sp)
  802b94:	a501ffcc 	andi	r20,r20,2047
  802b98:	2c20703a 	and	r16,r5,r16
  802b9c:	b827883a 	mov	r19,r23
  802ba0:	ba403fcc 	andi	r9,r23,255
  802ba4:	a0006026 	beq	r20,zero,802d28 <__muldf3+0x1d0>
  802ba8:	0081ffc4 	movi	r2,2047
  802bac:	202d883a 	mov	r22,r4
  802bb0:	a0803626 	beq	r20,r2,802c8c <__muldf3+0x134>
  802bb4:	84000434 	orhi	r16,r16,16
  802bb8:	200ad77a 	srli	r5,r4,29
  802bbc:	800490fa 	slli	r2,r16,3
  802bc0:	202c90fa 	slli	r22,r4,3
  802bc4:	a53f0044 	addi	r20,r20,-1023
  802bc8:	28a0b03a 	or	r16,r5,r2
  802bcc:	002b883a 	mov	r21,zero
  802bd0:	000b883a 	mov	r5,zero
  802bd4:	3804d53a 	srli	r2,r7,20
  802bd8:	3838d7fa 	srli	fp,r7,31
  802bdc:	04400434 	movhi	r17,16
  802be0:	8c7fffc4 	addi	r17,r17,-1
  802be4:	1081ffcc 	andi	r2,r2,2047
  802be8:	3025883a 	mov	r18,r6
  802bec:	3c62703a 	and	r17,r7,r17
  802bf0:	e2803fcc 	andi	r10,fp,255
  802bf4:	10006d26 	beq	r2,zero,802dac <__muldf3+0x254>
  802bf8:	00c1ffc4 	movi	r3,2047
  802bfc:	10c06526 	beq	r2,r3,802d94 <__muldf3+0x23c>
  802c00:	8c400434 	orhi	r17,r17,16
  802c04:	300ed77a 	srli	r7,r6,29
  802c08:	880690fa 	slli	r3,r17,3
  802c0c:	302490fa 	slli	r18,r6,3
  802c10:	10bf0044 	addi	r2,r2,-1023
  802c14:	38e2b03a 	or	r17,r7,r3
  802c18:	000f883a 	mov	r7,zero
  802c1c:	a087883a 	add	r3,r20,r2
  802c20:	010003c4 	movi	r4,15
  802c24:	3d44b03a 	or	r2,r7,r21
  802c28:	e5ccf03a 	xor	r6,fp,r23
  802c2c:	1a000044 	addi	r8,r3,1
  802c30:	20809b36 	bltu	r4,r2,802ea0 <__muldf3+0x348>
  802c34:	100490ba 	slli	r2,r2,2
  802c38:	01002034 	movhi	r4,128
  802c3c:	210b1304 	addi	r4,r4,11340
  802c40:	1105883a 	add	r2,r2,r4
  802c44:	10800017 	ldw	r2,0(r2)
  802c48:	1000683a 	jmp	r2
  802c4c:	00802ea0 	cmpeqi	r2,zero,186
  802c50:	00802cac 	andhi	r2,zero,178
  802c54:	00802cac 	andhi	r2,zero,178
  802c58:	00802ca8 	cmpgeui	r2,zero,178
  802c5c:	00802e7c 	xorhi	r2,zero,185
  802c60:	00802e7c 	xorhi	r2,zero,185
  802c64:	00802e64 	muli	r2,zero,185
  802c68:	00802ca8 	cmpgeui	r2,zero,178
  802c6c:	00802e7c 	xorhi	r2,zero,185
  802c70:	00802e64 	muli	r2,zero,185
  802c74:	00802e7c 	xorhi	r2,zero,185
  802c78:	00802ca8 	cmpgeui	r2,zero,178
  802c7c:	00802e8c 	andi	r2,zero,186
  802c80:	00802e8c 	andi	r2,zero,186
  802c84:	00802e8c 	andi	r2,zero,186
  802c88:	008031ec 	andhi	r2,zero,199
  802c8c:	2404b03a 	or	r2,r4,r16
  802c90:	1000711e 	bne	r2,zero,802e58 <__muldf3+0x300>
  802c94:	05400204 	movi	r21,8
  802c98:	0021883a 	mov	r16,zero
  802c9c:	002d883a 	mov	r22,zero
  802ca0:	01400084 	movi	r5,2
  802ca4:	003fcb06 	br	802bd4 <__alt_data_end+0xff802bd4>
  802ca8:	500d883a 	mov	r6,r10
  802cac:	00800084 	movi	r2,2
  802cb0:	38805926 	beq	r7,r2,802e18 <__muldf3+0x2c0>
  802cb4:	008000c4 	movi	r2,3
  802cb8:	3881bb26 	beq	r7,r2,8033a8 <__muldf3+0x850>
  802cbc:	00800044 	movi	r2,1
  802cc0:	3881961e 	bne	r7,r2,80331c <__muldf3+0x7c4>
  802cc4:	3027883a 	mov	r19,r6
  802cc8:	0005883a 	mov	r2,zero
  802ccc:	0021883a 	mov	r16,zero
  802cd0:	002d883a 	mov	r22,zero
  802cd4:	1004953a 	slli	r2,r2,20
  802cd8:	98c03fcc 	andi	r3,r19,255
  802cdc:	04400434 	movhi	r17,16
  802ce0:	8c7fffc4 	addi	r17,r17,-1
  802ce4:	180697fa 	slli	r3,r3,31
  802ce8:	8460703a 	and	r16,r16,r17
  802cec:	80a0b03a 	or	r16,r16,r2
  802cf0:	80c6b03a 	or	r3,r16,r3
  802cf4:	b005883a 	mov	r2,r22
  802cf8:	dfc01117 	ldw	ra,68(sp)
  802cfc:	df001017 	ldw	fp,64(sp)
  802d00:	ddc00f17 	ldw	r23,60(sp)
  802d04:	dd800e17 	ldw	r22,56(sp)
  802d08:	dd400d17 	ldw	r21,52(sp)
  802d0c:	dd000c17 	ldw	r20,48(sp)
  802d10:	dcc00b17 	ldw	r19,44(sp)
  802d14:	dc800a17 	ldw	r18,40(sp)
  802d18:	dc400917 	ldw	r17,36(sp)
  802d1c:	dc000817 	ldw	r16,32(sp)
  802d20:	dec01204 	addi	sp,sp,72
  802d24:	f800283a 	ret
  802d28:	2404b03a 	or	r2,r4,r16
  802d2c:	202b883a 	mov	r21,r4
  802d30:	10004426 	beq	r2,zero,802e44 <__muldf3+0x2ec>
  802d34:	80015126 	beq	r16,zero,80327c <__muldf3+0x724>
  802d38:	8009883a 	mov	r4,r16
  802d3c:	d9800715 	stw	r6,28(sp)
  802d40:	d9c00215 	stw	r7,8(sp)
  802d44:	da400415 	stw	r9,16(sp)
  802d48:	08034440 	call	803444 <__clzsi2>
  802d4c:	d9800717 	ldw	r6,28(sp)
  802d50:	d9c00217 	ldw	r7,8(sp)
  802d54:	da400417 	ldw	r9,16(sp)
  802d58:	113ffd44 	addi	r4,r2,-11
  802d5c:	00c00704 	movi	r3,28
  802d60:	19014216 	blt	r3,r4,80326c <__muldf3+0x714>
  802d64:	00c00744 	movi	r3,29
  802d68:	15bffe04 	addi	r22,r2,-8
  802d6c:	1907c83a 	sub	r3,r3,r4
  802d70:	85a0983a 	sll	r16,r16,r22
  802d74:	a8c6d83a 	srl	r3,r21,r3
  802d78:	adac983a 	sll	r22,r21,r22
  802d7c:	1c20b03a 	or	r16,r3,r16
  802d80:	1080fcc4 	addi	r2,r2,1011
  802d84:	00a9c83a 	sub	r20,zero,r2
  802d88:	002b883a 	mov	r21,zero
  802d8c:	000b883a 	mov	r5,zero
  802d90:	003f9006 	br	802bd4 <__alt_data_end+0xff802bd4>
  802d94:	3446b03a 	or	r3,r6,r17
  802d98:	1800281e 	bne	r3,zero,802e3c <__muldf3+0x2e4>
  802d9c:	0023883a 	mov	r17,zero
  802da0:	0025883a 	mov	r18,zero
  802da4:	01c00084 	movi	r7,2
  802da8:	003f9c06 	br	802c1c <__alt_data_end+0xff802c1c>
  802dac:	3446b03a 	or	r3,r6,r17
  802db0:	18001e26 	beq	r3,zero,802e2c <__muldf3+0x2d4>
  802db4:	88012126 	beq	r17,zero,80323c <__muldf3+0x6e4>
  802db8:	8809883a 	mov	r4,r17
  802dbc:	d9400215 	stw	r5,8(sp)
  802dc0:	d9800715 	stw	r6,28(sp)
  802dc4:	da400415 	stw	r9,16(sp)
  802dc8:	da800315 	stw	r10,12(sp)
  802dcc:	08034440 	call	803444 <__clzsi2>
  802dd0:	d9400217 	ldw	r5,8(sp)
  802dd4:	d9800717 	ldw	r6,28(sp)
  802dd8:	da400417 	ldw	r9,16(sp)
  802ddc:	da800317 	ldw	r10,12(sp)
  802de0:	113ffd44 	addi	r4,r2,-11
  802de4:	00c00704 	movi	r3,28
  802de8:	19011016 	blt	r3,r4,80322c <__muldf3+0x6d4>
  802dec:	00c00744 	movi	r3,29
  802df0:	14bffe04 	addi	r18,r2,-8
  802df4:	1907c83a 	sub	r3,r3,r4
  802df8:	8ca2983a 	sll	r17,r17,r18
  802dfc:	30c6d83a 	srl	r3,r6,r3
  802e00:	34a4983a 	sll	r18,r6,r18
  802e04:	1c62b03a 	or	r17,r3,r17
  802e08:	1080fcc4 	addi	r2,r2,1011
  802e0c:	0085c83a 	sub	r2,zero,r2
  802e10:	000f883a 	mov	r7,zero
  802e14:	003f8106 	br	802c1c <__alt_data_end+0xff802c1c>
  802e18:	3027883a 	mov	r19,r6
  802e1c:	0081ffc4 	movi	r2,2047
  802e20:	0021883a 	mov	r16,zero
  802e24:	002d883a 	mov	r22,zero
  802e28:	003faa06 	br	802cd4 <__alt_data_end+0xff802cd4>
  802e2c:	0023883a 	mov	r17,zero
  802e30:	0025883a 	mov	r18,zero
  802e34:	01c00044 	movi	r7,1
  802e38:	003f7806 	br	802c1c <__alt_data_end+0xff802c1c>
  802e3c:	01c000c4 	movi	r7,3
  802e40:	003f7606 	br	802c1c <__alt_data_end+0xff802c1c>
  802e44:	05400104 	movi	r21,4
  802e48:	0021883a 	mov	r16,zero
  802e4c:	002d883a 	mov	r22,zero
  802e50:	01400044 	movi	r5,1
  802e54:	003f5f06 	br	802bd4 <__alt_data_end+0xff802bd4>
  802e58:	05400304 	movi	r21,12
  802e5c:	014000c4 	movi	r5,3
  802e60:	003f5c06 	br	802bd4 <__alt_data_end+0xff802bd4>
  802e64:	04000434 	movhi	r16,16
  802e68:	0027883a 	mov	r19,zero
  802e6c:	843fffc4 	addi	r16,r16,-1
  802e70:	05bfffc4 	movi	r22,-1
  802e74:	0081ffc4 	movi	r2,2047
  802e78:	003f9606 	br	802cd4 <__alt_data_end+0xff802cd4>
  802e7c:	8023883a 	mov	r17,r16
  802e80:	b025883a 	mov	r18,r22
  802e84:	280f883a 	mov	r7,r5
  802e88:	003f8806 	br	802cac <__alt_data_end+0xff802cac>
  802e8c:	8023883a 	mov	r17,r16
  802e90:	b025883a 	mov	r18,r22
  802e94:	480d883a 	mov	r6,r9
  802e98:	280f883a 	mov	r7,r5
  802e9c:	003f8306 	br	802cac <__alt_data_end+0xff802cac>
  802ea0:	b026d43a 	srli	r19,r22,16
  802ea4:	902ed43a 	srli	r23,r18,16
  802ea8:	b5bfffcc 	andi	r22,r22,65535
  802eac:	94bfffcc 	andi	r18,r18,65535
  802eb0:	b00b883a 	mov	r5,r22
  802eb4:	9009883a 	mov	r4,r18
  802eb8:	d8c00515 	stw	r3,20(sp)
  802ebc:	d9800715 	stw	r6,28(sp)
  802ec0:	da000615 	stw	r8,24(sp)
  802ec4:	08018b40 	call	8018b4 <__mulsi3>
  802ec8:	980b883a 	mov	r5,r19
  802ecc:	9009883a 	mov	r4,r18
  802ed0:	1029883a 	mov	r20,r2
  802ed4:	08018b40 	call	8018b4 <__mulsi3>
  802ed8:	b80b883a 	mov	r5,r23
  802edc:	9809883a 	mov	r4,r19
  802ee0:	102b883a 	mov	r21,r2
  802ee4:	08018b40 	call	8018b4 <__mulsi3>
  802ee8:	b809883a 	mov	r4,r23
  802eec:	b00b883a 	mov	r5,r22
  802ef0:	1039883a 	mov	fp,r2
  802ef4:	08018b40 	call	8018b4 <__mulsi3>
  802ef8:	a008d43a 	srli	r4,r20,16
  802efc:	1545883a 	add	r2,r2,r21
  802f00:	d8c00517 	ldw	r3,20(sp)
  802f04:	2085883a 	add	r2,r4,r2
  802f08:	d9800717 	ldw	r6,28(sp)
  802f0c:	da000617 	ldw	r8,24(sp)
  802f10:	1540022e 	bgeu	r2,r21,802f1c <__muldf3+0x3c4>
  802f14:	01000074 	movhi	r4,1
  802f18:	e139883a 	add	fp,fp,r4
  802f1c:	100e943a 	slli	r7,r2,16
  802f20:	1004d43a 	srli	r2,r2,16
  802f24:	882ad43a 	srli	r21,r17,16
  802f28:	a53fffcc 	andi	r20,r20,65535
  802f2c:	8c7fffcc 	andi	r17,r17,65535
  802f30:	3d29883a 	add	r20,r7,r20
  802f34:	b00b883a 	mov	r5,r22
  802f38:	8809883a 	mov	r4,r17
  802f3c:	d8c00515 	stw	r3,20(sp)
  802f40:	d9800715 	stw	r6,28(sp)
  802f44:	da000615 	stw	r8,24(sp)
  802f48:	dd000115 	stw	r20,4(sp)
  802f4c:	d8800015 	stw	r2,0(sp)
  802f50:	08018b40 	call	8018b4 <__mulsi3>
  802f54:	980b883a 	mov	r5,r19
  802f58:	8809883a 	mov	r4,r17
  802f5c:	d8800215 	stw	r2,8(sp)
  802f60:	08018b40 	call	8018b4 <__mulsi3>
  802f64:	9809883a 	mov	r4,r19
  802f68:	a80b883a 	mov	r5,r21
  802f6c:	1029883a 	mov	r20,r2
  802f70:	08018b40 	call	8018b4 <__mulsi3>
  802f74:	b00b883a 	mov	r5,r22
  802f78:	a809883a 	mov	r4,r21
  802f7c:	d8800415 	stw	r2,16(sp)
  802f80:	08018b40 	call	8018b4 <__mulsi3>
  802f84:	d9c00217 	ldw	r7,8(sp)
  802f88:	1505883a 	add	r2,r2,r20
  802f8c:	d8c00517 	ldw	r3,20(sp)
  802f90:	3826d43a 	srli	r19,r7,16
  802f94:	d9800717 	ldw	r6,28(sp)
  802f98:	da000617 	ldw	r8,24(sp)
  802f9c:	9885883a 	add	r2,r19,r2
  802fa0:	da400417 	ldw	r9,16(sp)
  802fa4:	1500022e 	bgeu	r2,r20,802fb0 <__muldf3+0x458>
  802fa8:	01000074 	movhi	r4,1
  802fac:	4913883a 	add	r9,r9,r4
  802fb0:	1028d43a 	srli	r20,r2,16
  802fb4:	1004943a 	slli	r2,r2,16
  802fb8:	802cd43a 	srli	r22,r16,16
  802fbc:	843fffcc 	andi	r16,r16,65535
  802fc0:	3cffffcc 	andi	r19,r7,65535
  802fc4:	9009883a 	mov	r4,r18
  802fc8:	800b883a 	mov	r5,r16
  802fcc:	a269883a 	add	r20,r20,r9
  802fd0:	d8c00515 	stw	r3,20(sp)
  802fd4:	d9800715 	stw	r6,28(sp)
  802fd8:	da000615 	stw	r8,24(sp)
  802fdc:	14e7883a 	add	r19,r2,r19
  802fe0:	08018b40 	call	8018b4 <__mulsi3>
  802fe4:	9009883a 	mov	r4,r18
  802fe8:	b00b883a 	mov	r5,r22
  802fec:	d8800315 	stw	r2,12(sp)
  802ff0:	08018b40 	call	8018b4 <__mulsi3>
  802ff4:	b809883a 	mov	r4,r23
  802ff8:	b00b883a 	mov	r5,r22
  802ffc:	d8800215 	stw	r2,8(sp)
  803000:	08018b40 	call	8018b4 <__mulsi3>
  803004:	b80b883a 	mov	r5,r23
  803008:	8009883a 	mov	r4,r16
  80300c:	d8800415 	stw	r2,16(sp)
  803010:	08018b40 	call	8018b4 <__mulsi3>
  803014:	da800317 	ldw	r10,12(sp)
  803018:	d9c00217 	ldw	r7,8(sp)
  80301c:	d9000017 	ldw	r4,0(sp)
  803020:	502ed43a 	srli	r23,r10,16
  803024:	11c5883a 	add	r2,r2,r7
  803028:	24e5883a 	add	r18,r4,r19
  80302c:	b885883a 	add	r2,r23,r2
  803030:	d8c00517 	ldw	r3,20(sp)
  803034:	d9800717 	ldw	r6,28(sp)
  803038:	da000617 	ldw	r8,24(sp)
  80303c:	da400417 	ldw	r9,16(sp)
  803040:	11c0022e 	bgeu	r2,r7,80304c <__muldf3+0x4f4>
  803044:	01000074 	movhi	r4,1
  803048:	4913883a 	add	r9,r9,r4
  80304c:	100ed43a 	srli	r7,r2,16
  803050:	1004943a 	slli	r2,r2,16
  803054:	55ffffcc 	andi	r23,r10,65535
  803058:	3a53883a 	add	r9,r7,r9
  80305c:	8809883a 	mov	r4,r17
  803060:	800b883a 	mov	r5,r16
  803064:	d8c00515 	stw	r3,20(sp)
  803068:	d9800715 	stw	r6,28(sp)
  80306c:	da000615 	stw	r8,24(sp)
  803070:	da400415 	stw	r9,16(sp)
  803074:	15ef883a 	add	r23,r2,r23
  803078:	08018b40 	call	8018b4 <__mulsi3>
  80307c:	8809883a 	mov	r4,r17
  803080:	b00b883a 	mov	r5,r22
  803084:	d8800215 	stw	r2,8(sp)
  803088:	08018b40 	call	8018b4 <__mulsi3>
  80308c:	b00b883a 	mov	r5,r22
  803090:	a809883a 	mov	r4,r21
  803094:	d8800315 	stw	r2,12(sp)
  803098:	08018b40 	call	8018b4 <__mulsi3>
  80309c:	8009883a 	mov	r4,r16
  8030a0:	a80b883a 	mov	r5,r21
  8030a4:	1023883a 	mov	r17,r2
  8030a8:	08018b40 	call	8018b4 <__mulsi3>
  8030ac:	d9c00217 	ldw	r7,8(sp)
  8030b0:	da800317 	ldw	r10,12(sp)
  8030b4:	d8c00517 	ldw	r3,20(sp)
  8030b8:	3808d43a 	srli	r4,r7,16
  8030bc:	1285883a 	add	r2,r2,r10
  8030c0:	d9800717 	ldw	r6,28(sp)
  8030c4:	2085883a 	add	r2,r4,r2
  8030c8:	da000617 	ldw	r8,24(sp)
  8030cc:	da400417 	ldw	r9,16(sp)
  8030d0:	1280022e 	bgeu	r2,r10,8030dc <__muldf3+0x584>
  8030d4:	01000074 	movhi	r4,1
  8030d8:	8923883a 	add	r17,r17,r4
  8030dc:	1008943a 	slli	r4,r2,16
  8030e0:	39ffffcc 	andi	r7,r7,65535
  8030e4:	e4b9883a 	add	fp,fp,r18
  8030e8:	21cf883a 	add	r7,r4,r7
  8030ec:	e4e7803a 	cmpltu	r19,fp,r19
  8030f0:	3d0f883a 	add	r7,r7,r20
  8030f4:	bf39883a 	add	fp,r23,fp
  8030f8:	99c9883a 	add	r4,r19,r7
  8030fc:	e5ef803a 	cmpltu	r23,fp,r23
  803100:	490b883a 	add	r5,r9,r4
  803104:	1004d43a 	srli	r2,r2,16
  803108:	b965883a 	add	r18,r23,r5
  80310c:	24c9803a 	cmpltu	r4,r4,r19
  803110:	3d29803a 	cmpltu	r20,r7,r20
  803114:	a128b03a 	or	r20,r20,r4
  803118:	95ef803a 	cmpltu	r23,r18,r23
  80311c:	2a53803a 	cmpltu	r9,r5,r9
  803120:	a0a9883a 	add	r20,r20,r2
  803124:	4deeb03a 	or	r23,r9,r23
  803128:	a5ef883a 	add	r23,r20,r23
  80312c:	bc63883a 	add	r17,r23,r17
  803130:	e004927a 	slli	r2,fp,9
  803134:	d9000117 	ldw	r4,4(sp)
  803138:	882e927a 	slli	r23,r17,9
  80313c:	9022d5fa 	srli	r17,r18,23
  803140:	e038d5fa 	srli	fp,fp,23
  803144:	1104b03a 	or	r2,r2,r4
  803148:	9024927a 	slli	r18,r18,9
  80314c:	1004c03a 	cmpne	r2,r2,zero
  803150:	bc62b03a 	or	r17,r23,r17
  803154:	1738b03a 	or	fp,r2,fp
  803158:	8880402c 	andhi	r2,r17,256
  80315c:	e4a4b03a 	or	r18,fp,r18
  803160:	10000726 	beq	r2,zero,803180 <__muldf3+0x628>
  803164:	9006d07a 	srli	r3,r18,1
  803168:	880497fa 	slli	r2,r17,31
  80316c:	9480004c 	andi	r18,r18,1
  803170:	8822d07a 	srli	r17,r17,1
  803174:	1ca4b03a 	or	r18,r3,r18
  803178:	14a4b03a 	or	r18,r2,r18
  80317c:	4007883a 	mov	r3,r8
  803180:	1880ffc4 	addi	r2,r3,1023
  803184:	0080460e 	bge	zero,r2,8032a0 <__muldf3+0x748>
  803188:	910001cc 	andi	r4,r18,7
  80318c:	20000726 	beq	r4,zero,8031ac <__muldf3+0x654>
  803190:	910003cc 	andi	r4,r18,15
  803194:	01400104 	movi	r5,4
  803198:	21400426 	beq	r4,r5,8031ac <__muldf3+0x654>
  80319c:	9149883a 	add	r4,r18,r5
  8031a0:	24a5803a 	cmpltu	r18,r4,r18
  8031a4:	8ca3883a 	add	r17,r17,r18
  8031a8:	2025883a 	mov	r18,r4
  8031ac:	8900402c 	andhi	r4,r17,256
  8031b0:	20000426 	beq	r4,zero,8031c4 <__muldf3+0x66c>
  8031b4:	18810004 	addi	r2,r3,1024
  8031b8:	00ffc034 	movhi	r3,65280
  8031bc:	18ffffc4 	addi	r3,r3,-1
  8031c0:	88e2703a 	and	r17,r17,r3
  8031c4:	00c1ff84 	movi	r3,2046
  8031c8:	18bf1316 	blt	r3,r2,802e18 <__alt_data_end+0xff802e18>
  8031cc:	882c977a 	slli	r22,r17,29
  8031d0:	9024d0fa 	srli	r18,r18,3
  8031d4:	8822927a 	slli	r17,r17,9
  8031d8:	1081ffcc 	andi	r2,r2,2047
  8031dc:	b4acb03a 	or	r22,r22,r18
  8031e0:	8820d33a 	srli	r16,r17,12
  8031e4:	3027883a 	mov	r19,r6
  8031e8:	003eba06 	br	802cd4 <__alt_data_end+0xff802cd4>
  8031ec:	8080022c 	andhi	r2,r16,8
  8031f0:	10000926 	beq	r2,zero,803218 <__muldf3+0x6c0>
  8031f4:	8880022c 	andhi	r2,r17,8
  8031f8:	1000071e 	bne	r2,zero,803218 <__muldf3+0x6c0>
  8031fc:	00800434 	movhi	r2,16
  803200:	8c000234 	orhi	r16,r17,8
  803204:	10bfffc4 	addi	r2,r2,-1
  803208:	e027883a 	mov	r19,fp
  80320c:	80a0703a 	and	r16,r16,r2
  803210:	902d883a 	mov	r22,r18
  803214:	003f1706 	br	802e74 <__alt_data_end+0xff802e74>
  803218:	00800434 	movhi	r2,16
  80321c:	84000234 	orhi	r16,r16,8
  803220:	10bfffc4 	addi	r2,r2,-1
  803224:	80a0703a 	and	r16,r16,r2
  803228:	003f1206 	br	802e74 <__alt_data_end+0xff802e74>
  80322c:	147ff604 	addi	r17,r2,-40
  803230:	3462983a 	sll	r17,r6,r17
  803234:	0025883a 	mov	r18,zero
  803238:	003ef306 	br	802e08 <__alt_data_end+0xff802e08>
  80323c:	3009883a 	mov	r4,r6
  803240:	d9400215 	stw	r5,8(sp)
  803244:	d9800715 	stw	r6,28(sp)
  803248:	da400415 	stw	r9,16(sp)
  80324c:	da800315 	stw	r10,12(sp)
  803250:	08034440 	call	803444 <__clzsi2>
  803254:	10800804 	addi	r2,r2,32
  803258:	da800317 	ldw	r10,12(sp)
  80325c:	da400417 	ldw	r9,16(sp)
  803260:	d9800717 	ldw	r6,28(sp)
  803264:	d9400217 	ldw	r5,8(sp)
  803268:	003edd06 	br	802de0 <__alt_data_end+0xff802de0>
  80326c:	143ff604 	addi	r16,r2,-40
  803270:	ac20983a 	sll	r16,r21,r16
  803274:	002d883a 	mov	r22,zero
  803278:	003ec106 	br	802d80 <__alt_data_end+0xff802d80>
  80327c:	d9800715 	stw	r6,28(sp)
  803280:	d9c00215 	stw	r7,8(sp)
  803284:	da400415 	stw	r9,16(sp)
  803288:	08034440 	call	803444 <__clzsi2>
  80328c:	10800804 	addi	r2,r2,32
  803290:	da400417 	ldw	r9,16(sp)
  803294:	d9c00217 	ldw	r7,8(sp)
  803298:	d9800717 	ldw	r6,28(sp)
  80329c:	003eae06 	br	802d58 <__alt_data_end+0xff802d58>
  8032a0:	00c00044 	movi	r3,1
  8032a4:	1887c83a 	sub	r3,r3,r2
  8032a8:	01000e04 	movi	r4,56
  8032ac:	20fe8516 	blt	r4,r3,802cc4 <__alt_data_end+0xff802cc4>
  8032b0:	010007c4 	movi	r4,31
  8032b4:	20c01b16 	blt	r4,r3,803324 <__muldf3+0x7cc>
  8032b8:	00800804 	movi	r2,32
  8032bc:	10c5c83a 	sub	r2,r2,r3
  8032c0:	888a983a 	sll	r5,r17,r2
  8032c4:	90c8d83a 	srl	r4,r18,r3
  8032c8:	9084983a 	sll	r2,r18,r2
  8032cc:	88e2d83a 	srl	r17,r17,r3
  8032d0:	2906b03a 	or	r3,r5,r4
  8032d4:	1004c03a 	cmpne	r2,r2,zero
  8032d8:	1886b03a 	or	r3,r3,r2
  8032dc:	188001cc 	andi	r2,r3,7
  8032e0:	10000726 	beq	r2,zero,803300 <__muldf3+0x7a8>
  8032e4:	188003cc 	andi	r2,r3,15
  8032e8:	01000104 	movi	r4,4
  8032ec:	11000426 	beq	r2,r4,803300 <__muldf3+0x7a8>
  8032f0:	1805883a 	mov	r2,r3
  8032f4:	10c00104 	addi	r3,r2,4
  8032f8:	1885803a 	cmpltu	r2,r3,r2
  8032fc:	88a3883a 	add	r17,r17,r2
  803300:	8880202c 	andhi	r2,r17,128
  803304:	10001c26 	beq	r2,zero,803378 <__muldf3+0x820>
  803308:	3027883a 	mov	r19,r6
  80330c:	00800044 	movi	r2,1
  803310:	0021883a 	mov	r16,zero
  803314:	002d883a 	mov	r22,zero
  803318:	003e6e06 	br	802cd4 <__alt_data_end+0xff802cd4>
  80331c:	4007883a 	mov	r3,r8
  803320:	003f9706 	br	803180 <__alt_data_end+0xff803180>
  803324:	017ff844 	movi	r5,-31
  803328:	2885c83a 	sub	r2,r5,r2
  80332c:	888ad83a 	srl	r5,r17,r2
  803330:	00800804 	movi	r2,32
  803334:	18801a26 	beq	r3,r2,8033a0 <__muldf3+0x848>
  803338:	01001004 	movi	r4,64
  80333c:	20c7c83a 	sub	r3,r4,r3
  803340:	88e2983a 	sll	r17,r17,r3
  803344:	8ca4b03a 	or	r18,r17,r18
  803348:	9004c03a 	cmpne	r2,r18,zero
  80334c:	2884b03a 	or	r2,r5,r2
  803350:	144001cc 	andi	r17,r2,7
  803354:	88000d1e 	bne	r17,zero,80338c <__muldf3+0x834>
  803358:	0021883a 	mov	r16,zero
  80335c:	102cd0fa 	srli	r22,r2,3
  803360:	3027883a 	mov	r19,r6
  803364:	0005883a 	mov	r2,zero
  803368:	b46cb03a 	or	r22,r22,r17
  80336c:	003e5906 	br	802cd4 <__alt_data_end+0xff802cd4>
  803370:	1007883a 	mov	r3,r2
  803374:	0023883a 	mov	r17,zero
  803378:	8820927a 	slli	r16,r17,9
  80337c:	1805883a 	mov	r2,r3
  803380:	8822977a 	slli	r17,r17,29
  803384:	8020d33a 	srli	r16,r16,12
  803388:	003ff406 	br	80335c <__alt_data_end+0xff80335c>
  80338c:	10c003cc 	andi	r3,r2,15
  803390:	01000104 	movi	r4,4
  803394:	193ff626 	beq	r3,r4,803370 <__alt_data_end+0xff803370>
  803398:	0023883a 	mov	r17,zero
  80339c:	003fd506 	br	8032f4 <__alt_data_end+0xff8032f4>
  8033a0:	0023883a 	mov	r17,zero
  8033a4:	003fe706 	br	803344 <__alt_data_end+0xff803344>
  8033a8:	00800434 	movhi	r2,16
  8033ac:	8c000234 	orhi	r16,r17,8
  8033b0:	10bfffc4 	addi	r2,r2,-1
  8033b4:	3027883a 	mov	r19,r6
  8033b8:	80a0703a 	and	r16,r16,r2
  8033bc:	902d883a 	mov	r22,r18
  8033c0:	003eac06 	br	802e74 <__alt_data_end+0xff802e74>

008033c4 <__fixdfsi>:
  8033c4:	280cd53a 	srli	r6,r5,20
  8033c8:	00c00434 	movhi	r3,16
  8033cc:	18ffffc4 	addi	r3,r3,-1
  8033d0:	3181ffcc 	andi	r6,r6,2047
  8033d4:	01c0ff84 	movi	r7,1022
  8033d8:	28c6703a 	and	r3,r5,r3
  8033dc:	280ad7fa 	srli	r5,r5,31
  8033e0:	3980120e 	bge	r7,r6,80342c <__fixdfsi+0x68>
  8033e4:	00810744 	movi	r2,1053
  8033e8:	11800c16 	blt	r2,r6,80341c <__fixdfsi+0x58>
  8033ec:	00810cc4 	movi	r2,1075
  8033f0:	1185c83a 	sub	r2,r2,r6
  8033f4:	01c007c4 	movi	r7,31
  8033f8:	18c00434 	orhi	r3,r3,16
  8033fc:	38800d16 	blt	r7,r2,803434 <__fixdfsi+0x70>
  803400:	31befb44 	addi	r6,r6,-1043
  803404:	2084d83a 	srl	r2,r4,r2
  803408:	1986983a 	sll	r3,r3,r6
  80340c:	1884b03a 	or	r2,r3,r2
  803410:	28000726 	beq	r5,zero,803430 <__fixdfsi+0x6c>
  803414:	0085c83a 	sub	r2,zero,r2
  803418:	f800283a 	ret
  80341c:	00a00034 	movhi	r2,32768
  803420:	10bfffc4 	addi	r2,r2,-1
  803424:	2885883a 	add	r2,r5,r2
  803428:	f800283a 	ret
  80342c:	0005883a 	mov	r2,zero
  803430:	f800283a 	ret
  803434:	008104c4 	movi	r2,1043
  803438:	1185c83a 	sub	r2,r2,r6
  80343c:	1884d83a 	srl	r2,r3,r2
  803440:	003ff306 	br	803410 <__alt_data_end+0xff803410>

00803444 <__clzsi2>:
  803444:	00bfffd4 	movui	r2,65535
  803448:	11000536 	bltu	r2,r4,803460 <__clzsi2+0x1c>
  80344c:	00803fc4 	movi	r2,255
  803450:	11000f36 	bltu	r2,r4,803490 <__clzsi2+0x4c>
  803454:	00800804 	movi	r2,32
  803458:	0007883a 	mov	r3,zero
  80345c:	00000506 	br	803474 <__clzsi2+0x30>
  803460:	00804034 	movhi	r2,256
  803464:	10bfffc4 	addi	r2,r2,-1
  803468:	11000c2e 	bgeu	r2,r4,80349c <__clzsi2+0x58>
  80346c:	00800204 	movi	r2,8
  803470:	00c00604 	movi	r3,24
  803474:	20c8d83a 	srl	r4,r4,r3
  803478:	00c02034 	movhi	r3,128
  80347c:	18d549c4 	addi	r3,r3,21799
  803480:	1909883a 	add	r4,r3,r4
  803484:	20c00003 	ldbu	r3,0(r4)
  803488:	10c5c83a 	sub	r2,r2,r3
  80348c:	f800283a 	ret
  803490:	00800604 	movi	r2,24
  803494:	00c00204 	movi	r3,8
  803498:	003ff606 	br	803474 <__alt_data_end+0xff803474>
  80349c:	00800404 	movi	r2,16
  8034a0:	1007883a 	mov	r3,r2
  8034a4:	003ff306 	br	803474 <__alt_data_end+0xff803474>

008034a8 <malloc>:
  8034a8:	00802034 	movhi	r2,128
  8034ac:	1096ec04 	addi	r2,r2,23472
  8034b0:	200b883a 	mov	r5,r4
  8034b4:	11000017 	ldw	r4,0(r2)
  8034b8:	08035d41 	jmpi	8035d4 <_malloc_r>

008034bc <free>:
  8034bc:	00802034 	movhi	r2,128
  8034c0:	1096ec04 	addi	r2,r2,23472
  8034c4:	200b883a 	mov	r5,r4
  8034c8:	11000017 	ldw	r4,0(r2)
  8034cc:	08034f01 	jmpi	8034f0 <_free_r>

008034d0 <memset>:
  8034d0:	2005883a 	mov	r2,r4
  8034d4:	2007883a 	mov	r3,r4
  8034d8:	218d883a 	add	r6,r4,r6
  8034dc:	19800326 	beq	r3,r6,8034ec <memset+0x1c>
  8034e0:	19400005 	stb	r5,0(r3)
  8034e4:	18c00044 	addi	r3,r3,1
  8034e8:	003ffc06 	br	8034dc <__alt_data_end+0xff8034dc>
  8034ec:	f800283a 	ret

008034f0 <_free_r>:
  8034f0:	28003726 	beq	r5,zero,8035d0 <_free_r+0xe0>
  8034f4:	28ffff17 	ldw	r3,-4(r5)
  8034f8:	28bfff04 	addi	r2,r5,-4
  8034fc:	1800010e 	bge	r3,zero,803504 <_free_r+0x14>
  803500:	10c5883a 	add	r2,r2,r3
  803504:	01402034 	movhi	r5,128
  803508:	2957d204 	addi	r5,r5,24392
  80350c:	28c00017 	ldw	r3,0(r5)
  803510:	280d883a 	mov	r6,r5
  803514:	1800031e 	bne	r3,zero,803524 <_free_r+0x34>
  803518:	10000115 	stw	zero,4(r2)
  80351c:	28800015 	stw	r2,0(r5)
  803520:	f800283a 	ret
  803524:	10c00c2e 	bgeu	r2,r3,803558 <_free_r+0x68>
  803528:	11000017 	ldw	r4,0(r2)
  80352c:	110b883a 	add	r5,r2,r4
  803530:	1940041e 	bne	r3,r5,803544 <_free_r+0x54>
  803534:	19400017 	ldw	r5,0(r3)
  803538:	18c00117 	ldw	r3,4(r3)
  80353c:	2909883a 	add	r4,r5,r4
  803540:	11000015 	stw	r4,0(r2)
  803544:	10c00115 	stw	r3,4(r2)
  803548:	30800015 	stw	r2,0(r6)
  80354c:	f800283a 	ret
  803550:	11400336 	bltu	r2,r5,803560 <_free_r+0x70>
  803554:	2807883a 	mov	r3,r5
  803558:	19400117 	ldw	r5,4(r3)
  80355c:	283ffc1e 	bne	r5,zero,803550 <__alt_data_end+0xff803550>
  803560:	19c00017 	ldw	r7,0(r3)
  803564:	19cd883a 	add	r6,r3,r7
  803568:	30800a1e 	bne	r6,r2,803594 <_free_r+0xa4>
  80356c:	10800017 	ldw	r2,0(r2)
  803570:	3885883a 	add	r2,r7,r2
  803574:	18800015 	stw	r2,0(r3)
  803578:	1889883a 	add	r4,r3,r2
  80357c:	2900141e 	bne	r5,r4,8035d0 <_free_r+0xe0>
  803580:	29000017 	ldw	r4,0(r5)
  803584:	2085883a 	add	r2,r4,r2
  803588:	18800015 	stw	r2,0(r3)
  80358c:	28800117 	ldw	r2,4(r5)
  803590:	00000e06 	br	8035cc <_free_r+0xdc>
  803594:	1180032e 	bgeu	r2,r6,8035a4 <_free_r+0xb4>
  803598:	00800304 	movi	r2,12
  80359c:	20800015 	stw	r2,0(r4)
  8035a0:	f800283a 	ret
  8035a4:	11000017 	ldw	r4,0(r2)
  8035a8:	110d883a 	add	r6,r2,r4
  8035ac:	2980061e 	bne	r5,r6,8035c8 <_free_r+0xd8>
  8035b0:	29800017 	ldw	r6,0(r5)
  8035b4:	3109883a 	add	r4,r6,r4
  8035b8:	11000015 	stw	r4,0(r2)
  8035bc:	29000117 	ldw	r4,4(r5)
  8035c0:	11000115 	stw	r4,4(r2)
  8035c4:	00000106 	br	8035cc <_free_r+0xdc>
  8035c8:	11400115 	stw	r5,4(r2)
  8035cc:	18800115 	stw	r2,4(r3)
  8035d0:	f800283a 	ret

008035d4 <_malloc_r>:
  8035d4:	defffb04 	addi	sp,sp,-20
  8035d8:	00bfff04 	movi	r2,-4
  8035dc:	dc400115 	stw	r17,4(sp)
  8035e0:	2c4000c4 	addi	r17,r5,3
  8035e4:	88a2703a 	and	r17,r17,r2
  8035e8:	dc800215 	stw	r18,8(sp)
  8035ec:	dfc00415 	stw	ra,16(sp)
  8035f0:	dcc00315 	stw	r19,12(sp)
  8035f4:	dc000015 	stw	r16,0(sp)
  8035f8:	8c400204 	addi	r17,r17,8
  8035fc:	00800304 	movi	r2,12
  803600:	2025883a 	mov	r18,r4
  803604:	8880022e 	bgeu	r17,r2,803610 <_malloc_r+0x3c>
  803608:	1023883a 	mov	r17,r2
  80360c:	00000506 	br	803624 <_malloc_r+0x50>
  803610:	8800040e 	bge	r17,zero,803624 <_malloc_r+0x50>
  803614:	00800304 	movi	r2,12
  803618:	90800015 	stw	r2,0(r18)
  80361c:	0005883a 	mov	r2,zero
  803620:	00003b06 	br	803710 <_malloc_r+0x13c>
  803624:	897ffb36 	bltu	r17,r5,803614 <__alt_data_end+0xff803614>
  803628:	00802034 	movhi	r2,128
  80362c:	1097d204 	addi	r2,r2,24392
  803630:	10c00017 	ldw	r3,0(r2)
  803634:	1009883a 	mov	r4,r2
  803638:	1821883a 	mov	r16,r3
  80363c:	80000926 	beq	r16,zero,803664 <_malloc_r+0x90>
  803640:	80800017 	ldw	r2,0(r16)
  803644:	1445c83a 	sub	r2,r2,r17
  803648:	10001516 	blt	r2,zero,8036a0 <_malloc_r+0xcc>
  80364c:	014002c4 	movi	r5,11
  803650:	28800d2e 	bgeu	r5,r2,803688 <_malloc_r+0xb4>
  803654:	80800015 	stw	r2,0(r16)
  803658:	80a1883a 	add	r16,r16,r2
  80365c:	84400015 	stw	r17,0(r16)
  803660:	8000221e 	bne	r16,zero,8036ec <_malloc_r+0x118>
  803664:	04002034 	movhi	r16,128
  803668:	8417d104 	addi	r16,r16,24388
  80366c:	80800017 	ldw	r2,0(r16)
  803670:	10000e1e 	bne	r2,zero,8036ac <_malloc_r+0xd8>
  803674:	000b883a 	mov	r5,zero
  803678:	9009883a 	mov	r4,r18
  80367c:	08037b40 	call	8037b4 <_sbrk_r>
  803680:	80800015 	stw	r2,0(r16)
  803684:	00000906 	br	8036ac <_malloc_r+0xd8>
  803688:	80800117 	ldw	r2,4(r16)
  80368c:	1c00021e 	bne	r3,r16,803698 <_malloc_r+0xc4>
  803690:	20800015 	stw	r2,0(r4)
  803694:	00001506 	br	8036ec <_malloc_r+0x118>
  803698:	18800115 	stw	r2,4(r3)
  80369c:	00001306 	br	8036ec <_malloc_r+0x118>
  8036a0:	8007883a 	mov	r3,r16
  8036a4:	84000117 	ldw	r16,4(r16)
  8036a8:	003fe406 	br	80363c <__alt_data_end+0xff80363c>
  8036ac:	880b883a 	mov	r5,r17
  8036b0:	9009883a 	mov	r4,r18
  8036b4:	08037b40 	call	8037b4 <_sbrk_r>
  8036b8:	04ffffc4 	movi	r19,-1
  8036bc:	14ffd526 	beq	r2,r19,803614 <__alt_data_end+0xff803614>
  8036c0:	140000c4 	addi	r16,r2,3
  8036c4:	00ffff04 	movi	r3,-4
  8036c8:	80e0703a 	and	r16,r16,r3
  8036cc:	1400021e 	bne	r2,r16,8036d8 <_malloc_r+0x104>
  8036d0:	84400015 	stw	r17,0(r16)
  8036d4:	00000506 	br	8036ec <_malloc_r+0x118>
  8036d8:	808bc83a 	sub	r5,r16,r2
  8036dc:	9009883a 	mov	r4,r18
  8036e0:	08037b40 	call	8037b4 <_sbrk_r>
  8036e4:	14fffa1e 	bne	r2,r19,8036d0 <__alt_data_end+0xff8036d0>
  8036e8:	003fca06 	br	803614 <__alt_data_end+0xff803614>
  8036ec:	810002c4 	addi	r4,r16,11
  8036f0:	00bffe04 	movi	r2,-8
  8036f4:	80c00104 	addi	r3,r16,4
  8036f8:	2084703a 	and	r2,r4,r2
  8036fc:	10c7c83a 	sub	r3,r2,r3
  803700:	18000326 	beq	r3,zero,803710 <_malloc_r+0x13c>
  803704:	80e1883a 	add	r16,r16,r3
  803708:	00c7c83a 	sub	r3,zero,r3
  80370c:	80c00015 	stw	r3,0(r16)
  803710:	dfc00417 	ldw	ra,16(sp)
  803714:	dcc00317 	ldw	r19,12(sp)
  803718:	dc800217 	ldw	r18,8(sp)
  80371c:	dc400117 	ldw	r17,4(sp)
  803720:	dc000017 	ldw	r16,0(sp)
  803724:	dec00504 	addi	sp,sp,20
  803728:	f800283a 	ret

0080372c <_printf_r>:
  80372c:	defffd04 	addi	sp,sp,-12
  803730:	dfc00015 	stw	ra,0(sp)
  803734:	d9800115 	stw	r6,4(sp)
  803738:	d9c00215 	stw	r7,8(sp)
  80373c:	20c00217 	ldw	r3,8(r4)
  803740:	01802034 	movhi	r6,128
  803744:	31923404 	addi	r6,r6,18640
  803748:	19800115 	stw	r6,4(r3)
  80374c:	280d883a 	mov	r6,r5
  803750:	21400217 	ldw	r5,8(r4)
  803754:	d9c00104 	addi	r7,sp,4
  803758:	08043880 	call	804388 <___vfprintf_internal_r>
  80375c:	dfc00017 	ldw	ra,0(sp)
  803760:	dec00304 	addi	sp,sp,12
  803764:	f800283a 	ret

00803768 <printf>:
  803768:	defffc04 	addi	sp,sp,-16
  80376c:	dfc00015 	stw	ra,0(sp)
  803770:	d9400115 	stw	r5,4(sp)
  803774:	d9800215 	stw	r6,8(sp)
  803778:	d9c00315 	stw	r7,12(sp)
  80377c:	00802034 	movhi	r2,128
  803780:	1096ec04 	addi	r2,r2,23472
  803784:	10800017 	ldw	r2,0(r2)
  803788:	01402034 	movhi	r5,128
  80378c:	29523404 	addi	r5,r5,18640
  803790:	10c00217 	ldw	r3,8(r2)
  803794:	d9800104 	addi	r6,sp,4
  803798:	19400115 	stw	r5,4(r3)
  80379c:	200b883a 	mov	r5,r4
  8037a0:	11000217 	ldw	r4,8(r2)
  8037a4:	08048b40 	call	8048b4 <__vfprintf_internal>
  8037a8:	dfc00017 	ldw	ra,0(sp)
  8037ac:	dec00404 	addi	sp,sp,16
  8037b0:	f800283a 	ret

008037b4 <_sbrk_r>:
  8037b4:	defffd04 	addi	sp,sp,-12
  8037b8:	dc000015 	stw	r16,0(sp)
  8037bc:	04002034 	movhi	r16,128
  8037c0:	dc400115 	stw	r17,4(sp)
  8037c4:	8417d304 	addi	r16,r16,24396
  8037c8:	2023883a 	mov	r17,r4
  8037cc:	2809883a 	mov	r4,r5
  8037d0:	dfc00215 	stw	ra,8(sp)
  8037d4:	80000015 	stw	zero,0(r16)
  8037d8:	0804e840 	call	804e84 <sbrk>
  8037dc:	00ffffc4 	movi	r3,-1
  8037e0:	10c0031e 	bne	r2,r3,8037f0 <_sbrk_r+0x3c>
  8037e4:	80c00017 	ldw	r3,0(r16)
  8037e8:	18000126 	beq	r3,zero,8037f0 <_sbrk_r+0x3c>
  8037ec:	88c00015 	stw	r3,0(r17)
  8037f0:	dfc00217 	ldw	ra,8(sp)
  8037f4:	dc400117 	ldw	r17,4(sp)
  8037f8:	dc000017 	ldw	r16,0(sp)
  8037fc:	dec00304 	addi	sp,sp,12
  803800:	f800283a 	ret

00803804 <_sprintf_r>:
  803804:	defff704 	addi	sp,sp,-36
  803808:	dfc00715 	stw	ra,28(sp)
  80380c:	d9c00815 	stw	r7,32(sp)
  803810:	00808204 	movi	r2,520
  803814:	d880000d 	sth	r2,0(sp)
  803818:	00a00034 	movhi	r2,32768
  80381c:	10bfffc4 	addi	r2,r2,-1
  803820:	d8800515 	stw	r2,20(sp)
  803824:	d8800315 	stw	r2,12(sp)
  803828:	00bfffc4 	movi	r2,-1
  80382c:	d880008d 	sth	r2,2(sp)
  803830:	00802034 	movhi	r2,128
  803834:	d9400415 	stw	r5,16(sp)
  803838:	d9400215 	stw	r5,8(sp)
  80383c:	10926204 	addi	r2,r2,18824
  803840:	d9c00804 	addi	r7,sp,32
  803844:	d80b883a 	mov	r5,sp
  803848:	d8800115 	stw	r2,4(sp)
  80384c:	d8000615 	stw	zero,24(sp)
  803850:	0803dd40 	call	803dd4 <___svfprintf_internal_r>
  803854:	d8c00417 	ldw	r3,16(sp)
  803858:	18000005 	stb	zero,0(r3)
  80385c:	dfc00717 	ldw	ra,28(sp)
  803860:	dec00904 	addi	sp,sp,36
  803864:	f800283a 	ret

00803868 <sprintf>:
  803868:	defff604 	addi	sp,sp,-40
  80386c:	dfc00715 	stw	ra,28(sp)
  803870:	d9800815 	stw	r6,32(sp)
  803874:	d9c00915 	stw	r7,36(sp)
  803878:	00808204 	movi	r2,520
  80387c:	d880000d 	sth	r2,0(sp)
  803880:	00a00034 	movhi	r2,32768
  803884:	10bfffc4 	addi	r2,r2,-1
  803888:	d8800515 	stw	r2,20(sp)
  80388c:	d8800315 	stw	r2,12(sp)
  803890:	00bfffc4 	movi	r2,-1
  803894:	d880008d 	sth	r2,2(sp)
  803898:	00802034 	movhi	r2,128
  80389c:	10926204 	addi	r2,r2,18824
  8038a0:	d8800115 	stw	r2,4(sp)
  8038a4:	00802034 	movhi	r2,128
  8038a8:	1096ec04 	addi	r2,r2,23472
  8038ac:	d9000415 	stw	r4,16(sp)
  8038b0:	d9000215 	stw	r4,8(sp)
  8038b4:	11000017 	ldw	r4,0(r2)
  8038b8:	280d883a 	mov	r6,r5
  8038bc:	d9c00804 	addi	r7,sp,32
  8038c0:	d80b883a 	mov	r5,sp
  8038c4:	d8000615 	stw	zero,24(sp)
  8038c8:	0803dd40 	call	803dd4 <___svfprintf_internal_r>
  8038cc:	d8c00417 	ldw	r3,16(sp)
  8038d0:	18000005 	stb	zero,0(r3)
  8038d4:	dfc00717 	ldw	ra,28(sp)
  8038d8:	dec00a04 	addi	sp,sp,40
  8038dc:	f800283a 	ret

008038e0 <strcmp>:
  8038e0:	20800003 	ldbu	r2,0(r4)
  8038e4:	10c03fcc 	andi	r3,r2,255
  8038e8:	18c0201c 	xori	r3,r3,128
  8038ec:	18ffe004 	addi	r3,r3,-128
  8038f0:	18000526 	beq	r3,zero,803908 <strcmp+0x28>
  8038f4:	29800007 	ldb	r6,0(r5)
  8038f8:	1980031e 	bne	r3,r6,803908 <strcmp+0x28>
  8038fc:	21000044 	addi	r4,r4,1
  803900:	29400044 	addi	r5,r5,1
  803904:	003ff606 	br	8038e0 <__alt_data_end+0xff8038e0>
  803908:	28c00003 	ldbu	r3,0(r5)
  80390c:	10803fcc 	andi	r2,r2,255
  803910:	10c5c83a 	sub	r2,r2,r3
  803914:	f800283a 	ret

00803918 <strcpy>:
  803918:	2005883a 	mov	r2,r4
  80391c:	200d883a 	mov	r6,r4
  803920:	28c00003 	ldbu	r3,0(r5)
  803924:	31800044 	addi	r6,r6,1
  803928:	29400044 	addi	r5,r5,1
  80392c:	30ffffc5 	stb	r3,-1(r6)
  803930:	18c03fcc 	andi	r3,r3,255
  803934:	18c0201c 	xori	r3,r3,128
  803938:	18ffe004 	addi	r3,r3,-128
  80393c:	183ff81e 	bne	r3,zero,803920 <__alt_data_end+0xff803920>
  803940:	f800283a 	ret

00803944 <strlen>:
  803944:	2005883a 	mov	r2,r4
  803948:	10c00007 	ldb	r3,0(r2)
  80394c:	18000226 	beq	r3,zero,803958 <strlen+0x14>
  803950:	10800044 	addi	r2,r2,1
  803954:	003ffc06 	br	803948 <__alt_data_end+0xff803948>
  803958:	1105c83a 	sub	r2,r2,r4
  80395c:	f800283a 	ret

00803960 <strncpy>:
  803960:	2005883a 	mov	r2,r4
  803964:	200f883a 	mov	r7,r4
  803968:	30000c26 	beq	r6,zero,80399c <strncpy+0x3c>
  80396c:	2a000003 	ldbu	r8,0(r5)
  803970:	38c00044 	addi	r3,r7,1
  803974:	31bfffc4 	addi	r6,r6,-1
  803978:	3a000005 	stb	r8,0(r7)
  80397c:	42003fcc 	andi	r8,r8,255
  803980:	4200201c 	xori	r8,r8,128
  803984:	423fe004 	addi	r8,r8,-128
  803988:	29400044 	addi	r5,r5,1
  80398c:	180f883a 	mov	r7,r3
  803990:	403ff51e 	bne	r8,zero,803968 <__alt_data_end+0xff803968>
  803994:	198d883a 	add	r6,r3,r6
  803998:	00000106 	br	8039a0 <strncpy+0x40>
  80399c:	f800283a 	ret
  8039a0:	30c00326 	beq	r6,r3,8039b0 <strncpy+0x50>
  8039a4:	18000005 	stb	zero,0(r3)
  8039a8:	18c00044 	addi	r3,r3,1
  8039ac:	003ffc06 	br	8039a0 <__alt_data_end+0xff8039a0>
  8039b0:	f800283a 	ret

008039b4 <strtok>:
  8039b4:	00802034 	movhi	r2,128
  8039b8:	defffc04 	addi	sp,sp,-16
  8039bc:	1096ec04 	addi	r2,r2,23472
  8039c0:	dc000115 	stw	r16,4(sp)
  8039c4:	14000017 	ldw	r16,0(r2)
  8039c8:	dc400215 	stw	r17,8(sp)
  8039cc:	dfc00315 	stw	ra,12(sp)
  8039d0:	80803617 	ldw	r2,216(r16)
  8039d4:	2023883a 	mov	r17,r4
  8039d8:	1000211e 	bne	r2,zero,803a60 <strtok+0xac>
  8039dc:	01001404 	movi	r4,80
  8039e0:	d9400015 	stw	r5,0(sp)
  8039e4:	08034a80 	call	8034a8 <malloc>
  8039e8:	80803615 	stw	r2,216(r16)
  8039ec:	10000215 	stw	zero,8(r2)
  8039f0:	10000015 	stw	zero,0(r2)
  8039f4:	10000115 	stw	zero,4(r2)
  8039f8:	80803617 	ldw	r2,216(r16)
  8039fc:	10000415 	stw	zero,16(r2)
  803a00:	10000315 	stw	zero,12(r2)
  803a04:	80803617 	ldw	r2,216(r16)
  803a08:	10000615 	stw	zero,24(r2)
  803a0c:	10000515 	stw	zero,20(r2)
  803a10:	80803617 	ldw	r2,216(r16)
  803a14:	10000b15 	stw	zero,44(r2)
  803a18:	10000a15 	stw	zero,40(r2)
  803a1c:	80803617 	ldw	r2,216(r16)
  803a20:	10000d15 	stw	zero,52(r2)
  803a24:	10000c15 	stw	zero,48(r2)
  803a28:	80803617 	ldw	r2,216(r16)
  803a2c:	10000f15 	stw	zero,60(r2)
  803a30:	10000e15 	stw	zero,56(r2)
  803a34:	80803617 	ldw	r2,216(r16)
  803a38:	10001115 	stw	zero,68(r2)
  803a3c:	10001015 	stw	zero,64(r2)
  803a40:	80803617 	ldw	r2,216(r16)
  803a44:	10001315 	stw	zero,76(r2)
  803a48:	10001215 	stw	zero,72(r2)
  803a4c:	80803617 	ldw	r2,216(r16)
  803a50:	10000705 	stb	zero,28(r2)
  803a54:	80803617 	ldw	r2,216(r16)
  803a58:	d9400017 	ldw	r5,0(sp)
  803a5c:	10000915 	stw	zero,36(r2)
  803a60:	81803617 	ldw	r6,216(r16)
  803a64:	01c00044 	movi	r7,1
  803a68:	8809883a 	mov	r4,r17
  803a6c:	dfc00317 	ldw	ra,12(sp)
  803a70:	dc400217 	ldw	r17,8(sp)
  803a74:	dc000117 	ldw	r16,4(sp)
  803a78:	dec00404 	addi	sp,sp,16
  803a7c:	0803a801 	jmpi	803a80 <__strtok_r>

00803a80 <__strtok_r>:
  803a80:	2000021e 	bne	r4,zero,803a8c <__strtok_r+0xc>
  803a84:	31000017 	ldw	r4,0(r6)
  803a88:	20001f26 	beq	r4,zero,803b08 <__strtok_r+0x88>
  803a8c:	2005883a 	mov	r2,r4
  803a90:	12000007 	ldb	r8,0(r2)
  803a94:	21000044 	addi	r4,r4,1
  803a98:	2807883a 	mov	r3,r5
  803a9c:	1a400007 	ldb	r9,0(r3)
  803aa0:	48000626 	beq	r9,zero,803abc <__strtok_r+0x3c>
  803aa4:	18c00044 	addi	r3,r3,1
  803aa8:	427ffc1e 	bne	r8,r9,803a9c <__alt_data_end+0xff803a9c>
  803aac:	383ff71e 	bne	r7,zero,803a8c <__alt_data_end+0xff803a8c>
  803ab0:	31000015 	stw	r4,0(r6)
  803ab4:	10000005 	stb	zero,0(r2)
  803ab8:	f800283a 	ret
  803abc:	4000061e 	bne	r8,zero,803ad8 <__strtok_r+0x58>
  803ac0:	30000015 	stw	zero,0(r6)
  803ac4:	00001006 	br	803b08 <__strtok_r+0x88>
  803ac8:	19c00007 	ldb	r7,0(r3)
  803acc:	51c00826 	beq	r10,r7,803af0 <__strtok_r+0x70>
  803ad0:	18c00044 	addi	r3,r3,1
  803ad4:	383ffc1e 	bne	r7,zero,803ac8 <__alt_data_end+0xff803ac8>
  803ad8:	2011883a 	mov	r8,r4
  803adc:	21000044 	addi	r4,r4,1
  803ae0:	2013883a 	mov	r9,r4
  803ae4:	42800007 	ldb	r10,0(r8)
  803ae8:	2807883a 	mov	r3,r5
  803aec:	003ff606 	br	803ac8 <__alt_data_end+0xff803ac8>
  803af0:	50000226 	beq	r10,zero,803afc <__strtok_r+0x7c>
  803af4:	40000005 	stb	zero,0(r8)
  803af8:	00000106 	br	803b00 <__strtok_r+0x80>
  803afc:	0013883a 	mov	r9,zero
  803b00:	32400015 	stw	r9,0(r6)
  803b04:	f800283a 	ret
  803b08:	0005883a 	mov	r2,zero
  803b0c:	f800283a 	ret

00803b10 <strtok_r>:
  803b10:	01c00044 	movi	r7,1
  803b14:	0803a801 	jmpi	803a80 <__strtok_r>

00803b18 <_strtol_r>:
  803b18:	00802034 	movhi	r2,128
  803b1c:	defff304 	addi	sp,sp,-52
  803b20:	1096ea04 	addi	r2,r2,23464
  803b24:	dcc00615 	stw	r19,24(sp)
  803b28:	14c00017 	ldw	r19,0(r2)
  803b2c:	df000b15 	stw	fp,44(sp)
  803b30:	dd400815 	stw	r21,32(sp)
  803b34:	dd000715 	stw	r20,28(sp)
  803b38:	dc800515 	stw	r18,20(sp)
  803b3c:	202b883a 	mov	r21,r4
  803b40:	dfc00c15 	stw	ra,48(sp)
  803b44:	ddc00a15 	stw	r23,40(sp)
  803b48:	dd800915 	stw	r22,36(sp)
  803b4c:	dc400415 	stw	r17,16(sp)
  803b50:	dc000315 	stw	r16,12(sp)
  803b54:	2829883a 	mov	r20,r5
  803b58:	3039883a 	mov	fp,r6
  803b5c:	3825883a 	mov	r18,r7
  803b60:	2809883a 	mov	r4,r5
  803b64:	2005883a 	mov	r2,r4
  803b68:	14400003 	ldbu	r17,0(r2)
  803b6c:	24000044 	addi	r16,r4,1
  803b70:	8009883a 	mov	r4,r16
  803b74:	9c47883a 	add	r3,r19,r17
  803b78:	18c00043 	ldbu	r3,1(r3)
  803b7c:	18c0020c 	andi	r3,r3,8
  803b80:	183ff81e 	bne	r3,zero,803b64 <__alt_data_end+0xff803b64>
  803b84:	00c00b44 	movi	r3,45
  803b88:	88c0041e 	bne	r17,r3,803b9c <_strtol_r+0x84>
  803b8c:	14000084 	addi	r16,r2,2
  803b90:	14400043 	ldbu	r17,1(r2)
  803b94:	05c00044 	movi	r23,1
  803b98:	00000506 	br	803bb0 <_strtol_r+0x98>
  803b9c:	00c00ac4 	movi	r3,43
  803ba0:	88c0021e 	bne	r17,r3,803bac <_strtol_r+0x94>
  803ba4:	14400043 	ldbu	r17,1(r2)
  803ba8:	14000084 	addi	r16,r2,2
  803bac:	002f883a 	mov	r23,zero
  803bb0:	90000326 	beq	r18,zero,803bc0 <_strtol_r+0xa8>
  803bb4:	00800404 	movi	r2,16
  803bb8:	90800a1e 	bne	r18,r2,803be4 <_strtol_r+0xcc>
  803bbc:	00005406 	br	803d10 <_strtol_r+0x1f8>
  803bc0:	00800c04 	movi	r2,48
  803bc4:	8880501e 	bne	r17,r2,803d08 <_strtol_r+0x1f0>
  803bc8:	80800003 	ldbu	r2,0(r16)
  803bcc:	00c01604 	movi	r3,88
  803bd0:	108037cc 	andi	r2,r2,223
  803bd4:	10c0481e 	bne	r2,r3,803cf8 <_strtol_r+0x1e0>
  803bd8:	84400043 	ldbu	r17,1(r16)
  803bdc:	04800404 	movi	r18,16
  803be0:	84000084 	addi	r16,r16,2
  803be4:	00e00034 	movhi	r3,32768
  803be8:	18ffffc4 	addi	r3,r3,-1
  803bec:	b8c7883a 	add	r3,r23,r3
  803bf0:	1809883a 	mov	r4,r3
  803bf4:	900b883a 	mov	r5,r18
  803bf8:	d8c00015 	stw	r3,0(sp)
  803bfc:	080185c0 	call	80185c <__umodsi3>
  803c00:	d8c00017 	ldw	r3,0(sp)
  803c04:	900b883a 	mov	r5,r18
  803c08:	102d883a 	mov	r22,r2
  803c0c:	1809883a 	mov	r4,r3
  803c10:	08017f80 	call	8017f8 <__udivsi3>
  803c14:	100d883a 	mov	r6,r2
  803c18:	0009883a 	mov	r4,zero
  803c1c:	0005883a 	mov	r2,zero
  803c20:	01c00044 	movi	r7,1
  803c24:	023fffc4 	movi	r8,-1
  803c28:	9c47883a 	add	r3,r19,r17
  803c2c:	18c00043 	ldbu	r3,1(r3)
  803c30:	1940010c 	andi	r5,r3,4
  803c34:	28000226 	beq	r5,zero,803c40 <_strtol_r+0x128>
  803c38:	8c7ff404 	addi	r17,r17,-48
  803c3c:	00000706 	br	803c5c <_strtol_r+0x144>
  803c40:	18c000cc 	andi	r3,r3,3
  803c44:	18001a26 	beq	r3,zero,803cb0 <_strtol_r+0x198>
  803c48:	19c00226 	beq	r3,r7,803c54 <_strtol_r+0x13c>
  803c4c:	00c015c4 	movi	r3,87
  803c50:	00000106 	br	803c58 <_strtol_r+0x140>
  803c54:	00c00dc4 	movi	r3,55
  803c58:	88e3c83a 	sub	r17,r17,r3
  803c5c:	8c80140e 	bge	r17,r18,803cb0 <_strtol_r+0x198>
  803c60:	22001026 	beq	r4,r8,803ca4 <_strtol_r+0x18c>
  803c64:	30800e36 	bltu	r6,r2,803ca0 <_strtol_r+0x188>
  803c68:	1180011e 	bne	r2,r6,803c70 <_strtol_r+0x158>
  803c6c:	b4400c16 	blt	r22,r17,803ca0 <_strtol_r+0x188>
  803c70:	1009883a 	mov	r4,r2
  803c74:	900b883a 	mov	r5,r18
  803c78:	d9800015 	stw	r6,0(sp)
  803c7c:	d9c00115 	stw	r7,4(sp)
  803c80:	da000215 	stw	r8,8(sp)
  803c84:	08018b40 	call	8018b4 <__mulsi3>
  803c88:	8885883a 	add	r2,r17,r2
  803c8c:	01000044 	movi	r4,1
  803c90:	d9800017 	ldw	r6,0(sp)
  803c94:	d9c00117 	ldw	r7,4(sp)
  803c98:	da000217 	ldw	r8,8(sp)
  803c9c:	00000106 	br	803ca4 <_strtol_r+0x18c>
  803ca0:	013fffc4 	movi	r4,-1
  803ca4:	84400003 	ldbu	r17,0(r16)
  803ca8:	84000044 	addi	r16,r16,1
  803cac:	003fde06 	br	803c28 <__alt_data_end+0xff803c28>
  803cb0:	00ffffc4 	movi	r3,-1
  803cb4:	20c0071e 	bne	r4,r3,803cd4 <_strtol_r+0x1bc>
  803cb8:	00a00034 	movhi	r2,32768
  803cbc:	10c5883a 	add	r2,r2,r3
  803cc0:	00c00884 	movi	r3,34
  803cc4:	a8c00015 	stw	r3,0(r21)
  803cc8:	b885883a 	add	r2,r23,r2
  803ccc:	e000051e 	bne	fp,zero,803ce4 <_strtol_r+0x1cc>
  803cd0:	00001206 	br	803d1c <_strtol_r+0x204>
  803cd4:	b8000126 	beq	r23,zero,803cdc <_strtol_r+0x1c4>
  803cd8:	0085c83a 	sub	r2,zero,r2
  803cdc:	e0000f26 	beq	fp,zero,803d1c <_strtol_r+0x204>
  803ce0:	20000226 	beq	r4,zero,803cec <_strtol_r+0x1d4>
  803ce4:	843fffc4 	addi	r16,r16,-1
  803ce8:	00000106 	br	803cf0 <_strtol_r+0x1d8>
  803cec:	a021883a 	mov	r16,r20
  803cf0:	e4000015 	stw	r16,0(fp)
  803cf4:	00000906 	br	803d1c <_strtol_r+0x204>
  803cf8:	04400c04 	movi	r17,48
  803cfc:	903fb91e 	bne	r18,zero,803be4 <__alt_data_end+0xff803be4>
  803d00:	04800204 	movi	r18,8
  803d04:	003fb706 	br	803be4 <__alt_data_end+0xff803be4>
  803d08:	04800284 	movi	r18,10
  803d0c:	003fb506 	br	803be4 <__alt_data_end+0xff803be4>
  803d10:	00800c04 	movi	r2,48
  803d14:	88bfac26 	beq	r17,r2,803bc8 <__alt_data_end+0xff803bc8>
  803d18:	003fb206 	br	803be4 <__alt_data_end+0xff803be4>
  803d1c:	dfc00c17 	ldw	ra,48(sp)
  803d20:	df000b17 	ldw	fp,44(sp)
  803d24:	ddc00a17 	ldw	r23,40(sp)
  803d28:	dd800917 	ldw	r22,36(sp)
  803d2c:	dd400817 	ldw	r21,32(sp)
  803d30:	dd000717 	ldw	r20,28(sp)
  803d34:	dcc00617 	ldw	r19,24(sp)
  803d38:	dc800517 	ldw	r18,20(sp)
  803d3c:	dc400417 	ldw	r17,16(sp)
  803d40:	dc000317 	ldw	r16,12(sp)
  803d44:	dec00d04 	addi	sp,sp,52
  803d48:	f800283a 	ret

00803d4c <strtol>:
  803d4c:	00802034 	movhi	r2,128
  803d50:	1096ec04 	addi	r2,r2,23472
  803d54:	300f883a 	mov	r7,r6
  803d58:	280d883a 	mov	r6,r5
  803d5c:	200b883a 	mov	r5,r4
  803d60:	11000017 	ldw	r4,0(r2)
  803d64:	0803b181 	jmpi	803b18 <_strtol_r>

00803d68 <print_repeat>:
  803d68:	defffb04 	addi	sp,sp,-20
  803d6c:	dc800315 	stw	r18,12(sp)
  803d70:	dc400215 	stw	r17,8(sp)
  803d74:	dc000115 	stw	r16,4(sp)
  803d78:	dfc00415 	stw	ra,16(sp)
  803d7c:	2025883a 	mov	r18,r4
  803d80:	2823883a 	mov	r17,r5
  803d84:	d9800005 	stb	r6,0(sp)
  803d88:	3821883a 	mov	r16,r7
  803d8c:	04000a0e 	bge	zero,r16,803db8 <print_repeat+0x50>
  803d90:	88800117 	ldw	r2,4(r17)
  803d94:	01c00044 	movi	r7,1
  803d98:	d80d883a 	mov	r6,sp
  803d9c:	880b883a 	mov	r5,r17
  803da0:	9009883a 	mov	r4,r18
  803da4:	103ee83a 	callr	r2
  803da8:	843fffc4 	addi	r16,r16,-1
  803dac:	103ff726 	beq	r2,zero,803d8c <__alt_data_end+0xff803d8c>
  803db0:	00bfffc4 	movi	r2,-1
  803db4:	00000106 	br	803dbc <print_repeat+0x54>
  803db8:	0005883a 	mov	r2,zero
  803dbc:	dfc00417 	ldw	ra,16(sp)
  803dc0:	dc800317 	ldw	r18,12(sp)
  803dc4:	dc400217 	ldw	r17,8(sp)
  803dc8:	dc000117 	ldw	r16,4(sp)
  803dcc:	dec00504 	addi	sp,sp,20
  803dd0:	f800283a 	ret

00803dd4 <___svfprintf_internal_r>:
  803dd4:	deffe504 	addi	sp,sp,-108
  803dd8:	d8c00804 	addi	r3,sp,32
  803ddc:	ddc01815 	stw	r23,96(sp)
  803de0:	dd801715 	stw	r22,92(sp)
  803de4:	dd401615 	stw	r21,88(sp)
  803de8:	dd001515 	stw	r20,84(sp)
  803dec:	dcc01415 	stw	r19,80(sp)
  803df0:	dc801315 	stw	r18,76(sp)
  803df4:	dc401215 	stw	r17,72(sp)
  803df8:	dc001115 	stw	r16,68(sp)
  803dfc:	dfc01a15 	stw	ra,104(sp)
  803e00:	df001915 	stw	fp,100(sp)
  803e04:	2029883a 	mov	r20,r4
  803e08:	2823883a 	mov	r17,r5
  803e0c:	382d883a 	mov	r22,r7
  803e10:	d9800f15 	stw	r6,60(sp)
  803e14:	0021883a 	mov	r16,zero
  803e18:	d8000e15 	stw	zero,56(sp)
  803e1c:	d8000a15 	stw	zero,40(sp)
  803e20:	002b883a 	mov	r21,zero
  803e24:	0027883a 	mov	r19,zero
  803e28:	0025883a 	mov	r18,zero
  803e2c:	d8000c15 	stw	zero,48(sp)
  803e30:	d8000b15 	stw	zero,44(sp)
  803e34:	002f883a 	mov	r23,zero
  803e38:	d8c00915 	stw	r3,36(sp)
  803e3c:	d8c00f17 	ldw	r3,60(sp)
  803e40:	19000003 	ldbu	r4,0(r3)
  803e44:	20803fcc 	andi	r2,r4,255
  803e48:	1080201c 	xori	r2,r2,128
  803e4c:	10bfe004 	addi	r2,r2,-128
  803e50:	10011e26 	beq	r2,zero,8042cc <___svfprintf_internal_r+0x4f8>
  803e54:	00c00044 	movi	r3,1
  803e58:	b8c01426 	beq	r23,r3,803eac <___svfprintf_internal_r+0xd8>
  803e5c:	1dc00216 	blt	r3,r23,803e68 <___svfprintf_internal_r+0x94>
  803e60:	b8000626 	beq	r23,zero,803e7c <___svfprintf_internal_r+0xa8>
  803e64:	00011506 	br	8042bc <___svfprintf_internal_r+0x4e8>
  803e68:	01400084 	movi	r5,2
  803e6c:	b9401d26 	beq	r23,r5,803ee4 <___svfprintf_internal_r+0x110>
  803e70:	014000c4 	movi	r5,3
  803e74:	b9402b26 	beq	r23,r5,803f24 <___svfprintf_internal_r+0x150>
  803e78:	00011006 	br	8042bc <___svfprintf_internal_r+0x4e8>
  803e7c:	01400944 	movi	r5,37
  803e80:	1140fc26 	beq	r2,r5,804274 <___svfprintf_internal_r+0x4a0>
  803e84:	88800117 	ldw	r2,4(r17)
  803e88:	d9000005 	stb	r4,0(sp)
  803e8c:	01c00044 	movi	r7,1
  803e90:	d80d883a 	mov	r6,sp
  803e94:	880b883a 	mov	r5,r17
  803e98:	a009883a 	mov	r4,r20
  803e9c:	103ee83a 	callr	r2
  803ea0:	1000d81e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  803ea4:	84000044 	addi	r16,r16,1
  803ea8:	00010406 	br	8042bc <___svfprintf_internal_r+0x4e8>
  803eac:	01400c04 	movi	r5,48
  803eb0:	1140fa26 	beq	r2,r5,80429c <___svfprintf_internal_r+0x4c8>
  803eb4:	01400944 	movi	r5,37
  803eb8:	11400a1e 	bne	r2,r5,803ee4 <___svfprintf_internal_r+0x110>
  803ebc:	d8800005 	stb	r2,0(sp)
  803ec0:	88800117 	ldw	r2,4(r17)
  803ec4:	b80f883a 	mov	r7,r23
  803ec8:	d80d883a 	mov	r6,sp
  803ecc:	880b883a 	mov	r5,r17
  803ed0:	a009883a 	mov	r4,r20
  803ed4:	103ee83a 	callr	r2
  803ed8:	1000ca1e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  803edc:	84000044 	addi	r16,r16,1
  803ee0:	0000f506 	br	8042b8 <___svfprintf_internal_r+0x4e4>
  803ee4:	25fff404 	addi	r23,r4,-48
  803ee8:	bdc03fcc 	andi	r23,r23,255
  803eec:	00c00244 	movi	r3,9
  803ef0:	1dc00936 	bltu	r3,r23,803f18 <___svfprintf_internal_r+0x144>
  803ef4:	00bfffc4 	movi	r2,-1
  803ef8:	90800426 	beq	r18,r2,803f0c <___svfprintf_internal_r+0x138>
  803efc:	01400284 	movi	r5,10
  803f00:	9009883a 	mov	r4,r18
  803f04:	08018b40 	call	8018b4 <__mulsi3>
  803f08:	00000106 	br	803f10 <___svfprintf_internal_r+0x13c>
  803f0c:	0005883a 	mov	r2,zero
  803f10:	b8a5883a 	add	r18,r23,r2
  803f14:	0000e206 	br	8042a0 <___svfprintf_internal_r+0x4cc>
  803f18:	01400b84 	movi	r5,46
  803f1c:	1140e426 	beq	r2,r5,8042b0 <___svfprintf_internal_r+0x4dc>
  803f20:	05c00084 	movi	r23,2
  803f24:	213ff404 	addi	r4,r4,-48
  803f28:	27003fcc 	andi	fp,r4,255
  803f2c:	00c00244 	movi	r3,9
  803f30:	1f000936 	bltu	r3,fp,803f58 <___svfprintf_internal_r+0x184>
  803f34:	00bfffc4 	movi	r2,-1
  803f38:	98800426 	beq	r19,r2,803f4c <___svfprintf_internal_r+0x178>
  803f3c:	01400284 	movi	r5,10
  803f40:	9809883a 	mov	r4,r19
  803f44:	08018b40 	call	8018b4 <__mulsi3>
  803f48:	00000106 	br	803f50 <___svfprintf_internal_r+0x17c>
  803f4c:	0005883a 	mov	r2,zero
  803f50:	e0a7883a 	add	r19,fp,r2
  803f54:	0000d906 	br	8042bc <___svfprintf_internal_r+0x4e8>
  803f58:	00c01b04 	movi	r3,108
  803f5c:	10c0d226 	beq	r2,r3,8042a8 <___svfprintf_internal_r+0x4d4>
  803f60:	013fffc4 	movi	r4,-1
  803f64:	99000226 	beq	r19,r4,803f70 <___svfprintf_internal_r+0x19c>
  803f68:	d8000b15 	stw	zero,44(sp)
  803f6c:	00000106 	br	803f74 <___svfprintf_internal_r+0x1a0>
  803f70:	04c00044 	movi	r19,1
  803f74:	01001a44 	movi	r4,105
  803f78:	11001626 	beq	r2,r4,803fd4 <___svfprintf_internal_r+0x200>
  803f7c:	20800916 	blt	r4,r2,803fa4 <___svfprintf_internal_r+0x1d0>
  803f80:	010018c4 	movi	r4,99
  803f84:	11008826 	beq	r2,r4,8041a8 <___svfprintf_internal_r+0x3d4>
  803f88:	01001904 	movi	r4,100
  803f8c:	11001126 	beq	r2,r4,803fd4 <___svfprintf_internal_r+0x200>
  803f90:	01001604 	movi	r4,88
  803f94:	1100c81e 	bne	r2,r4,8042b8 <___svfprintf_internal_r+0x4e4>
  803f98:	00c00044 	movi	r3,1
  803f9c:	d8c00e15 	stw	r3,56(sp)
  803fa0:	00001506 	br	803ff8 <___svfprintf_internal_r+0x224>
  803fa4:	01001cc4 	movi	r4,115
  803fa8:	11009826 	beq	r2,r4,80420c <___svfprintf_internal_r+0x438>
  803fac:	20800416 	blt	r4,r2,803fc0 <___svfprintf_internal_r+0x1ec>
  803fb0:	01001bc4 	movi	r4,111
  803fb4:	1100c01e 	bne	r2,r4,8042b8 <___svfprintf_internal_r+0x4e4>
  803fb8:	05400204 	movi	r21,8
  803fbc:	00000f06 	br	803ffc <___svfprintf_internal_r+0x228>
  803fc0:	01001d44 	movi	r4,117
  803fc4:	11000d26 	beq	r2,r4,803ffc <___svfprintf_internal_r+0x228>
  803fc8:	01001e04 	movi	r4,120
  803fcc:	11000a26 	beq	r2,r4,803ff8 <___svfprintf_internal_r+0x224>
  803fd0:	0000b906 	br	8042b8 <___svfprintf_internal_r+0x4e4>
  803fd4:	d8c00a17 	ldw	r3,40(sp)
  803fd8:	b7000104 	addi	fp,r22,4
  803fdc:	18000726 	beq	r3,zero,803ffc <___svfprintf_internal_r+0x228>
  803fe0:	df000d15 	stw	fp,52(sp)
  803fe4:	b5c00017 	ldw	r23,0(r22)
  803fe8:	b800080e 	bge	r23,zero,80400c <___svfprintf_internal_r+0x238>
  803fec:	05efc83a 	sub	r23,zero,r23
  803ff0:	02400044 	movi	r9,1
  803ff4:	00000606 	br	804010 <___svfprintf_internal_r+0x23c>
  803ff8:	05400404 	movi	r21,16
  803ffc:	b0c00104 	addi	r3,r22,4
  804000:	d8c00d15 	stw	r3,52(sp)
  804004:	b5c00017 	ldw	r23,0(r22)
  804008:	d8000a15 	stw	zero,40(sp)
  80400c:	0013883a 	mov	r9,zero
  804010:	d839883a 	mov	fp,sp
  804014:	b8001726 	beq	r23,zero,804074 <___svfprintf_internal_r+0x2a0>
  804018:	a80b883a 	mov	r5,r21
  80401c:	b809883a 	mov	r4,r23
  804020:	da401015 	stw	r9,64(sp)
  804024:	08017f80 	call	8017f8 <__udivsi3>
  804028:	a80b883a 	mov	r5,r21
  80402c:	1009883a 	mov	r4,r2
  804030:	102d883a 	mov	r22,r2
  804034:	08018b40 	call	8018b4 <__mulsi3>
  804038:	b885c83a 	sub	r2,r23,r2
  80403c:	00c00244 	movi	r3,9
  804040:	da401017 	ldw	r9,64(sp)
  804044:	18800216 	blt	r3,r2,804050 <___svfprintf_internal_r+0x27c>
  804048:	10800c04 	addi	r2,r2,48
  80404c:	00000506 	br	804064 <___svfprintf_internal_r+0x290>
  804050:	d8c00e17 	ldw	r3,56(sp)
  804054:	18000226 	beq	r3,zero,804060 <___svfprintf_internal_r+0x28c>
  804058:	10800dc4 	addi	r2,r2,55
  80405c:	00000106 	br	804064 <___svfprintf_internal_r+0x290>
  804060:	108015c4 	addi	r2,r2,87
  804064:	e0800005 	stb	r2,0(fp)
  804068:	b02f883a 	mov	r23,r22
  80406c:	e7000044 	addi	fp,fp,1
  804070:	003fe806 	br	804014 <__alt_data_end+0xff804014>
  804074:	e6efc83a 	sub	r23,fp,sp
  804078:	9dc5c83a 	sub	r2,r19,r23
  80407c:	0080090e 	bge	zero,r2,8040a4 <___svfprintf_internal_r+0x2d0>
  804080:	e085883a 	add	r2,fp,r2
  804084:	01400c04 	movi	r5,48
  804088:	d8c00917 	ldw	r3,36(sp)
  80408c:	e009883a 	mov	r4,fp
  804090:	e0c0032e 	bgeu	fp,r3,8040a0 <___svfprintf_internal_r+0x2cc>
  804094:	e7000044 	addi	fp,fp,1
  804098:	21400005 	stb	r5,0(r4)
  80409c:	e0bffa1e 	bne	fp,r2,804088 <__alt_data_end+0xff804088>
  8040a0:	e6efc83a 	sub	r23,fp,sp
  8040a4:	d8c00b17 	ldw	r3,44(sp)
  8040a8:	4dd1883a 	add	r8,r9,r23
  8040ac:	922dc83a 	sub	r22,r18,r8
  8040b0:	18001626 	beq	r3,zero,80410c <___svfprintf_internal_r+0x338>
  8040b4:	48000a26 	beq	r9,zero,8040e0 <___svfprintf_internal_r+0x30c>
  8040b8:	00800b44 	movi	r2,45
  8040bc:	d8800805 	stb	r2,32(sp)
  8040c0:	88800117 	ldw	r2,4(r17)
  8040c4:	01c00044 	movi	r7,1
  8040c8:	d9800804 	addi	r6,sp,32
  8040cc:	880b883a 	mov	r5,r17
  8040d0:	a009883a 	mov	r4,r20
  8040d4:	103ee83a 	callr	r2
  8040d8:	10004a1e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  8040dc:	84000044 	addi	r16,r16,1
  8040e0:	0580070e 	bge	zero,r22,804100 <___svfprintf_internal_r+0x32c>
  8040e4:	b00f883a 	mov	r7,r22
  8040e8:	01800c04 	movi	r6,48
  8040ec:	880b883a 	mov	r5,r17
  8040f0:	a009883a 	mov	r4,r20
  8040f4:	0803d680 	call	803d68 <print_repeat>
  8040f8:	1000421e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  8040fc:	85a1883a 	add	r16,r16,r22
  804100:	e02d883a 	mov	r22,fp
  804104:	bf2fc83a 	sub	r23,r23,fp
  804108:	00002006 	br	80418c <___svfprintf_internal_r+0x3b8>
  80410c:	0580090e 	bge	zero,r22,804134 <___svfprintf_internal_r+0x360>
  804110:	b00f883a 	mov	r7,r22
  804114:	01800804 	movi	r6,32
  804118:	880b883a 	mov	r5,r17
  80411c:	a009883a 	mov	r4,r20
  804120:	da401015 	stw	r9,64(sp)
  804124:	0803d680 	call	803d68 <print_repeat>
  804128:	da401017 	ldw	r9,64(sp)
  80412c:	1000351e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  804130:	85a1883a 	add	r16,r16,r22
  804134:	483ff226 	beq	r9,zero,804100 <__alt_data_end+0xff804100>
  804138:	00800b44 	movi	r2,45
  80413c:	d8800805 	stb	r2,32(sp)
  804140:	88800117 	ldw	r2,4(r17)
  804144:	01c00044 	movi	r7,1
  804148:	d9800804 	addi	r6,sp,32
  80414c:	880b883a 	mov	r5,r17
  804150:	a009883a 	mov	r4,r20
  804154:	103ee83a 	callr	r2
  804158:	10002a1e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  80415c:	84000044 	addi	r16,r16,1
  804160:	003fe706 	br	804100 <__alt_data_end+0xff804100>
  804164:	b5bfffc4 	addi	r22,r22,-1
  804168:	b0800003 	ldbu	r2,0(r22)
  80416c:	01c00044 	movi	r7,1
  804170:	d9800804 	addi	r6,sp,32
  804174:	d8800805 	stb	r2,32(sp)
  804178:	88800117 	ldw	r2,4(r17)
  80417c:	880b883a 	mov	r5,r17
  804180:	a009883a 	mov	r4,r20
  804184:	103ee83a 	callr	r2
  804188:	10001e1e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  80418c:	8585c83a 	sub	r2,r16,r22
  804190:	b5c9883a 	add	r4,r22,r23
  804194:	e085883a 	add	r2,fp,r2
  804198:	013ff216 	blt	zero,r4,804164 <__alt_data_end+0xff804164>
  80419c:	1021883a 	mov	r16,r2
  8041a0:	dd800d17 	ldw	r22,52(sp)
  8041a4:	00004406 	br	8042b8 <___svfprintf_internal_r+0x4e4>
  8041a8:	00800044 	movi	r2,1
  8041ac:	1480080e 	bge	r2,r18,8041d0 <___svfprintf_internal_r+0x3fc>
  8041b0:	95ffffc4 	addi	r23,r18,-1
  8041b4:	b80f883a 	mov	r7,r23
  8041b8:	01800804 	movi	r6,32
  8041bc:	880b883a 	mov	r5,r17
  8041c0:	a009883a 	mov	r4,r20
  8041c4:	0803d680 	call	803d68 <print_repeat>
  8041c8:	10000e1e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  8041cc:	85e1883a 	add	r16,r16,r23
  8041d0:	b0800017 	ldw	r2,0(r22)
  8041d4:	01c00044 	movi	r7,1
  8041d8:	d80d883a 	mov	r6,sp
  8041dc:	d8800005 	stb	r2,0(sp)
  8041e0:	88800117 	ldw	r2,4(r17)
  8041e4:	880b883a 	mov	r5,r17
  8041e8:	a009883a 	mov	r4,r20
  8041ec:	b5c00104 	addi	r23,r22,4
  8041f0:	103ee83a 	callr	r2
  8041f4:	1000031e 	bne	r2,zero,804204 <___svfprintf_internal_r+0x430>
  8041f8:	84000044 	addi	r16,r16,1
  8041fc:	b82d883a 	mov	r22,r23
  804200:	00002d06 	br	8042b8 <___svfprintf_internal_r+0x4e4>
  804204:	00bfffc4 	movi	r2,-1
  804208:	00003106 	br	8042d0 <___svfprintf_internal_r+0x4fc>
  80420c:	b5c00017 	ldw	r23,0(r22)
  804210:	b7000104 	addi	fp,r22,4
  804214:	b809883a 	mov	r4,r23
  804218:	08039440 	call	803944 <strlen>
  80421c:	9091c83a 	sub	r8,r18,r2
  804220:	102d883a 	mov	r22,r2
  804224:	0200090e 	bge	zero,r8,80424c <___svfprintf_internal_r+0x478>
  804228:	400f883a 	mov	r7,r8
  80422c:	01800804 	movi	r6,32
  804230:	880b883a 	mov	r5,r17
  804234:	a009883a 	mov	r4,r20
  804238:	da001015 	stw	r8,64(sp)
  80423c:	0803d680 	call	803d68 <print_repeat>
  804240:	da001017 	ldw	r8,64(sp)
  804244:	103fef1e 	bne	r2,zero,804204 <__alt_data_end+0xff804204>
  804248:	8221883a 	add	r16,r16,r8
  80424c:	88800117 	ldw	r2,4(r17)
  804250:	b00f883a 	mov	r7,r22
  804254:	b80d883a 	mov	r6,r23
  804258:	880b883a 	mov	r5,r17
  80425c:	a009883a 	mov	r4,r20
  804260:	103ee83a 	callr	r2
  804264:	103fe71e 	bne	r2,zero,804204 <__alt_data_end+0xff804204>
  804268:	85a1883a 	add	r16,r16,r22
  80426c:	e02d883a 	mov	r22,fp
  804270:	00001106 	br	8042b8 <___svfprintf_internal_r+0x4e4>
  804274:	00c00044 	movi	r3,1
  804278:	04ffffc4 	movi	r19,-1
  80427c:	d8000e15 	stw	zero,56(sp)
  804280:	d8c00a15 	stw	r3,40(sp)
  804284:	05400284 	movi	r21,10
  804288:	9825883a 	mov	r18,r19
  80428c:	d8000c15 	stw	zero,48(sp)
  804290:	d8000b15 	stw	zero,44(sp)
  804294:	182f883a 	mov	r23,r3
  804298:	00000806 	br	8042bc <___svfprintf_internal_r+0x4e8>
  80429c:	ddc00b15 	stw	r23,44(sp)
  8042a0:	05c00084 	movi	r23,2
  8042a4:	00000506 	br	8042bc <___svfprintf_internal_r+0x4e8>
  8042a8:	00c00044 	movi	r3,1
  8042ac:	d8c00c15 	stw	r3,48(sp)
  8042b0:	05c000c4 	movi	r23,3
  8042b4:	00000106 	br	8042bc <___svfprintf_internal_r+0x4e8>
  8042b8:	002f883a 	mov	r23,zero
  8042bc:	d8c00f17 	ldw	r3,60(sp)
  8042c0:	18c00044 	addi	r3,r3,1
  8042c4:	d8c00f15 	stw	r3,60(sp)
  8042c8:	003edc06 	br	803e3c <__alt_data_end+0xff803e3c>
  8042cc:	8005883a 	mov	r2,r16
  8042d0:	dfc01a17 	ldw	ra,104(sp)
  8042d4:	df001917 	ldw	fp,100(sp)
  8042d8:	ddc01817 	ldw	r23,96(sp)
  8042dc:	dd801717 	ldw	r22,92(sp)
  8042e0:	dd401617 	ldw	r21,88(sp)
  8042e4:	dd001517 	ldw	r20,84(sp)
  8042e8:	dcc01417 	ldw	r19,80(sp)
  8042ec:	dc801317 	ldw	r18,76(sp)
  8042f0:	dc401217 	ldw	r17,72(sp)
  8042f4:	dc001117 	ldw	r16,68(sp)
  8042f8:	dec01b04 	addi	sp,sp,108
  8042fc:	f800283a 	ret

00804300 <__vfprintf_internal_unused>:
  804300:	00802034 	movhi	r2,128
  804304:	1096ec04 	addi	r2,r2,23472
  804308:	300f883a 	mov	r7,r6
  80430c:	280d883a 	mov	r6,r5
  804310:	200b883a 	mov	r5,r4
  804314:	11000017 	ldw	r4,0(r2)
  804318:	0803dd41 	jmpi	803dd4 <___svfprintf_internal_r>

0080431c <print_repeat>:
  80431c:	defffb04 	addi	sp,sp,-20
  804320:	dc800315 	stw	r18,12(sp)
  804324:	dc400215 	stw	r17,8(sp)
  804328:	dc000115 	stw	r16,4(sp)
  80432c:	dfc00415 	stw	ra,16(sp)
  804330:	2025883a 	mov	r18,r4
  804334:	2823883a 	mov	r17,r5
  804338:	d9800005 	stb	r6,0(sp)
  80433c:	3821883a 	mov	r16,r7
  804340:	04000a0e 	bge	zero,r16,80436c <print_repeat+0x50>
  804344:	88800117 	ldw	r2,4(r17)
  804348:	01c00044 	movi	r7,1
  80434c:	d80d883a 	mov	r6,sp
  804350:	880b883a 	mov	r5,r17
  804354:	9009883a 	mov	r4,r18
  804358:	103ee83a 	callr	r2
  80435c:	843fffc4 	addi	r16,r16,-1
  804360:	103ff726 	beq	r2,zero,804340 <__alt_data_end+0xff804340>
  804364:	00bfffc4 	movi	r2,-1
  804368:	00000106 	br	804370 <print_repeat+0x54>
  80436c:	0005883a 	mov	r2,zero
  804370:	dfc00417 	ldw	ra,16(sp)
  804374:	dc800317 	ldw	r18,12(sp)
  804378:	dc400217 	ldw	r17,8(sp)
  80437c:	dc000117 	ldw	r16,4(sp)
  804380:	dec00504 	addi	sp,sp,20
  804384:	f800283a 	ret

00804388 <___vfprintf_internal_r>:
  804388:	deffe504 	addi	sp,sp,-108
  80438c:	d8c00804 	addi	r3,sp,32
  804390:	ddc01815 	stw	r23,96(sp)
  804394:	dd801715 	stw	r22,92(sp)
  804398:	dd401615 	stw	r21,88(sp)
  80439c:	dd001515 	stw	r20,84(sp)
  8043a0:	dcc01415 	stw	r19,80(sp)
  8043a4:	dc801315 	stw	r18,76(sp)
  8043a8:	dc401215 	stw	r17,72(sp)
  8043ac:	dc001115 	stw	r16,68(sp)
  8043b0:	dfc01a15 	stw	ra,104(sp)
  8043b4:	df001915 	stw	fp,100(sp)
  8043b8:	2029883a 	mov	r20,r4
  8043bc:	2823883a 	mov	r17,r5
  8043c0:	382d883a 	mov	r22,r7
  8043c4:	d9800f15 	stw	r6,60(sp)
  8043c8:	0021883a 	mov	r16,zero
  8043cc:	d8000e15 	stw	zero,56(sp)
  8043d0:	d8000a15 	stw	zero,40(sp)
  8043d4:	002b883a 	mov	r21,zero
  8043d8:	0027883a 	mov	r19,zero
  8043dc:	0025883a 	mov	r18,zero
  8043e0:	d8000c15 	stw	zero,48(sp)
  8043e4:	d8000b15 	stw	zero,44(sp)
  8043e8:	002f883a 	mov	r23,zero
  8043ec:	d8c00915 	stw	r3,36(sp)
  8043f0:	d8c00f17 	ldw	r3,60(sp)
  8043f4:	19000003 	ldbu	r4,0(r3)
  8043f8:	20803fcc 	andi	r2,r4,255
  8043fc:	1080201c 	xori	r2,r2,128
  804400:	10bfe004 	addi	r2,r2,-128
  804404:	10011e26 	beq	r2,zero,804880 <___vfprintf_internal_r+0x4f8>
  804408:	00c00044 	movi	r3,1
  80440c:	b8c01426 	beq	r23,r3,804460 <___vfprintf_internal_r+0xd8>
  804410:	1dc00216 	blt	r3,r23,80441c <___vfprintf_internal_r+0x94>
  804414:	b8000626 	beq	r23,zero,804430 <___vfprintf_internal_r+0xa8>
  804418:	00011506 	br	804870 <___vfprintf_internal_r+0x4e8>
  80441c:	01400084 	movi	r5,2
  804420:	b9401d26 	beq	r23,r5,804498 <___vfprintf_internal_r+0x110>
  804424:	014000c4 	movi	r5,3
  804428:	b9402b26 	beq	r23,r5,8044d8 <___vfprintf_internal_r+0x150>
  80442c:	00011006 	br	804870 <___vfprintf_internal_r+0x4e8>
  804430:	01400944 	movi	r5,37
  804434:	1140fc26 	beq	r2,r5,804828 <___vfprintf_internal_r+0x4a0>
  804438:	88800117 	ldw	r2,4(r17)
  80443c:	d9000005 	stb	r4,0(sp)
  804440:	01c00044 	movi	r7,1
  804444:	d80d883a 	mov	r6,sp
  804448:	880b883a 	mov	r5,r17
  80444c:	a009883a 	mov	r4,r20
  804450:	103ee83a 	callr	r2
  804454:	1000d81e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  804458:	84000044 	addi	r16,r16,1
  80445c:	00010406 	br	804870 <___vfprintf_internal_r+0x4e8>
  804460:	01400c04 	movi	r5,48
  804464:	1140fa26 	beq	r2,r5,804850 <___vfprintf_internal_r+0x4c8>
  804468:	01400944 	movi	r5,37
  80446c:	11400a1e 	bne	r2,r5,804498 <___vfprintf_internal_r+0x110>
  804470:	d8800005 	stb	r2,0(sp)
  804474:	88800117 	ldw	r2,4(r17)
  804478:	b80f883a 	mov	r7,r23
  80447c:	d80d883a 	mov	r6,sp
  804480:	880b883a 	mov	r5,r17
  804484:	a009883a 	mov	r4,r20
  804488:	103ee83a 	callr	r2
  80448c:	1000ca1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  804490:	84000044 	addi	r16,r16,1
  804494:	0000f506 	br	80486c <___vfprintf_internal_r+0x4e4>
  804498:	25fff404 	addi	r23,r4,-48
  80449c:	bdc03fcc 	andi	r23,r23,255
  8044a0:	00c00244 	movi	r3,9
  8044a4:	1dc00936 	bltu	r3,r23,8044cc <___vfprintf_internal_r+0x144>
  8044a8:	00bfffc4 	movi	r2,-1
  8044ac:	90800426 	beq	r18,r2,8044c0 <___vfprintf_internal_r+0x138>
  8044b0:	01400284 	movi	r5,10
  8044b4:	9009883a 	mov	r4,r18
  8044b8:	08018b40 	call	8018b4 <__mulsi3>
  8044bc:	00000106 	br	8044c4 <___vfprintf_internal_r+0x13c>
  8044c0:	0005883a 	mov	r2,zero
  8044c4:	b8a5883a 	add	r18,r23,r2
  8044c8:	0000e206 	br	804854 <___vfprintf_internal_r+0x4cc>
  8044cc:	01400b84 	movi	r5,46
  8044d0:	1140e426 	beq	r2,r5,804864 <___vfprintf_internal_r+0x4dc>
  8044d4:	05c00084 	movi	r23,2
  8044d8:	213ff404 	addi	r4,r4,-48
  8044dc:	27003fcc 	andi	fp,r4,255
  8044e0:	00c00244 	movi	r3,9
  8044e4:	1f000936 	bltu	r3,fp,80450c <___vfprintf_internal_r+0x184>
  8044e8:	00bfffc4 	movi	r2,-1
  8044ec:	98800426 	beq	r19,r2,804500 <___vfprintf_internal_r+0x178>
  8044f0:	01400284 	movi	r5,10
  8044f4:	9809883a 	mov	r4,r19
  8044f8:	08018b40 	call	8018b4 <__mulsi3>
  8044fc:	00000106 	br	804504 <___vfprintf_internal_r+0x17c>
  804500:	0005883a 	mov	r2,zero
  804504:	e0a7883a 	add	r19,fp,r2
  804508:	0000d906 	br	804870 <___vfprintf_internal_r+0x4e8>
  80450c:	00c01b04 	movi	r3,108
  804510:	10c0d226 	beq	r2,r3,80485c <___vfprintf_internal_r+0x4d4>
  804514:	013fffc4 	movi	r4,-1
  804518:	99000226 	beq	r19,r4,804524 <___vfprintf_internal_r+0x19c>
  80451c:	d8000b15 	stw	zero,44(sp)
  804520:	00000106 	br	804528 <___vfprintf_internal_r+0x1a0>
  804524:	04c00044 	movi	r19,1
  804528:	01001a44 	movi	r4,105
  80452c:	11001626 	beq	r2,r4,804588 <___vfprintf_internal_r+0x200>
  804530:	20800916 	blt	r4,r2,804558 <___vfprintf_internal_r+0x1d0>
  804534:	010018c4 	movi	r4,99
  804538:	11008826 	beq	r2,r4,80475c <___vfprintf_internal_r+0x3d4>
  80453c:	01001904 	movi	r4,100
  804540:	11001126 	beq	r2,r4,804588 <___vfprintf_internal_r+0x200>
  804544:	01001604 	movi	r4,88
  804548:	1100c81e 	bne	r2,r4,80486c <___vfprintf_internal_r+0x4e4>
  80454c:	00c00044 	movi	r3,1
  804550:	d8c00e15 	stw	r3,56(sp)
  804554:	00001506 	br	8045ac <___vfprintf_internal_r+0x224>
  804558:	01001cc4 	movi	r4,115
  80455c:	11009826 	beq	r2,r4,8047c0 <___vfprintf_internal_r+0x438>
  804560:	20800416 	blt	r4,r2,804574 <___vfprintf_internal_r+0x1ec>
  804564:	01001bc4 	movi	r4,111
  804568:	1100c01e 	bne	r2,r4,80486c <___vfprintf_internal_r+0x4e4>
  80456c:	05400204 	movi	r21,8
  804570:	00000f06 	br	8045b0 <___vfprintf_internal_r+0x228>
  804574:	01001d44 	movi	r4,117
  804578:	11000d26 	beq	r2,r4,8045b0 <___vfprintf_internal_r+0x228>
  80457c:	01001e04 	movi	r4,120
  804580:	11000a26 	beq	r2,r4,8045ac <___vfprintf_internal_r+0x224>
  804584:	0000b906 	br	80486c <___vfprintf_internal_r+0x4e4>
  804588:	d8c00a17 	ldw	r3,40(sp)
  80458c:	b7000104 	addi	fp,r22,4
  804590:	18000726 	beq	r3,zero,8045b0 <___vfprintf_internal_r+0x228>
  804594:	df000d15 	stw	fp,52(sp)
  804598:	b5c00017 	ldw	r23,0(r22)
  80459c:	b800080e 	bge	r23,zero,8045c0 <___vfprintf_internal_r+0x238>
  8045a0:	05efc83a 	sub	r23,zero,r23
  8045a4:	02400044 	movi	r9,1
  8045a8:	00000606 	br	8045c4 <___vfprintf_internal_r+0x23c>
  8045ac:	05400404 	movi	r21,16
  8045b0:	b0c00104 	addi	r3,r22,4
  8045b4:	d8c00d15 	stw	r3,52(sp)
  8045b8:	b5c00017 	ldw	r23,0(r22)
  8045bc:	d8000a15 	stw	zero,40(sp)
  8045c0:	0013883a 	mov	r9,zero
  8045c4:	d839883a 	mov	fp,sp
  8045c8:	b8001726 	beq	r23,zero,804628 <___vfprintf_internal_r+0x2a0>
  8045cc:	a80b883a 	mov	r5,r21
  8045d0:	b809883a 	mov	r4,r23
  8045d4:	da401015 	stw	r9,64(sp)
  8045d8:	08017f80 	call	8017f8 <__udivsi3>
  8045dc:	a80b883a 	mov	r5,r21
  8045e0:	1009883a 	mov	r4,r2
  8045e4:	102d883a 	mov	r22,r2
  8045e8:	08018b40 	call	8018b4 <__mulsi3>
  8045ec:	b885c83a 	sub	r2,r23,r2
  8045f0:	00c00244 	movi	r3,9
  8045f4:	da401017 	ldw	r9,64(sp)
  8045f8:	18800216 	blt	r3,r2,804604 <___vfprintf_internal_r+0x27c>
  8045fc:	10800c04 	addi	r2,r2,48
  804600:	00000506 	br	804618 <___vfprintf_internal_r+0x290>
  804604:	d8c00e17 	ldw	r3,56(sp)
  804608:	18000226 	beq	r3,zero,804614 <___vfprintf_internal_r+0x28c>
  80460c:	10800dc4 	addi	r2,r2,55
  804610:	00000106 	br	804618 <___vfprintf_internal_r+0x290>
  804614:	108015c4 	addi	r2,r2,87
  804618:	e0800005 	stb	r2,0(fp)
  80461c:	b02f883a 	mov	r23,r22
  804620:	e7000044 	addi	fp,fp,1
  804624:	003fe806 	br	8045c8 <__alt_data_end+0xff8045c8>
  804628:	e6efc83a 	sub	r23,fp,sp
  80462c:	9dc5c83a 	sub	r2,r19,r23
  804630:	0080090e 	bge	zero,r2,804658 <___vfprintf_internal_r+0x2d0>
  804634:	e085883a 	add	r2,fp,r2
  804638:	01400c04 	movi	r5,48
  80463c:	d8c00917 	ldw	r3,36(sp)
  804640:	e009883a 	mov	r4,fp
  804644:	e0c0032e 	bgeu	fp,r3,804654 <___vfprintf_internal_r+0x2cc>
  804648:	e7000044 	addi	fp,fp,1
  80464c:	21400005 	stb	r5,0(r4)
  804650:	e0bffa1e 	bne	fp,r2,80463c <__alt_data_end+0xff80463c>
  804654:	e6efc83a 	sub	r23,fp,sp
  804658:	d8c00b17 	ldw	r3,44(sp)
  80465c:	4dd1883a 	add	r8,r9,r23
  804660:	922dc83a 	sub	r22,r18,r8
  804664:	18001626 	beq	r3,zero,8046c0 <___vfprintf_internal_r+0x338>
  804668:	48000a26 	beq	r9,zero,804694 <___vfprintf_internal_r+0x30c>
  80466c:	00800b44 	movi	r2,45
  804670:	d8800805 	stb	r2,32(sp)
  804674:	88800117 	ldw	r2,4(r17)
  804678:	01c00044 	movi	r7,1
  80467c:	d9800804 	addi	r6,sp,32
  804680:	880b883a 	mov	r5,r17
  804684:	a009883a 	mov	r4,r20
  804688:	103ee83a 	callr	r2
  80468c:	10004a1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  804690:	84000044 	addi	r16,r16,1
  804694:	0580070e 	bge	zero,r22,8046b4 <___vfprintf_internal_r+0x32c>
  804698:	b00f883a 	mov	r7,r22
  80469c:	01800c04 	movi	r6,48
  8046a0:	880b883a 	mov	r5,r17
  8046a4:	a009883a 	mov	r4,r20
  8046a8:	080431c0 	call	80431c <print_repeat>
  8046ac:	1000421e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  8046b0:	85a1883a 	add	r16,r16,r22
  8046b4:	e02d883a 	mov	r22,fp
  8046b8:	bf2fc83a 	sub	r23,r23,fp
  8046bc:	00002006 	br	804740 <___vfprintf_internal_r+0x3b8>
  8046c0:	0580090e 	bge	zero,r22,8046e8 <___vfprintf_internal_r+0x360>
  8046c4:	b00f883a 	mov	r7,r22
  8046c8:	01800804 	movi	r6,32
  8046cc:	880b883a 	mov	r5,r17
  8046d0:	a009883a 	mov	r4,r20
  8046d4:	da401015 	stw	r9,64(sp)
  8046d8:	080431c0 	call	80431c <print_repeat>
  8046dc:	da401017 	ldw	r9,64(sp)
  8046e0:	1000351e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  8046e4:	85a1883a 	add	r16,r16,r22
  8046e8:	483ff226 	beq	r9,zero,8046b4 <__alt_data_end+0xff8046b4>
  8046ec:	00800b44 	movi	r2,45
  8046f0:	d8800805 	stb	r2,32(sp)
  8046f4:	88800117 	ldw	r2,4(r17)
  8046f8:	01c00044 	movi	r7,1
  8046fc:	d9800804 	addi	r6,sp,32
  804700:	880b883a 	mov	r5,r17
  804704:	a009883a 	mov	r4,r20
  804708:	103ee83a 	callr	r2
  80470c:	10002a1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  804710:	84000044 	addi	r16,r16,1
  804714:	003fe706 	br	8046b4 <__alt_data_end+0xff8046b4>
  804718:	b5bfffc4 	addi	r22,r22,-1
  80471c:	b0800003 	ldbu	r2,0(r22)
  804720:	01c00044 	movi	r7,1
  804724:	d9800804 	addi	r6,sp,32
  804728:	d8800805 	stb	r2,32(sp)
  80472c:	88800117 	ldw	r2,4(r17)
  804730:	880b883a 	mov	r5,r17
  804734:	a009883a 	mov	r4,r20
  804738:	103ee83a 	callr	r2
  80473c:	10001e1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  804740:	8585c83a 	sub	r2,r16,r22
  804744:	b5c9883a 	add	r4,r22,r23
  804748:	e085883a 	add	r2,fp,r2
  80474c:	013ff216 	blt	zero,r4,804718 <__alt_data_end+0xff804718>
  804750:	1021883a 	mov	r16,r2
  804754:	dd800d17 	ldw	r22,52(sp)
  804758:	00004406 	br	80486c <___vfprintf_internal_r+0x4e4>
  80475c:	00800044 	movi	r2,1
  804760:	1480080e 	bge	r2,r18,804784 <___vfprintf_internal_r+0x3fc>
  804764:	95ffffc4 	addi	r23,r18,-1
  804768:	b80f883a 	mov	r7,r23
  80476c:	01800804 	movi	r6,32
  804770:	880b883a 	mov	r5,r17
  804774:	a009883a 	mov	r4,r20
  804778:	080431c0 	call	80431c <print_repeat>
  80477c:	10000e1e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  804780:	85e1883a 	add	r16,r16,r23
  804784:	b0800017 	ldw	r2,0(r22)
  804788:	01c00044 	movi	r7,1
  80478c:	d80d883a 	mov	r6,sp
  804790:	d8800005 	stb	r2,0(sp)
  804794:	88800117 	ldw	r2,4(r17)
  804798:	880b883a 	mov	r5,r17
  80479c:	a009883a 	mov	r4,r20
  8047a0:	b5c00104 	addi	r23,r22,4
  8047a4:	103ee83a 	callr	r2
  8047a8:	1000031e 	bne	r2,zero,8047b8 <___vfprintf_internal_r+0x430>
  8047ac:	84000044 	addi	r16,r16,1
  8047b0:	b82d883a 	mov	r22,r23
  8047b4:	00002d06 	br	80486c <___vfprintf_internal_r+0x4e4>
  8047b8:	00bfffc4 	movi	r2,-1
  8047bc:	00003106 	br	804884 <___vfprintf_internal_r+0x4fc>
  8047c0:	b5c00017 	ldw	r23,0(r22)
  8047c4:	b7000104 	addi	fp,r22,4
  8047c8:	b809883a 	mov	r4,r23
  8047cc:	08039440 	call	803944 <strlen>
  8047d0:	9091c83a 	sub	r8,r18,r2
  8047d4:	102d883a 	mov	r22,r2
  8047d8:	0200090e 	bge	zero,r8,804800 <___vfprintf_internal_r+0x478>
  8047dc:	400f883a 	mov	r7,r8
  8047e0:	01800804 	movi	r6,32
  8047e4:	880b883a 	mov	r5,r17
  8047e8:	a009883a 	mov	r4,r20
  8047ec:	da001015 	stw	r8,64(sp)
  8047f0:	080431c0 	call	80431c <print_repeat>
  8047f4:	da001017 	ldw	r8,64(sp)
  8047f8:	103fef1e 	bne	r2,zero,8047b8 <__alt_data_end+0xff8047b8>
  8047fc:	8221883a 	add	r16,r16,r8
  804800:	88800117 	ldw	r2,4(r17)
  804804:	b00f883a 	mov	r7,r22
  804808:	b80d883a 	mov	r6,r23
  80480c:	880b883a 	mov	r5,r17
  804810:	a009883a 	mov	r4,r20
  804814:	103ee83a 	callr	r2
  804818:	103fe71e 	bne	r2,zero,8047b8 <__alt_data_end+0xff8047b8>
  80481c:	85a1883a 	add	r16,r16,r22
  804820:	e02d883a 	mov	r22,fp
  804824:	00001106 	br	80486c <___vfprintf_internal_r+0x4e4>
  804828:	00c00044 	movi	r3,1
  80482c:	04ffffc4 	movi	r19,-1
  804830:	d8000e15 	stw	zero,56(sp)
  804834:	d8c00a15 	stw	r3,40(sp)
  804838:	05400284 	movi	r21,10
  80483c:	9825883a 	mov	r18,r19
  804840:	d8000c15 	stw	zero,48(sp)
  804844:	d8000b15 	stw	zero,44(sp)
  804848:	182f883a 	mov	r23,r3
  80484c:	00000806 	br	804870 <___vfprintf_internal_r+0x4e8>
  804850:	ddc00b15 	stw	r23,44(sp)
  804854:	05c00084 	movi	r23,2
  804858:	00000506 	br	804870 <___vfprintf_internal_r+0x4e8>
  80485c:	00c00044 	movi	r3,1
  804860:	d8c00c15 	stw	r3,48(sp)
  804864:	05c000c4 	movi	r23,3
  804868:	00000106 	br	804870 <___vfprintf_internal_r+0x4e8>
  80486c:	002f883a 	mov	r23,zero
  804870:	d8c00f17 	ldw	r3,60(sp)
  804874:	18c00044 	addi	r3,r3,1
  804878:	d8c00f15 	stw	r3,60(sp)
  80487c:	003edc06 	br	8043f0 <__alt_data_end+0xff8043f0>
  804880:	8005883a 	mov	r2,r16
  804884:	dfc01a17 	ldw	ra,104(sp)
  804888:	df001917 	ldw	fp,100(sp)
  80488c:	ddc01817 	ldw	r23,96(sp)
  804890:	dd801717 	ldw	r22,92(sp)
  804894:	dd401617 	ldw	r21,88(sp)
  804898:	dd001517 	ldw	r20,84(sp)
  80489c:	dcc01417 	ldw	r19,80(sp)
  8048a0:	dc801317 	ldw	r18,76(sp)
  8048a4:	dc401217 	ldw	r17,72(sp)
  8048a8:	dc001117 	ldw	r16,68(sp)
  8048ac:	dec01b04 	addi	sp,sp,108
  8048b0:	f800283a 	ret

008048b4 <__vfprintf_internal>:
  8048b4:	00802034 	movhi	r2,128
  8048b8:	1096ec04 	addi	r2,r2,23472
  8048bc:	300f883a 	mov	r7,r6
  8048c0:	280d883a 	mov	r6,r5
  8048c4:	200b883a 	mov	r5,r4
  8048c8:	11000017 	ldw	r4,0(r2)
  8048cc:	08043881 	jmpi	804388 <___vfprintf_internal_r>

008048d0 <__sfvwrite_small_dev>:
  8048d0:	2880000b 	ldhu	r2,0(r5)
  8048d4:	1080020c 	andi	r2,r2,8
  8048d8:	10002126 	beq	r2,zero,804960 <__sfvwrite_small_dev+0x90>
  8048dc:	2880008f 	ldh	r2,2(r5)
  8048e0:	defffa04 	addi	sp,sp,-24
  8048e4:	dc000015 	stw	r16,0(sp)
  8048e8:	dfc00515 	stw	ra,20(sp)
  8048ec:	dd000415 	stw	r20,16(sp)
  8048f0:	dcc00315 	stw	r19,12(sp)
  8048f4:	dc800215 	stw	r18,8(sp)
  8048f8:	dc400115 	stw	r17,4(sp)
  8048fc:	2821883a 	mov	r16,r5
  804900:	10001216 	blt	r2,zero,80494c <__sfvwrite_small_dev+0x7c>
  804904:	2027883a 	mov	r19,r4
  804908:	3025883a 	mov	r18,r6
  80490c:	3823883a 	mov	r17,r7
  804910:	05010004 	movi	r20,1024
  804914:	04400b0e 	bge	zero,r17,804944 <__sfvwrite_small_dev+0x74>
  804918:	880f883a 	mov	r7,r17
  80491c:	a440010e 	bge	r20,r17,804924 <__sfvwrite_small_dev+0x54>
  804920:	01c10004 	movi	r7,1024
  804924:	8140008f 	ldh	r5,2(r16)
  804928:	900d883a 	mov	r6,r18
  80492c:	9809883a 	mov	r4,r19
  804930:	0804a900 	call	804a90 <_write_r>
  804934:	0080050e 	bge	zero,r2,80494c <__sfvwrite_small_dev+0x7c>
  804938:	88a3c83a 	sub	r17,r17,r2
  80493c:	90a5883a 	add	r18,r18,r2
  804940:	003ff406 	br	804914 <__alt_data_end+0xff804914>
  804944:	0005883a 	mov	r2,zero
  804948:	00000706 	br	804968 <__sfvwrite_small_dev+0x98>
  80494c:	8080000b 	ldhu	r2,0(r16)
  804950:	10801014 	ori	r2,r2,64
  804954:	8080000d 	sth	r2,0(r16)
  804958:	00bfffc4 	movi	r2,-1
  80495c:	00000206 	br	804968 <__sfvwrite_small_dev+0x98>
  804960:	00bfffc4 	movi	r2,-1
  804964:	f800283a 	ret
  804968:	dfc00517 	ldw	ra,20(sp)
  80496c:	dd000417 	ldw	r20,16(sp)
  804970:	dcc00317 	ldw	r19,12(sp)
  804974:	dc800217 	ldw	r18,8(sp)
  804978:	dc400117 	ldw	r17,4(sp)
  80497c:	dc000017 	ldw	r16,0(sp)
  804980:	dec00604 	addi	sp,sp,24
  804984:	f800283a 	ret

00804988 <__sfvwrite_small_str>:
  804988:	2880000b 	ldhu	r2,0(r5)
  80498c:	10c0020c 	andi	r3,r2,8
  804990:	18002026 	beq	r3,zero,804a14 <__sfvwrite_small_str+0x8c>
  804994:	28c0008f 	ldh	r3,2(r5)
  804998:	defffd04 	addi	sp,sp,-12
  80499c:	dc000015 	stw	r16,0(sp)
  8049a0:	dfc00215 	stw	ra,8(sp)
  8049a4:	dc400115 	stw	r17,4(sp)
  8049a8:	2821883a 	mov	r16,r5
  8049ac:	1800150e 	bge	r3,zero,804a04 <__sfvwrite_small_str+0x7c>
  8049b0:	10c0800c 	andi	r3,r2,512
  8049b4:	18001326 	beq	r3,zero,804a04 <__sfvwrite_small_str+0x7c>
  8049b8:	2c400517 	ldw	r17,20(r5)
  8049bc:	89c0030e 	bge	r17,r7,8049cc <__sfvwrite_small_str+0x44>
  8049c0:	10c0200c 	andi	r3,r2,128
  8049c4:	18000326 	beq	r3,zero,8049d4 <__sfvwrite_small_str+0x4c>
  8049c8:	00000e06 	br	804a04 <__sfvwrite_small_str+0x7c>
  8049cc:	3c40010e 	bge	r7,r17,8049d4 <__sfvwrite_small_str+0x4c>
  8049d0:	3823883a 	mov	r17,r7
  8049d4:	81000417 	ldw	r4,16(r16)
  8049d8:	300b883a 	mov	r5,r6
  8049dc:	880d883a 	mov	r6,r17
  8049e0:	0804a300 	call	804a30 <memmove>
  8049e4:	80800517 	ldw	r2,20(r16)
  8049e8:	1445c83a 	sub	r2,r2,r17
  8049ec:	80800515 	stw	r2,20(r16)
  8049f0:	80800417 	ldw	r2,16(r16)
  8049f4:	1463883a 	add	r17,r2,r17
  8049f8:	84400415 	stw	r17,16(r16)
  8049fc:	0005883a 	mov	r2,zero
  804a00:	00000606 	br	804a1c <__sfvwrite_small_str+0x94>
  804a04:	10801014 	ori	r2,r2,64
  804a08:	8080000d 	sth	r2,0(r16)
  804a0c:	00bfffc4 	movi	r2,-1
  804a10:	00000206 	br	804a1c <__sfvwrite_small_str+0x94>
  804a14:	00bfffc4 	movi	r2,-1
  804a18:	f800283a 	ret
  804a1c:	dfc00217 	ldw	ra,8(sp)
  804a20:	dc400117 	ldw	r17,4(sp)
  804a24:	dc000017 	ldw	r16,0(sp)
  804a28:	dec00304 	addi	sp,sp,12
  804a2c:	f800283a 	ret

00804a30 <memmove>:
  804a30:	2005883a 	mov	r2,r4
  804a34:	218f883a 	add	r7,r4,r6
  804a38:	29000236 	bltu	r5,r4,804a44 <memmove+0x14>
  804a3c:	1007883a 	mov	r3,r2
  804a40:	00000c06 	br	804a74 <memmove+0x44>
  804a44:	2987883a 	add	r3,r5,r6
  804a48:	20fffc2e 	bgeu	r4,r3,804a3c <__alt_data_end+0xff804a3c>
  804a4c:	380b883a 	mov	r5,r7
  804a50:	30cdc83a 	sub	r6,r6,r3
  804a54:	1989883a 	add	r4,r3,r6
  804a58:	20000526 	beq	r4,zero,804a70 <memmove+0x40>
  804a5c:	18ffffc4 	addi	r3,r3,-1
  804a60:	19000003 	ldbu	r4,0(r3)
  804a64:	297fffc4 	addi	r5,r5,-1
  804a68:	29000005 	stb	r4,0(r5)
  804a6c:	003ff906 	br	804a54 <__alt_data_end+0xff804a54>
  804a70:	f800283a 	ret
  804a74:	19c00526 	beq	r3,r7,804a8c <memmove+0x5c>
  804a78:	29000003 	ldbu	r4,0(r5)
  804a7c:	18c00044 	addi	r3,r3,1
  804a80:	29400044 	addi	r5,r5,1
  804a84:	193fffc5 	stb	r4,-1(r3)
  804a88:	003ffa06 	br	804a74 <__alt_data_end+0xff804a74>
  804a8c:	f800283a 	ret

00804a90 <_write_r>:
  804a90:	defffd04 	addi	sp,sp,-12
  804a94:	dc000015 	stw	r16,0(sp)
  804a98:	04002034 	movhi	r16,128
  804a9c:	dc400115 	stw	r17,4(sp)
  804aa0:	8417d304 	addi	r16,r16,24396
  804aa4:	2023883a 	mov	r17,r4
  804aa8:	2809883a 	mov	r4,r5
  804aac:	300b883a 	mov	r5,r6
  804ab0:	380d883a 	mov	r6,r7
  804ab4:	dfc00215 	stw	ra,8(sp)
  804ab8:	80000015 	stw	zero,0(r16)
  804abc:	0804ed00 	call	804ed0 <write>
  804ac0:	00ffffc4 	movi	r3,-1
  804ac4:	10c0031e 	bne	r2,r3,804ad4 <_write_r+0x44>
  804ac8:	80c00017 	ldw	r3,0(r16)
  804acc:	18000126 	beq	r3,zero,804ad4 <_write_r+0x44>
  804ad0:	88c00015 	stw	r3,0(r17)
  804ad4:	dfc00217 	ldw	ra,8(sp)
  804ad8:	dc400117 	ldw	r17,4(sp)
  804adc:	dc000017 	ldw	r16,0(sp)
  804ae0:	dec00304 	addi	sp,sp,12
  804ae4:	f800283a 	ret

00804ae8 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804ae8:	00802034 	movhi	r2,128
  804aec:	1096d204 	addi	r2,r2,23368
  804af0:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804af4:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804af8:	01002034 	movhi	r4,128
  804afc:	01800044 	movi	r6,1
  804b00:	d80b883a 	mov	r5,sp
  804b04:	2116ef04 	addi	r4,r4,23484
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  804b08:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  804b0c:	0804f780 	call	804f78 <altera_avalon_jtag_uart_read>
  804b10:	0080020e 	bge	zero,r2,804b1c <alt_getchar+0x34>
        return -1;
    }
    return c;
  804b14:	d8800007 	ldb	r2,0(sp)
  804b18:	00000106 	br	804b20 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  804b1c:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  804b20:	dfc00117 	ldw	ra,4(sp)
  804b24:	dec00204 	addi	sp,sp,8
  804b28:	f800283a 	ret

00804b2c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  804b2c:	008007c4 	movi	r2,31
  804b30:	11002136 	bltu	r2,r4,804bb8 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b34:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b38:	00ffff84 	movi	r3,-2
  804b3c:	38c4703a 	and	r2,r7,r3
  804b40:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  804b44:	200490fa 	slli	r2,r4,3
  804b48:	02002034 	movhi	r8,128
  804b4c:	4217de04 	addi	r8,r8,24440
  804b50:	4085883a 	add	r2,r8,r2
  804b54:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
  804b58:	11400115 	stw	r5,4(r2)
  804b5c:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  804b60:	30000726 	beq	r6,zero,804b80 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b64:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b68:	28c6703a 	and	r3,r5,r3
  804b6c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  804b70:	d0e0ec17 	ldw	r3,-31824(gp)
  804b74:	1104983a 	sll	r2,r2,r4
  804b78:	10c4b03a 	or	r2,r2,r3
  804b7c:	00000706 	br	804b9c <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b80:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b84:	28c6703a 	and	r3,r5,r3
  804b88:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  804b8c:	1104983a 	sll	r2,r2,r4
  804b90:	d0e0ec17 	ldw	r3,-31824(gp)
  804b94:	0084303a 	nor	r2,zero,r2
  804b98:	10c4703a 	and	r2,r2,r3
  804b9c:	d0a0ec15 	stw	r2,-31824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  804ba0:	d0a0ec17 	ldw	r2,-31824(gp)
  804ba4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ba8:	2801703a 	wrctl	status,r5
  804bac:	3801703a 	wrctl	status,r7
  804bb0:	0005883a 	mov	r2,zero
  804bb4:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  804bb8:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
  804bbc:	f800283a 	ret

00804bc0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  804bc0:	deffff04 	addi	sp,sp,-4
  804bc4:	01002034 	movhi	r4,128
  804bc8:	01402034 	movhi	r5,128
  804bcc:	dfc00015 	stw	ra,0(sp)
  804bd0:	21162d04 	addi	r4,r4,22708
  804bd4:	2956f604 	addi	r5,r5,23512

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804bd8:	2140061e 	bne	r4,r5,804bf4 <alt_load+0x34>
  804bdc:	01002034 	movhi	r4,128
  804be0:	01402034 	movhi	r5,128
  804be4:	21000804 	addi	r4,r4,32
  804be8:	29400804 	addi	r5,r5,32
  804bec:	2140121e 	bne	r4,r5,804c38 <alt_load+0x78>
  804bf0:	00000b06 	br	804c20 <alt_load+0x60>
  804bf4:	00c02034 	movhi	r3,128
  804bf8:	18d6f604 	addi	r3,r3,23512
  804bfc:	1907c83a 	sub	r3,r3,r4
  804c00:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804c04:	10fff526 	beq	r2,r3,804bdc <__alt_data_end+0xff804bdc>
    {
      *to++ = *from++;
  804c08:	114f883a 	add	r7,r2,r5
  804c0c:	39c00017 	ldw	r7,0(r7)
  804c10:	110d883a 	add	r6,r2,r4
  804c14:	10800104 	addi	r2,r2,4
  804c18:	31c00015 	stw	r7,0(r6)
  804c1c:	003ff906 	br	804c04 <__alt_data_end+0xff804c04>
  804c20:	01002034 	movhi	r4,128
  804c24:	01402034 	movhi	r5,128
  804c28:	2114e704 	addi	r4,r4,21404
  804c2c:	2954e704 	addi	r5,r5,21404

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804c30:	2140101e 	bne	r4,r5,804c74 <alt_load+0xb4>
  804c34:	00000b06 	br	804c64 <alt_load+0xa4>
  804c38:	00c02034 	movhi	r3,128
  804c3c:	18c06004 	addi	r3,r3,384
  804c40:	1907c83a 	sub	r3,r3,r4
  804c44:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804c48:	10fff526 	beq	r2,r3,804c20 <__alt_data_end+0xff804c20>
    {
      *to++ = *from++;
  804c4c:	114f883a 	add	r7,r2,r5
  804c50:	39c00017 	ldw	r7,0(r7)
  804c54:	110d883a 	add	r6,r2,r4
  804c58:	10800104 	addi	r2,r2,4
  804c5c:	31c00015 	stw	r7,0(r6)
  804c60:	003ff906 	br	804c48 <__alt_data_end+0xff804c48>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804c64:	08052000 	call	805200 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  804c68:	dfc00017 	ldw	ra,0(sp)
  804c6c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  804c70:	08052ec1 	jmpi	8052ec <alt_icache_flush_all>
  804c74:	00c02034 	movhi	r3,128
  804c78:	18d62d04 	addi	r3,r3,22708
  804c7c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  804c80:	0005883a 	mov	r2,zero
  {
    while( to != end )
  804c84:	18bff726 	beq	r3,r2,804c64 <__alt_data_end+0xff804c64>
    {
      *to++ = *from++;
  804c88:	114f883a 	add	r7,r2,r5
  804c8c:	39c00017 	ldw	r7,0(r7)
  804c90:	110d883a 	add	r6,r2,r4
  804c94:	10800104 	addi	r2,r2,4
  804c98:	31c00015 	stw	r7,0(r6)
  804c9c:	003ff906 	br	804c84 <__alt_data_end+0xff804c84>

00804ca0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804ca0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804ca4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804ca8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804cac:	0804f300 	call	804f30 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  804cb0:	0804f500 	call	804f50 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804cb4:	d1a0ed17 	ldw	r6,-31820(gp)
  804cb8:	d160ee17 	ldw	r5,-31816(gp)
  804cbc:	d120ef17 	ldw	r4,-31812(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  804cc0:	dfc00017 	ldw	ra,0(sp)
  804cc4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  804cc8:	0800f301 	jmpi	800f30 <main>

00804ccc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  804ccc:	defff204 	addi	sp,sp,-56
  804cd0:	2005883a 	mov	r2,r4
  804cd4:	dfc00a15 	stw	ra,40(sp)
  804cd8:	df000915 	stw	fp,36(sp)
  804cdc:	ddc00815 	stw	r23,32(sp)
  804ce0:	dd800715 	stw	r22,28(sp)
  804ce4:	dd400615 	stw	r21,24(sp)
  804ce8:	dd000515 	stw	r20,20(sp)
  804cec:	dcc00415 	stw	r19,16(sp)
  804cf0:	dc800315 	stw	r18,12(sp)
  804cf4:	dc400215 	stw	r17,8(sp)
  804cf8:	dc000115 	stw	r16,4(sp)
  804cfc:	d9400b15 	stw	r5,44(sp)
  804d00:	d9800c15 	stw	r6,48(sp)
  804d04:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804d08:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  804d0c:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  804d10:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  804d14:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804d18:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804d1c:	11000007 	ldb	r4,0(r2)
  804d20:	20003a26 	beq	r4,zero,804e0c <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  804d24:	24000226 	beq	r4,r16,804d30 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  804d28:	14400044 	addi	r17,r2,1
  804d2c:	00001406 	br	804d80 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  804d30:	14400084 	addi	r17,r2,2
  804d34:	10800047 	ldb	r2,1(r2)
  804d38:	10003426 	beq	r2,zero,804e0c <alt_printf+0x140>
            {
                if (c == '%')
  804d3c:	1400021e 	bne	r2,r16,804d48 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  804d40:	8009883a 	mov	r4,r16
  804d44:	00000e06 	br	804d80 <alt_printf+0xb4>
                } 
                else if (c == 'c')
  804d48:	1480051e 	bne	r2,r18,804d60 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  804d4c:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  804d50:	ad800104 	addi	r22,r21,4
  804d54:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  804d58:	0804e3c0 	call	804e3c <alt_putchar>
  804d5c:	00002906 	br	804e04 <alt_printf+0x138>
                }
                else if (c == 'x')
  804d60:	14c0201e 	bne	r2,r19,804de4 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  804d64:	adc00017 	ldw	r23,0(r21)
  804d68:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  804d6c:	b8000326 	beq	r23,zero,804d7c <alt_printf+0xb0>
  804d70:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804d74:	00c003c4 	movi	r3,15
  804d78:	00000306 	br	804d88 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  804d7c:	01000c04 	movi	r4,48
  804d80:	0804e3c0 	call	804e3c <alt_putchar>
                        continue;
  804d84:	00001f06 	br	804e04 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  804d88:	1d84983a 	sll	r2,r3,r22
  804d8c:	15c4703a 	and	r2,r2,r23
  804d90:	1000021e 	bne	r2,zero,804d9c <alt_printf+0xd0>
                        digit_shift -= 4;
  804d94:	b5bfff04 	addi	r22,r22,-4
  804d98:	003ffb06 	br	804d88 <__alt_data_end+0xff804d88>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804d9c:	070003c4 	movi	fp,15
                        if (digit <= 9)
  804da0:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804da4:	b0001716 	blt	r22,zero,804e04 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  804da8:	e588983a 	sll	r4,fp,r22
  804dac:	25c8703a 	and	r4,r4,r23
  804db0:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  804db4:	19000236 	bltu	r3,r4,804dc0 <alt_printf+0xf4>
                            c = '0' + digit;
  804db8:	21000c04 	addi	r4,r4,48
  804dbc:	00000106 	br	804dc4 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  804dc0:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  804dc4:	21003fcc 	andi	r4,r4,255
  804dc8:	2100201c 	xori	r4,r4,128
  804dcc:	213fe004 	addi	r4,r4,-128
  804dd0:	d8c00015 	stw	r3,0(sp)
  804dd4:	0804e3c0 	call	804e3c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  804dd8:	b5bfff04 	addi	r22,r22,-4
  804ddc:	d8c00017 	ldw	r3,0(sp)
  804de0:	003ff006 	br	804da4 <__alt_data_end+0xff804da4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  804de4:	1500071e 	bne	r2,r20,804e04 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  804de8:	ad800017 	ldw	r22,0(r21)
  804dec:	ad400104 	addi	r21,r21,4

                    while(*s)
  804df0:	b1000007 	ldb	r4,0(r22)
  804df4:	20000326 	beq	r4,zero,804e04 <alt_printf+0x138>
                      alt_putchar(*s++);
  804df8:	b5800044 	addi	r22,r22,1
  804dfc:	0804e3c0 	call	804e3c <alt_putchar>
  804e00:	003ffb06 	br	804df0 <__alt_data_end+0xff804df0>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  804e04:	8805883a 	mov	r2,r17
  804e08:	003fc406 	br	804d1c <__alt_data_end+0xff804d1c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  804e0c:	dfc00a17 	ldw	ra,40(sp)
  804e10:	df000917 	ldw	fp,36(sp)
  804e14:	ddc00817 	ldw	r23,32(sp)
  804e18:	dd800717 	ldw	r22,28(sp)
  804e1c:	dd400617 	ldw	r21,24(sp)
  804e20:	dd000517 	ldw	r20,20(sp)
  804e24:	dcc00417 	ldw	r19,16(sp)
  804e28:	dc800317 	ldw	r18,12(sp)
  804e2c:	dc400217 	ldw	r17,8(sp)
  804e30:	dc000117 	ldw	r16,4(sp)
  804e34:	dec00e04 	addi	sp,sp,56
  804e38:	f800283a 	ret

00804e3c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804e3c:	defffd04 	addi	sp,sp,-12
  804e40:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  804e44:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804e48:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804e4c:	01002034 	movhi	r4,128
  804e50:	000f883a 	mov	r7,zero
  804e54:	01800044 	movi	r6,1
  804e58:	d80b883a 	mov	r5,sp
  804e5c:	2116ef04 	addi	r4,r4,23484
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  804e60:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  804e64:	0804fd40 	call	804fd4 <altera_avalon_jtag_uart_write>
  804e68:	00ffffc4 	movi	r3,-1
  804e6c:	10c00126 	beq	r2,r3,804e74 <alt_putchar+0x38>
        return -1;
    }
    return c;
  804e70:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
  804e74:	dfc00217 	ldw	ra,8(sp)
  804e78:	dc000117 	ldw	r16,4(sp)
  804e7c:	dec00304 	addi	sp,sp,12
  804e80:	f800283a 	ret

00804e84 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804e84:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804e88:	00bfff84 	movi	r2,-2
  804e8c:	2884703a 	and	r2,r5,r2
  804e90:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804e94:	d0a00617 	ldw	r2,-32744(gp)
  804e98:	00ffff04 	movi	r3,-4
  804e9c:	108000c4 	addi	r2,r2,3
  804ea0:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804ea4:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804ea8:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804eac:	1109883a 	add	r4,r2,r4
  804eb0:	18c00004 	addi	r3,r3,0
  804eb4:	1900032e 	bgeu	r3,r4,804ec4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804eb8:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804ebc:	00bfffc4 	movi	r2,-1
  804ec0:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  804ec4:	d1200615 	stw	r4,-32744(gp)
  804ec8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  804ecc:	f800283a 	ret

00804ed0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
  804ed0:	00800044 	movi	r2,1
  804ed4:	20800226 	beq	r4,r2,804ee0 <write+0x10>
  804ed8:	00800084 	movi	r2,2
  804edc:	2080041e 	bne	r4,r2,804ef0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
  804ee0:	01002034 	movhi	r4,128
  804ee4:	000f883a 	mov	r7,zero
  804ee8:	2116ef04 	addi	r4,r4,23484
  804eec:	0804fd41 	jmpi	804fd4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  804ef0:	d0a00d17 	ldw	r2,-32716(gp)
  804ef4:	10000926 	beq	r2,zero,804f1c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  804ef8:	deffff04 	addi	sp,sp,-4
  804efc:	dfc00015 	stw	ra,0(sp)
  804f00:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  804f04:	00c01444 	movi	r3,81
  804f08:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  804f0c:	00bfffc4 	movi	r2,-1
  804f10:	dfc00017 	ldw	ra,0(sp)
  804f14:	dec00104 	addi	sp,sp,4
  804f18:	f800283a 	ret
  804f1c:	d0a0eb04 	addi	r2,gp,-31828
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
  804f20:	00c01444 	movi	r3,81
  804f24:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
  804f28:	00bfffc4 	movi	r2,-1
  804f2c:	f800283a 	ret

00804f30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  804f30:	deffff04 	addi	sp,sp,-4
  804f34:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  804f38:	08052f00 	call	8052f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  804f3c:	00800044 	movi	r2,1
  804f40:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  804f44:	dfc00017 	ldw	ra,0(sp)
  804f48:	dec00104 	addi	sp,sp,4
  804f4c:	f800283a 	ret

00804f50 <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    ALTERA_AVALON_TIMER_INIT ( TIMER3, timer3);
    ALTERA_AVALON_TIMER_INIT ( TIMER4, timer4);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  804f50:	00804034 	movhi	r2,256
  804f54:	10840004 	addi	r2,r2,4096
  804f58:	d0a0f115 	stw	r2,-31804(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  804f5c:	01002034 	movhi	r4,128
  804f60:	0081c9f4 	movhi	r2,1831
  804f64:	10838004 	addi	r2,r2,3584
  804f68:	d1600904 	addi	r5,gp,-32732
  804f6c:	2116c704 	addi	r4,r4,23324
  804f70:	d0a0f015 	stw	r2,-31808(gp)
  804f74:	080520c1 	jmpi	80520c <alt_dev_llist_insert>

00804f78 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  804f78:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  804f7c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  804f80:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  804f84:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  804f88:	11800b2e 	bgeu	r2,r6,804fb8 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  804f8c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  804f90:	1a60000c 	andi	r9,r3,32768
  804f94:	48000326 	beq	r9,zero,804fa4 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  804f98:	10c00005 	stb	r3,0(r2)
  804f9c:	10800044 	addi	r2,r2,1
  804fa0:	003ff906 	br	804f88 <__alt_data_end+0xff804f88>
    else if (ptr != buffer)
  804fa4:	11400226 	beq	r2,r5,804fb0 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  804fa8:	1145c83a 	sub	r2,r2,r5
  804fac:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  804fb0:	403ff526 	beq	r8,zero,804f88 <__alt_data_end+0xff804f88>
  804fb4:	00000106 	br	804fbc <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  804fb8:	117ffb1e 	bne	r2,r5,804fa8 <__alt_data_end+0xff804fa8>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  804fbc:	39d0000c 	andi	r7,r7,16384
  804fc0:	3800021e 	bne	r7,zero,804fcc <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  804fc4:	00bffec4 	movi	r2,-5
  804fc8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  804fcc:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  804fd0:	f800283a 	ret

00804fd4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  804fd4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804fd8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  804fdc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  804fe0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  804fe4:	2980072e 	bgeu	r5,r6,805004 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  804fe8:	38c00037 	ldwio	r3,0(r7)
  804fec:	18ffffec 	andhi	r3,r3,65535
  804ff0:	183ffc26 	beq	r3,zero,804fe4 <__alt_data_end+0xff804fe4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  804ff4:	28c00007 	ldb	r3,0(r5)
  804ff8:	20c00035 	stwio	r3,0(r4)
  804ffc:	29400044 	addi	r5,r5,1
  805000:	003ff806 	br	804fe4 <__alt_data_end+0xff804fe4>

  return count;
}
  805004:	f800283a 	ret

00805008 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  805008:	d0e0f017 	ldw	r3,-31808(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
  80500c:	d0a0f117 	ldw	r2,-31804(gp)

  if (!altera_avalon_timer_ts_freq)
  805010:	18000c26 	beq	r3,zero,805044 <alt_timestamp_start+0x3c>
    return -1;
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  805014:	11000104 	addi	r4,r2,4
  805018:	00c00204 	movi	r3,8
  80501c:	20c00035 	stwio	r3,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  805020:	00ffffd4 	movui	r3,65535
  805024:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  805028:	10c00335 	stwio	r3,12(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  80502c:	10c00435 	stwio	r3,16(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  805030:	10c00535 	stwio	r3,20(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  805034:	00800104 	movi	r2,4
  805038:	20800035 	stwio	r2,0(r4)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  80503c:	0005883a 	mov	r2,zero
  805040:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
  805044:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
  805048:	f800283a 	ret

0080504c <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  80504c:	d0a0f017 	ldw	r2,-31808(gp)
  805050:	10000e26 	beq	r2,zero,80508c <alt_timestamp+0x40>
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
  805054:	d120f117 	ldw	r4,-31804(gp)
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  805058:	20800604 	addi	r2,r4,24
  80505c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  805060:	11400037 	ldwio	r5,0(r2)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  805064:	20800737 	ldwio	r2,28(r4)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  805068:	20c00837 	ldwio	r3,32(r4)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  80506c:	21000937 	ldwio	r4,36(r4)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  805070:	2008943a 	slli	r4,r4,16
  805074:	1004943a 	slli	r2,r2,16
  805078:	297fffcc 	andi	r5,r5,65535
  80507c:	18ffffcc 	andi	r3,r3,65535
  805080:	2884303a 	nor	r2,r5,r2
  805084:	20c6303a 	nor	r3,r4,r3
  805088:	f800283a 	ret
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
  80508c:	00bfffc4 	movi	r2,-1
  805090:	1007883a 	mov	r3,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
  805094:	f800283a 	ret

00805098 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
  805098:	d0a0f017 	ldw	r2,-31808(gp)
  80509c:	f800283a 	ret

008050a0 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
  8050a0:	d1600904 	addi	r5,gp,-32732
  8050a4:	08052781 	jmpi	805278 <alt_find_dev>

008050a8 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
  8050a8:	20800a17 	ldw	r2,40(r4)
  8050ac:	10800023 	ldbuio	r2,0(r2)
  8050b0:	28800005 	stb	r2,0(r5)

	return 0;
}
  8050b4:	0005883a 	mov	r2,zero
  8050b8:	f800283a 	ret

008050bc <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8050bc:	20800a17 	ldw	r2,40(r4)
  8050c0:	29400fcc 	andi	r5,r5,63
  8050c4:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8050c8:	20800a17 	ldw	r2,40(r4)
  8050cc:	10800063 	ldbuio	r2,1(r2)
  8050d0:	30800005 	stb	r2,0(r6)

	return 0;
}
  8050d4:	0005883a 	mov	r2,zero
  8050d8:	f800283a 	ret

008050dc <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8050dc:	20800a17 	ldw	r2,40(r4)
  8050e0:	29400fcc 	andi	r5,r5,63
  8050e4:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
  8050e8:	20800a17 	ldw	r2,40(r4)
  8050ec:	11800065 	stbio	r6,1(r2)

	return 0;
}
  8050f0:	0005883a 	mov	r2,zero
  8050f4:	f800283a 	ret

008050f8 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8050f8:	20800a17 	ldw	r2,40(r4)
  8050fc:	00c00c84 	movi	r3,50
  805100:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805104:	20800a17 	ldw	r2,40(r4)
  805108:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  80510c:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805110:	10803fcc 	andi	r2,r2,255
  805114:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805118:	20800a17 	ldw	r2,40(r4)
  80511c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  805120:	20800a17 	ldw	r2,40(r4)
  805124:	10800063 	ldbuio	r2,1(r2)
  805128:	10803fcc 	andi	r2,r2,255
  80512c:	1006923a 	slli	r3,r2,8
  805130:	28800017 	ldw	r2,0(r5)
  805134:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
  805138:	10e0000c 	andi	r3,r2,32768
  80513c:	18000126 	beq	r3,zero,805144 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
  805140:	10bffff4 	orhi	r2,r2,65535
  805144:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  805148:	0005883a 	mov	r2,zero
  80514c:	f800283a 	ret

00805150 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805150:	20800a17 	ldw	r2,40(r4)
  805154:	00c00d04 	movi	r3,52
  805158:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  80515c:	20800a17 	ldw	r2,40(r4)
  805160:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805164:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  805168:	10803fcc 	andi	r2,r2,255
  80516c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  805170:	20800a17 	ldw	r2,40(r4)
  805174:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  805178:	20800a17 	ldw	r2,40(r4)
  80517c:	10800063 	ldbuio	r2,1(r2)
  805180:	10803fcc 	andi	r2,r2,255
  805184:	1006923a 	slli	r3,r2,8
  805188:	28800017 	ldw	r2,0(r5)
  80518c:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
  805190:	10e0000c 	andi	r3,r2,32768
  805194:	18000126 	beq	r3,zero,80519c <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
  805198:	10bffff4 	orhi	r2,r2,65535
  80519c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  8051a0:	0005883a 	mov	r2,zero
  8051a4:	f800283a 	ret

008051a8 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8051a8:	20800a17 	ldw	r2,40(r4)
  8051ac:	00c00d84 	movi	r3,54
  8051b0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8051b4:	20800a17 	ldw	r2,40(r4)
  8051b8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8051bc:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
  8051c0:	10803fcc 	andi	r2,r2,255
  8051c4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
  8051c8:	20800a17 	ldw	r2,40(r4)
  8051cc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
  8051d0:	20800a17 	ldw	r2,40(r4)
  8051d4:	10800063 	ldbuio	r2,1(r2)
  8051d8:	10803fcc 	andi	r2,r2,255
  8051dc:	1006923a 	slli	r3,r2,8
  8051e0:	28800017 	ldw	r2,0(r5)
  8051e4:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
  8051e8:	10e0000c 	andi	r3,r2,32768
  8051ec:	18000126 	beq	r3,zero,8051f4 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
  8051f0:	10bffff4 	orhi	r2,r2,65535
  8051f4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
  8051f8:	0005883a 	mov	r2,zero
  8051fc:	f800283a 	ret

00805200 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  805200:	f800283a 	ret

00805204 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  805204:	3005883a 	mov	r2,r6
  805208:	f800283a 	ret

0080520c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80520c:	20000226 	beq	r4,zero,805218 <alt_dev_llist_insert+0xc>
  805210:	20800217 	ldw	r2,8(r4)
  805214:	1000101e 	bne	r2,zero,805258 <alt_dev_llist_insert+0x4c>
  805218:	d0a00d17 	ldw	r2,-32716(gp)
  80521c:	10000926 	beq	r2,zero,805244 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  805220:	deffff04 	addi	sp,sp,-4
  805224:	dfc00015 	stw	ra,0(sp)
  805228:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  80522c:	00c00584 	movi	r3,22
  805230:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  805234:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  805238:	dfc00017 	ldw	ra,0(sp)
  80523c:	dec00104 	addi	sp,sp,4
  805240:	f800283a 	ret
  805244:	d0a0eb04 	addi	r2,gp,-31828
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  805248:	00c00584 	movi	r3,22
  80524c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  805250:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  805254:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  805258:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80525c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  805260:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  805264:	28800017 	ldw	r2,0(r5)
  805268:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  80526c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  805270:	0005883a 	mov	r2,zero
  805274:	f800283a 	ret

00805278 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  805278:	defffb04 	addi	sp,sp,-20
  80527c:	dcc00315 	stw	r19,12(sp)
  805280:	dc800215 	stw	r18,8(sp)
  805284:	dc400115 	stw	r17,4(sp)
  805288:	dc000015 	stw	r16,0(sp)
  80528c:	dfc00415 	stw	ra,16(sp)
  805290:	2027883a 	mov	r19,r4
  805294:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  805298:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  80529c:	08039440 	call	803944 <strlen>
  8052a0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8052a4:	84400726 	beq	r16,r17,8052c4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8052a8:	81000217 	ldw	r4,8(r16)
  8052ac:	900d883a 	mov	r6,r18
  8052b0:	980b883a 	mov	r5,r19
  8052b4:	080536c0 	call	80536c <memcmp>
  8052b8:	10000426 	beq	r2,zero,8052cc <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  8052bc:	84000017 	ldw	r16,0(r16)
  8052c0:	003ff806 	br	8052a4 <__alt_data_end+0xff8052a4>
  }
  
  /* No match found */
  
  return NULL;
  8052c4:	0005883a 	mov	r2,zero
  8052c8:	00000106 	br	8052d0 <alt_find_dev+0x58>
  8052cc:	8005883a 	mov	r2,r16
}
  8052d0:	dfc00417 	ldw	ra,16(sp)
  8052d4:	dcc00317 	ldw	r19,12(sp)
  8052d8:	dc800217 	ldw	r18,8(sp)
  8052dc:	dc400117 	ldw	r17,4(sp)
  8052e0:	dc000017 	ldw	r16,0(sp)
  8052e4:	dec00504 	addi	sp,sp,20
  8052e8:	f800283a 	ret

008052ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8052ec:	f800283a 	ret

008052f0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  8052f0:	000170fa 	wrctl	ienable,zero
  8052f4:	f800283a 	ret

008052f8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  8052f8:	213ffe84 	addi	r4,r4,-6
  8052fc:	008003c4 	movi	r2,15
  805300:	11001636 	bltu	r2,r4,80535c <alt_exception_cause_generated_bad_addr+0x64>
  805304:	200890ba 	slli	r4,r4,2
  805308:	00802034 	movhi	r2,128
  80530c:	1094c704 	addi	r2,r2,21276
  805310:	2089883a 	add	r4,r4,r2
  805314:	20800017 	ldw	r2,0(r4)
  805318:	1000683a 	jmp	r2
  80531c:	00805364 	muli	r2,zero,333
  805320:	00805364 	muli	r2,zero,333
  805324:	0080535c 	xori	r2,zero,333
  805328:	0080535c 	xori	r2,zero,333
  80532c:	0080535c 	xori	r2,zero,333
  805330:	00805364 	muli	r2,zero,333
  805334:	0080535c 	xori	r2,zero,333
  805338:	0080535c 	xori	r2,zero,333
  80533c:	00805364 	muli	r2,zero,333
  805340:	00805364 	muli	r2,zero,333
  805344:	0080535c 	xori	r2,zero,333
  805348:	00805364 	muli	r2,zero,333
  80534c:	0080535c 	xori	r2,zero,333
  805350:	0080535c 	xori	r2,zero,333
  805354:	0080535c 	xori	r2,zero,333
  805358:	00805364 	muli	r2,zero,333
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80535c:	0005883a 	mov	r2,zero
  805360:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  805364:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  805368:	f800283a 	ret

0080536c <memcmp>:
  80536c:	218d883a 	add	r6,r4,r6
  805370:	21800826 	beq	r4,r6,805394 <memcmp+0x28>
  805374:	20800003 	ldbu	r2,0(r4)
  805378:	28c00003 	ldbu	r3,0(r5)
  80537c:	10c00226 	beq	r2,r3,805388 <memcmp+0x1c>
  805380:	10c5c83a 	sub	r2,r2,r3
  805384:	f800283a 	ret
  805388:	21000044 	addi	r4,r4,1
  80538c:	29400044 	addi	r5,r5,1
  805390:	003ff706 	br	805370 <__alt_data_end+0xff805370>
  805394:	0005883a 	mov	r2,zero
  805398:	f800283a 	ret
